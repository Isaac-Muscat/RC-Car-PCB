
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e710  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d8  0801e9b0  0801e9b0  0001f9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020e88  08020e88  00021e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020e90  08020e90  00021e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020e94  08020e94  00021e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000050c  24000000  08020e98  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00048ae8  2400050c  080213a4  0002250c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24048ff4  080213a4  00022ff4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002250c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000356b5  00000000  00000000  0002253a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000061e4  00000000  00000000  00057bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026d8  00000000  00000000  0005ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e3f  00000000  00000000  000604b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004099e  00000000  00000000  000622ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037a0f  00000000  00000000  000a2c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00186fb5  00000000  00000000  000da69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00261651  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b8f8  00000000  00000000  00261694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  0026cf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400050c 	.word	0x2400050c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801e998 	.word	0x0801e998

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000510 	.word	0x24000510
 80002dc:	0801e998 	.word	0x0801e998

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fd55 	bl	800219c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f003 fb29 	bl	8003d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f957 	bl	80009a8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 f9cf 	bl	8000a9c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fc87 	bl	8001010 <MX_GPIO_Init>
  MX_MDMA_Init();
 8000702:	f000 fc65 	bl	8000fd0 <MX_MDMA_Init>
  MX_DMA_Init();
 8000706:	f000 fc13 	bl	8000f30 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800070a:	f000 fbbf 	bl	8000e8c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070e:	f01a fb31 	bl	801ad74 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 8000712:	f000 fb01 	bl	8000d18 <MX_JPEG_Init>
  MX_I2C1_Init();
 8000716:	f000 fa7f 	bl	8000c18 <MX_I2C1_Init>
  MX_SPI4_Init();
 800071a:	f000 fb11 	bl	8000d40 <MX_SPI4_Init>
  MX_ADC1_Init();
 800071e:	f000 f9ef 	bl	8000b00 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000722:	f000 fab9 	bl	8000c98 <MX_I2C2_Init>
  MX_TIM5_Init();
 8000726:	f000 fb61 	bl	8000dec <MX_TIM5_Init>
//				  //HAL_UART_Transmit(&huart1, usb_msg, strlen(usb_msg), 1000);
//			  }
//		}


	uint8_t init_result = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 800072e:	2214      	movs	r2, #20
 8000730:	4980      	ldr	r1, [pc, #512]	@ (8000934 <main+0x24c>)
 8000732:	4881      	ldr	r0, [pc, #516]	@ (8000938 <main+0x250>)
 8000734:	f003 ff86 	bl	8004644 <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP STC3100 -- //

	hstc.address = STC_ADDR;
 8000738:	4b80      	ldr	r3, [pc, #512]	@ (800093c <main+0x254>)
 800073a:	2270      	movs	r2, #112	@ 0x70
 800073c:	711a      	strb	r2, [r3, #4]
	hstc.i2c_handle = &hi2c2;
 800073e:	4b7f      	ldr	r3, [pc, #508]	@ (800093c <main+0x254>)
 8000740:	4a7f      	ldr	r2, [pc, #508]	@ (8000940 <main+0x258>)
 8000742:	601a      	str	r2, [r3, #0]
	init_result = STC3100_Init(&hstc);
 8000744:	487d      	ldr	r0, [pc, #500]	@ (800093c <main+0x254>)
 8000746:	f003 fa16 	bl	8003b76 <STC3100_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00f      	beq.n	8000774 <main+0x8c>
		sprintf(usb_msg, "Failed to Init STC3100: %d\r\n", init_result);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	461a      	mov	r2, r3
 8000758:	497a      	ldr	r1, [pc, #488]	@ (8000944 <main+0x25c>)
 800075a:	487b      	ldr	r0, [pc, #492]	@ (8000948 <main+0x260>)
 800075c:	f01b fe10 	bl	801c380 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000760:	4879      	ldr	r0, [pc, #484]	@ (8000948 <main+0x260>)
 8000762:	f7ff fe0d 	bl	8000380 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	4619      	mov	r1, r3
 800076a:	4877      	ldr	r0, [pc, #476]	@ (8000948 <main+0x260>)
 800076c:	f01a fbdc 	bl	801af28 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000770:	f7ff ffa4 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	hssd1.i2c_handle = &hi2c2;
 8000774:	4b75      	ldr	r3, [pc, #468]	@ (800094c <main+0x264>)
 8000776:	4a72      	ldr	r2, [pc, #456]	@ (8000940 <main+0x258>)
 8000778:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800077a:	4b74      	ldr	r3, [pc, #464]	@ (800094c <main+0x264>)
 800077c:	223c      	movs	r2, #60	@ 0x3c
 800077e:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000780:	4b72      	ldr	r3, [pc, #456]	@ (800094c <main+0x264>)
 8000782:	4a73      	ldr	r2, [pc, #460]	@ (8000950 <main+0x268>)
 8000784:	609a      	str	r2, [r3, #8]
	hssd1.draw_inverted = 0;
 8000786:	4b71      	ldr	r3, [pc, #452]	@ (800094c <main+0x264>)
 8000788:	2200      	movs	r2, #0
 800078a:	749a      	strb	r2, [r3, #18]
	hssd1.draw_scale = 0;
 800078c:	4b6f      	ldr	r3, [pc, #444]	@ (800094c <main+0x264>)
 800078e:	2200      	movs	r2, #0
 8000790:	74da      	strb	r2, [r3, #19]
	init_result = SSD1306_Init(&hssd1);
 8000792:	486e      	ldr	r0, [pc, #440]	@ (800094c <main+0x264>)
 8000794:	f002 fbec 	bl	8002f70 <SSD1306_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00f      	beq.n	80007c2 <main+0xda>
		sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	461a      	mov	r2, r3
 80007a6:	496b      	ldr	r1, [pc, #428]	@ (8000954 <main+0x26c>)
 80007a8:	4867      	ldr	r0, [pc, #412]	@ (8000948 <main+0x260>)
 80007aa:	f01b fde9 	bl	801c380 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007ae:	4866      	ldr	r0, [pc, #408]	@ (8000948 <main+0x260>)
 80007b0:	f7ff fde6 	bl	8000380 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4619      	mov	r1, r3
 80007b8:	4863      	ldr	r0, [pc, #396]	@ (8000948 <main+0x260>)
 80007ba:	f01a fbb5 	bl	801af28 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80007be:	f7ff ff7d 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	hssd2.i2c_handle = &hi2c1;
 80007c2:	4b65      	ldr	r3, [pc, #404]	@ (8000958 <main+0x270>)
 80007c4:	4a65      	ldr	r2, [pc, #404]	@ (800095c <main+0x274>)
 80007c6:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 80007c8:	4b63      	ldr	r3, [pc, #396]	@ (8000958 <main+0x270>)
 80007ca:	223c      	movs	r2, #60	@ 0x3c
 80007cc:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 80007ce:	4b62      	ldr	r3, [pc, #392]	@ (8000958 <main+0x270>)
 80007d0:	4a63      	ldr	r2, [pc, #396]	@ (8000960 <main+0x278>)
 80007d2:	609a      	str	r2, [r3, #8]
	hssd2.draw_inverted = 0;
 80007d4:	4b60      	ldr	r3, [pc, #384]	@ (8000958 <main+0x270>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	749a      	strb	r2, [r3, #18]
	hssd2.draw_scale = 0;
 80007da:	4b5f      	ldr	r3, [pc, #380]	@ (8000958 <main+0x270>)
 80007dc:	2200      	movs	r2, #0
 80007de:	74da      	strb	r2, [r3, #19]
	init_result = SSD1306_Init(&hssd2);
 80007e0:	485d      	ldr	r0, [pc, #372]	@ (8000958 <main+0x270>)
 80007e2:	f002 fbc5 	bl	8002f70 <SSD1306_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00f      	beq.n	8000810 <main+0x128>
		sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	461a      	mov	r2, r3
 80007f4:	495b      	ldr	r1, [pc, #364]	@ (8000964 <main+0x27c>)
 80007f6:	4854      	ldr	r0, [pc, #336]	@ (8000948 <main+0x260>)
 80007f8:	f01b fdc2 	bl	801c380 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007fc:	4852      	ldr	r0, [pc, #328]	@ (8000948 <main+0x260>)
 80007fe:	f7ff fdbf 	bl	8000380 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	4619      	mov	r1, r3
 8000806:	4850      	ldr	r0, [pc, #320]	@ (8000948 <main+0x260>)
 8000808:	f01a fb8e 	bl	801af28 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 800080c:	f7ff ff56 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 8000810:	4b55      	ldr	r3, [pc, #340]	@ (8000968 <main+0x280>)
 8000812:	4a56      	ldr	r2, [pc, #344]	@ (800096c <main+0x284>)
 8000814:	601a      	str	r2, [r3, #0]
	hst7789.spi_state = 0;
 8000816:	4b54      	ldr	r3, [pc, #336]	@ (8000968 <main+0x280>)
 8000818:	2200      	movs	r2, #0
 800081a:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 800081c:	4b52      	ldr	r3, [pc, #328]	@ (8000968 <main+0x280>)
 800081e:	4a54      	ldr	r2, [pc, #336]	@ (8000970 <main+0x288>)
 8000820:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 8000822:	4b51      	ldr	r3, [pc, #324]	@ (8000968 <main+0x280>)
 8000824:	2220      	movs	r2, #32
 8000826:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 8000828:	4b4f      	ldr	r3, [pc, #316]	@ (8000968 <main+0x280>)
 800082a:	4a52      	ldr	r2, [pc, #328]	@ (8000974 <main+0x28c>)
 800082c:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 800082e:	484e      	ldr	r0, [pc, #312]	@ (8000968 <main+0x280>)
 8000830:	f002 fdb8 	bl	80033a4 <ST7789_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00f      	beq.n	800085e <main+0x176>
		sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	461a      	mov	r2, r3
 8000842:	494d      	ldr	r1, [pc, #308]	@ (8000978 <main+0x290>)
 8000844:	4840      	ldr	r0, [pc, #256]	@ (8000948 <main+0x260>)
 8000846:	f01b fd9b 	bl	801c380 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800084a:	483f      	ldr	r0, [pc, #252]	@ (8000948 <main+0x260>)
 800084c:	f7ff fd98 	bl	8000380 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	4619      	mov	r1, r3
 8000854:	483c      	ldr	r0, [pc, #240]	@ (8000948 <main+0x260>)
 8000856:	f01a fb67 	bl	801af28 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 800085a:	f7ff ff2f 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}


	ST7789_Clear(&hst7789);		 // Clear the screen
 800085e:	4842      	ldr	r0, [pc, #264]	@ (8000968 <main+0x280>)
 8000860:	f002 febe 	bl	80035e0 <ST7789_Clear>
	ST7789_Draw_NOSIG(&hst7789); // Draw the NOSIG symbol
 8000864:	4840      	ldr	r0, [pc, #256]	@ (8000968 <main+0x280>)
 8000866:	f002 fecd 	bl	8003604 <ST7789_Draw_NOSIG>
	st7789_state = 1;			 // Flag LCD as requested
 800086a:	4b44      	ldr	r3, [pc, #272]	@ (800097c <main+0x294>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]

	// ------------------------------------------------------------ SETUP MENU -- //
	hmenu.ssdL_handle = &hssd1;
 8000870:	4b43      	ldr	r3, [pc, #268]	@ (8000980 <main+0x298>)
 8000872:	4a36      	ldr	r2, [pc, #216]	@ (800094c <main+0x264>)
 8000874:	601a      	str	r2, [r3, #0]
	hmenu.ssdR_handle = &hssd2;
 8000876:	4b42      	ldr	r3, [pc, #264]	@ (8000980 <main+0x298>)
 8000878:	4a37      	ldr	r2, [pc, #220]	@ (8000958 <main+0x270>)
 800087a:	605a      	str	r2, [r3, #4]
	hmenu.page_anim = 0;
 800087c:	4b40      	ldr	r3, [pc, #256]	@ (8000980 <main+0x298>)
 800087e:	2200      	movs	r2, #0
 8000880:	755a      	strb	r2, [r3, #21]
	//hmenu.alert_current_con = 1;
	//hmenu.alert_voltage_con = 1;
	MENU_Init(&hmenu);
 8000882:	483f      	ldr	r0, [pc, #252]	@ (8000980 <main+0x298>)
 8000884:	f017 faec 	bl	8017e60 <MENU_Init>

	// ------------------------------------------------------------ SETUP JPEG DECODE -- //
	// override the header
	// DO NOT MODIFY THE JPEG_RAW BUF BELOW BYTE 526
	memcpy(jpeg_raw1, jpeg_header, JPEG_HEADERSIZE);
 8000888:	4a3e      	ldr	r2, [pc, #248]	@ (8000984 <main+0x29c>)
 800088a:	4b3f      	ldr	r3, [pc, #252]	@ (8000988 <main+0x2a0>)
 800088c:	4610      	mov	r0, r2
 800088e:	4619      	mov	r1, r3
 8000890:	f240 230e 	movw	r3, #526	@ 0x20e
 8000894:	461a      	mov	r2, r3
 8000896:	f01b fe70 	bl	801c57a <memcpy>
	memcpy(jpeg_raw2, jpeg_header, JPEG_HEADERSIZE);
 800089a:	4a3c      	ldr	r2, [pc, #240]	@ (800098c <main+0x2a4>)
 800089c:	4b3a      	ldr	r3, [pc, #232]	@ (8000988 <main+0x2a0>)
 800089e:	4610      	mov	r0, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	f240 230e 	movw	r3, #526	@ 0x20e
 80008a6:	461a      	mov	r2, r3
 80008a8:	f01b fe67 	bl	801c57a <memcpy>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 80008ac:	4b38      	ldr	r3, [pc, #224]	@ (8000990 <main+0x2a8>)
 80008ae:	4a39      	ldr	r2, [pc, #228]	@ (8000994 <main+0x2ac>)
 80008b0:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 5;
 80008b2:	4b37      	ldr	r3, [pc, #220]	@ (8000990 <main+0x2a8>)
 80008b4:	2205      	movs	r2, #5
 80008b6:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 5;
 80008b8:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <main+0x2a8>)
 80008ba:	2205      	movs	r2, #5
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 80008c0:	4833      	ldr	r0, [pc, #204]	@ (8000990 <main+0x2a8>)
 80008c2:	f017 f88e 	bl	80179e2 <XBEE_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00e      	beq.n	80008ea <main+0x202>
		sprintf(ssd_msg, " Failed to Init XBEE");
 80008cc:	4932      	ldr	r1, [pc, #200]	@ (8000998 <main+0x2b0>)
 80008ce:	4833      	ldr	r0, [pc, #204]	@ (800099c <main+0x2b4>)
 80008d0:	f01b fd56 	bl	801c380 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80008d4:	4831      	ldr	r0, [pc, #196]	@ (800099c <main+0x2b4>)
 80008d6:	f7ff fd53 	bl	8000380 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4619      	mov	r1, r3
 80008e0:	482e      	ldr	r0, [pc, #184]	@ (800099c <main+0x2b4>)
 80008e2:	f001 fc35 	bl	8002150 <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80008e6:	f7ff fee9 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK)
 80008ea:	482d      	ldr	r0, [pc, #180]	@ (80009a0 <main+0x2b8>)
 80008ec:	f013 f8a0 	bl	8013a30 <HAL_TIM_Base_Start_IT>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00e      	beq.n	8000914 <main+0x22c>
	{
		sprintf(ssd_msg, " Failed to Start Watchdog");
 80008f6:	492b      	ldr	r1, [pc, #172]	@ (80009a4 <main+0x2bc>)
 80008f8:	4828      	ldr	r0, [pc, #160]	@ (800099c <main+0x2b4>)
 80008fa:	f01b fd41 	bl	801c380 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80008fe:	4827      	ldr	r0, [pc, #156]	@ (800099c <main+0x2b4>)
 8000900:	f7ff fd3e 	bl	8000380 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4619      	mov	r1, r3
 800090a:	4824      	ldr	r0, [pc, #144]	@ (800099c <main+0x2b4>)
 800090c:	f001 fc20 	bl	8002150 <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000910:	f7ff fed4 	bl	80006bc <__NVIC_SystemReset>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();		// Process any incoming packets
 8000914:	f000 fd3a 	bl	800138c <SCH_XBeeRX>
		SCH_PowerMon();		// Monitor Power
 8000918:	f000 fdf2 	bl	8001500 <SCH_PowerMon>
		SCH_GetInputs();	// Get user inputs
 800091c:	f001 f806 	bl	800192c <SCH_GetInputs>
		SCH_OLEDUpdate();	// Update the OLEDs
 8000920:	f000 ffba 	bl	8001898 <SCH_OLEDUpdate>
		SCH_LCDUpdate();	// Update the LCD
 8000924:	f000 ffec 	bl	8001900 <SCH_LCDUpdate>
		// Don't SEND anything
		// Don't bother processing images
		// Don't update the screen
		//if (wdog_network < WDOG_NETWORK_CUTOFF) {

			SCH_XBeeTX();		// Send any neccesarry outgoing packets
 8000928:	f000 fda4 	bl	8001474 <SCH_XBeeTX>
			SCH_ImageDecode();	// Decode pending MCU blocks
 800092c:	f000 fe60 	bl	80015f0 <SCH_ImageDecode>
		SCH_XBeeRX();		// Process any incoming packets
 8000930:	e7f0      	b.n	8000914 <main+0x22c>
 8000932:	bf00      	nop
 8000934:	24026ca0 	.word	0x24026ca0
 8000938:	24000528 	.word	0x24000528
 800093c:	24026cd4 	.word	0x24026cd4
 8000940:	24000658 	.word	0x24000658
 8000944:	0801e9b0 	.word	0x0801e9b0
 8000948:	240013d4 	.word	0x240013d4
 800094c:	24000b48 	.word	0x24000b48
 8000950:	24000b70 	.word	0x24000b70
 8000954:	0801e9d0 	.word	0x0801e9d0
 8000958:	24000b5c 	.word	0x24000b5c
 800095c:	24000604 	.word	0x24000604
 8000960:	24000f70 	.word	0x24000f70
 8000964:	0801e9ec 	.word	0x0801e9ec
 8000968:	24001484 	.word	0x24001484
 800096c:	240008cc 	.word	0x240008cc
 8000970:	58021000 	.word	0x58021000
 8000974:	2400149c 	.word	0x2400149c
 8000978:	0801ea08 	.word	0x0801ea08
 800097c:	24026c9c 	.word	0x24026c9c
 8000980:	24001438 	.word	0x24001438
 8000984:	24026d30 	.word	0x24026d30
 8000988:	24000030 	.word	0x24000030
 800098c:	240319b0 	.word	0x240319b0
 8000990:	24026cfc 	.word	0x24026cfc
 8000994:	24000a18 	.word	0x24000a18
 8000998:	0801ea24 	.word	0x0801ea24
 800099c:	24001370 	.word	0x24001370
 80009a0:	240009cc 	.word	0x240009cc
 80009a4:	0801ea3c 	.word	0x0801ea3c

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	@ 0x70
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	224c      	movs	r2, #76	@ 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f01b fd47 	bl	801c44a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2220      	movs	r2, #32
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f01b fd41 	bl	801c44a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009c8:	2002      	movs	r0, #2
 80009ca:	f00e fb01 	bl	800efd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <SystemClock_Config+0xec>)
 80009d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d6:	4a2f      	ldr	r2, [pc, #188]	@ (8000a94 <SystemClock_Config+0xec>)
 80009d8:	f023 0301 	bic.w	r3, r3, #1
 80009dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <SystemClock_Config+0xec>)
 80009e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a98 <SystemClock_Config+0xf0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000a98 <SystemClock_Config+0xf0>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b28      	ldr	r3, [pc, #160]	@ (8000a98 <SystemClock_Config+0xf0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a00:	bf00      	nop
 8000a02:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <SystemClock_Config+0xf0>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a0e:	d1f8      	bne.n	8000a02 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a10:	2301      	movs	r3, #1
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a26:	2318      	movs	r3, #24
 8000a28:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000a2e:	2306      	movs	r3, #6
 8000a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a36:	230c      	movs	r3, #12
 8000a38:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00e fb0c 	bl	800f064 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a52:	f001 fbcf 	bl	80021f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	233f      	movs	r3, #63	@ 0x3f
 8000a58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a66:	2340      	movs	r3, #64	@ 0x40
 8000a68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a6a:	2340      	movs	r3, #64	@ 0x40
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a74:	2340      	movs	r3, #64	@ 0x40
 8000a76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f00e ff4b 	bl	800f918 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a88:	f001 fbb4 	bl	80021f4 <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3770      	adds	r7, #112	@ 0x70
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	58000400 	.word	0x58000400
 8000a98:	58024800 	.word	0x58024800

08000a9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0b0      	sub	sp, #192	@ 0xc0
 8000aa0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	22c0      	movs	r2, #192	@ 0xc0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f01b fcce 	bl	801c44a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 8000aae:	f04f 0208 	mov.w	r2, #8
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000aca:	2303      	movs	r3, #3
 8000acc:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ace:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00f faa1 	bl	8010030 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000af4:	f001 fb7e 	bl	80021f4 <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	37c0      	adds	r7, #192	@ 0xc0
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b24:	4b38      	ldr	r3, [pc, #224]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b26:	4a39      	ldr	r2, [pc, #228]	@ (8000c0c <MX_ADC1_Init+0x10c>)
 8000b28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b2a:	4b37      	ldr	r3, [pc, #220]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b2c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b32:	4b35      	ldr	r3, [pc, #212]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b38:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b3e:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b40:	2208      	movs	r2, #8
 8000b42:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b44:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000b50:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b56:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b74:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b7a:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b82:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b88:	481f      	ldr	r0, [pc, #124]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000b8a:	f003 fbb9 	bl	8004300 <HAL_ADC_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b94:	f001 fb2e 	bl	80021f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4819      	ldr	r0, [pc, #100]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000ba4:	f004 fb66 	bl	8005274 <HAL_ADCEx_MultiModeConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000bae:	f001 fb21 	bl	80021f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_ADC1_Init+0x110>)
 8000bb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bbe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000bd6:	f003 fe0d 	bl	80047f4 <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000be0:	f001 fb08 	bl	80021f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_ADC1_Init+0x114>)
 8000be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000be8:	230c      	movs	r3, #12
 8000bea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_ADC1_Init+0x108>)
 8000bf2:	f003 fdff 	bl	80047f4 <HAL_ADC_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000bfc:	f001 fafa 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	@ 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	24000528 	.word	0x24000528
 8000c0c:	40022000 	.word	0x40022000
 8000c10:	0c900008 	.word	0x0c900008
 8000c14:	10c00010 	.word	0x10c00010

08000c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <MX_I2C1_Init+0x78>)
 8000c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <MX_I2C1_Init+0x7c>)
 8000c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c52:	480e      	ldr	r0, [pc, #56]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c54:	f007 fdac 	bl	80087b0 <HAL_I2C_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c5e:	f001 fac9 	bl	80021f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c66:	f00a fb5f 	bl	800b328 <HAL_I2CEx_ConfigAnalogFilter>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c70:	f001 fac0 	bl	80021f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_I2C1_Init+0x74>)
 8000c78:	f00a fba1 	bl	800b3be <HAL_I2CEx_ConfigDigitalFilter>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c82:	f001 fab7 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000604 	.word	0x24000604
 8000c90:	40005400 	.word	0x40005400
 8000c94:	00401959 	.word	0x00401959

08000c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <MX_I2C2_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <MX_I2C2_Init+0x7c>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd2:	480e      	ldr	r0, [pc, #56]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cd4:	f007 fd6c 	bl	80087b0 <HAL_I2C_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f001 fa89 	bl	80021f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000ce6:	f00a fb1f 	bl	800b328 <HAL_I2CEx_ConfigAnalogFilter>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cf0:	f001 fa80 	bl	80021f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cf8:	f00a fb61 	bl	800b3be <HAL_I2CEx_ConfigDigitalFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f001 fa77 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	24000658 	.word	0x24000658
 8000d10:	40005800 	.word	0x40005800
 8000d14:	00401959 	.word	0x00401959

08000d18 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_JPEG_Init+0x20>)
 8000d1e:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <MX_JPEG_Init+0x24>)
 8000d20:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_JPEG_Init+0x20>)
 8000d24:	f00a fb98 	bl	800b458 <HAL_JPEG_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000d2e:	f001 fa61 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2400079c 	.word	0x2400079c
 8000d3c:	52003000 	.word	0x52003000

08000d40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d44:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d46:	4a28      	ldr	r2, [pc, #160]	@ (8000de8 <MX_SPI4_Init+0xa8>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d4c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000d52:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d58:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d6e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d72:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d98:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_SPI4_Init+0xa4>)
 8000dd2:	f011 fe2b 	bl	8012a2c <HAL_SPI_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000ddc:	f001 fa0a 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	240008cc 	.word	0x240008cc
 8000de8:	40013400 	.word	0x40013400

08000dec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e84 <MX_TIM5_Init+0x98>)
 8000e0e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8000e88 <MX_TIM5_Init+0x9c>)
 8000e20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e2e:	4814      	ldr	r0, [pc, #80]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e30:	f012 fda7 	bl	8013982 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000e3a:	f001 f9db 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e4c:	f012 ff70 	bl	8013d30 <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f001 f9cd 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_TIM5_Init+0x94>)
 8000e68:	f013 f9ca 	bl	8014200 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e72:	f001 f9bf 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	240009cc 	.word	0x240009cc
 8000e84:	40000c00 	.word	0x40000c00
 8000e88:	007270de 	.word	0x007270de

08000e8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e90:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000e92:	4a25      	ldr	r2, [pc, #148]	@ (8000f28 <MX_USART1_UART_Init+0x9c>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000e96:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000e98:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <MX_USART1_UART_Init+0xa0>)
 8000e9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000ece:	2220      	movs	r2, #32
 8000ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eda:	4812      	ldr	r0, [pc, #72]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000edc:	f013 fa3c 	bl	8014358 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000ee6:	f001 f985 	bl	80021f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000eee:	f015 f956 	bl	801619e <HAL_UARTEx_SetTxFifoThreshold>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000ef8:	f001 f97c 	bl	80021f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000f00:	f015 f98b 	bl	801621a <HAL_UARTEx_SetRxFifoThreshold>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000f0a:	f001 f973 	bl	80021f4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_USART1_UART_Init+0x98>)
 8000f10:	f015 f90a 	bl	8016128 <HAL_UARTEx_EnableFifoMode>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000f1a:	f001 f96b 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000a18 	.word	0x24000a18
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	0001b207 	.word	0x0001b207

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <MX_DMA_Init+0x9c>)
 8000f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f3c:	4a23      	ldr	r2, [pc, #140]	@ (8000fcc <MX_DMA_Init+0x9c>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f46:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <MX_DMA_Init+0x9c>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f54:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <MX_DMA_Init+0x9c>)
 8000f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <MX_DMA_Init+0x9c>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f64:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <MX_DMA_Init+0x9c>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	200b      	movs	r0, #11
 8000f78:	f004 fb35 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f7c:	200b      	movs	r0, #11
 8000f7e:	f004 fb4c 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	200c      	movs	r0, #12
 8000f88:	f004 fb2d 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f8c:	200c      	movs	r0, #12
 8000f8e:	f004 fb44 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	200d      	movs	r0, #13
 8000f98:	f004 fb25 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f9c:	200d      	movs	r0, #13
 8000f9e:	f004 fb3c 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	200e      	movs	r0, #14
 8000fa8:	f004 fb1d 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fac:	200e      	movs	r0, #14
 8000fae:	f004 fb34 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2038      	movs	r0, #56	@ 0x38
 8000fb8:	f004 fb15 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fbc:	2038      	movs	r0, #56	@ 0x38
 8000fbe:	f004 fb2c 	bl	800561a <HAL_NVIC_EnableIRQ>

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MX_MDMA_Init+0x3c>)
 8000fd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <MX_MDMA_Init+0x3c>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_MDMA_Init+0x3c>)
 8000fe8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	207a      	movs	r0, #122	@ 0x7a
 8000ffa:	f004 faf4 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000ffe:	207a      	movs	r0, #122	@ 0x7a
 8001000:	f004 fb0b 	bl	800561a <HAL_NVIC_EnableIRQ>

}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	58024400 	.word	0x58024400

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001026:	4b4e      	ldr	r3, [pc, #312]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	4a4c      	ldr	r2, [pc, #304]	@ (8001160 <MX_GPIO_Init+0x150>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001036:	4b4a      	ldr	r3, [pc, #296]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001044:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	4a45      	ldr	r2, [pc, #276]	@ (8001160 <MX_GPIO_Init+0x150>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001054:	4b42      	ldr	r3, [pc, #264]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b3f      	ldr	r3, [pc, #252]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001068:	4a3d      	ldr	r2, [pc, #244]	@ (8001160 <MX_GPIO_Init+0x150>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001072:	4b3b      	ldr	r3, [pc, #236]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	4b37      	ldr	r3, [pc, #220]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	4a36      	ldr	r2, [pc, #216]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001090:	4b33      	ldr	r3, [pc, #204]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b30      	ldr	r3, [pc, #192]	@ (8001160 <MX_GPIO_Init+0x150>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001160 <MX_GPIO_Init+0x150>)
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001160 <MX_GPIO_Init+0x150>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2120      	movs	r1, #32
 80010c0:	4828      	ldr	r0, [pc, #160]	@ (8001164 <MX_GPIO_Init+0x154>)
 80010c2:	f007 fb5b 	bl	800877c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010cc:	4826      	ldr	r0, [pc, #152]	@ (8001168 <MX_GPIO_Init+0x158>)
 80010ce:	f007 fb55 	bl	800877c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 80010d2:	2320      	movs	r3, #32
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	481e      	ldr	r0, [pc, #120]	@ (8001164 <MX_GPIO_Init+0x154>)
 80010ea:	f007 f97f 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LB_Pin */
  GPIO_InitStruct.Pin = BTN_LB_Pin;
 80010ee:	2320      	movs	r3, #32
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_LB_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	481a      	ldr	r0, [pc, #104]	@ (800116c <MX_GPIO_Init+0x15c>)
 8001102:	f007 f973 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RB_Pin */
  GPIO_InitStruct.Pin = BTN_RB_Pin;
 8001106:	2320      	movs	r3, #32
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_RB_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4813      	ldr	r0, [pc, #76]	@ (8001168 <MX_GPIO_Init+0x158>)
 800111a:	f007 f967 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LF_Pin BTN_RF_Pin */
  GPIO_InitStruct.Pin = BTN_LF_Pin|BTN_RF_Pin;
 800111e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001128:	2301      	movs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <MX_GPIO_Init+0x158>)
 8001134:	f007 f95a 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 8001138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_GPIO_Init+0x158>)
 8001152:	f007 f94b 	bl	80083ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	@ 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	58024400 	.word	0x58024400
 8001164:	58021000 	.word	0x58021000
 8001168:	58020800 	.word	0x58020800
 800116c:	58020000 	.word	0x58020000

08001170 <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	if (wdog_network < WDOG_NETWORK_CUTOFF) {
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <NetworkTimeout+0x30>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d80f      	bhi.n	800119c <NetworkTimeout+0x2c>
		// Increment the timeout ctr
		wdog_network++;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <NetworkTimeout+0x30>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <NetworkTimeout+0x30>)
 8001186:	701a      	strb	r2, [r3, #0]

		// A timeout occurs when wdog_network == the Cutoff
		if (wdog_network == WDOG_NETWORK_CUTOFF) {
 8001188:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <NetworkTimeout+0x30>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b04      	cmp	r3, #4
 800118e:	d105      	bne.n	800119c <NetworkTimeout+0x2c>
			ST7789_Draw_NOSIG(&hst7789); // Draw the NOSIG symbol
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <NetworkTimeout+0x34>)
 8001192:	f002 fa37 	bl	8003604 <ST7789_Draw_NOSIG>
			st7789_state = 1;			 // Flag LCD as requested
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <NetworkTimeout+0x38>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	24000b24 	.word	0x24000b24
 80011a4:	24001484 	.word	0x24001484
 80011a8:	24026c9c 	.word	0x24026c9c

080011ac <ParsePacket_JPEG_IMAGE>:

//  Scoping Funtions
void ParsePacket_JPEG_IMAGE(uint8_t* packet, uint16_t byte_num) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
	// Data was fully sent
	if (byte_num < jpeg_img_lastRcvPkt && jpeg_state == 0) {
 80011b8:	4b48      	ldr	r3, [pc, #288]	@ (80012dc <ParsePacket_JPEG_IMAGE+0x130>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	887a      	ldrh	r2, [r7, #2]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d269      	bcs.n	8001296 <ParsePacket_JPEG_IMAGE+0xea>
 80011c2:	4b47      	ldr	r3, [pc, #284]	@ (80012e0 <ParsePacket_JPEG_IMAGE+0x134>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d165      	bne.n	8001296 <ParsePacket_JPEG_IMAGE+0xea>
		// Start the jpeg decode
		jpeg_size = jpeg_img_lastRcvPkt*PKT_DATASIZE + JPEG_HEADERSIZE;
 80011ca:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <ParsePacket_JPEG_IMAGE+0x130>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	019b      	lsls	r3, r3, #6
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b42      	ldr	r3, [pc, #264]	@ (80012e4 <ParsePacket_JPEG_IMAGE+0x138>)
 80011da:	801a      	strh	r2, [r3, #0]
		HAL_StatusTypeDef ret;
		if (jpeg_currentraw)
 80011dc:	4b42      	ldr	r3, [pc, #264]	@ (80012e8 <ParsePacket_JPEG_IMAGE+0x13c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d01c      	beq.n	800121e <ParsePacket_JPEG_IMAGE+0x72>
			ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw1, jpeg_size, jpeg_out, jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]*64);
 80011e4:	4b3f      	ldr	r3, [pc, #252]	@ (80012e4 <ParsePacket_JPEG_IMAGE+0x138>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <ParsePacket_JPEG_IMAGE+0x140>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b3f      	ldr	r3, [pc, #252]	@ (80012f0 <ParsePacket_JPEG_IMAGE+0x144>)
 80011f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <ParsePacket_JPEG_IMAGE+0x140>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <ParsePacket_JPEG_IMAGE+0x148>)
 8001200:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4b3a      	ldr	r3, [pc, #232]	@ (80012f8 <ParsePacket_JPEG_IMAGE+0x14c>)
 800120e:	4602      	mov	r2, r0
 8001210:	493a      	ldr	r1, [pc, #232]	@ (80012fc <ParsePacket_JPEG_IMAGE+0x150>)
 8001212:	483b      	ldr	r0, [pc, #236]	@ (8001300 <ParsePacket_JPEG_IMAGE+0x154>)
 8001214:	f00a fa37 	bl	800b686 <HAL_JPEG_Decode_DMA>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e01b      	b.n	8001256 <ParsePacket_JPEG_IMAGE+0xaa>
		else {
			ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw2, jpeg_size, jpeg_out, jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]*64);
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <ParsePacket_JPEG_IMAGE+0x138>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <ParsePacket_JPEG_IMAGE+0x140>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b31      	ldr	r3, [pc, #196]	@ (80012f0 <ParsePacket_JPEG_IMAGE+0x144>)
 800122c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001230:	461a      	mov	r2, r3
 8001232:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <ParsePacket_JPEG_IMAGE+0x140>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <ParsePacket_JPEG_IMAGE+0x148>)
 800123a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	019b      	lsls	r3, r3, #6
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <ParsePacket_JPEG_IMAGE+0x14c>)
 8001248:	4602      	mov	r2, r0
 800124a:	492e      	ldr	r1, [pc, #184]	@ (8001304 <ParsePacket_JPEG_IMAGE+0x158>)
 800124c:	482c      	ldr	r0, [pc, #176]	@ (8001300 <ParsePacket_JPEG_IMAGE+0x154>)
 800124e:	f00a fa1a 	bl	800b686 <HAL_JPEG_Decode_DMA>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
		}
		jpeg_currentraw = !jpeg_currentraw;
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <ParsePacket_JPEG_IMAGE+0x13c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <ParsePacket_JPEG_IMAGE+0x13c>)
 8001268:	701a      	strb	r2, [r3, #0]

		if (ret) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00f      	beq.n	8001290 <ParsePacket_JPEG_IMAGE+0xe4>
			sprintf(ssd_msg, " JPEG FAIL %d", ret);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	461a      	mov	r2, r3
 8001274:	4924      	ldr	r1, [pc, #144]	@ (8001308 <ParsePacket_JPEG_IMAGE+0x15c>)
 8001276:	4825      	ldr	r0, [pc, #148]	@ (800130c <ParsePacket_JPEG_IMAGE+0x160>)
 8001278:	f01b f882 	bl	801c380 <siprintf>
			WriteDebug(ssd_msg, strlen(ssd_msg));
 800127c:	4823      	ldr	r0, [pc, #140]	@ (800130c <ParsePacket_JPEG_IMAGE+0x160>)
 800127e:	f7ff f87f 	bl	8000380 <strlen>
 8001282:	4603      	mov	r3, r0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	4820      	ldr	r0, [pc, #128]	@ (800130c <ParsePacket_JPEG_IMAGE+0x160>)
 800128a:	f000 ff61 	bl	8002150 <WriteDebug>
 800128e:	e002      	b.n	8001296 <ParsePacket_JPEG_IMAGE+0xea>
		} else {
			jpeg_state = 1;	// Flag JPEG as busy
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <ParsePacket_JPEG_IMAGE+0x134>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
		}
	}
	jpeg_img_lastRcvPkt = byte_num;
 8001296:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <ParsePacket_JPEG_IMAGE+0x130>)
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	8013      	strh	r3, [r2, #0]

	// fill in the received data
	if (jpeg_currentraw)
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <ParsePacket_JPEG_IMAGE+0x13c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <ParsePacket_JPEG_IMAGE+0x110>
		memcpy(jpeg_raw1 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	019b      	lsls	r3, r3, #6
 80012a8:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80012ac:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <ParsePacket_JPEG_IMAGE+0x150>)
 80012ae:	4413      	add	r3, r2
 80012b0:	2240      	movs	r2, #64	@ 0x40
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f01b f960 	bl	801c57a <memcpy>
	else {
		memcpy(jpeg_raw2 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
	}
}
 80012ba:	e00a      	b.n	80012d2 <ParsePacket_JPEG_IMAGE+0x126>
		memcpy(jpeg_raw2 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	019b      	lsls	r3, r3, #6
 80012c0:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80012c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001304 <ParsePacket_JPEG_IMAGE+0x158>)
 80012c6:	4413      	add	r3, r2
 80012c8:	2240      	movs	r2, #64	@ 0x40
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f01b f954 	bl	801c57a <memcpy>
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24026d20 	.word	0x24026d20
 80012e0:	240472b2 	.word	0x240472b2
 80012e4:	240472b0 	.word	0x240472b0
 80012e8:	24026d2d 	.word	0x24026d2d
 80012ec:	24026d2c 	.word	0x24026d2c
 80012f0:	2400001c 	.word	0x2400001c
 80012f4:	24000024 	.word	0x24000024
 80012f8:	2403c630 	.word	0x2403c630
 80012fc:	24026d30 	.word	0x24026d30
 8001300:	2400079c 	.word	0x2400079c
 8001304:	240319b0 	.word	0x240319b0
 8001308:	0801ea58 	.word	0x0801ea58
 800130c:	24001370 	.word	0x24001370

08001310 <ParsePacket_JPEG_HEADER>:

void ParsePacket_JPEG_HEADER(uint8_t* packet, uint16_t byte_num) {
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
	uint16_t byte_num_conv = (0xFFFF - byte_num) - 1;
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8001322:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001326:	33fe      	adds	r3, #254	@ 0xfe
 8001328:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 0; i < PKT_DATASIZE; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e01e      	b.n	800136e <ParsePacket_JPEG_HEADER+0x5e>
		// Bounds check on last packet
		if (byte_num*PKT_DATASIZE + i >= JPEG_HEADERSIZE)
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	019a      	lsls	r2, r3, #6
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4413      	add	r3, r2
 8001338:	f240 220d 	movw	r2, #525	@ 0x20d
 800133c:	4293      	cmp	r3, r2
 800133e:	dc1a      	bgt.n	8001376 <ParsePacket_JPEG_HEADER+0x66>
			return;

		// Update both buffers' headers
		jpeg_raw1[byte_num*PKT_DATASIZE + i] = packet[i];
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	441a      	add	r2, r3
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	0199      	lsls	r1, r3, #6
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	440b      	add	r3, r1
 800134e:	7811      	ldrb	r1, [r2, #0]
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <ParsePacket_JPEG_HEADER+0x74>)
 8001352:	54d1      	strb	r1, [r2, r3]
		jpeg_raw2[byte_num*PKT_DATASIZE + i] = packet[i];
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	441a      	add	r2, r3
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	0199      	lsls	r1, r3, #6
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	440b      	add	r3, r1
 8001362:	7811      	ldrb	r1, [r2, #0]
 8001364:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <ParsePacket_JPEG_HEADER+0x78>)
 8001366:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < PKT_DATASIZE; i++) {
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b3f      	cmp	r3, #63	@ 0x3f
 8001372:	d9dd      	bls.n	8001330 <ParsePacket_JPEG_HEADER+0x20>
 8001374:	e000      	b.n	8001378 <ParsePacket_JPEG_HEADER+0x68>
			return;
 8001376:	bf00      	nop
	}
}
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	24026d30 	.word	0x24026d30
 8001388:	240319b0 	.word	0x240319b0

0800138c <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
	// If there's a packet, process it
	// If the packet is good, push it to the screen
	uint16_t rx_byte;
	uint8_t *rx_packet;
	uint8_t ret = XBEE_RXPacket(&hxbee, &rx_packet, &rx_byte);
 8001392:	1d3a      	adds	r2, r7, #4
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4831      	ldr	r0, [pc, #196]	@ (8001460 <SCH_XBeeRX+0xd4>)
 800139a:	f016 fb75 	bl	8017a88 <XBEE_RXPacket>
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	if (ret == 0) {
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d158      	bne.n	800145a <SCH_XBeeRX+0xce>
		// Network is active, reset the watchdog
		wdog_network = 0;
 80013a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <SCH_XBeeRX+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]

		// Packet contains telemetry
		if (rx_byte == 0xFFFF) {
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d04f      	beq.n	8001458 <SCH_XBeeRX+0xcc>
			// TODO: Parse Telemetry
			return;
		}

		// Packet contains JPEG HEADER data
		if (GetState(OP_CAMERA_ENCODING) == 0 && rx_byte > 0xFFF0) {
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 fb51 	bl	8001a60 <GetState>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10b      	bne.n	80013dc <SCH_XBeeRX+0x50>
 80013c4:	88bb      	ldrh	r3, [r7, #4]
 80013c6:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d906      	bls.n	80013dc <SCH_XBeeRX+0x50>
			ParsePacket_JPEG_HEADER(rx_packet, rx_byte);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	88ba      	ldrh	r2, [r7, #4]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff9b 	bl	8001310 <ParsePacket_JPEG_HEADER>
			return;
 80013da:	e03e      	b.n	800145a <SCH_XBeeRX+0xce>
		}

		// Packet contains JPEG IMAGE data
		if (GetState(OP_CAMERA_ENCODING) == 0 && rx_byte < jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality] + 1) {
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 fb3f 	bl	8001a60 <GetState>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d118      	bne.n	800141a <SCH_XBeeRX+0x8e>
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <SCH_XBeeRX+0xdc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <SCH_XBeeRX+0xe0>)
 80013f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <SCH_XBeeRX+0xdc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <SCH_XBeeRX+0xe4>)
 80013fe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	88ba      	ldrh	r2, [r7, #4]
 8001408:	4293      	cmp	r3, r2
 800140a:	db06      	blt.n	800141a <SCH_XBeeRX+0x8e>
			ParsePacket_JPEG_IMAGE(rx_packet, rx_byte);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	88ba      	ldrh	r2, [r7, #4]
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff feca 	bl	80011ac <ParsePacket_JPEG_IMAGE>
			return;
 8001418:	e01f      	b.n	800145a <SCH_XBeeRX+0xce>
		}

		// Packet contains RAW image data
		if (GetState(OP_CAMERA_ENCODING) == 1 && rx_byte < jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality] + 1) {
 800141a:	2000      	movs	r0, #0
 800141c:	f000 fb20 	bl	8001a60 <GetState>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d119      	bne.n	800145a <SCH_XBeeRX+0xce>
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <SCH_XBeeRX+0xdc>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <SCH_XBeeRX+0xe0>)
 800142e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001432:	461a      	mov	r2, r3
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <SCH_XBeeRX+0xdc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <SCH_XBeeRX+0xe4>)
 800143c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001440:	fb02 f303 	mul.w	r3, r2, r3
 8001444:	88ba      	ldrh	r2, [r7, #4]
 8001446:	4293      	cmp	r3, r2
 8001448:	db07      	blt.n	800145a <SCH_XBeeRX+0xce>
			ParsePacket_JPEG_IMAGE(rx_packet, rx_byte);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	88ba      	ldrh	r2, [r7, #4]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff feab 	bl	80011ac <ParsePacket_JPEG_IMAGE>
			return;
 8001456:	e000      	b.n	800145a <SCH_XBeeRX+0xce>
			return;
 8001458:	bf00      	nop
		}

		// TODO: Parse JPEG Header data
	}
}
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	24026cfc 	.word	0x24026cfc
 8001464:	24000b24 	.word	0x24000b24
 8001468:	24026d2c 	.word	0x24026d2c
 800146c:	2400001c 	.word	0x2400001c
 8001470:	24000024 	.word	0x24000024

08001474 <SCH_XBeeTX>:

void SCH_XBeeTX() {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <SCH_XBeeTX+0x78>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fad6 	bl	8001a30 <DeltaTime>
 8001484:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX) return;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b63      	cmp	r3, #99	@ 0x63
 800148a:	d928      	bls.n	80014de <SCH_XBeeTX+0x6a>

	// Set the tank controls just before send, minimize latency
	hmenu.state_packet[RESERVE_LTRACK_MAG] = slider_magnitude[0];
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <SCH_XBeeTX+0x7c>)
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	3307      	adds	r3, #7
 8001492:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <SCH_XBeeTX+0x80>)
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_RTRACK_MAG] = slider_magnitude[1];
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <SCH_XBeeTX+0x7c>)
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	3308      	adds	r3, #8
 800149e:	4a15      	ldr	r2, [pc, #84]	@ (80014f4 <SCH_XBeeTX+0x80>)
 80014a0:	7852      	ldrb	r2, [r2, #1]
 80014a2:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_LTRACK_DIR] = slider_direction[0];
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <SCH_XBeeTX+0x7c>)
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	3309      	adds	r3, #9
 80014aa:	4a13      	ldr	r2, [pc, #76]	@ (80014f8 <SCH_XBeeTX+0x84>)
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_RTRACK_DIR] = slider_direction[1];
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <SCH_XBeeTX+0x7c>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	330a      	adds	r3, #10
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <SCH_XBeeTX+0x84>)
 80014b8:	7852      	ldrb	r2, [r2, #1]
 80014ba:	701a      	strb	r2, [r3, #0]

	if (XBEE_TXPacket(&hxbee, hmenu.state_packet, 0xFFFF))  {
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <SCH_XBeeTX+0x7c>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <SCH_XBeeTX+0x88>)
 80014c8:	f016 fb4e 	bl	8017b68 <XBEE_TXPacket>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d107      	bne.n	80014e2 <SCH_XBeeTX+0x6e>
		// Line busy, retry ASAP
		return;
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 80014d2:	f002 fcbf 	bl	8003e54 <HAL_GetTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <SCH_XBeeTX+0x78>)
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e002      	b.n	80014e4 <SCH_XBeeTX+0x70>
	if (delta_t < SCH_MS_TX) return;
 80014de:	bf00      	nop
 80014e0:	e000      	b.n	80014e4 <SCH_XBeeTX+0x70>
		return;
 80014e2:	bf00      	nop
}
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	24000b2c 	.word	0x24000b2c
 80014f0:	24001438 	.word	0x24001438
 80014f4:	24026ccc 	.word	0x24026ccc
 80014f8:	24026cd0 	.word	0x24026cd0
 80014fc:	24026cfc 	.word	0x24026cfc

08001500 <SCH_PowerMon>:

void SCH_PowerMon() {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	uint8_t result = STC3100_Get(&hstc);
 8001506:	4836      	ldr	r0, [pc, #216]	@ (80015e0 <SCH_PowerMon+0xe0>)
 8001508:	f002 fb52 	bl	8003bb0 <STC3100_Get>
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
	// General read error
	if (result == 1)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d058      	beq.n	80015c8 <SCH_PowerMon+0xc8>
		return;

	if (result == 2) {
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d057      	beq.n	80015cc <SCH_PowerMon+0xcc>
		// Battery error, we need to kill ourselves NOW
		//TODO: implement this
		return;
	}

	hmenu.current_con = hstc.current;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <SCH_PowerMon+0xe0>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a30      	ldr	r2, [pc, #192]	@ (80015e4 <SCH_PowerMon+0xe4>)
 8001522:	61d3      	str	r3, [r2, #28]
	hmenu.voltage_con = hstc.voltage;
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <SCH_PowerMon+0xe0>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a2e      	ldr	r2, [pc, #184]	@ (80015e4 <SCH_PowerMon+0xe4>)
 800152a:	6253      	str	r3, [r2, #36]	@ 0x24
	hmenu.bat_temp_con = hstc.temperature;
 800152c:	4b2c      	ldr	r3, [pc, #176]	@ (80015e0 <SCH_PowerMon+0xe0>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a2c      	ldr	r2, [pc, #176]	@ (80015e4 <SCH_PowerMon+0xe4>)
 8001532:	63d3      	str	r3, [r2, #60]	@ 0x3c
	hmenu.bat_perc_con = hstc.charge_percent*100.0; // Convert to 0-100%
 8001534:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <SCH_PowerMon+0xe0>)
 8001536:	edd3 7a08 	vldr	s15, [r3, #32]
 800153a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80015e8 <SCH_PowerMon+0xe8>
 800153e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001542:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <SCH_PowerMon+0xe4>)
 8001544:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	hmenu.bat_time_con = hstc.charge_time/60.0;		// Convert to minutes
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <SCH_PowerMon+0xe0>)
 800154a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800154e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80015ec <SCH_PowerMon+0xec>
 8001552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <SCH_PowerMon+0xe4>)
 8001558:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	hmenu.alert_battery_con = hstc.charge_percent < 0.20;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <SCH_PowerMon+0xe0>)
 800155e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001562:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001566:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 80015d8 <SCH_PowerMon+0xd8>
 800156a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	bf4c      	ite	mi
 8001574:	2301      	movmi	r3, #1
 8001576:	2300      	movpl	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <SCH_PowerMon+0xe4>)
 800157e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	hmenu.alert_voltage_con = hstc.voltage < 3.75;
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <SCH_PowerMon+0xe0>)
 8001584:	edd3 7a03 	vldr	s15, [r3, #12]
 8001588:	eeb0 7a0e 	vmov.f32	s14, #14	@ 0x40700000  3.750
 800158c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	bf4c      	ite	mi
 8001596:	2301      	movmi	r3, #1
 8001598:	2300      	movpl	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <SCH_PowerMon+0xe4>)
 80015a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	hmenu.alert_current_con = hstc.current > 3;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <SCH_PowerMon+0xe0>)
 80015a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80015aa:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80015ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	bfcc      	ite	gt
 80015b8:	2301      	movgt	r3, #1
 80015ba:	2300      	movle	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <SCH_PowerMon+0xe4>)
 80015c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80015c6:	e002      	b.n	80015ce <SCH_PowerMon+0xce>
		return;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <SCH_PowerMon+0xce>
		return;
 80015cc:	bf00      	nop
}
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	9999999a 	.word	0x9999999a
 80015dc:	3fc99999 	.word	0x3fc99999
 80015e0:	24026cd4 	.word	0x24026cd4
 80015e4:	24001438 	.word	0x24001438
 80015e8:	42c80000 	.word	0x42c80000
 80015ec:	42700000 	.word	0x42700000

080015f0 <SCH_ImageDecode>:

void SCH_ImageDecode() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
	if (jpeg_state != 2) return;
 80015f6:	4b9c      	ldr	r3, [pc, #624]	@ (8001868 <SCH_ImageDecode+0x278>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	f040 8126 	bne.w	800184c <SCH_ImageDecode+0x25c>
		// Loop through every mcu block

		for (uint16_t mcu_x = 0; mcu_x < jpeg_mcu_widths[jpeg_quality]; mcu_x++) {
 8001600:	2300      	movs	r3, #0
 8001602:	83fb      	strh	r3, [r7, #30]
 8001604:	e0b7      	b.n	8001776 <SCH_ImageDecode+0x186>
			uint16_t mcu_idx = current_mcu_y*jpeg_mcu_widths[jpeg_quality] + mcu_x;
 8001606:	4b99      	ldr	r3, [pc, #612]	@ (800186c <SCH_ImageDecode+0x27c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b98      	ldr	r3, [pc, #608]	@ (8001870 <SCH_ImageDecode+0x280>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4b98      	ldr	r3, [pc, #608]	@ (8001874 <SCH_ImageDecode+0x284>)
 8001614:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001618:	fb12 f303 	smulbb	r3, r2, r3
 800161c:	b29a      	uxth	r2, r3
 800161e:	8bfb      	ldrh	r3, [r7, #30]
 8001620:	4413      	add	r3, r2
 8001622:	82bb      	strh	r3, [r7, #20]

			for (uint16_t y = 0; y < 8; y++) {
 8001624:	2300      	movs	r3, #0
 8001626:	83bb      	strh	r3, [r7, #28]
 8001628:	e09e      	b.n	8001768 <SCH_ImageDecode+0x178>
				for (uint16_t x = 0; x < 8; x++) {
 800162a:	2300      	movs	r3, #0
 800162c:	837b      	strh	r3, [r7, #26]
 800162e:	e094      	b.n	800175a <SCH_ImageDecode+0x16a>
					// Bounds check
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 8001630:	8bfb      	ldrh	r3, [r7, #30]
 8001632:	00da      	lsls	r2, r3, #3
 8001634:	8b7b      	ldrh	r3, [r7, #26]
 8001636:	4413      	add	r3, r2
 8001638:	2bf0      	cmp	r3, #240	@ 0xf0
 800163a:	f300 8086 	bgt.w	800174a <SCH_ImageDecode+0x15a>
					// COLOR FORMAT
					// |RRRRR GGG|GGG BBBBB|

					uint32_t pix_x = (mcu_x*8 + x)*jpeg_scaleFactors[jpeg_quality];
 800163e:	8bfb      	ldrh	r3, [r7, #30]
 8001640:	00da      	lsls	r2, r3, #3
 8001642:	8b7b      	ldrh	r3, [r7, #26]
 8001644:	4413      	add	r3, r2
 8001646:	4a8a      	ldr	r2, [pc, #552]	@ (8001870 <SCH_ImageDecode+0x280>)
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	4611      	mov	r1, r2
 800164c:	4a8a      	ldr	r2, [pc, #552]	@ (8001878 <SCH_ImageDecode+0x288>)
 800164e:	5c52      	ldrb	r2, [r2, r1]
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	613b      	str	r3, [r7, #16]
					if (pix_x >= LCD_WIDTH-1) continue;
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2bee      	cmp	r3, #238	@ 0xee
 800165a:	d878      	bhi.n	800174e <SCH_ImageDecode+0x15e>
					pix_x = LCD_WIDTH - pix_x - 1;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001662:	613b      	str	r3, [r7, #16]
					uint32_t pix_y = (current_mcu_y*8 + y)*jpeg_scaleFactors[jpeg_quality];
 8001664:	4b81      	ldr	r3, [pc, #516]	@ (800186c <SCH_ImageDecode+0x27c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	00da      	lsls	r2, r3, #3
 800166a:	8bbb      	ldrh	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	4a80      	ldr	r2, [pc, #512]	@ (8001870 <SCH_ImageDecode+0x280>)
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	4611      	mov	r1, r2
 8001674:	4a80      	ldr	r2, [pc, #512]	@ (8001878 <SCH_ImageDecode+0x288>)
 8001676:	5c52      	ldrb	r2, [r2, r1]
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	60fb      	str	r3, [r7, #12]
					if (pix_y >= LCD_HEIGHT-2) continue;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001684:	d265      	bcs.n	8001752 <SCH_ImageDecode+0x162>

					uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 8001686:	8abb      	ldrh	r3, [r7, #20]
 8001688:	00da      	lsls	r2, r3, #3
 800168a:	8bbb      	ldrh	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	00da      	lsls	r2, r3, #3
 8001690:	8b7b      	ldrh	r3, [r7, #26]
 8001692:	4413      	add	r3, r2
 8001694:	4a79      	ldr	r2, [pc, #484]	@ (800187c <SCH_ImageDecode+0x28c>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	72fb      	strb	r3, [r7, #11]
					uint8_t msb = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 800169a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800169e:	f023 0307 	bic.w	r3, r3, #7
 80016a2:	b25a      	sxtb	r2, r3
 80016a4:	7afb      	ldrb	r3, [r7, #11]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	72bb      	strb	r3, [r7, #10]
					uint8_t lsb = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	f023 031f 	bic.w	r3, r3, #31
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	727b      	strb	r3, [r7, #9]

					// TODO: Speed this up as much as possible, even if it means skipping lines
					// Loop through the pixels in a box
					uint8_t perfScaleFac = jpeg_scaleFactors[jpeg_quality];
 80016ce:	4b68      	ldr	r3, [pc, #416]	@ (8001870 <SCH_ImageDecode+0x280>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b68      	ldr	r3, [pc, #416]	@ (8001878 <SCH_ImageDecode+0x288>)
 80016d6:	5c9b      	ldrb	r3, [r3, r2]
 80016d8:	767b      	strb	r3, [r7, #25]
					if (perfScaleFac == 0)
 80016da:	7e7b      	ldrb	r3, [r7, #25]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <SCH_ImageDecode+0xf4>
						perfScaleFac = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	767b      	strb	r3, [r7, #25]

					for (uint8_t yOff = 0; yOff < perfScaleFac; yOff++) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	763b      	strb	r3, [r7, #24]
 80016e8:	e02a      	b.n	8001740 <SCH_ImageDecode+0x150>
						uint32_t cached_yOff = (pix_y+yOff)*LCD_WIDTH*2;	// Cache the Y offset so we don't compute it every loop
 80016ea:	7e3a      	ldrb	r2, [r7, #24]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	441a      	add	r2, r3
 80016f0:	4613      	mov	r3, r2
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	607b      	str	r3, [r7, #4]

						for (uint8_t xOff = 0; xOff < perfScaleFac; xOff++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
 80016fe:	e018      	b.n	8001732 <SCH_ImageDecode+0x142>
							uint32_t cached_xOff = (pix_x+xOff)*2;
 8001700:	7dfa      	ldrb	r2, [r7, #23]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	603b      	str	r3, [r7, #0]

							hst7789.vram[cached_yOff + cached_xOff    ] = msb;
 800170a:	4b5d      	ldr	r3, [pc, #372]	@ (8001880 <SCH_ImageDecode+0x290>)
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	440b      	add	r3, r1
 8001714:	4413      	add	r3, r2
 8001716:	7aba      	ldrb	r2, [r7, #10]
 8001718:	701a      	strb	r2, [r3, #0]
							hst7789.vram[cached_yOff + cached_xOff + 1] = lsb;
 800171a:	4b59      	ldr	r3, [pc, #356]	@ (8001880 <SCH_ImageDecode+0x290>)
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	440b      	add	r3, r1
 8001724:	3301      	adds	r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	7a7a      	ldrb	r2, [r7, #9]
 800172a:	701a      	strb	r2, [r3, #0]
						for (uint8_t xOff = 0; xOff < perfScaleFac; xOff++) {
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	3301      	adds	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
 8001732:	7dfa      	ldrb	r2, [r7, #23]
 8001734:	7e7b      	ldrb	r3, [r7, #25]
 8001736:	429a      	cmp	r2, r3
 8001738:	d3e2      	bcc.n	8001700 <SCH_ImageDecode+0x110>
					for (uint8_t yOff = 0; yOff < perfScaleFac; yOff++) {
 800173a:	7e3b      	ldrb	r3, [r7, #24]
 800173c:	3301      	adds	r3, #1
 800173e:	763b      	strb	r3, [r7, #24]
 8001740:	7e3a      	ldrb	r2, [r7, #24]
 8001742:	7e7b      	ldrb	r3, [r7, #25]
 8001744:	429a      	cmp	r2, r3
 8001746:	d3d0      	bcc.n	80016ea <SCH_ImageDecode+0xfa>
 8001748:	e004      	b.n	8001754 <SCH_ImageDecode+0x164>
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 800174a:	bf00      	nop
 800174c:	e002      	b.n	8001754 <SCH_ImageDecode+0x164>
					if (pix_x >= LCD_WIDTH-1) continue;
 800174e:	bf00      	nop
 8001750:	e000      	b.n	8001754 <SCH_ImageDecode+0x164>
					if (pix_y >= LCD_HEIGHT-2) continue;
 8001752:	bf00      	nop
				for (uint16_t x = 0; x < 8; x++) {
 8001754:	8b7b      	ldrh	r3, [r7, #26]
 8001756:	3301      	adds	r3, #1
 8001758:	837b      	strh	r3, [r7, #26]
 800175a:	8b7b      	ldrh	r3, [r7, #26]
 800175c:	2b07      	cmp	r3, #7
 800175e:	f67f af67 	bls.w	8001630 <SCH_ImageDecode+0x40>
			for (uint16_t y = 0; y < 8; y++) {
 8001762:	8bbb      	ldrh	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	83bb      	strh	r3, [r7, #28]
 8001768:	8bbb      	ldrh	r3, [r7, #28]
 800176a:	2b07      	cmp	r3, #7
 800176c:	f67f af5d 	bls.w	800162a <SCH_ImageDecode+0x3a>
		for (uint16_t mcu_x = 0; mcu_x < jpeg_mcu_widths[jpeg_quality]; mcu_x++) {
 8001770:	8bfb      	ldrh	r3, [r7, #30]
 8001772:	3301      	adds	r3, #1
 8001774:	83fb      	strh	r3, [r7, #30]
 8001776:	4b3e      	ldr	r3, [pc, #248]	@ (8001870 <SCH_ImageDecode+0x280>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b3d      	ldr	r3, [pc, #244]	@ (8001874 <SCH_ImageDecode+0x284>)
 800177e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001782:	8bfa      	ldrh	r2, [r7, #30]
 8001784:	429a      	cmp	r2, r3
 8001786:	f4ff af3e 	bcc.w	8001606 <SCH_ImageDecode+0x16>
					}
				}
			}
		}

		current_mcu_y++;
 800178a:	4b38      	ldr	r3, [pc, #224]	@ (800186c <SCH_ImageDecode+0x27c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b36      	ldr	r3, [pc, #216]	@ (800186c <SCH_ImageDecode+0x27c>)
 8001794:	701a      	strb	r2, [r3, #0]

		if (current_mcu_y >= jpeg_mcu_heights[jpeg_quality]) {
 8001796:	4b35      	ldr	r3, [pc, #212]	@ (800186c <SCH_ImageDecode+0x27c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <SCH_ImageDecode+0x280>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <SCH_ImageDecode+0x294>)
 80017a4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d350      	bcc.n	800184e <SCH_ImageDecode+0x25e>
			current_mcu_y = 0;	// Reset the V-MCU counter
 80017ac:	4b2f      	ldr	r3, [pc, #188]	@ (800186c <SCH_ImageDecode+0x27c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

			avg_ms_imgRecv *= 0.8;
 80017b2:	4b35      	ldr	r3, [pc, #212]	@ (8001888 <SCH_ImageDecode+0x298>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017be:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001858 <SCH_ImageDecode+0x268>
 80017c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017ca:	ee17 2a90 	vmov	r2, s15
 80017ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001888 <SCH_ImageDecode+0x298>)
 80017d0:	601a      	str	r2, [r3, #0]
			avg_ms_imgRecv += DeltaTime(tim_ms_imgRecv)*0.2;	// Get the time since last frame
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <SCH_ImageDecode+0x29c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f92a 	bl	8001a30 <DeltaTime>
 80017dc:	ee07 0a90 	vmov	s15, r0
 80017e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017e4:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001860 <SCH_ImageDecode+0x270>
 80017e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017ec:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <SCH_ImageDecode+0x298>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001800:	ee17 2a90 	vmov	r2, s15
 8001804:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <SCH_ImageDecode+0x298>)
 8001806:	601a      	str	r2, [r3, #0]
			tim_ms_imgRecv = HAL_GetTick();						// start the frame-timer
 8001808:	f002 fb24 	bl	8003e54 <HAL_GetTick>
 800180c:	4603      	mov	r3, r0
 800180e:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <SCH_ImageDecode+0x29c>)
 8001810:	6013      	str	r3, [r2, #0]

			// Plaster the FPS on top of VRAM
			if (!GetState(OP_CAMERA_FRAMETIME))
 8001812:	2002      	movs	r0, #2
 8001814:	f000 f924 	bl	8001a60 <GetState>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d105      	bne.n	800182a <SCH_ImageDecode+0x23a>
				ST7789_Draw_DATA(&hst7789, avg_ms_imgRecv);
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <SCH_ImageDecode+0x298>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4619      	mov	r1, r3
 8001824:	4816      	ldr	r0, [pc, #88]	@ (8001880 <SCH_ImageDecode+0x290>)
 8001826:	f001 ff85 	bl	8003734 <ST7789_Draw_DATA>

			jpeg_state = 0;		// Flag JPEG as idle
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <SCH_ImageDecode+0x278>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
			st7789_state = 1;	// Flag LCD as requested
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <SCH_ImageDecode+0x2a0>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]

			st_interlacing = !st_interlacing; // Toggle interlacing
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <SCH_ImageDecode+0x2a4>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf0c      	ite	eq
 800183e:	2301      	moveq	r3, #1
 8001840:	2300      	movne	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <SCH_ImageDecode+0x2a4>)
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e000      	b.n	800184e <SCH_ImageDecode+0x25e>
	if (jpeg_state != 2) return;
 800184c:	bf00      	nop
		}
}
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	f3af 8000 	nop.w
 8001858:	9999999a 	.word	0x9999999a
 800185c:	3fe99999 	.word	0x3fe99999
 8001860:	9999999a 	.word	0x9999999a
 8001864:	3fc99999 	.word	0x3fc99999
 8001868:	240472b2 	.word	0x240472b2
 800186c:	240472b3 	.word	0x240472b3
 8001870:	24026d2c 	.word	0x24026d2c
 8001874:	2400001c 	.word	0x2400001c
 8001878:	2400002c 	.word	0x2400002c
 800187c:	2403c630 	.word	0x2403c630
 8001880:	24001484 	.word	0x24001484
 8001884:	24000024 	.word	0x24000024
 8001888:	24026d24 	.word	0x24026d24
 800188c:	24026d28 	.word	0x24026d28
 8001890:	24026c9c 	.word	0x24026c9c
 8001894:	24026c9d 	.word	0x24026c9d

08001898 <SCH_OLEDUpdate>:

void SCH_OLEDUpdate() {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_oled);
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <SCH_OLEDUpdate+0x58>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f8c4 	bl	8001a30 <DeltaTime>
 80018a8:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_OLED) return;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b20      	cmp	r3, #32
 80018ae:	d91b      	bls.n	80018e8 <SCH_OLEDUpdate+0x50>

	// Update the timer for the next DT period
	sch_tim_oled = HAL_GetTick();
 80018b0:	f002 fad0 	bl	8003e54 <HAL_GetTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a0e      	ldr	r2, [pc, #56]	@ (80018f0 <SCH_OLEDUpdate+0x58>)
 80018b8:	6013      	str	r3, [r2, #0]

	// Display the screen contents
	// Clear existing VRAM
	SSD1306_Clear(&hssd1);
 80018ba:	480e      	ldr	r0, [pc, #56]	@ (80018f4 <SCH_OLEDUpdate+0x5c>)
 80018bc:	f001 fba2 	bl	8003004 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 80018c0:	480d      	ldr	r0, [pc, #52]	@ (80018f8 <SCH_OLEDUpdate+0x60>)
 80018c2:	f001 fb9f 	bl	8003004 <SSD1306_Clear>

	// Draw the sliders
	Draw_Slider(0);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f9ae 	bl	8001c28 <Draw_Slider>
	Draw_Slider(1);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f000 f9ab 	bl	8001c28 <Draw_Slider>

	MENU_Draw(&hmenu, delta_t);
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4809      	ldr	r0, [pc, #36]	@ (80018fc <SCH_OLEDUpdate+0x64>)
 80018d6:	f016 fd19 	bl	801830c <MENU_Draw>

	// Update the screens
	SSD1306_Update(&hssd1);
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <SCH_OLEDUpdate+0x5c>)
 80018dc:	f001 fba6 	bl	800302c <SSD1306_Update>
	SSD1306_Update(&hssd2);
 80018e0:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <SCH_OLEDUpdate+0x60>)
 80018e2:	f001 fba3 	bl	800302c <SSD1306_Update>
 80018e6:	e000      	b.n	80018ea <SCH_OLEDUpdate+0x52>
	if (delta_t < SCH_MS_OLED) return;
 80018e8:	bf00      	nop
}
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	24000b28 	.word	0x24000b28
 80018f4:	24000b48 	.word	0x24000b48
 80018f8:	24000b5c 	.word	0x24000b5c
 80018fc:	24001438 	.word	0x24001438

08001900 <SCH_LCDUpdate>:

void SCH_LCDUpdate() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	// Update the displays
	if (hst7789.spi_state == 0 && st7789_state == 1) {
 8001904:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <SCH_LCDUpdate+0x24>)
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <SCH_LCDUpdate+0x20>
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <SCH_LCDUpdate+0x28>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <SCH_LCDUpdate+0x20>
		ST7789_UpdateAutomatic(&hst7789);
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <SCH_LCDUpdate+0x24>)
 8001916:	f001 fe4c 	bl	80035b2 <ST7789_UpdateAutomatic>
		st7789_state = 0;
 800191a:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <SCH_LCDUpdate+0x28>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
	}
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	24001484 	.word	0x24001484
 8001928:	24026c9c 	.word	0x24026c9c

0800192c <SCH_GetInputs>:

void SCH_GetInputs() {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++) {
 8001932:	2300      	movs	r3, #0
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	e041      	b.n	80019bc <SCH_GetInputs+0x90>
		// Debounce timer
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4a35      	ldr	r2, [pc, #212]	@ (8001a10 <SCH_GetInputs+0xe4>)
 800193c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f875 	bl	8001a30 <DeltaTime>
 8001946:	4603      	mov	r3, r0
 8001948:	2b13      	cmp	r3, #19
 800194a:	d933      	bls.n	80019b4 <SCH_GetInputs+0x88>

		// Get input
		uint8_t i_new = !HAL_GPIO_ReadPin(i_ports[i], i_pins[i]);
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	4a31      	ldr	r2, [pc, #196]	@ (8001a14 <SCH_GetInputs+0xe8>)
 8001950:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	4930      	ldr	r1, [pc, #192]	@ (8001a18 <SCH_GetInputs+0xec>)
 8001958:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800195c:	4619      	mov	r1, r3
 800195e:	4610      	mov	r0, r2
 8001960:	f006 fef4 	bl	800874c <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	71bb      	strb	r3, [r7, #6]

		// Update debounce timer
		if (i_new != istate_hold[i])
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4a29      	ldr	r2, [pc, #164]	@ (8001a1c <SCH_GetInputs+0xf0>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	79ba      	ldrb	r2, [r7, #6]
 800197a:	429a      	cmp	r2, r3
 800197c:	d006      	beq.n	800198c <SCH_GetInputs+0x60>
			istate_time[i] = HAL_GetTick();
 800197e:	79fc      	ldrb	r4, [r7, #7]
 8001980:	f002 fa68 	bl	8003e54 <HAL_GetTick>
 8001984:	4603      	mov	r3, r0
 8001986:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <SCH_GetInputs+0xe4>)
 8001988:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

		istate_pressed[i] = i_new && !istate_hold[i];	// Just pressed
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <SCH_GetInputs+0x74>
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <SCH_GetInputs+0xf0>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <SCH_GetInputs+0x74>
 800199c:	2201      	movs	r2, #1
 800199e:	e000      	b.n	80019a2 <SCH_GetInputs+0x76>
 80019a0:	2200      	movs	r2, #0
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	b2d1      	uxtb	r1, r2
 80019a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a20 <SCH_GetInputs+0xf4>)
 80019a8:	54d1      	strb	r1, [r2, r3]
		istate_hold[i] = i_new;							// Update sotred val
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	491b      	ldr	r1, [pc, #108]	@ (8001a1c <SCH_GetInputs+0xf0>)
 80019ae:	79ba      	ldrb	r2, [r7, #6]
 80019b0:	54ca      	strb	r2, [r1, r3]
 80019b2:	e000      	b.n	80019b6 <SCH_GetInputs+0x8a>
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 80019b4:	bf00      	nop
	for (uint8_t i = 0; i < 4; i++) {
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	3301      	adds	r3, #1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d9ba      	bls.n	8001938 <SCH_GetInputs+0xc>
//			test_vals[i]++;
//		}
	}

	// Update the menu state
	MENU_ParseInput(&hmenu, istate_pressed);
 80019c2:	4917      	ldr	r1, [pc, #92]	@ (8001a20 <SCH_GetInputs+0xf4>)
 80019c4:	4817      	ldr	r0, [pc, #92]	@ (8001a24 <SCH_GetInputs+0xf8>)
 80019c6:	f017 f8fb 	bl	8018bc0 <MENU_ParseInput>
	istate_pressed[0] = 0;
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <SCH_GetInputs+0xf4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
	istate_pressed[1] = 0;
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <SCH_GetInputs+0xf4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	705a      	strb	r2, [r3, #1]
	istate_pressed[2] = 0;
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <SCH_GetInputs+0xf4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	709a      	strb	r2, [r3, #2]
	istate_pressed[3] = 0;
 80019dc:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <SCH_GetInputs+0xf4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	70da      	strb	r2, [r3, #3]

	// Update the JPEG settings
	if (jpeg_quality != GetState(OP_CAMERA_QUALITY)) {
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 f83c 	bl	8001a60 <GetState>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <SCH_GetInputs+0xfc>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d009      	beq.n	8001a08 <SCH_GetInputs+0xdc>
		jpeg_quality = GetState(OP_CAMERA_QUALITY);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f000 f833 	bl	8001a60 <GetState>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <SCH_GetInputs+0xfc>)
 8001a00:	701a      	strb	r2, [r3, #0]
		// Clear the screen
		ST7789_Clear(&hst7789);
 8001a02:	480a      	ldr	r0, [pc, #40]	@ (8001a2c <SCH_GetInputs+0x100>)
 8001a04:	f001 fdec 	bl	80035e0 <ST7789_Clear>
	}

}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	24000b34 	.word	0x24000b34
 8001a14:	24000000 	.word	0x24000000
 8001a18:	24000010 	.word	0x24000010
 8001a1c:	24000b30 	.word	0x24000b30
 8001a20:	24000b44 	.word	0x24000b44
 8001a24:	24001438 	.word	0x24001438
 8001a28:	24026d2c 	.word	0x24026d2c
 8001a2c:	24001484 	.word	0x24001484

08001a30 <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //

uint32_t DeltaTime(uint32_t start_t) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 8001a38:	f002 fa0c 	bl	8003e54 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d204      	bcs.n	8001a50 <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	e002      	b.n	8001a56 <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	1ad3      	subs	r3, r2, r3
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <GetState>:

uint8_t GetState(uint8_t byte_num) {
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	if (byte_num >= 64) return 0;
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a6e:	d901      	bls.n	8001a74 <GetState+0x14>
 8001a70:	2300      	movs	r3, #0
 8001a72:	e004      	b.n	8001a7e <GetState+0x1e>
	return hmenu.state_packet[byte_num];
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <GetState+0x2c>)
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	24001438 	.word	0x24001438

08001a90 <HAL_UART_RxCpltCallback>:

// DEBUG FUNCTIONS

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	uint8_t ret = XBEE_RX_DMACallback(&hxbee);
 8001a98:	4804      	ldr	r0, [pc, #16]	@ (8001aac <HAL_UART_RxCpltCallback+0x1c>)
 8001a9a:	f016 f8cf 	bl	8017c3c <XBEE_RX_DMACallback>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
	if (ret) {
//		sprintf(ssd_msg, " PKT Err: %d", ret);
//		WriteDebug(ssd_msg, strlen(ssd_msg));
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	24026cfc 	.word	0x24026cfc

08001ab0 <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT %d", hjpeg->OutDataLength);
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001aba:	2202      	movs	r2, #2
 8001abc:	701a      	strb	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	240472b2 	.word	0x240472b2

08001ad0 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <HAL_JPEG_ErrorCallback+0x1c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	240472b2 	.word	0x240472b2

08001af0 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
	// Abort if it's too long
	if (OutDataLength > JPEG_MAX_WIDTH*JPEG_MAX_HEIGHT) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f64a 4280 	movw	r2, #44160	@ 0xac80
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d906      	bls.n	8001b14 <HAL_JPEG_DataReadyCallback+0x24>
		HAL_JPEG_Abort(hjpeg);
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f009 fe78 	bl	800b7fc <HAL_JPEG_Abort>
		jpeg_state = 2;
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <HAL_JPEG_DataReadyCallback+0x30>)
 8001b0e:	2202      	movs	r2, #2
 8001b10:	701a      	strb	r2, [r3, #0]
		return;
 8001b12:	e002      	b.n	8001b1a <HAL_JPEG_DataReadyCallback+0x2a>
	}

	jpeg_state = 2;
 8001b14:	4b02      	ldr	r3, [pc, #8]	@ (8001b20 <HAL_JPEG_DataReadyCallback+0x30>)
 8001b16:	2202      	movs	r2, #2
 8001b18:	701a      	strb	r2, [r3, #0]
}
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	240472b2 	.word	0x240472b2

08001b24 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 8001b2c:	4803      	ldr	r0, [pc, #12]	@ (8001b3c <HAL_SPI_TxCpltCallback+0x18>)
 8001b2e:	f001 ff43 	bl	80039b8 <ST7789_DMATransmitCplt>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	24001484 	.word	0x24001484

08001b40 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
//		// Accumulate the samples
//		// Have to pre-divide so the result fits in a uint16
//		adc_average[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
//	}

	for (int i = 0; i < 2; i++) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e053      	b.n	8001bf6 <HAL_ADC_ConvCpltCallback+0xb6>

		adc_average[i] = adc_buffer[i]; // Skip the averaging process
 8001b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c0c <HAL_ADC_ConvCpltCallback+0xcc>)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b56:	4a2e      	ldr	r2, [pc, #184]	@ (8001c10 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 8001b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c10 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	0bdb      	lsrs	r3, r3, #15
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	4a28      	ldr	r2, [pc, #160]	@ (8001c14 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	460a      	mov	r2, r1
 8001b7a:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 8001b7c:	4a24      	ldr	r2, [pc, #144]	@ (8001c10 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b84:	09db      	lsrs	r3, r3, #7
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b2d9      	uxtb	r1, r3
 8001b8a:	4a23      	ldr	r2, [pc, #140]	@ (8001c18 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	460a      	mov	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 8001b94:	4a1f      	ldr	r2, [pc, #124]	@ (8001c14 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00a      	beq.n	8001bb6 <HAL_ADC_ConvCpltCallback+0x76>
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	b2d9      	uxtb	r1, r3
 8001bac:	4a1a      	ldr	r2, [pc, #104]	@ (8001c18 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 8001bb6:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <HAL_ADC_ConvCpltCallback+0xdc>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d204      	bcs.n	8001bd0 <HAL_ADC_ConvCpltCallback+0x90>
			slider_magnitude[i] = 0;
 8001bc6:	4a14      	ldr	r2, [pc, #80]	@ (8001c18 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001bd0:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dd04      	ble.n	8001bf0 <HAL_ADC_ConvCpltCallback+0xb0>
			slider_magnitude[i] = 0xFF;
 8001be6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c18 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	22ff      	movs	r2, #255	@ 0xff
 8001bee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	dda8      	ble.n	8001b4e <HAL_ADC_ConvCpltCallback+0xe>

	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	24026ca0 	.word	0x24026ca0
 8001c10:	24026cc8 	.word	0x24026cc8
 8001c14:	24026cd0 	.word	0x24026cd0
 8001c18:	24026ccc 	.word	0x24026ccc
 8001c1c:	24000018 	.word	0x24000018
 8001c20:	24000019 	.word	0x24000019
 8001c24:	00000000 	.word	0x00000000

08001c28 <Draw_Slider>:

// ------------------------------------------------------------ DRAW COMMANDS -- //
void Draw_Slider(uint8_t slider_id) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b092      	sub	sp, #72	@ 0x48
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	uint8_t byte_sel = slider_magnitude[slider_id] >> 5;					// Byte threshold
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4ab0      	ldr	r2, [pc, #704]	@ (8001ef8 <Draw_Slider+0x2d0>)
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t bit_sel = (slider_magnitude[slider_id] >> 2) & 0b00000111;		// Partial byte threshold
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4aad      	ldr	r2, [pc, #692]	@ (8001ef8 <Draw_Slider+0x2d0>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t subbit_sel = (slider_magnitude[slider_id]) & 0b00000111;	// Fine control display
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4aa9      	ldr	r2, [pc, #676]	@ (8001ef8 <Draw_Slider+0x2d0>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	77fb      	strb	r3, [r7, #31]

	uint8_t slider_vram[8] = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]

	if (slider_direction[slider_id]) {
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4aa4      	ldr	r2, [pc, #656]	@ (8001efc <Draw_Slider+0x2d4>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d036      	beq.n	8001cde <Draw_Slider+0xb6>
		for (int i = 0; i < 8; i++) {
 8001c70:	2300      	movs	r3, #0
 8001c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c74:	e02f      	b.n	8001cd6 <Draw_Slider+0xae>
			if (i < byte_sel) slider_vram[7-i] = 0xFF;	// Before partial byte, fill
 8001c76:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	da07      	bge.n	8001c90 <Draw_Slider+0x68>
 8001c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	3348      	adds	r3, #72	@ 0x48
 8001c88:	443b      	add	r3, r7
 8001c8a:	22ff      	movs	r2, #255	@ 0xff
 8001c8c:	f803 2c38 	strb.w	r2, [r3, #-56]
			if (i > byte_sel) slider_vram[7-i] = 0x00;	// After partial byte, empty
 8001c90:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001c94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dd07      	ble.n	8001caa <Draw_Slider+0x82>
 8001c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9c:	f1c3 0307 	rsb	r3, r3, #7
 8001ca0:	3348      	adds	r3, #72	@ 0x48
 8001ca2:	443b      	add	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f803 2c38 	strb.w	r2, [r3, #-56]
			if (i == byte_sel) slider_vram[7-i] = 0xFF << (7-bit_sel);	// Partial byte
 8001caa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10d      	bne.n	8001cd0 <Draw_Slider+0xa8>
 8001cb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cb8:	f1c3 0307 	rsb	r3, r3, #7
 8001cbc:	22ff      	movs	r2, #255	@ 0xff
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	3348      	adds	r3, #72	@ 0x48
 8001cca:	443b      	add	r3, r7
 8001ccc:	f803 2c38 	strb.w	r2, [r3, #-56]
		for (int i = 0; i < 8; i++) {
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	ddcc      	ble.n	8001c76 <Draw_Slider+0x4e>
 8001cdc:	e031      	b.n	8001d42 <Draw_Slider+0x11a>
		}
	} else {
		for (int i = 0; i < 8; i++) {
 8001cde:	2300      	movs	r3, #0
 8001ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ce2:	e02b      	b.n	8001d3c <Draw_Slider+0x114>
			if (i < byte_sel) slider_vram[i] = 0xFF;
 8001ce4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cea:	429a      	cmp	r2, r3
 8001cec:	da05      	bge.n	8001cfa <Draw_Slider+0xd2>
 8001cee:	f107 0210 	add.w	r2, r7, #16
 8001cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf4:	4413      	add	r3, r2
 8001cf6:	22ff      	movs	r2, #255	@ 0xff
 8001cf8:	701a      	strb	r2, [r3, #0]
			if (i > byte_sel) slider_vram[i] = 0x00;
 8001cfa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001cfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dd05      	ble.n	8001d10 <Draw_Slider+0xe8>
 8001d04:	f107 0210 	add.w	r2, r7, #16
 8001d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d0a:	4413      	add	r3, r2
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
			if (i == byte_sel) slider_vram[i] = 0xFF >> (7-bit_sel);
 8001d10:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d10d      	bne.n	8001d36 <Draw_Slider+0x10e>
 8001d1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	22ff      	movs	r2, #255	@ 0xff
 8001d24:	fa42 f303 	asr.w	r3, r2, r3
 8001d28:	b2d9      	uxtb	r1, r3
 8001d2a:	f107 0210 	add.w	r2, r7, #16
 8001d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d30:	4413      	add	r3, r2
 8001d32:	460a      	mov	r2, r1
 8001d34:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8001d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d38:	3301      	adds	r3, #1
 8001d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d3e:	2b07      	cmp	r3, #7
 8001d40:	ddd0      	ble.n	8001ce4 <Draw_Slider+0xbc>
		}
	}

	uint8_t slider_str[4] = {0};
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
	sprintf(slider_str, "%03d", (uint8_t)(slider_magnitude[slider_id] / 2.55));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4a6b      	ldr	r2, [pc, #428]	@ (8001ef8 <Draw_Slider+0x2d0>)
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d54:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001ef0 <Draw_Slider+0x2c8>
 8001d58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d60:	edc7 7a00 	vstr	s15, [r7]
 8001d64:	783b      	ldrb	r3, [r7, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4964      	ldr	r1, [pc, #400]	@ (8001f00 <Draw_Slider+0x2d8>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f01a fb05 	bl	801c380 <siprintf>

	if (slider_id == 0) {
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 80f4 	bne.w	8001f66 <Draw_Slider+0x33e>
		uint16_t curs = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	837b      	strh	r3, [r7, #26]
		for (int y = 0; y < 8; y++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d86:	e02f      	b.n	8001de8 <Draw_Slider+0x1c0>
			for (int x = 3; x < 8; x++)
 8001d88:	2303      	movs	r3, #3
 8001d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d8c:	e00f      	b.n	8001dae <Draw_Slider+0x186>
				ssd1_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 8001d8e:	8b7a      	ldrh	r2, [r7, #26]
 8001d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d92:	01db      	lsls	r3, r3, #7
 8001d94:	441a      	add	r2, r3
 8001d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d98:	4413      	add	r3, r2
 8001d9a:	f107 0110 	add.w	r1, r7, #16
 8001d9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001da0:	440a      	add	r2, r1
 8001da2:	7811      	ldrb	r1, [r2, #0]
 8001da4:	4a57      	ldr	r2, [pc, #348]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001da6:	54d1      	strb	r1, [r2, r3]
			for (int x = 3; x < 8; x++)
 8001da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001daa:	3301      	adds	r3, #1
 8001dac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db0:	2b07      	cmp	r3, #7
 8001db2:	ddec      	ble.n	8001d8e <Draw_Slider+0x166>
			ssd1_vram[curs + y*128 + 0] = 0x80 >> subbit_sel;	// Set the fine control disp.
 8001db4:	7ffb      	ldrb	r3, [r7, #31]
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	fa42 f103 	asr.w	r1, r2, r3
 8001dbc:	8b7a      	ldrh	r2, [r7, #26]
 8001dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dc0:	01db      	lsls	r3, r3, #7
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2c9      	uxtb	r1, r1
 8001dc6:	4a4f      	ldr	r2, [pc, #316]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001dc8:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[curs + y*128 + 1] = 0x80 >> subbit_sel;
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	2280      	movs	r2, #128	@ 0x80
 8001dce:	fa42 f103 	asr.w	r1, r2, r3
 8001dd2:	8b7a      	ldrh	r2, [r7, #26]
 8001dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	4413      	add	r3, r2
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2c9      	uxtb	r1, r1
 8001dde:	4a49      	ldr	r2, [pc, #292]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001de0:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 8001de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001de4:	3301      	adds	r3, #1
 8001de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dea:	2b07      	cmp	r3, #7
 8001dec:	ddcc      	ble.n	8001d88 <Draw_Slider+0x160>
		}
		hssd1.str_cursor = 10;
 8001dee:	4b46      	ldr	r3, [pc, #280]	@ (8001f08 <Draw_Slider+0x2e0>)
 8001df0:	220a      	movs	r2, #10
 8001df2:	821a      	strh	r2, [r3, #16]
		hssd1.draw_inverted = 1;
 8001df4:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <Draw_Slider+0x2e0>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	749a      	strb	r2, [r3, #18]
		SSD1306_DrawString(&hssd1, slider_str, strlen(slider_str));
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fabe 	bl	8000380 <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	483e      	ldr	r0, [pc, #248]	@ (8001f08 <Draw_Slider+0x2e0>)
 8001e10:	f001 fa4e 	bl	80032b0 <SSD1306_DrawString>
		hssd1.draw_inverted = 0;
 8001e14:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <Draw_Slider+0x2e0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	749a      	strb	r2, [r3, #18]

		// Draw the strip on top
		for (uint8_t i = 10; i <= 128; i++) {
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e20:	e018      	b.n	8001e54 <Draw_Slider+0x22c>
			if (i%2 == 0)
 8001e22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d106      	bne.n	8001e3e <Draw_Slider+0x216>
				ssd1_vram[128 + i] = 0b00010110;
 8001e30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e34:	3380      	adds	r3, #128	@ 0x80
 8001e36:	4a33      	ldr	r2, [pc, #204]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001e38:	2116      	movs	r1, #22
 8001e3a:	54d1      	strb	r1, [r2, r3]
 8001e3c:	e005      	b.n	8001e4a <Draw_Slider+0x222>
			else
				ssd1_vram[128 + i] = 0b00001110;
 8001e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e42:	3380      	adds	r3, #128	@ 0x80
 8001e44:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001e46:	210e      	movs	r1, #14
 8001e48:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 10; i <= 128; i++) {
 8001e4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e58:	2b80      	cmp	r3, #128	@ 0x80
 8001e5a:	d9e2      	bls.n	8001e22 <Draw_Slider+0x1fa>
		}

		// Pad the inverted number
		ssd1_vram[10] = 0xFF;
 8001e5c:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001e5e:	22ff      	movs	r2, #255	@ 0xff
 8001e60:	729a      	strb	r2, [r3, #10]
		ssd1_vram[29] = 0xFF;
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001e64:	22ff      	movs	r2, #255	@ 0xff
 8001e66:	775a      	strb	r2, [r3, #29]
		for (uint8_t i = 10; i < 30; i++) {
 8001e68:	230a      	movs	r3, #10
 8001e6a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001e6e:	e011      	b.n	8001e94 <Draw_Slider+0x26c>
			ssd1_vram[128 + i] |= 0b00000011;
 8001e70:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001e74:	3380      	adds	r3, #128	@ 0x80
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001e78:	5cd2      	ldrb	r2, [r2, r3]
 8001e7a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001e7e:	3380      	adds	r3, #128	@ 0x80
 8001e80:	f042 0203 	orr.w	r2, r2, #3
 8001e84:	b2d1      	uxtb	r1, r2
 8001e86:	4a1f      	ldr	r2, [pc, #124]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001e88:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 10; i < 30; i++) {
 8001e8a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001e94:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001e98:	2b1d      	cmp	r3, #29
 8001e9a:	d9e9      	bls.n	8001e70 <Draw_Slider+0x248>
		}

		// Draw the cool bars
		for (uint8_t i = 0; i <= 4; i++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001ea2:	e01e      	b.n	8001ee2 <Draw_Slider+0x2ba>
			ssd1_vram[30+i*2] = 0xFF << i;
 8001ea4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ea8:	22ff      	movs	r2, #255	@ 0xff
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001eb0:	330f      	adds	r3, #15
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	b2d1      	uxtb	r1, r2
 8001eb6:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001eb8:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[30+i*2 + 128] |= 0b00000011;
 8001eba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ebe:	334f      	adds	r3, #79	@ 0x4f
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001ec4:	5cd2      	ldrb	r2, [r2, r3]
 8001ec6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001eca:	334f      	adds	r3, #79	@ 0x4f
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	f042 0203 	orr.w	r2, r2, #3
 8001ed2:	b2d1      	uxtb	r1, r2
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f04 <Draw_Slider+0x2dc>)
 8001ed6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 4; i++) {
 8001ed8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001edc:	3301      	adds	r3, #1
 8001ede:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001ee2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d9dc      	bls.n	8001ea4 <Draw_Slider+0x27c>
		}

		for (uint16_t i = 1; i <= 7; i++) {
 8001eea:	2301      	movs	r3, #1
 8001eec:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001eee:	e036      	b.n	8001f5e <Draw_Slider+0x336>
 8001ef0:	66666666 	.word	0x66666666
 8001ef4:	40046666 	.word	0x40046666
 8001ef8:	24026ccc 	.word	0x24026ccc
 8001efc:	24026cd0 	.word	0x24026cd0
 8001f00:	0801ea68 	.word	0x0801ea68
 8001f04:	24000b70 	.word	0x24000b70
 8001f08:	24000b48 	.word	0x24000b48
			ssd1_vram[i*128 + 10] = 0xFF;
 8001f0c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f0e:	01db      	lsls	r3, r3, #7
 8001f10:	330a      	adds	r3, #10
 8001f12:	4a8c      	ldr	r2, [pc, #560]	@ (8002144 <Draw_Slider+0x51c>)
 8001f14:	21ff      	movs	r1, #255	@ 0xff
 8001f16:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 11] = 0xFF;
 8001f18:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f1a:	01db      	lsls	r3, r3, #7
 8001f1c:	330b      	adds	r3, #11
 8001f1e:	4a89      	ldr	r2, [pc, #548]	@ (8002144 <Draw_Slider+0x51c>)
 8001f20:	21ff      	movs	r1, #255	@ 0xff
 8001f22:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 12] |= 0x55;
 8001f24:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f26:	01db      	lsls	r3, r3, #7
 8001f28:	330c      	adds	r3, #12
 8001f2a:	4a86      	ldr	r2, [pc, #536]	@ (8002144 <Draw_Slider+0x51c>)
 8001f2c:	5cd2      	ldrb	r2, [r2, r3]
 8001f2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f30:	01db      	lsls	r3, r3, #7
 8001f32:	330c      	adds	r3, #12
 8001f34:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8001f38:	b2d1      	uxtb	r1, r2
 8001f3a:	4a82      	ldr	r2, [pc, #520]	@ (8002144 <Draw_Slider+0x51c>)
 8001f3c:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 13] |= 0xAA;
 8001f3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f40:	01db      	lsls	r3, r3, #7
 8001f42:	330d      	adds	r3, #13
 8001f44:	4a7f      	ldr	r2, [pc, #508]	@ (8002144 <Draw_Slider+0x51c>)
 8001f46:	5cd2      	ldrb	r2, [r2, r3]
 8001f48:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f4a:	01db      	lsls	r3, r3, #7
 8001f4c:	330d      	adds	r3, #13
 8001f4e:	f062 0255 	orn	r2, r2, #85	@ 0x55
 8001f52:	b2d1      	uxtb	r1, r2
 8001f54:	4a7b      	ldr	r2, [pc, #492]	@ (8002144 <Draw_Slider+0x51c>)
 8001f56:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 1; i <= 7; i++) {
 8001f58:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001f5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f60:	2b07      	cmp	r3, #7
 8001f62:	d9d3      	bls.n	8001f0c <Draw_Slider+0x2e4>
			ssd2_vram[i*128 + 117] = 0xFF;
			ssd2_vram[i*128 + 116] |= 0x55;
			ssd2_vram[i*128 + 115] |= 0xAA;
		}
	}
}
 8001f64:	e0ea      	b.n	800213c <Draw_Slider+0x514>
		uint16_t curs = 120;
 8001f66:	2378      	movs	r3, #120	@ 0x78
 8001f68:	83bb      	strh	r3, [r7, #28]
		for (int y = 0; y < 8; y++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f6e:	e030      	b.n	8001fd2 <Draw_Slider+0x3aa>
			for (int x = 0; x < 5; x++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f74:	e00f      	b.n	8001f96 <Draw_Slider+0x36e>
				ssd2_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 8001f76:	8bba      	ldrh	r2, [r7, #28]
 8001f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7a:	01db      	lsls	r3, r3, #7
 8001f7c:	441a      	add	r2, r3
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	4413      	add	r3, r2
 8001f82:	f107 0110 	add.w	r1, r7, #16
 8001f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f88:	440a      	add	r2, r1
 8001f8a:	7811      	ldrb	r1, [r2, #0]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <Draw_Slider+0x520>)
 8001f8e:	54d1      	strb	r1, [r2, r3]
			for (int x = 0; x < 5; x++)
 8001f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f92:	3301      	adds	r3, #1
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	ddec      	ble.n	8001f76 <Draw_Slider+0x34e>
			ssd2_vram[curs + y*128 + 6] = 0x80 >> subbit_sel;	// Set the fine control disp.
 8001f9c:	7ffb      	ldrb	r3, [r7, #31]
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	fa42 f103 	asr.w	r1, r2, r3
 8001fa4:	8bba      	ldrh	r2, [r7, #28]
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	01db      	lsls	r3, r3, #7
 8001faa:	4413      	add	r3, r2
 8001fac:	3306      	adds	r3, #6
 8001fae:	b2c9      	uxtb	r1, r1
 8001fb0:	4a65      	ldr	r2, [pc, #404]	@ (8002148 <Draw_Slider+0x520>)
 8001fb2:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[curs + y*128 + 7] = 0x80 >> subbit_sel;
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	fa42 f103 	asr.w	r1, r2, r3
 8001fbc:	8bba      	ldrh	r2, [r7, #28]
 8001fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc0:	01db      	lsls	r3, r3, #7
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	b2c9      	uxtb	r1, r1
 8001fc8:	4a5f      	ldr	r2, [pc, #380]	@ (8002148 <Draw_Slider+0x520>)
 8001fca:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 8001fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fce:	3301      	adds	r3, #1
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd4:	2b07      	cmp	r3, #7
 8001fd6:	ddcb      	ble.n	8001f70 <Draw_Slider+0x348>
		hssd2.str_cursor = 98;
 8001fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800214c <Draw_Slider+0x524>)
 8001fda:	2262      	movs	r2, #98	@ 0x62
 8001fdc:	821a      	strh	r2, [r3, #16]
		hssd2.draw_inverted = 1;
 8001fde:	4b5b      	ldr	r3, [pc, #364]	@ (800214c <Draw_Slider+0x524>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	749a      	strb	r2, [r3, #18]
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe f9c9 	bl	8000380 <strlen>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4854      	ldr	r0, [pc, #336]	@ (800214c <Draw_Slider+0x524>)
 8001ffa:	f001 f959 	bl	80032b0 <SSD1306_DrawString>
		hssd2.draw_inverted = 0;
 8001ffe:	4b53      	ldr	r3, [pc, #332]	@ (800214c <Draw_Slider+0x524>)
 8002000:	2200      	movs	r2, #0
 8002002:	749a      	strb	r2, [r3, #18]
		for (uint8_t i = 0; i <= 128-10; i++) {
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800200a:	e018      	b.n	800203e <Draw_Slider+0x416>
			if (i%2 == 0)
 800200c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <Draw_Slider+0x400>
				ssd2_vram[128 + i] = 0b00010110;
 800201a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800201e:	3380      	adds	r3, #128	@ 0x80
 8002020:	4a49      	ldr	r2, [pc, #292]	@ (8002148 <Draw_Slider+0x520>)
 8002022:	2116      	movs	r1, #22
 8002024:	54d1      	strb	r1, [r2, r3]
 8002026:	e005      	b.n	8002034 <Draw_Slider+0x40c>
				ssd2_vram[128 + i] = 0b00001110;
 8002028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800202c:	3380      	adds	r3, #128	@ 0x80
 800202e:	4a46      	ldr	r2, [pc, #280]	@ (8002148 <Draw_Slider+0x520>)
 8002030:	210e      	movs	r1, #14
 8002032:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 128-10; i++) {
 8002034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002038:	3301      	adds	r3, #1
 800203a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800203e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002042:	2b76      	cmp	r3, #118	@ 0x76
 8002044:	d9e2      	bls.n	800200c <Draw_Slider+0x3e4>
		ssd2_vram[128-10] = 0xFF;
 8002046:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <Draw_Slider+0x520>)
 8002048:	22ff      	movs	r2, #255	@ 0xff
 800204a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
		ssd2_vram[128-11] = 0xFF;
 800204e:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <Draw_Slider+0x520>)
 8002050:	22ff      	movs	r2, #255	@ 0xff
 8002052:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
		for (uint8_t i = 128-30; i < 128-10; i++) {
 8002056:	2362      	movs	r3, #98	@ 0x62
 8002058:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800205c:	e011      	b.n	8002082 <Draw_Slider+0x45a>
			ssd2_vram[128 + i] |= 0b00000011;
 800205e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002062:	3380      	adds	r3, #128	@ 0x80
 8002064:	4a38      	ldr	r2, [pc, #224]	@ (8002148 <Draw_Slider+0x520>)
 8002066:	5cd2      	ldrb	r2, [r2, r3]
 8002068:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800206c:	3380      	adds	r3, #128	@ 0x80
 800206e:	f042 0203 	orr.w	r2, r2, #3
 8002072:	b2d1      	uxtb	r1, r2
 8002074:	4a34      	ldr	r2, [pc, #208]	@ (8002148 <Draw_Slider+0x520>)
 8002076:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 128-30; i < 128-10; i++) {
 8002078:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800207c:	3301      	adds	r3, #1
 800207e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002082:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002086:	2b75      	cmp	r3, #117	@ 0x75
 8002088:	d9e9      	bls.n	800205e <Draw_Slider+0x436>
		for (uint8_t i = 0; i <= 4; i++) {
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002090:	e021      	b.n	80020d6 <Draw_Slider+0x4ae>
			ssd2_vram[128 - (30+i*2)] = 0xFF << i;
 8002092:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002096:	22ff      	movs	r2, #255	@ 0xff
 8002098:	409a      	lsls	r2, r3
 800209a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800209e:	f1c3 0331 	rsb	r3, r3, #49	@ 0x31
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	b2d1      	uxtb	r1, r2
 80020a6:	4a28      	ldr	r2, [pc, #160]	@ (8002148 <Draw_Slider+0x520>)
 80020a8:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[128 - (30+i*2) + 128] |= 0b00000011;
 80020aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020ae:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4a24      	ldr	r2, [pc, #144]	@ (8002148 <Draw_Slider+0x520>)
 80020b6:	5cd2      	ldrb	r2, [r2, r3]
 80020b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020bc:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	f042 0203 	orr.w	r2, r2, #3
 80020c6:	b2d1      	uxtb	r1, r2
 80020c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <Draw_Slider+0x520>)
 80020ca:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 4; i++) {
 80020cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020d0:	3301      	adds	r3, #1
 80020d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80020d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d9d9      	bls.n	8002092 <Draw_Slider+0x46a>
		for (uint16_t i = 1; i <= 7; i++) {
 80020de:	2301      	movs	r3, #1
 80020e0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80020e2:	e028      	b.n	8002136 <Draw_Slider+0x50e>
			ssd2_vram[i*128 + 118] = 0xFF;
 80020e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020e6:	01db      	lsls	r3, r3, #7
 80020e8:	3376      	adds	r3, #118	@ 0x76
 80020ea:	4a17      	ldr	r2, [pc, #92]	@ (8002148 <Draw_Slider+0x520>)
 80020ec:	21ff      	movs	r1, #255	@ 0xff
 80020ee:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 117] = 0xFF;
 80020f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020f2:	01db      	lsls	r3, r3, #7
 80020f4:	3375      	adds	r3, #117	@ 0x75
 80020f6:	4a14      	ldr	r2, [pc, #80]	@ (8002148 <Draw_Slider+0x520>)
 80020f8:	21ff      	movs	r1, #255	@ 0xff
 80020fa:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 116] |= 0x55;
 80020fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020fe:	01db      	lsls	r3, r3, #7
 8002100:	3374      	adds	r3, #116	@ 0x74
 8002102:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <Draw_Slider+0x520>)
 8002104:	5cd2      	ldrb	r2, [r2, r3]
 8002106:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002108:	01db      	lsls	r3, r3, #7
 800210a:	3374      	adds	r3, #116	@ 0x74
 800210c:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8002110:	b2d1      	uxtb	r1, r2
 8002112:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <Draw_Slider+0x520>)
 8002114:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 115] |= 0xAA;
 8002116:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002118:	01db      	lsls	r3, r3, #7
 800211a:	3373      	adds	r3, #115	@ 0x73
 800211c:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <Draw_Slider+0x520>)
 800211e:	5cd2      	ldrb	r2, [r2, r3]
 8002120:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002122:	01db      	lsls	r3, r3, #7
 8002124:	3373      	adds	r3, #115	@ 0x73
 8002126:	f062 0255 	orn	r2, r2, #85	@ 0x55
 800212a:	b2d1      	uxtb	r1, r2
 800212c:	4a06      	ldr	r2, [pc, #24]	@ (8002148 <Draw_Slider+0x520>)
 800212e:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 1; i <= 7; i++) {
 8002130:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002132:	3301      	adds	r3, #1
 8002134:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002136:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002138:	2b07      	cmp	r3, #7
 800213a:	d9d3      	bls.n	80020e4 <Draw_Slider+0x4bc>
}
 800213c:	bf00      	nop
 800213e:	3748      	adds	r7, #72	@ 0x48
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	24000b70 	.word	0x24000b70
 8002148:	24000f70 	.word	0x24000f70
 800214c:	24000b5c 	.word	0x24000b5c

08002150 <WriteDebug>:

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 800215c:	480d      	ldr	r0, [pc, #52]	@ (8002194 <WriteDebug+0x44>)
 800215e:	f000 ff51 	bl	8003004 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8002162:	480d      	ldr	r0, [pc, #52]	@ (8002198 <WriteDebug+0x48>)
 8002164:	f000 ff4e 	bl	8003004 <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	461a      	mov	r2, r3
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4809      	ldr	r0, [pc, #36]	@ (8002194 <WriteDebug+0x44>)
 8002170:	f001 f89e 	bl	80032b0 <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	461a      	mov	r2, r3
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4807      	ldr	r0, [pc, #28]	@ (8002198 <WriteDebug+0x48>)
 800217c:	f001 f898 	bl	80032b0 <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 8002180:	4804      	ldr	r0, [pc, #16]	@ (8002194 <WriteDebug+0x44>)
 8002182:	f000 ff53 	bl	800302c <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8002186:	4804      	ldr	r0, [pc, #16]	@ (8002198 <WriteDebug+0x48>)
 8002188:	f000 ff50 	bl	800302c <SSD1306_Update>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	24000b48 	.word	0x24000b48
 8002198:	24000b5c 	.word	0x24000b5c

0800219c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80021a2:	463b      	mov	r3, r7
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80021ae:	f003 fa4f 	bl	8005650 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80021be:	231f      	movs	r3, #31
 80021c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80021c2:	2387      	movs	r3, #135	@ 0x87
 80021c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80021ca:	2300      	movs	r3, #0
 80021cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80021ce:	2301      	movs	r3, #1
 80021d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021d2:	2301      	movs	r3, #1
 80021d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021de:	463b      	mov	r3, r7
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fa6d 	bl	80056c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021e6:	2004      	movs	r0, #4
 80021e8:	f003 fa4a 	bl	8005680 <HAL_MPU_Enable>

}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <Error_Handler+0x8>

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <HAL_MspInit+0x30>)
 8002208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800220c:	4a08      	ldr	r2, [pc, #32]	@ (8002230 <HAL_MspInit+0x30>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_MspInit+0x30>)
 8002218:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	58024400 	.word	0x58024400

08002234 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	@ 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3e      	ldr	r2, [pc, #248]	@ (800234c <HAL_ADC_MspInit+0x118>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d175      	bne.n	8002342 <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002256:	4b3e      	ldr	r3, [pc, #248]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 8002258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800225c:	4a3c      	ldr	r2, [pc, #240]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 800225e:	f043 0320 	orr.w	r3, r3, #32
 8002262:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002266:	4b3a      	ldr	r3, [pc, #232]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 8002268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227a:	4a35      	ldr	r2, [pc, #212]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002284:	4b32      	ldr	r3, [pc, #200]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_ADC_MspInit+0x11c>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 80022b0:	2340      	movs	r3, #64	@ 0x40
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b4:	2303      	movs	r3, #3
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4824      	ldr	r0, [pc, #144]	@ (8002354 <HAL_ADC_MspInit+0x120>)
 80022c4:	f006 f892 	bl	80083ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 80022c8:	2310      	movs	r3, #16
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022cc:	2303      	movs	r3, #3
 80022ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	481f      	ldr	r0, [pc, #124]	@ (8002358 <HAL_ADC_MspInit+0x124>)
 80022dc:	f006 f886 	bl	80083ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_ADC_MspInit+0x128>)
 80022e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <HAL_ADC_MspInit+0x12c>)
 80022e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <HAL_ADC_MspInit+0x128>)
 80022e8:	2209      	movs	r2, #9
 80022ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <HAL_ADC_MspInit+0x128>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_ADC_MspInit+0x128>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022f8:	4b18      	ldr	r3, [pc, #96]	@ (800235c <HAL_ADC_MspInit+0x128>)
 80022fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002300:	4b16      	ldr	r3, [pc, #88]	@ (800235c <HAL_ADC_MspInit+0x128>)
 8002302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002306:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002308:	4b14      	ldr	r3, [pc, #80]	@ (800235c <HAL_ADC_MspInit+0x128>)
 800230a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800230e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_ADC_MspInit+0x128>)
 8002312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002316:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002318:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_ADC_MspInit+0x128>)
 800231a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800231e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002320:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HAL_ADC_MspInit+0x128>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002326:	480d      	ldr	r0, [pc, #52]	@ (800235c <HAL_ADC_MspInit+0x128>)
 8002328:	f003 fa0a 	bl	8005740 <HAL_DMA_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8002332:	f7ff ff5f 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a08      	ldr	r2, [pc, #32]	@ (800235c <HAL_ADC_MspInit+0x128>)
 800233a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800233c:	4a07      	ldr	r2, [pc, #28]	@ (800235c <HAL_ADC_MspInit+0x128>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	@ 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000
 8002350:	58024400 	.word	0x58024400
 8002354:	58020000 	.word	0x58020000
 8002358:	58020800 	.word	0x58020800
 800235c:	2400058c 	.word	0x2400058c
 8002360:	40020058 	.word	0x40020058

08002364 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	@ 0x30
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a73      	ldr	r2, [pc, #460]	@ (8002550 <HAL_I2C_MspInit+0x1ec>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d16d      	bne.n	8002462 <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	4b73      	ldr	r3, [pc, #460]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238c:	4a71      	ldr	r2, [pc, #452]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002396:	4b6f      	ldr	r3, [pc, #444]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80023a4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023aa:	2312      	movs	r3, #18
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023b6:	2304      	movs	r3, #4
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	4865      	ldr	r0, [pc, #404]	@ (8002558 <HAL_I2C_MspInit+0x1f4>)
 80023c2:	f006 f813 	bl	80083ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c6:	4b63      	ldr	r3, [pc, #396]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 80023c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023cc:	4a61      	ldr	r2, [pc, #388]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 80023ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 80023d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 80023e4:	4b5d      	ldr	r3, [pc, #372]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 80023e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002560 <HAL_I2C_MspInit+0x1fc>)
 80023e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80023ea:	4b5c      	ldr	r3, [pc, #368]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 80023ec:	2222      	movs	r2, #34	@ 0x22
 80023ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f0:	4b5a      	ldr	r3, [pc, #360]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f6:	4b59      	ldr	r3, [pc, #356]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023fc:	4b57      	ldr	r3, [pc, #348]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 80023fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002402:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002404:	4b55      	ldr	r3, [pc, #340]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 8002406:	2200      	movs	r2, #0
 8002408:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800240a:	4b54      	ldr	r3, [pc, #336]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002410:	4b52      	ldr	r3, [pc, #328]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002416:	4b51      	ldr	r3, [pc, #324]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 8002418:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800241c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800241e:	4b4f      	ldr	r3, [pc, #316]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 8002420:	2200      	movs	r2, #0
 8002422:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002424:	484d      	ldr	r0, [pc, #308]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 8002426:	f003 f98b 	bl	8005740 <HAL_DMA_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8002430:	f7ff fee0 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a49      	ldr	r2, [pc, #292]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 8002438:	639a      	str	r2, [r3, #56]	@ 0x38
 800243a:	4a48      	ldr	r2, [pc, #288]	@ (800255c <HAL_I2C_MspInit+0x1f8>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	201f      	movs	r0, #31
 8002446:	f003 f8ce 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800244a:	201f      	movs	r0, #31
 800244c:	f003 f8e5 	bl	800561a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	2020      	movs	r0, #32
 8002456:	f003 f8c6 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800245a:	2020      	movs	r0, #32
 800245c:	f003 f8dd 	bl	800561a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002460:	e071      	b.n	8002546 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a3f      	ldr	r2, [pc, #252]	@ (8002564 <HAL_I2C_MspInit+0x200>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d16c      	bne.n	8002546 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002472:	4a38      	ldr	r2, [pc, #224]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800247c:	4b35      	ldr	r3, [pc, #212]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800248a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002490:	2312      	movs	r3, #18
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800249c:	2304      	movs	r3, #4
 800249e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	482c      	ldr	r0, [pc, #176]	@ (8002558 <HAL_I2C_MspInit+0x1f4>)
 80024a8:	f005 ffa0 	bl	80083ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024ac:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 80024ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024b2:	4a28      	ldr	r2, [pc, #160]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 80024b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024bc:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <HAL_I2C_MspInit+0x1f0>)
 80024be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 80024ca:	4b27      	ldr	r3, [pc, #156]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024cc:	4a27      	ldr	r2, [pc, #156]	@ (800256c <HAL_I2C_MspInit+0x208>)
 80024ce:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024d2:	2224      	movs	r2, #36	@ 0x24
 80024d4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d6:	4b24      	ldr	r3, [pc, #144]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024d8:	2240      	movs	r2, #64	@ 0x40
 80024da:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024dc:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024e2:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024e8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 80024fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002502:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002504:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800250a:	4817      	ldr	r0, [pc, #92]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 800250c:	f003 f918 	bl	8005740 <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8002516:	f7ff fe6d 	bl	80021f4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 800251e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002520:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <HAL_I2C_MspInit+0x204>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2021      	movs	r0, #33	@ 0x21
 800252c:	f003 f85b 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002530:	2021      	movs	r0, #33	@ 0x21
 8002532:	f003 f872 	bl	800561a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2022      	movs	r0, #34	@ 0x22
 800253c:	f003 f853 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002540:	2022      	movs	r0, #34	@ 0x22
 8002542:	f003 f86a 	bl	800561a <HAL_NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3730      	adds	r7, #48	@ 0x30
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40005400 	.word	0x40005400
 8002554:	58024400 	.word	0x58024400
 8002558:	58020400 	.word	0x58020400
 800255c:	240006ac 	.word	0x240006ac
 8002560:	40020040 	.word	0x40020040
 8002564:	40005800 	.word	0x40005800
 8002568:	24000724 	.word	0x24000724
 800256c:	40020028 	.word	0x40020028

08002570 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a55      	ldr	r2, [pc, #340]	@ (80026d4 <HAL_JPEG_MspInit+0x164>)
 800257e:	4293      	cmp	r3, r2
 8002580:	f040 80a3 	bne.w	80026ca <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8002584:	4b54      	ldr	r3, [pc, #336]	@ (80026d8 <HAL_JPEG_MspInit+0x168>)
 8002586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800258a:	4a53      	ldr	r2, [pc, #332]	@ (80026d8 <HAL_JPEG_MspInit+0x168>)
 800258c:	f043 0320 	orr.w	r3, r3, #32
 8002590:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002594:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <HAL_JPEG_MspInit+0x168>)
 8002596:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 80025a2:	4b4e      	ldr	r3, [pc, #312]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025a4:	4a4e      	ldr	r2, [pc, #312]	@ (80026e0 <HAL_JPEG_MspInit+0x170>)
 80025a6:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80025a8:	4b4c      	ldr	r3, [pc, #304]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025aa:	2211      	movs	r2, #17
 80025ac:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80025ae:	4b4b      	ldr	r3, [pc, #300]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80025b4:	4b49      	ldr	r3, [pc, #292]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025b6:	2240      	movs	r2, #64	@ 0x40
 80025b8:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80025ba:	4b48      	ldr	r3, [pc, #288]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80025c0:	4b46      	ldr	r3, [pc, #280]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80025c6:	4b45      	ldr	r3, [pc, #276]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80025cc:	4b43      	ldr	r3, [pc, #268]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80025d2:	4b42      	ldr	r3, [pc, #264]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025d4:	2280      	movs	r2, #128	@ 0x80
 80025d6:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80025d8:	4b40      	ldr	r3, [pc, #256]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80025e0:	4b3e      	ldr	r3, [pc, #248]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025e2:	2220      	movs	r2, #32
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80025e6:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80025ec:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80025f2:	4b3a      	ldr	r3, [pc, #232]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80025f8:	4b38      	ldr	r3, [pc, #224]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80025fe:	4837      	ldr	r0, [pc, #220]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 8002600:	f00a fe48 	bl	800d294 <HAL_MDMA_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 800260a:	f7ff fdf3 	bl	80021f4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	4832      	ldr	r0, [pc, #200]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 8002614:	f00a fe8a 	bl	800d32c <HAL_MDMA_ConfigPostRequestMask>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 800261e:	f7ff fde9 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2d      	ldr	r2, [pc, #180]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 8002626:	631a      	str	r2, [r3, #48]	@ 0x30
 8002628:	4a2c      	ldr	r2, [pc, #176]	@ (80026dc <HAL_JPEG_MspInit+0x16c>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 800262e:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002630:	4a2d      	ldr	r2, [pc, #180]	@ (80026e8 <HAL_JPEG_MspInit+0x178>)
 8002632:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8002634:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002636:	2214      	movs	r2, #20
 8002638:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002640:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002642:	2240      	movs	r2, #64	@ 0x40
 8002644:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002646:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 800264c:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8002652:	4b24      	ldr	r3, [pc, #144]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002654:	2208      	movs	r2, #8
 8002656:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8002658:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 800265a:	2220      	movs	r2, #32
 800265c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002660:	2200      	movs	r2, #0
 8002662:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002664:	4b1f      	ldr	r3, [pc, #124]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 800266c:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 800266e:	2204      	movs	r2, #4
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002674:	2200      	movs	r2, #0
 8002676:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 800267e:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002680:	2200      	movs	r2, #0
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 8002686:	2200      	movs	r2, #0
 8002688:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 800268a:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 800268c:	f00a fe02 	bl	800d294 <HAL_MDMA_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8002696:	f7ff fdad 	bl	80021f4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 80026a0:	f00a fe44 	bl	800d32c <HAL_MDMA_ConfigPostRequestMask>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 80026aa:	f7ff fda3 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 80026b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80026b4:	4a0b      	ldr	r2, [pc, #44]	@ (80026e4 <HAL_JPEG_MspInit+0x174>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2079      	movs	r0, #121	@ 0x79
 80026c0:	f002 ff91 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80026c4:	2079      	movs	r0, #121	@ 0x79
 80026c6:	f002 ffa8 	bl	800561a <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	52003000 	.word	0x52003000
 80026d8:	58024400 	.word	0x58024400
 80026dc:	240007f4 	.word	0x240007f4
 80026e0:	52000040 	.word	0x52000040
 80026e4:	24000860 	.word	0x24000860
 80026e8:	52000080 	.word	0x52000080

080026ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b0ba      	sub	sp, #232	@ 0xe8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	22c0      	movs	r2, #192	@ 0xc0
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f019 fe9c 	bl	801c44a <memset>
  if(hspi->Instance==SPI4)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a54      	ldr	r2, [pc, #336]	@ (8002868 <HAL_SPI_MspInit+0x17c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	f040 80a1 	bne.w	8002860 <HAL_SPI_MspInit+0x174>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800271e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 800272a:	2310      	movs	r3, #16
 800272c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 800272e:	2380      	movs	r3, #128	@ 0x80
 8002730:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 80;
 8002732:	2350      	movs	r3, #80	@ 0x50
 8002734:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002736:	2302      	movs	r3, #2
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800273a:	2302      	movs	r3, #2
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800273e:	2300      	movs	r3, #0
 8002740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002742:	2300      	movs	r3, #0
 8002744:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800274a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800274e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4618      	mov	r0, r3
 8002756:	f00d fc6b 	bl	8010030 <HAL_RCCEx_PeriphCLKConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8002760:	f7ff fd48 	bl	80021f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002764:	4b41      	ldr	r3, [pc, #260]	@ (800286c <HAL_SPI_MspInit+0x180>)
 8002766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800276a:	4a40      	ldr	r2, [pc, #256]	@ (800286c <HAL_SPI_MspInit+0x180>)
 800276c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002770:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002774:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_SPI_MspInit+0x180>)
 8002776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800277a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002782:	4b3a      	ldr	r3, [pc, #232]	@ (800286c <HAL_SPI_MspInit+0x180>)
 8002784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002788:	4a38      	ldr	r2, [pc, #224]	@ (800286c <HAL_SPI_MspInit+0x180>)
 800278a:	f043 0310 	orr.w	r3, r3, #16
 800278e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002792:	4b36      	ldr	r3, [pc, #216]	@ (800286c <HAL_SPI_MspInit+0x180>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80027a0:	2344      	movs	r3, #68	@ 0x44
 80027a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80027b8:	2305      	movs	r3, #5
 80027ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027c2:	4619      	mov	r1, r3
 80027c4:	482a      	ldr	r0, [pc, #168]	@ (8002870 <HAL_SPI_MspInit+0x184>)
 80027c6:	f005 fe11 	bl	80083ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ca:	2310      	movs	r3, #16
 80027cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80027e2:	2305      	movs	r3, #5
 80027e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4820      	ldr	r0, [pc, #128]	@ (8002870 <HAL_SPI_MspInit+0x184>)
 80027f0:	f005 fdfc 	bl	80083ec <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 80027f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 80027f6:	4a20      	ldr	r2, [pc, #128]	@ (8002878 <HAL_SPI_MspInit+0x18c>)
 80027f8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80027fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 80027fc:	2254      	movs	r2, #84	@ 0x54
 80027fe:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002800:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 8002802:	2240      	movs	r2, #64	@ 0x40
 8002804:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002806:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 8002808:	2200      	movs	r2, #0
 800280a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 800280e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002812:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002814:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800281a:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002826:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 8002828:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800282c:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002834:	480f      	ldr	r0, [pc, #60]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 8002836:	f002 ff83 	bl	8005740 <HAL_DMA_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8002840:	f7ff fcd8 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a0b      	ldr	r2, [pc, #44]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 8002848:	679a      	str	r2, [r3, #120]	@ 0x78
 800284a:	4a0a      	ldr	r2, [pc, #40]	@ (8002874 <HAL_SPI_MspInit+0x188>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	2054      	movs	r0, #84	@ 0x54
 8002856:	f002 fec6 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800285a:	2054      	movs	r0, #84	@ 0x54
 800285c:	f002 fedd 	bl	800561a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002860:	bf00      	nop
 8002862:	37e8      	adds	r7, #232	@ 0xe8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40013400 	.word	0x40013400
 800286c:	58024400 	.word	0x58024400
 8002870:	58021000 	.word	0x58021000
 8002874:	24000954 	.word	0x24000954
 8002878:	40020010 	.word	0x40020010

0800287c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0e      	ldr	r2, [pc, #56]	@ (80028c4 <HAL_TIM_Base_MspInit+0x48>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d116      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_TIM_Base_MspInit+0x4c>)
 8002890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002894:	4a0c      	ldr	r2, [pc, #48]	@ (80028c8 <HAL_TIM_Base_MspInit+0x4c>)
 8002896:	f043 0308 	orr.w	r3, r3, #8
 800289a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <HAL_TIM_Base_MspInit+0x4c>)
 80028a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2100      	movs	r1, #0
 80028b0:	2032      	movs	r0, #50	@ 0x32
 80028b2:	f002 fe98 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028b6:	2032      	movs	r0, #50	@ 0x32
 80028b8:	f002 feaf 	bl	800561a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40000c00 	.word	0x40000c00
 80028c8:	58024400 	.word	0x58024400

080028cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b0ba      	sub	sp, #232	@ 0xe8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	22c0      	movs	r2, #192	@ 0xc0
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f019 fdac 	bl	801c44a <memset>
  if(huart->Instance==USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a43      	ldr	r2, [pc, #268]	@ (8002a04 <HAL_UART_MspInit+0x138>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d17e      	bne.n	80029fa <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028fc:	f04f 0201 	mov.w	r2, #1
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002908:	2300      	movs	r3, #0
 800290a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800290e:	f107 0310 	add.w	r3, r7, #16
 8002912:	4618      	mov	r0, r3
 8002914:	f00d fb8c 	bl	8010030 <HAL_RCCEx_PeriphCLKConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800291e:	f7ff fc69 	bl	80021f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002922:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_UART_MspInit+0x13c>)
 8002924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002928:	4a37      	ldr	r2, [pc, #220]	@ (8002a08 <HAL_UART_MspInit+0x13c>)
 800292a:	f043 0310 	orr.w	r3, r3, #16
 800292e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002932:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <HAL_UART_MspInit+0x13c>)
 8002934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <HAL_UART_MspInit+0x13c>)
 8002942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002946:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <HAL_UART_MspInit+0x13c>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002950:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <HAL_UART_MspInit+0x13c>)
 8002952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800295e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002978:	2304      	movs	r3, #4
 800297a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002982:	4619      	mov	r1, r3
 8002984:	4821      	ldr	r0, [pc, #132]	@ (8002a0c <HAL_UART_MspInit+0x140>)
 8002986:	f005 fd31 	bl	80083ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800298a:	4b21      	ldr	r3, [pc, #132]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 800298c:	4a21      	ldr	r2, [pc, #132]	@ (8002a14 <HAL_UART_MspInit+0x148>)
 800298e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002990:	4b1f      	ldr	r3, [pc, #124]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 8002992:	2229      	movs	r2, #41	@ 0x29
 8002994:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002996:	4b1e      	ldr	r3, [pc, #120]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800299c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029aa:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029b6:	4b16      	ldr	r3, [pc, #88]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029be:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80029c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029cc:	4810      	ldr	r0, [pc, #64]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029ce:	f002 feb7 	bl	8005740 <HAL_DMA_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80029d8:	f7ff fc0c 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0c      	ldr	r2, [pc, #48]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <HAL_UART_MspInit+0x144>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	2025      	movs	r0, #37	@ 0x25
 80029f0:	f002 fdf9 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029f4:	2025      	movs	r0, #37	@ 0x25
 80029f6:	f002 fe10 	bl	800561a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80029fa:	bf00      	nop
 80029fc:	37e8      	adds	r7, #232	@ 0xe8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40011000 	.word	0x40011000
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	58020400 	.word	0x58020400
 8002a10:	24000aac 	.word	0x24000aac
 8002a14:	40020410 	.word	0x40020410

08002a18 <__NVIC_SystemReset>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002a1c:	f3bf 8f4f 	dsb	sy
}
 8002a20:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <__NVIC_SystemReset+0x24>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a2a:	4904      	ldr	r1, [pc, #16]	@ (8002a3c <__NVIC_SystemReset+0x24>)
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <__NVIC_SystemReset+0x28>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a32:	f3bf 8f4f 	dsb	sy
}
 8002a36:	bf00      	nop
    __NOP();
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <__NVIC_SystemReset+0x20>
 8002a3c:	e000ed00 	.word	0xe000ed00
 8002a40:	05fa0004 	.word	0x05fa0004

08002a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <NMI_Handler+0x4>

08002a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// ON HARDFAULT:
	// Reset the system
	NVIC_SystemReset();
 8002a50:	f7ff ffe2 	bl	8002a18 <__NVIC_SystemReset>

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <BusFault_Handler+0x4>

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <UsageFault_Handler+0x4>

08002a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a9a:	f001 f9c7 	bl	8003e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002aa8:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <DMA1_Stream0_IRQHandler+0x10>)
 8002aaa:	f004 f973 	bl	8006d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	24000954 	.word	0x24000954

08002ab8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002abc:	4802      	ldr	r0, [pc, #8]	@ (8002ac8 <DMA1_Stream1_IRQHandler+0x10>)
 8002abe:	f004 f969 	bl	8006d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	24000724 	.word	0x24000724

08002acc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002ad0:	4802      	ldr	r0, [pc, #8]	@ (8002adc <DMA1_Stream2_IRQHandler+0x10>)
 8002ad2:	f004 f95f 	bl	8006d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	240006ac 	.word	0x240006ac

08002ae0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ae4:	4802      	ldr	r0, [pc, #8]	@ (8002af0 <DMA1_Stream3_IRQHandler+0x10>)
 8002ae6:	f004 f955 	bl	8006d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2400058c 	.word	0x2400058c

08002af4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002af8:	4802      	ldr	r0, [pc, #8]	@ (8002b04 <I2C1_EV_IRQHandler+0x10>)
 8002afa:	f006 fa17 	bl	8008f2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	24000604 	.word	0x24000604

08002b08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b0c:	4802      	ldr	r0, [pc, #8]	@ (8002b18 <I2C1_ER_IRQHandler+0x10>)
 8002b0e:	f006 fa27 	bl	8008f60 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	24000604 	.word	0x24000604

08002b1c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002b20:	4802      	ldr	r0, [pc, #8]	@ (8002b2c <I2C2_EV_IRQHandler+0x10>)
 8002b22:	f006 fa03 	bl	8008f2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	24000658 	.word	0x24000658

08002b30 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002b34:	4802      	ldr	r0, [pc, #8]	@ (8002b40 <I2C2_ER_IRQHandler+0x10>)
 8002b36:	f006 fa13 	bl	8008f60 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	24000658 	.word	0x24000658

08002b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b48:	4802      	ldr	r0, [pc, #8]	@ (8002b54 <USART1_IRQHandler+0x10>)
 8002b4a:	f011 fd2f 	bl	80145ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	24000a18 	.word	0x24000a18

08002b58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 8002b5c:	f7fe fb08 	bl	8001170 <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <TIM5_IRQHandler+0x14>)
 8002b62:	f010 ffdd 	bl	8013b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	240009cc 	.word	0x240009cc

08002b70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b74:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <DMA2_Stream0_IRQHandler+0x10>)
 8002b76:	f004 f90d 	bl	8006d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	24000aac 	.word	0x24000aac

08002b84 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <SPI4_IRQHandler+0x10>)
 8002b8a:	f010 fba3 	bl	80132d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	240008cc 	.word	0x240008cc

08002b98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <OTG_FS_IRQHandler+0x10>)
 8002b9e:	f00b f8b8 	bl	800dd12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	240487a4 	.word	0x240487a4

08002bac <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <JPEG_IRQHandler+0x10>)
 8002bb2:	f008 feeb 	bl	800b98c <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2400079c 	.word	0x2400079c

08002bc0 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002bc4:	4803      	ldr	r0, [pc, #12]	@ (8002bd4 <MDMA_IRQHandler+0x14>)
 8002bc6:	f00a fd07 	bl	800d5d8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002bca:	4803      	ldr	r0, [pc, #12]	@ (8002bd8 <MDMA_IRQHandler+0x18>)
 8002bcc:	f00a fd04 	bl	800d5d8 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	240007f4 	.word	0x240007f4
 8002bd8:	24000860 	.word	0x24000860

08002bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <_kill>:

int _kill(int pid, int sig)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bf6:	f019 fc8b 	bl	801c510 <__errno>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2216      	movs	r2, #22
 8002bfe:	601a      	str	r2, [r3, #0]
  return -1;
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_exit>:

void _exit (int status)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ffe7 	bl	8002bec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c1e:	bf00      	nop
 8002c20:	e7fd      	b.n	8002c1e <_exit+0x12>

08002c22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e00a      	b.n	8002c4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c34:	f3af 8000 	nop.w
 8002c38:	4601      	mov	r1, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	60ba      	str	r2, [r7, #8]
 8002c40:	b2ca      	uxtb	r2, r1
 8002c42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3301      	adds	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	dbf0      	blt.n	8002c34 <_read+0x12>
  }

  return len;
 8002c52:	687b      	ldr	r3, [r7, #4]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e009      	b.n	8002c82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	60ba      	str	r2, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dbf1      	blt.n	8002c6e <_write+0x12>
  }
  return len;
 8002c8a:	687b      	ldr	r3, [r7, #4]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_close>:

int _close(int file)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cbc:	605a      	str	r2, [r3, #4]
  return 0;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_isatty>:

int _isatty(int file)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	@ (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	@ (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f019 fbf0 	bl	801c510 <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <_sbrk+0x64>)
 8002d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	24080000 	.word	0x24080000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	240472b8 	.word	0x240472b8
 8002d64:	24048ff8 	.word	0x24048ff8

08002d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d6c:	4b43      	ldr	r3, [pc, #268]	@ (8002e7c <SystemInit+0x114>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	4a42      	ldr	r2, [pc, #264]	@ (8002e7c <SystemInit+0x114>)
 8002d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d7c:	4b40      	ldr	r3, [pc, #256]	@ (8002e80 <SystemInit+0x118>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	2b06      	cmp	r3, #6
 8002d86:	d807      	bhi.n	8002d98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d88:	4b3d      	ldr	r3, [pc, #244]	@ (8002e80 <SystemInit+0x118>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 030f 	bic.w	r3, r3, #15
 8002d90:	4a3b      	ldr	r2, [pc, #236]	@ (8002e80 <SystemInit+0x118>)
 8002d92:	f043 0307 	orr.w	r3, r3, #7
 8002d96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d98:	4b3a      	ldr	r3, [pc, #232]	@ (8002e84 <SystemInit+0x11c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a39      	ldr	r2, [pc, #228]	@ (8002e84 <SystemInit+0x11c>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002da4:	4b37      	ldr	r3, [pc, #220]	@ (8002e84 <SystemInit+0x11c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002daa:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <SystemInit+0x11c>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4935      	ldr	r1, [pc, #212]	@ (8002e84 <SystemInit+0x11c>)
 8002db0:	4b35      	ldr	r3, [pc, #212]	@ (8002e88 <SystemInit+0x120>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002db6:	4b32      	ldr	r3, [pc, #200]	@ (8002e80 <SystemInit+0x118>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e80 <SystemInit+0x118>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 030f 	bic.w	r3, r3, #15
 8002dca:	4a2d      	ldr	r2, [pc, #180]	@ (8002e80 <SystemInit+0x118>)
 8002dcc:	f043 0307 	orr.w	r3, r3, #7
 8002dd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e84 <SystemInit+0x11c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <SystemInit+0x11c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002dde:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <SystemInit+0x11c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002de4:	4b27      	ldr	r3, [pc, #156]	@ (8002e84 <SystemInit+0x11c>)
 8002de6:	4a29      	ldr	r2, [pc, #164]	@ (8002e8c <SystemInit+0x124>)
 8002de8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dea:	4b26      	ldr	r3, [pc, #152]	@ (8002e84 <SystemInit+0x11c>)
 8002dec:	4a28      	ldr	r2, [pc, #160]	@ (8002e90 <SystemInit+0x128>)
 8002dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002df0:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <SystemInit+0x11c>)
 8002df2:	4a28      	ldr	r2, [pc, #160]	@ (8002e94 <SystemInit+0x12c>)
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002df6:	4b23      	ldr	r3, [pc, #140]	@ (8002e84 <SystemInit+0x11c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002dfc:	4b21      	ldr	r3, [pc, #132]	@ (8002e84 <SystemInit+0x11c>)
 8002dfe:	4a25      	ldr	r2, [pc, #148]	@ (8002e94 <SystemInit+0x12c>)
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e02:	4b20      	ldr	r3, [pc, #128]	@ (8002e84 <SystemInit+0x11c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e08:	4b1e      	ldr	r3, [pc, #120]	@ (8002e84 <SystemInit+0x11c>)
 8002e0a:	4a22      	ldr	r2, [pc, #136]	@ (8002e94 <SystemInit+0x12c>)
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <SystemInit+0x11c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <SystemInit+0x11c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1a      	ldr	r2, [pc, #104]	@ (8002e84 <SystemInit+0x11c>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e20:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <SystemInit+0x11c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e26:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <SystemInit+0x130>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e9c <SystemInit+0x134>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e32:	d202      	bcs.n	8002e3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <SystemInit+0x138>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <SystemInit+0x11c>)
 8002e3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002e40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d113      	bne.n	8002e70 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002e48:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <SystemInit+0x11c>)
 8002e4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <SystemInit+0x11c>)
 8002e50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e54:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e58:	4b12      	ldr	r3, [pc, #72]	@ (8002ea4 <SystemInit+0x13c>)
 8002e5a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <SystemInit+0x11c>)
 8002e62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002e66:	4a07      	ldr	r2, [pc, #28]	@ (8002e84 <SystemInit+0x11c>)
 8002e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e6c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	52002000 	.word	0x52002000
 8002e84:	58024400 	.word	0x58024400
 8002e88:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e8c:	02020200 	.word	0x02020200
 8002e90:	01ff0000 	.word	0x01ff0000
 8002e94:	01010280 	.word	0x01010280
 8002e98:	5c001000 	.word	0x5c001000
 8002e9c:	ffff0000 	.word	0xffff0000
 8002ea0:	51008108 	.word	0x51008108
 8002ea4:	52004000 	.word	0x52004000

08002ea8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <ExitRun0Mode+0x2c>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a08      	ldr	r2, [pc, #32]	@ (8002ed4 <ExitRun0Mode+0x2c>)
 8002eb2:	f043 0302 	orr.w	r3, r3, #2
 8002eb6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002eb8:	bf00      	nop
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <ExitRun0Mode+0x2c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f9      	beq.n	8002eba <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	58024800 	.word	0x58024800

08002ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ed8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002f14 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002edc:	f7ff ffe4 	bl	8002ea8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ee0:	f7ff ff42 	bl	8002d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee4:	480c      	ldr	r0, [pc, #48]	@ (8002f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ee6:	490d      	ldr	r1, [pc, #52]	@ (8002f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002efc:	4c0a      	ldr	r4, [pc, #40]	@ (8002f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f019 fb07 	bl	801c51c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0e:	f7fd fbeb 	bl	80006e8 <main>
  bx  lr
 8002f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002f18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f1c:	2400050c 	.word	0x2400050c
  ldr r2, =_sidata
 8002f20:	08020e98 	.word	0x08020e98
  ldr r2, =_sbss
 8002f24:	2400050c 	.word	0x2400050c
  ldr r4, =_ebss
 8002f28:	24048ff4 	.word	0x24048ff4

08002f2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC3_IRQHandler>

08002f2e <SSD1306_SendCommand>:
	0x06, 0x00,       0xFF,       0x00,       0xFF,       0x00,       0xFF,       0x00        // ------ 131 - \x84 (|||)
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af02      	add	r7, sp, #8
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	733b      	strb	r3, [r7, #12]
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	791b      	ldrb	r3, [r3, #4]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	b299      	uxth	r1, r3
 8002f4e:	f107 020c 	add.w	r2, r7, #12
 8002f52:	2364      	movs	r3, #100	@ 0x64
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2302      	movs	r3, #2
 8002f58:	f005 fcc6 	bl	80088e8 <HAL_I2C_Master_Transmit>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <SSD1306_SendCommand+0x38>
		return ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8002f88:	2312      	movs	r3, #18
 8002f8a:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002f90:	e02c      	b.n	8002fec <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	4a1a      	ldr	r2, [pc, #104]	@ (8003000 <SSD1306_Init+0x90>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8002f9a:	897b      	ldrh	r3, [r7, #10]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	817b      	strh	r3, [r7, #10]
	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002fa0:	897b      	ldrh	r3, [r7, #10]
 8002fa2:	4a17      	ldr	r2, [pc, #92]	@ (8003000 <SSD1306_Init+0x90>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ffc0 	bl	8002f2e <SSD1306_SendCommand>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <SSD1306_Init+0x4a>
 8002fb4:	897b      	ldrh	r3, [r7, #10]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e01e      	b.n	8002ff8 <SSD1306_Init+0x88>
	        cmd_idx++;
 8002fba:	897b      	ldrh	r3, [r7, #10]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8002fc0:	e00f      	b.n	8002fe2 <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8003000 <SSD1306_Init+0x90>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ffaf 	bl	8002f2e <SSD1306_SendCommand>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <SSD1306_Init+0x6c>
 8002fd6:	897b      	ldrh	r3, [r7, #10]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e00d      	b.n	8002ff8 <SSD1306_Init+0x88>
	            cmd_idx++;
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8002fe2:	89bb      	ldrh	r3, [r7, #12]
 8002fe4:	1e5a      	subs	r2, r3, #1
 8002fe6:	81ba      	strh	r2, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ea      	bne.n	8002fc2 <SSD1306_Init+0x52>
	while (n_commands--) {
 8002fec:	89fb      	ldrh	r3, [r7, #14]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	81fa      	strh	r2, [r7, #14]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1cd      	bne.n	8002f92 <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	0801ec40 	.word	0x0801ec40

08003004 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f019 fa14 	bl	801c44a <memset>
	return 0;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2240      	movs	r2, #64	@ 0x40
 800303a:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	791b      	ldrb	r3, [r3, #4]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	b299      	uxth	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	f240 4301 	movw	r3, #1025	@ 0x401
 8003050:	f005 fe58 	bl	8008d04 <HAL_I2C_Master_Transmit_DMA>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	2b0a      	cmp	r3, #10
 8003070:	d109      	bne.n	8003086 <SSD1306_DrawChar+0x26>
		hssd->str_cursor = (hssd->str_cursor/128)*128;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8a1b      	ldrh	r3, [r3, #16]
 8003076:	09db      	lsrs	r3, r3, #7
 8003078:	b29b      	uxth	r3, r3
 800307a:	01db      	lsls	r3, r3, #7
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	821a      	strh	r2, [r3, #16]
		return SUCCESS;
 8003082:	2300      	movs	r3, #0
 8003084:	e10b      	b.n	800329e <SSD1306_DrawChar+0x23e>
	}

	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	3b20      	subs	r3, #32
 800308a:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	2b60      	cmp	r3, #96	@ 0x60
 8003090:	d905      	bls.n	800309e <SSD1306_DrawChar+0x3e>
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	2b7a      	cmp	r3, #122	@ 0x7a
 8003096:	d802      	bhi.n	800309e <SSD1306_DrawChar+0x3e>
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	3b20      	subs	r3, #32
 800309c:	73fb      	strb	r3, [r7, #15]
	if (ch >= 123)             newC -= 26;	// remap the rest to align with the font table
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	2b7a      	cmp	r3, #122	@ 0x7a
 80030a2:	d902      	bls.n	80030aa <SSD1306_DrawChar+0x4a>
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	3b1a      	subs	r3, #26
 80030a8:	73fb      	strb	r3, [r7, #15]

	if (newC > 126) return ERROR;	// char is unable to be rendered
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80030ae:	d901      	bls.n	80030b4 <SSD1306_DrawChar+0x54>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0f4      	b.n	800329e <SSD1306_DrawChar+0x23e>

	uint8_t len = ALPHNUM[newC*8];
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4a7c      	ldr	r2, [pc, #496]	@ (80032ac <SSD1306_DrawChar+0x24c>)
 80030ba:	5cd3      	ldrb	r3, [r2, r3]
 80030bc:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < len; i++) {
 80030be:	2300      	movs	r3, #0
 80030c0:	73bb      	strb	r3, [r7, #14]
 80030c2:	e0d2      	b.n	800326a <SSD1306_DrawChar+0x20a>

		uint8_t drawbyte = ALPHNUM[(newC*8)+1 + i];
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	7bbb      	ldrb	r3, [r7, #14]
 80030cc:	4413      	add	r3, r2
 80030ce:	4a77      	ldr	r2, [pc, #476]	@ (80032ac <SSD1306_DrawChar+0x24c>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	737b      	strb	r3, [r7, #13]
		if (hssd->draw_inverted) drawbyte ^= 0xFF;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7c9b      	ldrb	r3, [r3, #18]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <SSD1306_DrawChar+0x82>
 80030dc:	7b7b      	ldrb	r3, [r7, #13]
 80030de:	43db      	mvns	r3, r3
 80030e0:	737b      	strb	r3, [r7, #13]

		if (!hssd->draw_scale) hssd->vram[hssd->str_cursor + i] = drawbyte;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7cdb      	ldrb	r3, [r3, #19]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <SSD1306_DrawChar+0xa0>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	8a12      	ldrh	r2, [r2, #16]
 80030f2:	4611      	mov	r1, r2
 80030f4:	7bba      	ldrb	r2, [r7, #14]
 80030f6:	440a      	add	r2, r1
 80030f8:	4413      	add	r3, r2
 80030fa:	7b7a      	ldrb	r2, [r7, #13]
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e0b1      	b.n	8003264 <SSD1306_DrawChar+0x204>
		else {
			uint8_t drawbyte_1 =  (drawbyte & 0b00000001)       | ((drawbyte & 0b00000001) << 1) |
 8003100:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	b25a      	sxtb	r2, r3
 800310a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	b25b      	sxtb	r3, r3
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	b25b      	sxtb	r3, r3
 8003118:	4313      	orrs	r3, r2
 800311a:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00000010) << 1) | ((drawbyte & 0b00000010) << 2) |
 800311c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	b25b      	sxtb	r3, r3
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	b25b      	sxtb	r3, r3
			uint8_t drawbyte_1 =  (drawbyte & 0b00000001)       | ((drawbyte & 0b00000001) << 1) |
 800312a:	4313      	orrs	r3, r2
 800312c:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00000010) << 1) | ((drawbyte & 0b00000010) << 2) |
 800312e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	b25b      	sxtb	r3, r3
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	b25b      	sxtb	r3, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00000100) << 2) | ((drawbyte & 0b00000100) << 3) |
 8003140:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	b25b      	sxtb	r3, r3
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	b25b      	sxtb	r3, r3
								 ((drawbyte & 0b00000010) << 1) | ((drawbyte & 0b00000010) << 2) |
 800314e:	4313      	orrs	r3, r2
 8003150:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00000100) << 2) | ((drawbyte & 0b00000100) << 3) |
 8003152:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	b25b      	sxtb	r3, r3
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	b25b      	sxtb	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00001000) << 3) | ((drawbyte & 0b00001000) << 4);
 8003164:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	b25b      	sxtb	r3, r3
 800316c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003170:	b25b      	sxtb	r3, r3
								 ((drawbyte & 0b00000100) << 2) | ((drawbyte & 0b00000100) << 3) |
 8003172:	4313      	orrs	r3, r2
 8003174:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00001000) << 3) | ((drawbyte & 0b00001000) << 4);
 8003176:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	b25b      	sxtb	r3, r3
 800317e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003182:	b25b      	sxtb	r3, r3
 8003184:	4313      	orrs	r3, r2
 8003186:	b25b      	sxtb	r3, r3
			uint8_t drawbyte_1 =  (drawbyte & 0b00000001)       | ((drawbyte & 0b00000001) << 1) |
 8003188:	72fb      	strb	r3, [r7, #11]

			uint8_t drawbyte_2 = ((drawbyte & 0b00010000) >> 4) | ((drawbyte & 0b00010000) >> 3) |
 800318a:	7b7b      	ldrb	r3, [r7, #13]
 800318c:	111b      	asrs	r3, r3, #4
 800318e:	b25b      	sxtb	r3, r3
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	b25a      	sxtb	r2, r3
 8003196:	7b7b      	ldrb	r3, [r7, #13]
 8003198:	10db      	asrs	r3, r3, #3
 800319a:	b25b      	sxtb	r3, r3
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00100000) >> 3) | ((drawbyte & 0b00100000) >> 2) |
 80031a6:	7b7b      	ldrb	r3, [r7, #13]
 80031a8:	10db      	asrs	r3, r3, #3
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	b25b      	sxtb	r3, r3
			uint8_t drawbyte_2 = ((drawbyte & 0b00010000) >> 4) | ((drawbyte & 0b00010000) >> 3) |
 80031b2:	4313      	orrs	r3, r2
 80031b4:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00100000) >> 3) | ((drawbyte & 0b00100000) >> 2) |
 80031b6:	7b7b      	ldrb	r3, [r7, #13]
 80031b8:	109b      	asrs	r3, r3, #2
 80031ba:	b25b      	sxtb	r3, r3
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	b25b      	sxtb	r3, r3
 80031c2:	4313      	orrs	r3, r2
 80031c4:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b01000000) >> 2) | ((drawbyte & 0b01000000) >> 1) |
 80031c6:	7b7b      	ldrb	r3, [r7, #13]
 80031c8:	109b      	asrs	r3, r3, #2
 80031ca:	b25b      	sxtb	r3, r3
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	b25b      	sxtb	r3, r3
								 ((drawbyte & 0b00100000) >> 3) | ((drawbyte & 0b00100000) >> 2) |
 80031d2:	4313      	orrs	r3, r2
 80031d4:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b01000000) >> 2) | ((drawbyte & 0b01000000) >> 1) |
 80031d6:	7b7b      	ldrb	r3, [r7, #13]
 80031d8:	105b      	asrs	r3, r3, #1
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b10000000) >> 1) | (drawbyte & 0b10000000);
 80031e6:	7b7b      	ldrb	r3, [r7, #13]
 80031e8:	105b      	asrs	r3, r3, #1
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f0:	b25b      	sxtb	r3, r3
								 ((drawbyte & 0b01000000) >> 2) | ((drawbyte & 0b01000000) >> 1) |
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b10000000) >> 1) | (drawbyte & 0b10000000);
 80031f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80031fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80031fe:	b25b      	sxtb	r3, r3
 8003200:	4313      	orrs	r3, r2
 8003202:	b25b      	sxtb	r3, r3
			uint8_t drawbyte_2 = ((drawbyte & 0b00010000) >> 4) | ((drawbyte & 0b00010000) >> 3) |
 8003204:	72bb      	strb	r3, [r7, #10]

			hssd->vram[hssd->str_cursor + i*2      ] = drawbyte_1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	8a12      	ldrh	r2, [r2, #16]
 800320e:	4611      	mov	r1, r2
 8003210:	7bba      	ldrb	r2, [r7, #14]
 8003212:	0052      	lsls	r2, r2, #1
 8003214:	440a      	add	r2, r1
 8003216:	4413      	add	r3, r2
 8003218:	7afa      	ldrb	r2, [r7, #11]
 800321a:	701a      	strb	r2, [r3, #0]
			hssd->vram[hssd->str_cursor + i*2 + 1  ] = drawbyte_1;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8a1b      	ldrh	r3, [r3, #16]
 8003224:	4619      	mov	r1, r3
 8003226:	7bbb      	ldrb	r3, [r7, #14]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	440b      	add	r3, r1
 800322c:	3301      	adds	r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	7afa      	ldrb	r2, [r7, #11]
 8003232:	701a      	strb	r2, [r3, #0]
			hssd->vram[hssd->str_cursor + i*2 + 128] = drawbyte_2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8a1b      	ldrh	r3, [r3, #16]
 800323c:	4619      	mov	r1, r3
 800323e:	7bbb      	ldrb	r3, [r7, #14]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	440b      	add	r3, r1
 8003244:	3380      	adds	r3, #128	@ 0x80
 8003246:	4413      	add	r3, r2
 8003248:	7aba      	ldrb	r2, [r7, #10]
 800324a:	701a      	strb	r2, [r3, #0]
			hssd->vram[hssd->str_cursor + i*2 + 129] = drawbyte_2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8a1b      	ldrh	r3, [r3, #16]
 8003254:	4619      	mov	r1, r3
 8003256:	7bbb      	ldrb	r3, [r7, #14]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	440b      	add	r3, r1
 800325c:	3381      	adds	r3, #129	@ 0x81
 800325e:	4413      	add	r3, r2
 8003260:	7aba      	ldrb	r2, [r7, #10]
 8003262:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8003264:	7bbb      	ldrb	r3, [r7, #14]
 8003266:	3301      	adds	r3, #1
 8003268:	73bb      	strb	r3, [r7, #14]
 800326a:	7bba      	ldrb	r2, [r7, #14]
 800326c:	7b3b      	ldrb	r3, [r7, #12]
 800326e:	429a      	cmp	r2, r3
 8003270:	f4ff af28 	bcc.w	80030c4 <SSD1306_DrawChar+0x64>
		}
	}
	//memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
	hssd->str_cursor += len;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8a1a      	ldrh	r2, [r3, #16]
 8003278:	7b3b      	ldrb	r3, [r7, #12]
 800327a:	b29b      	uxth	r3, r3
 800327c:	4413      	add	r3, r2
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	821a      	strh	r2, [r3, #16]
	if (hssd->draw_scale)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7cdb      	ldrb	r3, [r3, #19]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <SSD1306_DrawChar+0x23c>
		hssd->str_cursor += len;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8a1a      	ldrh	r2, [r3, #16]
 8003290:	7b3b      	ldrb	r3, [r7, #12]
 8003292:	b29b      	uxth	r3, r3
 8003294:	4413      	add	r3, r2
 8003296:	b29a      	uxth	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	0801ec74 	.word	0x0801ec74

080032b0 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	4613      	mov	r3, r2
 80032bc:	71fb      	strb	r3, [r7, #7]
	uint8_t start_line = hssd->str_cursor / 120;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8a1b      	ldrh	r3, [r3, #16]
 80032c2:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <SSD1306_DrawString+0x70>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < length; i++) {
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]
 80032d2:	e019      	b.n	8003308 <SSD1306_DrawString+0x58>
		if (hssd->str_cursor / 128 > start_line) break;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8a1b      	ldrh	r3, [r3, #16]
 80032d8:	09db      	lsrs	r3, r3, #7
 80032da:	b29a      	uxth	r2, r3
 80032dc:	7dbb      	ldrb	r3, [r7, #22]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d816      	bhi.n	8003312 <SSD1306_DrawString+0x62>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x00;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4413      	add	r3, r2
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f7ff feb6 	bl	8003060 <SSD1306_DrawChar>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <SSD1306_DrawString+0x52>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8a1a      	ldrh	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	3301      	adds	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
 8003308:	7dfa      	ldrb	r2, [r7, #23]
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	429a      	cmp	r2, r3
 800330e:	d3e1      	bcc.n	80032d4 <SSD1306_DrawString+0x24>
 8003310:	e000      	b.n	8003314 <SSD1306_DrawString+0x64>
		if (hssd->str_cursor / 128 > start_line) break;
 8003312:	bf00      	nop
	}

	return SUCCESS;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	88888889 	.word	0x88888889

08003324 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6898      	ldr	r0, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	899b      	ldrh	r3, [r3, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	4619      	mov	r1, r3
 800333c:	f005 fa1e 	bl	800877c <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	1cf9      	adds	r1, r7, #3
 8003346:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800334a:	2201      	movs	r2, #1
 800334c:	f00f fc92 	bl	8012c74 <HAL_SPI_Transmit>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <ST7789_SendByte_Command+0x36>
		return ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6898      	ldr	r0, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	899b      	ldrh	r3, [r3, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	4619      	mov	r1, r3
 800337c:	f005 f9fe 	bl	800877c <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	1cf9      	adds	r1, r7, #3
 8003386:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800338a:	2201      	movs	r2, #1
 800338c:	f00f fc72 	bl	8012c74 <HAL_SPI_Transmit>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <ST7789_SendByte_Data+0x36>
		return ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

	hst7789->update_sequence = 2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	751a      	strb	r2, [r3, #20]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 80033b2:	2300      	movs	r3, #0
 80033b4:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f107 0109 	add.w	r1, r7, #9
 80033be:	2201      	movs	r2, #1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f00f fe45 	bl	8013050 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 80033c6:	200a      	movs	r0, #10
 80033c8:	f000 fd50 	bl	8003e6c <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 80033cc:	2313      	movs	r3, #19
 80033ce:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 80033d0:	2301      	movs	r3, #1
 80033d2:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 80033d4:	e02c      	b.n	8003430 <ST7789_Init+0x8c>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003444 <ST7789_Init+0xa0>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 80033de:	897b      	ldrh	r3, [r7, #10]
 80033e0:	3301      	adds	r3, #1
 80033e2:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80033e4:	897b      	ldrh	r3, [r7, #10]
 80033e6:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <ST7789_Init+0xa0>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff99 	bl	8003324 <ST7789_SendByte_Command>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <ST7789_Init+0x5a>
 80033f8:	897b      	ldrh	r3, [r7, #10]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	e01e      	b.n	800343c <ST7789_Init+0x98>
	    cmd_idx++;
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	3301      	adds	r3, #1
 8003402:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 8003404:	e00f      	b.n	8003426 <ST7789_Init+0x82>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	4a0e      	ldr	r2, [pc, #56]	@ (8003444 <ST7789_Init+0xa0>)
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffa8 	bl	8003364 <ST7789_SendByte_Data>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <ST7789_Init+0x7c>
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e00d      	b.n	800343c <ST7789_Init+0x98>
				cmd_idx++;
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	3301      	adds	r3, #1
 8003424:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 8003426:	89bb      	ldrh	r3, [r7, #12]
 8003428:	1e5a      	subs	r2, r3, #1
 800342a:	81ba      	strh	r2, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ea      	bne.n	8003406 <ST7789_Init+0x62>
	while (n_commands--) {
 8003430:	89fb      	ldrh	r3, [r7, #14]
 8003432:	1e5a      	subs	r2, r3, #1
 8003434:	81fa      	strh	r2, [r7, #14]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1cd      	bne.n	80033d6 <ST7789_Init+0x32>
	    }
	}
	return SUCCESS;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	0801eecc 	.word	0x0801eecc

08003448 <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	461a      	mov	r2, r3
 8003456:	4603      	mov	r3, r0
 8003458:	817b      	strh	r3, [r7, #10]
 800345a:	460b      	mov	r3, r1
 800345c:	813b      	strh	r3, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 8003462:	212a      	movs	r1, #42	@ 0x2a
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff ff5d 	bl	8003324 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	b29b      	uxth	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	4619      	mov	r1, r3
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7ff ff75 	bl	8003364 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	4619      	mov	r1, r3
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff ff6f 	bl	8003364 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	3b01      	subs	r3, #1
 800348a:	121b      	asrs	r3, r3, #8
 800348c:	b2db      	uxtb	r3, r3
 800348e:	4619      	mov	r1, r3
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff ff67 	bl	8003364 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	4619      	mov	r1, r3
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff ff5f 	bl	8003364 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 80034a6:	212b      	movs	r1, #43	@ 0x2b
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7ff ff3b 	bl	8003324 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 80034ae:	893b      	ldrh	r3, [r7, #8]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff ff53 	bl	8003364 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 80034be:	893b      	ldrh	r3, [r7, #8]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff ff4d 	bl	8003364 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 80034ca:	8b3b      	ldrh	r3, [r7, #24]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	121b      	asrs	r3, r3, #8
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	4619      	mov	r1, r3
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff45 	bl	8003364 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 80034da:	8b3b      	ldrh	r3, [r7, #24]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff ff3d 	bl	8003364 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 80034ea:	212c      	movs	r1, #44	@ 0x2c
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff ff19 	bl	8003324 <ST7789_SendByte_Command>
}
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <ST7789_UpdateSector>:

uint8_t ST7789_UpdateSector(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af02      	add	r7, sp, #8
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	70fb      	strb	r3, [r7, #3]
	// Check for bounds/busy
	if (hst7789->spi_state == 1) return ERROR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	791b      	ldrb	r3, [r3, #4]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <ST7789_UpdateSector+0x18>
 800350e:	2301      	movs	r3, #1
 8003510:	e04b      	b.n	80035aa <ST7789_UpdateSector+0xb0>
	if (screen_section > 2) return ERROR;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <ST7789_UpdateSector+0x22>
 8003518:	2301      	movs	r3, #1
 800351a:	e046      	b.n	80035aa <ST7789_UpdateSector+0xb0>

	// Flag as busy
	hst7789->spi_state = 1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	b29b      	uxth	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	0152      	lsls	r2, r2, #5
 800352a:	1ad2      	subs	r2, r2, r3
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	4413      	add	r3, r2
 8003530:	b29a      	uxth	r2, r3
 8003532:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	23f0      	movs	r3, #240	@ 0xf0
 800353a:	2100      	movs	r1, #0
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff83 	bl	8003448 <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6898      	ldr	r0, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	899b      	ldrh	r3, [r3, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	4619      	mov	r1, r3
 800354e:	f005 f915 	bl	800877c <HAL_GPIO_WritePin>


	if (screen_section != 2) {
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d013      	beq.n	8003580 <ST7789_UpdateSector+0x86>
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8003566:	fb01 f202 	mul.w	r2, r1, r2
 800356a:	4413      	add	r3, r2
 800356c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003570:	4619      	mov	r1, r3
 8003572:	f00f fd6d 	bl	8013050 <HAL_SPI_Transmit_DMA>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <ST7789_UpdateSector+0xae>
			return ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e014      	b.n	80035aa <ST7789_UpdateSector+0xb0>
	} else {
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0x8340))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800358e:	fb01 f202 	mul.w	r2, r1, r2
 8003592:	4413      	add	r3, r2
 8003594:	f248 3240 	movw	r2, #33600	@ 0x8340
 8003598:	4619      	mov	r1, r3
 800359a:	f00f fd59 	bl	8013050 <HAL_SPI_Transmit_DMA>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <ST7789_UpdateSector+0xae>
			return ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <ST7789_UpdateSector+0xb0>
	}
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <ST7789_UpdateAutomatic>:

uint8_t ST7789_UpdateAutomatic(ST7789_HandleTypeDef *hst7789) {
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
	// Reset the sector counter
	hst7789->update_sequence = 0;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	751a      	strb	r2, [r3, #20]

	// perform a screen update
	if (ST7789_UpdateSector(hst7789, hst7789->update_sequence)) return ERROR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	7d1b      	ldrb	r3, [r3, #20]
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff97 	bl	80034fa <ST7789_UpdateSector>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <ST7789_UpdateAutomatic+0x24>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <ST7789_UpdateAutomatic+0x26>

	return SUCCESS;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	// fill VRAM with black
	memset(hst7789->vram, 0x00, LCD_WIDTH*LCD_HEIGHT*2);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f018 ff29 	bl	801c44a <memset>
	return SUCCESS;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <ST7789_Draw_NOSIG>:

uint8_t ST7789_Draw_NOSIG(ST7789_HandleTypeDef *hst7789) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

	// Clear the area
	uint32_t cursor = LCD_WIDTH*(LCD_HEIGHT - 7*FONTSCALE_NOSIGNAL)*2 + (LCD_WIDTH - 7*FONTSCALE_NOSIGNAL);
 800360c:	4b46      	ldr	r3, [pc, #280]	@ (8003728 <ST7789_Draw_NOSIG+0x124>)
 800360e:	617b      	str	r3, [r7, #20]
	for (uint32_t x = 0; x < 66*FONTSCALE_NOSIGNAL; x++) {
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e012      	b.n	800363c <ST7789_Draw_NOSIG+0x38>
		memset(hst7789->vram + cursor - x*LCD_WIDTH*2, 0x00, 24*FONTSCALE_NOSIGNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6919      	ldr	r1, [r3, #16]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	015b      	lsls	r3, r3, #5
 8003624:	461a      	mov	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	440b      	add	r3, r1
 800362c:	2260      	movs	r2, #96	@ 0x60
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f018 ff0a 	bl	801c44a <memset>
	for (uint32_t x = 0; x < 66*FONTSCALE_NOSIGNAL; x++) {
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	3301      	adds	r3, #1
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8003642:	d3e8      	bcc.n	8003616 <ST7789_Draw_NOSIG+0x12>
	}

	// Draw the NO SIGNAL symbol
		cursor = LCD_WIDTH*(LCD_HEIGHT - 9*FONTSCALE_NOSIGNAL)*2 + (LCD_WIDTH - 4*FONTSCALE_NOSIGNAL);
 8003644:	4b39      	ldr	r3, [pc, #228]	@ (800372c <ST7789_Draw_NOSIG+0x128>)
 8003646:	617b      	str	r3, [r7, #20]
		for (uint8_t c = 0; c < 9; c++) {		// Loop chars
 8003648:	2300      	movs	r3, #0
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	e064      	b.n	8003718 <ST7789_Draw_NOSIG+0x114>
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 800364e:	2300      	movs	r3, #0
 8003650:	73bb      	strb	r3, [r7, #14]
 8003652:	e05b      	b.n	800370c <ST7789_Draw_NOSIG+0x108>
				uint8_t line_byte = TXT_NOSIGNAL[c*7 + l];
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	1a9a      	subs	r2, r3, r2
 800365c:	7bbb      	ldrb	r3, [r7, #14]
 800365e:	4413      	add	r3, r2
 8003660:	4a33      	ldr	r2, [pc, #204]	@ (8003730 <ST7789_Draw_NOSIG+0x12c>)
 8003662:	5cd3      	ldrb	r3, [r2, r3]
 8003664:	72bb      	strb	r3, [r7, #10]

				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 8003666:	2300      	movs	r3, #0
 8003668:	737b      	strb	r3, [r7, #13]
 800366a:	e045      	b.n	80036f8 <ST7789_Draw_NOSIG+0xf4>
					if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 800366c:	7aba      	ldrb	r2, [r7, #10]
 800366e:	7b7b      	ldrb	r3, [r7, #13]
 8003670:	fa42 f303 	asr.w	r3, r2, r3
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d03a      	beq.n	80036f2 <ST7789_Draw_NOSIG+0xee>
						for (uint8_t y = 0; y < FONTSCALE_NOSIGNAL; y++) {
 800367c:	2300      	movs	r3, #0
 800367e:	733b      	strb	r3, [r7, #12]
 8003680:	e034      	b.n	80036ec <ST7789_Draw_NOSIG+0xe8>
							for (uint8_t x = 0; x < FONTSCALE_NOSIGNAL; x++) {
 8003682:	2300      	movs	r3, #0
 8003684:	72fb      	strb	r3, [r7, #11]
 8003686:	e02b      	b.n	80036e0 <ST7789_Draw_NOSIG+0xdc>
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_NOSIGNAL)*2 + cursor    ] = 0xFF;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6919      	ldr	r1, [r3, #16]
 800368c:	7afa      	ldrb	r2, [r7, #11]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	461a      	mov	r2, r3
 8003698:	7b3b      	ldrb	r3, [r7, #12]
 800369a:	441a      	add	r2, r3
 800369c:	7b7b      	ldrb	r3, [r7, #13]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	461a      	mov	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	4413      	add	r3, r2
 80036aa:	440b      	add	r3, r1
 80036ac:	22ff      	movs	r2, #255	@ 0xff
 80036ae:	701a      	strb	r2, [r3, #0]
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_NOSIGNAL)*2 + cursor + 1] = 0xFF;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6919      	ldr	r1, [r3, #16]
 80036b4:	7afa      	ldrb	r2, [r7, #11]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	461a      	mov	r2, r3
 80036c0:	7b3b      	ldrb	r3, [r7, #12]
 80036c2:	441a      	add	r2, r3
 80036c4:	7b7b      	ldrb	r3, [r7, #13]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	461a      	mov	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4413      	add	r3, r2
 80036d2:	3301      	adds	r3, #1
 80036d4:	440b      	add	r3, r1
 80036d6:	22ff      	movs	r2, #255	@ 0xff
 80036d8:	701a      	strb	r2, [r3, #0]
							for (uint8_t x = 0; x < FONTSCALE_NOSIGNAL; x++) {
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	3301      	adds	r3, #1
 80036de:	72fb      	strb	r3, [r7, #11]
 80036e0:	7afb      	ldrb	r3, [r7, #11]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d9d0      	bls.n	8003688 <ST7789_Draw_NOSIG+0x84>
						for (uint8_t y = 0; y < FONTSCALE_NOSIGNAL; y++) {
 80036e6:	7b3b      	ldrb	r3, [r7, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	733b      	strb	r3, [r7, #12]
 80036ec:	7b3b      	ldrb	r3, [r7, #12]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d9c7      	bls.n	8003682 <ST7789_Draw_NOSIG+0x7e>
				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 80036f2:	7b7b      	ldrb	r3, [r7, #13]
 80036f4:	3301      	adds	r3, #1
 80036f6:	737b      	strb	r3, [r7, #13]
 80036f8:	7b7b      	ldrb	r3, [r7, #13]
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d9b6      	bls.n	800366c <ST7789_Draw_NOSIG+0x68>
							}
						}
					}
				}
				cursor -= LCD_WIDTH*FONTSCALE_NOSIGNAL*2;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8003704:	617b      	str	r3, [r7, #20]
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003706:	7bbb      	ldrb	r3, [r7, #14]
 8003708:	3301      	adds	r3, #1
 800370a:	73bb      	strb	r3, [r7, #14]
 800370c:	7bbb      	ldrb	r3, [r7, #14]
 800370e:	2b06      	cmp	r3, #6
 8003710:	d9a0      	bls.n	8003654 <ST7789_Draw_NOSIG+0x50>
		for (uint8_t c = 0; c < 9; c++) {		// Loop chars
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	3301      	adds	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b08      	cmp	r3, #8
 800371c:	d997      	bls.n	800364e <ST7789_Draw_NOSIG+0x4a>
			}
		}

		return SUCCESS;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	00022454 	.word	0x00022454
 800372c:	00021560 	.word	0x00021560
 8003730:	0801ef28 	.word	0x0801ef28

08003734 <ST7789_Draw_DATA>:

uint8_t ST7789_Draw_DATA(ST7789_HandleTypeDef *hst7789, uint32_t frametime_ms) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	@ 0x28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]

	uint16_t ms = frametime_ms;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if (ms > 999)
 8003742:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003744:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003748:	d302      	bcc.n	8003750 <ST7789_Draw_DATA+0x1c>
		ms = 999;
 800374a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800374e:	84fb      	strh	r3, [r7, #38]	@ 0x26

	uint8_t digits[3] = {
 8003750:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003752:	4a94      	ldr	r2, [pc, #592]	@ (80039a4 <ST7789_Draw_DATA+0x270>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	b29a      	uxth	r2, r3
 800375c:	4b92      	ldr	r3, [pc, #584]	@ (80039a8 <ST7789_Draw_DATA+0x274>)
 800375e:	fba3 1302 	umull	r1, r3, r3, r2
 8003762:	08d9      	lsrs	r1, r3, #3
 8003764:	460b      	mov	r3, r1
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	b29b      	uxth	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	733b      	strb	r3, [r7, #12]
 8003774:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003776:	4a8c      	ldr	r2, [pc, #560]	@ (80039a8 <ST7789_Draw_DATA+0x274>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	08db      	lsrs	r3, r3, #3
 800377e:	b29a      	uxth	r2, r3
 8003780:	4b89      	ldr	r3, [pc, #548]	@ (80039a8 <ST7789_Draw_DATA+0x274>)
 8003782:	fba3 1302 	umull	r1, r3, r3, r2
 8003786:	08d9      	lsrs	r1, r3, #3
 8003788:	460b      	mov	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	b29b      	uxth	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	737b      	strb	r3, [r7, #13]
 8003798:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800379a:	4b83      	ldr	r3, [pc, #524]	@ (80039a8 <ST7789_Draw_DATA+0x274>)
 800379c:	fba3 1302 	umull	r1, r3, r3, r2
 80037a0:	08d9      	lsrs	r1, r3, #3
 80037a2:	460b      	mov	r3, r1
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	73bb      	strb	r3, [r7, #14]
			(ms / 10)  % 10,
			 ms        % 10
	};

	// Clear the corner
	uint32_t cursor = (LCD_WIDTH*(LCD_HEIGHT-2) + 2)*2;
 80037b2:	4b7e      	ldr	r3, [pc, #504]	@ (80039ac <ST7789_Draw_DATA+0x278>)
 80037b4:	623b      	str	r3, [r7, #32]
	for (uint32_t x = 0; x < 44*FONTSCALE_FRAMETIME; x++) {
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e012      	b.n	80037e2 <ST7789_Draw_DATA+0xae>
		memset(hst7789->vram + cursor - x*LCD_WIDTH*2, 0x00, 24*FONTSCALE_FRAMETIME);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6919      	ldr	r1, [r3, #16]
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	015b      	lsls	r3, r3, #5
 80037ca:	461a      	mov	r2, r3
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	2218      	movs	r2, #24
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f018 fe37 	bl	801c44a <memset>
	for (uint32_t x = 0; x < 44*FONTSCALE_FRAMETIME; x++) {
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	3301      	adds	r3, #1
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2b2b      	cmp	r3, #43	@ 0x2b
 80037e6:	d9e9      	bls.n	80037bc <ST7789_Draw_DATA+0x88>
	}


	// Draw the MS symbol
	cursor = (LCD_WIDTH*(LCD_HEIGHT-2) + 2)*2;
 80037e8:	4b70      	ldr	r3, [pc, #448]	@ (80039ac <ST7789_Draw_DATA+0x278>)
 80037ea:	623b      	str	r3, [r7, #32]
	for (uint8_t c = 0; c < 3; c++) {		// Loop chars
 80037ec:	2300      	movs	r3, #0
 80037ee:	76fb      	strb	r3, [r7, #27]
 80037f0:	e062      	b.n	80038b8 <ST7789_Draw_DATA+0x184>
		for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80037f2:	2300      	movs	r3, #0
 80037f4:	76bb      	strb	r3, [r7, #26]
 80037f6:	e059      	b.n	80038ac <ST7789_Draw_DATA+0x178>
			uint8_t line_byte = TXT_MS[c*7 + l];
 80037f8:	7efa      	ldrb	r2, [r7, #27]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	1a9a      	subs	r2, r3, r2
 8003800:	7ebb      	ldrb	r3, [r7, #26]
 8003802:	4413      	add	r3, r2
 8003804:	4a6a      	ldr	r2, [pc, #424]	@ (80039b0 <ST7789_Draw_DATA+0x27c>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	743b      	strb	r3, [r7, #16]

			for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800380a:	2300      	movs	r3, #0
 800380c:	767b      	strb	r3, [r7, #25]
 800380e:	e043      	b.n	8003898 <ST7789_Draw_DATA+0x164>
				if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 8003810:	7c3a      	ldrb	r2, [r7, #16]
 8003812:	7e7b      	ldrb	r3, [r7, #25]
 8003814:	fa42 f303 	asr.w	r3, r2, r3
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d038      	beq.n	8003892 <ST7789_Draw_DATA+0x15e>
					for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003820:	2300      	movs	r3, #0
 8003822:	763b      	strb	r3, [r7, #24]
 8003824:	e032      	b.n	800388c <ST7789_Draw_DATA+0x158>
						for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]
 800382a:	e029      	b.n	8003880 <ST7789_Draw_DATA+0x14c>
							hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor    ] = 0xFF;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6919      	ldr	r1, [r3, #16]
 8003830:	7dfa      	ldrb	r2, [r7, #23]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	461a      	mov	r2, r3
 800383c:	7e3b      	ldrb	r3, [r7, #24]
 800383e:	441a      	add	r2, r3
 8003840:	7e7b      	ldrb	r3, [r7, #25]
 8003842:	4413      	add	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	461a      	mov	r2, r3
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	4413      	add	r3, r2
 800384c:	440b      	add	r3, r1
 800384e:	22ff      	movs	r2, #255	@ 0xff
 8003850:	701a      	strb	r2, [r3, #0]
							hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor + 1] = 0xFF;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6919      	ldr	r1, [r3, #16]
 8003856:	7dfa      	ldrb	r2, [r7, #23]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	461a      	mov	r2, r3
 8003862:	7e3b      	ldrb	r3, [r7, #24]
 8003864:	441a      	add	r2, r3
 8003866:	7e7b      	ldrb	r3, [r7, #25]
 8003868:	4413      	add	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	461a      	mov	r2, r3
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	4413      	add	r3, r2
 8003872:	3301      	adds	r3, #1
 8003874:	440b      	add	r3, r1
 8003876:	22ff      	movs	r2, #255	@ 0xff
 8003878:	701a      	strb	r2, [r3, #0]
						for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	3301      	adds	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0d2      	beq.n	800382c <ST7789_Draw_DATA+0xf8>
					for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003886:	7e3b      	ldrb	r3, [r7, #24]
 8003888:	3301      	adds	r3, #1
 800388a:	763b      	strb	r3, [r7, #24]
 800388c:	7e3b      	ldrb	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0c9      	beq.n	8003826 <ST7789_Draw_DATA+0xf2>
			for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 8003892:	7e7b      	ldrb	r3, [r7, #25]
 8003894:	3301      	adds	r3, #1
 8003896:	767b      	strb	r3, [r7, #25]
 8003898:	7e7b      	ldrb	r3, [r7, #25]
 800389a:	2b07      	cmp	r3, #7
 800389c:	d9b8      	bls.n	8003810 <ST7789_Draw_DATA+0xdc>
						}
					}
				}
			}
			cursor -= LCD_WIDTH*FONTSCALE_FRAMETIME*2;
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80038a4:	623b      	str	r3, [r7, #32]
		for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80038a6:	7ebb      	ldrb	r3, [r7, #26]
 80038a8:	3301      	adds	r3, #1
 80038aa:	76bb      	strb	r3, [r7, #26]
 80038ac:	7ebb      	ldrb	r3, [r7, #26]
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d9a2      	bls.n	80037f8 <ST7789_Draw_DATA+0xc4>
	for (uint8_t c = 0; c < 3; c++) {		// Loop chars
 80038b2:	7efb      	ldrb	r3, [r7, #27]
 80038b4:	3301      	adds	r3, #1
 80038b6:	76fb      	strb	r3, [r7, #27]
 80038b8:	7efb      	ldrb	r3, [r7, #27]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d999      	bls.n	80037f2 <ST7789_Draw_DATA+0xbe>
		}
	}

	// Draw the Digits
	for (uint8_t c = 0; c < 3; c++) {		// Loop digits
 80038be:	2300      	movs	r3, #0
 80038c0:	75bb      	strb	r3, [r7, #22]
 80038c2:	e067      	b.n	8003994 <ST7789_Draw_DATA+0x260>
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80038c4:	2300      	movs	r3, #0
 80038c6:	757b      	strb	r3, [r7, #21]
 80038c8:	e05e      	b.n	8003988 <ST7789_Draw_DATA+0x254>
				uint8_t line_byte = TXT_NUM[digits[c]*7 + l];
 80038ca:	7dbb      	ldrb	r3, [r7, #22]
 80038cc:	3328      	adds	r3, #40	@ 0x28
 80038ce:	443b      	add	r3, r7
 80038d0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	1a9a      	subs	r2, r3, r2
 80038dc:	7d7b      	ldrb	r3, [r7, #21]
 80038de:	4413      	add	r3, r2
 80038e0:	4a34      	ldr	r2, [pc, #208]	@ (80039b4 <ST7789_Draw_DATA+0x280>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	747b      	strb	r3, [r7, #17]

				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 80038e6:	2300      	movs	r3, #0
 80038e8:	753b      	strb	r3, [r7, #20]
 80038ea:	e043      	b.n	8003974 <ST7789_Draw_DATA+0x240>
					if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 80038ec:	7c7a      	ldrb	r2, [r7, #17]
 80038ee:	7d3b      	ldrb	r3, [r7, #20]
 80038f0:	fa42 f303 	asr.w	r3, r2, r3
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d038      	beq.n	800396e <ST7789_Draw_DATA+0x23a>
						for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 80038fc:	2300      	movs	r3, #0
 80038fe:	74fb      	strb	r3, [r7, #19]
 8003900:	e032      	b.n	8003968 <ST7789_Draw_DATA+0x234>
							for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 8003902:	2300      	movs	r3, #0
 8003904:	74bb      	strb	r3, [r7, #18]
 8003906:	e029      	b.n	800395c <ST7789_Draw_DATA+0x228>
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor    ] = 0xFF;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6919      	ldr	r1, [r3, #16]
 800390c:	7cba      	ldrb	r2, [r7, #18]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	461a      	mov	r2, r3
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	441a      	add	r2, r3
 800391c:	7d3b      	ldrb	r3, [r7, #20]
 800391e:	4413      	add	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	461a      	mov	r2, r3
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	4413      	add	r3, r2
 8003928:	440b      	add	r3, r1
 800392a:	22ff      	movs	r2, #255	@ 0xff
 800392c:	701a      	strb	r2, [r3, #0]
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor + 1] = 0xFF;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6919      	ldr	r1, [r3, #16]
 8003932:	7cba      	ldrb	r2, [r7, #18]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	461a      	mov	r2, r3
 800393e:	7cfb      	ldrb	r3, [r7, #19]
 8003940:	441a      	add	r2, r3
 8003942:	7d3b      	ldrb	r3, [r7, #20]
 8003944:	4413      	add	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	461a      	mov	r2, r3
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	4413      	add	r3, r2
 800394e:	3301      	adds	r3, #1
 8003950:	440b      	add	r3, r1
 8003952:	22ff      	movs	r2, #255	@ 0xff
 8003954:	701a      	strb	r2, [r3, #0]
							for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 8003956:	7cbb      	ldrb	r3, [r7, #18]
 8003958:	3301      	adds	r3, #1
 800395a:	74bb      	strb	r3, [r7, #18]
 800395c:	7cbb      	ldrb	r3, [r7, #18]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0d2      	beq.n	8003908 <ST7789_Draw_DATA+0x1d4>
						for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003962:	7cfb      	ldrb	r3, [r7, #19]
 8003964:	3301      	adds	r3, #1
 8003966:	74fb      	strb	r3, [r7, #19]
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0c9      	beq.n	8003902 <ST7789_Draw_DATA+0x1ce>
				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800396e:	7d3b      	ldrb	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	753b      	strb	r3, [r7, #20]
 8003974:	7d3b      	ldrb	r3, [r7, #20]
 8003976:	2b07      	cmp	r3, #7
 8003978:	d9b8      	bls.n	80038ec <ST7789_Draw_DATA+0x1b8>
							}
						}
					}
				}
				cursor -= LCD_WIDTH*FONTSCALE_FRAMETIME*2;
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003980:	623b      	str	r3, [r7, #32]
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003982:	7d7b      	ldrb	r3, [r7, #21]
 8003984:	3301      	adds	r3, #1
 8003986:	757b      	strb	r3, [r7, #21]
 8003988:	7d7b      	ldrb	r3, [r7, #21]
 800398a:	2b06      	cmp	r3, #6
 800398c:	d99d      	bls.n	80038ca <ST7789_Draw_DATA+0x196>
	for (uint8_t c = 0; c < 3; c++) {		// Loop digits
 800398e:	7dbb      	ldrb	r3, [r7, #22]
 8003990:	3301      	adds	r3, #1
 8003992:	75bb      	strb	r3, [r7, #22]
 8003994:	7dbb      	ldrb	r3, [r7, #22]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d994      	bls.n	80038c4 <ST7789_Draw_DATA+0x190>
			}
		}

	return SUCCESS;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3728      	adds	r7, #40	@ 0x28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	51eb851f 	.word	0x51eb851f
 80039a8:	cccccccd 	.word	0xcccccccd
 80039ac:	00025444 	.word	0x00025444
 80039b0:	0801ef68 	.word	0x0801ef68
 80039b4:	0801ef80 	.word	0x0801ef80

080039b8 <ST7789_DMATransmitCplt>:

void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	// Flag idle
	hst7789->spi_state = 0;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	711a      	strb	r2, [r3, #4]

	// Check the state of the update sequence
	if (hst7789->update_sequence < 2) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	7d1b      	ldrb	r3, [r3, #20]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d80b      	bhi.n	80039e6 <ST7789_DMATransmitCplt+0x2e>
		// Immediately start the next update in the sequence
		hst7789->update_sequence++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7d1b      	ldrb	r3, [r3, #20]
 80039d2:	3301      	adds	r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	751a      	strb	r2, [r3, #20]
		ST7789_UpdateSector(hst7789, hst7789->update_sequence);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7d1b      	ldrb	r3, [r3, #20]
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fd8a 	bl	80034fa <ST7789_UpdateSector>
	}
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <Assemble2x8_16>:
 */

#include "STC3100.h"

// Helper
uint16_t Assemble2x8_16(uint8_t lsb, uint8_t msb) {
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	460a      	mov	r2, r1
 80039f8:	71fb      	strb	r3, [r7, #7]
 80039fa:	4613      	mov	r3, r2
 80039fc:	71bb      	strb	r3, [r7, #6]
	uint16_t raw = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	81fb      	strh	r3, [r7, #14]

	raw |= lsb;
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	89fb      	ldrh	r3, [r7, #14]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	81fb      	strh	r3, [r7, #14]
	raw |= ((uint16_t)msb) << 8;
 8003a0c:	79bb      	ldrb	r3, [r7, #6]
 8003a0e:	b21b      	sxth	r3, r3
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	b21a      	sxth	r2, r3
 8003a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	b21b      	sxth	r3, r3
 8003a1c:	81fb      	strh	r3, [r7, #14]

	return raw;
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	0000      	movs	r0, r0
	...

08003a30 <VoltageToCharge>:

float VoltageToCharge(float voltage) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	ed87 0a01 	vstr	s0, [r7, #4]
	float out = 1.25 - 1.35*pow(voltage - 4.58, 2);
 8003a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a42:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8003ab0 <VoltageToCharge+0x80>
 8003a46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a4a:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8003a4e:	eeb0 0b47 	vmov.f64	d0, d7
 8003a52:	f01a fcdd 	bl	801e410 <pow>
 8003a56:	eeb0 7b40 	vmov.f64	d7, d0
 8003a5a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8003ab8 <VoltageToCharge+0x88>
 8003a5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a62:	eeb7 6b04 	vmov.f64	d6, #116	@ 0x3fa00000  1.250
 8003a66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a6e:	edc7 7a03 	vstr	s15, [r7, #12]
	if (out < 0.0) out = 0.0;
 8003a72:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	d502      	bpl.n	8003a86 <VoltageToCharge+0x56>
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
	if (out > 1.0) out = 1.0;
 8003a86:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	dd02      	ble.n	8003a9e <VoltageToCharge+0x6e>
 8003a98:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003a9c:	60fb      	str	r3, [r7, #12]

	return out;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	ee07 3a90 	vmov	s15, r3
}
 8003aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	851eb852 	.word	0x851eb852
 8003ab4:	401251eb 	.word	0x401251eb
 8003ab8:	9999999a 	.word	0x9999999a
 8003abc:	3ff59999 	.word	0x3ff59999

08003ac0 <STC3100_ReadRegister>:

uint8_t STC3100_ReadRegister(STC3100_HandleTypeDef *hstc, uint8_t reg, uint8_t *pData, uint8_t len) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	461a      	mov	r2, r3
 8003acc:	460b      	mov	r3, r1
 8003ace:	72fb      	strb	r3, [r7, #11]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	72bb      	strb	r3, [r7, #10]
	// Start transfer, write reg addr as WRITE
	if (HAL_I2C_Master_Transmit(hstc->i2c_handle, ((hstc->address) << 1) | 1, &reg, 1, 10))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	791b      	ldrb	r3, [r3, #4]
 8003adc:	b21b      	sxth	r3, r3
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	b21b      	sxth	r3, r3
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	b21b      	sxth	r3, r3
 8003ae8:	b299      	uxth	r1, r3
 8003aea:	f107 020b 	add.w	r2, r7, #11
 8003aee:	230a      	movs	r3, #10
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2301      	movs	r3, #1
 8003af4:	f004 fef8 	bl	80088e8 <HAL_I2C_Master_Transmit>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <STC3100_ReadRegister+0x42>
		return ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e012      	b.n	8003b28 <STC3100_ReadRegister+0x68>

	// Read 2 bytes in
	if (HAL_I2C_Master_Receive(hstc->i2c_handle, ((hstc->address) << 1) | 0, pData, len, 10))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	791b      	ldrb	r3, [r3, #4]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	b299      	uxth	r1, r3
 8003b0e:	7abb      	ldrb	r3, [r7, #10]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	220a      	movs	r2, #10
 8003b14:	9200      	str	r2, [sp, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	f004 fffe 	bl	8008b18 <HAL_I2C_Master_Receive>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <STC3100_ReadRegister+0x66>
		return ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <STC3100_ReadRegister+0x68>

	return SUCCESS;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <STC3100_WriteRegister>:

uint8_t STC3100_WriteRegister(STC3100_HandleTypeDef *hstc, uint8_t reg, uint8_t data) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	70bb      	strb	r3, [r7, #2]
	uint8_t composite[2] = {reg, data};
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	733b      	strb	r3, [r7, #12]
 8003b44:	78bb      	ldrb	r3, [r7, #2]
 8003b46:	737b      	strb	r3, [r7, #13]
	// Start transfer, write reg addr as WRITE
	if (HAL_I2C_Master_Transmit(hstc->i2c_handle, ((hstc->address) << 1) | 0, composite, 2, 10))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	791b      	ldrb	r3, [r3, #4]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	b299      	uxth	r1, r3
 8003b54:	f107 020c 	add.w	r2, r7, #12
 8003b58:	230a      	movs	r3, #10
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f004 fec3 	bl	80088e8 <HAL_I2C_Master_Transmit>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <STC3100_WriteRegister+0x3c>
		return ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <STC3100_WriteRegister+0x3e>

	return SUCCESS;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <STC3100_Init>:

uint8_t STC3100_Init(STC3100_HandleTypeDef *hstc) {
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
	// Enable GG_RUN
	if (STC3100_WriteRegister(hstc, REG_MODE, 0b00010000))
 8003b7e:	2210      	movs	r2, #16
 8003b80:	2100      	movs	r1, #0
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ffd4 	bl	8003b30 <STC3100_WriteRegister>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <STC3100_Init+0x1c>
		return ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00a      	b.n	8003ba8 <STC3100_Init+0x32>

	// un-flag PORDET, run GG_RST, set IO to Hi-Z
	if (STC3100_WriteRegister(hstc, REG_CTRL, 0b00000011))
 8003b92:	2203      	movs	r2, #3
 8003b94:	2101      	movs	r1, #1
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffca 	bl	8003b30 <STC3100_WriteRegister>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <STC3100_Init+0x30>
		return ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <STC3100_Init+0x32>

	return SUCCESS;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <STC3100_Get>:

uint8_t STC3100_Get(STC3100_HandleTypeDef *hstc) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

	uint8_t registers[12];

	// Dump the STCs registers
	if (STC3100_ReadRegister(hstc, 0, registers, 12))
 8003bb8:	f107 020c 	add.w	r2, r7, #12
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff7d 	bl	8003ac0 <STC3100_ReadRegister>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <STC3100_Get+0x20>
		return 1;	// Read Error
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0a3      	b.n	8003d18 <STC3100_Get+0x168>

	// Do some error checking
	// PORDET is flagged, battery is low
	if (registers[1] & 0b00010000)
 8003bd0:	7b7b      	ldrb	r3, [r7, #13]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <STC3100_Get+0x2e>
		return 2;	// POWER LOW Error
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e09c      	b.n	8003d18 <STC3100_Get+0x168>

	//TODO: Rolling average these

	int16_t charge_raw = Assemble2x8_16(registers[2], registers[3]);
 8003bde:	7bbb      	ldrb	r3, [r7, #14]
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff02 	bl	80039ee <Assemble2x8_16>
 8003bea:	4603      	mov	r3, r0
 8003bec:	83fb      	strh	r3, [r7, #30]
	hstc->charge_delta = (float)charge_raw*0.000335; // CHARGE SINCE STARTUP [Ah]
 8003bee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bfe:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8003d20 <STC3100_Get+0x170>
 8003c02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	edc3 7a02 	vstr	s15, [r3, #8]

	int16_t current_raw = Assemble2x8_16(registers[6], registers[7]) / 4;
 8003c10:	7cbb      	ldrb	r3, [r7, #18]
 8003c12:	7cfa      	ldrb	r2, [r7, #19]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fee9 	bl	80039ee <Assemble2x8_16>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	83bb      	strh	r3, [r7, #28]
	hstc->current = (float)current_raw*0.000585; // Current [A] (conv. fac / shunt)
 8003c24:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c34:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8003d28 <STC3100_Get+0x178>
 8003c38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	edc3 7a04 	vstr	s15, [r3, #16]

	uint16_t voltage_raw = Assemble2x8_16(registers[8], registers[9]);
 8003c46:	7d3b      	ldrb	r3, [r7, #20]
 8003c48:	7d7a      	ldrb	r2, [r7, #21]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fece 	bl	80039ee <Assemble2x8_16>
 8003c52:	4603      	mov	r3, r0
 8003c54:	837b      	strh	r3, [r7, #26]
	hstc->voltage = (float)voltage_raw*0.00244; // Voltage [V]
 8003c56:	8b7b      	ldrh	r3, [r7, #26]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c64:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8003d30 <STC3100_Get+0x180>
 8003c68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	edc3 7a03 	vstr	s15, [r3, #12]

	int16_t temperature_raw = Assemble2x8_16(registers[10], registers[11]);
 8003c76:	7dbb      	ldrb	r3, [r7, #22]
 8003c78:	7dfa      	ldrb	r2, [r7, #23]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff feb6 	bl	80039ee <Assemble2x8_16>
 8003c82:	4603      	mov	r3, r0
 8003c84:	833b      	strh	r3, [r7, #24]
	hstc->temperature = (float)temperature_raw*0.125; // Temp [degC]
 8003c86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c92:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8003c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	edc3 7a05 	vstr	s15, [r3, #20]

	// Calculate other values
	if (hstc->voltage >= 4.15) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003caa:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8003d38 <STC3100_Get+0x188>
 8003cae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb6:	db0b      	blt.n	8003cd0 <STC3100_Get+0x120>
		// CHARGING
		hstc->charge_percent = 100.0; 	// Charge level [01%]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a21      	ldr	r2, [pc, #132]	@ (8003d40 <STC3100_Get+0x190>)
 8003cbc:	621a      	str	r2, [r3, #32]
		hstc->charge = CAPACITY_AH; 	// Charge [Ah]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cc4:	619a      	str	r2, [r3, #24]
		hstc->charge_time = 0.0;	// Discharge Time [sec]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cce:	e022      	b.n	8003d16 <STC3100_Get+0x166>
	} else {
		// DISCHARGING
		hstc->charge_percent = VoltageToCharge(hstc->voltage); 	// Charge level [01%]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cda:	f7ff fea9 	bl	8003a30 <VoltageToCharge>
 8003cde:	eef0 7a40 	vmov.f32	s15, s0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	edc3 7a08 	vstr	s15, [r3, #32]
		hstc->charge = (hstc->charge_percent * CAPACITY_AH); 	// Charge [Ah]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	edd3 7a08 	vldr	s15, [r3, #32]
 8003cee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	edc3 7a06 	vstr	s15, [r3, #24]
		hstc->charge_time = (hstc->charge / hstc->current)*3600.0;	// Discharge Time [sec]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	edd3 6a06 	vldr	s13, [r3, #24]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	ed93 7a04 	vldr	s14, [r3, #16]
 8003d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d08:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003d44 <STC3100_Get+0x194>
 8003d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}

	return SUCCESS;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	0b4e11dc 	.word	0x0b4e11dc
 8003d24:	3f35f45e 	.word	0x3f35f45e
 8003d28:	ef1fddec 	.word	0xef1fddec
 8003d2c:	3f432b55 	.word	0x3f432b55
 8003d30:	0678c005 	.word	0x0678c005
 8003d34:	3f63fd0d 	.word	0x3f63fd0d
 8003d38:	9999999a 	.word	0x9999999a
 8003d3c:	40109999 	.word	0x40109999
 8003d40:	42c80000 	.word	0x42c80000
 8003d44:	45610000 	.word	0x45610000

08003d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d4e:	2003      	movs	r0, #3
 8003d50:	f001 fc3e 	bl	80055d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d54:	f00b ff96 	bl	800fc84 <HAL_RCC_GetSysClockFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <HAL_Init+0x68>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	4913      	ldr	r1, [pc, #76]	@ (8003db4 <HAL_Init+0x6c>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d72:	4b0f      	ldr	r3, [pc, #60]	@ (8003db0 <HAL_Init+0x68>)
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003db4 <HAL_Init+0x6c>)
 8003d7c:	5cd3      	ldrb	r3, [r2, r3]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	4a0b      	ldr	r2, [pc, #44]	@ (8003db8 <HAL_Init+0x70>)
 8003d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003dbc <HAL_Init+0x74>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d92:	200f      	movs	r0, #15
 8003d94:	f000 f814 	bl	8003dc0 <HAL_InitTick>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e002      	b.n	8003da8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003da2:	f7fe fa2d 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	58024400 	.word	0x58024400
 8003db4:	0801ec30 	.word	0x0801ec30
 8003db8:	24000244 	.word	0x24000244
 8003dbc:	24000240 	.word	0x24000240

08003dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003dc8:	4b15      	ldr	r3, [pc, #84]	@ (8003e20 <HAL_InitTick+0x60>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e021      	b.n	8003e18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <HAL_InitTick+0x64>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b11      	ldr	r3, [pc, #68]	@ (8003e20 <HAL_InitTick+0x60>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fc23 	bl	8005636 <HAL_SYSTICK_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e00e      	b.n	8003e18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b0f      	cmp	r3, #15
 8003dfe:	d80a      	bhi.n	8003e16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e00:	2200      	movs	r2, #0
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	f001 fbed 	bl	80055e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e0c:	4a06      	ldr	r2, [pc, #24]	@ (8003e28 <HAL_InitTick+0x68>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	2400024c 	.word	0x2400024c
 8003e24:	24000240 	.word	0x24000240
 8003e28:	24000248 	.word	0x24000248

08003e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e30:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_IncTick+0x20>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_IncTick+0x24>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a04      	ldr	r2, [pc, #16]	@ (8003e50 <HAL_IncTick+0x24>)
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	2400024c 	.word	0x2400024c
 8003e50:	240472bc 	.word	0x240472bc

08003e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return uwTick;
 8003e58:	4b03      	ldr	r3, [pc, #12]	@ (8003e68 <HAL_GetTick+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	240472bc 	.word	0x240472bc

08003e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e74:	f7ff ffee 	bl	8003e54 <HAL_GetTick>
 8003e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d005      	beq.n	8003e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e86:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <HAL_Delay+0x44>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e92:	bf00      	nop
 8003e94:	f7ff ffde 	bl	8003e54 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d8f7      	bhi.n	8003e94 <HAL_Delay+0x28>
  {
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	2400024c 	.word	0x2400024c

08003eb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003eb8:	4b03      	ldr	r3, [pc, #12]	@ (8003ec8 <HAL_GetREVID+0x14>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	5c001000 	.word	0x5c001000

08003ecc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <LL_ADC_SetChannelPreselection+0x24>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	0e9b      	lsrs	r3, r3, #26
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2201      	movs	r2, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	e015      	b.n	8003f84 <LL_ADC_SetChannelPreselection+0x50>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8003f6e:	2320      	movs	r3, #32
 8003f70:	e003      	b.n	8003f7a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	2201      	movs	r2, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	69d2      	ldr	r2, [r2, #28]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b087      	sub	sp, #28
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3360      	adds	r3, #96	@ 0x60
 8003fac:	461a      	mov	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3360      	adds	r3, #96	@ 0x60
 800401c:	461a      	mov	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	431a      	orrs	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	601a      	str	r2, [r3, #0]
  }
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3330      	adds	r3, #48	@ 0x30
 8004078:	461a      	mov	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	4413      	add	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	211f      	movs	r1, #31
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0e9b      	lsrs	r3, r3, #26
 80040a0:	f003 011f 	and.w	r1, r3, #31
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	431a      	orrs	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	60da      	str	r2, [r3, #12]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b087      	sub	sp, #28
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3314      	adds	r3, #20
 80040f6:	461a      	mov	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	0e5b      	lsrs	r3, r3, #25
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	4413      	add	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	0d1b      	lsrs	r3, r3, #20
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	2107      	movs	r1, #7
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	401a      	ands	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	0d1b      	lsrs	r3, r3, #20
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	431a      	orrs	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004154:	43db      	mvns	r3, r3
 8004156:	401a      	ands	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f003 0318 	and.w	r3, r3, #24
 800415e:	4908      	ldr	r1, [pc, #32]	@ (8004180 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004160:	40d9      	lsrs	r1, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	400b      	ands	r3, r1
 8004166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	000fffff 	.word	0x000fffff

08004184 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 031f 	and.w	r3, r3, #31
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b04      	ldr	r3, [pc, #16]	@ (80041c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6093      	str	r3, [r2, #8]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	5fffffc0 	.word	0x5fffffc0

080041c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d8:	d101      	bne.n	80041de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <LL_ADC_EnableInternalRegulator+0x24>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	6fffffc0 	.word	0x6fffffc0

08004214 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004228:	d101      	bne.n	800422e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <LL_ADC_Enable+0x24>)
 800424a:	4013      	ands	r3, r2
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	7fffffc0 	.word	0x7fffffc0

08004264 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <LL_ADC_IsEnabled+0x18>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <LL_ADC_IsEnabled+0x1a>
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <LL_ADC_REG_StartConversion+0x24>)
 800429a:	4013      	ands	r3, r2
 800429c:	f043 0204 	orr.w	r2, r3, #4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	7fffffc0 	.word	0x7fffffc0

080042b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d101      	bne.n	80042cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d101      	bne.n	80042f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b089      	sub	sp, #36	@ 0x24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800430c:	2300      	movs	r3, #0
 800430e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e18f      	b.n	800463a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fd ff83 	bl	8002234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff3f 	bl	80041c4 <LL_ADC_IsDeepPowerDownEnabled>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ff25 	bl	80041a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff5a 	bl	8004214 <LL_ADC_IsInternalRegulatorEnabled>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d114      	bne.n	8004390 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff ff3e 	bl	80041ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004370:	4b87      	ldr	r3, [pc, #540]	@ (8004590 <HAL_ADC_Init+0x290>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	099b      	lsrs	r3, r3, #6
 8004376:	4a87      	ldr	r2, [pc, #540]	@ (8004594 <HAL_ADC_Init+0x294>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	3301      	adds	r3, #1
 8004380:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004382:	e002      	b.n	800438a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	3b01      	subs	r3, #1
 8004388:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f9      	bne.n	8004384 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff3d 	bl	8004214 <LL_ADC_IsInternalRegulatorEnabled>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b0:	f043 0201 	orr.w	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff77 	bl	80042b4 <LL_ADC_REG_IsConversionOngoing>
 80043c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f040 8129 	bne.w	8004628 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f040 8125 	bne.w	8004628 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80043e6:	f043 0202 	orr.w	r2, r3, #2
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff ff36 	bl	8004264 <LL_ADC_IsEnabled>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d136      	bne.n	800446c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a65      	ldr	r2, [pc, #404]	@ (8004598 <HAL_ADC_Init+0x298>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_ADC_Init+0x112>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a63      	ldr	r2, [pc, #396]	@ (800459c <HAL_ADC_Init+0x29c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10e      	bne.n	8004430 <HAL_ADC_Init+0x130>
 8004412:	4861      	ldr	r0, [pc, #388]	@ (8004598 <HAL_ADC_Init+0x298>)
 8004414:	f7ff ff26 	bl	8004264 <LL_ADC_IsEnabled>
 8004418:	4604      	mov	r4, r0
 800441a:	4860      	ldr	r0, [pc, #384]	@ (800459c <HAL_ADC_Init+0x29c>)
 800441c:	f7ff ff22 	bl	8004264 <LL_ADC_IsEnabled>
 8004420:	4603      	mov	r3, r0
 8004422:	4323      	orrs	r3, r4
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e008      	b.n	8004442 <HAL_ADC_Init+0x142>
 8004430:	485b      	ldr	r0, [pc, #364]	@ (80045a0 <HAL_ADC_Init+0x2a0>)
 8004432:	f7ff ff17 	bl	8004264 <LL_ADC_IsEnabled>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d012      	beq.n	800446c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a53      	ldr	r2, [pc, #332]	@ (8004598 <HAL_ADC_Init+0x298>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_ADC_Init+0x15a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a51      	ldr	r2, [pc, #324]	@ (800459c <HAL_ADC_Init+0x29c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <HAL_ADC_Init+0x15e>
 800445a:	4a52      	ldr	r2, [pc, #328]	@ (80045a4 <HAL_ADC_Init+0x2a4>)
 800445c:	e000      	b.n	8004460 <HAL_ADC_Init+0x160>
 800445e:	4a52      	ldr	r2, [pc, #328]	@ (80045a8 <HAL_ADC_Init+0x2a8>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7ff fd30 	bl	8003ecc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800446c:	f7ff fd22 	bl	8003eb4 <HAL_GetREVID>
 8004470:	4603      	mov	r3, r0
 8004472:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004476:	4293      	cmp	r3, r2
 8004478:	d914      	bls.n	80044a4 <HAL_ADC_Init+0x1a4>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b10      	cmp	r3, #16
 8004480:	d110      	bne.n	80044a4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	7d5b      	ldrb	r3, [r3, #21]
 8004486:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800448c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004492:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7f1b      	ldrb	r3, [r3, #28]
 8004498:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800449a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800449c:	f043 030c 	orr.w	r3, r3, #12
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e00d      	b.n	80044c0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7d5b      	ldrb	r3, [r3, #21]
 80044a8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044ae:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80044b4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7f1b      	ldrb	r3, [r3, #28]
 80044ba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	7f1b      	ldrb	r3, [r3, #28]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d106      	bne.n	80044d6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	045b      	lsls	r3, r3, #17
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	4b2c      	ldr	r3, [pc, #176]	@ (80045ac <HAL_ADC_Init+0x2ac>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	69b9      	ldr	r1, [r7, #24]
 8004502:	430b      	orrs	r3, r1
 8004504:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fed2 	bl	80042b4 <LL_ADC_REG_IsConversionOngoing>
 8004510:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fedf 	bl	80042da <LL_ADC_INJ_IsConversionOngoing>
 800451c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d15f      	bne.n	80045e4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d15c      	bne.n	80045e4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	7d1b      	ldrb	r3, [r3, #20]
 800452e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	4b1c      	ldr	r3, [pc, #112]	@ (80045b0 <HAL_ADC_Init+0x2b0>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	69b9      	ldr	r1, [r7, #24]
 8004548:	430b      	orrs	r3, r1
 800454a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004552:	2b01      	cmp	r3, #1
 8004554:	d130      	bne.n	80045b8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	4b14      	ldr	r3, [pc, #80]	@ (80045b4 <HAL_ADC_Init+0x2b4>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800456a:	3a01      	subs	r2, #1
 800456c:	0411      	lsls	r1, r2, #16
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004572:	4311      	orrs	r1, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004578:	4311      	orrs	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800457e:	430a      	orrs	r2, r1
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	611a      	str	r2, [r3, #16]
 800458c:	e01c      	b.n	80045c8 <HAL_ADC_Init+0x2c8>
 800458e:	bf00      	nop
 8004590:	24000240 	.word	0x24000240
 8004594:	053e2d63 	.word	0x053e2d63
 8004598:	40022000 	.word	0x40022000
 800459c:	40022100 	.word	0x40022100
 80045a0:	58026000 	.word	0x58026000
 80045a4:	40022300 	.word	0x40022300
 80045a8:	58026300 	.word	0x58026300
 80045ac:	fff0c003 	.word	0xfff0c003
 80045b0:	ffffbffc 	.word	0xffffbffc
 80045b4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fd16 	bl	8005010 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10c      	bne.n	8004606 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	f023 010f 	bic.w	r1, r3, #15
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	1e5a      	subs	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
 8004604:	e007      	b.n	8004616 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 020f 	bic.w	r2, r2, #15
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	f043 0201 	orr.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	655a      	str	r2, [r3, #84]	@ 0x54
 8004626:	e007      	b.n	8004638 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	f043 0210 	orr.w	r2, r3, #16
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004638:	7ffb      	ldrb	r3, [r7, #31]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3724      	adds	r7, #36	@ 0x24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd90      	pop	{r4, r7, pc}
 8004642:	bf00      	nop

08004644 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a55      	ldr	r2, [pc, #340]	@ (80047ac <HAL_ADC_Start_DMA+0x168>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_ADC_Start_DMA+0x20>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a54      	ldr	r2, [pc, #336]	@ (80047b0 <HAL_ADC_Start_DMA+0x16c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d101      	bne.n	8004668 <HAL_ADC_Start_DMA+0x24>
 8004664:	4b53      	ldr	r3, [pc, #332]	@ (80047b4 <HAL_ADC_Start_DMA+0x170>)
 8004666:	e000      	b.n	800466a <HAL_ADC_Start_DMA+0x26>
 8004668:	4b53      	ldr	r3, [pc, #332]	@ (80047b8 <HAL_ADC_Start_DMA+0x174>)
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fd8a 	bl	8004184 <LL_ADC_GetMultimode>
 8004670:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fe1c 	bl	80042b4 <LL_ADC_REG_IsConversionOngoing>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 808c 	bne.w	800479c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_ADC_Start_DMA+0x4e>
 800468e:	2302      	movs	r3, #2
 8004690:	e087      	b.n	80047a2 <HAL_ADC_Start_DMA+0x15e>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b05      	cmp	r3, #5
 80046a4:	d002      	beq.n	80046ac <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b09      	cmp	r3, #9
 80046aa:	d170      	bne.n	800478e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fb91 	bl	8004dd4 <ADC_Enable>
 80046b2:	4603      	mov	r3, r0
 80046b4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d163      	bne.n	8004784 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046c0:	4b3e      	ldr	r3, [pc, #248]	@ (80047bc <HAL_ADC_Start_DMA+0x178>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a37      	ldr	r2, [pc, #220]	@ (80047b0 <HAL_ADC_Start_DMA+0x16c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d002      	beq.n	80046dc <HAL_ADC_Start_DMA+0x98>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	e000      	b.n	80046de <HAL_ADC_Start_DMA+0x9a>
 80046dc:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <HAL_ADC_Start_DMA+0x168>)
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d002      	beq.n	80046ec <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d006      	beq.n	8004712 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004708:	f023 0206 	bic.w	r2, r3, #6
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004710:	e002      	b.n	8004718 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471c:	4a28      	ldr	r2, [pc, #160]	@ (80047c0 <HAL_ADC_Start_DMA+0x17c>)
 800471e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004724:	4a27      	ldr	r2, [pc, #156]	@ (80047c4 <HAL_ADC_Start_DMA+0x180>)
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472c:	4a26      	ldr	r2, [pc, #152]	@ (80047c8 <HAL_ADC_Start_DMA+0x184>)
 800472e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	221c      	movs	r2, #28
 8004736:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0210 	orr.w	r2, r2, #16
 800474e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f7ff fcb0 	bl	80040c0 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3340      	adds	r3, #64	@ 0x40
 800476a:	4619      	mov	r1, r3
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f001 fb42 	bl	8005df8 <HAL_DMA_Start_IT>
 8004774:	4603      	mov	r3, r0
 8004776:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fd85 	bl	800428c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004782:	e00d      	b.n	80047a0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800478c:	e008      	b.n	80047a0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800479a:	e001      	b.n	80047a0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800479c:	2302      	movs	r3, #2
 800479e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40022100 	.word	0x40022100
 80047b4:	40022300 	.word	0x40022300
 80047b8:	58026300 	.word	0x58026300
 80047bc:	fffff0fe 	.word	0xfffff0fe
 80047c0:	08004ee9 	.word	0x08004ee9
 80047c4:	08004fc1 	.word	0x08004fc1
 80047c8:	08004fdd 	.word	0x08004fdd

080047cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b08d      	sub	sp, #52	@ 0x34
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a65      	ldr	r2, [pc, #404]	@ (80049a4 <HAL_ADC_ConfigChannel+0x1b0>)
 800480e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_ADC_ConfigChannel+0x2a>
 800481a:	2302      	movs	r3, #2
 800481c:	e2c7      	b.n	8004dae <HAL_ADC_ConfigChannel+0x5ba>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fd42 	bl	80042b4 <LL_ADC_REG_IsConversionOngoing>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 82ac 	bne.w	8004d90 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	db2c      	blt.n	800489a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <HAL_ADC_ConfigChannel+0x6a>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0e9b      	lsrs	r3, r3, #26
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2201      	movs	r2, #1
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	e016      	b.n	800488c <HAL_ADC_ConfigChannel+0x98>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	613b      	str	r3, [r7, #16]
  return result;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8004876:	2320      	movs	r3, #32
 8004878:	e003      	b.n	8004882 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	fab3 f383 	clz	r3, r3
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2201      	movs	r2, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	69d1      	ldr	r1, [r2, #28]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	430b      	orrs	r3, r1
 8004898:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f7ff fbde 	bl	8004068 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fcff 	bl	80042b4 <LL_ADC_REG_IsConversionOngoing>
 80048b6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fd0c 	bl	80042da <LL_ADC_INJ_IsConversionOngoing>
 80048c2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 80b8 	bne.w	8004a3c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 80b4 	bne.w	8004a3c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6819      	ldr	r1, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f7ff fc00 	bl	80040e6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048e6:	4b30      	ldr	r3, [pc, #192]	@ (80049a8 <HAL_ADC_ConfigChannel+0x1b4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80048ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f2:	d10b      	bne.n	800490c <HAL_ADC_ConfigChannel+0x118>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	e01d      	b.n	8004948 <HAL_ADC_ConfigChannel+0x154>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x13e>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	e00a      	b.n	8004948 <HAL_ADC_ConfigChannel+0x154>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b04      	cmp	r3, #4
 8004950:	d02c      	beq.n	80049ac <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6919      	ldr	r1, [r3, #16]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	f7ff fb1b 	bl	8003f9a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6919      	ldr	r1, [r3, #16]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	7e5b      	ldrb	r3, [r3, #25]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d102      	bne.n	800497a <HAL_ADC_ConfigChannel+0x186>
 8004974:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004978:	e000      	b.n	800497c <HAL_ADC_ConfigChannel+0x188>
 800497a:	2300      	movs	r3, #0
 800497c:	461a      	mov	r2, r3
 800497e:	f7ff fb45 	bl	800400c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6919      	ldr	r1, [r3, #16]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	7e1b      	ldrb	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x1a4>
 8004992:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004996:	e000      	b.n	800499a <HAL_ADC_ConfigChannel+0x1a6>
 8004998:	2300      	movs	r3, #0
 800499a:	461a      	mov	r2, r3
 800499c:	f7ff fb1d 	bl	8003fda <LL_ADC_SetDataRightShift>
 80049a0:	e04c      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x248>
 80049a2:	bf00      	nop
 80049a4:	47ff0000 	.word	0x47ff0000
 80049a8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	069b      	lsls	r3, r3, #26
 80049bc:	429a      	cmp	r2, r3
 80049be:	d107      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80049ce:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	069b      	lsls	r3, r3, #26
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d107      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80049f2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	069b      	lsls	r3, r3, #26
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d107      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004a16:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	069b      	lsls	r3, r3, #26
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d107      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff fc0f 	bl	8004264 <LL_ADC_IsEnabled>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f040 81aa 	bne.w	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f7ff fb6e 	bl	800413c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4a87      	ldr	r2, [pc, #540]	@ (8004c84 <HAL_ADC_ConfigChannel+0x490>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	f040 809a 	bne.w	8004ba0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4984      	ldr	r1, [pc, #528]	@ (8004c88 <HAL_ADC_ConfigChannel+0x494>)
 8004a76:	428b      	cmp	r3, r1
 8004a78:	d147      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x316>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4983      	ldr	r1, [pc, #524]	@ (8004c8c <HAL_ADC_ConfigChannel+0x498>)
 8004a80:	428b      	cmp	r3, r1
 8004a82:	d040      	beq.n	8004b06 <HAL_ADC_ConfigChannel+0x312>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4981      	ldr	r1, [pc, #516]	@ (8004c90 <HAL_ADC_ConfigChannel+0x49c>)
 8004a8a:	428b      	cmp	r3, r1
 8004a8c:	d039      	beq.n	8004b02 <HAL_ADC_ConfigChannel+0x30e>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4980      	ldr	r1, [pc, #512]	@ (8004c94 <HAL_ADC_ConfigChannel+0x4a0>)
 8004a94:	428b      	cmp	r3, r1
 8004a96:	d032      	beq.n	8004afe <HAL_ADC_ConfigChannel+0x30a>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	497e      	ldr	r1, [pc, #504]	@ (8004c98 <HAL_ADC_ConfigChannel+0x4a4>)
 8004a9e:	428b      	cmp	r3, r1
 8004aa0:	d02b      	beq.n	8004afa <HAL_ADC_ConfigChannel+0x306>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	497d      	ldr	r1, [pc, #500]	@ (8004c9c <HAL_ADC_ConfigChannel+0x4a8>)
 8004aa8:	428b      	cmp	r3, r1
 8004aaa:	d024      	beq.n	8004af6 <HAL_ADC_ConfigChannel+0x302>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	497b      	ldr	r1, [pc, #492]	@ (8004ca0 <HAL_ADC_ConfigChannel+0x4ac>)
 8004ab2:	428b      	cmp	r3, r1
 8004ab4:	d01d      	beq.n	8004af2 <HAL_ADC_ConfigChannel+0x2fe>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	497a      	ldr	r1, [pc, #488]	@ (8004ca4 <HAL_ADC_ConfigChannel+0x4b0>)
 8004abc:	428b      	cmp	r3, r1
 8004abe:	d016      	beq.n	8004aee <HAL_ADC_ConfigChannel+0x2fa>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4978      	ldr	r1, [pc, #480]	@ (8004ca8 <HAL_ADC_ConfigChannel+0x4b4>)
 8004ac6:	428b      	cmp	r3, r1
 8004ac8:	d00f      	beq.n	8004aea <HAL_ADC_ConfigChannel+0x2f6>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4977      	ldr	r1, [pc, #476]	@ (8004cac <HAL_ADC_ConfigChannel+0x4b8>)
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	d008      	beq.n	8004ae6 <HAL_ADC_ConfigChannel+0x2f2>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4975      	ldr	r1, [pc, #468]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x4bc>)
 8004ada:	428b      	cmp	r3, r1
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x2ee>
 8004ade:	4b75      	ldr	r3, [pc, #468]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x4c0>)
 8004ae0:	e05a      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e058      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004ae6:	4b74      	ldr	r3, [pc, #464]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x4c4>)
 8004ae8:	e056      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004aea:	4b74      	ldr	r3, [pc, #464]	@ (8004cbc <HAL_ADC_ConfigChannel+0x4c8>)
 8004aec:	e054      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004aee:	4b6e      	ldr	r3, [pc, #440]	@ (8004ca8 <HAL_ADC_ConfigChannel+0x4b4>)
 8004af0:	e052      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004af2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca4 <HAL_ADC_ConfigChannel+0x4b0>)
 8004af4:	e050      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004af6:	4b72      	ldr	r3, [pc, #456]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x4cc>)
 8004af8:	e04e      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004afa:	4b72      	ldr	r3, [pc, #456]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x4d0>)
 8004afc:	e04c      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004afe:	4b72      	ldr	r3, [pc, #456]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x4d4>)
 8004b00:	e04a      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b02:	4b72      	ldr	r3, [pc, #456]	@ (8004ccc <HAL_ADC_ConfigChannel+0x4d8>)
 8004b04:	e048      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e046      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4970      	ldr	r1, [pc, #448]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x4dc>)
 8004b10:	428b      	cmp	r3, r1
 8004b12:	d140      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x3a2>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	495c      	ldr	r1, [pc, #368]	@ (8004c8c <HAL_ADC_ConfigChannel+0x498>)
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	d039      	beq.n	8004b92 <HAL_ADC_ConfigChannel+0x39e>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	495b      	ldr	r1, [pc, #364]	@ (8004c90 <HAL_ADC_ConfigChannel+0x49c>)
 8004b24:	428b      	cmp	r3, r1
 8004b26:	d032      	beq.n	8004b8e <HAL_ADC_ConfigChannel+0x39a>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4959      	ldr	r1, [pc, #356]	@ (8004c94 <HAL_ADC_ConfigChannel+0x4a0>)
 8004b2e:	428b      	cmp	r3, r1
 8004b30:	d02b      	beq.n	8004b8a <HAL_ADC_ConfigChannel+0x396>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4958      	ldr	r1, [pc, #352]	@ (8004c98 <HAL_ADC_ConfigChannel+0x4a4>)
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	d024      	beq.n	8004b86 <HAL_ADC_ConfigChannel+0x392>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4956      	ldr	r1, [pc, #344]	@ (8004c9c <HAL_ADC_ConfigChannel+0x4a8>)
 8004b42:	428b      	cmp	r3, r1
 8004b44:	d01d      	beq.n	8004b82 <HAL_ADC_ConfigChannel+0x38e>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4955      	ldr	r1, [pc, #340]	@ (8004ca0 <HAL_ADC_ConfigChannel+0x4ac>)
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	d016      	beq.n	8004b7e <HAL_ADC_ConfigChannel+0x38a>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4953      	ldr	r1, [pc, #332]	@ (8004ca4 <HAL_ADC_ConfigChannel+0x4b0>)
 8004b56:	428b      	cmp	r3, r1
 8004b58:	d00f      	beq.n	8004b7a <HAL_ADC_ConfigChannel+0x386>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4952      	ldr	r1, [pc, #328]	@ (8004ca8 <HAL_ADC_ConfigChannel+0x4b4>)
 8004b60:	428b      	cmp	r3, r1
 8004b62:	d008      	beq.n	8004b76 <HAL_ADC_ConfigChannel+0x382>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4951      	ldr	r1, [pc, #324]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x4bc>)
 8004b6a:	428b      	cmp	r3, r1
 8004b6c:	d101      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x37e>
 8004b6e:	4b51      	ldr	r3, [pc, #324]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x4c0>)
 8004b70:	e012      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b72:	2300      	movs	r3, #0
 8004b74:	e010      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b76:	4b51      	ldr	r3, [pc, #324]	@ (8004cbc <HAL_ADC_ConfigChannel+0x4c8>)
 8004b78:	e00e      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca8 <HAL_ADC_ConfigChannel+0x4b4>)
 8004b7c:	e00c      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b7e:	4b49      	ldr	r3, [pc, #292]	@ (8004ca4 <HAL_ADC_ConfigChannel+0x4b0>)
 8004b80:	e00a      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b82:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x4cc>)
 8004b84:	e008      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b86:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x4d0>)
 8004b88:	e006      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x4d4>)
 8004b8c:	e004      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004ccc <HAL_ADC_ConfigChannel+0x4d8>)
 8004b90:	e002      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3a4>
 8004b96:	2300      	movs	r3, #0
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7ff f9ca 	bl	8003f34 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f280 80fc 	bge.w	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a36      	ldr	r2, [pc, #216]	@ (8004c88 <HAL_ADC_ConfigChannel+0x494>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_ADC_ConfigChannel+0x3ca>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a45      	ldr	r2, [pc, #276]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x4dc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0x3ce>
 8004bbe:	4b45      	ldr	r3, [pc, #276]	@ (8004cd4 <HAL_ADC_ConfigChannel+0x4e0>)
 8004bc0:	e000      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x3d0>
 8004bc2:	4b45      	ldr	r3, [pc, #276]	@ (8004cd8 <HAL_ADC_ConfigChannel+0x4e4>)
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff f9a7 	bl	8003f18 <LL_ADC_GetCommonPathInternalCh>
 8004bca:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c88 <HAL_ADC_ConfigChannel+0x494>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_ADC_ConfigChannel+0x3ec>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3d      	ldr	r2, [pc, #244]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x4dc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10e      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x40a>
 8004be0:	4829      	ldr	r0, [pc, #164]	@ (8004c88 <HAL_ADC_ConfigChannel+0x494>)
 8004be2:	f7ff fb3f 	bl	8004264 <LL_ADC_IsEnabled>
 8004be6:	4604      	mov	r4, r0
 8004be8:	4839      	ldr	r0, [pc, #228]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x4dc>)
 8004bea:	f7ff fb3b 	bl	8004264 <LL_ADC_IsEnabled>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4323      	orrs	r3, r4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf0c      	ite	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	2300      	movne	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e008      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x41c>
 8004bfe:	4837      	ldr	r0, [pc, #220]	@ (8004cdc <HAL_ADC_ConfigChannel+0x4e8>)
 8004c00:	f7ff fb30 	bl	8004264 <LL_ADC_IsEnabled>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bf0c      	ite	eq
 8004c0a:	2301      	moveq	r3, #1
 8004c0c:	2300      	movne	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80b3 	beq.w	8004d7c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a31      	ldr	r2, [pc, #196]	@ (8004ce0 <HAL_ADC_ConfigChannel+0x4ec>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d165      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x4f8>
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d160      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8004cdc <HAL_ADC_ConfigChannel+0x4e8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	f040 80b6 	bne.w	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	@ (8004c88 <HAL_ADC_ConfigChannel+0x494>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_ADC_ConfigChannel+0x456>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a22      	ldr	r2, [pc, #136]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x4dc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d101      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x45a>
 8004c4a:	4a22      	ldr	r2, [pc, #136]	@ (8004cd4 <HAL_ADC_ConfigChannel+0x4e0>)
 8004c4c:	e000      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x45c>
 8004c4e:	4a22      	ldr	r2, [pc, #136]	@ (8004cd8 <HAL_ADC_ConfigChannel+0x4e4>)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7ff f94a 	bl	8003ef2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c5e:	4b21      	ldr	r3, [pc, #132]	@ (8004ce4 <HAL_ADC_ConfigChannel+0x4f0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	4a20      	ldr	r2, [pc, #128]	@ (8004ce8 <HAL_ADC_ConfigChannel+0x4f4>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004c72:	e002      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f9      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c80:	e08f      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
 8004c82:	bf00      	nop
 8004c84:	47ff0000 	.word	0x47ff0000
 8004c88:	40022000 	.word	0x40022000
 8004c8c:	04300002 	.word	0x04300002
 8004c90:	08600004 	.word	0x08600004
 8004c94:	0c900008 	.word	0x0c900008
 8004c98:	10c00010 	.word	0x10c00010
 8004c9c:	14f00020 	.word	0x14f00020
 8004ca0:	2a000400 	.word	0x2a000400
 8004ca4:	2e300800 	.word	0x2e300800
 8004ca8:	32601000 	.word	0x32601000
 8004cac:	43210000 	.word	0x43210000
 8004cb0:	4b840000 	.word	0x4b840000
 8004cb4:	4fb80000 	.word	0x4fb80000
 8004cb8:	47520000 	.word	0x47520000
 8004cbc:	36902000 	.word	0x36902000
 8004cc0:	25b00200 	.word	0x25b00200
 8004cc4:	21800100 	.word	0x21800100
 8004cc8:	1d500080 	.word	0x1d500080
 8004ccc:	19200040 	.word	0x19200040
 8004cd0:	40022100 	.word	0x40022100
 8004cd4:	40022300 	.word	0x40022300
 8004cd8:	58026300 	.word	0x58026300
 8004cdc:	58026000 	.word	0x58026000
 8004ce0:	cb840000 	.word	0xcb840000
 8004ce4:	24000240 	.word	0x24000240
 8004ce8:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a31      	ldr	r2, [pc, #196]	@ (8004db8 <HAL_ADC_ConfigChannel+0x5c4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d11e      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x540>
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d119      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2d      	ldr	r2, [pc, #180]	@ (8004dbc <HAL_ADC_ConfigChannel+0x5c8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d14b      	bne.n	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_ADC_ConfigChannel+0x52a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x5d0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x52e>
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004d20:	e000      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x530>
 8004d22:	4a2a      	ldr	r2, [pc, #168]	@ (8004dcc <HAL_ADC_ConfigChannel+0x5d8>)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f7ff f8e0 	bl	8003ef2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d32:	e036      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <HAL_ADC_ConfigChannel+0x5dc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d131      	bne.n	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d12c      	bne.n	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dbc <HAL_ADC_ConfigChannel+0x5c8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d127      	bne.n	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_ADC_ConfigChannel+0x572>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x5d0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d101      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x576>
 8004d66:	4a18      	ldr	r2, [pc, #96]	@ (8004dc8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004d68:	e000      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x578>
 8004d6a:	4a18      	ldr	r2, [pc, #96]	@ (8004dcc <HAL_ADC_ConfigChannel+0x5d8>)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7ff f8bc 	bl	8003ef2 <LL_ADC_SetCommonPathInternalCh>
 8004d7a:	e012      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004d8e:	e008      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004daa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3734      	adds	r7, #52	@ 0x34
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd90      	pop	{r4, r7, pc}
 8004db6:	bf00      	nop
 8004db8:	c7520000 	.word	0xc7520000
 8004dbc:	58026000 	.word	0x58026000
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	40022100 	.word	0x40022100
 8004dc8:	40022300 	.word	0x40022300
 8004dcc:	58026300 	.word	0x58026300
 8004dd0:	cfb80000 	.word	0xcfb80000

08004dd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff fa3f 	bl	8004264 <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d16e      	bne.n	8004eca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	4b38      	ldr	r3, [pc, #224]	@ (8004ed4 <ADC_Enable+0x100>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfe:	f043 0210 	orr.w	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e05a      	b.n	8004ecc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fa0e 	bl	800423c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e20:	f7ff f818 	bl	8003e54 <HAL_GetTick>
 8004e24:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed8 <ADC_Enable+0x104>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <ADC_Enable+0x66>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a29      	ldr	r2, [pc, #164]	@ (8004edc <ADC_Enable+0x108>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <ADC_Enable+0x6a>
 8004e3a:	4b29      	ldr	r3, [pc, #164]	@ (8004ee0 <ADC_Enable+0x10c>)
 8004e3c:	e000      	b.n	8004e40 <ADC_Enable+0x6c>
 8004e3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ee4 <ADC_Enable+0x110>)
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff f99f 	bl	8004184 <LL_ADC_GetMultimode>
 8004e46:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a23      	ldr	r2, [pc, #140]	@ (8004edc <ADC_Enable+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d002      	beq.n	8004e58 <ADC_Enable+0x84>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	e000      	b.n	8004e5a <ADC_Enable+0x86>
 8004e58:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed8 <ADC_Enable+0x104>)
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d02c      	beq.n	8004ebc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d130      	bne.n	8004eca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e68:	e028      	b.n	8004ebc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff f9f8 	bl	8004264 <LL_ADC_IsEnabled>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d104      	bne.n	8004e84 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff f9dc 	bl	800423c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e84:	f7fe ffe6 	bl	8003e54 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d914      	bls.n	8004ebc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d00d      	beq.n	8004ebc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	f043 0210 	orr.w	r2, r3, #16
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d1cf      	bne.n	8004e6a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	8000003f 	.word	0x8000003f
 8004ed8:	40022000 	.word	0x40022000
 8004edc:	40022100 	.word	0x40022100
 8004ee0:	40022300 	.word	0x40022300
 8004ee4:	58026300 	.word	0x58026300

08004ee8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d14b      	bne.n	8004f9a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d021      	beq.n	8004f60 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff f88e 	bl	8004042 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d032      	beq.n	8004f92 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d12b      	bne.n	8004f92 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d11f      	bne.n	8004f92 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f5e:	e018      	b.n	8004f92 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d111      	bne.n	8004f92 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8a:	f043 0201 	orr.w	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7fc fdd4 	bl	8001b40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f98:	e00e      	b.n	8004fb8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff fc1a 	bl	80047e0 <HAL_ADC_ErrorCallback>
}
 8004fac:	e004      	b.n	8004fb8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff fbfc 	bl	80047cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	f043 0204 	orr.w	r2, r3, #4
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff fbec 	bl	80047e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7a      	ldr	r2, [pc, #488]	@ (8005208 <ADC_ConfigureBoostMode+0x1f8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <ADC_ConfigureBoostMode+0x1c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a79      	ldr	r2, [pc, #484]	@ (800520c <ADC_ConfigureBoostMode+0x1fc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d109      	bne.n	8005040 <ADC_ConfigureBoostMode+0x30>
 800502c:	4b78      	ldr	r3, [pc, #480]	@ (8005210 <ADC_ConfigureBoostMode+0x200>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005034:	2b00      	cmp	r3, #0
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e008      	b.n	8005052 <ADC_ConfigureBoostMode+0x42>
 8005040:	4b74      	ldr	r3, [pc, #464]	@ (8005214 <ADC_ConfigureBoostMode+0x204>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01c      	beq.n	8005090 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005056:	f00a ff8f 	bl	800ff78 <HAL_RCC_GetHCLKFreq>
 800505a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005064:	d010      	beq.n	8005088 <ADC_ConfigureBoostMode+0x78>
 8005066:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800506a:	d873      	bhi.n	8005154 <ADC_ConfigureBoostMode+0x144>
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d002      	beq.n	8005078 <ADC_ConfigureBoostMode+0x68>
 8005072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005076:	d16d      	bne.n	8005154 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	60fb      	str	r3, [r7, #12]
        break;
 8005086:	e068      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	089b      	lsrs	r3, r3, #2
 800508c:	60fb      	str	r3, [r7, #12]
        break;
 800508e:	e064      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005090:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	f00c f9d4 	bl	8011444 <HAL_RCCEx_GetPeriphCLKFreq>
 800509c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80050a6:	d051      	beq.n	800514c <ADC_ConfigureBoostMode+0x13c>
 80050a8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80050ac:	d854      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 80050ae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80050b2:	d047      	beq.n	8005144 <ADC_ConfigureBoostMode+0x134>
 80050b4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80050b8:	d84e      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 80050ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80050be:	d03d      	beq.n	800513c <ADC_ConfigureBoostMode+0x12c>
 80050c0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80050c4:	d848      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 80050c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050ca:	d033      	beq.n	8005134 <ADC_ConfigureBoostMode+0x124>
 80050cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050d0:	d842      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 80050d2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80050d6:	d029      	beq.n	800512c <ADC_ConfigureBoostMode+0x11c>
 80050d8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80050dc:	d83c      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 80050de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80050e2:	d01a      	beq.n	800511a <ADC_ConfigureBoostMode+0x10a>
 80050e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80050e8:	d836      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 80050ea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80050ee:	d014      	beq.n	800511a <ADC_ConfigureBoostMode+0x10a>
 80050f0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80050f4:	d830      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 80050f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050fa:	d00e      	beq.n	800511a <ADC_ConfigureBoostMode+0x10a>
 80050fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005100:	d82a      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 8005102:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005106:	d008      	beq.n	800511a <ADC_ConfigureBoostMode+0x10a>
 8005108:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800510c:	d824      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x148>
 800510e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005112:	d002      	beq.n	800511a <ADC_ConfigureBoostMode+0x10a>
 8005114:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005118:	d11e      	bne.n	8005158 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	0c9b      	lsrs	r3, r3, #18
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	60fb      	str	r3, [r7, #12]
        break;
 800512a:	e016      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	60fb      	str	r3, [r7, #12]
        break;
 8005132:	e012      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	60fb      	str	r3, [r7, #12]
        break;
 800513a:	e00e      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	60fb      	str	r3, [r7, #12]
        break;
 8005142:	e00a      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	09db      	lsrs	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
        break;
 800514a:	e006      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	60fb      	str	r3, [r7, #12]
        break;
 8005152:	e002      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005154:	bf00      	nop
 8005156:	e000      	b.n	800515a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005158:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800515a:	f7fe feab 	bl	8003eb4 <HAL_GetREVID>
 800515e:	4603      	mov	r3, r0
 8005160:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005164:	4293      	cmp	r3, r2
 8005166:	d815      	bhi.n	8005194 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4a2b      	ldr	r2, [pc, #172]	@ (8005218 <ADC_ConfigureBoostMode+0x208>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d908      	bls.n	8005182 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800517e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005180:	e03e      	b.n	8005200 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005190:	609a      	str	r2, [r3, #8]
}
 8005192:	e035      	b.n	8005200 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a1f      	ldr	r2, [pc, #124]	@ (800521c <ADC_ConfigureBoostMode+0x20c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d808      	bhi.n	80051b4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80051b0:	609a      	str	r2, [r3, #8]
}
 80051b2:	e025      	b.n	8005200 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005220 <ADC_ConfigureBoostMode+0x210>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d80a      	bhi.n	80051d2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051ce:	609a      	str	r2, [r3, #8]
}
 80051d0:	e016      	b.n	8005200 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a13      	ldr	r2, [pc, #76]	@ (8005224 <ADC_ConfigureBoostMode+0x214>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d80a      	bhi.n	80051f0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ec:	609a      	str	r2, [r3, #8]
}
 80051ee:	e007      	b.n	8005200 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40022000 	.word	0x40022000
 800520c:	40022100 	.word	0x40022100
 8005210:	40022300 	.word	0x40022300
 8005214:	58026300 	.word	0x58026300
 8005218:	01312d00 	.word	0x01312d00
 800521c:	005f5e10 	.word	0x005f5e10
 8005220:	00bebc20 	.word	0x00bebc20
 8005224:	017d7840 	.word	0x017d7840

08005228 <LL_ADC_IsEnabled>:
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <LL_ADC_IsEnabled+0x18>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <LL_ADC_IsEnabled+0x1a>
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <LL_ADC_REG_IsConversionOngoing>:
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b04      	cmp	r3, #4
 8005260:	d101      	bne.n	8005266 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b09f      	sub	sp, #124	@ 0x7c
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800528e:	2302      	movs	r3, #2
 8005290:	e0be      	b.n	8005410 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800529a:	2300      	movs	r3, #0
 800529c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800529e:	2300      	movs	r3, #0
 80052a0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a5c      	ldr	r2, [pc, #368]	@ (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d102      	bne.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052ac:	4b5b      	ldr	r3, [pc, #364]	@ (800541c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	e001      	b.n	80052b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c0:	f043 0220 	orr.w	r2, r3, #32
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e09d      	b.n	8005410 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ffb9 	bl	800524e <LL_ADC_REG_IsConversionOngoing>
 80052dc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ffb3 	bl	800524e <LL_ADC_REG_IsConversionOngoing>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d17f      	bne.n	80053ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80052ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d17c      	bne.n	80053ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a47      	ldr	r2, [pc, #284]	@ (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a46      	ldr	r2, [pc, #280]	@ (800541c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005308:	4b45      	ldr	r3, [pc, #276]	@ (8005420 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800530a:	e000      	b.n	800530e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800530c:	4b45      	ldr	r3, [pc, #276]	@ (8005424 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800530e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d039      	beq.n	800538c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	431a      	orrs	r2, r3
 8005326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005328:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a3a      	ldr	r2, [pc, #232]	@ (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a38      	ldr	r2, [pc, #224]	@ (800541c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10e      	bne.n	800535c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800533e:	4836      	ldr	r0, [pc, #216]	@ (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005340:	f7ff ff72 	bl	8005228 <LL_ADC_IsEnabled>
 8005344:	4604      	mov	r4, r0
 8005346:	4835      	ldr	r0, [pc, #212]	@ (800541c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005348:	f7ff ff6e 	bl	8005228 <LL_ADC_IsEnabled>
 800534c:	4603      	mov	r3, r0
 800534e:	4323      	orrs	r3, r4
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	e008      	b.n	800536e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800535c:	4832      	ldr	r0, [pc, #200]	@ (8005428 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800535e:	f7ff ff63 	bl	8005228 <LL_ADC_IsEnabled>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d047      	beq.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005378:	4013      	ands	r3, r2
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	6811      	ldr	r1, [r2, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	6892      	ldr	r2, [r2, #8]
 8005382:	430a      	orrs	r2, r1
 8005384:	431a      	orrs	r2, r3
 8005386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005388:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800538a:	e03a      	b.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800538c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005396:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1e      	ldr	r2, [pc, #120]	@ (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1d      	ldr	r2, [pc, #116]	@ (800541c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d10e      	bne.n	80053ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80053ac:	481a      	ldr	r0, [pc, #104]	@ (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053ae:	f7ff ff3b 	bl	8005228 <LL_ADC_IsEnabled>
 80053b2:	4604      	mov	r4, r0
 80053b4:	4819      	ldr	r0, [pc, #100]	@ (800541c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053b6:	f7ff ff37 	bl	8005228 <LL_ADC_IsEnabled>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4323      	orrs	r3, r4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e008      	b.n	80053dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80053ca:	4817      	ldr	r0, [pc, #92]	@ (8005428 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80053cc:	f7ff ff2c 	bl	8005228 <LL_ADC_IsEnabled>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d010      	beq.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80053e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	4b11      	ldr	r3, [pc, #68]	@ (800542c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053ec:	e009      	b.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005400:	e000      	b.n	8005404 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005402:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800540c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005410:	4618      	mov	r0, r3
 8005412:	377c      	adds	r7, #124	@ 0x7c
 8005414:	46bd      	mov	sp, r7
 8005416:	bd90      	pop	{r4, r7, pc}
 8005418:	40022000 	.word	0x40022000
 800541c:	40022100 	.word	0x40022100
 8005420:	40022300 	.word	0x40022300
 8005424:	58026300 	.word	0x58026300
 8005428:	58026000 	.word	0x58026000
 800542c:	fffff0e0 	.word	0xfffff0e0

08005430 <__NVIC_SetPriorityGrouping>:
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005440:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <__NVIC_SetPriorityGrouping+0x40>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005458:	4b06      	ldr	r3, [pc, #24]	@ (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 800545a:	4313      	orrs	r3, r2
 800545c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800545e:	4a04      	ldr	r2, [pc, #16]	@ (8005470 <__NVIC_SetPriorityGrouping+0x40>)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	60d3      	str	r3, [r2, #12]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	e000ed00 	.word	0xe000ed00
 8005474:	05fa0000 	.word	0x05fa0000

08005478 <__NVIC_GetPriorityGrouping>:
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800547c:	4b04      	ldr	r3, [pc, #16]	@ (8005490 <__NVIC_GetPriorityGrouping+0x18>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 0307 	and.w	r3, r3, #7
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000ed00 	.word	0xe000ed00

08005494 <__NVIC_EnableIRQ>:
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800549e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	db0b      	blt.n	80054be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	f003 021f 	and.w	r2, r3, #31
 80054ac:	4907      	ldr	r1, [pc, #28]	@ (80054cc <__NVIC_EnableIRQ+0x38>)
 80054ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2001      	movs	r0, #1
 80054b6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	e000e100 	.word	0xe000e100

080054d0 <__NVIC_SetPriority>:
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	6039      	str	r1, [r7, #0]
 80054da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	db0a      	blt.n	80054fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	490c      	ldr	r1, [pc, #48]	@ (800551c <__NVIC_SetPriority+0x4c>)
 80054ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ee:	0112      	lsls	r2, r2, #4
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	440b      	add	r3, r1
 80054f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80054f8:	e00a      	b.n	8005510 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	4908      	ldr	r1, [pc, #32]	@ (8005520 <__NVIC_SetPriority+0x50>)
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	3b04      	subs	r3, #4
 8005508:	0112      	lsls	r2, r2, #4
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	440b      	add	r3, r1
 800550e:	761a      	strb	r2, [r3, #24]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	e000e100 	.word	0xe000e100
 8005520:	e000ed00 	.word	0xe000ed00

08005524 <NVIC_EncodePriority>:
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	@ 0x24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f1c3 0307 	rsb	r3, r3, #7
 800553e:	2b04      	cmp	r3, #4
 8005540:	bf28      	it	cs
 8005542:	2304      	movcs	r3, #4
 8005544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3304      	adds	r3, #4
 800554a:	2b06      	cmp	r3, #6
 800554c:	d902      	bls.n	8005554 <NVIC_EncodePriority+0x30>
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	3b03      	subs	r3, #3
 8005552:	e000      	b.n	8005556 <NVIC_EncodePriority+0x32>
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005558:	f04f 32ff 	mov.w	r2, #4294967295
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43da      	mvns	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	401a      	ands	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800556c:	f04f 31ff 	mov.w	r1, #4294967295
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	43d9      	mvns	r1, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800557c:	4313      	orrs	r3, r2
}
 800557e:	4618      	mov	r0, r3
 8005580:	3724      	adds	r7, #36	@ 0x24
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800559c:	d301      	bcc.n	80055a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800559e:	2301      	movs	r3, #1
 80055a0:	e00f      	b.n	80055c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055a2:	4a0a      	ldr	r2, [pc, #40]	@ (80055cc <SysTick_Config+0x40>)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055aa:	210f      	movs	r1, #15
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	f7ff ff8e 	bl	80054d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b4:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <SysTick_Config+0x40>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055ba:	4b04      	ldr	r3, [pc, #16]	@ (80055cc <SysTick_Config+0x40>)
 80055bc:	2207      	movs	r2, #7
 80055be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	e000e010 	.word	0xe000e010

080055d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ff29 	bl	8005430 <__NVIC_SetPriorityGrouping>
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	4603      	mov	r3, r0
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055f4:	f7ff ff40 	bl	8005478 <__NVIC_GetPriorityGrouping>
 80055f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	6978      	ldr	r0, [r7, #20]
 8005600:	f7ff ff90 	bl	8005524 <NVIC_EncodePriority>
 8005604:	4602      	mov	r2, r0
 8005606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ff5f 	bl	80054d0 <__NVIC_SetPriority>
}
 8005612:	bf00      	nop
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	4603      	mov	r3, r0
 8005622:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff33 	bl	8005494 <__NVIC_EnableIRQ>
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ffa4 	bl	800558c <SysTick_Config>
 8005644:	4603      	mov	r3, r0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005654:	f3bf 8f5f 	dmb	sy
}
 8005658:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800565a:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <HAL_MPU_Disable+0x28>)
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	4a06      	ldr	r2, [pc, #24]	@ (8005678 <HAL_MPU_Disable+0x28>)
 8005660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005664:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005666:	4b05      	ldr	r3, [pc, #20]	@ (800567c <HAL_MPU_Disable+0x2c>)
 8005668:	2200      	movs	r2, #0
 800566a:	605a      	str	r2, [r3, #4]
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	e000ed00 	.word	0xe000ed00
 800567c:	e000ed90 	.word	0xe000ed90

08005680 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005688:	4a0b      	ldr	r2, [pc, #44]	@ (80056b8 <HAL_MPU_Enable+0x38>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005692:	4b0a      	ldr	r3, [pc, #40]	@ (80056bc <HAL_MPU_Enable+0x3c>)
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	4a09      	ldr	r2, [pc, #36]	@ (80056bc <HAL_MPU_Enable+0x3c>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800569e:	f3bf 8f4f 	dsb	sy
}
 80056a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056a4:	f3bf 8f6f 	isb	sy
}
 80056a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000ed90 	.word	0xe000ed90
 80056bc:	e000ed00 	.word	0xe000ed00

080056c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	785a      	ldrb	r2, [r3, #1]
 80056cc:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <HAL_MPU_ConfigRegion+0x7c>)
 80056ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80056d0:	4b1a      	ldr	r3, [pc, #104]	@ (800573c <HAL_MPU_ConfigRegion+0x7c>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	4a19      	ldr	r2, [pc, #100]	@ (800573c <HAL_MPU_ConfigRegion+0x7c>)
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80056dc:	4a17      	ldr	r2, [pc, #92]	@ (800573c <HAL_MPU_ConfigRegion+0x7c>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	7b1b      	ldrb	r3, [r3, #12]
 80056e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	7adb      	ldrb	r3, [r3, #11]
 80056ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	7a9b      	ldrb	r3, [r3, #10]
 80056f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80056f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7b5b      	ldrb	r3, [r3, #13]
 80056fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7b9b      	ldrb	r3, [r3, #14]
 8005706:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7bdb      	ldrb	r3, [r3, #15]
 800570e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7a5b      	ldrb	r3, [r3, #9]
 8005716:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	7a1b      	ldrb	r3, [r3, #8]
 800571e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005720:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	7812      	ldrb	r2, [r2, #0]
 8005726:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005728:	4a04      	ldr	r2, [pc, #16]	@ (800573c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800572a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800572c:	6113      	str	r3, [r2, #16]
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000ed90 	.word	0xe000ed90

08005740 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005748:	f7fe fb84 	bl	8003e54 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e316      	b.n	8005d86 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a66      	ldr	r2, [pc, #408]	@ (80058f8 <HAL_DMA_Init+0x1b8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d04a      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a65      	ldr	r2, [pc, #404]	@ (80058fc <HAL_DMA_Init+0x1bc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d045      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a63      	ldr	r2, [pc, #396]	@ (8005900 <HAL_DMA_Init+0x1c0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d040      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a62      	ldr	r2, [pc, #392]	@ (8005904 <HAL_DMA_Init+0x1c4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d03b      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a60      	ldr	r2, [pc, #384]	@ (8005908 <HAL_DMA_Init+0x1c8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d036      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a5f      	ldr	r2, [pc, #380]	@ (800590c <HAL_DMA_Init+0x1cc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d031      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a5d      	ldr	r2, [pc, #372]	@ (8005910 <HAL_DMA_Init+0x1d0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d02c      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a5c      	ldr	r2, [pc, #368]	@ (8005914 <HAL_DMA_Init+0x1d4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d027      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005918 <HAL_DMA_Init+0x1d8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d022      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a59      	ldr	r2, [pc, #356]	@ (800591c <HAL_DMA_Init+0x1dc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d01d      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a57      	ldr	r2, [pc, #348]	@ (8005920 <HAL_DMA_Init+0x1e0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d018      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a56      	ldr	r2, [pc, #344]	@ (8005924 <HAL_DMA_Init+0x1e4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a54      	ldr	r2, [pc, #336]	@ (8005928 <HAL_DMA_Init+0x1e8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00e      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a53      	ldr	r2, [pc, #332]	@ (800592c <HAL_DMA_Init+0x1ec>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a51      	ldr	r2, [pc, #324]	@ (8005930 <HAL_DMA_Init+0x1f0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_DMA_Init+0xb8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a50      	ldr	r2, [pc, #320]	@ (8005934 <HAL_DMA_Init+0x1f4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d101      	bne.n	80057fc <HAL_DMA_Init+0xbc>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <HAL_DMA_Init+0xbe>
 80057fc:	2300      	movs	r3, #0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 813b 	beq.w	8005a7a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a37      	ldr	r2, [pc, #220]	@ (80058f8 <HAL_DMA_Init+0x1b8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d04a      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a36      	ldr	r2, [pc, #216]	@ (80058fc <HAL_DMA_Init+0x1bc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d045      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a34      	ldr	r2, [pc, #208]	@ (8005900 <HAL_DMA_Init+0x1c0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d040      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a33      	ldr	r2, [pc, #204]	@ (8005904 <HAL_DMA_Init+0x1c4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d03b      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a31      	ldr	r2, [pc, #196]	@ (8005908 <HAL_DMA_Init+0x1c8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d036      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a30      	ldr	r2, [pc, #192]	@ (800590c <HAL_DMA_Init+0x1cc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d031      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2e      	ldr	r2, [pc, #184]	@ (8005910 <HAL_DMA_Init+0x1d0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d02c      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2d      	ldr	r2, [pc, #180]	@ (8005914 <HAL_DMA_Init+0x1d4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d027      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2b      	ldr	r2, [pc, #172]	@ (8005918 <HAL_DMA_Init+0x1d8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d022      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2a      	ldr	r2, [pc, #168]	@ (800591c <HAL_DMA_Init+0x1dc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d01d      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a28      	ldr	r2, [pc, #160]	@ (8005920 <HAL_DMA_Init+0x1e0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d018      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a27      	ldr	r2, [pc, #156]	@ (8005924 <HAL_DMA_Init+0x1e4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a25      	ldr	r2, [pc, #148]	@ (8005928 <HAL_DMA_Init+0x1e8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00e      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a24      	ldr	r2, [pc, #144]	@ (800592c <HAL_DMA_Init+0x1ec>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d009      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a22      	ldr	r2, [pc, #136]	@ (8005930 <HAL_DMA_Init+0x1f0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_DMA_Init+0x174>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a21      	ldr	r2, [pc, #132]	@ (8005934 <HAL_DMA_Init+0x1f4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d108      	bne.n	80058c6 <HAL_DMA_Init+0x186>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e007      	b.n	80058d6 <HAL_DMA_Init+0x196>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058d6:	e02f      	b.n	8005938 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058d8:	f7fe fabc 	bl	8003e54 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d928      	bls.n	8005938 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2203      	movs	r2, #3
 80058f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e246      	b.n	8005d86 <HAL_DMA_Init+0x646>
 80058f8:	40020010 	.word	0x40020010
 80058fc:	40020028 	.word	0x40020028
 8005900:	40020040 	.word	0x40020040
 8005904:	40020058 	.word	0x40020058
 8005908:	40020070 	.word	0x40020070
 800590c:	40020088 	.word	0x40020088
 8005910:	400200a0 	.word	0x400200a0
 8005914:	400200b8 	.word	0x400200b8
 8005918:	40020410 	.word	0x40020410
 800591c:	40020428 	.word	0x40020428
 8005920:	40020440 	.word	0x40020440
 8005924:	40020458 	.word	0x40020458
 8005928:	40020470 	.word	0x40020470
 800592c:	40020488 	.word	0x40020488
 8005930:	400204a0 	.word	0x400204a0
 8005934:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1c8      	bne.n	80058d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4b83      	ldr	r3, [pc, #524]	@ (8005b60 <HAL_DMA_Init+0x420>)
 8005952:	4013      	ands	r3, r2
 8005954:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800595e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800596a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005976:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	2b04      	cmp	r3, #4
 800598a:	d107      	bne.n	800599c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	4313      	orrs	r3, r2
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800599c:	4b71      	ldr	r3, [pc, #452]	@ (8005b64 <HAL_DMA_Init+0x424>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b71      	ldr	r3, [pc, #452]	@ (8005b68 <HAL_DMA_Init+0x428>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a8:	d328      	bcc.n	80059fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b28      	cmp	r3, #40	@ 0x28
 80059b0:	d903      	bls.n	80059ba <HAL_DMA_Init+0x27a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80059b8:	d917      	bls.n	80059ea <HAL_DMA_Init+0x2aa>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b3e      	cmp	r3, #62	@ 0x3e
 80059c0:	d903      	bls.n	80059ca <HAL_DMA_Init+0x28a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b42      	cmp	r3, #66	@ 0x42
 80059c8:	d90f      	bls.n	80059ea <HAL_DMA_Init+0x2aa>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b46      	cmp	r3, #70	@ 0x46
 80059d0:	d903      	bls.n	80059da <HAL_DMA_Init+0x29a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b48      	cmp	r3, #72	@ 0x48
 80059d8:	d907      	bls.n	80059ea <HAL_DMA_Init+0x2aa>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b4e      	cmp	r3, #78	@ 0x4e
 80059e0:	d905      	bls.n	80059ee <HAL_DMA_Init+0x2ae>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b52      	cmp	r3, #82	@ 0x52
 80059e8:	d801      	bhi.n	80059ee <HAL_DMA_Init+0x2ae>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_DMA_Init+0x2b0>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d117      	bne.n	8005a56 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f002 fb4d 	bl	80080d8 <DMA_CheckFifoParam>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2240      	movs	r2, #64	@ 0x40
 8005a48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e197      	b.n	8005d86 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f002 fa88 	bl	8007f74 <DMA_CalcBaseAndBitshift>
 8005a64:	4603      	mov	r3, r0
 8005a66:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	223f      	movs	r2, #63	@ 0x3f
 8005a72:	409a      	lsls	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	e0cd      	b.n	8005c16 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8005b6c <HAL_DMA_Init+0x42c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d022      	beq.n	8005aca <HAL_DMA_Init+0x38a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a39      	ldr	r2, [pc, #228]	@ (8005b70 <HAL_DMA_Init+0x430>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01d      	beq.n	8005aca <HAL_DMA_Init+0x38a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a38      	ldr	r2, [pc, #224]	@ (8005b74 <HAL_DMA_Init+0x434>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d018      	beq.n	8005aca <HAL_DMA_Init+0x38a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a36      	ldr	r2, [pc, #216]	@ (8005b78 <HAL_DMA_Init+0x438>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <HAL_DMA_Init+0x38a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a35      	ldr	r2, [pc, #212]	@ (8005b7c <HAL_DMA_Init+0x43c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00e      	beq.n	8005aca <HAL_DMA_Init+0x38a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a33      	ldr	r2, [pc, #204]	@ (8005b80 <HAL_DMA_Init+0x440>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_DMA_Init+0x38a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a32      	ldr	r2, [pc, #200]	@ (8005b84 <HAL_DMA_Init+0x444>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d004      	beq.n	8005aca <HAL_DMA_Init+0x38a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a30      	ldr	r2, [pc, #192]	@ (8005b88 <HAL_DMA_Init+0x448>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <HAL_DMA_Init+0x38e>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <HAL_DMA_Init+0x390>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8097 	beq.w	8005c04 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a24      	ldr	r2, [pc, #144]	@ (8005b6c <HAL_DMA_Init+0x42c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d021      	beq.n	8005b24 <HAL_DMA_Init+0x3e4>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a22      	ldr	r2, [pc, #136]	@ (8005b70 <HAL_DMA_Init+0x430>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01c      	beq.n	8005b24 <HAL_DMA_Init+0x3e4>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a21      	ldr	r2, [pc, #132]	@ (8005b74 <HAL_DMA_Init+0x434>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d017      	beq.n	8005b24 <HAL_DMA_Init+0x3e4>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b78 <HAL_DMA_Init+0x438>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d012      	beq.n	8005b24 <HAL_DMA_Init+0x3e4>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1e      	ldr	r2, [pc, #120]	@ (8005b7c <HAL_DMA_Init+0x43c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00d      	beq.n	8005b24 <HAL_DMA_Init+0x3e4>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b80 <HAL_DMA_Init+0x440>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d008      	beq.n	8005b24 <HAL_DMA_Init+0x3e4>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1b      	ldr	r2, [pc, #108]	@ (8005b84 <HAL_DMA_Init+0x444>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <HAL_DMA_Init+0x3e4>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a19      	ldr	r2, [pc, #100]	@ (8005b88 <HAL_DMA_Init+0x448>)
 8005b22:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4b13      	ldr	r3, [pc, #76]	@ (8005b8c <HAL_DMA_Init+0x44c>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d021      	beq.n	8005b90 <HAL_DMA_Init+0x450>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b80      	cmp	r3, #128	@ 0x80
 8005b52:	d102      	bne.n	8005b5a <HAL_DMA_Init+0x41a>
 8005b54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b58:	e01b      	b.n	8005b92 <HAL_DMA_Init+0x452>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e019      	b.n	8005b92 <HAL_DMA_Init+0x452>
 8005b5e:	bf00      	nop
 8005b60:	fe10803f 	.word	0xfe10803f
 8005b64:	5c001000 	.word	0x5c001000
 8005b68:	ffff0000 	.word	0xffff0000
 8005b6c:	58025408 	.word	0x58025408
 8005b70:	5802541c 	.word	0x5802541c
 8005b74:	58025430 	.word	0x58025430
 8005b78:	58025444 	.word	0x58025444
 8005b7c:	58025458 	.word	0x58025458
 8005b80:	5802546c 	.word	0x5802546c
 8005b84:	58025480 	.word	0x58025480
 8005b88:	58025494 	.word	0x58025494
 8005b8c:	fffe000f 	.word	0xfffe000f
 8005b90:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68d2      	ldr	r2, [r2, #12]
 8005b96:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005bc0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8005d90 <HAL_DMA_Init+0x650>)
 8005bd8:	4413      	add	r3, r2
 8005bda:	4a6e      	ldr	r2, [pc, #440]	@ (8005d94 <HAL_DMA_Init+0x654>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	091b      	lsrs	r3, r3, #4
 8005be2:	009a      	lsls	r2, r3, #2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f002 f9c3 	bl	8007f74 <DMA_CalcBaseAndBitshift>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e008      	b.n	8005c16 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e0b7      	b.n	8005d86 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8005d98 <HAL_DMA_Init+0x658>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d072      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a5d      	ldr	r2, [pc, #372]	@ (8005d9c <HAL_DMA_Init+0x65c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d06d      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8005da0 <HAL_DMA_Init+0x660>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d068      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a5a      	ldr	r2, [pc, #360]	@ (8005da4 <HAL_DMA_Init+0x664>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d063      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a59      	ldr	r2, [pc, #356]	@ (8005da8 <HAL_DMA_Init+0x668>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d05e      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a57      	ldr	r2, [pc, #348]	@ (8005dac <HAL_DMA_Init+0x66c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d059      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a56      	ldr	r2, [pc, #344]	@ (8005db0 <HAL_DMA_Init+0x670>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d054      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a54      	ldr	r2, [pc, #336]	@ (8005db4 <HAL_DMA_Init+0x674>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d04f      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a53      	ldr	r2, [pc, #332]	@ (8005db8 <HAL_DMA_Init+0x678>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d04a      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a51      	ldr	r2, [pc, #324]	@ (8005dbc <HAL_DMA_Init+0x67c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d045      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a50      	ldr	r2, [pc, #320]	@ (8005dc0 <HAL_DMA_Init+0x680>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d040      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a4e      	ldr	r2, [pc, #312]	@ (8005dc4 <HAL_DMA_Init+0x684>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d03b      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a4d      	ldr	r2, [pc, #308]	@ (8005dc8 <HAL_DMA_Init+0x688>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d036      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8005dcc <HAL_DMA_Init+0x68c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d031      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8005dd0 <HAL_DMA_Init+0x690>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d02c      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a48      	ldr	r2, [pc, #288]	@ (8005dd4 <HAL_DMA_Init+0x694>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d027      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a47      	ldr	r2, [pc, #284]	@ (8005dd8 <HAL_DMA_Init+0x698>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a45      	ldr	r2, [pc, #276]	@ (8005ddc <HAL_DMA_Init+0x69c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01d      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a44      	ldr	r2, [pc, #272]	@ (8005de0 <HAL_DMA_Init+0x6a0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a42      	ldr	r2, [pc, #264]	@ (8005de4 <HAL_DMA_Init+0x6a4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a41      	ldr	r2, [pc, #260]	@ (8005de8 <HAL_DMA_Init+0x6a8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3f      	ldr	r2, [pc, #252]	@ (8005dec <HAL_DMA_Init+0x6ac>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8005df0 <HAL_DMA_Init+0x6b0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_DMA_Init+0x5c6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a3c      	ldr	r2, [pc, #240]	@ (8005df4 <HAL_DMA_Init+0x6b4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d101      	bne.n	8005d0a <HAL_DMA_Init+0x5ca>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <HAL_DMA_Init+0x5cc>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d032      	beq.n	8005d76 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f002 fa5d 	bl	80081d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b80      	cmp	r3, #128	@ 0x80
 8005d1c:	d102      	bne.n	8005d24 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d38:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d010      	beq.n	8005d64 <HAL_DMA_Init+0x624>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d80c      	bhi.n	8005d64 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f002 fada 	bl	8008304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d60:	605a      	str	r2, [r3, #4]
 8005d62:	e008      	b.n	8005d76 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	a7fdabf8 	.word	0xa7fdabf8
 8005d94:	cccccccd 	.word	0xcccccccd
 8005d98:	40020010 	.word	0x40020010
 8005d9c:	40020028 	.word	0x40020028
 8005da0:	40020040 	.word	0x40020040
 8005da4:	40020058 	.word	0x40020058
 8005da8:	40020070 	.word	0x40020070
 8005dac:	40020088 	.word	0x40020088
 8005db0:	400200a0 	.word	0x400200a0
 8005db4:	400200b8 	.word	0x400200b8
 8005db8:	40020410 	.word	0x40020410
 8005dbc:	40020428 	.word	0x40020428
 8005dc0:	40020440 	.word	0x40020440
 8005dc4:	40020458 	.word	0x40020458
 8005dc8:	40020470 	.word	0x40020470
 8005dcc:	40020488 	.word	0x40020488
 8005dd0:	400204a0 	.word	0x400204a0
 8005dd4:	400204b8 	.word	0x400204b8
 8005dd8:	58025408 	.word	0x58025408
 8005ddc:	5802541c 	.word	0x5802541c
 8005de0:	58025430 	.word	0x58025430
 8005de4:	58025444 	.word	0x58025444
 8005de8:	58025458 	.word	0x58025458
 8005dec:	5802546c 	.word	0x5802546c
 8005df0:	58025480 	.word	0x58025480
 8005df4:	58025494 	.word	0x58025494

08005df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e226      	b.n	8006262 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_DMA_Start_IT+0x2a>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e21f      	b.n	8006262 <HAL_DMA_Start_IT+0x46a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f040 820a 	bne.w	800624c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a68      	ldr	r2, [pc, #416]	@ (8005fec <HAL_DMA_Start_IT+0x1f4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04a      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a66      	ldr	r2, [pc, #408]	@ (8005ff0 <HAL_DMA_Start_IT+0x1f8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d045      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a65      	ldr	r2, [pc, #404]	@ (8005ff4 <HAL_DMA_Start_IT+0x1fc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d040      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a63      	ldr	r2, [pc, #396]	@ (8005ff8 <HAL_DMA_Start_IT+0x200>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d03b      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a62      	ldr	r2, [pc, #392]	@ (8005ffc <HAL_DMA_Start_IT+0x204>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d036      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a60      	ldr	r2, [pc, #384]	@ (8006000 <HAL_DMA_Start_IT+0x208>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a5f      	ldr	r2, [pc, #380]	@ (8006004 <HAL_DMA_Start_IT+0x20c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02c      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5d      	ldr	r2, [pc, #372]	@ (8006008 <HAL_DMA_Start_IT+0x210>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d027      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800600c <HAL_DMA_Start_IT+0x214>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8006010 <HAL_DMA_Start_IT+0x218>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a59      	ldr	r2, [pc, #356]	@ (8006014 <HAL_DMA_Start_IT+0x21c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a57      	ldr	r2, [pc, #348]	@ (8006018 <HAL_DMA_Start_IT+0x220>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a56      	ldr	r2, [pc, #344]	@ (800601c <HAL_DMA_Start_IT+0x224>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a54      	ldr	r2, [pc, #336]	@ (8006020 <HAL_DMA_Start_IT+0x228>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a53      	ldr	r2, [pc, #332]	@ (8006024 <HAL_DMA_Start_IT+0x22c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a51      	ldr	r2, [pc, #324]	@ (8006028 <HAL_DMA_Start_IT+0x230>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d108      	bne.n	8005ef8 <HAL_DMA_Start_IT+0x100>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e007      	b.n	8005f08 <HAL_DMA_Start_IT+0x110>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 fe84 	bl	8007c1c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a34      	ldr	r2, [pc, #208]	@ (8005fec <HAL_DMA_Start_IT+0x1f4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d04a      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a33      	ldr	r2, [pc, #204]	@ (8005ff0 <HAL_DMA_Start_IT+0x1f8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d045      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a31      	ldr	r2, [pc, #196]	@ (8005ff4 <HAL_DMA_Start_IT+0x1fc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d040      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a30      	ldr	r2, [pc, #192]	@ (8005ff8 <HAL_DMA_Start_IT+0x200>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d03b      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a2e      	ldr	r2, [pc, #184]	@ (8005ffc <HAL_DMA_Start_IT+0x204>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d036      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8006000 <HAL_DMA_Start_IT+0x208>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d031      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a2b      	ldr	r2, [pc, #172]	@ (8006004 <HAL_DMA_Start_IT+0x20c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d02c      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006008 <HAL_DMA_Start_IT+0x210>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d027      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a28      	ldr	r2, [pc, #160]	@ (800600c <HAL_DMA_Start_IT+0x214>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d022      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a27      	ldr	r2, [pc, #156]	@ (8006010 <HAL_DMA_Start_IT+0x218>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d01d      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a25      	ldr	r2, [pc, #148]	@ (8006014 <HAL_DMA_Start_IT+0x21c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a24      	ldr	r2, [pc, #144]	@ (8006018 <HAL_DMA_Start_IT+0x220>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a22      	ldr	r2, [pc, #136]	@ (800601c <HAL_DMA_Start_IT+0x224>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00e      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a21      	ldr	r2, [pc, #132]	@ (8006020 <HAL_DMA_Start_IT+0x228>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <HAL_DMA_Start_IT+0x22c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1e      	ldr	r2, [pc, #120]	@ (8006028 <HAL_DMA_Start_IT+0x230>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d101      	bne.n	8005fb8 <HAL_DMA_Start_IT+0x1c0>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_DMA_Start_IT+0x1c2>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d036      	beq.n	800602c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f023 021e 	bic.w	r2, r3, #30
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0216 	orr.w	r2, r2, #22
 8005fd0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d03e      	beq.n	8006058 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0208 	orr.w	r2, r2, #8
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e035      	b.n	8006058 <HAL_DMA_Start_IT+0x260>
 8005fec:	40020010 	.word	0x40020010
 8005ff0:	40020028 	.word	0x40020028
 8005ff4:	40020040 	.word	0x40020040
 8005ff8:	40020058 	.word	0x40020058
 8005ffc:	40020070 	.word	0x40020070
 8006000:	40020088 	.word	0x40020088
 8006004:	400200a0 	.word	0x400200a0
 8006008:	400200b8 	.word	0x400200b8
 800600c:	40020410 	.word	0x40020410
 8006010:	40020428 	.word	0x40020428
 8006014:	40020440 	.word	0x40020440
 8006018:	40020458 	.word	0x40020458
 800601c:	40020470 	.word	0x40020470
 8006020:	40020488 	.word	0x40020488
 8006024:	400204a0 	.word	0x400204a0
 8006028:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 020e 	bic.w	r2, r3, #14
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 020a 	orr.w	r2, r2, #10
 800603e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0204 	orr.w	r2, r2, #4
 8006056:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a83      	ldr	r2, [pc, #524]	@ (800626c <HAL_DMA_Start_IT+0x474>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d072      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a82      	ldr	r2, [pc, #520]	@ (8006270 <HAL_DMA_Start_IT+0x478>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d06d      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a80      	ldr	r2, [pc, #512]	@ (8006274 <HAL_DMA_Start_IT+0x47c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d068      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a7f      	ldr	r2, [pc, #508]	@ (8006278 <HAL_DMA_Start_IT+0x480>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d063      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a7d      	ldr	r2, [pc, #500]	@ (800627c <HAL_DMA_Start_IT+0x484>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d05e      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a7c      	ldr	r2, [pc, #496]	@ (8006280 <HAL_DMA_Start_IT+0x488>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d059      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a7a      	ldr	r2, [pc, #488]	@ (8006284 <HAL_DMA_Start_IT+0x48c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d054      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a79      	ldr	r2, [pc, #484]	@ (8006288 <HAL_DMA_Start_IT+0x490>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d04f      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a77      	ldr	r2, [pc, #476]	@ (800628c <HAL_DMA_Start_IT+0x494>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d04a      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a76      	ldr	r2, [pc, #472]	@ (8006290 <HAL_DMA_Start_IT+0x498>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d045      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a74      	ldr	r2, [pc, #464]	@ (8006294 <HAL_DMA_Start_IT+0x49c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d040      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a73      	ldr	r2, [pc, #460]	@ (8006298 <HAL_DMA_Start_IT+0x4a0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d03b      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a71      	ldr	r2, [pc, #452]	@ (800629c <HAL_DMA_Start_IT+0x4a4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d036      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a70      	ldr	r2, [pc, #448]	@ (80062a0 <HAL_DMA_Start_IT+0x4a8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d031      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a6e      	ldr	r2, [pc, #440]	@ (80062a4 <HAL_DMA_Start_IT+0x4ac>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d02c      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a6d      	ldr	r2, [pc, #436]	@ (80062a8 <HAL_DMA_Start_IT+0x4b0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a6b      	ldr	r2, [pc, #428]	@ (80062ac <HAL_DMA_Start_IT+0x4b4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a6a      	ldr	r2, [pc, #424]	@ (80062b0 <HAL_DMA_Start_IT+0x4b8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a68      	ldr	r2, [pc, #416]	@ (80062b4 <HAL_DMA_Start_IT+0x4bc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a67      	ldr	r2, [pc, #412]	@ (80062b8 <HAL_DMA_Start_IT+0x4c0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a65      	ldr	r2, [pc, #404]	@ (80062bc <HAL_DMA_Start_IT+0x4c4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a64      	ldr	r2, [pc, #400]	@ (80062c0 <HAL_DMA_Start_IT+0x4c8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a62      	ldr	r2, [pc, #392]	@ (80062c4 <HAL_DMA_Start_IT+0x4cc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a61      	ldr	r2, [pc, #388]	@ (80062c8 <HAL_DMA_Start_IT+0x4d0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d101      	bne.n	800614c <HAL_DMA_Start_IT+0x354>
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <HAL_DMA_Start_IT+0x356>
 800614c:	2300      	movs	r3, #0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01a      	beq.n	8006188 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800616a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800616e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006186:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a37      	ldr	r2, [pc, #220]	@ (800626c <HAL_DMA_Start_IT+0x474>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04a      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a36      	ldr	r2, [pc, #216]	@ (8006270 <HAL_DMA_Start_IT+0x478>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d045      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a34      	ldr	r2, [pc, #208]	@ (8006274 <HAL_DMA_Start_IT+0x47c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d040      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a33      	ldr	r2, [pc, #204]	@ (8006278 <HAL_DMA_Start_IT+0x480>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d03b      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a31      	ldr	r2, [pc, #196]	@ (800627c <HAL_DMA_Start_IT+0x484>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d036      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a30      	ldr	r2, [pc, #192]	@ (8006280 <HAL_DMA_Start_IT+0x488>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d031      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006284 <HAL_DMA_Start_IT+0x48c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02c      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006288 <HAL_DMA_Start_IT+0x490>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d027      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	@ (800628c <HAL_DMA_Start_IT+0x494>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006290 <HAL_DMA_Start_IT+0x498>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a28      	ldr	r2, [pc, #160]	@ (8006294 <HAL_DMA_Start_IT+0x49c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a27      	ldr	r2, [pc, #156]	@ (8006298 <HAL_DMA_Start_IT+0x4a0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a25      	ldr	r2, [pc, #148]	@ (800629c <HAL_DMA_Start_IT+0x4a4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a24      	ldr	r2, [pc, #144]	@ (80062a0 <HAL_DMA_Start_IT+0x4a8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a22      	ldr	r2, [pc, #136]	@ (80062a4 <HAL_DMA_Start_IT+0x4ac>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	@ (80062a8 <HAL_DMA_Start_IT+0x4b0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <HAL_DMA_Start_IT+0x442>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e012      	b.n	8006260 <HAL_DMA_Start_IT+0x468>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e009      	b.n	8006260 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006252:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40020010 	.word	0x40020010
 8006270:	40020028 	.word	0x40020028
 8006274:	40020040 	.word	0x40020040
 8006278:	40020058 	.word	0x40020058
 800627c:	40020070 	.word	0x40020070
 8006280:	40020088 	.word	0x40020088
 8006284:	400200a0 	.word	0x400200a0
 8006288:	400200b8 	.word	0x400200b8
 800628c:	40020410 	.word	0x40020410
 8006290:	40020428 	.word	0x40020428
 8006294:	40020440 	.word	0x40020440
 8006298:	40020458 	.word	0x40020458
 800629c:	40020470 	.word	0x40020470
 80062a0:	40020488 	.word	0x40020488
 80062a4:	400204a0 	.word	0x400204a0
 80062a8:	400204b8 	.word	0x400204b8
 80062ac:	58025408 	.word	0x58025408
 80062b0:	5802541c 	.word	0x5802541c
 80062b4:	58025430 	.word	0x58025430
 80062b8:	58025444 	.word	0x58025444
 80062bc:	58025458 	.word	0x58025458
 80062c0:	5802546c 	.word	0x5802546c
 80062c4:	58025480 	.word	0x58025480
 80062c8:	58025494 	.word	0x58025494

080062cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80062d4:	f7fd fdbe 	bl	8003e54 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e2dc      	b.n	800689e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d008      	beq.n	8006302 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2280      	movs	r2, #128	@ 0x80
 80062f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e2cd      	b.n	800689e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a76      	ldr	r2, [pc, #472]	@ (80064e0 <HAL_DMA_Abort+0x214>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d04a      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a74      	ldr	r2, [pc, #464]	@ (80064e4 <HAL_DMA_Abort+0x218>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d045      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a73      	ldr	r2, [pc, #460]	@ (80064e8 <HAL_DMA_Abort+0x21c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d040      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a71      	ldr	r2, [pc, #452]	@ (80064ec <HAL_DMA_Abort+0x220>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d03b      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a70      	ldr	r2, [pc, #448]	@ (80064f0 <HAL_DMA_Abort+0x224>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d036      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a6e      	ldr	r2, [pc, #440]	@ (80064f4 <HAL_DMA_Abort+0x228>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d031      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a6d      	ldr	r2, [pc, #436]	@ (80064f8 <HAL_DMA_Abort+0x22c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d02c      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a6b      	ldr	r2, [pc, #428]	@ (80064fc <HAL_DMA_Abort+0x230>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d027      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a6a      	ldr	r2, [pc, #424]	@ (8006500 <HAL_DMA_Abort+0x234>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a68      	ldr	r2, [pc, #416]	@ (8006504 <HAL_DMA_Abort+0x238>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01d      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a67      	ldr	r2, [pc, #412]	@ (8006508 <HAL_DMA_Abort+0x23c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a65      	ldr	r2, [pc, #404]	@ (800650c <HAL_DMA_Abort+0x240>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a64      	ldr	r2, [pc, #400]	@ (8006510 <HAL_DMA_Abort+0x244>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a62      	ldr	r2, [pc, #392]	@ (8006514 <HAL_DMA_Abort+0x248>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a61      	ldr	r2, [pc, #388]	@ (8006518 <HAL_DMA_Abort+0x24c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_DMA_Abort+0xd6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5f      	ldr	r2, [pc, #380]	@ (800651c <HAL_DMA_Abort+0x250>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d101      	bne.n	80063a6 <HAL_DMA_Abort+0xda>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <HAL_DMA_Abort+0xdc>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 021e 	bic.w	r2, r2, #30
 80063ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	e00a      	b.n	80063ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 020e 	bic.w	r2, r2, #14
 80063e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a3c      	ldr	r2, [pc, #240]	@ (80064e0 <HAL_DMA_Abort+0x214>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d072      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a3a      	ldr	r2, [pc, #232]	@ (80064e4 <HAL_DMA_Abort+0x218>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d06d      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a39      	ldr	r2, [pc, #228]	@ (80064e8 <HAL_DMA_Abort+0x21c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d068      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a37      	ldr	r2, [pc, #220]	@ (80064ec <HAL_DMA_Abort+0x220>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d063      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a36      	ldr	r2, [pc, #216]	@ (80064f0 <HAL_DMA_Abort+0x224>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d05e      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a34      	ldr	r2, [pc, #208]	@ (80064f4 <HAL_DMA_Abort+0x228>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d059      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a33      	ldr	r2, [pc, #204]	@ (80064f8 <HAL_DMA_Abort+0x22c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d054      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a31      	ldr	r2, [pc, #196]	@ (80064fc <HAL_DMA_Abort+0x230>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d04f      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a30      	ldr	r2, [pc, #192]	@ (8006500 <HAL_DMA_Abort+0x234>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d04a      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2e      	ldr	r2, [pc, #184]	@ (8006504 <HAL_DMA_Abort+0x238>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d045      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a2d      	ldr	r2, [pc, #180]	@ (8006508 <HAL_DMA_Abort+0x23c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d040      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a2b      	ldr	r2, [pc, #172]	@ (800650c <HAL_DMA_Abort+0x240>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d03b      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a2a      	ldr	r2, [pc, #168]	@ (8006510 <HAL_DMA_Abort+0x244>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d036      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a28      	ldr	r2, [pc, #160]	@ (8006514 <HAL_DMA_Abort+0x248>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d031      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a27      	ldr	r2, [pc, #156]	@ (8006518 <HAL_DMA_Abort+0x24c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d02c      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a25      	ldr	r2, [pc, #148]	@ (800651c <HAL_DMA_Abort+0x250>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d027      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a24      	ldr	r2, [pc, #144]	@ (8006520 <HAL_DMA_Abort+0x254>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d022      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a22      	ldr	r2, [pc, #136]	@ (8006524 <HAL_DMA_Abort+0x258>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d01d      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a21      	ldr	r2, [pc, #132]	@ (8006528 <HAL_DMA_Abort+0x25c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d018      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1f      	ldr	r2, [pc, #124]	@ (800652c <HAL_DMA_Abort+0x260>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d013      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <HAL_DMA_Abort+0x264>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00e      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006534 <HAL_DMA_Abort+0x268>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d009      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006538 <HAL_DMA_Abort+0x26c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d004      	beq.n	80064da <HAL_DMA_Abort+0x20e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a19      	ldr	r2, [pc, #100]	@ (800653c <HAL_DMA_Abort+0x270>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d132      	bne.n	8006540 <HAL_DMA_Abort+0x274>
 80064da:	2301      	movs	r3, #1
 80064dc:	e031      	b.n	8006542 <HAL_DMA_Abort+0x276>
 80064de:	bf00      	nop
 80064e0:	40020010 	.word	0x40020010
 80064e4:	40020028 	.word	0x40020028
 80064e8:	40020040 	.word	0x40020040
 80064ec:	40020058 	.word	0x40020058
 80064f0:	40020070 	.word	0x40020070
 80064f4:	40020088 	.word	0x40020088
 80064f8:	400200a0 	.word	0x400200a0
 80064fc:	400200b8 	.word	0x400200b8
 8006500:	40020410 	.word	0x40020410
 8006504:	40020428 	.word	0x40020428
 8006508:	40020440 	.word	0x40020440
 800650c:	40020458 	.word	0x40020458
 8006510:	40020470 	.word	0x40020470
 8006514:	40020488 	.word	0x40020488
 8006518:	400204a0 	.word	0x400204a0
 800651c:	400204b8 	.word	0x400204b8
 8006520:	58025408 	.word	0x58025408
 8006524:	5802541c 	.word	0x5802541c
 8006528:	58025430 	.word	0x58025430
 800652c:	58025444 	.word	0x58025444
 8006530:	58025458 	.word	0x58025458
 8006534:	5802546c 	.word	0x5802546c
 8006538:	58025480 	.word	0x58025480
 800653c:	58025494 	.word	0x58025494
 8006540:	2300      	movs	r3, #0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006554:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a6d      	ldr	r2, [pc, #436]	@ (8006710 <HAL_DMA_Abort+0x444>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d04a      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a6b      	ldr	r2, [pc, #428]	@ (8006714 <HAL_DMA_Abort+0x448>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d045      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a6a      	ldr	r2, [pc, #424]	@ (8006718 <HAL_DMA_Abort+0x44c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d040      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a68      	ldr	r2, [pc, #416]	@ (800671c <HAL_DMA_Abort+0x450>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d03b      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a67      	ldr	r2, [pc, #412]	@ (8006720 <HAL_DMA_Abort+0x454>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d036      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a65      	ldr	r2, [pc, #404]	@ (8006724 <HAL_DMA_Abort+0x458>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d031      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a64      	ldr	r2, [pc, #400]	@ (8006728 <HAL_DMA_Abort+0x45c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d02c      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a62      	ldr	r2, [pc, #392]	@ (800672c <HAL_DMA_Abort+0x460>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d027      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a61      	ldr	r2, [pc, #388]	@ (8006730 <HAL_DMA_Abort+0x464>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d022      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006734 <HAL_DMA_Abort+0x468>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01d      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a5e      	ldr	r2, [pc, #376]	@ (8006738 <HAL_DMA_Abort+0x46c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d018      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a5c      	ldr	r2, [pc, #368]	@ (800673c <HAL_DMA_Abort+0x470>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a5b      	ldr	r2, [pc, #364]	@ (8006740 <HAL_DMA_Abort+0x474>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a59      	ldr	r2, [pc, #356]	@ (8006744 <HAL_DMA_Abort+0x478>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a58      	ldr	r2, [pc, #352]	@ (8006748 <HAL_DMA_Abort+0x47c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_DMA_Abort+0x32a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a56      	ldr	r2, [pc, #344]	@ (800674c <HAL_DMA_Abort+0x480>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d108      	bne.n	8006608 <HAL_DMA_Abort+0x33c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e007      	b.n	8006618 <HAL_DMA_Abort+0x34c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0201 	bic.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006618:	e013      	b.n	8006642 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800661a:	f7fd fc1b 	bl	8003e54 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b05      	cmp	r3, #5
 8006626:	d90c      	bls.n	8006642 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2203      	movs	r2, #3
 8006632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e12d      	b.n	800689e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e5      	bne.n	800661a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2f      	ldr	r2, [pc, #188]	@ (8006710 <HAL_DMA_Abort+0x444>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d04a      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2d      	ldr	r2, [pc, #180]	@ (8006714 <HAL_DMA_Abort+0x448>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d045      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2c      	ldr	r2, [pc, #176]	@ (8006718 <HAL_DMA_Abort+0x44c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d040      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a2a      	ldr	r2, [pc, #168]	@ (800671c <HAL_DMA_Abort+0x450>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d03b      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a29      	ldr	r2, [pc, #164]	@ (8006720 <HAL_DMA_Abort+0x454>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d036      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a27      	ldr	r2, [pc, #156]	@ (8006724 <HAL_DMA_Abort+0x458>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d031      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a26      	ldr	r2, [pc, #152]	@ (8006728 <HAL_DMA_Abort+0x45c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d02c      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a24      	ldr	r2, [pc, #144]	@ (800672c <HAL_DMA_Abort+0x460>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d027      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a23      	ldr	r2, [pc, #140]	@ (8006730 <HAL_DMA_Abort+0x464>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a21      	ldr	r2, [pc, #132]	@ (8006734 <HAL_DMA_Abort+0x468>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01d      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a20      	ldr	r2, [pc, #128]	@ (8006738 <HAL_DMA_Abort+0x46c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1e      	ldr	r2, [pc, #120]	@ (800673c <HAL_DMA_Abort+0x470>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006740 <HAL_DMA_Abort+0x474>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006744 <HAL_DMA_Abort+0x478>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1a      	ldr	r2, [pc, #104]	@ (8006748 <HAL_DMA_Abort+0x47c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_DMA_Abort+0x422>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a18      	ldr	r2, [pc, #96]	@ (800674c <HAL_DMA_Abort+0x480>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d101      	bne.n	80066f2 <HAL_DMA_Abort+0x426>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <HAL_DMA_Abort+0x428>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d02b      	beq.n	8006750 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	223f      	movs	r2, #63	@ 0x3f
 8006708:	409a      	lsls	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	609a      	str	r2, [r3, #8]
 800670e:	e02a      	b.n	8006766 <HAL_DMA_Abort+0x49a>
 8006710:	40020010 	.word	0x40020010
 8006714:	40020028 	.word	0x40020028
 8006718:	40020040 	.word	0x40020040
 800671c:	40020058 	.word	0x40020058
 8006720:	40020070 	.word	0x40020070
 8006724:	40020088 	.word	0x40020088
 8006728:	400200a0 	.word	0x400200a0
 800672c:	400200b8 	.word	0x400200b8
 8006730:	40020410 	.word	0x40020410
 8006734:	40020428 	.word	0x40020428
 8006738:	40020440 	.word	0x40020440
 800673c:	40020458 	.word	0x40020458
 8006740:	40020470 	.word	0x40020470
 8006744:	40020488 	.word	0x40020488
 8006748:	400204a0 	.word	0x400204a0
 800674c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006754:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2201      	movs	r2, #1
 8006760:	409a      	lsls	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a4f      	ldr	r2, [pc, #316]	@ (80068a8 <HAL_DMA_Abort+0x5dc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d072      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a4d      	ldr	r2, [pc, #308]	@ (80068ac <HAL_DMA_Abort+0x5e0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d06d      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a4c      	ldr	r2, [pc, #304]	@ (80068b0 <HAL_DMA_Abort+0x5e4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d068      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a4a      	ldr	r2, [pc, #296]	@ (80068b4 <HAL_DMA_Abort+0x5e8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d063      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a49      	ldr	r2, [pc, #292]	@ (80068b8 <HAL_DMA_Abort+0x5ec>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d05e      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a47      	ldr	r2, [pc, #284]	@ (80068bc <HAL_DMA_Abort+0x5f0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d059      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a46      	ldr	r2, [pc, #280]	@ (80068c0 <HAL_DMA_Abort+0x5f4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d054      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a44      	ldr	r2, [pc, #272]	@ (80068c4 <HAL_DMA_Abort+0x5f8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d04f      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a43      	ldr	r2, [pc, #268]	@ (80068c8 <HAL_DMA_Abort+0x5fc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d04a      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a41      	ldr	r2, [pc, #260]	@ (80068cc <HAL_DMA_Abort+0x600>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d045      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a40      	ldr	r2, [pc, #256]	@ (80068d0 <HAL_DMA_Abort+0x604>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d040      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a3e      	ldr	r2, [pc, #248]	@ (80068d4 <HAL_DMA_Abort+0x608>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d03b      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a3d      	ldr	r2, [pc, #244]	@ (80068d8 <HAL_DMA_Abort+0x60c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d036      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a3b      	ldr	r2, [pc, #236]	@ (80068dc <HAL_DMA_Abort+0x610>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d031      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a3a      	ldr	r2, [pc, #232]	@ (80068e0 <HAL_DMA_Abort+0x614>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d02c      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a38      	ldr	r2, [pc, #224]	@ (80068e4 <HAL_DMA_Abort+0x618>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d027      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a37      	ldr	r2, [pc, #220]	@ (80068e8 <HAL_DMA_Abort+0x61c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d022      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a35      	ldr	r2, [pc, #212]	@ (80068ec <HAL_DMA_Abort+0x620>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01d      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a34      	ldr	r2, [pc, #208]	@ (80068f0 <HAL_DMA_Abort+0x624>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d018      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a32      	ldr	r2, [pc, #200]	@ (80068f4 <HAL_DMA_Abort+0x628>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a31      	ldr	r2, [pc, #196]	@ (80068f8 <HAL_DMA_Abort+0x62c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00e      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a2f      	ldr	r2, [pc, #188]	@ (80068fc <HAL_DMA_Abort+0x630>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a2e      	ldr	r2, [pc, #184]	@ (8006900 <HAL_DMA_Abort+0x634>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_DMA_Abort+0x58a>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a2c      	ldr	r2, [pc, #176]	@ (8006904 <HAL_DMA_Abort+0x638>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d101      	bne.n	800685a <HAL_DMA_Abort+0x58e>
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <HAL_DMA_Abort+0x590>
 800685a:	2300      	movs	r3, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d015      	beq.n	800688c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006868:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800687c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006880:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800688a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40020010 	.word	0x40020010
 80068ac:	40020028 	.word	0x40020028
 80068b0:	40020040 	.word	0x40020040
 80068b4:	40020058 	.word	0x40020058
 80068b8:	40020070 	.word	0x40020070
 80068bc:	40020088 	.word	0x40020088
 80068c0:	400200a0 	.word	0x400200a0
 80068c4:	400200b8 	.word	0x400200b8
 80068c8:	40020410 	.word	0x40020410
 80068cc:	40020428 	.word	0x40020428
 80068d0:	40020440 	.word	0x40020440
 80068d4:	40020458 	.word	0x40020458
 80068d8:	40020470 	.word	0x40020470
 80068dc:	40020488 	.word	0x40020488
 80068e0:	400204a0 	.word	0x400204a0
 80068e4:	400204b8 	.word	0x400204b8
 80068e8:	58025408 	.word	0x58025408
 80068ec:	5802541c 	.word	0x5802541c
 80068f0:	58025430 	.word	0x58025430
 80068f4:	58025444 	.word	0x58025444
 80068f8:	58025458 	.word	0x58025458
 80068fc:	5802546c 	.word	0x5802546c
 8006900:	58025480 	.word	0x58025480
 8006904:	58025494 	.word	0x58025494

08006908 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e237      	b.n	8006d8a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d004      	beq.n	8006930 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2280      	movs	r2, #128	@ 0x80
 800692a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e22c      	b.n	8006d8a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a5c      	ldr	r2, [pc, #368]	@ (8006aa8 <HAL_DMA_Abort_IT+0x1a0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d04a      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a5b      	ldr	r2, [pc, #364]	@ (8006aac <HAL_DMA_Abort_IT+0x1a4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d045      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a59      	ldr	r2, [pc, #356]	@ (8006ab0 <HAL_DMA_Abort_IT+0x1a8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d040      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a58      	ldr	r2, [pc, #352]	@ (8006ab4 <HAL_DMA_Abort_IT+0x1ac>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d03b      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a56      	ldr	r2, [pc, #344]	@ (8006ab8 <HAL_DMA_Abort_IT+0x1b0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d036      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a55      	ldr	r2, [pc, #340]	@ (8006abc <HAL_DMA_Abort_IT+0x1b4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d031      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a53      	ldr	r2, [pc, #332]	@ (8006ac0 <HAL_DMA_Abort_IT+0x1b8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d02c      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a52      	ldr	r2, [pc, #328]	@ (8006ac4 <HAL_DMA_Abort_IT+0x1bc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d027      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a50      	ldr	r2, [pc, #320]	@ (8006ac8 <HAL_DMA_Abort_IT+0x1c0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d022      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a4f      	ldr	r2, [pc, #316]	@ (8006acc <HAL_DMA_Abort_IT+0x1c4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d01d      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a4d      	ldr	r2, [pc, #308]	@ (8006ad0 <HAL_DMA_Abort_IT+0x1c8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d018      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a4c      	ldr	r2, [pc, #304]	@ (8006ad4 <HAL_DMA_Abort_IT+0x1cc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d013      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a4a      	ldr	r2, [pc, #296]	@ (8006ad8 <HAL_DMA_Abort_IT+0x1d0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00e      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a49      	ldr	r2, [pc, #292]	@ (8006adc <HAL_DMA_Abort_IT+0x1d4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d009      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a47      	ldr	r2, [pc, #284]	@ (8006ae0 <HAL_DMA_Abort_IT+0x1d8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_DMA_Abort_IT+0xc8>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a46      	ldr	r2, [pc, #280]	@ (8006ae4 <HAL_DMA_Abort_IT+0x1dc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d101      	bne.n	80069d4 <HAL_DMA_Abort_IT+0xcc>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <HAL_DMA_Abort_IT+0xce>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8086 	beq.w	8006ae8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2204      	movs	r2, #4
 80069e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa8 <HAL_DMA_Abort_IT+0x1a0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d04a      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a2e      	ldr	r2, [pc, #184]	@ (8006aac <HAL_DMA_Abort_IT+0x1a4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d045      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab0 <HAL_DMA_Abort_IT+0x1a8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d040      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab4 <HAL_DMA_Abort_IT+0x1ac>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d03b      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a29      	ldr	r2, [pc, #164]	@ (8006ab8 <HAL_DMA_Abort_IT+0x1b0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d036      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a28      	ldr	r2, [pc, #160]	@ (8006abc <HAL_DMA_Abort_IT+0x1b4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d031      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a26      	ldr	r2, [pc, #152]	@ (8006ac0 <HAL_DMA_Abort_IT+0x1b8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d02c      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a25      	ldr	r2, [pc, #148]	@ (8006ac4 <HAL_DMA_Abort_IT+0x1bc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d027      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a23      	ldr	r2, [pc, #140]	@ (8006ac8 <HAL_DMA_Abort_IT+0x1c0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d022      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a22      	ldr	r2, [pc, #136]	@ (8006acc <HAL_DMA_Abort_IT+0x1c4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d01d      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a20      	ldr	r2, [pc, #128]	@ (8006ad0 <HAL_DMA_Abort_IT+0x1c8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d018      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1f      	ldr	r2, [pc, #124]	@ (8006ad4 <HAL_DMA_Abort_IT+0x1cc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d013      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad8 <HAL_DMA_Abort_IT+0x1d0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00e      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006adc <HAL_DMA_Abort_IT+0x1d4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d009      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae0 <HAL_DMA_Abort_IT+0x1d8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d004      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x17c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a19      	ldr	r2, [pc, #100]	@ (8006ae4 <HAL_DMA_Abort_IT+0x1dc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d108      	bne.n	8006a96 <HAL_DMA_Abort_IT+0x18e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0201 	bic.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e178      	b.n	8006d88 <HAL_DMA_Abort_IT+0x480>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0201 	bic.w	r2, r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	e16f      	b.n	8006d88 <HAL_DMA_Abort_IT+0x480>
 8006aa8:	40020010 	.word	0x40020010
 8006aac:	40020028 	.word	0x40020028
 8006ab0:	40020040 	.word	0x40020040
 8006ab4:	40020058 	.word	0x40020058
 8006ab8:	40020070 	.word	0x40020070
 8006abc:	40020088 	.word	0x40020088
 8006ac0:	400200a0 	.word	0x400200a0
 8006ac4:	400200b8 	.word	0x400200b8
 8006ac8:	40020410 	.word	0x40020410
 8006acc:	40020428 	.word	0x40020428
 8006ad0:	40020440 	.word	0x40020440
 8006ad4:	40020458 	.word	0x40020458
 8006ad8:	40020470 	.word	0x40020470
 8006adc:	40020488 	.word	0x40020488
 8006ae0:	400204a0 	.word	0x400204a0
 8006ae4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 020e 	bic.w	r2, r2, #14
 8006af6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a6c      	ldr	r2, [pc, #432]	@ (8006cb0 <HAL_DMA_Abort_IT+0x3a8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d04a      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a6b      	ldr	r2, [pc, #428]	@ (8006cb4 <HAL_DMA_Abort_IT+0x3ac>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d045      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a69      	ldr	r2, [pc, #420]	@ (8006cb8 <HAL_DMA_Abort_IT+0x3b0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d040      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a68      	ldr	r2, [pc, #416]	@ (8006cbc <HAL_DMA_Abort_IT+0x3b4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d03b      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a66      	ldr	r2, [pc, #408]	@ (8006cc0 <HAL_DMA_Abort_IT+0x3b8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d036      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a65      	ldr	r2, [pc, #404]	@ (8006cc4 <HAL_DMA_Abort_IT+0x3bc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d031      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a63      	ldr	r2, [pc, #396]	@ (8006cc8 <HAL_DMA_Abort_IT+0x3c0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d02c      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a62      	ldr	r2, [pc, #392]	@ (8006ccc <HAL_DMA_Abort_IT+0x3c4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d027      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a60      	ldr	r2, [pc, #384]	@ (8006cd0 <HAL_DMA_Abort_IT+0x3c8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d022      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a5f      	ldr	r2, [pc, #380]	@ (8006cd4 <HAL_DMA_Abort_IT+0x3cc>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d01d      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a5d      	ldr	r2, [pc, #372]	@ (8006cd8 <HAL_DMA_Abort_IT+0x3d0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d018      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8006cdc <HAL_DMA_Abort_IT+0x3d4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a5a      	ldr	r2, [pc, #360]	@ (8006ce0 <HAL_DMA_Abort_IT+0x3d8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00e      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a59      	ldr	r2, [pc, #356]	@ (8006ce4 <HAL_DMA_Abort_IT+0x3dc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a57      	ldr	r2, [pc, #348]	@ (8006ce8 <HAL_DMA_Abort_IT+0x3e0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <HAL_DMA_Abort_IT+0x290>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a56      	ldr	r2, [pc, #344]	@ (8006cec <HAL_DMA_Abort_IT+0x3e4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d108      	bne.n	8006baa <HAL_DMA_Abort_IT+0x2a2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e007      	b.n	8006bba <HAL_DMA_Abort_IT+0x2b2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb0 <HAL_DMA_Abort_IT+0x3a8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d072      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8006cb4 <HAL_DMA_Abort_IT+0x3ac>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d06d      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a39      	ldr	r2, [pc, #228]	@ (8006cb8 <HAL_DMA_Abort_IT+0x3b0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d068      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a37      	ldr	r2, [pc, #220]	@ (8006cbc <HAL_DMA_Abort_IT+0x3b4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d063      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a36      	ldr	r2, [pc, #216]	@ (8006cc0 <HAL_DMA_Abort_IT+0x3b8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d05e      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a34      	ldr	r2, [pc, #208]	@ (8006cc4 <HAL_DMA_Abort_IT+0x3bc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d059      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a33      	ldr	r2, [pc, #204]	@ (8006cc8 <HAL_DMA_Abort_IT+0x3c0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d054      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a31      	ldr	r2, [pc, #196]	@ (8006ccc <HAL_DMA_Abort_IT+0x3c4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d04f      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a30      	ldr	r2, [pc, #192]	@ (8006cd0 <HAL_DMA_Abort_IT+0x3c8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d04a      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd4 <HAL_DMA_Abort_IT+0x3cc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d045      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd8 <HAL_DMA_Abort_IT+0x3d0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d040      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006cdc <HAL_DMA_Abort_IT+0x3d4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d03b      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce0 <HAL_DMA_Abort_IT+0x3d8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d036      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a28      	ldr	r2, [pc, #160]	@ (8006ce4 <HAL_DMA_Abort_IT+0x3dc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d031      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a27      	ldr	r2, [pc, #156]	@ (8006ce8 <HAL_DMA_Abort_IT+0x3e0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d02c      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a25      	ldr	r2, [pc, #148]	@ (8006cec <HAL_DMA_Abort_IT+0x3e4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d027      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a24      	ldr	r2, [pc, #144]	@ (8006cf0 <HAL_DMA_Abort_IT+0x3e8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d022      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a22      	ldr	r2, [pc, #136]	@ (8006cf4 <HAL_DMA_Abort_IT+0x3ec>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01d      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a21      	ldr	r2, [pc, #132]	@ (8006cf8 <HAL_DMA_Abort_IT+0x3f0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d018      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cfc <HAL_DMA_Abort_IT+0x3f4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1e      	ldr	r2, [pc, #120]	@ (8006d00 <HAL_DMA_Abort_IT+0x3f8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1c      	ldr	r2, [pc, #112]	@ (8006d04 <HAL_DMA_Abort_IT+0x3fc>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <HAL_DMA_Abort_IT+0x400>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_DMA_Abort_IT+0x3a2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	@ (8006d0c <HAL_DMA_Abort_IT+0x404>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d132      	bne.n	8006d10 <HAL_DMA_Abort_IT+0x408>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e031      	b.n	8006d12 <HAL_DMA_Abort_IT+0x40a>
 8006cae:	bf00      	nop
 8006cb0:	40020010 	.word	0x40020010
 8006cb4:	40020028 	.word	0x40020028
 8006cb8:	40020040 	.word	0x40020040
 8006cbc:	40020058 	.word	0x40020058
 8006cc0:	40020070 	.word	0x40020070
 8006cc4:	40020088 	.word	0x40020088
 8006cc8:	400200a0 	.word	0x400200a0
 8006ccc:	400200b8 	.word	0x400200b8
 8006cd0:	40020410 	.word	0x40020410
 8006cd4:	40020428 	.word	0x40020428
 8006cd8:	40020440 	.word	0x40020440
 8006cdc:	40020458 	.word	0x40020458
 8006ce0:	40020470 	.word	0x40020470
 8006ce4:	40020488 	.word	0x40020488
 8006ce8:	400204a0 	.word	0x400204a0
 8006cec:	400204b8 	.word	0x400204b8
 8006cf0:	58025408 	.word	0x58025408
 8006cf4:	5802541c 	.word	0x5802541c
 8006cf8:	58025430 	.word	0x58025430
 8006cfc:	58025444 	.word	0x58025444
 8006d00:	58025458 	.word	0x58025458
 8006d04:	5802546c 	.word	0x5802546c
 8006d08:	58025480 	.word	0x58025480
 8006d0c:	58025494 	.word	0x58025494
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d028      	beq.n	8006d68 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2201      	movs	r2, #1
 8006d36:	409a      	lsls	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop

08006d94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	@ 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006da0:	4b67      	ldr	r3, [pc, #412]	@ (8006f40 <HAL_DMA_IRQHandler+0x1ac>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a67      	ldr	r2, [pc, #412]	@ (8006f44 <HAL_DMA_IRQHandler+0x1b0>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	0a9b      	lsrs	r3, r3, #10
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a5f      	ldr	r2, [pc, #380]	@ (8006f48 <HAL_DMA_IRQHandler+0x1b4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d04a      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8006f4c <HAL_DMA_IRQHandler+0x1b8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d045      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a5c      	ldr	r2, [pc, #368]	@ (8006f50 <HAL_DMA_IRQHandler+0x1bc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d040      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a5a      	ldr	r2, [pc, #360]	@ (8006f54 <HAL_DMA_IRQHandler+0x1c0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d03b      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a59      	ldr	r2, [pc, #356]	@ (8006f58 <HAL_DMA_IRQHandler+0x1c4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d036      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a57      	ldr	r2, [pc, #348]	@ (8006f5c <HAL_DMA_IRQHandler+0x1c8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d031      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a56      	ldr	r2, [pc, #344]	@ (8006f60 <HAL_DMA_IRQHandler+0x1cc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d02c      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a54      	ldr	r2, [pc, #336]	@ (8006f64 <HAL_DMA_IRQHandler+0x1d0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d027      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a53      	ldr	r2, [pc, #332]	@ (8006f68 <HAL_DMA_IRQHandler+0x1d4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d022      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a51      	ldr	r2, [pc, #324]	@ (8006f6c <HAL_DMA_IRQHandler+0x1d8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01d      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a50      	ldr	r2, [pc, #320]	@ (8006f70 <HAL_DMA_IRQHandler+0x1dc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d018      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a4e      	ldr	r2, [pc, #312]	@ (8006f74 <HAL_DMA_IRQHandler+0x1e0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a4d      	ldr	r2, [pc, #308]	@ (8006f78 <HAL_DMA_IRQHandler+0x1e4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f7c <HAL_DMA_IRQHandler+0x1e8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a4a      	ldr	r2, [pc, #296]	@ (8006f80 <HAL_DMA_IRQHandler+0x1ec>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xd2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a48      	ldr	r2, [pc, #288]	@ (8006f84 <HAL_DMA_IRQHandler+0x1f0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d101      	bne.n	8006e6a <HAL_DMA_IRQHandler+0xd6>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <HAL_DMA_IRQHandler+0xd8>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 842b 	beq.w	80076c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	409a      	lsls	r2, r3
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80a2 	beq.w	8006fcc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f48 <HAL_DMA_IRQHandler+0x1b4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d04a      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a2d      	ldr	r2, [pc, #180]	@ (8006f4c <HAL_DMA_IRQHandler+0x1b8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d045      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8006f50 <HAL_DMA_IRQHandler+0x1bc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d040      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8006f54 <HAL_DMA_IRQHandler+0x1c0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d03b      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a28      	ldr	r2, [pc, #160]	@ (8006f58 <HAL_DMA_IRQHandler+0x1c4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d036      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a27      	ldr	r2, [pc, #156]	@ (8006f5c <HAL_DMA_IRQHandler+0x1c8>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d031      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a25      	ldr	r2, [pc, #148]	@ (8006f60 <HAL_DMA_IRQHandler+0x1cc>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d02c      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a24      	ldr	r2, [pc, #144]	@ (8006f64 <HAL_DMA_IRQHandler+0x1d0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d027      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a22      	ldr	r2, [pc, #136]	@ (8006f68 <HAL_DMA_IRQHandler+0x1d4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d022      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a21      	ldr	r2, [pc, #132]	@ (8006f6c <HAL_DMA_IRQHandler+0x1d8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d01d      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f70 <HAL_DMA_IRQHandler+0x1dc>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d018      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1e      	ldr	r2, [pc, #120]	@ (8006f74 <HAL_DMA_IRQHandler+0x1e0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d013      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1c      	ldr	r2, [pc, #112]	@ (8006f78 <HAL_DMA_IRQHandler+0x1e4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00e      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f7c <HAL_DMA_IRQHandler+0x1e8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d009      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a19      	ldr	r2, [pc, #100]	@ (8006f80 <HAL_DMA_IRQHandler+0x1ec>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x194>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a18      	ldr	r2, [pc, #96]	@ (8006f84 <HAL_DMA_IRQHandler+0x1f0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d12f      	bne.n	8006f88 <HAL_DMA_IRQHandler+0x1f4>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bf14      	ite	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	2300      	moveq	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	e02e      	b.n	8006f9c <HAL_DMA_IRQHandler+0x208>
 8006f3e:	bf00      	nop
 8006f40:	24000240 	.word	0x24000240
 8006f44:	1b4e81b5 	.word	0x1b4e81b5
 8006f48:	40020010 	.word	0x40020010
 8006f4c:	40020028 	.word	0x40020028
 8006f50:	40020040 	.word	0x40020040
 8006f54:	40020058 	.word	0x40020058
 8006f58:	40020070 	.word	0x40020070
 8006f5c:	40020088 	.word	0x40020088
 8006f60:	400200a0 	.word	0x400200a0
 8006f64:	400200b8 	.word	0x400200b8
 8006f68:	40020410 	.word	0x40020410
 8006f6c:	40020428 	.word	0x40020428
 8006f70:	40020440 	.word	0x40020440
 8006f74:	40020458 	.word	0x40020458
 8006f78:	40020470 	.word	0x40020470
 8006f7c:	40020488 	.word	0x40020488
 8006f80:	400204a0 	.word	0x400204a0
 8006f84:	400204b8 	.word	0x400204b8
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bf14      	ite	ne
 8006f96:	2301      	movne	r3, #1
 8006f98:	2300      	moveq	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d015      	beq.n	8006fcc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0204 	bic.w	r2, r2, #4
 8006fae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	2208      	movs	r2, #8
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc4:	f043 0201 	orr.w	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d06e      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a69      	ldr	r2, [pc, #420]	@ (800718c <HAL_DMA_IRQHandler+0x3f8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d04a      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a67      	ldr	r2, [pc, #412]	@ (8007190 <HAL_DMA_IRQHandler+0x3fc>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d045      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a66      	ldr	r2, [pc, #408]	@ (8007194 <HAL_DMA_IRQHandler+0x400>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d040      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a64      	ldr	r2, [pc, #400]	@ (8007198 <HAL_DMA_IRQHandler+0x404>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d03b      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a63      	ldr	r2, [pc, #396]	@ (800719c <HAL_DMA_IRQHandler+0x408>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d036      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a61      	ldr	r2, [pc, #388]	@ (80071a0 <HAL_DMA_IRQHandler+0x40c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d031      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a60      	ldr	r2, [pc, #384]	@ (80071a4 <HAL_DMA_IRQHandler+0x410>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d02c      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a5e      	ldr	r2, [pc, #376]	@ (80071a8 <HAL_DMA_IRQHandler+0x414>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d027      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a5d      	ldr	r2, [pc, #372]	@ (80071ac <HAL_DMA_IRQHandler+0x418>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d022      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a5b      	ldr	r2, [pc, #364]	@ (80071b0 <HAL_DMA_IRQHandler+0x41c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d01d      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a5a      	ldr	r2, [pc, #360]	@ (80071b4 <HAL_DMA_IRQHandler+0x420>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d018      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a58      	ldr	r2, [pc, #352]	@ (80071b8 <HAL_DMA_IRQHandler+0x424>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d013      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a57      	ldr	r2, [pc, #348]	@ (80071bc <HAL_DMA_IRQHandler+0x428>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00e      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a55      	ldr	r2, [pc, #340]	@ (80071c0 <HAL_DMA_IRQHandler+0x42c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d009      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a54      	ldr	r2, [pc, #336]	@ (80071c4 <HAL_DMA_IRQHandler+0x430>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d004      	beq.n	8007082 <HAL_DMA_IRQHandler+0x2ee>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a52      	ldr	r2, [pc, #328]	@ (80071c8 <HAL_DMA_IRQHandler+0x434>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d10a      	bne.n	8007098 <HAL_DMA_IRQHandler+0x304>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708c:	2b00      	cmp	r3, #0
 800708e:	bf14      	ite	ne
 8007090:	2301      	movne	r3, #1
 8007092:	2300      	moveq	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	e003      	b.n	80070a0 <HAL_DMA_IRQHandler+0x30c>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00d      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2201      	movs	r2, #1
 80070ae:	409a      	lsls	r2, r3
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b8:	f043 0202 	orr.w	r2, r3, #2
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2204      	movs	r2, #4
 80070ca:	409a      	lsls	r2, r3
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 808f 	beq.w	80071f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2c      	ldr	r2, [pc, #176]	@ (800718c <HAL_DMA_IRQHandler+0x3f8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d04a      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2a      	ldr	r2, [pc, #168]	@ (8007190 <HAL_DMA_IRQHandler+0x3fc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d045      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a29      	ldr	r2, [pc, #164]	@ (8007194 <HAL_DMA_IRQHandler+0x400>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d040      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a27      	ldr	r2, [pc, #156]	@ (8007198 <HAL_DMA_IRQHandler+0x404>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d03b      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a26      	ldr	r2, [pc, #152]	@ (800719c <HAL_DMA_IRQHandler+0x408>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d036      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a24      	ldr	r2, [pc, #144]	@ (80071a0 <HAL_DMA_IRQHandler+0x40c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d031      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a23      	ldr	r2, [pc, #140]	@ (80071a4 <HAL_DMA_IRQHandler+0x410>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d02c      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a21      	ldr	r2, [pc, #132]	@ (80071a8 <HAL_DMA_IRQHandler+0x414>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d027      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a20      	ldr	r2, [pc, #128]	@ (80071ac <HAL_DMA_IRQHandler+0x418>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a1e      	ldr	r2, [pc, #120]	@ (80071b0 <HAL_DMA_IRQHandler+0x41c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01d      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a1d      	ldr	r2, [pc, #116]	@ (80071b4 <HAL_DMA_IRQHandler+0x420>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1b      	ldr	r2, [pc, #108]	@ (80071b8 <HAL_DMA_IRQHandler+0x424>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1a      	ldr	r2, [pc, #104]	@ (80071bc <HAL_DMA_IRQHandler+0x428>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a18      	ldr	r2, [pc, #96]	@ (80071c0 <HAL_DMA_IRQHandler+0x42c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a17      	ldr	r2, [pc, #92]	@ (80071c4 <HAL_DMA_IRQHandler+0x430>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <HAL_DMA_IRQHandler+0x3e2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a15      	ldr	r2, [pc, #84]	@ (80071c8 <HAL_DMA_IRQHandler+0x434>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d12a      	bne.n	80071cc <HAL_DMA_IRQHandler+0x438>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e023      	b.n	80071d4 <HAL_DMA_IRQHandler+0x440>
 800718c:	40020010 	.word	0x40020010
 8007190:	40020028 	.word	0x40020028
 8007194:	40020040 	.word	0x40020040
 8007198:	40020058 	.word	0x40020058
 800719c:	40020070 	.word	0x40020070
 80071a0:	40020088 	.word	0x40020088
 80071a4:	400200a0 	.word	0x400200a0
 80071a8:	400200b8 	.word	0x400200b8
 80071ac:	40020410 	.word	0x40020410
 80071b0:	40020428 	.word	0x40020428
 80071b4:	40020440 	.word	0x40020440
 80071b8:	40020458 	.word	0x40020458
 80071bc:	40020470 	.word	0x40020470
 80071c0:	40020488 	.word	0x40020488
 80071c4:	400204a0 	.word	0x400204a0
 80071c8:	400204b8 	.word	0x400204b8
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00d      	beq.n	80071f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071dc:	f003 031f 	and.w	r3, r3, #31
 80071e0:	2204      	movs	r2, #4
 80071e2:	409a      	lsls	r2, r3
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ec:	f043 0204 	orr.w	r2, r3, #4
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	2210      	movs	r2, #16
 80071fe:	409a      	lsls	r2, r3
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	4013      	ands	r3, r2
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80a6 	beq.w	8007356 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a85      	ldr	r2, [pc, #532]	@ (8007424 <HAL_DMA_IRQHandler+0x690>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d04a      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a83      	ldr	r2, [pc, #524]	@ (8007428 <HAL_DMA_IRQHandler+0x694>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d045      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a82      	ldr	r2, [pc, #520]	@ (800742c <HAL_DMA_IRQHandler+0x698>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d040      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a80      	ldr	r2, [pc, #512]	@ (8007430 <HAL_DMA_IRQHandler+0x69c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d03b      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a7f      	ldr	r2, [pc, #508]	@ (8007434 <HAL_DMA_IRQHandler+0x6a0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d036      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a7d      	ldr	r2, [pc, #500]	@ (8007438 <HAL_DMA_IRQHandler+0x6a4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d031      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7c      	ldr	r2, [pc, #496]	@ (800743c <HAL_DMA_IRQHandler+0x6a8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d02c      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a7a      	ldr	r2, [pc, #488]	@ (8007440 <HAL_DMA_IRQHandler+0x6ac>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d027      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a79      	ldr	r2, [pc, #484]	@ (8007444 <HAL_DMA_IRQHandler+0x6b0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a77      	ldr	r2, [pc, #476]	@ (8007448 <HAL_DMA_IRQHandler+0x6b4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a76      	ldr	r2, [pc, #472]	@ (800744c <HAL_DMA_IRQHandler+0x6b8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a74      	ldr	r2, [pc, #464]	@ (8007450 <HAL_DMA_IRQHandler+0x6bc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a73      	ldr	r2, [pc, #460]	@ (8007454 <HAL_DMA_IRQHandler+0x6c0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a71      	ldr	r2, [pc, #452]	@ (8007458 <HAL_DMA_IRQHandler+0x6c4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a70      	ldr	r2, [pc, #448]	@ (800745c <HAL_DMA_IRQHandler+0x6c8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_DMA_IRQHandler+0x516>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007460 <HAL_DMA_IRQHandler+0x6cc>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d10a      	bne.n	80072c0 <HAL_DMA_IRQHandler+0x52c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	e009      	b.n	80072d4 <HAL_DMA_IRQHandler+0x540>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bf14      	ite	ne
 80072ce:	2301      	movne	r3, #1
 80072d0:	2300      	moveq	r3, #0
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d03e      	beq.n	8007356 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	2210      	movs	r2, #16
 80072e2:	409a      	lsls	r2, r3
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d018      	beq.n	8007328 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d108      	bne.n	8007316 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d024      	beq.n	8007356 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
 8007314:	e01f      	b.n	8007356 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01b      	beq.n	8007356 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
 8007326:	e016      	b.n	8007356 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007332:	2b00      	cmp	r3, #0
 8007334:	d107      	bne.n	8007346 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0208 	bic.w	r2, r2, #8
 8007344:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2220      	movs	r2, #32
 8007360:	409a      	lsls	r2, r3
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	4013      	ands	r3, r2
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 8110 	beq.w	800758c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2c      	ldr	r2, [pc, #176]	@ (8007424 <HAL_DMA_IRQHandler+0x690>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d04a      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2b      	ldr	r2, [pc, #172]	@ (8007428 <HAL_DMA_IRQHandler+0x694>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d045      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a29      	ldr	r2, [pc, #164]	@ (800742c <HAL_DMA_IRQHandler+0x698>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d040      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a28      	ldr	r2, [pc, #160]	@ (8007430 <HAL_DMA_IRQHandler+0x69c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d03b      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a26      	ldr	r2, [pc, #152]	@ (8007434 <HAL_DMA_IRQHandler+0x6a0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d036      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a25      	ldr	r2, [pc, #148]	@ (8007438 <HAL_DMA_IRQHandler+0x6a4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d031      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a23      	ldr	r2, [pc, #140]	@ (800743c <HAL_DMA_IRQHandler+0x6a8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d02c      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a22      	ldr	r2, [pc, #136]	@ (8007440 <HAL_DMA_IRQHandler+0x6ac>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d027      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a20      	ldr	r2, [pc, #128]	@ (8007444 <HAL_DMA_IRQHandler+0x6b0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d022      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007448 <HAL_DMA_IRQHandler+0x6b4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d01d      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1d      	ldr	r2, [pc, #116]	@ (800744c <HAL_DMA_IRQHandler+0x6b8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d018      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1c      	ldr	r2, [pc, #112]	@ (8007450 <HAL_DMA_IRQHandler+0x6bc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007454 <HAL_DMA_IRQHandler+0x6c0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00e      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a19      	ldr	r2, [pc, #100]	@ (8007458 <HAL_DMA_IRQHandler+0x6c4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d009      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a17      	ldr	r2, [pc, #92]	@ (800745c <HAL_DMA_IRQHandler+0x6c8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d004      	beq.n	800740c <HAL_DMA_IRQHandler+0x678>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a16      	ldr	r2, [pc, #88]	@ (8007460 <HAL_DMA_IRQHandler+0x6cc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d12b      	bne.n	8007464 <HAL_DMA_IRQHandler+0x6d0>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b00      	cmp	r3, #0
 8007418:	bf14      	ite	ne
 800741a:	2301      	movne	r3, #1
 800741c:	2300      	moveq	r3, #0
 800741e:	b2db      	uxtb	r3, r3
 8007420:	e02a      	b.n	8007478 <HAL_DMA_IRQHandler+0x6e4>
 8007422:	bf00      	nop
 8007424:	40020010 	.word	0x40020010
 8007428:	40020028 	.word	0x40020028
 800742c:	40020040 	.word	0x40020040
 8007430:	40020058 	.word	0x40020058
 8007434:	40020070 	.word	0x40020070
 8007438:	40020088 	.word	0x40020088
 800743c:	400200a0 	.word	0x400200a0
 8007440:	400200b8 	.word	0x400200b8
 8007444:	40020410 	.word	0x40020410
 8007448:	40020428 	.word	0x40020428
 800744c:	40020440 	.word	0x40020440
 8007450:	40020458 	.word	0x40020458
 8007454:	40020470 	.word	0x40020470
 8007458:	40020488 	.word	0x40020488
 800745c:	400204a0 	.word	0x400204a0
 8007460:	400204b8 	.word	0x400204b8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	bf14      	ite	ne
 8007472:	2301      	movne	r3, #1
 8007474:	2300      	moveq	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8087 	beq.w	800758c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007482:	f003 031f 	and.w	r3, r3, #31
 8007486:	2220      	movs	r2, #32
 8007488:	409a      	lsls	r2, r3
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b04      	cmp	r3, #4
 8007498:	d139      	bne.n	800750e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0216 	bic.w	r2, r2, #22
 80074a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695a      	ldr	r2, [r3, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <HAL_DMA_IRQHandler+0x736>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d007      	beq.n	80074da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0208 	bic.w	r2, r2, #8
 80074d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	223f      	movs	r2, #63	@ 0x3f
 80074e4:	409a      	lsls	r2, r3
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 834a 	beq.w	8007b98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
          }
          return;
 800750c:	e344      	b.n	8007b98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d018      	beq.n	800754e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d108      	bne.n	800753c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752e:	2b00      	cmp	r3, #0
 8007530:	d02c      	beq.n	800758c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
 800753a:	e027      	b.n	800758c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d023      	beq.n	800758c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
 800754c:	e01e      	b.n	800758c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10f      	bne.n	800757c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0210 	bic.w	r2, r2, #16
 800756a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 8306 	beq.w	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8088 	beq.w	80076b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2204      	movs	r2, #4
 80075a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a7a      	ldr	r2, [pc, #488]	@ (800779c <HAL_DMA_IRQHandler+0xa08>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d04a      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a79      	ldr	r2, [pc, #484]	@ (80077a0 <HAL_DMA_IRQHandler+0xa0c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d045      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a77      	ldr	r2, [pc, #476]	@ (80077a4 <HAL_DMA_IRQHandler+0xa10>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d040      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a76      	ldr	r2, [pc, #472]	@ (80077a8 <HAL_DMA_IRQHandler+0xa14>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d03b      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a74      	ldr	r2, [pc, #464]	@ (80077ac <HAL_DMA_IRQHandler+0xa18>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d036      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a73      	ldr	r2, [pc, #460]	@ (80077b0 <HAL_DMA_IRQHandler+0xa1c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d031      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a71      	ldr	r2, [pc, #452]	@ (80077b4 <HAL_DMA_IRQHandler+0xa20>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d02c      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a70      	ldr	r2, [pc, #448]	@ (80077b8 <HAL_DMA_IRQHandler+0xa24>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d027      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a6e      	ldr	r2, [pc, #440]	@ (80077bc <HAL_DMA_IRQHandler+0xa28>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d022      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a6d      	ldr	r2, [pc, #436]	@ (80077c0 <HAL_DMA_IRQHandler+0xa2c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d01d      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a6b      	ldr	r2, [pc, #428]	@ (80077c4 <HAL_DMA_IRQHandler+0xa30>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d018      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a6a      	ldr	r2, [pc, #424]	@ (80077c8 <HAL_DMA_IRQHandler+0xa34>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d013      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a68      	ldr	r2, [pc, #416]	@ (80077cc <HAL_DMA_IRQHandler+0xa38>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00e      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a67      	ldr	r2, [pc, #412]	@ (80077d0 <HAL_DMA_IRQHandler+0xa3c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d009      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a65      	ldr	r2, [pc, #404]	@ (80077d4 <HAL_DMA_IRQHandler+0xa40>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d004      	beq.n	800764c <HAL_DMA_IRQHandler+0x8b8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a64      	ldr	r2, [pc, #400]	@ (80077d8 <HAL_DMA_IRQHandler+0xa44>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d108      	bne.n	800765e <HAL_DMA_IRQHandler+0x8ca>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0201 	bic.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	e007      	b.n	800766e <HAL_DMA_IRQHandler+0x8da>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007676:	429a      	cmp	r2, r3
 8007678:	d307      	bcc.n	800768a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f2      	bne.n	800766e <HAL_DMA_IRQHandler+0x8da>
 8007688:	e000      	b.n	800768c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800768a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2203      	movs	r2, #3
 800769e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80076a2:	e003      	b.n	80076ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8272 	beq.w	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
 80076c6:	e26c      	b.n	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a43      	ldr	r2, [pc, #268]	@ (80077dc <HAL_DMA_IRQHandler+0xa48>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d022      	beq.n	8007718 <HAL_DMA_IRQHandler+0x984>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a42      	ldr	r2, [pc, #264]	@ (80077e0 <HAL_DMA_IRQHandler+0xa4c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d01d      	beq.n	8007718 <HAL_DMA_IRQHandler+0x984>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a40      	ldr	r2, [pc, #256]	@ (80077e4 <HAL_DMA_IRQHandler+0xa50>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d018      	beq.n	8007718 <HAL_DMA_IRQHandler+0x984>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a3f      	ldr	r2, [pc, #252]	@ (80077e8 <HAL_DMA_IRQHandler+0xa54>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d013      	beq.n	8007718 <HAL_DMA_IRQHandler+0x984>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a3d      	ldr	r2, [pc, #244]	@ (80077ec <HAL_DMA_IRQHandler+0xa58>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00e      	beq.n	8007718 <HAL_DMA_IRQHandler+0x984>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a3c      	ldr	r2, [pc, #240]	@ (80077f0 <HAL_DMA_IRQHandler+0xa5c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d009      	beq.n	8007718 <HAL_DMA_IRQHandler+0x984>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a3a      	ldr	r2, [pc, #232]	@ (80077f4 <HAL_DMA_IRQHandler+0xa60>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d004      	beq.n	8007718 <HAL_DMA_IRQHandler+0x984>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a39      	ldr	r2, [pc, #228]	@ (80077f8 <HAL_DMA_IRQHandler+0xa64>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d101      	bne.n	800771c <HAL_DMA_IRQHandler+0x988>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <HAL_DMA_IRQHandler+0x98a>
 800771c:	2300      	movs	r3, #0
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 823f 	beq.w	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2204      	movs	r2, #4
 8007736:	409a      	lsls	r2, r3
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 80cd 	beq.w	80078dc <HAL_DMA_IRQHandler+0xb48>
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80c7 	beq.w	80078dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007752:	f003 031f 	and.w	r3, r3, #31
 8007756:	2204      	movs	r2, #4
 8007758:	409a      	lsls	r2, r3
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d049      	beq.n	80077fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 8210 	beq.w	8007b9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007784:	e20a      	b.n	8007b9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8206 	beq.w	8007b9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007798:	e200      	b.n	8007b9c <HAL_DMA_IRQHandler+0xe08>
 800779a:	bf00      	nop
 800779c:	40020010 	.word	0x40020010
 80077a0:	40020028 	.word	0x40020028
 80077a4:	40020040 	.word	0x40020040
 80077a8:	40020058 	.word	0x40020058
 80077ac:	40020070 	.word	0x40020070
 80077b0:	40020088 	.word	0x40020088
 80077b4:	400200a0 	.word	0x400200a0
 80077b8:	400200b8 	.word	0x400200b8
 80077bc:	40020410 	.word	0x40020410
 80077c0:	40020428 	.word	0x40020428
 80077c4:	40020440 	.word	0x40020440
 80077c8:	40020458 	.word	0x40020458
 80077cc:	40020470 	.word	0x40020470
 80077d0:	40020488 	.word	0x40020488
 80077d4:	400204a0 	.word	0x400204a0
 80077d8:	400204b8 	.word	0x400204b8
 80077dc:	58025408 	.word	0x58025408
 80077e0:	5802541c 	.word	0x5802541c
 80077e4:	58025430 	.word	0x58025430
 80077e8:	58025444 	.word	0x58025444
 80077ec:	58025458 	.word	0x58025458
 80077f0:	5802546c 	.word	0x5802546c
 80077f4:	58025480 	.word	0x58025480
 80077f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d160      	bne.n	80078c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a7f      	ldr	r2, [pc, #508]	@ (8007a08 <HAL_DMA_IRQHandler+0xc74>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d04a      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a7d      	ldr	r2, [pc, #500]	@ (8007a0c <HAL_DMA_IRQHandler+0xc78>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d045      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a7c      	ldr	r2, [pc, #496]	@ (8007a10 <HAL_DMA_IRQHandler+0xc7c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d040      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a7a      	ldr	r2, [pc, #488]	@ (8007a14 <HAL_DMA_IRQHandler+0xc80>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d03b      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a79      	ldr	r2, [pc, #484]	@ (8007a18 <HAL_DMA_IRQHandler+0xc84>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d036      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a77      	ldr	r2, [pc, #476]	@ (8007a1c <HAL_DMA_IRQHandler+0xc88>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d031      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a76      	ldr	r2, [pc, #472]	@ (8007a20 <HAL_DMA_IRQHandler+0xc8c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d02c      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a74      	ldr	r2, [pc, #464]	@ (8007a24 <HAL_DMA_IRQHandler+0xc90>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d027      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a73      	ldr	r2, [pc, #460]	@ (8007a28 <HAL_DMA_IRQHandler+0xc94>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d022      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a71      	ldr	r2, [pc, #452]	@ (8007a2c <HAL_DMA_IRQHandler+0xc98>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d01d      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a70      	ldr	r2, [pc, #448]	@ (8007a30 <HAL_DMA_IRQHandler+0xc9c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d018      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a6e      	ldr	r2, [pc, #440]	@ (8007a34 <HAL_DMA_IRQHandler+0xca0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d013      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a6d      	ldr	r2, [pc, #436]	@ (8007a38 <HAL_DMA_IRQHandler+0xca4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00e      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a6b      	ldr	r2, [pc, #428]	@ (8007a3c <HAL_DMA_IRQHandler+0xca8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d009      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a6a      	ldr	r2, [pc, #424]	@ (8007a40 <HAL_DMA_IRQHandler+0xcac>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d004      	beq.n	80078a6 <HAL_DMA_IRQHandler+0xb12>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a68      	ldr	r2, [pc, #416]	@ (8007a44 <HAL_DMA_IRQHandler+0xcb0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d108      	bne.n	80078b8 <HAL_DMA_IRQHandler+0xb24>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0208 	bic.w	r2, r2, #8
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e007      	b.n	80078c8 <HAL_DMA_IRQHandler+0xb34>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0204 	bic.w	r2, r2, #4
 80078c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8165 	beq.w	8007b9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078da:	e15f      	b.n	8007b9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e0:	f003 031f 	and.w	r3, r3, #31
 80078e4:	2202      	movs	r2, #2
 80078e6:	409a      	lsls	r2, r3
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80c5 	beq.w	8007a7c <HAL_DMA_IRQHandler+0xce8>
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 80bf 	beq.w	8007a7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	2202      	movs	r2, #2
 8007908:	409a      	lsls	r2, r3
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d018      	beq.n	800794a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 813a 	beq.w	8007ba0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007934:	e134      	b.n	8007ba0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 8130 	beq.w	8007ba0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007948:	e12a      	b.n	8007ba0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 8089 	bne.w	8007a68 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a2b      	ldr	r2, [pc, #172]	@ (8007a08 <HAL_DMA_IRQHandler+0xc74>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d04a      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a29      	ldr	r2, [pc, #164]	@ (8007a0c <HAL_DMA_IRQHandler+0xc78>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d045      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a28      	ldr	r2, [pc, #160]	@ (8007a10 <HAL_DMA_IRQHandler+0xc7c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d040      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a26      	ldr	r2, [pc, #152]	@ (8007a14 <HAL_DMA_IRQHandler+0xc80>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d03b      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a25      	ldr	r2, [pc, #148]	@ (8007a18 <HAL_DMA_IRQHandler+0xc84>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d036      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a23      	ldr	r2, [pc, #140]	@ (8007a1c <HAL_DMA_IRQHandler+0xc88>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d031      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a22      	ldr	r2, [pc, #136]	@ (8007a20 <HAL_DMA_IRQHandler+0xc8c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d02c      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a20      	ldr	r2, [pc, #128]	@ (8007a24 <HAL_DMA_IRQHandler+0xc90>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d027      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007a28 <HAL_DMA_IRQHandler+0xc94>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d022      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a2c <HAL_DMA_IRQHandler+0xc98>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d01d      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a1c      	ldr	r2, [pc, #112]	@ (8007a30 <HAL_DMA_IRQHandler+0xc9c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d018      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007a34 <HAL_DMA_IRQHandler+0xca0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d013      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a19      	ldr	r2, [pc, #100]	@ (8007a38 <HAL_DMA_IRQHandler+0xca4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00e      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a17      	ldr	r2, [pc, #92]	@ (8007a3c <HAL_DMA_IRQHandler+0xca8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d009      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a16      	ldr	r2, [pc, #88]	@ (8007a40 <HAL_DMA_IRQHandler+0xcac>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d004      	beq.n	80079f6 <HAL_DMA_IRQHandler+0xc62>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a14      	ldr	r2, [pc, #80]	@ (8007a44 <HAL_DMA_IRQHandler+0xcb0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d128      	bne.n	8007a48 <HAL_DMA_IRQHandler+0xcb4>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0214 	bic.w	r2, r2, #20
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e027      	b.n	8007a58 <HAL_DMA_IRQHandler+0xcc4>
 8007a08:	40020010 	.word	0x40020010
 8007a0c:	40020028 	.word	0x40020028
 8007a10:	40020040 	.word	0x40020040
 8007a14:	40020058 	.word	0x40020058
 8007a18:	40020070 	.word	0x40020070
 8007a1c:	40020088 	.word	0x40020088
 8007a20:	400200a0 	.word	0x400200a0
 8007a24:	400200b8 	.word	0x400200b8
 8007a28:	40020410 	.word	0x40020410
 8007a2c:	40020428 	.word	0x40020428
 8007a30:	40020440 	.word	0x40020440
 8007a34:	40020458 	.word	0x40020458
 8007a38:	40020470 	.word	0x40020470
 8007a3c:	40020488 	.word	0x40020488
 8007a40:	400204a0 	.word	0x400204a0
 8007a44:	400204b8 	.word	0x400204b8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 020a 	bic.w	r2, r2, #10
 8007a56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8097 	beq.w	8007ba0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a7a:	e091      	b.n	8007ba0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a80:	f003 031f 	and.w	r3, r3, #31
 8007a84:	2208      	movs	r2, #8
 8007a86:	409a      	lsls	r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8088 	beq.w	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8082 	beq.w	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a41      	ldr	r2, [pc, #260]	@ (8007ba8 <HAL_DMA_IRQHandler+0xe14>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d04a      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a3f      	ldr	r2, [pc, #252]	@ (8007bac <HAL_DMA_IRQHandler+0xe18>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d045      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb0 <HAL_DMA_IRQHandler+0xe1c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d040      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8007bb4 <HAL_DMA_IRQHandler+0xe20>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d03b      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3b      	ldr	r2, [pc, #236]	@ (8007bb8 <HAL_DMA_IRQHandler+0xe24>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d036      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a39      	ldr	r2, [pc, #228]	@ (8007bbc <HAL_DMA_IRQHandler+0xe28>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d031      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a38      	ldr	r2, [pc, #224]	@ (8007bc0 <HAL_DMA_IRQHandler+0xe2c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d02c      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a36      	ldr	r2, [pc, #216]	@ (8007bc4 <HAL_DMA_IRQHandler+0xe30>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d027      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a35      	ldr	r2, [pc, #212]	@ (8007bc8 <HAL_DMA_IRQHandler+0xe34>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d022      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a33      	ldr	r2, [pc, #204]	@ (8007bcc <HAL_DMA_IRQHandler+0xe38>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d01d      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a32      	ldr	r2, [pc, #200]	@ (8007bd0 <HAL_DMA_IRQHandler+0xe3c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d018      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a30      	ldr	r2, [pc, #192]	@ (8007bd4 <HAL_DMA_IRQHandler+0xe40>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d013      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8007bd8 <HAL_DMA_IRQHandler+0xe44>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00e      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2d      	ldr	r2, [pc, #180]	@ (8007bdc <HAL_DMA_IRQHandler+0xe48>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d009      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8007be0 <HAL_DMA_IRQHandler+0xe4c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d004      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xdaa>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a2a      	ldr	r2, [pc, #168]	@ (8007be4 <HAL_DMA_IRQHandler+0xe50>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d108      	bne.n	8007b50 <HAL_DMA_IRQHandler+0xdbc>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 021c 	bic.w	r2, r2, #28
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	e007      	b.n	8007b60 <HAL_DMA_IRQHandler+0xdcc>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 020e 	bic.w	r2, r2, #14
 8007b5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b64:	f003 031f 	and.w	r3, r3, #31
 8007b68:	2201      	movs	r2, #1
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	4798      	blx	r3
 8007b96:	e004      	b.n	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007b98:	bf00      	nop
 8007b9a:	e002      	b.n	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b9c:	bf00      	nop
 8007b9e:	e000      	b.n	8007ba2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ba0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ba2:	3728      	adds	r7, #40	@ 0x28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	40020010 	.word	0x40020010
 8007bac:	40020028 	.word	0x40020028
 8007bb0:	40020040 	.word	0x40020040
 8007bb4:	40020058 	.word	0x40020058
 8007bb8:	40020070 	.word	0x40020070
 8007bbc:	40020088 	.word	0x40020088
 8007bc0:	400200a0 	.word	0x400200a0
 8007bc4:	400200b8 	.word	0x400200b8
 8007bc8:	40020410 	.word	0x40020410
 8007bcc:	40020428 	.word	0x40020428
 8007bd0:	40020440 	.word	0x40020440
 8007bd4:	40020458 	.word	0x40020458
 8007bd8:	40020470 	.word	0x40020470
 8007bdc:	40020488 	.word	0x40020488
 8007be0:	400204a0 	.word	0x400204a0
 8007be4:	400204b8 	.word	0x400204b8

08007be8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007bf6:	b2db      	uxtb	r3, r3
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c2e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c34:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a7f      	ldr	r2, [pc, #508]	@ (8007e38 <DMA_SetConfig+0x21c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d072      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a7d      	ldr	r2, [pc, #500]	@ (8007e3c <DMA_SetConfig+0x220>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d06d      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a7c      	ldr	r2, [pc, #496]	@ (8007e40 <DMA_SetConfig+0x224>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d068      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a7a      	ldr	r2, [pc, #488]	@ (8007e44 <DMA_SetConfig+0x228>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d063      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a79      	ldr	r2, [pc, #484]	@ (8007e48 <DMA_SetConfig+0x22c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d05e      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a77      	ldr	r2, [pc, #476]	@ (8007e4c <DMA_SetConfig+0x230>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d059      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a76      	ldr	r2, [pc, #472]	@ (8007e50 <DMA_SetConfig+0x234>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d054      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a74      	ldr	r2, [pc, #464]	@ (8007e54 <DMA_SetConfig+0x238>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d04f      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a73      	ldr	r2, [pc, #460]	@ (8007e58 <DMA_SetConfig+0x23c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d04a      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a71      	ldr	r2, [pc, #452]	@ (8007e5c <DMA_SetConfig+0x240>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d045      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a70      	ldr	r2, [pc, #448]	@ (8007e60 <DMA_SetConfig+0x244>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d040      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8007e64 <DMA_SetConfig+0x248>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d03b      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8007e68 <DMA_SetConfig+0x24c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d036      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a6b      	ldr	r2, [pc, #428]	@ (8007e6c <DMA_SetConfig+0x250>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d031      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a6a      	ldr	r2, [pc, #424]	@ (8007e70 <DMA_SetConfig+0x254>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d02c      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a68      	ldr	r2, [pc, #416]	@ (8007e74 <DMA_SetConfig+0x258>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d027      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a67      	ldr	r2, [pc, #412]	@ (8007e78 <DMA_SetConfig+0x25c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d022      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a65      	ldr	r2, [pc, #404]	@ (8007e7c <DMA_SetConfig+0x260>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d01d      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a64      	ldr	r2, [pc, #400]	@ (8007e80 <DMA_SetConfig+0x264>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d018      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a62      	ldr	r2, [pc, #392]	@ (8007e84 <DMA_SetConfig+0x268>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d013      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a61      	ldr	r2, [pc, #388]	@ (8007e88 <DMA_SetConfig+0x26c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00e      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a5f      	ldr	r2, [pc, #380]	@ (8007e8c <DMA_SetConfig+0x270>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d009      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a5e      	ldr	r2, [pc, #376]	@ (8007e90 <DMA_SetConfig+0x274>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d004      	beq.n	8007d26 <DMA_SetConfig+0x10a>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a5c      	ldr	r2, [pc, #368]	@ (8007e94 <DMA_SetConfig+0x278>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d101      	bne.n	8007d2a <DMA_SetConfig+0x10e>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <DMA_SetConfig+0x110>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00d      	beq.n	8007d4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007d38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a39      	ldr	r2, [pc, #228]	@ (8007e38 <DMA_SetConfig+0x21c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d04a      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a38      	ldr	r2, [pc, #224]	@ (8007e3c <DMA_SetConfig+0x220>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d045      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a36      	ldr	r2, [pc, #216]	@ (8007e40 <DMA_SetConfig+0x224>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d040      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a35      	ldr	r2, [pc, #212]	@ (8007e44 <DMA_SetConfig+0x228>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d03b      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a33      	ldr	r2, [pc, #204]	@ (8007e48 <DMA_SetConfig+0x22c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d036      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a32      	ldr	r2, [pc, #200]	@ (8007e4c <DMA_SetConfig+0x230>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d031      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a30      	ldr	r2, [pc, #192]	@ (8007e50 <DMA_SetConfig+0x234>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d02c      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a2f      	ldr	r2, [pc, #188]	@ (8007e54 <DMA_SetConfig+0x238>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d027      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a2d      	ldr	r2, [pc, #180]	@ (8007e58 <DMA_SetConfig+0x23c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d022      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a2c      	ldr	r2, [pc, #176]	@ (8007e5c <DMA_SetConfig+0x240>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d01d      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e60 <DMA_SetConfig+0x244>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d018      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a29      	ldr	r2, [pc, #164]	@ (8007e64 <DMA_SetConfig+0x248>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a27      	ldr	r2, [pc, #156]	@ (8007e68 <DMA_SetConfig+0x24c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00e      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a26      	ldr	r2, [pc, #152]	@ (8007e6c <DMA_SetConfig+0x250>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d009      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a24      	ldr	r2, [pc, #144]	@ (8007e70 <DMA_SetConfig+0x254>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <DMA_SetConfig+0x1d0>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a23      	ldr	r2, [pc, #140]	@ (8007e74 <DMA_SetConfig+0x258>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d101      	bne.n	8007df0 <DMA_SetConfig+0x1d4>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <DMA_SetConfig+0x1d6>
 8007df0:	2300      	movs	r3, #0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d059      	beq.n	8007eaa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dfa:	f003 031f 	and.w	r3, r3, #31
 8007dfe:	223f      	movs	r2, #63	@ 0x3f
 8007e00:	409a      	lsls	r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007e14:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	2b40      	cmp	r3, #64	@ 0x40
 8007e24:	d138      	bne.n	8007e98 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e36:	e086      	b.n	8007f46 <DMA_SetConfig+0x32a>
 8007e38:	40020010 	.word	0x40020010
 8007e3c:	40020028 	.word	0x40020028
 8007e40:	40020040 	.word	0x40020040
 8007e44:	40020058 	.word	0x40020058
 8007e48:	40020070 	.word	0x40020070
 8007e4c:	40020088 	.word	0x40020088
 8007e50:	400200a0 	.word	0x400200a0
 8007e54:	400200b8 	.word	0x400200b8
 8007e58:	40020410 	.word	0x40020410
 8007e5c:	40020428 	.word	0x40020428
 8007e60:	40020440 	.word	0x40020440
 8007e64:	40020458 	.word	0x40020458
 8007e68:	40020470 	.word	0x40020470
 8007e6c:	40020488 	.word	0x40020488
 8007e70:	400204a0 	.word	0x400204a0
 8007e74:	400204b8 	.word	0x400204b8
 8007e78:	58025408 	.word	0x58025408
 8007e7c:	5802541c 	.word	0x5802541c
 8007e80:	58025430 	.word	0x58025430
 8007e84:	58025444 	.word	0x58025444
 8007e88:	58025458 	.word	0x58025458
 8007e8c:	5802546c 	.word	0x5802546c
 8007e90:	58025480 	.word	0x58025480
 8007e94:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	60da      	str	r2, [r3, #12]
}
 8007ea8:	e04d      	b.n	8007f46 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a29      	ldr	r2, [pc, #164]	@ (8007f54 <DMA_SetConfig+0x338>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d022      	beq.n	8007efa <DMA_SetConfig+0x2de>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a27      	ldr	r2, [pc, #156]	@ (8007f58 <DMA_SetConfig+0x33c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d01d      	beq.n	8007efa <DMA_SetConfig+0x2de>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a26      	ldr	r2, [pc, #152]	@ (8007f5c <DMA_SetConfig+0x340>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d018      	beq.n	8007efa <DMA_SetConfig+0x2de>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a24      	ldr	r2, [pc, #144]	@ (8007f60 <DMA_SetConfig+0x344>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d013      	beq.n	8007efa <DMA_SetConfig+0x2de>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a23      	ldr	r2, [pc, #140]	@ (8007f64 <DMA_SetConfig+0x348>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00e      	beq.n	8007efa <DMA_SetConfig+0x2de>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	@ (8007f68 <DMA_SetConfig+0x34c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d009      	beq.n	8007efa <DMA_SetConfig+0x2de>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a20      	ldr	r2, [pc, #128]	@ (8007f6c <DMA_SetConfig+0x350>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d004      	beq.n	8007efa <DMA_SetConfig+0x2de>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f70 <DMA_SetConfig+0x354>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d101      	bne.n	8007efe <DMA_SetConfig+0x2e2>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <DMA_SetConfig+0x2e4>
 8007efe:	2300      	movs	r3, #0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d020      	beq.n	8007f46 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	2b40      	cmp	r3, #64	@ 0x40
 8007f22:	d108      	bne.n	8007f36 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	60da      	str	r2, [r3, #12]
}
 8007f34:	e007      	b.n	8007f46 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	60da      	str	r2, [r3, #12]
}
 8007f46:	bf00      	nop
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	58025408 	.word	0x58025408
 8007f58:	5802541c 	.word	0x5802541c
 8007f5c:	58025430 	.word	0x58025430
 8007f60:	58025444 	.word	0x58025444
 8007f64:	58025458 	.word	0x58025458
 8007f68:	5802546c 	.word	0x5802546c
 8007f6c:	58025480 	.word	0x58025480
 8007f70:	58025494 	.word	0x58025494

08007f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a42      	ldr	r2, [pc, #264]	@ (800808c <DMA_CalcBaseAndBitshift+0x118>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d04a      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a41      	ldr	r2, [pc, #260]	@ (8008090 <DMA_CalcBaseAndBitshift+0x11c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d045      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a3f      	ldr	r2, [pc, #252]	@ (8008094 <DMA_CalcBaseAndBitshift+0x120>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d040      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8008098 <DMA_CalcBaseAndBitshift+0x124>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d03b      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800809c <DMA_CalcBaseAndBitshift+0x128>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d036      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80080a0 <DMA_CalcBaseAndBitshift+0x12c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d031      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a39      	ldr	r2, [pc, #228]	@ (80080a4 <DMA_CalcBaseAndBitshift+0x130>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d02c      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a38      	ldr	r2, [pc, #224]	@ (80080a8 <DMA_CalcBaseAndBitshift+0x134>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d027      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a36      	ldr	r2, [pc, #216]	@ (80080ac <DMA_CalcBaseAndBitshift+0x138>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d022      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a35      	ldr	r2, [pc, #212]	@ (80080b0 <DMA_CalcBaseAndBitshift+0x13c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d01d      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a33      	ldr	r2, [pc, #204]	@ (80080b4 <DMA_CalcBaseAndBitshift+0x140>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d018      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a32      	ldr	r2, [pc, #200]	@ (80080b8 <DMA_CalcBaseAndBitshift+0x144>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d013      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a30      	ldr	r2, [pc, #192]	@ (80080bc <DMA_CalcBaseAndBitshift+0x148>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00e      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a2f      	ldr	r2, [pc, #188]	@ (80080c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d009      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a2d      	ldr	r2, [pc, #180]	@ (80080c4 <DMA_CalcBaseAndBitshift+0x150>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d004      	beq.n	800801c <DMA_CalcBaseAndBitshift+0xa8>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a2c      	ldr	r2, [pc, #176]	@ (80080c8 <DMA_CalcBaseAndBitshift+0x154>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d101      	bne.n	8008020 <DMA_CalcBaseAndBitshift+0xac>
 800801c:	2301      	movs	r3, #1
 800801e:	e000      	b.n	8008022 <DMA_CalcBaseAndBitshift+0xae>
 8008020:	2300      	movs	r3, #0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d024      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	3b10      	subs	r3, #16
 800802e:	4a27      	ldr	r2, [pc, #156]	@ (80080cc <DMA_CalcBaseAndBitshift+0x158>)
 8008030:	fba2 2303 	umull	r2, r3, r2, r3
 8008034:	091b      	lsrs	r3, r3, #4
 8008036:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f003 0307 	and.w	r3, r3, #7
 800803e:	4a24      	ldr	r2, [pc, #144]	@ (80080d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008040:	5cd3      	ldrb	r3, [r2, r3]
 8008042:	461a      	mov	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b03      	cmp	r3, #3
 800804c:	d908      	bls.n	8008060 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	4b1f      	ldr	r3, [pc, #124]	@ (80080d4 <DMA_CalcBaseAndBitshift+0x160>)
 8008056:	4013      	ands	r3, r2
 8008058:	1d1a      	adds	r2, r3, #4
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	659a      	str	r2, [r3, #88]	@ 0x58
 800805e:	e00d      	b.n	800807c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	4b1b      	ldr	r3, [pc, #108]	@ (80080d4 <DMA_CalcBaseAndBitshift+0x160>)
 8008068:	4013      	ands	r3, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6593      	str	r3, [r2, #88]	@ 0x58
 800806e:	e005      	b.n	800807c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	40020010 	.word	0x40020010
 8008090:	40020028 	.word	0x40020028
 8008094:	40020040 	.word	0x40020040
 8008098:	40020058 	.word	0x40020058
 800809c:	40020070 	.word	0x40020070
 80080a0:	40020088 	.word	0x40020088
 80080a4:	400200a0 	.word	0x400200a0
 80080a8:	400200b8 	.word	0x400200b8
 80080ac:	40020410 	.word	0x40020410
 80080b0:	40020428 	.word	0x40020428
 80080b4:	40020440 	.word	0x40020440
 80080b8:	40020458 	.word	0x40020458
 80080bc:	40020470 	.word	0x40020470
 80080c0:	40020488 	.word	0x40020488
 80080c4:	400204a0 	.word	0x400204a0
 80080c8:	400204b8 	.word	0x400204b8
 80080cc:	aaaaaaab 	.word	0xaaaaaaab
 80080d0:	0801efc8 	.word	0x0801efc8
 80080d4:	fffffc00 	.word	0xfffffc00

080080d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d120      	bne.n	800812e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d858      	bhi.n	80081a6 <DMA_CheckFifoParam+0xce>
 80080f4:	a201      	add	r2, pc, #4	@ (adr r2, 80080fc <DMA_CheckFifoParam+0x24>)
 80080f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fa:	bf00      	nop
 80080fc:	0800810d 	.word	0x0800810d
 8008100:	0800811f 	.word	0x0800811f
 8008104:	0800810d 	.word	0x0800810d
 8008108:	080081a7 	.word	0x080081a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d048      	beq.n	80081aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800811c:	e045      	b.n	80081aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008126:	d142      	bne.n	80081ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800812c:	e03f      	b.n	80081ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008136:	d123      	bne.n	8008180 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813c:	2b03      	cmp	r3, #3
 800813e:	d838      	bhi.n	80081b2 <DMA_CheckFifoParam+0xda>
 8008140:	a201      	add	r2, pc, #4	@ (adr r2, 8008148 <DMA_CheckFifoParam+0x70>)
 8008142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008146:	bf00      	nop
 8008148:	08008159 	.word	0x08008159
 800814c:	0800815f 	.word	0x0800815f
 8008150:	08008159 	.word	0x08008159
 8008154:	08008171 	.word	0x08008171
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	73fb      	strb	r3, [r7, #15]
        break;
 800815c:	e030      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d025      	beq.n	80081b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800816e:	e022      	b.n	80081b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008178:	d11f      	bne.n	80081ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800817e:	e01c      	b.n	80081ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008184:	2b02      	cmp	r3, #2
 8008186:	d902      	bls.n	800818e <DMA_CheckFifoParam+0xb6>
 8008188:	2b03      	cmp	r3, #3
 800818a:	d003      	beq.n	8008194 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800818c:	e018      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	73fb      	strb	r3, [r7, #15]
        break;
 8008192:	e015      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00e      	beq.n	80081be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	73fb      	strb	r3, [r7, #15]
    break;
 80081a4:	e00b      	b.n	80081be <DMA_CheckFifoParam+0xe6>
        break;
 80081a6:	bf00      	nop
 80081a8:	e00a      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>
        break;
 80081aa:	bf00      	nop
 80081ac:	e008      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>
        break;
 80081ae:	bf00      	nop
 80081b0:	e006      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>
        break;
 80081b2:	bf00      	nop
 80081b4:	e004      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>
        break;
 80081b6:	bf00      	nop
 80081b8:	e002      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>
        break;
 80081ba:	bf00      	nop
 80081bc:	e000      	b.n	80081c0 <DMA_CheckFifoParam+0xe8>
    break;
 80081be:	bf00      	nop
    }
  }

  return status;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop

080081d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a38      	ldr	r2, [pc, #224]	@ (80082c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d022      	beq.n	800822e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a36      	ldr	r2, [pc, #216]	@ (80082c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d01d      	beq.n	800822e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a35      	ldr	r2, [pc, #212]	@ (80082cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d018      	beq.n	800822e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a33      	ldr	r2, [pc, #204]	@ (80082d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d013      	beq.n	800822e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a32      	ldr	r2, [pc, #200]	@ (80082d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00e      	beq.n	800822e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a30      	ldr	r2, [pc, #192]	@ (80082d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d009      	beq.n	800822e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a2f      	ldr	r2, [pc, #188]	@ (80082dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a2d      	ldr	r2, [pc, #180]	@ (80082e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d101      	bne.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800822e:	2301      	movs	r3, #1
 8008230:	e000      	b.n	8008234 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008232:	2300      	movs	r3, #0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01a      	beq.n	800826e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	3b08      	subs	r3, #8
 8008240:	4a28      	ldr	r2, [pc, #160]	@ (80082e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	091b      	lsrs	r3, r3, #4
 8008248:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4b26      	ldr	r3, [pc, #152]	@ (80082e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	461a      	mov	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a24      	ldr	r2, [pc, #144]	@ (80082ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800825c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2201      	movs	r2, #1
 8008266:	409a      	lsls	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800826c:	e024      	b.n	80082b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	3b10      	subs	r3, #16
 8008276:	4a1e      	ldr	r2, [pc, #120]	@ (80082f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008278:	fba2 2303 	umull	r2, r3, r2, r3
 800827c:	091b      	lsrs	r3, r3, #4
 800827e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4a1c      	ldr	r2, [pc, #112]	@ (80082f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d806      	bhi.n	8008296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	4a1b      	ldr	r2, [pc, #108]	@ (80082f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d902      	bls.n	8008296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3308      	adds	r3, #8
 8008294:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4b18      	ldr	r3, [pc, #96]	@ (80082fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	461a      	mov	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a16      	ldr	r2, [pc, #88]	@ (8008300 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80082a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f003 031f 	and.w	r3, r3, #31
 80082b0:	2201      	movs	r2, #1
 80082b2:	409a      	lsls	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80082b8:	bf00      	nop
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	58025408 	.word	0x58025408
 80082c8:	5802541c 	.word	0x5802541c
 80082cc:	58025430 	.word	0x58025430
 80082d0:	58025444 	.word	0x58025444
 80082d4:	58025458 	.word	0x58025458
 80082d8:	5802546c 	.word	0x5802546c
 80082dc:	58025480 	.word	0x58025480
 80082e0:	58025494 	.word	0x58025494
 80082e4:	cccccccd 	.word	0xcccccccd
 80082e8:	16009600 	.word	0x16009600
 80082ec:	58025880 	.word	0x58025880
 80082f0:	aaaaaaab 	.word	0xaaaaaaab
 80082f4:	400204b8 	.word	0x400204b8
 80082f8:	4002040f 	.word	0x4002040f
 80082fc:	10008200 	.word	0x10008200
 8008300:	40020880 	.word	0x40020880

08008304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	b2db      	uxtb	r3, r3
 8008312:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d04a      	beq.n	80083b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b08      	cmp	r3, #8
 800831e:	d847      	bhi.n	80083b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a25      	ldr	r2, [pc, #148]	@ (80083bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d022      	beq.n	8008370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a24      	ldr	r2, [pc, #144]	@ (80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d01d      	beq.n	8008370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a22      	ldr	r2, [pc, #136]	@ (80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d018      	beq.n	8008370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a21      	ldr	r2, [pc, #132]	@ (80083c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d013      	beq.n	8008370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a1f      	ldr	r2, [pc, #124]	@ (80083cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00e      	beq.n	8008370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1e      	ldr	r2, [pc, #120]	@ (80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d009      	beq.n	8008370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1c      	ldr	r2, [pc, #112]	@ (80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1b      	ldr	r2, [pc, #108]	@ (80083d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d101      	bne.n	8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008370:	2301      	movs	r3, #1
 8008372:	e000      	b.n	8008376 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008374:	2300      	movs	r3, #0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	4b17      	ldr	r3, [pc, #92]	@ (80083dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	461a      	mov	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a15      	ldr	r2, [pc, #84]	@ (80083e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800838c:	671a      	str	r2, [r3, #112]	@ 0x70
 800838e:	e009      	b.n	80083a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4b14      	ldr	r3, [pc, #80]	@ (80083e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	461a      	mov	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a11      	ldr	r2, [pc, #68]	@ (80083e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80083a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	2201      	movs	r2, #1
 80083aa:	409a      	lsls	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80083b0:	bf00      	nop
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	58025408 	.word	0x58025408
 80083c0:	5802541c 	.word	0x5802541c
 80083c4:	58025430 	.word	0x58025430
 80083c8:	58025444 	.word	0x58025444
 80083cc:	58025458 	.word	0x58025458
 80083d0:	5802546c 	.word	0x5802546c
 80083d4:	58025480 	.word	0x58025480
 80083d8:	58025494 	.word	0x58025494
 80083dc:	1600963f 	.word	0x1600963f
 80083e0:	58025940 	.word	0x58025940
 80083e4:	1000823f 	.word	0x1000823f
 80083e8:	40020940 	.word	0x40020940

080083ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b089      	sub	sp, #36	@ 0x24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80083fa:	4b89      	ldr	r3, [pc, #548]	@ (8008620 <HAL_GPIO_Init+0x234>)
 80083fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083fe:	e194      	b.n	800872a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	2101      	movs	r1, #1
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	fa01 f303 	lsl.w	r3, r1, r3
 800840c:	4013      	ands	r3, r2
 800840e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8186 	beq.w	8008724 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f003 0303 	and.w	r3, r3, #3
 8008420:	2b01      	cmp	r3, #1
 8008422:	d005      	beq.n	8008430 <HAL_GPIO_Init+0x44>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f003 0303 	and.w	r3, r3, #3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d130      	bne.n	8008492 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	2203      	movs	r2, #3
 800843c:	fa02 f303 	lsl.w	r3, r2, r3
 8008440:	43db      	mvns	r3, r3
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	4013      	ands	r3, r2
 8008446:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	fa02 f303 	lsl.w	r3, r2, r3
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	4313      	orrs	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008466:	2201      	movs	r2, #1
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	fa02 f303 	lsl.w	r3, r2, r3
 800846e:	43db      	mvns	r3, r3
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	4013      	ands	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	091b      	lsrs	r3, r3, #4
 800847c:	f003 0201 	and.w	r2, r3, #1
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	4313      	orrs	r3, r2
 800848a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b03      	cmp	r3, #3
 800849c:	d017      	beq.n	80084ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	2203      	movs	r2, #3
 80084aa:	fa02 f303 	lsl.w	r3, r2, r3
 80084ae:	43db      	mvns	r3, r3
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	4013      	ands	r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d123      	bne.n	8008522 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	08da      	lsrs	r2, r3, #3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3208      	adds	r2, #8
 80084e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	220f      	movs	r2, #15
 80084f2:	fa02 f303 	lsl.w	r3, r2, r3
 80084f6:	43db      	mvns	r3, r3
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	4013      	ands	r3, r2
 80084fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	691a      	ldr	r2, [r3, #16]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	4313      	orrs	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	08da      	lsrs	r2, r3, #3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3208      	adds	r2, #8
 800851c:	69b9      	ldr	r1, [r7, #24]
 800851e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	2203      	movs	r2, #3
 800852e:	fa02 f303 	lsl.w	r3, r2, r3
 8008532:	43db      	mvns	r3, r3
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	4013      	ands	r3, r2
 8008538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f003 0203 	and.w	r2, r3, #3
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	4313      	orrs	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80e0 	beq.w	8008724 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008564:	4b2f      	ldr	r3, [pc, #188]	@ (8008624 <HAL_GPIO_Init+0x238>)
 8008566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800856a:	4a2e      	ldr	r2, [pc, #184]	@ (8008624 <HAL_GPIO_Init+0x238>)
 800856c:	f043 0302 	orr.w	r3, r3, #2
 8008570:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008574:	4b2b      	ldr	r3, [pc, #172]	@ (8008624 <HAL_GPIO_Init+0x238>)
 8008576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008582:	4a29      	ldr	r2, [pc, #164]	@ (8008628 <HAL_GPIO_Init+0x23c>)
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	3302      	adds	r3, #2
 800858a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800858e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	220f      	movs	r2, #15
 800859a:	fa02 f303 	lsl.w	r3, r2, r3
 800859e:	43db      	mvns	r3, r3
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	4013      	ands	r3, r2
 80085a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a20      	ldr	r2, [pc, #128]	@ (800862c <HAL_GPIO_Init+0x240>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d052      	beq.n	8008654 <HAL_GPIO_Init+0x268>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008630 <HAL_GPIO_Init+0x244>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d031      	beq.n	800861a <HAL_GPIO_Init+0x22e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008634 <HAL_GPIO_Init+0x248>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d02b      	beq.n	8008616 <HAL_GPIO_Init+0x22a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008638 <HAL_GPIO_Init+0x24c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d025      	beq.n	8008612 <HAL_GPIO_Init+0x226>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a1c      	ldr	r2, [pc, #112]	@ (800863c <HAL_GPIO_Init+0x250>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d01f      	beq.n	800860e <HAL_GPIO_Init+0x222>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008640 <HAL_GPIO_Init+0x254>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d019      	beq.n	800860a <HAL_GPIO_Init+0x21e>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008644 <HAL_GPIO_Init+0x258>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d013      	beq.n	8008606 <HAL_GPIO_Init+0x21a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a19      	ldr	r2, [pc, #100]	@ (8008648 <HAL_GPIO_Init+0x25c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00d      	beq.n	8008602 <HAL_GPIO_Init+0x216>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a18      	ldr	r2, [pc, #96]	@ (800864c <HAL_GPIO_Init+0x260>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d007      	beq.n	80085fe <HAL_GPIO_Init+0x212>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a17      	ldr	r2, [pc, #92]	@ (8008650 <HAL_GPIO_Init+0x264>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d101      	bne.n	80085fa <HAL_GPIO_Init+0x20e>
 80085f6:	2309      	movs	r3, #9
 80085f8:	e02d      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 80085fa:	230a      	movs	r3, #10
 80085fc:	e02b      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 80085fe:	2308      	movs	r3, #8
 8008600:	e029      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 8008602:	2307      	movs	r3, #7
 8008604:	e027      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 8008606:	2306      	movs	r3, #6
 8008608:	e025      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 800860a:	2305      	movs	r3, #5
 800860c:	e023      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 800860e:	2304      	movs	r3, #4
 8008610:	e021      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 8008612:	2303      	movs	r3, #3
 8008614:	e01f      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 8008616:	2302      	movs	r3, #2
 8008618:	e01d      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 800861a:	2301      	movs	r3, #1
 800861c:	e01b      	b.n	8008656 <HAL_GPIO_Init+0x26a>
 800861e:	bf00      	nop
 8008620:	58000080 	.word	0x58000080
 8008624:	58024400 	.word	0x58024400
 8008628:	58000400 	.word	0x58000400
 800862c:	58020000 	.word	0x58020000
 8008630:	58020400 	.word	0x58020400
 8008634:	58020800 	.word	0x58020800
 8008638:	58020c00 	.word	0x58020c00
 800863c:	58021000 	.word	0x58021000
 8008640:	58021400 	.word	0x58021400
 8008644:	58021800 	.word	0x58021800
 8008648:	58021c00 	.word	0x58021c00
 800864c:	58022000 	.word	0x58022000
 8008650:	58022400 	.word	0x58022400
 8008654:	2300      	movs	r3, #0
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	f002 0203 	and.w	r2, r2, #3
 800865c:	0092      	lsls	r2, r2, #2
 800865e:	4093      	lsls	r3, r2
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	4313      	orrs	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008666:	4938      	ldr	r1, [pc, #224]	@ (8008748 <HAL_GPIO_Init+0x35c>)
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	089b      	lsrs	r3, r3, #2
 800866c:	3302      	adds	r3, #2
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	43db      	mvns	r3, r3
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	4013      	ands	r3, r2
 8008684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800869a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80086a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	43db      	mvns	r3, r3
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	4013      	ands	r3, r2
 80086b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d003      	beq.n	80086c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80086c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	43db      	mvns	r3, r3
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	4013      	ands	r3, r2
 80086de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	43db      	mvns	r3, r3
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	4013      	ands	r3, r2
 8008708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3301      	adds	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	fa22 f303 	lsr.w	r3, r2, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	f47f ae63 	bne.w	8008400 <HAL_GPIO_Init+0x14>
  }
}
 800873a:	bf00      	nop
 800873c:	bf00      	nop
 800873e:	3724      	adds	r7, #36	@ 0x24
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	58000400 	.word	0x58000400

0800874c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691a      	ldr	r2, [r3, #16]
 800875c:	887b      	ldrh	r3, [r7, #2]
 800875e:	4013      	ands	r3, r2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008764:	2301      	movs	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
 8008768:	e001      	b.n	800876e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	807b      	strh	r3, [r7, #2]
 8008788:	4613      	mov	r3, r2
 800878a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800878c:	787b      	ldrb	r3, [r7, #1]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008792:	887a      	ldrh	r2, [r7, #2]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008798:	e003      	b.n	80087a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800879a:	887b      	ldrh	r3, [r7, #2]
 800879c:	041a      	lsls	r2, r3, #16
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	619a      	str	r2, [r3, #24]
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
	...

080087b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e08b      	b.n	80088da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d106      	bne.n	80087dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7f9 fdc4 	bl	8002364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2224      	movs	r2, #36	@ 0x24
 80087e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0201 	bic.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008800:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008810:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d107      	bne.n	800882a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008826:	609a      	str	r2, [r3, #8]
 8008828:	e006      	b.n	8008838 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008836:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	2b02      	cmp	r3, #2
 800883e:	d108      	bne.n	8008852 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800884e:	605a      	str	r2, [r3, #4]
 8008850:	e007      	b.n	8008862 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6859      	ldr	r1, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	4b1d      	ldr	r3, [pc, #116]	@ (80088e4 <HAL_I2C_Init+0x134>)
 800886e:	430b      	orrs	r3, r1
 8008870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	69d9      	ldr	r1, [r3, #28]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a1a      	ldr	r2, [r3, #32]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0201 	orr.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	02008000 	.word	0x02008000

080088e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	461a      	mov	r2, r3
 80088f4:	460b      	mov	r3, r1
 80088f6:	817b      	strh	r3, [r7, #10]
 80088f8:	4613      	mov	r3, r2
 80088fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b20      	cmp	r3, #32
 8008906:	f040 80fd 	bne.w	8008b04 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_I2C_Master_Transmit+0x30>
 8008914:	2302      	movs	r3, #2
 8008916:	e0f6      	b.n	8008b06 <HAL_I2C_Master_Transmit+0x21e>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008920:	f7fb fa98 	bl	8003e54 <HAL_GetTick>
 8008924:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	2319      	movs	r3, #25
 800892c:	2201      	movs	r2, #1
 800892e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f002 f994 	bl	800ac60 <I2C_WaitOnFlagUntilTimeout>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e0e1      	b.n	8008b06 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2221      	movs	r2, #33	@ 0x21
 8008946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2210      	movs	r2, #16
 800894e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	893a      	ldrh	r2, [r7, #8]
 8008962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800896e:	b29b      	uxth	r3, r3
 8008970:	2bff      	cmp	r3, #255	@ 0xff
 8008972:	d906      	bls.n	8008982 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	22ff      	movs	r2, #255	@ 0xff
 8008978:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800897a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e007      	b.n	8008992 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008986:	b29a      	uxth	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800898c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008990:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	d024      	beq.n	80089e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	3301      	adds	r3, #1
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	8979      	ldrh	r1, [r7, #10]
 80089d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008b10 <HAL_I2C_Master_Transmit+0x228>)
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f002 fb8f 	bl	800b100 <I2C_TransferConfig>
 80089e2:	e066      	b.n	8008ab2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	8979      	ldrh	r1, [r7, #10]
 80089ec:	4b48      	ldr	r3, [pc, #288]	@ (8008b10 <HAL_I2C_Master_Transmit+0x228>)
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f002 fb84 	bl	800b100 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80089f8:	e05b      	b.n	8008ab2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	6a39      	ldr	r1, [r7, #32]
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f002 f987 	bl	800ad12 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e07b      	b.n	8008b06 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d034      	beq.n	8008ab2 <HAL_I2C_Master_Transmit+0x1ca>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d130      	bne.n	8008ab2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	2200      	movs	r2, #0
 8008a58:	2180      	movs	r1, #128	@ 0x80
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f002 f900 	bl	800ac60 <I2C_WaitOnFlagUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e04d      	b.n	8008b06 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2bff      	cmp	r3, #255	@ 0xff
 8008a72:	d90e      	bls.n	8008a92 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	22ff      	movs	r2, #255	@ 0xff
 8008a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	8979      	ldrh	r1, [r7, #10]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f002 fb38 	bl	800b100 <I2C_TransferConfig>
 8008a90:	e00f      	b.n	8008ab2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	8979      	ldrh	r1, [r7, #10]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f002 fb27 	bl	800b100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d19e      	bne.n	80089fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	6a39      	ldr	r1, [r7, #32]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f002 f96d 	bl	800ada0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e01a      	b.n	8008b06 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8008b14 <HAL_I2C_Master_Transmit+0x22c>)
 8008ae4:	400b      	ands	r3, r1
 8008ae6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e000      	b.n	8008b06 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
  }
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	80002000 	.word	0x80002000
 8008b14:	fe00e800 	.word	0xfe00e800

08008b18 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	607a      	str	r2, [r7, #4]
 8008b22:	461a      	mov	r2, r3
 8008b24:	460b      	mov	r3, r1
 8008b26:	817b      	strh	r3, [r7, #10]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b20      	cmp	r3, #32
 8008b36:	f040 80db 	bne.w	8008cf0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_I2C_Master_Receive+0x30>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e0d4      	b.n	8008cf2 <HAL_I2C_Master_Receive+0x1da>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b50:	f7fb f980 	bl	8003e54 <HAL_GetTick>
 8008b54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	2319      	movs	r3, #25
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f002 f87c 	bl	800ac60 <I2C_WaitOnFlagUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e0bf      	b.n	8008cf2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2222      	movs	r2, #34	@ 0x22
 8008b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2210      	movs	r2, #16
 8008b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	893a      	ldrh	r2, [r7, #8]
 8008b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	2bff      	cmp	r3, #255	@ 0xff
 8008ba2:	d90e      	bls.n	8008bc2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	22ff      	movs	r2, #255	@ 0xff
 8008ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	8979      	ldrh	r1, [r7, #10]
 8008bb2:	4b52      	ldr	r3, [pc, #328]	@ (8008cfc <HAL_I2C_Master_Receive+0x1e4>)
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f002 faa0 	bl	800b100 <I2C_TransferConfig>
 8008bc0:	e06d      	b.n	8008c9e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	8979      	ldrh	r1, [r7, #10]
 8008bd4:	4b49      	ldr	r3, [pc, #292]	@ (8008cfc <HAL_I2C_Master_Receive+0x1e4>)
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f002 fa8f 	bl	800b100 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008be2:	e05c      	b.n	8008c9e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	6a39      	ldr	r1, [r7, #32]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f002 f91d 	bl	800ae28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e07c      	b.n	8008cf2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d034      	beq.n	8008c9e <HAL_I2C_Master_Receive+0x186>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d130      	bne.n	8008c9e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	2200      	movs	r2, #0
 8008c44:	2180      	movs	r1, #128	@ 0x80
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f002 f80a 	bl	800ac60 <I2C_WaitOnFlagUntilTimeout>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e04d      	b.n	8008cf2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2bff      	cmp	r3, #255	@ 0xff
 8008c5e:	d90e      	bls.n	8008c7e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	22ff      	movs	r2, #255	@ 0xff
 8008c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	8979      	ldrh	r1, [r7, #10]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f002 fa42 	bl	800b100 <I2C_TransferConfig>
 8008c7c:	e00f      	b.n	8008c9e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	8979      	ldrh	r1, [r7, #10]
 8008c90:	2300      	movs	r3, #0
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f002 fa31 	bl	800b100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d19d      	bne.n	8008be4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	6a39      	ldr	r1, [r7, #32]
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f002 f877 	bl	800ada0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e01a      	b.n	8008cf2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6859      	ldr	r1, [r3, #4]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	4b0c      	ldr	r3, [pc, #48]	@ (8008d00 <HAL_I2C_Master_Receive+0x1e8>)
 8008cd0:	400b      	ands	r3, r1
 8008cd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e000      	b.n	8008cf2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008cf0:	2302      	movs	r3, #2
  }
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	80002400 	.word	0x80002400
 8008d00:	fe00e800 	.word	0xfe00e800

08008d04 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	@ 0x28
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	607a      	str	r2, [r7, #4]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	460b      	mov	r3, r1
 8008d12:	817b      	strh	r3, [r7, #10]
 8008d14:	4613      	mov	r3, r2
 8008d16:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	f040 80ef 	bne.w	8008f08 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d38:	d101      	bne.n	8008d3e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e0e5      	b.n	8008f0a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_I2C_Master_Transmit_DMA+0x48>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e0de      	b.n	8008f0a <HAL_I2C_Master_Transmit_DMA+0x206>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2221      	movs	r2, #33	@ 0x21
 8008d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	893a      	ldrh	r2, [r7, #8]
 8008d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4a66      	ldr	r2, [pc, #408]	@ (8008f14 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8008d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4a66      	ldr	r2, [pc, #408]	@ (8008f18 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8008d80:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2bff      	cmp	r3, #255	@ 0xff
 8008d8a:	d906      	bls.n	8008d9a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	22ff      	movs	r2, #255	@ 0xff
 8008d90:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008d92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e007      	b.n	8008daa <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008da4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008da8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d01a      	beq.n	8008de8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db6:	781a      	ldrb	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dcc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d074      	beq.n	8008eda <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d022      	beq.n	8008e3e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfc:	4a47      	ldr	r2, [pc, #284]	@ (8008f1c <HAL_I2C_Master_Transmit_DMA+0x218>)
 8008dfe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e04:	4a46      	ldr	r2, [pc, #280]	@ (8008f20 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8008e06:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e14:	2200      	movs	r2, #0
 8008e16:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e20:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008e28:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008e2e:	f7fc ffe3 	bl	8005df8 <HAL_DMA_Start_IT>
 8008e32:	4603      	mov	r3, r0
 8008e34:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d13a      	bne.n	8008eb2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8008e3c:	e013      	b.n	8008e66 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e051      	b.n	8008f0a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	8979      	ldrh	r1, [r7, #10]
 8008e72:	4b2c      	ldr	r3, [pc, #176]	@ (8008f24 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f002 f941 	bl	800b100 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008e98:	2110      	movs	r1, #16
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f002 f962 	bl	800b164 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	e028      	b.n	8008f04 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec6:	f043 0210 	orr.w	r2, r3, #16
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e017      	b.n	8008f0a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	4a12      	ldr	r2, [pc, #72]	@ (8008f28 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8008ede:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	8979      	ldrh	r1, [r7, #10]
 8008ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f24 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f002 f906 	bl	800b100 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008efc:	2101      	movs	r1, #1
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f002 f930 	bl	800b164 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	e000      	b.n	8008f0a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008f08:	2302      	movs	r3, #2
  }
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	ffff0000 	.word	0xffff0000
 8008f18:	08009563 	.word	0x08009563
 8008f1c:	0800a91b 	.word	0x0800a91b
 8008f20:	0800a9b1 	.word	0x0800a9b1
 8008f24:	80002000 	.word	0x80002000
 8008f28:	080090f3 	.word	0x080090f3

08008f2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	68f9      	ldr	r1, [r7, #12]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
  }
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d010      	beq.n	8008fa6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	09db      	lsrs	r3, r3, #7
 8008f88:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f94:	f043 0201 	orr.w	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fa4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	0a9b      	lsrs	r3, r3, #10
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d010      	beq.n	8008fd4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	09db      	lsrs	r3, r3, #7
 8008fb6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fc2:	f043 0208 	orr.w	r2, r3, #8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008fd2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	0a5b      	lsrs	r3, r3, #9
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d010      	beq.n	8009002 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	09db      	lsrs	r3, r3, #7
 8008fe4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff0:	f043 0202 	orr.w	r2, r3, #2
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009000:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009006:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f003 030b 	and.w	r3, r3, #11
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 fb45 	bl	800a6a4 <I2C_ITError>
  }
}
 800901a:	bf00      	nop
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009066:	bf00      	nop
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	70fb      	strb	r3, [r7, #3]
 800907e:	4613      	mov	r3, r2
 8009080:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80090d2:	bf00      	nop
 80090d4:	370c      	adds	r7, #12
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b088      	sub	sp, #32
 80090f6:	af02      	add	r7, sp, #8
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009108:	2b01      	cmp	r3, #1
 800910a:	d101      	bne.n	8009110 <I2C_Master_ISR_IT+0x1e>
 800910c:	2302      	movs	r3, #2
 800910e:	e120      	b.n	8009352 <I2C_Master_ISR_IT+0x260>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	091b      	lsrs	r3, r3, #4
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	2b00      	cmp	r3, #0
 8009122:	d013      	beq.n	800914c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	091b      	lsrs	r3, r3, #4
 8009128:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00d      	beq.n	800914c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2210      	movs	r2, #16
 8009136:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800913c:	f043 0204 	orr.w	r2, r3, #4
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f001 fbc4 	bl	800a8d2 <I2C_Flush_TXDR>
 800914a:	e0ed      	b.n	8009328 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d023      	beq.n	80091a0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	089b      	lsrs	r3, r3, #2
 800915c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01d      	beq.n	80091a0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f023 0304 	bic.w	r3, r3, #4
 800916a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009188:	3b01      	subs	r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800919e:	e0c3      	b.n	8009328 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	099b      	lsrs	r3, r3, #6
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d12a      	bne.n	8009202 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	085b      	lsrs	r3, r3, #1
 80091b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d024      	beq.n	8009202 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01e      	beq.n	8009202 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 80ac 	beq.w	8009328 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	781a      	ldrb	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8009200:	e092      	b.n	8009328 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	09db      	lsrs	r3, r3, #7
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d05d      	beq.n	80092ca <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	099b      	lsrs	r3, r3, #6
 8009212:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009216:	2b00      	cmp	r3, #0
 8009218:	d057      	beq.n	80092ca <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d040      	beq.n	80092a6 <I2C_Master_ISR_IT+0x1b4>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009228:	2b00      	cmp	r3, #0
 800922a:	d13c      	bne.n	80092a6 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	b29b      	uxth	r3, r3
 8009234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009238:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800923e:	b29b      	uxth	r3, r3
 8009240:	2bff      	cmp	r3, #255	@ 0xff
 8009242:	d90e      	bls.n	8009262 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	22ff      	movs	r2, #255	@ 0xff
 8009248:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800924e:	b2da      	uxtb	r2, r3
 8009250:	8a79      	ldrh	r1, [r7, #18]
 8009252:	2300      	movs	r3, #0
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f001 ff50 	bl	800b100 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009260:	e032      	b.n	80092c8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009274:	d00b      	beq.n	800928e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800927a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009280:	8a79      	ldrh	r1, [r7, #18]
 8009282:	2000      	movs	r0, #0
 8009284:	9000      	str	r0, [sp, #0]
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f001 ff3a 	bl	800b100 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800928c:	e01c      	b.n	80092c8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009292:	b2da      	uxtb	r2, r3
 8009294:	8a79      	ldrh	r1, [r7, #18]
 8009296:	2300      	movs	r3, #0
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f001 ff2e 	bl	800b100 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092a4:	e010      	b.n	80092c8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092b4:	d003      	beq.n	80092be <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fdde 	bl	8009e78 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092bc:	e034      	b.n	8009328 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80092be:	2140      	movs	r1, #64	@ 0x40
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f001 f9ef 	bl	800a6a4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092c6:	e02f      	b.n	8009328 <I2C_Master_ISR_IT+0x236>
 80092c8:	e02e      	b.n	8009328 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	099b      	lsrs	r3, r3, #6
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d028      	beq.n	8009328 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	099b      	lsrs	r3, r3, #6
 80092da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d022      	beq.n	8009328 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d119      	bne.n	8009320 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092fa:	d015      	beq.n	8009328 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009300:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009304:	d108      	bne.n	8009318 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	e007      	b.n	8009328 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 fdad 	bl	8009e78 <I2C_ITMasterSeqCplt>
 800931e:	e003      	b.n	8009328 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009320:	2140      	movs	r1, #64	@ 0x40
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f001 f9be 	bl	800a6a4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	095b      	lsrs	r3, r3, #5
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	095b      	lsrs	r3, r3, #5
 8009338:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009340:	6979      	ldr	r1, [r7, #20]
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 fe34 	bl	8009fb0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b086      	sub	sp, #24
 800935e:	af00      	add	r7, sp, #0
 8009360:	60f8      	str	r0, [r7, #12]
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <I2C_Slave_ISR_IT+0x24>
 800937a:	2302      	movs	r3, #2
 800937c:	e0ed      	b.n	800955a <I2C_Slave_ISR_IT+0x200>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	095b      	lsrs	r3, r3, #5
 8009396:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800939a:	2b00      	cmp	r3, #0
 800939c:	d004      	beq.n	80093a8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800939e:	6939      	ldr	r1, [r7, #16]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 fecf 	bl	800a144 <I2C_ITSlaveCplt>
 80093a6:	e0d3      	b.n	8009550 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	091b      	lsrs	r3, r3, #4
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d04d      	beq.n	8009450 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	091b      	lsrs	r3, r3, #4
 80093b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d047      	beq.n	8009450 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d128      	bne.n	800941c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b28      	cmp	r3, #40	@ 0x28
 80093d4:	d108      	bne.n	80093e8 <I2C_Slave_ISR_IT+0x8e>
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093dc:	d104      	bne.n	80093e8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80093de:	6939      	ldr	r1, [r7, #16]
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f001 f909 	bl	800a5f8 <I2C_ITListenCplt>
 80093e6:	e032      	b.n	800944e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b29      	cmp	r3, #41	@ 0x29
 80093f2:	d10e      	bne.n	8009412 <I2C_Slave_ISR_IT+0xb8>
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80093fa:	d00a      	beq.n	8009412 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2210      	movs	r2, #16
 8009402:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f001 fa64 	bl	800a8d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f000 fd71 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
 8009410:	e01d      	b.n	800944e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2210      	movs	r2, #16
 8009418:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800941a:	e096      	b.n	800954a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2210      	movs	r2, #16
 8009422:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009428:	f043 0204 	orr.w	r2, r3, #4
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d004      	beq.n	8009440 <I2C_Slave_ISR_IT+0xe6>
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800943c:	f040 8085 	bne.w	800954a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009444:	4619      	mov	r1, r3
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f001 f92c 	bl	800a6a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800944c:	e07d      	b.n	800954a <I2C_Slave_ISR_IT+0x1f0>
 800944e:	e07c      	b.n	800954a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	089b      	lsrs	r3, r3, #2
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d030      	beq.n	80094be <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	089b      	lsrs	r3, r3, #2
 8009460:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009464:	2b00      	cmp	r3, #0
 8009466:	d02a      	beq.n	80094be <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d018      	beq.n	80094a4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947c:	b2d2      	uxtb	r2, r2
 800947e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800948e:	3b01      	subs	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800949a:	b29b      	uxth	r3, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d14f      	bne.n	800954e <I2C_Slave_ISR_IT+0x1f4>
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80094b4:	d04b      	beq.n	800954e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 fd1b 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80094bc:	e047      	b.n	800954e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	08db      	lsrs	r3, r3, #3
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	08db      	lsrs	r3, r3, #3
 80094ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d004      	beq.n	80094e0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80094d6:	6939      	ldr	r1, [r7, #16]
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fc49 	bl	8009d70 <I2C_ITAddrCplt>
 80094de:	e037      	b.n	8009550 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	085b      	lsrs	r3, r3, #1
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d031      	beq.n	8009550 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d02b      	beq.n	8009550 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d018      	beq.n	8009534 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009506:	781a      	ldrb	r2, [r3, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800952a:	3b01      	subs	r3, #1
 800952c:	b29a      	uxth	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009532:	e00d      	b.n	8009550 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800953a:	d002      	beq.n	8009542 <I2C_Slave_ISR_IT+0x1e8>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 fcd5 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
 8009548:	e002      	b.n	8009550 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800954a:	bf00      	nop
 800954c:	e000      	b.n	8009550 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800954e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b088      	sub	sp, #32
 8009566:	af02      	add	r7, sp, #8
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009574:	2b01      	cmp	r3, #1
 8009576:	d101      	bne.n	800957c <I2C_Master_ISR_DMA+0x1a>
 8009578:	2302      	movs	r3, #2
 800957a:	e0e1      	b.n	8009740 <I2C_Master_ISR_DMA+0x1de>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	091b      	lsrs	r3, r3, #4
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d017      	beq.n	80095c0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	091b      	lsrs	r3, r3, #4
 8009594:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009598:	2b00      	cmp	r3, #0
 800959a:	d011      	beq.n	80095c0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2210      	movs	r2, #16
 80095a2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095a8:	f043 0204 	orr.w	r2, r3, #4
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80095b0:	2120      	movs	r1, #32
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f001 fdd6 	bl	800b164 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f001 f98a 	bl	800a8d2 <I2C_Flush_TXDR>
 80095be:	e0ba      	b.n	8009736 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	09db      	lsrs	r3, r3, #7
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d072      	beq.n	80096b2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	099b      	lsrs	r3, r3, #6
 80095d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d06c      	beq.n	80096b2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095e6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d04e      	beq.n	8009690 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095fe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009604:	b29b      	uxth	r3, r3
 8009606:	2bff      	cmp	r3, #255	@ 0xff
 8009608:	d906      	bls.n	8009618 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	22ff      	movs	r2, #255	@ 0xff
 800960e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8009610:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	e010      	b.n	800963a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800962a:	d003      	beq.n	8009634 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	e002      	b.n	800963a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009638:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800963e:	b2da      	uxtb	r2, r3
 8009640:	8a79      	ldrh	r1, [r7, #18]
 8009642:	2300      	movs	r3, #0
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f001 fd59 	bl	800b100 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b22      	cmp	r3, #34	@ 0x22
 800966a:	d108      	bne.n	800967e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800967a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800967c:	e05b      	b.n	8009736 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800968c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800968e:	e052      	b.n	8009736 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800969a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800969e:	d003      	beq.n	80096a8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 fbe9 	bl	8009e78 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80096a6:	e046      	b.n	8009736 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80096a8:	2140      	movs	r1, #64	@ 0x40
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 fffa 	bl	800a6a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80096b0:	e041      	b.n	8009736 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	099b      	lsrs	r3, r3, #6
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d029      	beq.n	8009712 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	099b      	lsrs	r3, r3, #6
 80096c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d023      	beq.n	8009712 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d119      	bne.n	8009708 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096e2:	d027      	beq.n	8009734 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80096ec:	d108      	bne.n	8009700 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096fc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80096fe:	e019      	b.n	8009734 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 fbb9 	bl	8009e78 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009706:	e015      	b.n	8009734 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009708:	2140      	movs	r1, #64	@ 0x40
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 ffca 	bl	800a6a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009710:	e010      	b.n	8009734 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	095b      	lsrs	r3, r3, #5
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00b      	beq.n	8009736 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	095b      	lsrs	r3, r3, #5
 8009722:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800972a:	68b9      	ldr	r1, [r7, #8]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 fc3f 	bl	8009fb0 <I2C_ITMasterCplt>
 8009732:	e000      	b.n	8009736 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009734:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009754:	4b92      	ldr	r3, [pc, #584]	@ (80099a0 <I2C_Mem_ISR_DMA+0x258>)
 8009756:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <I2C_Mem_ISR_DMA+0x1e>
 8009762:	2302      	movs	r3, #2
 8009764:	e118      	b.n	8009998 <I2C_Mem_ISR_DMA+0x250>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	091b      	lsrs	r3, r3, #4
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d017      	beq.n	80097aa <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	091b      	lsrs	r3, r3, #4
 800977e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009782:	2b00      	cmp	r3, #0
 8009784:	d011      	beq.n	80097aa <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2210      	movs	r2, #16
 800978c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009792:	f043 0204 	orr.w	r2, r3, #4
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800979a:	2120      	movs	r1, #32
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f001 fce1 	bl	800b164 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f001 f895 	bl	800a8d2 <I2C_Flush_TXDR>
 80097a8:	e0f1      	b.n	800998e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	085b      	lsrs	r3, r3, #1
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00f      	beq.n	80097d6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	085b      	lsrs	r3, r3, #1
 80097ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80097ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f04f 32ff 	mov.w	r2, #4294967295
 80097d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80097d4:	e0db      	b.n	800998e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	09db      	lsrs	r3, r3, #7
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d060      	beq.n	80098a4 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	099b      	lsrs	r3, r3, #6
 80097e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d05a      	beq.n	80098a4 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80097ee:	2101      	movs	r1, #1
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f001 fd3b 	bl	800b26c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80097f6:	2110      	movs	r1, #16
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f001 fcb3 	bl	800b164 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d048      	beq.n	800989a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800980c:	b29b      	uxth	r3, r3
 800980e:	2bff      	cmp	r3, #255	@ 0xff
 8009810:	d910      	bls.n	8009834 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	22ff      	movs	r2, #255	@ 0xff
 8009816:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800981c:	b299      	uxth	r1, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009822:	b2da      	uxtb	r2, r3
 8009824:	2300      	movs	r3, #0
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f001 fc67 	bl	800b100 <I2C_TransferConfig>
 8009832:	e011      	b.n	8009858 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009838:	b29a      	uxth	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009842:	b299      	uxth	r1, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009848:	b2da      	uxtb	r2, r3
 800984a:	2300      	movs	r3, #0
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f001 fc54 	bl	800b100 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800985c:	b29a      	uxth	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	b29a      	uxth	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b22      	cmp	r3, #34	@ 0x22
 8009874:	d108      	bne.n	8009888 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009884:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009886:	e082      	b.n	800998e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009896:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009898:	e079      	b.n	800998e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800989a:	2140      	movs	r1, #64	@ 0x40
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 ff01 	bl	800a6a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80098a2:	e074      	b.n	800998e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	099b      	lsrs	r3, r3, #6
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d05e      	beq.n	800996e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	099b      	lsrs	r3, r3, #6
 80098b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d058      	beq.n	800996e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80098bc:	2101      	movs	r1, #1
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f001 fcd4 	bl	800b26c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80098c4:	2110      	movs	r1, #16
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f001 fc4c 	bl	800b164 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b22      	cmp	r3, #34	@ 0x22
 80098d6:	d101      	bne.n	80098dc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80098d8:	4b32      	ldr	r3, [pc, #200]	@ (80099a4 <I2C_Mem_ISR_DMA+0x25c>)
 80098da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2bff      	cmp	r3, #255	@ 0xff
 80098e4:	d910      	bls.n	8009908 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	22ff      	movs	r2, #255	@ 0xff
 80098ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098f0:	b299      	uxth	r1, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f001 fbfd 	bl	800b100 <I2C_TransferConfig>
 8009906:	e011      	b.n	800992c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800990c:	b29a      	uxth	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009916:	b299      	uxth	r1, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800991c:	b2da      	uxtb	r2, r3
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f001 fbea 	bl	800b100 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009930:	b29a      	uxth	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b22      	cmp	r3, #34	@ 0x22
 8009948:	d108      	bne.n	800995c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009958:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800995a:	e018      	b.n	800998e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800996a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800996c:	e00f      	b.n	800998e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	095b      	lsrs	r3, r3, #5
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d009      	beq.n	800998e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	095b      	lsrs	r3, r3, #5
 800997e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009986:	68b9      	ldr	r1, [r7, #8]
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 fb11 	bl	8009fb0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	80002000 	.word	0x80002000
 80099a4:	80002400 	.word	0x80002400

080099a8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d101      	bne.n	80099cc <I2C_Slave_ISR_DMA+0x24>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e1cc      	b.n	8009d66 <I2C_Slave_ISR_DMA+0x3be>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00a      	beq.n	80099f6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 fba8 	bl	800a144 <I2C_ITSlaveCplt>
 80099f4:	e1b2      	b.n	8009d5c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	091b      	lsrs	r3, r3, #4
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 819c 	beq.w	8009d3c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	091b      	lsrs	r3, r3, #4
 8009a08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 8195 	beq.w	8009d3c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	0b9b      	lsrs	r3, r3, #14
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d106      	bne.n	8009a2c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	0bdb      	lsrs	r3, r3, #15
 8009a22:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 8181 	beq.w	8009d2e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d07c      	beq.n	8009b2e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	0bdb      	lsrs	r3, r3, #15
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d076      	beq.n	8009b2e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a75      	ldr	r2, [pc, #468]	@ (8009c1c <I2C_Slave_ISR_DMA+0x274>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d059      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a73      	ldr	r2, [pc, #460]	@ (8009c20 <I2C_Slave_ISR_DMA+0x278>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d053      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a71      	ldr	r2, [pc, #452]	@ (8009c24 <I2C_Slave_ISR_DMA+0x27c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d04d      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a6f      	ldr	r2, [pc, #444]	@ (8009c28 <I2C_Slave_ISR_DMA+0x280>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d047      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a6d      	ldr	r2, [pc, #436]	@ (8009c2c <I2C_Slave_ISR_DMA+0x284>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d041      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a6b      	ldr	r2, [pc, #428]	@ (8009c30 <I2C_Slave_ISR_DMA+0x288>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d03b      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a69      	ldr	r2, [pc, #420]	@ (8009c34 <I2C_Slave_ISR_DMA+0x28c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d035      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a67      	ldr	r2, [pc, #412]	@ (8009c38 <I2C_Slave_ISR_DMA+0x290>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d02f      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a65      	ldr	r2, [pc, #404]	@ (8009c3c <I2C_Slave_ISR_DMA+0x294>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d029      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a63      	ldr	r2, [pc, #396]	@ (8009c40 <I2C_Slave_ISR_DMA+0x298>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d023      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a61      	ldr	r2, [pc, #388]	@ (8009c44 <I2C_Slave_ISR_DMA+0x29c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d01d      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a5f      	ldr	r2, [pc, #380]	@ (8009c48 <I2C_Slave_ISR_DMA+0x2a0>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d017      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8009c4c <I2C_Slave_ISR_DMA+0x2a4>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d011      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8009c50 <I2C_Slave_ISR_DMA+0x2a8>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00b      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a59      	ldr	r2, [pc, #356]	@ (8009c54 <I2C_Slave_ISR_DMA+0x2ac>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d005      	beq.n	8009b00 <I2C_Slave_ISR_DMA+0x158>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a57      	ldr	r2, [pc, #348]	@ (8009c58 <I2C_Slave_ISR_DMA+0x2b0>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d109      	bne.n	8009b14 <I2C_Slave_ISR_DMA+0x16c>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bf0c      	ite	eq
 8009b0c:	2301      	moveq	r3, #1
 8009b0e:	2300      	movne	r3, #0
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	e008      	b.n	8009b26 <I2C_Slave_ISR_DMA+0x17e>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	bf0c      	ite	eq
 8009b20:	2301      	moveq	r3, #1
 8009b22:	2300      	movne	r3, #0
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 809f 	beq.w	8009c76 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	0b9b      	lsrs	r3, r3, #14
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 8098 	beq.w	8009c76 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a33      	ldr	r2, [pc, #204]	@ (8009c1c <I2C_Slave_ISR_DMA+0x274>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d059      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a31      	ldr	r2, [pc, #196]	@ (8009c20 <I2C_Slave_ISR_DMA+0x278>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d053      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a2f      	ldr	r2, [pc, #188]	@ (8009c24 <I2C_Slave_ISR_DMA+0x27c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d04d      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a2d      	ldr	r2, [pc, #180]	@ (8009c28 <I2C_Slave_ISR_DMA+0x280>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d047      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8009c2c <I2C_Slave_ISR_DMA+0x284>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d041      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a29      	ldr	r2, [pc, #164]	@ (8009c30 <I2C_Slave_ISR_DMA+0x288>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d03b      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a27      	ldr	r2, [pc, #156]	@ (8009c34 <I2C_Slave_ISR_DMA+0x28c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d035      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a25      	ldr	r2, [pc, #148]	@ (8009c38 <I2C_Slave_ISR_DMA+0x290>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d02f      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a23      	ldr	r2, [pc, #140]	@ (8009c3c <I2C_Slave_ISR_DMA+0x294>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d029      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a21      	ldr	r2, [pc, #132]	@ (8009c40 <I2C_Slave_ISR_DMA+0x298>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d023      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8009c44 <I2C_Slave_ISR_DMA+0x29c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d01d      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c48 <I2C_Slave_ISR_DMA+0x2a0>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d017      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8009c4c <I2C_Slave_ISR_DMA+0x2a4>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d011      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a19      	ldr	r2, [pc, #100]	@ (8009c50 <I2C_Slave_ISR_DMA+0x2a8>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d00b      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a17      	ldr	r2, [pc, #92]	@ (8009c54 <I2C_Slave_ISR_DMA+0x2ac>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d005      	beq.n	8009c06 <I2C_Slave_ISR_DMA+0x25e>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a15      	ldr	r2, [pc, #84]	@ (8009c58 <I2C_Slave_ISR_DMA+0x2b0>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d12a      	bne.n	8009c5c <I2C_Slave_ISR_DMA+0x2b4>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bf0c      	ite	eq
 8009c12:	2301      	moveq	r3, #1
 8009c14:	2300      	movne	r3, #0
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	e029      	b.n	8009c6e <I2C_Slave_ISR_DMA+0x2c6>
 8009c1a:	bf00      	nop
 8009c1c:	40020010 	.word	0x40020010
 8009c20:	40020028 	.word	0x40020028
 8009c24:	40020040 	.word	0x40020040
 8009c28:	40020058 	.word	0x40020058
 8009c2c:	40020070 	.word	0x40020070
 8009c30:	40020088 	.word	0x40020088
 8009c34:	400200a0 	.word	0x400200a0
 8009c38:	400200b8 	.word	0x400200b8
 8009c3c:	40020410 	.word	0x40020410
 8009c40:	40020428 	.word	0x40020428
 8009c44:	40020440 	.word	0x40020440
 8009c48:	40020458 	.word	0x40020458
 8009c4c:	40020470 	.word	0x40020470
 8009c50:	40020488 	.word	0x40020488
 8009c54:	400204a0 	.word	0x400204a0
 8009c58:	400204b8 	.word	0x400204b8
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bf0c      	ite	eq
 8009c68:	2301      	moveq	r3, #1
 8009c6a:	2300      	movne	r3, #0
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8009c72:	2301      	movs	r3, #1
 8009c74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d128      	bne.n	8009cce <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b28      	cmp	r3, #40	@ 0x28
 8009c86:	d108      	bne.n	8009c9a <I2C_Slave_ISR_DMA+0x2f2>
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c8e:	d104      	bne.n	8009c9a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 fcb0 	bl	800a5f8 <I2C_ITListenCplt>
 8009c98:	e048      	b.n	8009d2c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b29      	cmp	r3, #41	@ 0x29
 8009ca4:	d10e      	bne.n	8009cc4 <I2C_Slave_ISR_DMA+0x31c>
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009cac:	d00a      	beq.n	8009cc4 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2210      	movs	r2, #16
 8009cb4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fe0b 	bl	800a8d2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 f918 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
 8009cc2:	e033      	b.n	8009d2c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2210      	movs	r2, #16
 8009cca:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009ccc:	e034      	b.n	8009d38 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2210      	movs	r2, #16
 8009cd4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cda:	f043 0204 	orr.w	r2, r3, #4
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ce8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d003      	beq.n	8009cf8 <I2C_Slave_ISR_DMA+0x350>
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cf6:	d11f      	bne.n	8009d38 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	2b21      	cmp	r3, #33	@ 0x21
 8009cfc:	d002      	beq.n	8009d04 <I2C_Slave_ISR_DMA+0x35c>
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	2b29      	cmp	r3, #41	@ 0x29
 8009d02:	d103      	bne.n	8009d0c <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2221      	movs	r2, #33	@ 0x21
 8009d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d0a:	e008      	b.n	8009d1e <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b22      	cmp	r3, #34	@ 0x22
 8009d10:	d002      	beq.n	8009d18 <I2C_Slave_ISR_DMA+0x370>
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
 8009d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d16:	d102      	bne.n	8009d1e <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2222      	movs	r2, #34	@ 0x22
 8009d1c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d22:	4619      	mov	r1, r3
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 fcbd 	bl	800a6a4 <I2C_ITError>
      if (treatdmanack == 1U)
 8009d2a:	e005      	b.n	8009d38 <I2C_Slave_ISR_DMA+0x390>
 8009d2c:	e004      	b.n	8009d38 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2210      	movs	r2, #16
 8009d34:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009d36:	e011      	b.n	8009d5c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8009d38:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009d3a:	e00f      	b.n	8009d5c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	08db      	lsrs	r3, r3, #3
 8009d40:	f003 0301 	and.w	r3, r3, #1
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d009      	beq.n	8009d5c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	08db      	lsrs	r3, r3, #3
 8009d4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d003      	beq.n	8009d5c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 f80a 	bl	8009d70 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop

08009d70 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d86:	2b28      	cmp	r3, #40	@ 0x28
 8009d88:	d16a      	bne.n	8009e60 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	0c1b      	lsrs	r3, r3, #16
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	0c1b      	lsrs	r3, r3, #16
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009da8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009db6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009dc4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d138      	bne.n	8009e40 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009dce:	897b      	ldrh	r3, [r7, #10]
 8009dd0:	09db      	lsrs	r3, r3, #7
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	89bb      	ldrh	r3, [r7, #12]
 8009dd6:	4053      	eors	r3, r2
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	f003 0306 	and.w	r3, r3, #6
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d11c      	bne.n	8009e1c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009de2:	897b      	ldrh	r3, [r7, #10]
 8009de4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d13b      	bne.n	8009e70 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2208      	movs	r2, #8
 8009e04:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e0e:	89ba      	ldrh	r2, [r7, #12]
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff f92c 	bl	8009072 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009e1a:	e029      	b.n	8009e70 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009e1c:	893b      	ldrh	r3, [r7, #8]
 8009e1e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009e20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 fa21 	bl	800b26c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e32:	89ba      	ldrh	r2, [r7, #12]
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff f91a 	bl	8009072 <HAL_I2C_AddrCallback>
}
 8009e3e:	e017      	b.n	8009e70 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009e40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 fa11 	bl	800b26c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e52:	89ba      	ldrh	r2, [r7, #12]
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff f90a 	bl	8009072 <HAL_I2C_AddrCallback>
}
 8009e5e:	e007      	b.n	8009e70 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2208      	movs	r2, #8
 8009e66:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b21      	cmp	r3, #33	@ 0x21
 8009e92:	d115      	bne.n	8009ec0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2211      	movs	r2, #17
 8009ea0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 f9de 	bl	800b26c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff f8b2 	bl	8009022 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ebe:	e014      	b.n	8009eea <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2212      	movs	r2, #18
 8009ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009ed4:	2102      	movs	r1, #2
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f9c8 	bl	800b26c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff f8a6 	bl	8009036 <HAL_I2C_MasterRxCpltCallback>
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	0b9b      	lsrs	r3, r3, #14
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d008      	beq.n	8009f28 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009f24:	601a      	str	r2, [r3, #0]
 8009f26:	e00d      	b.n	8009f44 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	0bdb      	lsrs	r3, r3, #15
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d007      	beq.n	8009f44 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f42:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b29      	cmp	r3, #41	@ 0x29
 8009f4e:	d112      	bne.n	8009f76 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2228      	movs	r2, #40	@ 0x28
 8009f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2221      	movs	r2, #33	@ 0x21
 8009f5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009f5e:	2101      	movs	r1, #1
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f983 	bl	800b26c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff f86b 	bl	800904a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f74:	e017      	b.n	8009fa6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f80:	d111      	bne.n	8009fa6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2228      	movs	r2, #40	@ 0x28
 8009f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2222      	movs	r2, #34	@ 0x22
 8009f8e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009f90:	2102      	movs	r1, #2
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f001 f96a 	bl	800b26c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff f85c 	bl	800905e <HAL_I2C_SlaveRxCpltCallback>
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b21      	cmp	r3, #33	@ 0x21
 8009fd0:	d107      	bne.n	8009fe2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 f949 	bl	800b26c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2211      	movs	r2, #17
 8009fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8009fe0:	e00c      	b.n	8009ffc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b22      	cmp	r3, #34	@ 0x22
 8009fec:	d106      	bne.n	8009ffc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009fee:	2102      	movs	r1, #2
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 f93b 	bl	800b26c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2212      	movs	r2, #18
 8009ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6859      	ldr	r1, [r3, #4]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	4b4d      	ldr	r3, [pc, #308]	@ (800a13c <I2C_ITMasterCplt+0x18c>)
 800a008:	400b      	ands	r3, r1
 800a00a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a4a      	ldr	r2, [pc, #296]	@ (800a140 <I2C_ITMasterCplt+0x190>)
 800a016:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	091b      	lsrs	r3, r3, #4
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b00      	cmp	r3, #0
 800a022:	d009      	beq.n	800a038 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2210      	movs	r2, #16
 800a02a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a030:	f043 0204 	orr.w	r2, r3, #4
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b60      	cmp	r3, #96	@ 0x60
 800a042:	d10b      	bne.n	800a05c <I2C_ITMasterCplt+0xac>
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	089b      	lsrs	r3, r3, #2
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a056:	b2db      	uxtb	r3, r3
 800a058:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a05a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fc38 	bl	800a8d2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a066:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b60      	cmp	r3, #96	@ 0x60
 800a072:	d002      	beq.n	800a07a <I2C_ITMasterCplt+0xca>
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d006      	beq.n	800a088 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb0f 	bl	800a6a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a086:	e054      	b.n	800a132 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b21      	cmp	r3, #33	@ 0x21
 800a092:	d124      	bne.n	800a0de <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b40      	cmp	r3, #64	@ 0x40
 800a0ac:	d10b      	bne.n	800a0c6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7fe ffef 	bl	80090a2 <HAL_I2C_MemTxCpltCallback>
}
 800a0c4:	e035      	b.n	800a132 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7fe ffa3 	bl	8009022 <HAL_I2C_MasterTxCpltCallback>
}
 800a0dc:	e029      	b.n	800a132 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b22      	cmp	r3, #34	@ 0x22
 800a0e8:	d123      	bne.n	800a132 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b40      	cmp	r3, #64	@ 0x40
 800a102:	d10b      	bne.n	800a11c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7fe ffce 	bl	80090b6 <HAL_I2C_MemRxCpltCallback>
}
 800a11a:	e00a      	b.n	800a132 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7fe ff82 	bl	8009036 <HAL_I2C_MasterRxCpltCallback>
}
 800a132:	bf00      	nop
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	fe00e800 	.word	0xfe00e800
 800a140:	ffff0000 	.word	0xffff0000

0800a144 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a166:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2220      	movs	r2, #32
 800a16e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	2b21      	cmp	r3, #33	@ 0x21
 800a174:	d002      	beq.n	800a17c <I2C_ITSlaveCplt+0x38>
 800a176:	7afb      	ldrb	r3, [r7, #11]
 800a178:	2b29      	cmp	r3, #41	@ 0x29
 800a17a:	d108      	bne.n	800a18e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a17c:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f001 f873 	bl	800b26c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2221      	movs	r2, #33	@ 0x21
 800a18a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a18c:	e019      	b.n	800a1c2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a18e:	7afb      	ldrb	r3, [r7, #11]
 800a190:	2b22      	cmp	r3, #34	@ 0x22
 800a192:	d002      	beq.n	800a19a <I2C_ITSlaveCplt+0x56>
 800a194:	7afb      	ldrb	r3, [r7, #11]
 800a196:	2b2a      	cmp	r3, #42	@ 0x2a
 800a198:	d108      	bne.n	800a1ac <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a19a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f001 f864 	bl	800b26c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2222      	movs	r2, #34	@ 0x22
 800a1a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a1aa:	e00a      	b.n	800a1c2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	2b28      	cmp	r3, #40	@ 0x28
 800a1b0:	d107      	bne.n	800a1c2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a1b2:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f001 f858 	bl	800b26c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1d0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6859      	ldr	r1, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	4b80      	ldr	r3, [pc, #512]	@ (800a3e0 <I2C_ITSlaveCplt+0x29c>)
 800a1de:	400b      	ands	r3, r1
 800a1e0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fb75 	bl	800a8d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	0b9b      	lsrs	r3, r3, #14
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d07a      	beq.n	800a2ea <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a202:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 8112 	beq.w	800a432 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a73      	ldr	r2, [pc, #460]	@ (800a3e4 <I2C_ITSlaveCplt+0x2a0>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d059      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a71      	ldr	r2, [pc, #452]	@ (800a3e8 <I2C_ITSlaveCplt+0x2a4>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d053      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a6f      	ldr	r2, [pc, #444]	@ (800a3ec <I2C_ITSlaveCplt+0x2a8>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d04d      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a6d      	ldr	r2, [pc, #436]	@ (800a3f0 <I2C_ITSlaveCplt+0x2ac>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d047      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a6b      	ldr	r2, [pc, #428]	@ (800a3f4 <I2C_ITSlaveCplt+0x2b0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d041      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a69      	ldr	r2, [pc, #420]	@ (800a3f8 <I2C_ITSlaveCplt+0x2b4>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d03b      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a67      	ldr	r2, [pc, #412]	@ (800a3fc <I2C_ITSlaveCplt+0x2b8>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d035      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a65      	ldr	r2, [pc, #404]	@ (800a400 <I2C_ITSlaveCplt+0x2bc>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d02f      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a63      	ldr	r2, [pc, #396]	@ (800a404 <I2C_ITSlaveCplt+0x2c0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d029      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a61      	ldr	r2, [pc, #388]	@ (800a408 <I2C_ITSlaveCplt+0x2c4>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d023      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a5f      	ldr	r2, [pc, #380]	@ (800a40c <I2C_ITSlaveCplt+0x2c8>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d01d      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a5d      	ldr	r2, [pc, #372]	@ (800a410 <I2C_ITSlaveCplt+0x2cc>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d017      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a5b      	ldr	r2, [pc, #364]	@ (800a414 <I2C_ITSlaveCplt+0x2d0>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d011      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a59      	ldr	r2, [pc, #356]	@ (800a418 <I2C_ITSlaveCplt+0x2d4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00b      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a57      	ldr	r2, [pc, #348]	@ (800a41c <I2C_ITSlaveCplt+0x2d8>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d005      	beq.n	800a2ce <I2C_ITSlaveCplt+0x18a>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a55      	ldr	r2, [pc, #340]	@ (800a420 <I2C_ITSlaveCplt+0x2dc>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d105      	bne.n	800a2da <I2C_ITSlaveCplt+0x196>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	e004      	b.n	800a2e4 <I2C_ITSlaveCplt+0x1a0>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800a2e8:	e0a3      	b.n	800a432 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	0bdb      	lsrs	r3, r3, #15
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 809d 	beq.w	800a432 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a306:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8090 	beq.w	800a432 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a32      	ldr	r2, [pc, #200]	@ (800a3e4 <I2C_ITSlaveCplt+0x2a0>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d059      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a30      	ldr	r2, [pc, #192]	@ (800a3e8 <I2C_ITSlaveCplt+0x2a4>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d053      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a2e      	ldr	r2, [pc, #184]	@ (800a3ec <I2C_ITSlaveCplt+0x2a8>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d04d      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a2c      	ldr	r2, [pc, #176]	@ (800a3f0 <I2C_ITSlaveCplt+0x2ac>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d047      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a2a      	ldr	r2, [pc, #168]	@ (800a3f4 <I2C_ITSlaveCplt+0x2b0>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d041      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a28      	ldr	r2, [pc, #160]	@ (800a3f8 <I2C_ITSlaveCplt+0x2b4>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d03b      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a26      	ldr	r2, [pc, #152]	@ (800a3fc <I2C_ITSlaveCplt+0x2b8>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d035      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a24      	ldr	r2, [pc, #144]	@ (800a400 <I2C_ITSlaveCplt+0x2bc>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d02f      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a22      	ldr	r2, [pc, #136]	@ (800a404 <I2C_ITSlaveCplt+0x2c0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d029      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a20      	ldr	r2, [pc, #128]	@ (800a408 <I2C_ITSlaveCplt+0x2c4>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d023      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a1e      	ldr	r2, [pc, #120]	@ (800a40c <I2C_ITSlaveCplt+0x2c8>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d01d      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a1c      	ldr	r2, [pc, #112]	@ (800a410 <I2C_ITSlaveCplt+0x2cc>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d017      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a414 <I2C_ITSlaveCplt+0x2d0>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d011      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a18      	ldr	r2, [pc, #96]	@ (800a418 <I2C_ITSlaveCplt+0x2d4>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d00b      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a16      	ldr	r2, [pc, #88]	@ (800a41c <I2C_ITSlaveCplt+0x2d8>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d005      	beq.n	800a3d2 <I2C_ITSlaveCplt+0x28e>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a14      	ldr	r2, [pc, #80]	@ (800a420 <I2C_ITSlaveCplt+0x2dc>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d128      	bne.n	800a424 <I2C_ITSlaveCplt+0x2e0>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	e027      	b.n	800a42e <I2C_ITSlaveCplt+0x2ea>
 800a3de:	bf00      	nop
 800a3e0:	fe00e800 	.word	0xfe00e800
 800a3e4:	40020010 	.word	0x40020010
 800a3e8:	40020028 	.word	0x40020028
 800a3ec:	40020040 	.word	0x40020040
 800a3f0:	40020058 	.word	0x40020058
 800a3f4:	40020070 	.word	0x40020070
 800a3f8:	40020088 	.word	0x40020088
 800a3fc:	400200a0 	.word	0x400200a0
 800a400:	400200b8 	.word	0x400200b8
 800a404:	40020410 	.word	0x40020410
 800a408:	40020428 	.word	0x40020428
 800a40c:	40020440 	.word	0x40020440
 800a410:	40020458 	.word	0x40020458
 800a414:	40020470 	.word	0x40020470
 800a418:	40020488 	.word	0x40020488
 800a41c:	400204a0 	.word	0x400204a0
 800a420:	400204b8 	.word	0x400204b8
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	089b      	lsrs	r3, r3, #2
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d020      	beq.n	800a480 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f023 0304 	bic.w	r3, r3, #4
 800a444:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	1c5a      	adds	r2, r3, #1
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00c      	beq.n	800a480 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a46a:	3b01      	subs	r3, #1
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a476:	b29b      	uxth	r3, r3
 800a478:	3b01      	subs	r3, #1
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a48e:	f043 0204 	orr.w	r2, r3, #4
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	091b      	lsrs	r3, r3, #4
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d04a      	beq.n	800a538 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	091b      	lsrs	r3, r3, #4
 800a4a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d044      	beq.n	800a538 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d128      	bne.n	800a50a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b28      	cmp	r3, #40	@ 0x28
 800a4c2:	d108      	bne.n	800a4d6 <I2C_ITSlaveCplt+0x392>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4ca:	d104      	bne.n	800a4d6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a4cc:	6979      	ldr	r1, [r7, #20]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f892 	bl	800a5f8 <I2C_ITListenCplt>
 800a4d4:	e030      	b.n	800a538 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b29      	cmp	r3, #41	@ 0x29
 800a4e0:	d10e      	bne.n	800a500 <I2C_ITSlaveCplt+0x3bc>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a4e8:	d00a      	beq.n	800a500 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2210      	movs	r2, #16
 800a4f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f9ed 	bl	800a8d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff fcfa 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
 800a4fe:	e01b      	b.n	800a538 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2210      	movs	r2, #16
 800a506:	61da      	str	r2, [r3, #28]
 800a508:	e016      	b.n	800a538 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2210      	movs	r2, #16
 800a510:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a516:	f043 0204 	orr.w	r2, r3, #4
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <I2C_ITSlaveCplt+0x3e8>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a52a:	d105      	bne.n	800a538 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f8b6 	bl	800a6a4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d010      	beq.n	800a570 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f8a5 	bl	800a6a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b28      	cmp	r3, #40	@ 0x28
 800a564:	d141      	bne.n	800a5ea <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a566:	6979      	ldr	r1, [r7, #20]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f845 	bl	800a5f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a56e:	e03c      	b.n	800a5ea <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a578:	d014      	beq.n	800a5a4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff fcb9 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a1c      	ldr	r2, [pc, #112]	@ (800a5f4 <I2C_ITSlaveCplt+0x4b0>)
 800a584:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2220      	movs	r2, #32
 800a58a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7fe fd76 	bl	800908e <HAL_I2C_ListenCpltCallback>
}
 800a5a2:	e022      	b.n	800a5ea <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b22      	cmp	r3, #34	@ 0x22
 800a5ae:	d10e      	bne.n	800a5ce <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7fe fd49 	bl	800905e <HAL_I2C_SlaveRxCpltCallback>
}
 800a5cc:	e00d      	b.n	800a5ea <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7fe fd30 	bl	800904a <HAL_I2C_SlaveTxCpltCallback>
}
 800a5ea:	bf00      	nop
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	ffff0000 	.word	0xffff0000

0800a5f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a26      	ldr	r2, [pc, #152]	@ (800a6a0 <I2C_ITListenCplt+0xa8>)
 800a606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2220      	movs	r2, #32
 800a612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	089b      	lsrs	r3, r3, #2
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d022      	beq.n	800a676 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d012      	beq.n	800a676 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a654:	3b01      	subs	r3, #1
 800a656:	b29a      	uxth	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a660:	b29b      	uxth	r3, r3
 800a662:	3b01      	subs	r3, #1
 800a664:	b29a      	uxth	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a66e:	f043 0204 	orr.w	r2, r3, #4
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a676:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fdf6 	bl	800b26c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2210      	movs	r2, #16
 800a686:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7fe fcfc 	bl	800908e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	ffff0000 	.word	0xffff0000

0800a6a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6b4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a6d      	ldr	r2, [pc, #436]	@ (800a878 <I2C_ITError+0x1d4>)
 800a6c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	2b28      	cmp	r3, #40	@ 0x28
 800a6da:	d005      	beq.n	800a6e8 <I2C_ITError+0x44>
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	2b29      	cmp	r3, #41	@ 0x29
 800a6e0:	d002      	beq.n	800a6e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6e6:	d10b      	bne.n	800a700 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a6e8:	2103      	movs	r1, #3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fdbe 	bl	800b26c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2228      	movs	r2, #40	@ 0x28
 800a6f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a60      	ldr	r2, [pc, #384]	@ (800a87c <I2C_ITError+0x1d8>)
 800a6fc:	635a      	str	r2, [r3, #52]	@ 0x34
 800a6fe:	e030      	b.n	800a762 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a700:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fdb1 	bl	800b26c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f8e1 	bl	800a8d2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b60      	cmp	r3, #96	@ 0x60
 800a71a:	d01f      	beq.n	800a75c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2220      	movs	r2, #32
 800a720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	f003 0320 	and.w	r3, r3, #32
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d114      	bne.n	800a75c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b10      	cmp	r3, #16
 800a73e:	d109      	bne.n	800a754 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2210      	movs	r2, #16
 800a746:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a74c:	f043 0204 	orr.w	r2, r3, #4
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2220      	movs	r2, #32
 800a75a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a766:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d039      	beq.n	800a7e4 <I2C_ITError+0x140>
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	2b11      	cmp	r3, #17
 800a774:	d002      	beq.n	800a77c <I2C_ITError+0xd8>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2b21      	cmp	r3, #33	@ 0x21
 800a77a:	d133      	bne.n	800a7e4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a786:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a78a:	d107      	bne.n	800a79c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a79a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fd fa21 	bl	8007be8 <HAL_DMA_GetState>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d017      	beq.n	800a7dc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b0:	4a33      	ldr	r2, [pc, #204]	@ (800a880 <I2C_ITError+0x1dc>)
 800a7b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fc f8a1 	bl	8006908 <HAL_DMA_Abort_IT>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d04d      	beq.n	800a868 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a7da:	e045      	b.n	800a868 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f851 	bl	800a884 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a7e2:	e041      	b.n	800a868 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d039      	beq.n	800a860 <I2C_ITError+0x1bc>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2b12      	cmp	r3, #18
 800a7f0:	d002      	beq.n	800a7f8 <I2C_ITError+0x154>
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2b22      	cmp	r3, #34	@ 0x22
 800a7f6:	d133      	bne.n	800a860 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a806:	d107      	bne.n	800a818 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a816:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fd f9e3 	bl	8007be8 <HAL_DMA_GetState>
 800a822:	4603      	mov	r3, r0
 800a824:	2b01      	cmp	r3, #1
 800a826:	d017      	beq.n	800a858 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a82c:	4a14      	ldr	r2, [pc, #80]	@ (800a880 <I2C_ITError+0x1dc>)
 800a82e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fc f863 	bl	8006908 <HAL_DMA_Abort_IT>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d011      	beq.n	800a86c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a84c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a852:	4610      	mov	r0, r2
 800a854:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a856:	e009      	b.n	800a86c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f813 	bl	800a884 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a85e:	e005      	b.n	800a86c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f80f 	bl	800a884 <I2C_TreatErrorCallback>
  }
}
 800a866:	e002      	b.n	800a86e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a868:	bf00      	nop
 800a86a:	e000      	b.n	800a86e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a86c:	bf00      	nop
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	ffff0000 	.word	0xffff0000
 800a87c:	0800935b 	.word	0x0800935b
 800a880:	0800ac25 	.word	0x0800ac25

0800a884 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b60      	cmp	r3, #96	@ 0x60
 800a896:	d10e      	bne.n	800a8b6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7fe fc15 	bl	80090de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a8b4:	e009      	b.n	800a8ca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7fe fc00 	bl	80090ca <HAL_I2C_ErrorCallback>
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d103      	bne.n	800a8f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d007      	beq.n	800a90e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	699a      	ldr	r2, [r3, #24]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f042 0201 	orr.w	r2, r2, #1
 800a90c:	619a      	str	r2, [r3, #24]
  }
}
 800a90e:	bf00      	nop
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a926:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a936:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d104      	bne.n	800a94c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a942:	2120      	movs	r1, #32
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fc0d 	bl	800b164 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a94a:	e02d      	b.n	800a9a8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a954:	441a      	add	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a95e:	b29b      	uxth	r3, r3
 800a960:	2bff      	cmp	r3, #255	@ 0xff
 800a962:	d903      	bls.n	800a96c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	22ff      	movs	r2, #255	@ 0xff
 800a968:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a96a:	e004      	b.n	800a976 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a970:	b29a      	uxth	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97e:	4619      	mov	r1, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3328      	adds	r3, #40	@ 0x28
 800a986:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a98c:	f7fb fa34 	bl	8005df8 <HAL_DMA_Start_IT>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d004      	beq.n	800a9a0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a996:	2110      	movs	r1, #16
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fe83 	bl	800a6a4 <I2C_ITError>
}
 800a99e:	e003      	b.n	800a9a8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a9a0:	2140      	movs	r1, #64	@ 0x40
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 fbde 	bl	800b164 <I2C_Enable_IRQ>
}
 800a9a8:	bf00      	nop
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d076      	beq.n	800aab8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a71      	ldr	r2, [pc, #452]	@ (800ab98 <I2C_DMAError+0x1e8>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d059      	beq.n	800aa8a <I2C_DMAError+0xda>
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a6f      	ldr	r2, [pc, #444]	@ (800ab9c <I2C_DMAError+0x1ec>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d053      	beq.n	800aa8a <I2C_DMAError+0xda>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a6d      	ldr	r2, [pc, #436]	@ (800aba0 <I2C_DMAError+0x1f0>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d04d      	beq.n	800aa8a <I2C_DMAError+0xda>
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a6b      	ldr	r2, [pc, #428]	@ (800aba4 <I2C_DMAError+0x1f4>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d047      	beq.n	800aa8a <I2C_DMAError+0xda>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a69      	ldr	r2, [pc, #420]	@ (800aba8 <I2C_DMAError+0x1f8>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d041      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a67      	ldr	r2, [pc, #412]	@ (800abac <I2C_DMAError+0x1fc>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d03b      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a65      	ldr	r2, [pc, #404]	@ (800abb0 <I2C_DMAError+0x200>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d035      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a63      	ldr	r2, [pc, #396]	@ (800abb4 <I2C_DMAError+0x204>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d02f      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a61      	ldr	r2, [pc, #388]	@ (800abb8 <I2C_DMAError+0x208>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d029      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a5f      	ldr	r2, [pc, #380]	@ (800abbc <I2C_DMAError+0x20c>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d023      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a5d      	ldr	r2, [pc, #372]	@ (800abc0 <I2C_DMAError+0x210>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d01d      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a5b      	ldr	r2, [pc, #364]	@ (800abc4 <I2C_DMAError+0x214>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d017      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a59      	ldr	r2, [pc, #356]	@ (800abc8 <I2C_DMAError+0x218>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d011      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a57      	ldr	r2, [pc, #348]	@ (800abcc <I2C_DMAError+0x21c>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d00b      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a55      	ldr	r2, [pc, #340]	@ (800abd0 <I2C_DMAError+0x220>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d005      	beq.n	800aa8a <I2C_DMAError+0xda>
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a53      	ldr	r2, [pc, #332]	@ (800abd4 <I2C_DMAError+0x224>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d109      	bne.n	800aa9e <I2C_DMAError+0xee>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	bf0c      	ite	eq
 800aa96:	2301      	moveq	r3, #1
 800aa98:	2300      	movne	r3, #0
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	e008      	b.n	800aab0 <I2C_DMAError+0x100>
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bf0c      	ite	eq
 800aaaa:	2301      	moveq	r3, #1
 800aaac:	2300      	movne	r3, #0
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800aab4:	2301      	movs	r3, #1
 800aab6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 8098 	beq.w	800abf2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a33      	ldr	r2, [pc, #204]	@ (800ab98 <I2C_DMAError+0x1e8>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d059      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a31      	ldr	r2, [pc, #196]	@ (800ab9c <I2C_DMAError+0x1ec>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d053      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a2f      	ldr	r2, [pc, #188]	@ (800aba0 <I2C_DMAError+0x1f0>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d04d      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a2d      	ldr	r2, [pc, #180]	@ (800aba4 <I2C_DMAError+0x1f4>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d047      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a2b      	ldr	r2, [pc, #172]	@ (800aba8 <I2C_DMAError+0x1f8>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d041      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a29      	ldr	r2, [pc, #164]	@ (800abac <I2C_DMAError+0x1fc>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d03b      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a27      	ldr	r2, [pc, #156]	@ (800abb0 <I2C_DMAError+0x200>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d035      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a25      	ldr	r2, [pc, #148]	@ (800abb4 <I2C_DMAError+0x204>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d02f      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a23      	ldr	r2, [pc, #140]	@ (800abb8 <I2C_DMAError+0x208>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d029      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a21      	ldr	r2, [pc, #132]	@ (800abbc <I2C_DMAError+0x20c>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d023      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a1f      	ldr	r2, [pc, #124]	@ (800abc0 <I2C_DMAError+0x210>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d01d      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a1d      	ldr	r2, [pc, #116]	@ (800abc4 <I2C_DMAError+0x214>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d017      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a1b      	ldr	r2, [pc, #108]	@ (800abc8 <I2C_DMAError+0x218>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d011      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a19      	ldr	r2, [pc, #100]	@ (800abcc <I2C_DMAError+0x21c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d00b      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a17      	ldr	r2, [pc, #92]	@ (800abd0 <I2C_DMAError+0x220>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d005      	beq.n	800ab82 <I2C_DMAError+0x1d2>
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a15      	ldr	r2, [pc, #84]	@ (800abd4 <I2C_DMAError+0x224>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d12a      	bne.n	800abd8 <I2C_DMAError+0x228>
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bf0c      	ite	eq
 800ab8e:	2301      	moveq	r3, #1
 800ab90:	2300      	movne	r3, #0
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	e029      	b.n	800abea <I2C_DMAError+0x23a>
 800ab96:	bf00      	nop
 800ab98:	40020010 	.word	0x40020010
 800ab9c:	40020028 	.word	0x40020028
 800aba0:	40020040 	.word	0x40020040
 800aba4:	40020058 	.word	0x40020058
 800aba8:	40020070 	.word	0x40020070
 800abac:	40020088 	.word	0x40020088
 800abb0:	400200a0 	.word	0x400200a0
 800abb4:	400200b8 	.word	0x400200b8
 800abb8:	40020410 	.word	0x40020410
 800abbc:	40020428 	.word	0x40020428
 800abc0:	40020440 	.word	0x40020440
 800abc4:	40020458 	.word	0x40020458
 800abc8:	40020470 	.word	0x40020470
 800abcc:	40020488 	.word	0x40020488
 800abd0:	400204a0 	.word	0x400204a0
 800abd4:	400204b8 	.word	0x400204b8
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	bf0c      	ite	eq
 800abe4:	2301      	moveq	r3, #1
 800abe6:	2300      	movne	r3, #0
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800abee:	2301      	movs	r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7fd f806 	bl	8007c04 <HAL_DMA_GetError>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d00e      	beq.n	800ac1c <I2C_DMAError+0x26c>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00b      	beq.n	800ac1c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ac12:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ac14:	2110      	movs	r1, #16
 800ac16:	68b8      	ldr	r0, [r7, #8]
 800ac18:	f7ff fd44 	bl	800a6a4 <I2C_ITError>
  }
}
 800ac1c:	bf00      	nop
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac30:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac3e:	2200      	movs	r2, #0
 800ac40:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac4e:	2200      	movs	r2, #0
 800ac50:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f7ff fe16 	bl	800a884 <I2C_TreatErrorCallback>
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac70:	e03b      	b.n	800acea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 f962 	bl	800af40 <I2C_IsErrorOccurred>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e041      	b.n	800ad0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8c:	d02d      	beq.n	800acea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac8e:	f7f9 f8e1 	bl	8003e54 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d302      	bcc.n	800aca4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d122      	bne.n	800acea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	699a      	ldr	r2, [r3, #24]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	4013      	ands	r3, r2
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	bf0c      	ite	eq
 800acb4:	2301      	moveq	r3, #1
 800acb6:	2300      	movne	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d113      	bne.n	800acea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc6:	f043 0220 	orr.w	r2, r3, #32
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2220      	movs	r2, #32
 800acd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e00f      	b.n	800ad0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	699a      	ldr	r2, [r3, #24]
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	4013      	ands	r3, r2
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	bf0c      	ite	eq
 800acfa:	2301      	moveq	r3, #1
 800acfc:	2300      	movne	r3, #0
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	461a      	mov	r2, r3
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d0b4      	beq.n	800ac72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ad1e:	e033      	b.n	800ad88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	68b9      	ldr	r1, [r7, #8]
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 f90b 	bl	800af40 <I2C_IsErrorOccurred>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d001      	beq.n	800ad34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e031      	b.n	800ad98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d025      	beq.n	800ad88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad3c:	f7f9 f88a 	bl	8003e54 <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d302      	bcc.n	800ad52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d11a      	bne.n	800ad88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d013      	beq.n	800ad88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad64:	f043 0220 	orr.w	r2, r3, #32
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e007      	b.n	800ad98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d1c4      	bne.n	800ad20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800adac:	e02f      	b.n	800ae0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	68b9      	ldr	r1, [r7, #8]
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f000 f8c4 	bl	800af40 <I2C_IsErrorOccurred>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e02d      	b.n	800ae1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adc2:	f7f9 f847 	bl	8003e54 <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	429a      	cmp	r2, r3
 800add0:	d302      	bcc.n	800add8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11a      	bne.n	800ae0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	f003 0320 	and.w	r3, r3, #32
 800ade2:	2b20      	cmp	r3, #32
 800ade4:	d013      	beq.n	800ae0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adea:	f043 0220 	orr.w	r2, r3, #32
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2220      	movs	r2, #32
 800adf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e007      	b.n	800ae1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	f003 0320 	and.w	r3, r3, #32
 800ae18:	2b20      	cmp	r3, #32
 800ae1a:	d1c8      	bne.n	800adae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ae38:	e071      	b.n	800af1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 f87e 	bl	800af40 <I2C_IsErrorOccurred>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	f003 0320 	and.w	r3, r3, #32
 800ae58:	2b20      	cmp	r3, #32
 800ae5a:	d13b      	bne.n	800aed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d138      	bne.n	800aed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d105      	bne.n	800ae7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	f003 0310 	and.w	r3, r3, #16
 800ae86:	2b10      	cmp	r3, #16
 800ae88:	d121      	bne.n	800aece <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2210      	movs	r2, #16
 800ae90:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2204      	movs	r2, #4
 800ae96:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6859      	ldr	r1, [r3, #4]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	4b24      	ldr	r3, [pc, #144]	@ (800af3c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800aeac:	400b      	ands	r3, r1
 800aeae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2220      	movs	r2, #32
 800aeb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	75fb      	strb	r3, [r7, #23]
 800aecc:	e002      	b.n	800aed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800aed4:	f7f8 ffbe 	bl	8003e54 <HAL_GetTick>
 800aed8:	4602      	mov	r2, r0
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d302      	bcc.n	800aeea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d119      	bne.n	800af1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d116      	bne.n	800af1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	f003 0304 	and.w	r3, r3, #4
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d00f      	beq.n	800af1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af02:	f043 0220 	orr.w	r2, r3, #32
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2220      	movs	r2, #32
 800af0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	f003 0304 	and.w	r3, r3, #4
 800af28:	2b04      	cmp	r3, #4
 800af2a:	d002      	beq.n	800af32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d083      	beq.n	800ae3a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800af32:	7dfb      	ldrb	r3, [r7, #23]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	fe00e800 	.word	0xfe00e800

0800af40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	@ 0x28
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	f003 0310 	and.w	r3, r3, #16
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d068      	beq.n	800b03e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2210      	movs	r2, #16
 800af72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800af74:	e049      	b.n	800b00a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7c:	d045      	beq.n	800b00a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800af7e:	f7f8 ff69 	bl	8003e54 <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d302      	bcc.n	800af94 <I2C_IsErrorOccurred+0x54>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d13a      	bne.n	800b00a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800afa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afb6:	d121      	bne.n	800affc <I2C_IsErrorOccurred+0xbc>
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afbe:	d01d      	beq.n	800affc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800afc0:	7cfb      	ldrb	r3, [r7, #19]
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	d01a      	beq.n	800affc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800afd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800afd6:	f7f8 ff3d 	bl	8003e54 <HAL_GetTick>
 800afda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800afdc:	e00e      	b.n	800affc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800afde:	f7f8 ff39 	bl	8003e54 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b19      	cmp	r3, #25
 800afea:	d907      	bls.n	800affc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	f043 0320 	orr.w	r3, r3, #32
 800aff2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800affa:	e006      	b.n	800b00a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	f003 0320 	and.w	r3, r3, #32
 800b006:	2b20      	cmp	r3, #32
 800b008:	d1e9      	bne.n	800afde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	f003 0320 	and.w	r3, r3, #32
 800b014:	2b20      	cmp	r3, #32
 800b016:	d003      	beq.n	800b020 <I2C_IsErrorOccurred+0xe0>
 800b018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0aa      	beq.n	800af76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b024:	2b00      	cmp	r3, #0
 800b026:	d103      	bne.n	800b030 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2220      	movs	r2, #32
 800b02e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b030:	6a3b      	ldr	r3, [r7, #32]
 800b032:	f043 0304 	orr.w	r3, r3, #4
 800b036:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00b      	beq.n	800b068 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00b      	beq.n	800b08a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	f043 0308 	orr.w	r3, r3, #8
 800b078:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	f043 0302 	orr.w	r3, r3, #2
 800b09a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d01c      	beq.n	800b0ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff fc0c 	bl	800a8d2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6859      	ldr	r1, [r3, #4]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b0fc <I2C_IsErrorOccurred+0x1bc>)
 800b0c6:	400b      	ands	r3, r1
 800b0c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2220      	movs	r2, #32
 800b0da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3728      	adds	r7, #40	@ 0x28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	fe00e800 	.word	0xfe00e800

0800b100 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	607b      	str	r3, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	817b      	strh	r3, [r7, #10]
 800b10e:	4613      	mov	r3, r2
 800b110:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b112:	897b      	ldrh	r3, [r7, #10]
 800b114:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b118:	7a7b      	ldrb	r3, [r7, #9]
 800b11a:	041b      	lsls	r3, r3, #16
 800b11c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b120:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	4313      	orrs	r3, r2
 800b12a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b12e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	0d5b      	lsrs	r3, r3, #21
 800b13a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b13e:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <I2C_TransferConfig+0x60>)
 800b140:	430b      	orrs	r3, r1
 800b142:	43db      	mvns	r3, r3
 800b144:	ea02 0103 	and.w	r1, r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	430a      	orrs	r2, r1
 800b150:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b152:	bf00      	nop
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	03ff63ff 	.word	0x03ff63ff

0800b164 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b178:	4a39      	ldr	r2, [pc, #228]	@ (800b260 <I2C_Enable_IRQ+0xfc>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d032      	beq.n	800b1e4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b182:	4a38      	ldr	r2, [pc, #224]	@ (800b264 <I2C_Enable_IRQ+0x100>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d02d      	beq.n	800b1e4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b18c:	4a36      	ldr	r2, [pc, #216]	@ (800b268 <I2C_Enable_IRQ+0x104>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d028      	beq.n	800b1e4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b192:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b196:	2b00      	cmp	r3, #0
 800b198:	da03      	bge.n	800b1a2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b1a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b1a2:	887b      	ldrh	r3, [r7, #2]
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d003      	beq.n	800b1b4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800b1b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b1b4:	887b      	ldrh	r3, [r7, #2]
 800b1b6:	f003 0302 	and.w	r3, r3, #2
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800b1c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b1c6:	887b      	ldrh	r3, [r7, #2]
 800b1c8:	2b10      	cmp	r3, #16
 800b1ca:	d103      	bne.n	800b1d4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b1d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b1d4:	887b      	ldrh	r3, [r7, #2]
 800b1d6:	2b20      	cmp	r3, #32
 800b1d8:	d133      	bne.n	800b242 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f043 0320 	orr.w	r3, r3, #32
 800b1e0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b1e2:	e02e      	b.n	800b242 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b1e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da03      	bge.n	800b1f4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b1f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b1f4:	887b      	ldrh	r3, [r7, #2]
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800b204:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b206:	887b      	ldrh	r3, [r7, #2]
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800b216:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b218:	887b      	ldrh	r3, [r7, #2]
 800b21a:	2b10      	cmp	r3, #16
 800b21c:	d103      	bne.n	800b226 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b224:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b226:	887b      	ldrh	r3, [r7, #2]
 800b228:	2b20      	cmp	r3, #32
 800b22a:	d103      	bne.n	800b234 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b232:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b234:	887b      	ldrh	r3, [r7, #2]
 800b236:	2b40      	cmp	r3, #64	@ 0x40
 800b238:	d103      	bne.n	800b242 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b240:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6819      	ldr	r1, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	430a      	orrs	r2, r1
 800b250:	601a      	str	r2, [r3, #0]
}
 800b252:	bf00      	nop
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	08009563 	.word	0x08009563
 800b264:	080099a9 	.word	0x080099a9
 800b268:	08009749 	.word	0x08009749

0800b26c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b27c:	887b      	ldrh	r3, [r7, #2]
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00f      	beq.n	800b2a6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800b28c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b294:	b2db      	uxtb	r3, r3
 800b296:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b29a:	2b28      	cmp	r3, #40	@ 0x28
 800b29c:	d003      	beq.n	800b2a6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b2a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b2a6:	887b      	ldrh	r3, [r7, #2]
 800b2a8:	f003 0302 	and.w	r3, r3, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00f      	beq.n	800b2d0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800b2b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b2c4:	2b28      	cmp	r3, #40	@ 0x28
 800b2c6:	d003      	beq.n	800b2d0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b2ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b2d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	da03      	bge.n	800b2e0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b2de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b2e0:	887b      	ldrh	r3, [r7, #2]
 800b2e2:	2b10      	cmp	r3, #16
 800b2e4:	d103      	bne.n	800b2ee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b2ec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b2ee:	887b      	ldrh	r3, [r7, #2]
 800b2f0:	2b20      	cmp	r3, #32
 800b2f2:	d103      	bne.n	800b2fc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f043 0320 	orr.w	r3, r3, #32
 800b2fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b2fc:	887b      	ldrh	r3, [r7, #2]
 800b2fe:	2b40      	cmp	r3, #64	@ 0x40
 800b300:	d103      	bne.n	800b30a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b308:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	6819      	ldr	r1, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	43da      	mvns	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	400a      	ands	r2, r1
 800b31a:	601a      	str	r2, [r3, #0]
}
 800b31c:	bf00      	nop
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b20      	cmp	r3, #32
 800b33c:	d138      	bne.n	800b3b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b344:	2b01      	cmp	r3, #1
 800b346:	d101      	bne.n	800b34c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b348:	2302      	movs	r3, #2
 800b34a:	e032      	b.n	800b3b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2224      	movs	r2, #36	@ 0x24
 800b358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0201 	bic.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b37a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6819      	ldr	r1, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	430a      	orrs	r2, r1
 800b38a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f042 0201 	orr.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e000      	b.n	800b3b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3b0:	2302      	movs	r3, #2
  }
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b085      	sub	sp, #20
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b20      	cmp	r3, #32
 800b3d2:	d139      	bne.n	800b448 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d101      	bne.n	800b3e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b3de:	2302      	movs	r3, #2
 800b3e0:	e033      	b.n	800b44a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2224      	movs	r2, #36	@ 0x24
 800b3ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f022 0201 	bic.w	r2, r2, #1
 800b400:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b410:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	021b      	lsls	r3, r3, #8
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4313      	orrs	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f042 0201 	orr.w	r2, r2, #1
 800b432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2220      	movs	r2, #32
 800b438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	e000      	b.n	800b44a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b448:	2302      	movs	r3, #2
  }
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
	...

0800b458 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e070      	b.n	800b54c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7f7 f876 	bl	8002570 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f042 0201 	orr.w	r2, r2, #1
 800b49a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0201 	bic.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b4ba:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b4ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4da:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b4ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a19      	ldr	r2, [pc, #100]	@ (800b554 <HAL_JPEG_Init+0xfc>)
 800b4f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a18      	ldr	r2, [pc, #96]	@ (800b558 <HAL_JPEG_Init+0x100>)
 800b4f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fd75 	bl	800bff4 <JPEG_Set_HuffEnc_Mem>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e018      	b.n	800b54c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b528:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	0801f1b0 	.word	0x0801f1b0
 800b558:	0801f1f0 	.word	0x0801f1f0

0800b55c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <HAL_JPEG_GetInfo+0x16>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e083      	b.n	800b67e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	f003 0303 	and.w	r3, r3, #3
 800b580:	2b02      	cmp	r3, #2
 800b582:	d103      	bne.n	800b58c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2210      	movs	r2, #16
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	e017      	b.n	800b5bc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f003 0303 	and.w	r3, r3, #3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2200      	movs	r2, #0
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	e00c      	b.n	800b5bc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	f003 0303 	and.w	r3, r3, #3
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d103      	bne.n	800b5b8 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2230      	movs	r2, #48	@ 0x30
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	e001      	b.n	800b5bc <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e060      	b.n	800b67e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	0c1b      	lsrs	r3, r3, #16
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	0c1b      	lsrs	r3, r3, #16
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b10      	cmp	r3, #16
 800b5de:	d003      	beq.n	800b5e8 <HAL_JPEG_GetInfo+0x8c>
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b30      	cmp	r3, #48	@ 0x30
 800b5e6:	d140      	bne.n	800b66a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	091b      	lsrs	r3, r3, #4
 800b5f0:	f003 030f 	and.w	r3, r3, #15
 800b5f4:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	091b      	lsrs	r3, r3, #4
 800b5fe:	f003 030f 	and.w	r3, r3, #15
 800b602:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	091b      	lsrs	r3, r3, #4
 800b60c:	f003 030f 	and.w	r3, r3, #15
 800b610:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d109      	bne.n	800b62c <HAL_JPEG_GetInfo+0xd0>
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d106      	bne.n	800b62c <HAL_JPEG_GetInfo+0xd0>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d103      	bne.n	800b62c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	2202      	movs	r2, #2
 800b628:	605a      	str	r2, [r3, #4]
 800b62a:	e01d      	b.n	800b668 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d109      	bne.n	800b646 <HAL_JPEG_GetInfo+0xea>
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d106      	bne.n	800b646 <HAL_JPEG_GetInfo+0xea>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d103      	bne.n	800b646 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2200      	movs	r2, #0
 800b642:	605a      	str	r2, [r3, #4]
 800b644:	e010      	b.n	800b668 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d109      	bne.n	800b660 <HAL_JPEG_GetInfo+0x104>
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <HAL_JPEG_GetInfo+0x104>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d103      	bne.n	800b660 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2201      	movs	r2, #1
 800b65c:	605a      	str	r2, [r3, #4]
 800b65e:	e003      	b.n	800b668 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2200      	movs	r2, #0
 800b664:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800b666:	e003      	b.n	800b670 <HAL_JPEG_GetInfo+0x114>
 800b668:	e002      	b.n	800b670 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2200      	movs	r2, #0
 800b66e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 fdb1 	bl	800d1d8 <JPEG_GetQuality>
 800b676:	4602      	mov	r2, r0
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3718      	adds	r7, #24
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b084      	sub	sp, #16
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	607a      	str	r2, [r7, #4]
 800b692:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d005      	beq.n	800b6a6 <HAL_JPEG_Decode_DMA+0x20>
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <HAL_JPEG_Decode_DMA+0x20>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e04c      	b.n	800b744 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d101      	bne.n	800b6b8 <HAL_JPEG_Decode_DMA+0x32>
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	e045      	b.n	800b744 <HAL_JPEG_Decode_DMA+0xbe>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d134      	bne.n	800b736 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2204      	movs	r2, #4
 800b6d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6d8:	f023 020f 	bic.w	r2, r3, #15
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6e4:	f043 020e 	orr.w	r2, r3, #14
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f000 fef1 	bl	800c4f8 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f001 fa12 	bl	800cb40 <JPEG_DMA_StartProcess>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00f      	beq.n	800b742 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2206      	movs	r2, #6
 800b726:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e006      	b.n	800b744 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800b73e:	2302      	movs	r3, #2
 800b740:	e000      	b.n	800b744 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b75e:	f003 030c 	and.w	r3, r3, #12
 800b762:	2b0c      	cmp	r3, #12
 800b764:	d116      	bne.n	800b794 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b774:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d033      	beq.n	800b7ee <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b78a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	655a      	str	r2, [r3, #84]	@ 0x54
 800b792:	e02c      	b.n	800b7ee <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b798:	f003 030c 	and.w	r3, r3, #12
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d126      	bne.n	800b7ee <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d009      	beq.n	800b7be <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f043 0306 	orr.w	r3, r3, #6
 800b7bc:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	f003 0302 	and.w	r3, r3, #2
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800b7da:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	43da      	mvns	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	400a      	ands	r2, r1
 800b7ec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <HAL_JPEG_Abort>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Abort(JPEG_HandleTypeDef *hjpeg)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t tmpContext;
  tmpContext = hjpeg->Context;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b808:	60fb      	str	r3, [r7, #12]

  /*Reset the Context operation and method*/
  hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b80e:	4b4e      	ldr	r3, [pc, #312]	@ (800b948 <HAL_JPEG_Abort+0x14c>)
 800b810:	4013      	ands	r3, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6553      	str	r3, [r2, #84]	@ 0x54

  if ((tmpContext & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f003 030c 	and.w	r3, r3, #12
 800b81c:	2b0c      	cmp	r3, #12
 800b81e:	d125      	bne.n	800b86c <HAL_JPEG_Abort+0x70>
  {
    /* Stop the DMA In/out Xfer*/
    if (HAL_MDMA_Abort(hjpeg->hdmaout) != HAL_OK)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b824:	4618      	mov	r0, r3
 800b826:	f001 fe54 	bl	800d4d2 <HAL_MDMA_Abort>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00a      	beq.n	800b846 <HAL_JPEG_Abort+0x4a>
    {
      if (hjpeg->hdmaout->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b834:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b836:	2b40      	cmp	r3, #64	@ 0x40
 800b838:	d105      	bne.n	800b846 <HAL_JPEG_Abort+0x4a>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b83e:	f043 0204 	orr.w	r2, r3, #4
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
    if (HAL_MDMA_Abort(hjpeg->hdmain) != HAL_OK)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b84a:	4618      	mov	r0, r3
 800b84c:	f001 fe41 	bl	800d4d2 <HAL_MDMA_Abort>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <HAL_JPEG_Abort+0x70>
    {
      if (hjpeg->hdmain->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b85a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b85c:	2b40      	cmp	r3, #64	@ 0x40
 800b85e:	d105      	bne.n	800b86c <HAL_JPEG_Abort+0x70>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b864:	f043 0204 	orr.w	r2, r3, #4
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

  }

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0201 	bic.w	r2, r2, #1
 800b87a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b87c:	f7f8 faea 	bl	8003e54 <HAL_GetTick>
 800b880:	60b8      	str	r0, [r7, #8]

  /* Check if the JPEG Codec is effectively disabled */
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800b882:	e012      	b.n	800b8aa <HAL_JPEG_Abort+0xae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > JPEG_TIMEOUT_VALUE)
 800b884:	f7f8 fae6 	bl	8003e54 <HAL_GetTick>
 800b888:	4602      	mov	r2, r0
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b892:	d90a      	bls.n	800b8aa <HAL_JPEG_Abort+0xae>
    {
      /* Update error code */
      hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b898:	f043 0208 	orr.w	r2, r3, #8
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Change the DMA state */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2206      	movs	r2, #6
 800b8a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800b8a8:	e006      	b.n	800b8b8 <HAL_JPEG_Abort+0xbc>
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e5      	bne.n	800b884 <HAL_JPEG_Abort+0x88>
    }
  }

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b8c6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b8d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b8e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b8f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Reset the Context Pause*/
  hjpeg->Context &= ~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b908:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Change the DMA state*/
  if (hjpeg->ErrorCode != HAL_JPEG_ERROR_NONE)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b914:	2b00      	cmp	r3, #0
 800b916:	d009      	beq.n	800b92c <HAL_JPEG_Abort+0x130>
  {
    hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2206      	movs	r2, #6
 800b91c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	e008      	b.n	800b93e <HAL_JPEG_Abort+0x142>
  }
  else
  {
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_OK;
 800b93c:	2300      	movs	r3, #0
  }

}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	ffff7ff0 	.word	0xffff7ff0

0800b94c <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800b96a:	bf00      	nop
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	3b03      	subs	r3, #3
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d813      	bhi.n	800b9ca <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9a6:	f003 030c 	and.w	r3, r3, #12
 800b9aa:	2b08      	cmp	r3, #8
 800b9ac:	d103      	bne.n	800b9b6 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fe16 	bl	800c5e0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800b9b4:	e00b      	b.n	800b9ce <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ba:	f003 030c 	and.w	r3, r3, #12
 800b9be:	2b0c      	cmp	r3, #12
 800b9c0:	d105      	bne.n	800b9ce <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f001 f956 	bl	800cc74 <JPEG_DMA_ContinueProcess>
      break;
 800b9c8:	e001      	b.n	800b9ce <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800b9ca:	bf00      	nop
 800b9cc:	e000      	b.n	800b9d0 <HAL_JPEG_IRQHandler+0x44>
      break;
 800b9ce:	bf00      	nop
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b08b      	sub	sp, #44	@ 0x2c
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	e020      	b.n	800ba32 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800b9fa:	6a3a      	ldr	r2, [r7, #32]
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fe:	4413      	add	r3, r2
 800ba00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba04:	d90f      	bls.n	800ba26 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e055      	b.n	800bab6 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	6a3b      	ldr	r3, [r7, #32]
 800ba12:	440b      	add	r3, r1
 800ba14:	3201      	adds	r2, #1
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	701a      	strb	r2, [r3, #0]
      p++;
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	623b      	str	r3, [r7, #32]
      i--;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba22:	3b01      	subs	r3, #1
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800ba26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1ee      	bne.n	800ba0a <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	61fb      	str	r3, [r7, #28]
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	2b0f      	cmp	r3, #15
 800ba36:	d9db      	bls.n	800b9f0 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	6a3b      	ldr	r3, [r7, #32]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	2200      	movs	r2, #0
 800ba40:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	6a3a      	ldr	r2, [r7, #32]
 800ba46:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	617b      	str	r3, [r7, #20]
  p = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800ba56:	e027      	b.n	800baa8 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	4413      	add	r3, r2
 800ba60:	69ba      	ldr	r2, [r7, #24]
 800ba62:	601a      	str	r2, [r3, #0]
      p++;
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	3301      	adds	r3, #1
 800ba68:	623b      	str	r3, [r7, #32]
      code++;
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	4413      	add	r3, r2
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d0eb      	beq.n	800ba58 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b1f      	cmp	r3, #31
 800ba84:	d901      	bls.n	800ba8a <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e015      	b.n	800bab6 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d301      	bcc.n	800ba9c <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e00c      	b.n	800bab6 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	61bb      	str	r3, [r7, #24]
    si++;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	3301      	adds	r3, #1
 800baa6:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	4413      	add	r3, r2
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1dd      	bne.n	800ba70 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	372c      	adds	r7, #44	@ 0x2c
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800bac8:	af00      	add	r7, sp, #0
 800baca:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bace:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800bad2:	6018      	str	r0, [r3, #0]
 800bad4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bad8:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800badc:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800bade:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bae2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800bae6:	6818      	ldr	r0, [r3, #0]
 800bae8:	f107 0308 	add.w	r3, r7, #8
 800baec:	f107 020c 	add.w	r2, r7, #12
 800baf0:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800baf4:	f7ff ff70 	bl	800b9d8 <JPEG_Bits_To_SizeCodes>
 800baf8:	4603      	mov	r3, r0
 800bafa:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800bafe:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d002      	beq.n	800bb0c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800bb06:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800bb0a:	e075      	b.n	800bbf8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800bb12:	e067      	b.n	800bbe4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800bb14:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bb18:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800bb22:	4413      	add	r3, r2
 800bb24:	3310      	adds	r3, #16
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800bb2c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d103      	bne.n	800bb3c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800bb34:	23a0      	movs	r3, #160	@ 0xa0
 800bb36:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800bb3a:	e021      	b.n	800bb80 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800bb3c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800bb40:	2bf0      	cmp	r3, #240	@ 0xf0
 800bb42:	d103      	bne.n	800bb4c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800bb44:	23a1      	movs	r3, #161	@ 0xa1
 800bb46:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800bb4a:	e019      	b.n	800bb80 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800bb4c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800bb50:	091b      	lsrs	r3, r3, #4
 800bb52:	f003 030f 	and.w	r3, r3, #15
 800bb56:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800bb5a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800bb5e:	f003 030f 	and.w	r3, r3, #15
 800bb62:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800bb66:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	461a      	mov	r2, r3
 800bb74:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800bb78:	4413      	add	r3, r2
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800bb80:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800bb84:	2ba1      	cmp	r3, #161	@ 0xa1
 800bb86:	d901      	bls.n	800bb8c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e035      	b.n	800bbf8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800bb8c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bb90:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800bb94:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800bb98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb9c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bba0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800bba4:	6819      	ldr	r1, [r3, #0]
 800bba6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800bbaa:	3328      	adds	r3, #40	@ 0x28
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	440b      	add	r3, r1
 800bbb0:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800bbb2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bbb6:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800bbba:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800bbbe:	4413      	add	r3, r2
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	b2d9      	uxtb	r1, r3
 800bbc6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bbca:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800bbd4:	4413      	add	r3, r2
 800bbd6:	460a      	mov	r2, r1
 800bbd8:	701a      	strb	r2, [r3, #0]
      k++;
 800bbda:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800bbde:	3301      	adds	r3, #1
 800bbe0:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800bbe4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800bbe8:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d38e      	bcc.n	800bb14 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800bc0e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800bc12:	6018      	str	r0, [r3, #0]
 800bc14:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800bc18:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800bc1c:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800bc1e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800bc22:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800bc2c:	f107 0208 	add.w	r2, r7, #8
 800bc30:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800bc34:	f7ff fed0 	bl	800b9d8 <JPEG_Bits_To_SizeCodes>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800bc3e:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800bc46:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800bc4a:	e048      	b.n	800bcde <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800bc52:	e03d      	b.n	800bcd0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800bc54:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800bc58:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800bc62:	4413      	add	r3, r2
 800bc64:	3310      	adds	r3, #16
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800bc6c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800bc70:	2b0b      	cmp	r3, #11
 800bc72:	d901      	bls.n	800bc78 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800bc74:	2301      	movs	r3, #1
 800bc76:	e032      	b.n	800bcde <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800bc78:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800bc7c:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800bc80:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800bc84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc88:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800bc8c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800bc90:	6819      	ldr	r1, [r3, #0]
 800bc92:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800bc96:	3302      	adds	r3, #2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	440b      	add	r3, r1
 800bc9c:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800bc9e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800bca2:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800bca6:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800bcaa:	4413      	add	r3, r2
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	b2d9      	uxtb	r1, r3
 800bcb2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800bcb6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800bcc0:	4413      	add	r3, r2
 800bcc2:	460a      	mov	r2, r1
 800bcc4:	701a      	strb	r2, [r3, #0]
      k++;
 800bcc6:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800bcca:	3301      	adds	r3, #1
 800bccc:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800bcd0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800bcd4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d3bb      	bcc.n	800bc54 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b09a      	sub	sp, #104	@ 0x68
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d106      	bne.n	800bd10 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800bd0a:	3318      	adds	r3, #24
 800bd0c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd0e:	e00f      	b.n	800bd30 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d106      	bne.n	800bd2c <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800bd26:	3318      	adds	r3, #24
 800bd28:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd2a:	e001      	b.n	800bd30 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e059      	b.n	800bde4 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d055      	beq.n	800bde2 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800bd36:	f107 0314 	add.w	r3, r7, #20
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	68b8      	ldr	r0, [r7, #8]
 800bd3e:	f7ff ff60 	bl	800bc02 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800bd48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800bd50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd54:	e046      	b.n	800bde4 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800bd56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd58:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800bd5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd5c:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800bd60:	601a      	str	r2, [r3, #0]
    addressDef++;
 800bd62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd64:	3304      	adds	r3, #4
 800bd66:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800bd68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd6a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800bd6e:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800bd70:	230c      	movs	r3, #12
 800bd72:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800bd74:	e032      	b.n	800bddc <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800bd76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800bd7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd7e:	3b04      	subs	r3, #4
 800bd80:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bd82:	f107 0214 	add.w	r2, r7, #20
 800bd86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd88:	4413      	add	r3, r2
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800bd92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd94:	3302      	adds	r3, #2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	3368      	adds	r3, #104	@ 0x68
 800bd9a:	443b      	add	r3, r7
 800bd9c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	4313      	orrs	r3, r2
 800bda4:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800bda6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bdac:	f107 0214 	add.w	r2, r7, #20
 800bdb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdb2:	4413      	add	r3, r2
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	021b      	lsls	r3, r3, #8
 800bdb8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800bdbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdbe:	3302      	adds	r3, #2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	3368      	adds	r3, #104	@ 0x68
 800bdc4:	443b      	add	r3, r7
 800bdc6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800bdd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdd2:	041a      	lsls	r2, r3, #16
 800bdd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdd6:	431a      	orrs	r2, r3
 800bdd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdda:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800bddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d8c9      	bhi.n	800bd76 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3768      	adds	r7, #104	@ 0x68
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800bdf8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800bdfc:	6018      	str	r0, [r3, #0]
 800bdfe:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800be02:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800be06:	6019      	str	r1, [r3, #0]
 800be08:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800be0c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800be10:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800be12:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800be16:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be22:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800be26:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800be2a:	6812      	ldr	r2, [r2, #0]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d10c      	bne.n	800be4a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800be30:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800be34:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be40:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800be44:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800be48:	e01d      	b.n	800be86 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800be4a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800be4e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800be5a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800be5e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800be62:	6812      	ldr	r2, [r2, #0]
 800be64:	429a      	cmp	r2, r3
 800be66:	d10c      	bne.n	800be82 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800be68:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800be6c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800be78:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800be7c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800be80:	e001      	b.n	800be86 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e0a8      	b.n	800bfd8 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800be86:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800be8a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 80a0 	beq.w	800bfd6 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800be96:	f107 0214 	add.w	r2, r7, #20
 800be9a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800be9e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800bea2:	4611      	mov	r1, r2
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	f7ff fe0c 	bl	800bac2 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800beb0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800beb8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800bebc:	e08c      	b.n	800bfd8 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800bebe:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800bec2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800bec6:	2300      	movs	r3, #0
 800bec8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800becc:	e00e      	b.n	800beec <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800bece:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bed2:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800bed6:	601a      	str	r2, [r3, #0]
      addressDef++;
 800bed8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bedc:	3304      	adds	r3, #4
 800bede:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800bee2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bee6:	3301      	adds	r3, #1
 800bee8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800beec:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d9ec      	bls.n	800bece <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800bef4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bef8:	4a3a      	ldr	r2, [pc, #232]	@ (800bfe4 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800befa:	601a      	str	r2, [r3, #0]
    addressDef++;
 800befc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bf00:	3304      	adds	r3, #4
 800bf02:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800bf06:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bf0a:	4a37      	ldr	r2, [pc, #220]	@ (800bfe8 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800bf0c:	601a      	str	r2, [r3, #0]
    addressDef++;
 800bf0e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bf12:	3304      	adds	r3, #4
 800bf14:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800bf18:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bf1c:	4a33      	ldr	r2, [pc, #204]	@ (800bfec <JPEG_Set_HuffAC_Mem+0x200>)
 800bf1e:	601a      	str	r2, [r3, #0]
    addressDef++;
 800bf20:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bf24:	3304      	adds	r3, #4
 800bf26:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800bf2a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800bf2e:	4a30      	ldr	r2, [pc, #192]	@ (800bff0 <JPEG_Set_HuffAC_Mem+0x204>)
 800bf30:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800bf32:	23a2      	movs	r3, #162	@ 0xa2
 800bf34:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800bf38:	e049      	b.n	800bfce <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800bf3a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800bf44:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800bf48:	3b04      	subs	r3, #4
 800bf4a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800bf4e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800bf52:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800bf56:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bf5a:	4413      	add	r3, r2
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	021b      	lsls	r3, r3, #8
 800bf60:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800bf64:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800bf68:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800bf6c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bf70:	3328      	adds	r3, #40	@ 0x28
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	440b      	add	r3, r1
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800bf80:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bf84:	3b01      	subs	r3, #1
 800bf86:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800bf8a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800bf8e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800bf92:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bf96:	4413      	add	r3, r2
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	021b      	lsls	r3, r3, #8
 800bf9c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800bfa0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800bfa4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800bfa8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bfac:	3328      	adds	r3, #40	@ 0x28
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800bfbc:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800bfc0:	041a      	lsls	r2, r3, #16
 800bfc2:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800bfcc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800bfce:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d8b1      	bhi.n	800bf3a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0fd10fd0 	.word	0x0fd10fd0
 800bfe8:	0fd30fd2 	.word	0x0fd30fd2
 800bfec:	0fd50fd4 	.word	0x0fd50fd4
 800bff0:	0fd70fd6 	.word	0x0fd70fd6

0800bff4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f84d 	bl	800c09c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800c00a:	461a      	mov	r2, r3
 800c00c:	491f      	ldr	r1, [pc, #124]	@ (800c08c <JPEG_Set_HuffEnc_Mem+0x98>)
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff feec 	bl	800bdec <JPEG_Set_HuffAC_Mem>
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800c018:	7bfb      	ldrb	r3, [r7, #15]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
 800c020:	e030      	b.n	800c084 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800c02a:	461a      	mov	r2, r3
 800c02c:	4918      	ldr	r1, [pc, #96]	@ (800c090 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff fedc 	bl	800bdec <JPEG_Set_HuffAC_Mem>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	e020      	b.n	800c084 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800c04a:	461a      	mov	r2, r3
 800c04c:	4911      	ldr	r1, [pc, #68]	@ (800c094 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff fe4a 	bl	800bce8 <JPEG_Set_HuffDC_Mem>
 800c054:	4603      	mov	r3, r0
 800c056:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	e010      	b.n	800c084 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800c06a:	461a      	mov	r2, r3
 800c06c:	490a      	ldr	r1, [pc, #40]	@ (800c098 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff fe3a 	bl	800bce8 <JPEG_Set_HuffDC_Mem>
 800c074:	4603      	mov	r3, r0
 800c076:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800c078:	7bfb      	ldrb	r3, [r7, #15]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	e000      	b.n	800c084 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	0801f008 	.word	0x0801f008
 800c090:	0801f0bc 	.word	0x0801f0bc
 800c094:	0801efd0 	.word	0x0801efd0
 800c098:	0801efec 	.word	0x0801efec

0800c09c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b08b      	sub	sp, #44	@ 0x2c
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800c0a4:	4b80      	ldr	r3, [pc, #512]	@ (800c2a8 <JPEG_Set_Huff_DHTMem+0x20c>)
 800c0a6:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800c0a8:	4b80      	ldr	r3, [pc, #512]	@ (800c2ac <JPEG_Set_Huff_DHTMem+0x210>)
 800c0aa:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800c0ac:	4b80      	ldr	r3, [pc, #512]	@ (800c2b0 <JPEG_Set_Huff_DHTMem+0x214>)
 800c0ae:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800c0b0:	4b80      	ldr	r3, [pc, #512]	@ (800c2b4 <JPEG_Set_Huff_DHTMem+0x218>)
 800c0b2:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c0bc:	330c      	adds	r3, #12
 800c0be:	623b      	str	r3, [r7, #32]
  index = 16;
 800c0c0:	2310      	movs	r3, #16
 800c0c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c0c4:	e01d      	b.n	800c102 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	5cd3      	ldrb	r3, [r2, r3]
 800c0ce:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d2:	3b02      	subs	r3, #2
 800c0d4:	6979      	ldr	r1, [r7, #20]
 800c0d6:	5ccb      	ldrb	r3, [r1, r3]
 800c0d8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c0da:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0de:	3b03      	subs	r3, #3
 800c0e0:	6979      	ldr	r1, [r7, #20]
 800c0e2:	5ccb      	ldrb	r3, [r1, r3]
 800c0e4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c0e6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800c0e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0ea:	3a04      	subs	r2, #4
 800c0ec:	6979      	ldr	r1, [r7, #20]
 800c0ee:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c0f0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c0f2:	6a3b      	ldr	r3, [r7, #32]
 800c0f4:	601a      	str	r2, [r3, #0]
    address--;
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fe:	3b04      	subs	r3, #4
 800c100:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c104:	2b03      	cmp	r3, #3
 800c106:	d8de      	bhi.n	800c0c6 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c110:	3318      	adds	r3, #24
 800c112:	623b      	str	r3, [r7, #32]
  index = 12;
 800c114:	230c      	movs	r3, #12
 800c116:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c118:	e021      	b.n	800c15e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11c:	3b01      	subs	r3, #1
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	4413      	add	r3, r2
 800c122:	7c1b      	ldrb	r3, [r3, #16]
 800c124:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c128:	3b02      	subs	r3, #2
 800c12a:	6979      	ldr	r1, [r7, #20]
 800c12c:	440b      	add	r3, r1
 800c12e:	7c1b      	ldrb	r3, [r3, #16]
 800c130:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c132:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c136:	3b03      	subs	r3, #3
 800c138:	6979      	ldr	r1, [r7, #20]
 800c13a:	440b      	add	r3, r1
 800c13c:	7c1b      	ldrb	r3, [r3, #16]
 800c13e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c140:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800c142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c144:	3a04      	subs	r2, #4
 800c146:	6979      	ldr	r1, [r7, #20]
 800c148:	440a      	add	r2, r1
 800c14a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c14c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	601a      	str	r2, [r3, #0]
    address--;
 800c152:	6a3b      	ldr	r3, [r7, #32]
 800c154:	3b04      	subs	r3, #4
 800c156:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800c158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15a:	3b04      	subs	r3, #4
 800c15c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c160:	2b03      	cmp	r3, #3
 800c162:	d8da      	bhi.n	800c11a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c16c:	3328      	adds	r3, #40	@ 0x28
 800c16e:	623b      	str	r3, [r7, #32]
  index = 16;
 800c170:	2310      	movs	r3, #16
 800c172:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c174:	e01d      	b.n	800c1b2 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	3b01      	subs	r3, #1
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	5cd3      	ldrb	r3, [r2, r3]
 800c17e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c182:	3b02      	subs	r3, #2
 800c184:	69f9      	ldr	r1, [r7, #28]
 800c186:	5ccb      	ldrb	r3, [r1, r3]
 800c188:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c18a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18e:	3b03      	subs	r3, #3
 800c190:	69f9      	ldr	r1, [r7, #28]
 800c192:	5ccb      	ldrb	r3, [r1, r3]
 800c194:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c196:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800c198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c19a:	3a04      	subs	r2, #4
 800c19c:	69f9      	ldr	r1, [r7, #28]
 800c19e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c1a0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c1a2:	6a3b      	ldr	r3, [r7, #32]
 800c1a4:	601a      	str	r2, [r3, #0]
    address--;
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	3b04      	subs	r3, #4
 800c1aa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ae:	3b04      	subs	r3, #4
 800c1b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	d8de      	bhi.n	800c176 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c1c0:	33cc      	adds	r3, #204	@ 0xcc
 800c1c2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800c1c4:	6a3b      	ldr	r3, [r7, #32]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c2b8 <JPEG_Set_Huff_DHTMem+0x21c>)
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800c1d4:	021a      	lsls	r2, r3, #8
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	69fa      	ldr	r2, [r7, #28]
 800c1dc:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800c1ea:	6a3b      	ldr	r3, [r7, #32]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	623b      	str	r3, [r7, #32]
  index = 160;
 800c1f0:	23a0      	movs	r3, #160	@ 0xa0
 800c1f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c1f4:	e021      	b.n	800c23a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	69fa      	ldr	r2, [r7, #28]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	7c1b      	ldrb	r3, [r3, #16]
 800c200:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c204:	3b02      	subs	r3, #2
 800c206:	69f9      	ldr	r1, [r7, #28]
 800c208:	440b      	add	r3, r1
 800c20a:	7c1b      	ldrb	r3, [r3, #16]
 800c20c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c20e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c212:	3b03      	subs	r3, #3
 800c214:	69f9      	ldr	r1, [r7, #28]
 800c216:	440b      	add	r3, r1
 800c218:	7c1b      	ldrb	r3, [r3, #16]
 800c21a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c21c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800c21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c220:	3a04      	subs	r2, #4
 800c222:	69f9      	ldr	r1, [r7, #28]
 800c224:	440a      	add	r2, r1
 800c226:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c228:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	601a      	str	r2, [r3, #0]
    address--;
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	3b04      	subs	r3, #4
 800c232:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c236:	3b04      	subs	r3, #4
 800c238:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	2b03      	cmp	r3, #3
 800c23e:	d8da      	bhi.n	800c1f6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c248:	33cc      	adds	r3, #204	@ 0xcc
 800c24a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	b29b      	uxth	r3, r3
 800c252:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	785b      	ldrb	r3, [r3, #1]
 800c258:	061a      	lsls	r2, r3, #24
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	431a      	orrs	r2, r3
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	041b      	lsls	r3, r3, #16
 800c264:	4313      	orrs	r3, r2
 800c266:	60fb      	str	r3, [r7, #12]
  *address = value;
 800c268:	6a3b      	ldr	r3, [r7, #32]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c276:	33dc      	adds	r3, #220	@ 0xdc
 800c278:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800c27a:	6a3b      	ldr	r3, [r7, #32]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b8 <JPEG_Set_Huff_DHTMem+0x21c>)
 800c280:	4013      	ands	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	7bdb      	ldrb	r3, [r3, #15]
 800c288:	021a      	lsls	r2, r3, #8
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	7b92      	ldrb	r2, [r2, #14]
 800c292:	4313      	orrs	r3, r2
 800c294:	60fb      	str	r3, [r7, #12]
  *address = value;
 800c296:	6a3b      	ldr	r3, [r7, #32]
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	3b04      	subs	r3, #4
 800c2a0:	623b      	str	r3, [r7, #32]
  index = 12;
 800c2a2:	230c      	movs	r3, #12
 800c2a4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c2a6:	e027      	b.n	800c2f8 <JPEG_Set_Huff_DHTMem+0x25c>
 800c2a8:	0801f008 	.word	0x0801f008
 800c2ac:	0801f0bc 	.word	0x0801f0bc
 800c2b0:	0801efd0 	.word	0x0801efd0
 800c2b4:	0801efec 	.word	0x0801efec
 800c2b8:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2be:	3301      	adds	r3, #1
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	5cd3      	ldrb	r3, [r2, r3]
 800c2c4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800c2c6:	6939      	ldr	r1, [r7, #16]
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	440b      	add	r3, r1
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c2d0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	6939      	ldr	r1, [r7, #16]
 800c2d8:	5ccb      	ldrb	r3, [r1, r3]
 800c2da:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800c2dc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800c2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2e0:	3a02      	subs	r2, #2
 800c2e2:	6939      	ldr	r1, [r7, #16]
 800c2e4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800c2e6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	601a      	str	r2, [r3, #0]
    address--;
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	3b04      	subs	r3, #4
 800c2f0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f4:	3b04      	subs	r3, #4
 800c2f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fa:	2b03      	cmp	r3, #3
 800c2fc:	d8de      	bhi.n	800c2bc <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c306:	33dc      	adds	r3, #220	@ 0xdc
 800c308:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800c30a:	6a3b      	ldr	r3, [r7, #32]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	7c5b      	ldrb	r3, [r3, #17]
 800c316:	061a      	lsls	r2, r3, #24
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	431a      	orrs	r2, r3
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	7c1b      	ldrb	r3, [r3, #16]
 800c320:	041b      	lsls	r3, r3, #16
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800c326:	6a3b      	ldr	r3, [r7, #32]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c334:	33e8      	adds	r3, #232	@ 0xe8
 800c336:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800c338:	6a3b      	ldr	r3, [r7, #32]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	4b6d      	ldr	r3, [pc, #436]	@ (800c4f4 <JPEG_Set_Huff_DHTMem+0x458>)
 800c33e:	4013      	ands	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	7edb      	ldrb	r3, [r3, #27]
 800c346:	021a      	lsls	r2, r3, #8
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	693a      	ldr	r2, [r7, #16]
 800c34e:	7e92      	ldrb	r2, [r2, #26]
 800c350:	4313      	orrs	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]
  *address = value;
 800c354:	6a3b      	ldr	r3, [r7, #32]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	3b04      	subs	r3, #4
 800c35e:	623b      	str	r3, [r7, #32]
  index = 8;
 800c360:	2308      	movs	r3, #8
 800c362:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c364:	e021      	b.n	800c3aa <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c368:	3301      	adds	r3, #1
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	4413      	add	r3, r2
 800c36e:	7c1b      	ldrb	r3, [r3, #16]
 800c370:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800c372:	6939      	ldr	r1, [r7, #16]
 800c374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c376:	440b      	add	r3, r1
 800c378:	3310      	adds	r3, #16
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c37e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c382:	3b01      	subs	r3, #1
 800c384:	6939      	ldr	r1, [r7, #16]
 800c386:	440b      	add	r3, r1
 800c388:	7c1b      	ldrb	r3, [r3, #16]
 800c38a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800c38c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800c38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c390:	3a02      	subs	r2, #2
 800c392:	6939      	ldr	r1, [r7, #16]
 800c394:	440a      	add	r2, r1
 800c396:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c398:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	601a      	str	r2, [r3, #0]
    address--;
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	3b04      	subs	r3, #4
 800c3a2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a6:	3b04      	subs	r3, #4
 800c3a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d8da      	bhi.n	800c366 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c3b8:	33e8      	adds	r3, #232	@ 0xe8
 800c3ba:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	785b      	ldrb	r3, [r3, #1]
 800c3c8:	061a      	lsls	r2, r3, #24
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	431a      	orrs	r2, r3
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	041b      	lsls	r3, r3, #16
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c3e6:	33f8      	adds	r3, #248	@ 0xf8
 800c3e8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	4b41      	ldr	r3, [pc, #260]	@ (800c4f4 <JPEG_Set_Huff_DHTMem+0x458>)
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	7bdb      	ldrb	r3, [r3, #15]
 800c3f8:	021a      	lsls	r2, r3, #8
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	7b92      	ldrb	r2, [r2, #14]
 800c402:	4313      	orrs	r3, r2
 800c404:	60fb      	str	r3, [r7, #12]
  *address = value;
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	3b04      	subs	r3, #4
 800c410:	623b      	str	r3, [r7, #32]
  index = 12;
 800c412:	230c      	movs	r3, #12
 800c414:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c416:	e01d      	b.n	800c454 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	3301      	adds	r3, #1
 800c41c:	69ba      	ldr	r2, [r7, #24]
 800c41e:	5cd3      	ldrb	r3, [r2, r3]
 800c420:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800c422:	69b9      	ldr	r1, [r7, #24]
 800c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c426:	440b      	add	r3, r1
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c42c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c430:	3b01      	subs	r3, #1
 800c432:	69b9      	ldr	r1, [r7, #24]
 800c434:	5ccb      	ldrb	r3, [r1, r3]
 800c436:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800c438:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800c43a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c43c:	3a02      	subs	r2, #2
 800c43e:	69b9      	ldr	r1, [r7, #24]
 800c440:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800c442:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c444:	6a3b      	ldr	r3, [r7, #32]
 800c446:	601a      	str	r2, [r3, #0]
    address--;
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	3b04      	subs	r3, #4
 800c44c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c450:	3b04      	subs	r3, #4
 800c452:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c456:	2b03      	cmp	r3, #3
 800c458:	d8de      	bhi.n	800c418 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c462:	33f8      	adds	r3, #248	@ 0xf8
 800c464:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	7c5b      	ldrb	r3, [r3, #17]
 800c472:	061a      	lsls	r2, r3, #24
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	431a      	orrs	r2, r3
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	7c1b      	ldrb	r3, [r3, #16]
 800c47c:	041b      	lsls	r3, r3, #16
 800c47e:	4313      	orrs	r3, r2
 800c480:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800c490:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800c494:	623b      	str	r3, [r7, #32]
  index = 160;
 800c496:	23a0      	movs	r3, #160	@ 0xa0
 800c498:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c49a:	e021      	b.n	800c4e0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49e:	3301      	adds	r3, #1
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	7c1b      	ldrb	r3, [r3, #16]
 800c4a6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c4a8:	69b9      	ldr	r1, [r7, #24]
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ac:	440b      	add	r3, r1
 800c4ae:	3310      	adds	r3, #16
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c4b4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	69b9      	ldr	r1, [r7, #24]
 800c4bc:	440b      	add	r3, r1
 800c4be:	7c1b      	ldrb	r3, [r3, #16]
 800c4c0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c4c2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800c4c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4c6:	3a02      	subs	r2, #2
 800c4c8:	69b9      	ldr	r1, [r7, #24]
 800c4ca:	440a      	add	r2, r1
 800c4cc:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c4ce:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	601a      	str	r2, [r3, #0]
    address--;
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	3b04      	subs	r3, #4
 800c4d8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	3b04      	subs	r3, #4
 800c4de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e2:	2b03      	cmp	r3, #3
 800c4e4:	d8da      	bhi.n	800c49c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800c4e6:	bf00      	nop
 800c4e8:	bf00      	nop
 800c4ea:	372c      	adds	r7, #44	@ 0x2c
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	ffff0000 	.word	0xffff0000

0800c4f8 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c504:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c510:	f003 0303 	and.w	r3, r3, #3
 800c514:	2b02      	cmp	r3, #2
 800c516:	d108      	bne.n	800c52a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f042 0208 	orr.w	r2, r2, #8
 800c526:	605a      	str	r2, [r3, #4]
 800c528:	e007      	b.n	800c53a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f022 0208 	bic.w	r2, r2, #8
 800c538:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0201 	bic.w	r2, r2, #1
 800c548:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c558:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c568:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c578:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c588:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f042 0201 	orr.w	r2, r2, #1
 800c598:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c59e:	f003 030c 	and.w	r3, r3, #12
 800c5a2:	2b08      	cmp	r3, #8
 800c5a4:	d108      	bne.n	800c5b8 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800c5b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800c5b6:	e00d      	b.n	800c5d4 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5bc:	f003 030c 	and.w	r3, r3, #12
 800c5c0:	2b0c      	cmp	r3, #12
 800c5c2:	d107      	bne.n	800c5d4 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c5d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ec:	f003 0303 	and.w	r3, r3, #3
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d125      	bne.n	800c640 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d01e      	beq.n	800c640 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	3304      	adds	r3, #4
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7fe ffa7 	bl	800b55c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3304      	adds	r3, #4
 800c618:	4619      	mov	r1, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff f996 	bl	800b94c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c62e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c63e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c644:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d116      	bne.n	800c67a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c652:	f003 0302 	and.w	r3, r3, #2
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c65a:	2108      	movs	r1, #8
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f988 	bl	800c972 <JPEG_ReadInputData>
 800c662:	e00a      	b.n	800c67a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c66a:	f003 0304 	and.w	r3, r3, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d003      	beq.n	800c67a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800c672:	2101      	movs	r1, #1
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f97c 	bl	800c972 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c67e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d116      	bne.n	800c6b4 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c68c:	f003 0308 	and.w	r3, r3, #8
 800c690:	2b00      	cmp	r3, #0
 800c692:	d004      	beq.n	800c69e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c694:	2108      	movs	r1, #8
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f864 	bl	800c764 <JPEG_StoreOutputData>
 800c69c:	e00a      	b.n	800c6b4 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a4:	f003 0310 	and.w	r3, r3, #16
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800c6ac:	2101      	movs	r1, #1
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f858 	bl	800c764 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6be:	2b20      	cmp	r3, #32
 800c6c0:	d14b      	bne.n	800c75a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f022 0201 	bic.w	r2, r2, #1
 800c6d0:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6d6:	f003 030c 	and.w	r3, r3, #12
 800c6da:	2b08      	cmp	r3, #8
 800c6dc:	d107      	bne.n	800c6ee <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c6ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c6fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00a      	beq.n	800c71c <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	69d9      	ldr	r1, [r3, #28]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70e:	461a      	mov	r2, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7f5 f9ed 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c720:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c726:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2201      	movs	r2, #1
 800c73a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f003 0303 	and.w	r3, r3, #3
 800c744:	2b02      	cmp	r3, #2
 800c746:	d103      	bne.n	800c750 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7f5 f9b1 	bl	8001ab0 <HAL_JPEG_DecodeCpltCallback>
 800c74e:	e002      	b.n	800c756 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff f906 	bl	800b962 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800c756:	2301      	movs	r3, #1
 800c758:	e000      	b.n	800c75c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	440b      	add	r3, r1
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d34b      	bcc.n	800c818 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800c780:	2300      	movs	r3, #0
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	e031      	b.n	800c7ea <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c78c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	69da      	ldr	r2, [r3, #28]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c796:	4413      	add	r3, r2
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	b2d2      	uxtb	r2, r2
 800c79c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	0a19      	lsrs	r1, r3, #8
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	69da      	ldr	r2, [r3, #28]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	4413      	add	r3, r2
 800c7ae:	b2ca      	uxtb	r2, r1
 800c7b0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	0c19      	lsrs	r1, r3, #16
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	69da      	ldr	r2, [r3, #28]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7be:	3302      	adds	r3, #2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	b2ca      	uxtb	r2, r1
 800c7c4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	0e19      	lsrs	r1, r3, #24
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	69da      	ldr	r2, [r3, #28]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d2:	3303      	adds	r3, #3
 800c7d4:	4413      	add	r3, r2
 800c7d6:	b2ca      	uxtb	r2, r1
 800c7d8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7de:	1d1a      	adds	r2, r3, #4
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	617b      	str	r3, [r7, #20]
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d3c9      	bcc.n	800c786 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	f040 80b5 	bne.w	800c96a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	69d9      	ldr	r1, [r3, #28]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c808:	461a      	mov	r2, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7f5 f970 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800c816:	e0a8      	b.n	800c96a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c820:	429a      	cmp	r2, r3
 800c822:	f240 80a2 	bls.w	800c96a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	089b      	lsrs	r3, r3, #2
 800c832:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800c834:	2300      	movs	r3, #0
 800c836:	617b      	str	r3, [r7, #20]
 800c838:	e031      	b.n	800c89e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c840:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	69da      	ldr	r2, [r3, #28]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84a:	4413      	add	r3, r2
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	b2d2      	uxtb	r2, r2
 800c850:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	0a19      	lsrs	r1, r3, #8
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	69da      	ldr	r2, [r3, #28]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c85e:	3301      	adds	r3, #1
 800c860:	4413      	add	r3, r2
 800c862:	b2ca      	uxtb	r2, r1
 800c864:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	0c19      	lsrs	r1, r3, #16
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	69da      	ldr	r2, [r3, #28]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c872:	3302      	adds	r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	b2ca      	uxtb	r2, r1
 800c878:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	0e19      	lsrs	r1, r3, #24
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	69da      	ldr	r2, [r3, #28]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c886:	3303      	adds	r3, #3
 800c888:	4413      	add	r3, r2
 800c88a:	b2ca      	uxtb	r2, r1
 800c88c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c892:	1d1a      	adds	r2, r3, #4
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	3301      	adds	r3, #1
 800c89c:	617b      	str	r3, [r7, #20]
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d3c9      	bcc.n	800c83a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d10b      	bne.n	800c8ca <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	69d9      	ldr	r1, [r3, #28]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7f5 f917 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c8c8:	e04f      	b.n	800c96a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8dc:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]
 800c8e2:	e015      	b.n	800c910 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	f003 0303 	and.w	r3, r3, #3
 800c8ea:	00db      	lsls	r3, r3, #3
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	fa22 f103 	lsr.w	r1, r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	69da      	ldr	r2, [r3, #28]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8fa:	4413      	add	r3, r2
 800c8fc:	b2ca      	uxtb	r2, r1
 800c8fe:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c904:	1c5a      	adds	r2, r3, #1
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	3301      	adds	r3, #1
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	429a      	cmp	r2, r3
 800c916:	d3e5      	bcc.n	800c8e4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	69d9      	ldr	r1, [r3, #28]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c920:	461a      	mov	r2, r3
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7f5 f8e4 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f1c3 0304 	rsb	r3, r3, #4
 800c934:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	617b      	str	r3, [r7, #20]
 800c93a:	e013      	b.n	800c964 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	68ba      	ldr	r2, [r7, #8]
 800c942:	fa22 f103 	lsr.w	r1, r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	69da      	ldr	r2, [r3, #28]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c94e:	4413      	add	r3, r2
 800c950:	b2ca      	uxtb	r2, r1
 800c952:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	3301      	adds	r3, #1
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	2b03      	cmp	r3, #3
 800c968:	d9e8      	bls.n	800c93c <JPEG_StoreOutputData+0x1d8>
}
 800c96a:	bf00      	nop
 800c96c:	3718      	adds	r7, #24
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b088      	sub	sp, #32
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <JPEG_ReadInputData+0x1c>
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d104      	bne.n	800c998 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800c98e:	2101      	movs	r1, #1
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7fe fedb 	bl	800b74c <HAL_JPEG_Pause>
 800c996:	e028      	b.n	800c9ea <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d906      	bls.n	800c9b2 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	61fb      	str	r3, [r7, #28]
 800c9b0:	e01b      	b.n	800c9ea <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d115      	bne.n	800c9ea <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7fe ffd6 	bl	800b976 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	d905      	bls.n	800c9de <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d6:	f023 0203 	bic.w	r2, r3, #3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f040 809f 	bne.w	800cb36 <JPEG_ReadInputData+0x1c4>
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 809b 	beq.w	800cb36 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	089b      	lsrs	r3, r3, #2
 800ca04:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d335      	bcc.n	800ca7a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800ca0e:	2300      	movs	r3, #0
 800ca10:	61bb      	str	r3, [r7, #24]
 800ca12:	e02d      	b.n	800ca70 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a1b      	ldr	r3, [r3, #32]
 800ca18:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	699a      	ldr	r2, [r3, #24]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	4413      	add	r3, r2
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	699a      	ldr	r2, [r3, #24]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	4413      	add	r3, r2
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca34:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6999      	ldr	r1, [r3, #24]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3302      	adds	r3, #2
 800ca40:	440b      	add	r3, r1
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ca46:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	699a      	ldr	r2, [r3, #24]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3303      	adds	r3, #3
 800ca52:	4413      	add	r3, r2
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ca5c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca5e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	1d1a      	adds	r2, r3, #4
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	61bb      	str	r3, [r7, #24]
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d3cd      	bcc.n	800ca14 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800ca78:	e05d      	b.n	800cb36 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d035      	beq.n	800caec <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800ca80:	2300      	movs	r3, #0
 800ca82:	61bb      	str	r3, [r7, #24]
 800ca84:	e02d      	b.n	800cae2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	699a      	ldr	r2, [r3, #24]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	699a      	ldr	r2, [r3, #24]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	4413      	add	r3, r2
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800caa6:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6999      	ldr	r1, [r3, #24]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3302      	adds	r3, #2
 800cab2:	440b      	add	r3, r1
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800cab8:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	699a      	ldr	r2, [r3, #24]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3303      	adds	r3, #3
 800cac4:	4413      	add	r3, r2
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800cace:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800cad0:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a1b      	ldr	r3, [r3, #32]
 800cad6:	1d1a      	adds	r2, r3, #4
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	3301      	adds	r3, #1
 800cae0:	61bb      	str	r3, [r7, #24]
 800cae2:	69ba      	ldr	r2, [r7, #24]
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d3cd      	bcc.n	800ca86 <JPEG_ReadInputData+0x114>
}
 800caea:	e024      	b.n	800cb36 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800caf0:	2300      	movs	r3, #0
 800caf2:	61bb      	str	r3, [r7, #24]
 800caf4:	e017      	b.n	800cb26 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	699a      	ldr	r2, [r3, #24]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	4413      	add	r3, r2
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	461a      	mov	r2, r3
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	f003 0303 	and.w	r3, r3, #3
 800cb0a:	00db      	lsls	r3, r3, #3
 800cb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a1b      	ldr	r3, [r3, #32]
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	3301      	adds	r3, #1
 800cb24:	61bb      	str	r3, [r7, #24]
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d3e3      	bcc.n	800caf6 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800cb36:	bf00      	nop
 800cb38:	3720      	adds	r7, #32
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
	...

0800cb40 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800cb40:	b590      	push	{r4, r7, lr}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af02      	add	r7, sp, #8
 800cb46:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb4e:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb56:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d804      	bhi.n	800cb6c <JPEG_DMA_StartProcess+0x2c>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d901      	bls.n	800cb70 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e074      	b.n	800cc5a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb74:	4a3b      	ldr	r2, [pc, #236]	@ (800cc64 <JPEG_DMA_StartProcess+0x124>)
 800cb76:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb7c:	4a3a      	ldr	r2, [pc, #232]	@ (800cc68 <JPEG_DMA_StartProcess+0x128>)
 800cb7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb84:	4a39      	ldr	r2, [pc, #228]	@ (800cc6c <JPEG_DMA_StartProcess+0x12c>)
 800cb86:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb8c:	4a36      	ldr	r2, [pc, #216]	@ (800cc68 <JPEG_DMA_StartProcess+0x128>)
 800cb8e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb94:	4a36      	ldr	r2, [pc, #216]	@ (800cc70 <JPEG_DMA_StartProcess+0x130>)
 800cb96:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d002      	beq.n	800cba4 <JPEG_DMA_StartProcess+0x64>
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d107      	bne.n	800cbb4 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cba8:	f043 0204 	orr.w	r2, r3, #4
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e052      	b.n	800cc5a <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbbc:	68f9      	ldr	r1, [r7, #12]
 800cbbe:	fbb3 f1f1 	udiv	r1, r3, r1
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	fb00 f101 	mul.w	r1, r0, r1
 800cbc8:	1a5b      	subs	r3, r3, r1
 800cbca:	1ad2      	subs	r2, r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd8:	68b9      	ldr	r1, [r7, #8]
 800cbda:	fbb3 f1f1 	udiv	r1, r3, r1
 800cbde:	68b8      	ldr	r0, [r7, #8]
 800cbe0:	fb00 f101 	mul.w	r1, r0, r1
 800cbe4:	1a5b      	subs	r3, r3, r1
 800cbe6:	1ad2      	subs	r2, r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	3344      	adds	r3, #68	@ 0x44
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	461c      	mov	r4, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc02:	2201      	movs	r2, #1
 800cc04:	9200      	str	r2, [sp, #0]
 800cc06:	4622      	mov	r2, r4
 800cc08:	f000 fbe2 	bl	800d3d0 <HAL_MDMA_Start_IT>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d007      	beq.n	800cc22 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc16:	f043 0204 	orr.w	r2, r3, #4
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e01b      	b.n	800cc5a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3340      	adds	r3, #64	@ 0x40
 800cc32:	461c      	mov	r4, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc38:	2201      	movs	r2, #1
 800cc3a:	9200      	str	r2, [sp, #0]
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	f000 fbc7 	bl	800d3d0 <HAL_MDMA_Start_IT>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d007      	beq.n	800cc58 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc4c:	f043 0204 	orr.w	r2, r3, #4
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd90      	pop	{r4, r7, pc}
 800cc62:	bf00      	nop
 800cc64:	0800cf73 	.word	0x0800cf73
 800cc68:	0800d161 	.word	0x0800d161
 800cc6c:	0800d09f 	.word	0x0800d09f
 800cc70:	0800d1b1 	.word	0x0800d1b1

0800cc74 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc80:	f003 0303 	and.w	r3, r3, #3
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d125      	bne.n	800ccd4 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d01e      	beq.n	800ccd4 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	3304      	adds	r3, #4
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7fe fc5d 	bl	800b55c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7fe fe4c 	bl	800b94c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ccc2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ccd2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d039      	beq.n	800cd56 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cce6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f022 0201 	bic.w	r2, r2, #1
 800ccfc:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cd0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cd1c:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d104      	bne.n	800cd36 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 fc29 	bl	800d588 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d105      	bne.n	800cd50 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fc1d 	bl	800d588 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800cd4e:	e002      	b.n	800cd56 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f804 	bl	800cd5e <JPEG_DMA_EndProcess>
}
 800cd56:	bf00      	nop
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	695b      	ldr	r3, [r3, #20]
 800cd72:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800cd76:	1ad2      	subs	r2, r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d10a      	bne.n	800cd9e <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	69d9      	ldr	r1, [r3, #28]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd90:	461a      	mov	r2, r3
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7f4 feac 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cda4:	f003 0310 	and.w	r3, r3, #16
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d134      	bne.n	800ce16 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00a      	beq.n	800cdca <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	69d9      	ldr	r1, [r3, #28]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7f4 fe96 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f022 0201 	bic.w	r2, r2, #1
 800cdd8:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdde:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cde4:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f003 0303 	and.w	r3, r3, #3
 800ce02:	2b02      	cmp	r3, #2
 800ce04:	d103      	bne.n	800ce0e <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7f4 fe52 	bl	8001ab0 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800ce0c:	e00c      	b.n	800ce28 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7fe fda7 	bl	800b962 <HAL_JPEG_EncodeCpltCallback>
}
 800ce14:	e008      	b.n	800ce28 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d102      	bne.n	800ce28 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f804 	bl	800ce30 <JPEG_DMA_PollResidualData>
}
 800ce28:	bf00      	nop
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ce38:	2310      	movs	r3, #16
 800ce3a:	617b      	str	r3, [r7, #20]
 800ce3c:	e04f      	b.n	800cede <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d146      	bne.n	800ced8 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce50:	f003 0310 	and.w	r3, r3, #16
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d03f      	beq.n	800ced8 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce5e:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	69da      	ldr	r2, [r3, #28]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce68:	4413      	add	r3, r2
 800ce6a:	68fa      	ldr	r2, [r7, #12]
 800ce6c:	b2d2      	uxtb	r2, r2
 800ce6e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	0a19      	lsrs	r1, r3, #8
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	69da      	ldr	r2, [r3, #28]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	4413      	add	r3, r2
 800ce80:	b2ca      	uxtb	r2, r1
 800ce82:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	0c19      	lsrs	r1, r3, #16
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	69da      	ldr	r2, [r3, #28]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce90:	3302      	adds	r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	b2ca      	uxtb	r2, r1
 800ce96:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	0e19      	lsrs	r1, r3, #24
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	69da      	ldr	r2, [r3, #28]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea4:	3303      	adds	r3, #3
 800cea6:	4413      	add	r3, r2
 800cea8:	b2ca      	uxtb	r2, r1
 800ceaa:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb0:	1d1a      	adds	r2, r3, #4
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d10a      	bne.n	800ced8 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	69d9      	ldr	r1, [r3, #28]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceca:	461a      	mov	r2, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7f4 fe0f 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	617b      	str	r3, [r7, #20]
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d1ac      	bne.n	800ce3e <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cee8:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef0:	f003 0310 	and.w	r3, r3, #16
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d004      	beq.n	800cf02 <JPEG_DMA_PollResidualData+0xd2>
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d133      	bne.n	800cf6a <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f022 0201 	bic.w	r2, r2, #1
 800cf10:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00a      	beq.n	800cf30 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	69d9      	ldr	r1, [r3, #28]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf22:	461a      	mov	r2, r3
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f7f4 fde3 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf34:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf3a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	f003 0303 	and.w	r3, r3, #3
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d103      	bne.n	800cf64 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7f4 fda7 	bl	8001ab0 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800cf62:	e002      	b.n	800cf6a <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7fe fcfc 	bl	800b962 <HAL_JPEG_EncodeCpltCallback>
}
 800cf6a:	bf00      	nop
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800cf72:	b590      	push	{r4, r7, lr}
 800cf74:	b087      	sub	sp, #28
 800cf76:	af02      	add	r7, sp, #8
 800cf78:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf7e:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cf8e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf94:	f248 030c 	movw	r3, #32780	@ 0x800c
 800cf98:	4013      	ands	r3, r2
 800cf9a:	2b0c      	cmp	r3, #12
 800cf9c:	d17c      	bne.n	800d098 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa4:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	695b      	ldr	r3, [r3, #20]
 800cfb0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800cfb4:	1ad2      	subs	r2, r2, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f7fe fcd8 	bl	800b976 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d81f      	bhi.n	800d010 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10d      	bne.n	800cff2 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfda:	f043 0204 	orr.w	r2, r3, #4
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2206      	movs	r2, #6
 800cfe6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f7f4 fd70 	bl	8001ad0 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800cff0:	e052      	b.n	800d098 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cffa:	68b9      	ldr	r1, [r7, #8]
 800cffc:	fbb3 f1f1 	udiv	r1, r3, r1
 800d000:	68b8      	ldr	r0, [r7, #8]
 800d002:	fb00 f101 	mul.w	r1, r0, r1
 800d006:	1a5b      	subs	r3, r3, r1
 800d008:	1ad2      	subs	r2, r2, r3
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	629a      	str	r2, [r3, #40]	@ 0x28
 800d00e:	e010      	b.n	800d032 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00c      	beq.n	800d032 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d01c:	f003 0303 	and.w	r3, r3, #3
 800d020:	2b00      	cmp	r3, #0
 800d022:	d006      	beq.n	800d032 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d028:	089b      	lsrs	r3, r3, #2
 800d02a:	3301      	adds	r3, #1
 800d02c:	009a      	lsls	r2, r3, #2
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d124      	bne.n	800d088 <JPEG_MDMAInCpltCallback+0x116>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d042:	2b00      	cmp	r3, #0
 800d044:	d020      	beq.n	800d088 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	4619      	mov	r1, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	3340      	adds	r3, #64	@ 0x40
 800d056:	461c      	mov	r4, r3
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d05c:	2201      	movs	r2, #1
 800d05e:	9200      	str	r2, [sp, #0]
 800d060:	4622      	mov	r2, r4
 800d062:	f000 f9b5 	bl	800d3d0 <HAL_MDMA_Start_IT>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00d      	beq.n	800d088 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d070:	f043 0204 	orr.w	r2, r3, #4
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2206      	movs	r2, #6
 800d07c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f7f4 fd25 	bl	8001ad0 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800d086:	e007      	b.n	800d098 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800d096:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800d098:	3714      	adds	r7, #20
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd90      	pop	{r4, r7, pc}

0800d09e <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800d09e:	b590      	push	{r4, r7, lr}
 800d0a0:	b087      	sub	sp, #28
 800d0a2:	af02      	add	r7, sp, #8
 800d0a4:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0aa:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800d0ba:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d0c0:	f248 030c 	movw	r3, #32780	@ 0x800c
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	2b0c      	cmp	r3, #12
 800d0c8:	d147      	bne.n	800d15a <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0d0:	f003 0320 	and.w	r3, r3, #32
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d138      	bne.n	800d14a <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800d0e6:	1ad2      	subs	r2, r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	69d9      	ldr	r1, [r3, #28]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f7f4 fcfa 	bl	8001af0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d100:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d120      	bne.n	800d14a <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	3344      	adds	r3, #68	@ 0x44
 800d112:	4619      	mov	r1, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	461c      	mov	r4, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11e:	2201      	movs	r2, #1
 800d120:	9200      	str	r2, [sp, #0]
 800d122:	4622      	mov	r2, r4
 800d124:	f000 f954 	bl	800d3d0 <HAL_MDMA_Start_IT>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00d      	beq.n	800d14a <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d132:	f043 0204 	orr.w	r2, r3, #4
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2206      	movs	r2, #6
 800d13e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f7f4 fcc4 	bl	8001ad0 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800d148:	e007      	b.n	800d15a <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800d158:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd90      	pop	{r4, r7, pc}

0800d160 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d16c:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f022 0201 	bic.w	r2, r2, #1
 800d17c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800d18c:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d19a:	f043 0204 	orr.w	r2, r3, #4
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f7f4 fc94 	bl	8001ad0 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800d1a8:	bf00      	nop
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1bc:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d002      	beq.n	800d1d0 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7ff fdc7 	bl	800cd5e <JPEG_DMA_EndProcess>
  }
}
 800d1d0:	bf00      	nop
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b08b      	sub	sp, #44	@ 0x2c
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3350      	adds	r3, #80	@ 0x50
 800d1ea:	61bb      	str	r3, [r7, #24]

  i = 0;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800d1f0:	e042      	b.n	800d278 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	61fb      	str	r3, [r7, #28]
 800d1fc:	e033      	b.n	800d266 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	00db      	lsls	r3, r3, #3
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	fa22 f303 	lsr.w	r3, r2, r3
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d103      	bne.n	800d21a <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800d212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d214:	3364      	adds	r3, #100	@ 0x64
 800d216:	627b      	str	r3, [r7, #36]	@ 0x24
 800d218:	e022      	b.n	800d260 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	2264      	movs	r2, #100	@ 0x64
 800d21e:	fb02 f303 	mul.w	r3, r2, r3
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d226:	6a38      	ldr	r0, [r7, #32]
 800d228:	69f9      	ldr	r1, [r7, #28]
 800d22a:	4401      	add	r1, r0
 800d22c:	4818      	ldr	r0, [pc, #96]	@ (800d290 <JPEG_GetQuality+0xb8>)
 800d22e:	5c41      	ldrb	r1, [r0, r1]
 800d230:	440a      	add	r2, r1
 800d232:	7812      	ldrb	r2, [r2, #0]
 800d234:	fbb3 f3f2 	udiv	r3, r3, r2
 800d238:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b64      	cmp	r3, #100	@ 0x64
 800d23e:	d807      	bhi.n	800d250 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800d246:	085b      	lsrs	r3, r3, #1
 800d248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d24a:	4413      	add	r3, r2
 800d24c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d24e:	e007      	b.n	800d260 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800d250:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	fbb2 f3f3 	udiv	r3, r2, r3
 800d25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d25c:	4413      	add	r3, r2
 800d25e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	3301      	adds	r3, #1
 800d264:	61fb      	str	r3, [r7, #28]
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	2b03      	cmp	r3, #3
 800d26a:	d9c8      	bls.n	800d1fe <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	3304      	adds	r3, #4
 800d270:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	3304      	adds	r3, #4
 800d276:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800d278:	6a3b      	ldr	r3, [r7, #32]
 800d27a:	2b3c      	cmp	r3, #60	@ 0x3c
 800d27c:	d9b9      	bls.n	800d1f2 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800d27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d280:	099b      	lsrs	r3, r3, #6
}
 800d282:	4618      	mov	r0, r3
 800d284:	372c      	adds	r7, #44	@ 0x2c
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	0801f170 	.word	0x0801f170

0800d294 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d29c:	f7f6 fdda 	bl	8003e54 <HAL_GetTick>
 800d2a0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e03b      	b.n	800d324 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68da      	ldr	r2, [r3, #12]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f022 0201 	bic.w	r2, r2, #1
 800d2ca:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d2cc:	e00f      	b.n	800d2ee <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800d2ce:	f7f6 fdc1 	bl	8003e54 <HAL_GetTick>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	2b05      	cmp	r3, #5
 800d2da:	d908      	bls.n	800d2ee <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2240      	movs	r2, #64	@ 0x40
 800d2e0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2203      	movs	r2, #3
 800d2e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e01a      	b.n	800d324 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	f003 0301 	and.w	r3, r3, #1
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1e8      	bne.n	800d2ce <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 fb2f 	bl	800d960 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2201      	movs	r2, #1
 800d31e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b087      	sub	sp, #28
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800d342:	2301      	movs	r3, #1
 800d344:	e03e      	b.n	800d3c4 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d101      	bne.n	800d354 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800d350:	2302      	movs	r3, #2
 800d352:	e037      	b.n	800d3c4 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b01      	cmp	r3, #1
 800d366:	d126      	bne.n	800d3b6 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d372:	2b00      	cmp	r3, #0
 800d374:	d11c      	bne.n	800d3b0 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d108      	bne.n	800d39e <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	691a      	ldr	r2, [r3, #16]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800d39a:	611a      	str	r2, [r3, #16]
 800d39c:	e00d      	b.n	800d3ba <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	691a      	ldr	r2, [r3, #16]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d3ac:	611a      	str	r2, [r3, #16]
 800d3ae:	e004      	b.n	800d3ba <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	75fb      	strb	r3, [r7, #23]
 800d3b4:	e001      	b.n	800d3ba <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	371c      	adds	r7, #28
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af02      	add	r7, sp, #8
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e070      	b.n	800d4ca <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d101      	bne.n	800d3f6 <HAL_MDMA_Start_IT+0x26>
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	e069      	b.n	800d4ca <HAL_MDMA_Start_IT+0xfa>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d404:	b2db      	uxtb	r3, r3
 800d406:	2b01      	cmp	r3, #1
 800d408:	d158      	bne.n	800d4bc <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2202      	movs	r2, #2
 800d40e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68da      	ldr	r2, [r3, #12]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f022 0201 	bic.w	r2, r2, #1
 800d426:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	68b9      	ldr	r1, [r7, #8]
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f000 fa24 	bl	800d880 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68da      	ldr	r2, [r3, #12]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f042 0206 	orr.w	r2, r2, #6
 800d446:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d007      	beq.n	800d460 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68da      	ldr	r2, [r3, #12]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f042 0210 	orr.w	r2, r2, #16
 800d45e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d464:	2b00      	cmp	r3, #0
 800d466:	d007      	beq.n	800d478 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68da      	ldr	r2, [r3, #12]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f042 0208 	orr.w	r2, r2, #8
 800d476:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d007      	beq.n	800d490 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68da      	ldr	r2, [r3, #12]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f042 0220 	orr.w	r2, r2, #32
 800d48e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68da      	ldr	r2, [r3, #12]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f042 0201 	orr.w	r2, r2, #1
 800d49e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4a8:	d10e      	bne.n	800d4c8 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68da      	ldr	r2, [r3, #12]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d4b8:	60da      	str	r2, [r3, #12]
 800d4ba:	e005      	b.n	800d4c8 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800d4c4:	2302      	movs	r3, #2
 800d4c6:	e000      	b.n	800d4ca <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800d4da:	f7f6 fcbb 	bl	8003e54 <HAL_GetTick>
 800d4de:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e04a      	b.n	800d580 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d008      	beq.n	800d508 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2280      	movs	r2, #128	@ 0x80
 800d4fa:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e03b      	b.n	800d580 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	68da      	ldr	r2, [r3, #12]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800d516:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68da      	ldr	r2, [r3, #12]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f022 0201 	bic.w	r2, r2, #1
 800d526:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d528:	e016      	b.n	800d558 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800d52a:	f7f6 fc93 	bl	8003e54 <HAL_GetTick>
 800d52e:	4602      	mov	r2, r0
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	2b05      	cmp	r3, #5
 800d536:	d90f      	bls.n	800d558 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d53c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2203      	movs	r2, #3
 800d550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	e013      	b.n	800d580 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1e1      	bne.n	800d52a <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	221f      	movs	r2, #31
 800d56c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	e017      	b.n	800d5ca <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d004      	beq.n	800d5b0 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2280      	movs	r2, #128	@ 0x80
 800d5aa:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e00c      	b.n	800d5ca <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2204      	movs	r2, #4
 800d5b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	68da      	ldr	r2, [r3, #12]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f022 0201 	bic.w	r2, r2, #1
 800d5c6:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	370c      	adds	r7, #12
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
	...

0800d5d8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d5e4:	4b91      	ldr	r3, [pc, #580]	@ (800d82c <HAL_MDMA_IRQHandler+0x254>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a91      	ldr	r2, [pc, #580]	@ (800d830 <HAL_MDMA_IRQHandler+0x258>)
 800d5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ee:	0a9b      	lsrs	r3, r3, #10
 800d5f0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	4b8e      	ldr	r3, [pc, #568]	@ (800d834 <HAL_MDMA_IRQHandler+0x25c>)
 800d5fa:	4413      	add	r3, r2
 800d5fc:	099b      	lsrs	r3, r3, #6
 800d5fe:	f003 031f 	and.w	r3, r3, #31
 800d602:	2201      	movs	r2, #1
 800d604:	fa02 f303 	lsl.w	r3, r2, r3
 800d608:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d60a:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	4013      	ands	r3, r2
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 812d 	beq.w	800d874 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f003 0301 	and.w	r3, r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	d054      	beq.n	800d6d2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	f003 0302 	and.w	r3, r3, #2
 800d632:	2b00      	cmp	r3, #0
 800d634:	d04d      	beq.n	800d6d2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68da      	ldr	r2, [r3, #12]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f022 0202 	bic.w	r2, r2, #2
 800d644:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d654:	2b00      	cmp	r3, #0
 800d656:	d106      	bne.n	800d666 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d65c:	f043 0201 	orr.w	r2, r3, #1
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	669a      	str	r2, [r3, #104]	@ 0x68
 800d664:	e005      	b.n	800d672 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d66a:	f043 0202 	orr.w	r2, r3, #2
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d005      	beq.n	800d688 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d680:	f043 0204 	orr.w	r2, r3, #4
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d005      	beq.n	800d69e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d696:	f043 0208 	orr.w	r2, r3, #8
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d005      	beq.n	800d6b4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6ac:	f043 0210 	orr.w	r2, r3, #16
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d005      	beq.n	800d6ca <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6c2:	f043 0220 	orr.w	r2, r3, #32
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f003 0310 	and.w	r3, r3, #16
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d012      	beq.n	800d706 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f003 0320 	and.w	r3, r3, #32
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00b      	beq.n	800d706 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2210      	movs	r2, #16
 800d6f4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d003      	beq.n	800d706 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 0308 	and.w	r3, r3, #8
 800d710:	2b00      	cmp	r3, #0
 800d712:	d012      	beq.n	800d73a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	f003 0310 	and.w	r3, r3, #16
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00b      	beq.n	800d73a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2208      	movs	r2, #8
 800d728:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d003      	beq.n	800d73a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f003 0304 	and.w	r3, r3, #4
 800d744:	2b00      	cmp	r3, #0
 800d746:	d012      	beq.n	800d76e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	f003 0308 	and.w	r3, r3, #8
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00b      	beq.n	800d76e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2204      	movs	r2, #4
 800d75c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d762:	2b00      	cmp	r3, #0
 800d764:	d003      	beq.n	800d76e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f003 0302 	and.w	r3, r3, #2
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d039      	beq.n	800d7f0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	f003 0304 	and.w	r3, r3, #4
 800d786:	2b00      	cmp	r3, #0
 800d788:	d032      	beq.n	800d7f0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68da      	ldr	r2, [r3, #12]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800d798:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	2b04      	cmp	r3, #4
 800d7a4:	d110      	bne.n	800d7c8 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d05c      	beq.n	800d878 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	4798      	blx	r3
        }
        return;
 800d7c6:	e057      	b.n	800d878 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2202      	movs	r2, #2
 800d7ce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d040      	beq.n	800d87a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2204      	movs	r2, #4
 800d7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68da      	ldr	r2, [r3, #12]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 0201 	bic.w	r2, r2, #1
 800d80e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	3301      	adds	r3, #1
 800d814:	60bb      	str	r3, [r7, #8]
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d30d      	bcc.n	800d838 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1f2      	bne.n	800d810 <HAL_MDMA_IRQHandler+0x238>
 800d82a:	e006      	b.n	800d83a <HAL_MDMA_IRQHandler+0x262>
 800d82c:	24000240 	.word	0x24000240
 800d830:	1b4e81b5 	.word	0x1b4e81b5
 800d834:	adffffc0 	.word	0xadffffc0
        break;
 800d838:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d004      	beq.n	800d85a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2203      	movs	r2, #3
 800d854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d858:	e003      	b.n	800d862 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2201      	movs	r2, #1
 800d85e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d866:	2b00      	cmp	r3, #0
 800d868:	d007      	beq.n	800d87a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	4798      	blx	r3
 800d872:	e002      	b.n	800d87a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800d874:	bf00      	nop
 800d876:	e000      	b.n	800d87a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800d878:	bf00      	nop
    }
  }
}
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800d880:	b480      	push	{r7}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	695a      	ldr	r2, [r3, #20]
 800d894:	4b31      	ldr	r3, [pc, #196]	@ (800d95c <MDMA_SetConfig+0xdc>)
 800d896:	4013      	ands	r3, r2
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	6812      	ldr	r2, [r2, #0]
 800d8a2:	430b      	orrs	r3, r1
 800d8a4:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	695b      	ldr	r3, [r3, #20]
 800d8ac:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	051a      	lsls	r2, r3, #20
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	430a      	orrs	r2, r1
 800d8bc:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	221f      	movs	r2, #31
 800d8c4:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d8dc:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8e4:	d002      	beq.n	800d8ec <MDMA_SetConfig+0x6c>
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d108      	bne.n	800d8fe <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d8fa:	629a      	str	r2, [r3, #40]	@ 0x28
 800d8fc:	e007      	b.n	800d90e <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d90c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d914:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d91c:	d002      	beq.n	800d924 <MDMA_SetConfig+0xa4>
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d108      	bne.n	800d936 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d932:	629a      	str	r2, [r3, #40]	@ 0x28
 800d934:	e007      	b.n	800d946 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d944:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800d950:	bf00      	nop
 800d952:	371c      	adds	r7, #28
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	fffe0000 	.word	0xfffe0000

0800d960 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	68d9      	ldr	r1, [r3, #12]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	691a      	ldr	r2, [r3, #16]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	430a      	orrs	r2, r1
 800d976:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	695a      	ldr	r2, [r3, #20]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	699b      	ldr	r3, [r3, #24]
 800d980:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d986:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a1b      	ldr	r3, [r3, #32]
 800d98c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800d992:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d998:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800d99e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800d9a8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800d9b4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d9b6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9c0:	d107      	bne.n	800d9d2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	691a      	ldr	r2, [r3, #16]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800d9d0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	da11      	bge.n	800da06 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	695a      	ldr	r2, [r3, #20]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d9f0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f6:	425b      	negs	r3, r3
 800d9f8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	b292      	uxth	r2, r2
 800da02:	621a      	str	r2, [r3, #32]
 800da04:	e006      	b.n	800da14 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da0a:	461a      	mov	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	b292      	uxth	r2, r2
 800da12:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da18:	2b00      	cmp	r3, #0
 800da1a:	da15      	bge.n	800da48 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	695a      	ldr	r2, [r3, #20]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800da2a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da30:	425b      	negs	r3, r3
 800da32:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6a19      	ldr	r1, [r3, #32]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	041a      	lsls	r2, r3, #16
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	430a      	orrs	r2, r1
 800da44:	621a      	str	r2, [r3, #32]
 800da46:	e009      	b.n	800da5c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6a19      	ldr	r1, [r3, #32]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da52:	041a      	lsls	r2, r3, #16
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	430a      	orrs	r2, r1
 800da5a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da64:	d006      	beq.n	800da74 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	685a      	ldr	r2, [r3, #4]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	b2d2      	uxtb	r2, r2
 800da70:	629a      	str	r2, [r3, #40]	@ 0x28
 800da72:	e003      	b.n	800da7c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2200      	movs	r2, #0
 800da7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2200      	movs	r2, #0
 800da82:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800da84:	bf00      	nop
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af02      	add	r7, sp, #8
 800da96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	e0fe      	b.n	800dca0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d106      	bne.n	800dabc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f00d fb7e 	bl	801b1b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2203      	movs	r2, #3
 800dac0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4618      	mov	r0, r3
 800daca:	f008 fd58 	bl	801657e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	7c1a      	ldrb	r2, [r3, #16]
 800dad6:	f88d 2000 	strb.w	r2, [sp]
 800dada:	3304      	adds	r3, #4
 800dadc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dade:	f008 fc29 	bl	8016334 <USB_CoreInit>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d005      	beq.n	800daf4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2202      	movs	r2, #2
 800daec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800daf0:	2301      	movs	r3, #1
 800daf2:	e0d5      	b.n	800dca0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2100      	movs	r1, #0
 800dafa:	4618      	mov	r0, r3
 800dafc:	f008 fd50 	bl	80165a0 <USB_SetCurrentMode>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d005      	beq.n	800db12 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2202      	movs	r2, #2
 800db0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
 800db10:	e0c6      	b.n	800dca0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]
 800db16:	e04a      	b.n	800dbae <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800db18:	7bfa      	ldrb	r2, [r7, #15]
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	4613      	mov	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	4413      	add	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	440b      	add	r3, r1
 800db26:	3315      	adds	r3, #21
 800db28:	2201      	movs	r2, #1
 800db2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800db2c:	7bfa      	ldrb	r2, [r7, #15]
 800db2e:	6879      	ldr	r1, [r7, #4]
 800db30:	4613      	mov	r3, r2
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	440b      	add	r3, r1
 800db3a:	3314      	adds	r3, #20
 800db3c:	7bfa      	ldrb	r2, [r7, #15]
 800db3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800db40:	7bfa      	ldrb	r2, [r7, #15]
 800db42:	7bfb      	ldrb	r3, [r7, #15]
 800db44:	b298      	uxth	r0, r3
 800db46:	6879      	ldr	r1, [r7, #4]
 800db48:	4613      	mov	r3, r2
 800db4a:	00db      	lsls	r3, r3, #3
 800db4c:	4413      	add	r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	440b      	add	r3, r1
 800db52:	332e      	adds	r3, #46	@ 0x2e
 800db54:	4602      	mov	r2, r0
 800db56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800db58:	7bfa      	ldrb	r2, [r7, #15]
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	4613      	mov	r3, r2
 800db5e:	00db      	lsls	r3, r3, #3
 800db60:	4413      	add	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	440b      	add	r3, r1
 800db66:	3318      	adds	r3, #24
 800db68:	2200      	movs	r2, #0
 800db6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800db6c:	7bfa      	ldrb	r2, [r7, #15]
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	4613      	mov	r3, r2
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	440b      	add	r3, r1
 800db7a:	331c      	adds	r3, #28
 800db7c:	2200      	movs	r2, #0
 800db7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800db80:	7bfa      	ldrb	r2, [r7, #15]
 800db82:	6879      	ldr	r1, [r7, #4]
 800db84:	4613      	mov	r3, r2
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	4413      	add	r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	440b      	add	r3, r1
 800db8e:	3320      	adds	r3, #32
 800db90:	2200      	movs	r2, #0
 800db92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800db94:	7bfa      	ldrb	r2, [r7, #15]
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	4613      	mov	r3, r2
 800db9a:	00db      	lsls	r3, r3, #3
 800db9c:	4413      	add	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	440b      	add	r3, r1
 800dba2:	3324      	adds	r3, #36	@ 0x24
 800dba4:	2200      	movs	r2, #0
 800dba6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dba8:	7bfb      	ldrb	r3, [r7, #15]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	73fb      	strb	r3, [r7, #15]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	791b      	ldrb	r3, [r3, #4]
 800dbb2:	7bfa      	ldrb	r2, [r7, #15]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d3af      	bcc.n	800db18 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbb8:	2300      	movs	r3, #0
 800dbba:	73fb      	strb	r3, [r7, #15]
 800dbbc:	e044      	b.n	800dc48 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dbbe:	7bfa      	ldrb	r2, [r7, #15]
 800dbc0:	6879      	ldr	r1, [r7, #4]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	4413      	add	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	440b      	add	r3, r1
 800dbcc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dbd4:	7bfa      	ldrb	r2, [r7, #15]
 800dbd6:	6879      	ldr	r1, [r7, #4]
 800dbd8:	4613      	mov	r3, r2
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	4413      	add	r3, r2
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	440b      	add	r3, r1
 800dbe2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800dbe6:	7bfa      	ldrb	r2, [r7, #15]
 800dbe8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dbea:	7bfa      	ldrb	r2, [r7, #15]
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	4613      	mov	r3, r2
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	4413      	add	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	440b      	add	r3, r1
 800dbf8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dc00:	7bfa      	ldrb	r2, [r7, #15]
 800dc02:	6879      	ldr	r1, [r7, #4]
 800dc04:	4613      	mov	r3, r2
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	4413      	add	r3, r2
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	440b      	add	r3, r1
 800dc0e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800dc12:	2200      	movs	r2, #0
 800dc14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dc16:	7bfa      	ldrb	r2, [r7, #15]
 800dc18:	6879      	ldr	r1, [r7, #4]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	00db      	lsls	r3, r3, #3
 800dc1e:	4413      	add	r3, r2
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	440b      	add	r3, r1
 800dc24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dc2c:	7bfa      	ldrb	r2, [r7, #15]
 800dc2e:	6879      	ldr	r1, [r7, #4]
 800dc30:	4613      	mov	r3, r2
 800dc32:	00db      	lsls	r3, r3, #3
 800dc34:	4413      	add	r3, r2
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	440b      	add	r3, r1
 800dc3a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800dc3e:	2200      	movs	r2, #0
 800dc40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc42:	7bfb      	ldrb	r3, [r7, #15]
 800dc44:	3301      	adds	r3, #1
 800dc46:	73fb      	strb	r3, [r7, #15]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	791b      	ldrb	r3, [r3, #4]
 800dc4c:	7bfa      	ldrb	r2, [r7, #15]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d3b5      	bcc.n	800dbbe <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6818      	ldr	r0, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7c1a      	ldrb	r2, [r3, #16]
 800dc5a:	f88d 2000 	strb.w	r2, [sp]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc62:	f008 fce9 	bl	8016638 <USB_DevInit>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d005      	beq.n	800dc78 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2202      	movs	r2, #2
 800dc70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800dc74:	2301      	movs	r3, #1
 800dc76:	e013      	b.n	800dca0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	7b1b      	ldrb	r3, [r3, #12]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d102      	bne.n	800dc94 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f001 f96e 	bl	800ef70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f009 fd2c 	bl	80176f6 <USB_DevDisconnect>

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d101      	bne.n	800dcc4 <HAL_PCD_Start+0x1c>
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	e022      	b.n	800dd0a <HAL_PCD_Start+0x62>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d009      	beq.n	800dcec <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d105      	bne.n	800dcec <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f008 fc33 	bl	801655c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f009 fcda 	bl	80176b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800dd12:	b590      	push	{r4, r7, lr}
 800dd14:	b08d      	sub	sp, #52	@ 0x34
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f009 fd98 	bl	801785e <USB_GetMode>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f040 84b9 	bne.w	800e6a8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f009 fcfc 	bl	8017738 <USB_ReadInterrupts>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f000 84af 	beq.w	800e6a6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	0a1b      	lsrs	r3, r3, #8
 800dd52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f009 fce9 	bl	8017738 <USB_ReadInterrupts>
 800dd66:	4603      	mov	r3, r0
 800dd68:	f003 0302 	and.w	r3, r3, #2
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d107      	bne.n	800dd80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	695a      	ldr	r2, [r3, #20]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f002 0202 	and.w	r2, r2, #2
 800dd7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f009 fcd7 	bl	8017738 <USB_ReadInterrupts>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	f003 0310 	and.w	r3, r3, #16
 800dd90:	2b10      	cmp	r3, #16
 800dd92:	d161      	bne.n	800de58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	699a      	ldr	r2, [r3, #24]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f022 0210 	bic.w	r2, r2, #16
 800dda2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	f003 020f 	and.w	r2, r3, #15
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	00db      	lsls	r3, r3, #3
 800ddb4:	4413      	add	r3, r2
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800ddca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ddce:	d124      	bne.n	800de1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ddd0:	69ba      	ldr	r2, [r7, #24]
 800ddd2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800ddd6:	4013      	ands	r3, r2
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d035      	beq.n	800de48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	091b      	lsrs	r3, r3, #4
 800dde4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800dde6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	461a      	mov	r2, r3
 800ddee:	6a38      	ldr	r0, [r7, #32]
 800ddf0:	f009 fb0e 	bl	8017410 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	68da      	ldr	r2, [r3, #12]
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	091b      	lsrs	r3, r3, #4
 800ddfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de00:	441a      	add	r2, r3
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	695a      	ldr	r2, [r3, #20]
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	091b      	lsrs	r3, r3, #4
 800de0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de12:	441a      	add	r2, r3
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	615a      	str	r2, [r3, #20]
 800de18:	e016      	b.n	800de48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800de20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800de24:	d110      	bne.n	800de48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800de2c:	2208      	movs	r2, #8
 800de2e:	4619      	mov	r1, r3
 800de30:	6a38      	ldr	r0, [r7, #32]
 800de32:	f009 faed 	bl	8017410 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	695a      	ldr	r2, [r3, #20]
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	091b      	lsrs	r3, r3, #4
 800de3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de42:	441a      	add	r2, r3
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	699a      	ldr	r2, [r3, #24]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f042 0210 	orr.w	r2, r2, #16
 800de56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f009 fc6b 	bl	8017738 <USB_ReadInterrupts>
 800de62:	4603      	mov	r3, r0
 800de64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800de68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800de6c:	f040 80a7 	bne.w	800dfbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800de70:	2300      	movs	r3, #0
 800de72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4618      	mov	r0, r3
 800de7a:	f009 fc70 	bl	801775e <USB_ReadDevAllOutEpInterrupt>
 800de7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800de80:	e099      	b.n	800dfb6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800de82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 808e 	beq.w	800dfaa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de94:	b2d2      	uxtb	r2, r2
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f009 fc94 	bl	80177c6 <USB_ReadDevOutEPInterrupt>
 800de9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	f003 0301 	and.w	r3, r3, #1
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00c      	beq.n	800dec4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800deaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deb6:	461a      	mov	r2, r3
 800deb8:	2301      	movs	r3, #1
 800deba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800debc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fed0 	bl	800ec64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	f003 0308 	and.w	r3, r3, #8
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00c      	beq.n	800dee8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	015a      	lsls	r2, r3, #5
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	4413      	add	r3, r2
 800ded6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deda:	461a      	mov	r2, r3
 800dedc:	2308      	movs	r3, #8
 800dede:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800dee0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 ffa6 	bl	800ee34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	f003 0310 	and.w	r3, r3, #16
 800deee:	2b00      	cmp	r3, #0
 800def0:	d008      	beq.n	800df04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800def2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def4:	015a      	lsls	r2, r3, #5
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	4413      	add	r3, r2
 800defa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800defe:	461a      	mov	r2, r3
 800df00:	2310      	movs	r3, #16
 800df02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f003 0302 	and.w	r3, r3, #2
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d030      	beq.n	800df70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800df0e:	6a3b      	ldr	r3, [r7, #32]
 800df10:	695b      	ldr	r3, [r3, #20]
 800df12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df16:	2b80      	cmp	r3, #128	@ 0x80
 800df18:	d109      	bne.n	800df2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	69fa      	ldr	r2, [r7, #28]
 800df24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800df2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800df2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df30:	4613      	mov	r3, r2
 800df32:	00db      	lsls	r3, r3, #3
 800df34:	4413      	add	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	4413      	add	r3, r2
 800df40:	3304      	adds	r3, #4
 800df42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	78db      	ldrb	r3, [r3, #3]
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d108      	bne.n	800df5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	2200      	movs	r2, #0
 800df50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800df52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df54:	b2db      	uxtb	r3, r3
 800df56:	4619      	mov	r1, r3
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f00d fa53 	bl	801b404 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800df5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df60:	015a      	lsls	r2, r3, #5
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	4413      	add	r3, r2
 800df66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df6a:	461a      	mov	r2, r3
 800df6c:	2302      	movs	r3, #2
 800df6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	f003 0320 	and.w	r3, r3, #32
 800df76:	2b00      	cmp	r3, #0
 800df78:	d008      	beq.n	800df8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800df7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df7c:	015a      	lsls	r2, r3, #5
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	4413      	add	r3, r2
 800df82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df86:	461a      	mov	r2, r3
 800df88:	2320      	movs	r3, #32
 800df8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d009      	beq.n	800dfaa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dfa8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800dfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfac:	3301      	adds	r3, #1
 800dfae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800dfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb2:	085b      	lsrs	r3, r3, #1
 800dfb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800dfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f47f af62 	bne.w	800de82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f009 fbb8 	bl	8017738 <USB_ReadInterrupts>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dfce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dfd2:	f040 80db 	bne.w	800e18c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f009 fbd9 	bl	8017792 <USB_ReadDevAllInEpInterrupt>
 800dfe0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800dfe6:	e0cd      	b.n	800e184 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800dfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfea:	f003 0301 	and.w	r3, r3, #1
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f000 80c2 	beq.w	800e178 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dffa:	b2d2      	uxtb	r2, r2
 800dffc:	4611      	mov	r1, r2
 800dffe:	4618      	mov	r0, r3
 800e000:	f009 fbff 	bl	8017802 <USB_ReadDevInEPInterrupt>
 800e004:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d057      	beq.n	800e0c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e012:	f003 030f 	and.w	r3, r3, #15
 800e016:	2201      	movs	r2, #1
 800e018:	fa02 f303 	lsl.w	r3, r2, r3
 800e01c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	43db      	mvns	r3, r3
 800e02a:	69f9      	ldr	r1, [r7, #28]
 800e02c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e030:	4013      	ands	r3, r2
 800e032:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e036:	015a      	lsls	r2, r3, #5
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	4413      	add	r3, r2
 800e03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e040:	461a      	mov	r2, r3
 800e042:	2301      	movs	r3, #1
 800e044:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	799b      	ldrb	r3, [r3, #6]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d132      	bne.n	800e0b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e04e:	6879      	ldr	r1, [r7, #4]
 800e050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e052:	4613      	mov	r3, r2
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	4413      	add	r3, r2
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	440b      	add	r3, r1
 800e05c:	3320      	adds	r3, #32
 800e05e:	6819      	ldr	r1, [r3, #0]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e064:	4613      	mov	r3, r2
 800e066:	00db      	lsls	r3, r3, #3
 800e068:	4413      	add	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4403      	add	r3, r0
 800e06e:	331c      	adds	r3, #28
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4419      	add	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e078:	4613      	mov	r3, r2
 800e07a:	00db      	lsls	r3, r3, #3
 800e07c:	4413      	add	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4403      	add	r3, r0
 800e082:	3320      	adds	r3, #32
 800e084:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d113      	bne.n	800e0b4 <HAL_PCD_IRQHandler+0x3a2>
 800e08c:	6879      	ldr	r1, [r7, #4]
 800e08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e090:	4613      	mov	r3, r2
 800e092:	00db      	lsls	r3, r3, #3
 800e094:	4413      	add	r3, r2
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	440b      	add	r3, r1
 800e09a:	3324      	adds	r3, #36	@ 0x24
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d108      	bne.n	800e0b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6818      	ldr	r0, [r3, #0]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	2101      	movs	r1, #1
 800e0b0:	f009 fc08 	bl	80178c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f00d f91d 	bl	801b2fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	f003 0308 	and.w	r3, r3, #8
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d008      	beq.n	800e0dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0cc:	015a      	lsls	r2, r3, #5
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	2308      	movs	r3, #8
 800e0da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	f003 0310 	and.w	r3, r3, #16
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d008      	beq.n	800e0f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e8:	015a      	lsls	r2, r3, #5
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	2310      	movs	r3, #16
 800e0f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d008      	beq.n	800e114 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e104:	015a      	lsls	r2, r3, #5
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	4413      	add	r3, r2
 800e10a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e10e:	461a      	mov	r2, r3
 800e110:	2340      	movs	r3, #64	@ 0x40
 800e112:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	f003 0302 	and.w	r3, r3, #2
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d023      	beq.n	800e166 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e11e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e120:	6a38      	ldr	r0, [r7, #32]
 800e122:	f008 fbe7 	bl	80168f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e128:	4613      	mov	r3, r2
 800e12a:	00db      	lsls	r3, r3, #3
 800e12c:	4413      	add	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	3310      	adds	r3, #16
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	4413      	add	r3, r2
 800e136:	3304      	adds	r3, #4
 800e138:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	78db      	ldrb	r3, [r3, #3]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d108      	bne.n	800e154 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	2200      	movs	r2, #0
 800e146:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f00d f96a 	bl	801b428 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e156:	015a      	lsls	r2, r3, #5
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	4413      	add	r3, r2
 800e15c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e160:	461a      	mov	r2, r3
 800e162:	2302      	movs	r3, #2
 800e164:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d003      	beq.n	800e178 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fcea 	bl	800eb4c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17a:	3301      	adds	r3, #1
 800e17c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800e17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e180:	085b      	lsrs	r3, r3, #1
 800e182:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800e184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e186:	2b00      	cmp	r3, #0
 800e188:	f47f af2e 	bne.w	800dfe8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4618      	mov	r0, r3
 800e192:	f009 fad1 	bl	8017738 <USB_ReadInterrupts>
 800e196:	4603      	mov	r3, r0
 800e198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e19c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1a0:	d122      	bne.n	800e1e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	69fa      	ldr	r2, [r7, #28]
 800e1ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e1b0:	f023 0301 	bic.w	r3, r3, #1
 800e1b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d108      	bne.n	800e1d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 fef4 	bl	800efb8 <HAL_PCDEx_LPM_Callback>
 800e1d0:	e002      	b.n	800e1d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f00d f908 	bl	801b3e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	695a      	ldr	r2, [r3, #20]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800e1e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f009 faa3 	bl	8017738 <USB_ReadInterrupts>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e1fc:	d112      	bne.n	800e224 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	f003 0301 	and.w	r3, r3, #1
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d102      	bne.n	800e214 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f00d f8c4 	bl	801b39c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	695a      	ldr	r2, [r3, #20]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800e222:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4618      	mov	r0, r3
 800e22a:	f009 fa85 	bl	8017738 <USB_ReadInterrupts>
 800e22e:	4603      	mov	r3, r0
 800e230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e238:	d121      	bne.n	800e27e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	695a      	ldr	r2, [r3, #20]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800e248:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800e250:	2b00      	cmp	r3, #0
 800e252:	d111      	bne.n	800e278 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e262:	089b      	lsrs	r3, r3, #2
 800e264:	f003 020f 	and.w	r2, r3, #15
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e26e:	2101      	movs	r1, #1
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 fea1 	bl	800efb8 <HAL_PCDEx_LPM_Callback>
 800e276:	e002      	b.n	800e27e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f00d f88f 	bl	801b39c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4618      	mov	r0, r3
 800e284:	f009 fa58 	bl	8017738 <USB_ReadInterrupts>
 800e288:	4603      	mov	r3, r0
 800e28a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e28e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e292:	f040 80b7 	bne.w	800e404 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	69fa      	ldr	r2, [r7, #28]
 800e2a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e2a4:	f023 0301 	bic.w	r3, r3, #1
 800e2a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2110      	movs	r1, #16
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f008 fb1f 	bl	80168f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2ba:	e046      	b.n	800e34a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2be:	015a      	lsls	r2, r3, #5
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e2ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d2:	015a      	lsls	r2, r3, #5
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2e0:	0151      	lsls	r1, r2, #5
 800e2e2:	69fa      	ldr	r2, [r7, #28]
 800e2e4:	440a      	add	r2, r1
 800e2e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e2ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f2:	015a      	lsls	r2, r3, #5
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e302:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e306:	015a      	lsls	r2, r3, #5
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	4413      	add	r3, r2
 800e30c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e314:	0151      	lsls	r1, r2, #5
 800e316:	69fa      	ldr	r2, [r7, #28]
 800e318:	440a      	add	r2, r1
 800e31a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e31e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e322:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e326:	015a      	lsls	r2, r3, #5
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	4413      	add	r3, r2
 800e32c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e334:	0151      	lsls	r1, r2, #5
 800e336:	69fa      	ldr	r2, [r7, #28]
 800e338:	440a      	add	r2, r1
 800e33a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e33e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e342:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e346:	3301      	adds	r3, #1
 800e348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	791b      	ldrb	r3, [r3, #4]
 800e34e:	461a      	mov	r2, r3
 800e350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e352:	4293      	cmp	r3, r2
 800e354:	d3b2      	bcc.n	800e2bc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	69fa      	ldr	r2, [r7, #28]
 800e360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e364:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800e368:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	7bdb      	ldrb	r3, [r3, #15]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d016      	beq.n	800e3a0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e37c:	69fa      	ldr	r2, [r7, #28]
 800e37e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e382:	f043 030b 	orr.w	r3, r3, #11
 800e386:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e392:	69fa      	ldr	r2, [r7, #28]
 800e394:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e398:	f043 030b 	orr.w	r3, r3, #11
 800e39c:	6453      	str	r3, [r2, #68]	@ 0x44
 800e39e:	e015      	b.n	800e3cc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3a6:	695a      	ldr	r2, [r3, #20]
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	f242 032b 	movw	r3, #8235	@ 0x202b
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3be:	691b      	ldr	r3, [r3, #16]
 800e3c0:	69fa      	ldr	r2, [r7, #28]
 800e3c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e3c6:	f043 030b 	orr.w	r3, r3, #11
 800e3ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	69fa      	ldr	r2, [r7, #28]
 800e3d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e3da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e3de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6818      	ldr	r0, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	f009 fa68 	bl	80178c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	695a      	ldr	r2, [r3, #20]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800e402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4618      	mov	r0, r3
 800e40a:	f009 f995 	bl	8017738 <USB_ReadInterrupts>
 800e40e:	4603      	mov	r3, r0
 800e410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e418:	d123      	bne.n	800e462 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f009 fa2c 	bl	801787c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4618      	mov	r0, r3
 800e42a:	f008 fadc 	bl	80169e6 <USB_GetDevSpeed>
 800e42e:	4603      	mov	r3, r0
 800e430:	461a      	mov	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681c      	ldr	r4, [r3, #0]
 800e43a:	f001 fd9d 	bl	800ff78 <HAL_RCC_GetHCLKFreq>
 800e43e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e444:	461a      	mov	r2, r3
 800e446:	4620      	mov	r0, r4
 800e448:	f007 ffe6 	bl	8016418 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f00c ff7c 	bl	801b34a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	695a      	ldr	r2, [r3, #20]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800e460:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4618      	mov	r0, r3
 800e468:	f009 f966 	bl	8017738 <USB_ReadInterrupts>
 800e46c:	4603      	mov	r3, r0
 800e46e:	f003 0308 	and.w	r3, r3, #8
 800e472:	2b08      	cmp	r3, #8
 800e474:	d10a      	bne.n	800e48c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f00c ff59 	bl	801b32e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	695a      	ldr	r2, [r3, #20]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f002 0208 	and.w	r2, r2, #8
 800e48a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	f009 f951 	bl	8017738 <USB_ReadInterrupts>
 800e496:	4603      	mov	r3, r0
 800e498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e49c:	2b80      	cmp	r3, #128	@ 0x80
 800e49e:	d123      	bne.n	800e4e8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e4a8:	6a3b      	ldr	r3, [r7, #32]
 800e4aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4b0:	e014      	b.n	800e4dc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e4b2:	6879      	ldr	r1, [r7, #4]
 800e4b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	00db      	lsls	r3, r3, #3
 800e4ba:	4413      	add	r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	440b      	add	r3, r1
 800e4c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d105      	bne.n	800e4d6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 fb0a 	bl	800eaea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d8:	3301      	adds	r3, #1
 800e4da:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	791b      	ldrb	r3, [r3, #4]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d3e4      	bcc.n	800e4b2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f009 f923 	bl	8017738 <USB_ReadInterrupts>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e4f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e4fc:	d13c      	bne.n	800e578 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e4fe:	2301      	movs	r3, #1
 800e500:	627b      	str	r3, [r7, #36]	@ 0x24
 800e502:	e02b      	b.n	800e55c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e506:	015a      	lsls	r2, r3, #5
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	4413      	add	r3, r2
 800e50c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e514:	6879      	ldr	r1, [r7, #4]
 800e516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e518:	4613      	mov	r3, r2
 800e51a:	00db      	lsls	r3, r3, #3
 800e51c:	4413      	add	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	440b      	add	r3, r1
 800e522:	3318      	adds	r3, #24
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d115      	bne.n	800e556 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e52a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	da12      	bge.n	800e556 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e530:	6879      	ldr	r1, [r7, #4]
 800e532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e534:	4613      	mov	r3, r2
 800e536:	00db      	lsls	r3, r3, #3
 800e538:	4413      	add	r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	440b      	add	r3, r1
 800e53e:	3317      	adds	r3, #23
 800e540:	2201      	movs	r2, #1
 800e542:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e546:	b2db      	uxtb	r3, r3
 800e548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	4619      	mov	r1, r3
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 faca 	bl	800eaea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e558:	3301      	adds	r3, #1
 800e55a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	791b      	ldrb	r3, [r3, #4]
 800e560:	461a      	mov	r2, r3
 800e562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e564:	4293      	cmp	r3, r2
 800e566:	d3cd      	bcc.n	800e504 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	695a      	ldr	r2, [r3, #20]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800e576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f009 f8db 	bl	8017738 <USB_ReadInterrupts>
 800e582:	4603      	mov	r3, r0
 800e584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e588:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e58c:	d156      	bne.n	800e63c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e58e:	2301      	movs	r3, #1
 800e590:	627b      	str	r3, [r7, #36]	@ 0x24
 800e592:	e045      	b.n	800e620 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e596:	015a      	lsls	r2, r3, #5
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	4413      	add	r3, r2
 800e59c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	4413      	add	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	440b      	add	r3, r1
 800e5b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d12e      	bne.n	800e61a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e5bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	da2b      	bge.n	800e61a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	0c1a      	lsrs	r2, r3, #16
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800e5cc:	4053      	eors	r3, r2
 800e5ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d121      	bne.n	800e61a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e5d6:	6879      	ldr	r1, [r7, #4]
 800e5d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5da:	4613      	mov	r3, r2
 800e5dc:	00db      	lsls	r3, r3, #3
 800e5de:	4413      	add	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	440b      	add	r3, r1
 800e5e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e5ec:	6a3b      	ldr	r3, [r7, #32]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e5f8:	6a3b      	ldr	r3, [r7, #32]
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10a      	bne.n	800e61a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	69fa      	ldr	r2, [r7, #28]
 800e60e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e616:	6053      	str	r3, [r2, #4]
            break;
 800e618:	e008      	b.n	800e62c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61c:	3301      	adds	r3, #1
 800e61e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	791b      	ldrb	r3, [r3, #4]
 800e624:	461a      	mov	r2, r3
 800e626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e628:	4293      	cmp	r3, r2
 800e62a:	d3b3      	bcc.n	800e594 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	695a      	ldr	r2, [r3, #20]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800e63a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4618      	mov	r0, r3
 800e642:	f009 f879 	bl	8017738 <USB_ReadInterrupts>
 800e646:	4603      	mov	r3, r0
 800e648:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e64c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e650:	d10a      	bne.n	800e668 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f00c fefa 	bl	801b44c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	695a      	ldr	r2, [r3, #20]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800e666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f009 f863 	bl	8017738 <USB_ReadInterrupts>
 800e672:	4603      	mov	r3, r0
 800e674:	f003 0304 	and.w	r3, r3, #4
 800e678:	2b04      	cmp	r3, #4
 800e67a:	d115      	bne.n	800e6a8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	f003 0304 	and.w	r3, r3, #4
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f00c feea 	bl	801b468 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	6859      	ldr	r1, [r3, #4]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	69ba      	ldr	r2, [r7, #24]
 800e6a0:	430a      	orrs	r2, r1
 800e6a2:	605a      	str	r2, [r3, #4]
 800e6a4:	e000      	b.n	800e6a8 <HAL_PCD_IRQHandler+0x996>
      return;
 800e6a6:	bf00      	nop
    }
  }
}
 800e6a8:	3734      	adds	r7, #52	@ 0x34
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd90      	pop	{r4, r7, pc}

0800e6ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b082      	sub	sp, #8
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d101      	bne.n	800e6c8 <HAL_PCD_SetAddress+0x1a>
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	e012      	b.n	800e6ee <HAL_PCD_SetAddress+0x40>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	78fa      	ldrb	r2, [r7, #3]
 800e6d4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	78fa      	ldrb	r2, [r7, #3]
 800e6dc:	4611      	mov	r1, r2
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f008 ffc2 	bl	8017668 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b084      	sub	sp, #16
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	4608      	mov	r0, r1
 800e700:	4611      	mov	r1, r2
 800e702:	461a      	mov	r2, r3
 800e704:	4603      	mov	r3, r0
 800e706:	70fb      	strb	r3, [r7, #3]
 800e708:	460b      	mov	r3, r1
 800e70a:	803b      	strh	r3, [r7, #0]
 800e70c:	4613      	mov	r3, r2
 800e70e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800e710:	2300      	movs	r3, #0
 800e712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	da0f      	bge.n	800e73c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e71c:	78fb      	ldrb	r3, [r7, #3]
 800e71e:	f003 020f 	and.w	r2, r3, #15
 800e722:	4613      	mov	r3, r2
 800e724:	00db      	lsls	r3, r3, #3
 800e726:	4413      	add	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	3310      	adds	r3, #16
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	4413      	add	r3, r2
 800e730:	3304      	adds	r3, #4
 800e732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2201      	movs	r2, #1
 800e738:	705a      	strb	r2, [r3, #1]
 800e73a:	e00f      	b.n	800e75c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e73c:	78fb      	ldrb	r3, [r7, #3]
 800e73e:	f003 020f 	and.w	r2, r3, #15
 800e742:	4613      	mov	r3, r2
 800e744:	00db      	lsls	r3, r3, #3
 800e746:	4413      	add	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	4413      	add	r3, r2
 800e752:	3304      	adds	r3, #4
 800e754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2200      	movs	r2, #0
 800e75a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e75c:	78fb      	ldrb	r3, [r7, #3]
 800e75e:	f003 030f 	and.w	r3, r3, #15
 800e762:	b2da      	uxtb	r2, r3
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800e768:	883b      	ldrh	r3, [r7, #0]
 800e76a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	78ba      	ldrb	r2, [r7, #2]
 800e776:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	785b      	ldrb	r3, [r3, #1]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d004      	beq.n	800e78a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	461a      	mov	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e78a:	78bb      	ldrb	r3, [r7, #2]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d102      	bne.n	800e796 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2200      	movs	r2, #0
 800e794:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d101      	bne.n	800e7a4 <HAL_PCD_EP_Open+0xae>
 800e7a0:	2302      	movs	r3, #2
 800e7a2:	e00e      	b.n	800e7c2 <HAL_PCD_EP_Open+0xcc>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	68f9      	ldr	r1, [r7, #12]
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f008 f93c 	bl	8016a30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800e7c0:	7afb      	ldrb	r3, [r7, #11]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e7d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	da0f      	bge.n	800e7fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e7de:	78fb      	ldrb	r3, [r7, #3]
 800e7e0:	f003 020f 	and.w	r2, r3, #15
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	4413      	add	r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	3310      	adds	r3, #16
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	705a      	strb	r2, [r3, #1]
 800e7fc:	e00f      	b.n	800e81e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e7fe:	78fb      	ldrb	r3, [r7, #3]
 800e800:	f003 020f 	and.w	r2, r3, #15
 800e804:	4613      	mov	r3, r2
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	4413      	add	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	4413      	add	r3, r2
 800e814:	3304      	adds	r3, #4
 800e816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2200      	movs	r2, #0
 800e81c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e81e:	78fb      	ldrb	r3, [r7, #3]
 800e820:	f003 030f 	and.w	r3, r3, #15
 800e824:	b2da      	uxtb	r2, r3
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e830:	2b01      	cmp	r3, #1
 800e832:	d101      	bne.n	800e838 <HAL_PCD_EP_Close+0x6e>
 800e834:	2302      	movs	r3, #2
 800e836:	e00e      	b.n	800e856 <HAL_PCD_EP_Close+0x8c>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	68f9      	ldr	r1, [r7, #12]
 800e846:	4618      	mov	r0, r3
 800e848:	f008 f97a 	bl	8016b40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b086      	sub	sp, #24
 800e862:	af00      	add	r7, sp, #0
 800e864:	60f8      	str	r0, [r7, #12]
 800e866:	607a      	str	r2, [r7, #4]
 800e868:	603b      	str	r3, [r7, #0]
 800e86a:	460b      	mov	r3, r1
 800e86c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e86e:	7afb      	ldrb	r3, [r7, #11]
 800e870:	f003 020f 	and.w	r2, r3, #15
 800e874:	4613      	mov	r3, r2
 800e876:	00db      	lsls	r3, r3, #3
 800e878:	4413      	add	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	4413      	add	r3, r2
 800e884:	3304      	adds	r3, #4
 800e886:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	683a      	ldr	r2, [r7, #0]
 800e892:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2200      	movs	r2, #0
 800e898:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2200      	movs	r2, #0
 800e89e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e8a0:	7afb      	ldrb	r3, [r7, #11]
 800e8a2:	f003 030f 	and.w	r3, r3, #15
 800e8a6:	b2da      	uxtb	r2, r3
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	799b      	ldrb	r3, [r3, #6]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d102      	bne.n	800e8ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6818      	ldr	r0, [r3, #0]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	799b      	ldrb	r3, [r3, #6]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	6979      	ldr	r1, [r7, #20]
 800e8c6:	f008 fa17 	bl	8016cf8 <USB_EPStartXfer>

  return HAL_OK;
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3718      	adds	r7, #24
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	460b      	mov	r3, r1
 800e8de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e8e0:	78fb      	ldrb	r3, [r7, #3]
 800e8e2:	f003 020f 	and.w	r2, r3, #15
 800e8e6:	6879      	ldr	r1, [r7, #4]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	00db      	lsls	r3, r3, #3
 800e8ec:	4413      	add	r3, r2
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	440b      	add	r3, r1
 800e8f2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800e8f6:	681b      	ldr	r3, [r3, #0]
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b086      	sub	sp, #24
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	607a      	str	r2, [r7, #4]
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	460b      	mov	r3, r1
 800e912:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e914:	7afb      	ldrb	r3, [r7, #11]
 800e916:	f003 020f 	and.w	r2, r3, #15
 800e91a:	4613      	mov	r3, r2
 800e91c:	00db      	lsls	r3, r3, #3
 800e91e:	4413      	add	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	3310      	adds	r3, #16
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	4413      	add	r3, r2
 800e928:	3304      	adds	r3, #4
 800e92a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2200      	movs	r2, #0
 800e93c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	2201      	movs	r2, #1
 800e942:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e944:	7afb      	ldrb	r3, [r7, #11]
 800e946:	f003 030f 	and.w	r3, r3, #15
 800e94a:	b2da      	uxtb	r2, r3
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	799b      	ldrb	r3, [r3, #6]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d102      	bne.n	800e95e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6818      	ldr	r0, [r3, #0]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	799b      	ldrb	r3, [r3, #6]
 800e966:	461a      	mov	r2, r3
 800e968:	6979      	ldr	r1, [r7, #20]
 800e96a:	f008 f9c5 	bl	8016cf8 <USB_EPStartXfer>

  return HAL_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3718      	adds	r7, #24
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e984:	78fb      	ldrb	r3, [r7, #3]
 800e986:	f003 030f 	and.w	r3, r3, #15
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	7912      	ldrb	r2, [r2, #4]
 800e98e:	4293      	cmp	r3, r2
 800e990:	d901      	bls.n	800e996 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e992:	2301      	movs	r3, #1
 800e994:	e04f      	b.n	800ea36 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	da0f      	bge.n	800e9be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e99e:	78fb      	ldrb	r3, [r7, #3]
 800e9a0:	f003 020f 	and.w	r2, r3, #15
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	00db      	lsls	r3, r3, #3
 800e9a8:	4413      	add	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	3310      	adds	r3, #16
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	705a      	strb	r2, [r3, #1]
 800e9bc:	e00d      	b.n	800e9da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e9be:	78fa      	ldrb	r2, [r7, #3]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	00db      	lsls	r3, r3, #3
 800e9c4:	4413      	add	r3, r2
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	3304      	adds	r3, #4
 800e9d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e9e0:	78fb      	ldrb	r3, [r7, #3]
 800e9e2:	f003 030f 	and.w	r3, r3, #15
 800e9e6:	b2da      	uxtb	r2, r3
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d101      	bne.n	800e9fa <HAL_PCD_EP_SetStall+0x82>
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	e01d      	b.n	800ea36 <HAL_PCD_EP_SetStall+0xbe>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	68f9      	ldr	r1, [r7, #12]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f008 fd59 	bl	80174c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ea0e:	78fb      	ldrb	r3, [r7, #3]
 800ea10:	f003 030f 	and.w	r3, r3, #15
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d109      	bne.n	800ea2c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6818      	ldr	r0, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	7999      	ldrb	r1, [r3, #6]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ea26:	461a      	mov	r2, r3
 800ea28:	f008 ff4c 	bl	80178c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b084      	sub	sp, #16
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	460b      	mov	r3, r1
 800ea48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ea4a:	78fb      	ldrb	r3, [r7, #3]
 800ea4c:	f003 030f 	and.w	r3, r3, #15
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	7912      	ldrb	r2, [r2, #4]
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d901      	bls.n	800ea5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e042      	b.n	800eae2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ea5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	da0f      	bge.n	800ea84 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ea64:	78fb      	ldrb	r3, [r7, #3]
 800ea66:	f003 020f 	and.w	r2, r3, #15
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	00db      	lsls	r3, r3, #3
 800ea6e:	4413      	add	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	3310      	adds	r3, #16
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	4413      	add	r3, r2
 800ea78:	3304      	adds	r3, #4
 800ea7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	705a      	strb	r2, [r3, #1]
 800ea82:	e00f      	b.n	800eaa4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ea84:	78fb      	ldrb	r3, [r7, #3]
 800ea86:	f003 020f 	and.w	r2, r3, #15
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	00db      	lsls	r3, r3, #3
 800ea8e:	4413      	add	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	4413      	add	r3, r2
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eaaa:	78fb      	ldrb	r3, [r7, #3]
 800eaac:	f003 030f 	and.w	r3, r3, #15
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d101      	bne.n	800eac4 <HAL_PCD_EP_ClrStall+0x86>
 800eac0:	2302      	movs	r3, #2
 800eac2:	e00e      	b.n	800eae2 <HAL_PCD_EP_ClrStall+0xa4>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	68f9      	ldr	r1, [r7, #12]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f008 fd62 	bl	801759c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b084      	sub	sp, #16
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800eaf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	da0c      	bge.n	800eb18 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eafe:	78fb      	ldrb	r3, [r7, #3]
 800eb00:	f003 020f 	and.w	r2, r3, #15
 800eb04:	4613      	mov	r3, r2
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	4413      	add	r3, r2
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	3310      	adds	r3, #16
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	4413      	add	r3, r2
 800eb12:	3304      	adds	r3, #4
 800eb14:	60fb      	str	r3, [r7, #12]
 800eb16:	e00c      	b.n	800eb32 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eb18:	78fb      	ldrb	r3, [r7, #3]
 800eb1a:	f003 020f 	and.w	r2, r3, #15
 800eb1e:	4613      	mov	r3, r2
 800eb20:	00db      	lsls	r3, r3, #3
 800eb22:	4413      	add	r3, r2
 800eb24:	009b      	lsls	r3, r3, #2
 800eb26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	3304      	adds	r3, #4
 800eb30:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68f9      	ldr	r1, [r7, #12]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f008 fb81 	bl	8017240 <USB_EPStopXfer>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	72fb      	strb	r3, [r7, #11]

  return ret;
 800eb42:	7afb      	ldrb	r3, [r7, #11]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08a      	sub	sp, #40	@ 0x28
 800eb50:	af02      	add	r7, sp, #8
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800eb60:	683a      	ldr	r2, [r7, #0]
 800eb62:	4613      	mov	r3, r2
 800eb64:	00db      	lsls	r3, r3, #3
 800eb66:	4413      	add	r3, r2
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	3310      	adds	r3, #16
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	4413      	add	r3, r2
 800eb70:	3304      	adds	r3, #4
 800eb72:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	695a      	ldr	r2, [r3, #20]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d901      	bls.n	800eb84 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800eb80:	2301      	movs	r3, #1
 800eb82:	e06b      	b.n	800ec5c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	691a      	ldr	r2, [r3, #16]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	695b      	ldr	r3, [r3, #20]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	69fa      	ldr	r2, [r7, #28]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d902      	bls.n	800eba0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	3303      	adds	r3, #3
 800eba4:	089b      	lsrs	r3, r3, #2
 800eba6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800eba8:	e02a      	b.n	800ec00 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	691a      	ldr	r2, [r3, #16]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	695b      	ldr	r3, [r3, #20]
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	69fa      	ldr	r2, [r7, #28]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d902      	bls.n	800ebc6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	3303      	adds	r3, #3
 800ebca:	089b      	lsrs	r3, r3, #2
 800ebcc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	68d9      	ldr	r1, [r3, #12]
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	6978      	ldr	r0, [r7, #20]
 800ebe4:	f008 fbd6 	bl	8017394 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	68da      	ldr	r2, [r3, #12]
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	441a      	add	r2, r3
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	695a      	ldr	r2, [r3, #20]
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	441a      	add	r2, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	015a      	lsls	r2, r3, #5
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	4413      	add	r3, r2
 800ec08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec0c:	699b      	ldr	r3, [r3, #24]
 800ec0e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ec10:	69ba      	ldr	r2, [r7, #24]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d809      	bhi.n	800ec2a <PCD_WriteEmptyTxFifo+0xde>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	695a      	ldr	r2, [r3, #20]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d203      	bcs.n	800ec2a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1bf      	bne.n	800ebaa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	691a      	ldr	r2, [r3, #16]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	695b      	ldr	r3, [r3, #20]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d811      	bhi.n	800ec5a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	f003 030f 	and.w	r3, r3, #15
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	43db      	mvns	r3, r3
 800ec50:	6939      	ldr	r1, [r7, #16]
 800ec52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec56:	4013      	ands	r3, r2
 800ec58:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3720      	adds	r7, #32
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b088      	sub	sp, #32
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	333c      	adds	r3, #60	@ 0x3c
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	015a      	lsls	r2, r3, #5
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	799b      	ldrb	r3, [r3, #6]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d17b      	bne.n	800ed92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	f003 0308 	and.w	r3, r3, #8
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d015      	beq.n	800ecd0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	4a61      	ldr	r2, [pc, #388]	@ (800ee2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	f240 80b9 	bls.w	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f000 80b3 	beq.w	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	015a      	lsls	r2, r3, #5
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eccc:	6093      	str	r3, [r2, #8]
 800ecce:	e0a7      	b.n	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	f003 0320 	and.w	r3, r3, #32
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d009      	beq.n	800ecee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	015a      	lsls	r2, r3, #5
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	4413      	add	r3, r2
 800ece2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece6:	461a      	mov	r2, r3
 800ece8:	2320      	movs	r3, #32
 800ecea:	6093      	str	r3, [r2, #8]
 800ecec:	e098      	b.n	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f040 8093 	bne.w	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	4a4b      	ldr	r2, [pc, #300]	@ (800ee2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d90f      	bls.n	800ed22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00a      	beq.n	800ed22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	015a      	lsls	r2, r3, #5
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	4413      	add	r3, r2
 800ed14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed18:	461a      	mov	r2, r3
 800ed1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed1e:	6093      	str	r3, [r2, #8]
 800ed20:	e07e      	b.n	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	4613      	mov	r3, r2
 800ed26:	00db      	lsls	r3, r3, #3
 800ed28:	4413      	add	r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	4413      	add	r3, r2
 800ed34:	3304      	adds	r3, #4
 800ed36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6a1a      	ldr	r2, [r3, #32]
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	0159      	lsls	r1, r3, #5
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	440b      	add	r3, r1
 800ed44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed4e:	1ad2      	subs	r2, r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d114      	bne.n	800ed84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d109      	bne.n	800ed76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6818      	ldr	r0, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	2101      	movs	r1, #1
 800ed70:	f008 fda8 	bl	80178c4 <USB_EP0_OutStart>
 800ed74:	e006      	b.n	800ed84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	68da      	ldr	r2, [r3, #12]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	441a      	add	r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f00c fa9a 	bl	801b2c4 <HAL_PCD_DataOutStageCallback>
 800ed90:	e046      	b.n	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	4a26      	ldr	r2, [pc, #152]	@ (800ee30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d124      	bne.n	800ede4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00a      	beq.n	800edba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	015a      	lsls	r2, r3, #5
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	4413      	add	r3, r2
 800edac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edb0:	461a      	mov	r2, r3
 800edb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800edb6:	6093      	str	r3, [r2, #8]
 800edb8:	e032      	b.n	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	f003 0320 	and.w	r3, r3, #32
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d008      	beq.n	800edd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	015a      	lsls	r2, r3, #5
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	4413      	add	r3, r2
 800edcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edd0:	461a      	mov	r2, r3
 800edd2:	2320      	movs	r3, #32
 800edd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	4619      	mov	r1, r3
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f00c fa71 	bl	801b2c4 <HAL_PCD_DataOutStageCallback>
 800ede2:	e01d      	b.n	800ee20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d114      	bne.n	800ee14 <PCD_EP_OutXfrComplete_int+0x1b0>
 800edea:	6879      	ldr	r1, [r7, #4]
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	4613      	mov	r3, r2
 800edf0:	00db      	lsls	r3, r3, #3
 800edf2:	4413      	add	r3, r2
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	440b      	add	r3, r1
 800edf8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d108      	bne.n	800ee14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6818      	ldr	r0, [r3, #0]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	2100      	movs	r1, #0
 800ee10:	f008 fd58 	bl	80178c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	4619      	mov	r1, r3
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f00c fa52 	bl	801b2c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3720      	adds	r7, #32
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	4f54300a 	.word	0x4f54300a
 800ee30:	4f54310a 	.word	0x4f54310a

0800ee34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b086      	sub	sp, #24
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	333c      	adds	r3, #60	@ 0x3c
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	015a      	lsls	r2, r3, #5
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	4413      	add	r3, r2
 800ee5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	4a15      	ldr	r2, [pc, #84]	@ (800eebc <PCD_EP_OutSetupPacket_int+0x88>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d90e      	bls.n	800ee88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d009      	beq.n	800ee88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	015a      	lsls	r2, r3, #5
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee80:	461a      	mov	r2, r3
 800ee82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f00c fa09 	bl	801b2a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	4a0a      	ldr	r2, [pc, #40]	@ (800eebc <PCD_EP_OutSetupPacket_int+0x88>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d90c      	bls.n	800eeb0 <PCD_EP_OutSetupPacket_int+0x7c>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	799b      	ldrb	r3, [r3, #6]
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d108      	bne.n	800eeb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6818      	ldr	r0, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800eea8:	461a      	mov	r2, r3
 800eeaa:	2101      	movs	r1, #1
 800eeac:	f008 fd0a 	bl	80178c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3718      	adds	r7, #24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	4f54300a 	.word	0x4f54300a

0800eec0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	460b      	mov	r3, r1
 800eeca:	70fb      	strb	r3, [r7, #3]
 800eecc:	4613      	mov	r3, r2
 800eece:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800eed8:	78fb      	ldrb	r3, [r7, #3]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d107      	bne.n	800eeee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800eede:	883b      	ldrh	r3, [r7, #0]
 800eee0:	0419      	lsls	r1, r3, #16
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	430a      	orrs	r2, r1
 800eeea:	629a      	str	r2, [r3, #40]	@ 0x28
 800eeec:	e028      	b.n	800ef40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eef4:	0c1b      	lsrs	r3, r3, #16
 800eef6:	68ba      	ldr	r2, [r7, #8]
 800eef8:	4413      	add	r3, r2
 800eefa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800eefc:	2300      	movs	r3, #0
 800eefe:	73fb      	strb	r3, [r7, #15]
 800ef00:	e00d      	b.n	800ef1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
 800ef08:	3340      	adds	r3, #64	@ 0x40
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	4413      	add	r3, r2
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	0c1b      	lsrs	r3, r3, #16
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	4413      	add	r3, r2
 800ef16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	73fb      	strb	r3, [r7, #15]
 800ef1e:	7bfa      	ldrb	r2, [r7, #15]
 800ef20:	78fb      	ldrb	r3, [r7, #3]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d3ec      	bcc.n	800ef02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ef28:	883b      	ldrh	r3, [r7, #0]
 800ef2a:	0418      	lsls	r0, r3, #16
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6819      	ldr	r1, [r3, #0]
 800ef30:	78fb      	ldrb	r3, [r7, #3]
 800ef32:	3b01      	subs	r3, #1
 800ef34:	68ba      	ldr	r2, [r7, #8]
 800ef36:	4302      	orrs	r2, r0
 800ef38:	3340      	adds	r3, #64	@ 0x40
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	440b      	add	r3, r1
 800ef3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ef40:	2300      	movs	r3, #0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3714      	adds	r7, #20
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ef4e:	b480      	push	{r7}
 800ef50:	b083      	sub	sp, #12
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	460b      	mov	r3, r1
 800ef58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	887a      	ldrh	r2, [r7, #2]
 800ef60:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ef62:	2300      	movs	r3, #0
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2201      	movs	r2, #1
 800ef82:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	699b      	ldr	r3, [r3, #24]
 800ef92:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ef9e:	4b05      	ldr	r3, [pc, #20]	@ (800efb4 <HAL_PCDEx_ActivateLPM+0x44>)
 800efa0:	4313      	orrs	r3, r2
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3714      	adds	r7, #20
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	10000003 	.word	0x10000003

0800efb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	460b      	mov	r3, r1
 800efc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800efc4:	bf00      	nop
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800efd8:	4b19      	ldr	r3, [pc, #100]	@ (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	f003 0304 	and.w	r3, r3, #4
 800efe0:	2b04      	cmp	r3, #4
 800efe2:	d00a      	beq.n	800effa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800efe4:	4b16      	ldr	r3, [pc, #88]	@ (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	f003 0307 	and.w	r3, r3, #7
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d001      	beq.n	800eff6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e01f      	b.n	800f036 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	e01d      	b.n	800f036 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800effa:	4b11      	ldr	r3, [pc, #68]	@ (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	f023 0207 	bic.w	r2, r3, #7
 800f002:	490f      	ldr	r1, [pc, #60]	@ (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4313      	orrs	r3, r2
 800f008:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800f00a:	f7f4 ff23 	bl	8003e54 <HAL_GetTick>
 800f00e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f010:	e009      	b.n	800f026 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f012:	f7f4 ff1f 	bl	8003e54 <HAL_GetTick>
 800f016:	4602      	mov	r2, r0
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f020:	d901      	bls.n	800f026 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800f022:	2301      	movs	r3, #1
 800f024:	e007      	b.n	800f036 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f026:	4b06      	ldr	r3, [pc, #24]	@ (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f02e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f032:	d1ee      	bne.n	800f012 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	58024800 	.word	0x58024800

0800f044 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800f044:	b480      	push	{r7}
 800f046:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800f048:	4b05      	ldr	r3, [pc, #20]	@ (800f060 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	4a04      	ldr	r2, [pc, #16]	@ (800f060 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800f04e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f052:	60d3      	str	r3, [r2, #12]
}
 800f054:	bf00      	nop
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	58024800 	.word	0x58024800

0800f064 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b08c      	sub	sp, #48	@ 0x30
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d102      	bne.n	800f078 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f072:	2301      	movs	r3, #1
 800f074:	f000 bc48 	b.w	800f908 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f003 0301 	and.w	r3, r3, #1
 800f080:	2b00      	cmp	r3, #0
 800f082:	f000 8088 	beq.w	800f196 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f086:	4b99      	ldr	r3, [pc, #612]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f090:	4b96      	ldr	r3, [pc, #600]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f094:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f098:	2b10      	cmp	r3, #16
 800f09a:	d007      	beq.n	800f0ac <HAL_RCC_OscConfig+0x48>
 800f09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f09e:	2b18      	cmp	r3, #24
 800f0a0:	d111      	bne.n	800f0c6 <HAL_RCC_OscConfig+0x62>
 800f0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a4:	f003 0303 	and.w	r3, r3, #3
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d10c      	bne.n	800f0c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f0ac:	4b8f      	ldr	r3, [pc, #572]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d06d      	beq.n	800f194 <HAL_RCC_OscConfig+0x130>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d169      	bne.n	800f194 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	f000 bc21 	b.w	800f908 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0ce:	d106      	bne.n	800f0de <HAL_RCC_OscConfig+0x7a>
 800f0d0:	4b86      	ldr	r3, [pc, #536]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a85      	ldr	r2, [pc, #532]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f0d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f0da:	6013      	str	r3, [r2, #0]
 800f0dc:	e02e      	b.n	800f13c <HAL_RCC_OscConfig+0xd8>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10c      	bne.n	800f100 <HAL_RCC_OscConfig+0x9c>
 800f0e6:	4b81      	ldr	r3, [pc, #516]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a80      	ldr	r2, [pc, #512]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f0ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0f0:	6013      	str	r3, [r2, #0]
 800f0f2:	4b7e      	ldr	r3, [pc, #504]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a7d      	ldr	r2, [pc, #500]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f0f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f0fc:	6013      	str	r3, [r2, #0]
 800f0fe:	e01d      	b.n	800f13c <HAL_RCC_OscConfig+0xd8>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f108:	d10c      	bne.n	800f124 <HAL_RCC_OscConfig+0xc0>
 800f10a:	4b78      	ldr	r3, [pc, #480]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4a77      	ldr	r2, [pc, #476]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f114:	6013      	str	r3, [r2, #0]
 800f116:	4b75      	ldr	r3, [pc, #468]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a74      	ldr	r2, [pc, #464]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f11c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f120:	6013      	str	r3, [r2, #0]
 800f122:	e00b      	b.n	800f13c <HAL_RCC_OscConfig+0xd8>
 800f124:	4b71      	ldr	r3, [pc, #452]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a70      	ldr	r2, [pc, #448]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f12a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f12e:	6013      	str	r3, [r2, #0]
 800f130:	4b6e      	ldr	r3, [pc, #440]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a6d      	ldr	r2, [pc, #436]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f13a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d013      	beq.n	800f16c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f144:	f7f4 fe86 	bl	8003e54 <HAL_GetTick>
 800f148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f14a:	e008      	b.n	800f15e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f14c:	f7f4 fe82 	bl	8003e54 <HAL_GetTick>
 800f150:	4602      	mov	r2, r0
 800f152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	2b64      	cmp	r3, #100	@ 0x64
 800f158:	d901      	bls.n	800f15e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f15a:	2303      	movs	r3, #3
 800f15c:	e3d4      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f15e:	4b63      	ldr	r3, [pc, #396]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f166:	2b00      	cmp	r3, #0
 800f168:	d0f0      	beq.n	800f14c <HAL_RCC_OscConfig+0xe8>
 800f16a:	e014      	b.n	800f196 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f16c:	f7f4 fe72 	bl	8003e54 <HAL_GetTick>
 800f170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f172:	e008      	b.n	800f186 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f174:	f7f4 fe6e 	bl	8003e54 <HAL_GetTick>
 800f178:	4602      	mov	r2, r0
 800f17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	2b64      	cmp	r3, #100	@ 0x64
 800f180:	d901      	bls.n	800f186 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800f182:	2303      	movs	r3, #3
 800f184:	e3c0      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f186:	4b59      	ldr	r3, [pc, #356]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1f0      	bne.n	800f174 <HAL_RCC_OscConfig+0x110>
 800f192:	e000      	b.n	800f196 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f003 0302 	and.w	r3, r3, #2
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f000 80ca 	beq.w	800f338 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f1a4:	4b51      	ldr	r3, [pc, #324]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f1a6:	691b      	ldr	r3, [r3, #16]
 800f1a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f1ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f1ae:	4b4f      	ldr	r3, [pc, #316]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f1b4:	6a3b      	ldr	r3, [r7, #32]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d007      	beq.n	800f1ca <HAL_RCC_OscConfig+0x166>
 800f1ba:	6a3b      	ldr	r3, [r7, #32]
 800f1bc:	2b18      	cmp	r3, #24
 800f1be:	d156      	bne.n	800f26e <HAL_RCC_OscConfig+0x20a>
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	f003 0303 	and.w	r3, r3, #3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d151      	bne.n	800f26e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f1ca:	4b48      	ldr	r3, [pc, #288]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f003 0304 	and.w	r3, r3, #4
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d005      	beq.n	800f1e2 <HAL_RCC_OscConfig+0x17e>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d101      	bne.n	800f1e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e392      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f1e2:	4b42      	ldr	r3, [pc, #264]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f023 0219 	bic.w	r2, r3, #25
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	493f      	ldr	r1, [pc, #252]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1f4:	f7f4 fe2e 	bl	8003e54 <HAL_GetTick>
 800f1f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f1fa:	e008      	b.n	800f20e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f1fc:	f7f4 fe2a 	bl	8003e54 <HAL_GetTick>
 800f200:	4602      	mov	r2, r0
 800f202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	2b02      	cmp	r3, #2
 800f208:	d901      	bls.n	800f20e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800f20a:	2303      	movs	r3, #3
 800f20c:	e37c      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f20e:	4b37      	ldr	r3, [pc, #220]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f003 0304 	and.w	r3, r3, #4
 800f216:	2b00      	cmp	r3, #0
 800f218:	d0f0      	beq.n	800f1fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f21a:	f7f4 fe4b 	bl	8003eb4 <HAL_GetREVID>
 800f21e:	4603      	mov	r3, r0
 800f220:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f224:	4293      	cmp	r3, r2
 800f226:	d817      	bhi.n	800f258 <HAL_RCC_OscConfig+0x1f4>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	2b40      	cmp	r3, #64	@ 0x40
 800f22e:	d108      	bne.n	800f242 <HAL_RCC_OscConfig+0x1de>
 800f230:	4b2e      	ldr	r3, [pc, #184]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800f238:	4a2c      	ldr	r2, [pc, #176]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f23a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f23e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f240:	e07a      	b.n	800f338 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f242:	4b2a      	ldr	r3, [pc, #168]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	031b      	lsls	r3, r3, #12
 800f250:	4926      	ldr	r1, [pc, #152]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f252:	4313      	orrs	r3, r2
 800f254:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f256:	e06f      	b.n	800f338 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f258:	4b24      	ldr	r3, [pc, #144]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	691b      	ldr	r3, [r3, #16]
 800f264:	061b      	lsls	r3, r3, #24
 800f266:	4921      	ldr	r1, [pc, #132]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f268:	4313      	orrs	r3, r2
 800f26a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f26c:	e064      	b.n	800f338 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d047      	beq.n	800f306 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f276:	4b1d      	ldr	r3, [pc, #116]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f023 0219 	bic.w	r2, r3, #25
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	491a      	ldr	r1, [pc, #104]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f284:	4313      	orrs	r3, r2
 800f286:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f288:	f7f4 fde4 	bl	8003e54 <HAL_GetTick>
 800f28c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f28e:	e008      	b.n	800f2a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f290:	f7f4 fde0 	bl	8003e54 <HAL_GetTick>
 800f294:	4602      	mov	r2, r0
 800f296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	2b02      	cmp	r3, #2
 800f29c:	d901      	bls.n	800f2a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f29e:	2303      	movs	r3, #3
 800f2a0:	e332      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f2a2:	4b12      	ldr	r3, [pc, #72]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f003 0304 	and.w	r3, r3, #4
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d0f0      	beq.n	800f290 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2ae:	f7f4 fe01 	bl	8003eb4 <HAL_GetREVID>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d819      	bhi.n	800f2f0 <HAL_RCC_OscConfig+0x28c>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	2b40      	cmp	r3, #64	@ 0x40
 800f2c2:	d108      	bne.n	800f2d6 <HAL_RCC_OscConfig+0x272>
 800f2c4:	4b09      	ldr	r3, [pc, #36]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800f2cc:	4a07      	ldr	r2, [pc, #28]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f2ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f2d2:	6053      	str	r3, [r2, #4]
 800f2d4:	e030      	b.n	800f338 <HAL_RCC_OscConfig+0x2d4>
 800f2d6:	4b05      	ldr	r3, [pc, #20]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	031b      	lsls	r3, r3, #12
 800f2e4:	4901      	ldr	r1, [pc, #4]	@ (800f2ec <HAL_RCC_OscConfig+0x288>)
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	604b      	str	r3, [r1, #4]
 800f2ea:	e025      	b.n	800f338 <HAL_RCC_OscConfig+0x2d4>
 800f2ec:	58024400 	.word	0x58024400
 800f2f0:	4b9a      	ldr	r3, [pc, #616]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	691b      	ldr	r3, [r3, #16]
 800f2fc:	061b      	lsls	r3, r3, #24
 800f2fe:	4997      	ldr	r1, [pc, #604]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f300:	4313      	orrs	r3, r2
 800f302:	604b      	str	r3, [r1, #4]
 800f304:	e018      	b.n	800f338 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f306:	4b95      	ldr	r3, [pc, #596]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4a94      	ldr	r2, [pc, #592]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f30c:	f023 0301 	bic.w	r3, r3, #1
 800f310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f312:	f7f4 fd9f 	bl	8003e54 <HAL_GetTick>
 800f316:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f318:	e008      	b.n	800f32c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f31a:	f7f4 fd9b 	bl	8003e54 <HAL_GetTick>
 800f31e:	4602      	mov	r2, r0
 800f320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f322:	1ad3      	subs	r3, r2, r3
 800f324:	2b02      	cmp	r3, #2
 800f326:	d901      	bls.n	800f32c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f328:	2303      	movs	r3, #3
 800f32a:	e2ed      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f32c:	4b8b      	ldr	r3, [pc, #556]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f003 0304 	and.w	r3, r3, #4
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1f0      	bne.n	800f31a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f003 0310 	and.w	r3, r3, #16
 800f340:	2b00      	cmp	r3, #0
 800f342:	f000 80a9 	beq.w	800f498 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f346:	4b85      	ldr	r3, [pc, #532]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f34e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f350:	4b82      	ldr	r3, [pc, #520]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f354:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	2b08      	cmp	r3, #8
 800f35a:	d007      	beq.n	800f36c <HAL_RCC_OscConfig+0x308>
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	2b18      	cmp	r3, #24
 800f360:	d13a      	bne.n	800f3d8 <HAL_RCC_OscConfig+0x374>
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	f003 0303 	and.w	r3, r3, #3
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d135      	bne.n	800f3d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f36c:	4b7b      	ldr	r3, [pc, #492]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f374:	2b00      	cmp	r3, #0
 800f376:	d005      	beq.n	800f384 <HAL_RCC_OscConfig+0x320>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	69db      	ldr	r3, [r3, #28]
 800f37c:	2b80      	cmp	r3, #128	@ 0x80
 800f37e:	d001      	beq.n	800f384 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	e2c1      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f384:	f7f4 fd96 	bl	8003eb4 <HAL_GetREVID>
 800f388:	4603      	mov	r3, r0
 800f38a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f38e:	4293      	cmp	r3, r2
 800f390:	d817      	bhi.n	800f3c2 <HAL_RCC_OscConfig+0x35e>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6a1b      	ldr	r3, [r3, #32]
 800f396:	2b20      	cmp	r3, #32
 800f398:	d108      	bne.n	800f3ac <HAL_RCC_OscConfig+0x348>
 800f39a:	4b70      	ldr	r3, [pc, #448]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f3a2:	4a6e      	ldr	r2, [pc, #440]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f3a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f3a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f3aa:	e075      	b.n	800f498 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f3ac:	4b6b      	ldr	r3, [pc, #428]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
 800f3b8:	069b      	lsls	r3, r3, #26
 800f3ba:	4968      	ldr	r1, [pc, #416]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f3c0:	e06a      	b.n	800f498 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f3c2:	4b66      	ldr	r3, [pc, #408]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6a1b      	ldr	r3, [r3, #32]
 800f3ce:	061b      	lsls	r3, r3, #24
 800f3d0:	4962      	ldr	r1, [pc, #392]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f3d6:	e05f      	b.n	800f498 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	69db      	ldr	r3, [r3, #28]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d042      	beq.n	800f466 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f3e0:	4b5e      	ldr	r3, [pc, #376]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4a5d      	ldr	r2, [pc, #372]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3ec:	f7f4 fd32 	bl	8003e54 <HAL_GetTick>
 800f3f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f3f2:	e008      	b.n	800f406 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f3f4:	f7f4 fd2e 	bl	8003e54 <HAL_GetTick>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d901      	bls.n	800f406 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f402:	2303      	movs	r3, #3
 800f404:	e280      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f406:	4b55      	ldr	r3, [pc, #340]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d0f0      	beq.n	800f3f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f412:	f7f4 fd4f 	bl	8003eb4 <HAL_GetREVID>
 800f416:	4603      	mov	r3, r0
 800f418:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d817      	bhi.n	800f450 <HAL_RCC_OscConfig+0x3ec>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6a1b      	ldr	r3, [r3, #32]
 800f424:	2b20      	cmp	r3, #32
 800f426:	d108      	bne.n	800f43a <HAL_RCC_OscConfig+0x3d6>
 800f428:	4b4c      	ldr	r3, [pc, #304]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f430:	4a4a      	ldr	r2, [pc, #296]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f432:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f436:	6053      	str	r3, [r2, #4]
 800f438:	e02e      	b.n	800f498 <HAL_RCC_OscConfig+0x434>
 800f43a:	4b48      	ldr	r3, [pc, #288]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	069b      	lsls	r3, r3, #26
 800f448:	4944      	ldr	r1, [pc, #272]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f44a:	4313      	orrs	r3, r2
 800f44c:	604b      	str	r3, [r1, #4]
 800f44e:	e023      	b.n	800f498 <HAL_RCC_OscConfig+0x434>
 800f450:	4b42      	ldr	r3, [pc, #264]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6a1b      	ldr	r3, [r3, #32]
 800f45c:	061b      	lsls	r3, r3, #24
 800f45e:	493f      	ldr	r1, [pc, #252]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f460:	4313      	orrs	r3, r2
 800f462:	60cb      	str	r3, [r1, #12]
 800f464:	e018      	b.n	800f498 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f466:	4b3d      	ldr	r3, [pc, #244]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4a3c      	ldr	r2, [pc, #240]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f46c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f472:	f7f4 fcef 	bl	8003e54 <HAL_GetTick>
 800f476:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f478:	e008      	b.n	800f48c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f47a:	f7f4 fceb 	bl	8003e54 <HAL_GetTick>
 800f47e:	4602      	mov	r2, r0
 800f480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	2b02      	cmp	r3, #2
 800f486:	d901      	bls.n	800f48c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f488:	2303      	movs	r3, #3
 800f48a:	e23d      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f48c:	4b33      	ldr	r3, [pc, #204]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1f0      	bne.n	800f47a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f003 0308 	and.w	r3, r3, #8
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d036      	beq.n	800f512 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	695b      	ldr	r3, [r3, #20]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d019      	beq.n	800f4e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f4ac:	4b2b      	ldr	r3, [pc, #172]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f4ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4b0:	4a2a      	ldr	r2, [pc, #168]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f4b2:	f043 0301 	orr.w	r3, r3, #1
 800f4b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f4b8:	f7f4 fccc 	bl	8003e54 <HAL_GetTick>
 800f4bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f4be:	e008      	b.n	800f4d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f4c0:	f7f4 fcc8 	bl	8003e54 <HAL_GetTick>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	d901      	bls.n	800f4d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800f4ce:	2303      	movs	r3, #3
 800f4d0:	e21a      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f4d2:	4b22      	ldr	r3, [pc, #136]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f4d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4d6:	f003 0302 	and.w	r3, r3, #2
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d0f0      	beq.n	800f4c0 <HAL_RCC_OscConfig+0x45c>
 800f4de:	e018      	b.n	800f512 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f4e0:	4b1e      	ldr	r3, [pc, #120]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f4e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4e4:	4a1d      	ldr	r2, [pc, #116]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f4e6:	f023 0301 	bic.w	r3, r3, #1
 800f4ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f4ec:	f7f4 fcb2 	bl	8003e54 <HAL_GetTick>
 800f4f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f4f2:	e008      	b.n	800f506 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f4f4:	f7f4 fcae 	bl	8003e54 <HAL_GetTick>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4fc:	1ad3      	subs	r3, r2, r3
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	d901      	bls.n	800f506 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800f502:	2303      	movs	r3, #3
 800f504:	e200      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f506:	4b15      	ldr	r3, [pc, #84]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f50a:	f003 0302 	and.w	r3, r3, #2
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1f0      	bne.n	800f4f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f003 0320 	and.w	r3, r3, #32
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d039      	beq.n	800f592 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	699b      	ldr	r3, [r3, #24]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d01c      	beq.n	800f560 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f526:	4b0d      	ldr	r3, [pc, #52]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a0c      	ldr	r2, [pc, #48]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f52c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f530:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f532:	f7f4 fc8f 	bl	8003e54 <HAL_GetTick>
 800f536:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f538:	e008      	b.n	800f54c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f53a:	f7f4 fc8b 	bl	8003e54 <HAL_GetTick>
 800f53e:	4602      	mov	r2, r0
 800f540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	2b02      	cmp	r3, #2
 800f546:	d901      	bls.n	800f54c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800f548:	2303      	movs	r3, #3
 800f54a:	e1dd      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f54c:	4b03      	ldr	r3, [pc, #12]	@ (800f55c <HAL_RCC_OscConfig+0x4f8>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f554:	2b00      	cmp	r3, #0
 800f556:	d0f0      	beq.n	800f53a <HAL_RCC_OscConfig+0x4d6>
 800f558:	e01b      	b.n	800f592 <HAL_RCC_OscConfig+0x52e>
 800f55a:	bf00      	nop
 800f55c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f560:	4b9b      	ldr	r3, [pc, #620]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4a9a      	ldr	r2, [pc, #616]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f566:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f56a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f56c:	f7f4 fc72 	bl	8003e54 <HAL_GetTick>
 800f570:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f572:	e008      	b.n	800f586 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f574:	f7f4 fc6e 	bl	8003e54 <HAL_GetTick>
 800f578:	4602      	mov	r2, r0
 800f57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	2b02      	cmp	r3, #2
 800f580:	d901      	bls.n	800f586 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800f582:	2303      	movs	r3, #3
 800f584:	e1c0      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f586:	4b92      	ldr	r3, [pc, #584]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1f0      	bne.n	800f574 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f003 0304 	and.w	r3, r3, #4
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f000 8081 	beq.w	800f6a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f5a0:	4b8c      	ldr	r3, [pc, #560]	@ (800f7d4 <HAL_RCC_OscConfig+0x770>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4a8b      	ldr	r2, [pc, #556]	@ (800f7d4 <HAL_RCC_OscConfig+0x770>)
 800f5a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f5aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f5ac:	f7f4 fc52 	bl	8003e54 <HAL_GetTick>
 800f5b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f5b2:	e008      	b.n	800f5c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f5b4:	f7f4 fc4e 	bl	8003e54 <HAL_GetTick>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5bc:	1ad3      	subs	r3, r2, r3
 800f5be:	2b64      	cmp	r3, #100	@ 0x64
 800f5c0:	d901      	bls.n	800f5c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800f5c2:	2303      	movs	r3, #3
 800f5c4:	e1a0      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f5c6:	4b83      	ldr	r3, [pc, #524]	@ (800f7d4 <HAL_RCC_OscConfig+0x770>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d0f0      	beq.n	800f5b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	689b      	ldr	r3, [r3, #8]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d106      	bne.n	800f5e8 <HAL_RCC_OscConfig+0x584>
 800f5da:	4b7d      	ldr	r3, [pc, #500]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f5dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5de:	4a7c      	ldr	r2, [pc, #496]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f5e0:	f043 0301 	orr.w	r3, r3, #1
 800f5e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800f5e6:	e02d      	b.n	800f644 <HAL_RCC_OscConfig+0x5e0>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d10c      	bne.n	800f60a <HAL_RCC_OscConfig+0x5a6>
 800f5f0:	4b77      	ldr	r3, [pc, #476]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f5f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5f4:	4a76      	ldr	r2, [pc, #472]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f5f6:	f023 0301 	bic.w	r3, r3, #1
 800f5fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800f5fc:	4b74      	ldr	r3, [pc, #464]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f5fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f600:	4a73      	ldr	r2, [pc, #460]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f602:	f023 0304 	bic.w	r3, r3, #4
 800f606:	6713      	str	r3, [r2, #112]	@ 0x70
 800f608:	e01c      	b.n	800f644 <HAL_RCC_OscConfig+0x5e0>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	2b05      	cmp	r3, #5
 800f610:	d10c      	bne.n	800f62c <HAL_RCC_OscConfig+0x5c8>
 800f612:	4b6f      	ldr	r3, [pc, #444]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f616:	4a6e      	ldr	r2, [pc, #440]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f618:	f043 0304 	orr.w	r3, r3, #4
 800f61c:	6713      	str	r3, [r2, #112]	@ 0x70
 800f61e:	4b6c      	ldr	r3, [pc, #432]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f622:	4a6b      	ldr	r2, [pc, #428]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f624:	f043 0301 	orr.w	r3, r3, #1
 800f628:	6713      	str	r3, [r2, #112]	@ 0x70
 800f62a:	e00b      	b.n	800f644 <HAL_RCC_OscConfig+0x5e0>
 800f62c:	4b68      	ldr	r3, [pc, #416]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f62e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f630:	4a67      	ldr	r2, [pc, #412]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f632:	f023 0301 	bic.w	r3, r3, #1
 800f636:	6713      	str	r3, [r2, #112]	@ 0x70
 800f638:	4b65      	ldr	r3, [pc, #404]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f63a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f63c:	4a64      	ldr	r2, [pc, #400]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f63e:	f023 0304 	bic.w	r3, r3, #4
 800f642:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d015      	beq.n	800f678 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f64c:	f7f4 fc02 	bl	8003e54 <HAL_GetTick>
 800f650:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f652:	e00a      	b.n	800f66a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f654:	f7f4 fbfe 	bl	8003e54 <HAL_GetTick>
 800f658:	4602      	mov	r2, r0
 800f65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f65c:	1ad3      	subs	r3, r2, r3
 800f65e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f662:	4293      	cmp	r3, r2
 800f664:	d901      	bls.n	800f66a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	e14e      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f66a:	4b59      	ldr	r3, [pc, #356]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f66c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f66e:	f003 0302 	and.w	r3, r3, #2
 800f672:	2b00      	cmp	r3, #0
 800f674:	d0ee      	beq.n	800f654 <HAL_RCC_OscConfig+0x5f0>
 800f676:	e014      	b.n	800f6a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f678:	f7f4 fbec 	bl	8003e54 <HAL_GetTick>
 800f67c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f67e:	e00a      	b.n	800f696 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f680:	f7f4 fbe8 	bl	8003e54 <HAL_GetTick>
 800f684:	4602      	mov	r2, r0
 800f686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f68e:	4293      	cmp	r3, r2
 800f690:	d901      	bls.n	800f696 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800f692:	2303      	movs	r3, #3
 800f694:	e138      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f696:	4b4e      	ldr	r3, [pc, #312]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f69a:	f003 0302 	and.w	r3, r3, #2
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1ee      	bne.n	800f680 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f000 812d 	beq.w	800f906 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f6ac:	4b48      	ldr	r3, [pc, #288]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f6b4:	2b18      	cmp	r3, #24
 800f6b6:	f000 80bd 	beq.w	800f834 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	f040 809e 	bne.w	800f800 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f6c4:	4b42      	ldr	r3, [pc, #264]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a41      	ldr	r2, [pc, #260]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f6ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f6ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6d0:	f7f4 fbc0 	bl	8003e54 <HAL_GetTick>
 800f6d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f6d6:	e008      	b.n	800f6ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f6d8:	f7f4 fbbc 	bl	8003e54 <HAL_GetTick>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	2b02      	cmp	r3, #2
 800f6e4:	d901      	bls.n	800f6ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	e10e      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f6ea:	4b39      	ldr	r3, [pc, #228]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1f0      	bne.n	800f6d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f6f6:	4b36      	ldr	r3, [pc, #216]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f6f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f6fa:	4b37      	ldr	r3, [pc, #220]	@ (800f7d8 <HAL_RCC_OscConfig+0x774>)
 800f6fc:	4013      	ands	r3, r2
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f706:	0112      	lsls	r2, r2, #4
 800f708:	430a      	orrs	r2, r1
 800f70a:	4931      	ldr	r1, [pc, #196]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f70c:	4313      	orrs	r3, r2
 800f70e:	628b      	str	r3, [r1, #40]	@ 0x28
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f714:	3b01      	subs	r3, #1
 800f716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f71e:	3b01      	subs	r3, #1
 800f720:	025b      	lsls	r3, r3, #9
 800f722:	b29b      	uxth	r3, r3
 800f724:	431a      	orrs	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f72a:	3b01      	subs	r3, #1
 800f72c:	041b      	lsls	r3, r3, #16
 800f72e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f732:	431a      	orrs	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f738:	3b01      	subs	r3, #1
 800f73a:	061b      	lsls	r3, r3, #24
 800f73c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f740:	4923      	ldr	r1, [pc, #140]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f742:	4313      	orrs	r3, r2
 800f744:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800f746:	4b22      	ldr	r3, [pc, #136]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f74a:	4a21      	ldr	r2, [pc, #132]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f74c:	f023 0301 	bic.w	r3, r3, #1
 800f750:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f752:	4b1f      	ldr	r3, [pc, #124]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f756:	4b21      	ldr	r3, [pc, #132]	@ (800f7dc <HAL_RCC_OscConfig+0x778>)
 800f758:	4013      	ands	r3, r2
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f75e:	00d2      	lsls	r2, r2, #3
 800f760:	491b      	ldr	r1, [pc, #108]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f762:	4313      	orrs	r3, r2
 800f764:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f766:	4b1a      	ldr	r3, [pc, #104]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f76a:	f023 020c 	bic.w	r2, r3, #12
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f772:	4917      	ldr	r1, [pc, #92]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f774:	4313      	orrs	r3, r2
 800f776:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f778:	4b15      	ldr	r3, [pc, #84]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f77c:	f023 0202 	bic.w	r2, r3, #2
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f784:	4912      	ldr	r1, [pc, #72]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f786:	4313      	orrs	r3, r2
 800f788:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f78a:	4b11      	ldr	r3, [pc, #68]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f78e:	4a10      	ldr	r2, [pc, #64]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f796:	4b0e      	ldr	r3, [pc, #56]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f79a:	4a0d      	ldr	r2, [pc, #52]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f79c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f7a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7a6:	4a0a      	ldr	r2, [pc, #40]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f7a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f7ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800f7ae:	4b08      	ldr	r3, [pc, #32]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b2:	4a07      	ldr	r2, [pc, #28]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f7b4:	f043 0301 	orr.w	r3, r3, #1
 800f7b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f7ba:	4b05      	ldr	r3, [pc, #20]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	4a04      	ldr	r2, [pc, #16]	@ (800f7d0 <HAL_RCC_OscConfig+0x76c>)
 800f7c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f7c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7c6:	f7f4 fb45 	bl	8003e54 <HAL_GetTick>
 800f7ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f7cc:	e011      	b.n	800f7f2 <HAL_RCC_OscConfig+0x78e>
 800f7ce:	bf00      	nop
 800f7d0:	58024400 	.word	0x58024400
 800f7d4:	58024800 	.word	0x58024800
 800f7d8:	fffffc0c 	.word	0xfffffc0c
 800f7dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f7e0:	f7f4 fb38 	bl	8003e54 <HAL_GetTick>
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	2b02      	cmp	r3, #2
 800f7ec:	d901      	bls.n	800f7f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800f7ee:	2303      	movs	r3, #3
 800f7f0:	e08a      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f7f2:	4b47      	ldr	r3, [pc, #284]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d0f0      	beq.n	800f7e0 <HAL_RCC_OscConfig+0x77c>
 800f7fe:	e082      	b.n	800f906 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f800:	4b43      	ldr	r3, [pc, #268]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a42      	ldr	r2, [pc, #264]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f80a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f80c:	f7f4 fb22 	bl	8003e54 <HAL_GetTick>
 800f810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f812:	e008      	b.n	800f826 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f814:	f7f4 fb1e 	bl	8003e54 <HAL_GetTick>
 800f818:	4602      	mov	r2, r0
 800f81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81c:	1ad3      	subs	r3, r2, r3
 800f81e:	2b02      	cmp	r3, #2
 800f820:	d901      	bls.n	800f826 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800f822:	2303      	movs	r3, #3
 800f824:	e070      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f826:	4b3a      	ldr	r3, [pc, #232]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1f0      	bne.n	800f814 <HAL_RCC_OscConfig+0x7b0>
 800f832:	e068      	b.n	800f906 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f834:	4b36      	ldr	r3, [pc, #216]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f838:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f83a:	4b35      	ldr	r3, [pc, #212]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f83e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f844:	2b01      	cmp	r3, #1
 800f846:	d031      	beq.n	800f8ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	f003 0203 	and.w	r2, r3, #3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f852:	429a      	cmp	r2, r3
 800f854:	d12a      	bne.n	800f8ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	091b      	lsrs	r3, r3, #4
 800f85a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f862:	429a      	cmp	r2, r3
 800f864:	d122      	bne.n	800f8ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f870:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f872:	429a      	cmp	r2, r3
 800f874:	d11a      	bne.n	800f8ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	0a5b      	lsrs	r3, r3, #9
 800f87a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f882:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f884:	429a      	cmp	r2, r3
 800f886:	d111      	bne.n	800f8ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	0c1b      	lsrs	r3, r3, #16
 800f88c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f894:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f896:	429a      	cmp	r2, r3
 800f898:	d108      	bne.n	800f8ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	0e1b      	lsrs	r3, r3, #24
 800f89e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d001      	beq.n	800f8b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e02b      	b.n	800f908 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800f8b0:	4b17      	ldr	r3, [pc, #92]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f8b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8b4:	08db      	lsrs	r3, r3, #3
 800f8b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8c0:	693a      	ldr	r2, [r7, #16]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d01f      	beq.n	800f906 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800f8c6:	4b12      	ldr	r3, [pc, #72]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8ca:	4a11      	ldr	r2, [pc, #68]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f8cc:	f023 0301 	bic.w	r3, r3, #1
 800f8d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f8d2:	f7f4 fabf 	bl	8003e54 <HAL_GetTick>
 800f8d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800f8d8:	bf00      	nop
 800f8da:	f7f4 fabb 	bl	8003e54 <HAL_GetTick>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d0f9      	beq.n	800f8da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f8e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f8e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800f914 <HAL_RCC_OscConfig+0x8b0>)
 800f8ec:	4013      	ands	r3, r2
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f8f2:	00d2      	lsls	r2, r2, #3
 800f8f4:	4906      	ldr	r1, [pc, #24]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800f8fa:	4b05      	ldr	r3, [pc, #20]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8fe:	4a04      	ldr	r2, [pc, #16]	@ (800f910 <HAL_RCC_OscConfig+0x8ac>)
 800f900:	f043 0301 	orr.w	r3, r3, #1
 800f904:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3730      	adds	r7, #48	@ 0x30
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	58024400 	.word	0x58024400
 800f914:	ffff0007 	.word	0xffff0007

0800f918 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b086      	sub	sp, #24
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d101      	bne.n	800f92c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	e19c      	b.n	800fc66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f92c:	4b8a      	ldr	r3, [pc, #552]	@ (800fb58 <HAL_RCC_ClockConfig+0x240>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f003 030f 	and.w	r3, r3, #15
 800f934:	683a      	ldr	r2, [r7, #0]
 800f936:	429a      	cmp	r2, r3
 800f938:	d910      	bls.n	800f95c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f93a:	4b87      	ldr	r3, [pc, #540]	@ (800fb58 <HAL_RCC_ClockConfig+0x240>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f023 020f 	bic.w	r2, r3, #15
 800f942:	4985      	ldr	r1, [pc, #532]	@ (800fb58 <HAL_RCC_ClockConfig+0x240>)
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	4313      	orrs	r3, r2
 800f948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f94a:	4b83      	ldr	r3, [pc, #524]	@ (800fb58 <HAL_RCC_ClockConfig+0x240>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f003 030f 	and.w	r3, r3, #15
 800f952:	683a      	ldr	r2, [r7, #0]
 800f954:	429a      	cmp	r2, r3
 800f956:	d001      	beq.n	800f95c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f958:	2301      	movs	r3, #1
 800f95a:	e184      	b.n	800fc66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f003 0304 	and.w	r3, r3, #4
 800f964:	2b00      	cmp	r3, #0
 800f966:	d010      	beq.n	800f98a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	691a      	ldr	r2, [r3, #16]
 800f96c:	4b7b      	ldr	r3, [pc, #492]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f96e:	699b      	ldr	r3, [r3, #24]
 800f970:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f974:	429a      	cmp	r2, r3
 800f976:	d908      	bls.n	800f98a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f978:	4b78      	ldr	r3, [pc, #480]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	691b      	ldr	r3, [r3, #16]
 800f984:	4975      	ldr	r1, [pc, #468]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f986:	4313      	orrs	r3, r2
 800f988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f003 0308 	and.w	r3, r3, #8
 800f992:	2b00      	cmp	r3, #0
 800f994:	d010      	beq.n	800f9b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	695a      	ldr	r2, [r3, #20]
 800f99a:	4b70      	ldr	r3, [pc, #448]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f99c:	69db      	ldr	r3, [r3, #28]
 800f99e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d908      	bls.n	800f9b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f9a6:	4b6d      	ldr	r3, [pc, #436]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f9a8:	69db      	ldr	r3, [r3, #28]
 800f9aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	695b      	ldr	r3, [r3, #20]
 800f9b2:	496a      	ldr	r1, [pc, #424]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f003 0310 	and.w	r3, r3, #16
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d010      	beq.n	800f9e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	699a      	ldr	r2, [r3, #24]
 800f9c8:	4b64      	ldr	r3, [pc, #400]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f9ca:	69db      	ldr	r3, [r3, #28]
 800f9cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d908      	bls.n	800f9e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f9d4:	4b61      	ldr	r3, [pc, #388]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f9d6:	69db      	ldr	r3, [r3, #28]
 800f9d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	699b      	ldr	r3, [r3, #24]
 800f9e0:	495e      	ldr	r1, [pc, #376]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f003 0320 	and.w	r3, r3, #32
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d010      	beq.n	800fa14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	69da      	ldr	r2, [r3, #28]
 800f9f6:	4b59      	ldr	r3, [pc, #356]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
 800f9fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d908      	bls.n	800fa14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fa02:	4b56      	ldr	r3, [pc, #344]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	69db      	ldr	r3, [r3, #28]
 800fa0e:	4953      	ldr	r1, [pc, #332]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa10:	4313      	orrs	r3, r2
 800fa12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f003 0302 	and.w	r3, r3, #2
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d010      	beq.n	800fa42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	68da      	ldr	r2, [r3, #12]
 800fa24:	4b4d      	ldr	r3, [pc, #308]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa26:	699b      	ldr	r3, [r3, #24]
 800fa28:	f003 030f 	and.w	r3, r3, #15
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d908      	bls.n	800fa42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fa30:	4b4a      	ldr	r3, [pc, #296]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	f023 020f 	bic.w	r2, r3, #15
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	4947      	ldr	r1, [pc, #284]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f003 0301 	and.w	r3, r3, #1
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d055      	beq.n	800fafa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800fa4e:	4b43      	ldr	r3, [pc, #268]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa50:	699b      	ldr	r3, [r3, #24]
 800fa52:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	4940      	ldr	r1, [pc, #256]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	2b02      	cmp	r3, #2
 800fa66:	d107      	bne.n	800fa78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fa68:	4b3c      	ldr	r3, [pc, #240]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d121      	bne.n	800fab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fa74:	2301      	movs	r3, #1
 800fa76:	e0f6      	b.n	800fc66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	2b03      	cmp	r3, #3
 800fa7e:	d107      	bne.n	800fa90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fa80:	4b36      	ldr	r3, [pc, #216]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d115      	bne.n	800fab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	e0ea      	b.n	800fc66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d107      	bne.n	800faa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fa98:	4b30      	ldr	r3, [pc, #192]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d109      	bne.n	800fab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800faa4:	2301      	movs	r3, #1
 800faa6:	e0de      	b.n	800fc66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800faa8:	4b2c      	ldr	r3, [pc, #176]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f003 0304 	and.w	r3, r3, #4
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d101      	bne.n	800fab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	e0d6      	b.n	800fc66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fab8:	4b28      	ldr	r3, [pc, #160]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	f023 0207 	bic.w	r2, r3, #7
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	4925      	ldr	r1, [pc, #148]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fac6:	4313      	orrs	r3, r2
 800fac8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800faca:	f7f4 f9c3 	bl	8003e54 <HAL_GetTick>
 800face:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fad0:	e00a      	b.n	800fae8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fad2:	f7f4 f9bf 	bl	8003e54 <HAL_GetTick>
 800fad6:	4602      	mov	r2, r0
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	1ad3      	subs	r3, r2, r3
 800fadc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d901      	bls.n	800fae8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800fae4:	2303      	movs	r3, #3
 800fae6:	e0be      	b.n	800fc66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fae8:	4b1c      	ldr	r3, [pc, #112]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	00db      	lsls	r3, r3, #3
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d1eb      	bne.n	800fad2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f003 0302 	and.w	r3, r3, #2
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d010      	beq.n	800fb28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68da      	ldr	r2, [r3, #12]
 800fb0a:	4b14      	ldr	r3, [pc, #80]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fb0c:	699b      	ldr	r3, [r3, #24]
 800fb0e:	f003 030f 	and.w	r3, r3, #15
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d208      	bcs.n	800fb28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fb16:	4b11      	ldr	r3, [pc, #68]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fb18:	699b      	ldr	r3, [r3, #24]
 800fb1a:	f023 020f 	bic.w	r2, r3, #15
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	490e      	ldr	r1, [pc, #56]	@ (800fb5c <HAL_RCC_ClockConfig+0x244>)
 800fb24:	4313      	orrs	r3, r2
 800fb26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fb28:	4b0b      	ldr	r3, [pc, #44]	@ (800fb58 <HAL_RCC_ClockConfig+0x240>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f003 030f 	and.w	r3, r3, #15
 800fb30:	683a      	ldr	r2, [r7, #0]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d214      	bcs.n	800fb60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb36:	4b08      	ldr	r3, [pc, #32]	@ (800fb58 <HAL_RCC_ClockConfig+0x240>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f023 020f 	bic.w	r2, r3, #15
 800fb3e:	4906      	ldr	r1, [pc, #24]	@ (800fb58 <HAL_RCC_ClockConfig+0x240>)
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	4313      	orrs	r3, r2
 800fb44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb46:	4b04      	ldr	r3, [pc, #16]	@ (800fb58 <HAL_RCC_ClockConfig+0x240>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f003 030f 	and.w	r3, r3, #15
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d005      	beq.n	800fb60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800fb54:	2301      	movs	r3, #1
 800fb56:	e086      	b.n	800fc66 <HAL_RCC_ClockConfig+0x34e>
 800fb58:	52002000 	.word	0x52002000
 800fb5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f003 0304 	and.w	r3, r3, #4
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d010      	beq.n	800fb8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	691a      	ldr	r2, [r3, #16]
 800fb70:	4b3f      	ldr	r3, [pc, #252]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fb72:	699b      	ldr	r3, [r3, #24]
 800fb74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d208      	bcs.n	800fb8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fb7c:	4b3c      	ldr	r3, [pc, #240]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fb7e:	699b      	ldr	r3, [r3, #24]
 800fb80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	4939      	ldr	r1, [pc, #228]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f003 0308 	and.w	r3, r3, #8
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d010      	beq.n	800fbbc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	695a      	ldr	r2, [r3, #20]
 800fb9e:	4b34      	ldr	r3, [pc, #208]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fba0:	69db      	ldr	r3, [r3, #28]
 800fba2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d208      	bcs.n	800fbbc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fbaa:	4b31      	ldr	r3, [pc, #196]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fbac:	69db      	ldr	r3, [r3, #28]
 800fbae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	695b      	ldr	r3, [r3, #20]
 800fbb6:	492e      	ldr	r1, [pc, #184]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f003 0310 	and.w	r3, r3, #16
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d010      	beq.n	800fbea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	699a      	ldr	r2, [r3, #24]
 800fbcc:	4b28      	ldr	r3, [pc, #160]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fbce:	69db      	ldr	r3, [r3, #28]
 800fbd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d208      	bcs.n	800fbea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fbd8:	4b25      	ldr	r3, [pc, #148]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fbda:	69db      	ldr	r3, [r3, #28]
 800fbdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	699b      	ldr	r3, [r3, #24]
 800fbe4:	4922      	ldr	r1, [pc, #136]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f003 0320 	and.w	r3, r3, #32
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d010      	beq.n	800fc18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	69da      	ldr	r2, [r3, #28]
 800fbfa:	4b1d      	ldr	r3, [pc, #116]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fbfc:	6a1b      	ldr	r3, [r3, #32]
 800fbfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d208      	bcs.n	800fc18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fc06:	4b1a      	ldr	r3, [pc, #104]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fc08:	6a1b      	ldr	r3, [r3, #32]
 800fc0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	69db      	ldr	r3, [r3, #28]
 800fc12:	4917      	ldr	r1, [pc, #92]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fc14:	4313      	orrs	r3, r2
 800fc16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fc18:	f000 f834 	bl	800fc84 <HAL_RCC_GetSysClockFreq>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	4b14      	ldr	r3, [pc, #80]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fc20:	699b      	ldr	r3, [r3, #24]
 800fc22:	0a1b      	lsrs	r3, r3, #8
 800fc24:	f003 030f 	and.w	r3, r3, #15
 800fc28:	4912      	ldr	r1, [pc, #72]	@ (800fc74 <HAL_RCC_ClockConfig+0x35c>)
 800fc2a:	5ccb      	ldrb	r3, [r1, r3]
 800fc2c:	f003 031f 	and.w	r3, r3, #31
 800fc30:	fa22 f303 	lsr.w	r3, r2, r3
 800fc34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fc36:	4b0e      	ldr	r3, [pc, #56]	@ (800fc70 <HAL_RCC_ClockConfig+0x358>)
 800fc38:	699b      	ldr	r3, [r3, #24]
 800fc3a:	f003 030f 	and.w	r3, r3, #15
 800fc3e:	4a0d      	ldr	r2, [pc, #52]	@ (800fc74 <HAL_RCC_ClockConfig+0x35c>)
 800fc40:	5cd3      	ldrb	r3, [r2, r3]
 800fc42:	f003 031f 	and.w	r3, r3, #31
 800fc46:	693a      	ldr	r2, [r7, #16]
 800fc48:	fa22 f303 	lsr.w	r3, r2, r3
 800fc4c:	4a0a      	ldr	r2, [pc, #40]	@ (800fc78 <HAL_RCC_ClockConfig+0x360>)
 800fc4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fc50:	4a0a      	ldr	r2, [pc, #40]	@ (800fc7c <HAL_RCC_ClockConfig+0x364>)
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800fc56:	4b0a      	ldr	r3, [pc, #40]	@ (800fc80 <HAL_RCC_ClockConfig+0x368>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7f4 f8b0 	bl	8003dc0 <HAL_InitTick>
 800fc60:	4603      	mov	r3, r0
 800fc62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3718      	adds	r7, #24
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	58024400 	.word	0x58024400
 800fc74:	0801ec30 	.word	0x0801ec30
 800fc78:	24000244 	.word	0x24000244
 800fc7c:	24000240 	.word	0x24000240
 800fc80:	24000248 	.word	0x24000248

0800fc84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b089      	sub	sp, #36	@ 0x24
 800fc88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fc8a:	4bb3      	ldr	r3, [pc, #716]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fc92:	2b18      	cmp	r3, #24
 800fc94:	f200 8155 	bhi.w	800ff42 <HAL_RCC_GetSysClockFreq+0x2be>
 800fc98:	a201      	add	r2, pc, #4	@ (adr r2, 800fca0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800fc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc9e:	bf00      	nop
 800fca0:	0800fd05 	.word	0x0800fd05
 800fca4:	0800ff43 	.word	0x0800ff43
 800fca8:	0800ff43 	.word	0x0800ff43
 800fcac:	0800ff43 	.word	0x0800ff43
 800fcb0:	0800ff43 	.word	0x0800ff43
 800fcb4:	0800ff43 	.word	0x0800ff43
 800fcb8:	0800ff43 	.word	0x0800ff43
 800fcbc:	0800ff43 	.word	0x0800ff43
 800fcc0:	0800fd2b 	.word	0x0800fd2b
 800fcc4:	0800ff43 	.word	0x0800ff43
 800fcc8:	0800ff43 	.word	0x0800ff43
 800fccc:	0800ff43 	.word	0x0800ff43
 800fcd0:	0800ff43 	.word	0x0800ff43
 800fcd4:	0800ff43 	.word	0x0800ff43
 800fcd8:	0800ff43 	.word	0x0800ff43
 800fcdc:	0800ff43 	.word	0x0800ff43
 800fce0:	0800fd31 	.word	0x0800fd31
 800fce4:	0800ff43 	.word	0x0800ff43
 800fce8:	0800ff43 	.word	0x0800ff43
 800fcec:	0800ff43 	.word	0x0800ff43
 800fcf0:	0800ff43 	.word	0x0800ff43
 800fcf4:	0800ff43 	.word	0x0800ff43
 800fcf8:	0800ff43 	.word	0x0800ff43
 800fcfc:	0800ff43 	.word	0x0800ff43
 800fd00:	0800fd37 	.word	0x0800fd37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd04:	4b94      	ldr	r3, [pc, #592]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f003 0320 	and.w	r3, r3, #32
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d009      	beq.n	800fd24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd10:	4b91      	ldr	r3, [pc, #580]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	08db      	lsrs	r3, r3, #3
 800fd16:	f003 0303 	and.w	r3, r3, #3
 800fd1a:	4a90      	ldr	r2, [pc, #576]	@ (800ff5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fd1c:	fa22 f303 	lsr.w	r3, r2, r3
 800fd20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800fd22:	e111      	b.n	800ff48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fd24:	4b8d      	ldr	r3, [pc, #564]	@ (800ff5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fd26:	61bb      	str	r3, [r7, #24]
      break;
 800fd28:	e10e      	b.n	800ff48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800fd2a:	4b8d      	ldr	r3, [pc, #564]	@ (800ff60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fd2c:	61bb      	str	r3, [r7, #24]
      break;
 800fd2e:	e10b      	b.n	800ff48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800fd30:	4b8c      	ldr	r3, [pc, #560]	@ (800ff64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800fd32:	61bb      	str	r3, [r7, #24]
      break;
 800fd34:	e108      	b.n	800ff48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd36:	4b88      	ldr	r3, [pc, #544]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd3a:	f003 0303 	and.w	r3, r3, #3
 800fd3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800fd40:	4b85      	ldr	r3, [pc, #532]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd44:	091b      	lsrs	r3, r3, #4
 800fd46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fd4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fd4c:	4b82      	ldr	r3, [pc, #520]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd50:	f003 0301 	and.w	r3, r3, #1
 800fd54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fd56:	4b80      	ldr	r3, [pc, #512]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd5a:	08db      	lsrs	r3, r3, #3
 800fd5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd60:	68fa      	ldr	r2, [r7, #12]
 800fd62:	fb02 f303 	mul.w	r3, r2, r3
 800fd66:	ee07 3a90 	vmov	s15, r3
 800fd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f000 80e1 	beq.w	800ff3c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	f000 8083 	beq.w	800fe88 <HAL_RCC_GetSysClockFreq+0x204>
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	f200 80a1 	bhi.w	800fecc <HAL_RCC_GetSysClockFreq+0x248>
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d003      	beq.n	800fd98 <HAL_RCC_GetSysClockFreq+0x114>
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d056      	beq.n	800fe44 <HAL_RCC_GetSysClockFreq+0x1c0>
 800fd96:	e099      	b.n	800fecc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd98:	4b6f      	ldr	r3, [pc, #444]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f003 0320 	and.w	r3, r3, #32
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d02d      	beq.n	800fe00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fda4:	4b6c      	ldr	r3, [pc, #432]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	08db      	lsrs	r3, r3, #3
 800fdaa:	f003 0303 	and.w	r3, r3, #3
 800fdae:	4a6b      	ldr	r2, [pc, #428]	@ (800ff5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fdb0:	fa22 f303 	lsr.w	r3, r2, r3
 800fdb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	ee07 3a90 	vmov	s15, r3
 800fdbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	ee07 3a90 	vmov	s15, r3
 800fdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdce:	4b62      	ldr	r3, [pc, #392]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdd6:	ee07 3a90 	vmov	s15, r3
 800fdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdde:	ed97 6a02 	vldr	s12, [r7, #8]
 800fde2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800ff68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800fdfe:	e087      	b.n	800ff10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	ee07 3a90 	vmov	s15, r3
 800fe06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800ff6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800fe0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe12:	4b51      	ldr	r3, [pc, #324]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe1a:	ee07 3a90 	vmov	s15, r3
 800fe1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe22:	ed97 6a02 	vldr	s12, [r7, #8]
 800fe26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800ff68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fe2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fe42:	e065      	b.n	800ff10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	ee07 3a90 	vmov	s15, r3
 800fe4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800ff70 <HAL_RCC_GetSysClockFreq+0x2ec>
 800fe52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe56:	4b40      	ldr	r3, [pc, #256]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe5e:	ee07 3a90 	vmov	s15, r3
 800fe62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe66:	ed97 6a02 	vldr	s12, [r7, #8]
 800fe6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ff68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fe6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fe86:	e043      	b.n	800ff10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	ee07 3a90 	vmov	s15, r3
 800fe8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ff74 <HAL_RCC_GetSysClockFreq+0x2f0>
 800fe96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fea2:	ee07 3a90 	vmov	s15, r3
 800fea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800feae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800ff68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800feb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800febe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800feca:	e021      	b.n	800ff10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	ee07 3a90 	vmov	s15, r3
 800fed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fed6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ff70 <HAL_RCC_GetSysClockFreq+0x2ec>
 800feda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fede:	4b1e      	ldr	r3, [pc, #120]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fee6:	ee07 3a90 	vmov	s15, r3
 800feea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feee:	ed97 6a02 	vldr	s12, [r7, #8]
 800fef2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800ff68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fefa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fefe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ff0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ff10:	4b11      	ldr	r3, [pc, #68]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff14:	0a5b      	lsrs	r3, r3, #9
 800ff16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff1a:	3301      	adds	r3, #1
 800ff1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	ee07 3a90 	vmov	s15, r3
 800ff24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ff28:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff34:	ee17 3a90 	vmov	r3, s15
 800ff38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ff3a:	e005      	b.n	800ff48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	61bb      	str	r3, [r7, #24]
      break;
 800ff40:	e002      	b.n	800ff48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ff42:	4b07      	ldr	r3, [pc, #28]	@ (800ff60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ff44:	61bb      	str	r3, [r7, #24]
      break;
 800ff46:	bf00      	nop
  }

  return sysclockfreq;
 800ff48:	69bb      	ldr	r3, [r7, #24]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3724      	adds	r7, #36	@ 0x24
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop
 800ff58:	58024400 	.word	0x58024400
 800ff5c:	03d09000 	.word	0x03d09000
 800ff60:	003d0900 	.word	0x003d0900
 800ff64:	017d7840 	.word	0x017d7840
 800ff68:	46000000 	.word	0x46000000
 800ff6c:	4c742400 	.word	0x4c742400
 800ff70:	4a742400 	.word	0x4a742400
 800ff74:	4bbebc20 	.word	0x4bbebc20

0800ff78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ff7e:	f7ff fe81 	bl	800fc84 <HAL_RCC_GetSysClockFreq>
 800ff82:	4602      	mov	r2, r0
 800ff84:	4b10      	ldr	r3, [pc, #64]	@ (800ffc8 <HAL_RCC_GetHCLKFreq+0x50>)
 800ff86:	699b      	ldr	r3, [r3, #24]
 800ff88:	0a1b      	lsrs	r3, r3, #8
 800ff8a:	f003 030f 	and.w	r3, r3, #15
 800ff8e:	490f      	ldr	r1, [pc, #60]	@ (800ffcc <HAL_RCC_GetHCLKFreq+0x54>)
 800ff90:	5ccb      	ldrb	r3, [r1, r3]
 800ff92:	f003 031f 	and.w	r3, r3, #31
 800ff96:	fa22 f303 	lsr.w	r3, r2, r3
 800ff9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ff9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ffc8 <HAL_RCC_GetHCLKFreq+0x50>)
 800ff9e:	699b      	ldr	r3, [r3, #24]
 800ffa0:	f003 030f 	and.w	r3, r3, #15
 800ffa4:	4a09      	ldr	r2, [pc, #36]	@ (800ffcc <HAL_RCC_GetHCLKFreq+0x54>)
 800ffa6:	5cd3      	ldrb	r3, [r2, r3]
 800ffa8:	f003 031f 	and.w	r3, r3, #31
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	fa22 f303 	lsr.w	r3, r2, r3
 800ffb2:	4a07      	ldr	r2, [pc, #28]	@ (800ffd0 <HAL_RCC_GetHCLKFreq+0x58>)
 800ffb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ffb6:	4a07      	ldr	r2, [pc, #28]	@ (800ffd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ffbc:	4b04      	ldr	r3, [pc, #16]	@ (800ffd0 <HAL_RCC_GetHCLKFreq+0x58>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	58024400 	.word	0x58024400
 800ffcc:	0801ec30 	.word	0x0801ec30
 800ffd0:	24000244 	.word	0x24000244
 800ffd4:	24000240 	.word	0x24000240

0800ffd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ffdc:	f7ff ffcc 	bl	800ff78 <HAL_RCC_GetHCLKFreq>
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	4b06      	ldr	r3, [pc, #24]	@ (800fffc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ffe4:	69db      	ldr	r3, [r3, #28]
 800ffe6:	091b      	lsrs	r3, r3, #4
 800ffe8:	f003 0307 	and.w	r3, r3, #7
 800ffec:	4904      	ldr	r1, [pc, #16]	@ (8010000 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ffee:	5ccb      	ldrb	r3, [r1, r3]
 800fff0:	f003 031f 	and.w	r3, r3, #31
 800fff4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	58024400 	.word	0x58024400
 8010000:	0801ec30 	.word	0x0801ec30

08010004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010008:	f7ff ffb6 	bl	800ff78 <HAL_RCC_GetHCLKFreq>
 801000c:	4602      	mov	r2, r0
 801000e:	4b06      	ldr	r3, [pc, #24]	@ (8010028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010010:	69db      	ldr	r3, [r3, #28]
 8010012:	0a1b      	lsrs	r3, r3, #8
 8010014:	f003 0307 	and.w	r3, r3, #7
 8010018:	4904      	ldr	r1, [pc, #16]	@ (801002c <HAL_RCC_GetPCLK2Freq+0x28>)
 801001a:	5ccb      	ldrb	r3, [r1, r3]
 801001c:	f003 031f 	and.w	r3, r3, #31
 8010020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8010024:	4618      	mov	r0, r3
 8010026:	bd80      	pop	{r7, pc}
 8010028:	58024400 	.word	0x58024400
 801002c:	0801ec30 	.word	0x0801ec30

08010030 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010034:	b0ca      	sub	sp, #296	@ 0x128
 8010036:	af00      	add	r7, sp, #0
 8010038:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801003c:	2300      	movs	r3, #0
 801003e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010042:	2300      	movs	r3, #0
 8010044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801004c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010050:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8010054:	2500      	movs	r5, #0
 8010056:	ea54 0305 	orrs.w	r3, r4, r5
 801005a:	d049      	beq.n	80100f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801005c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010062:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010066:	d02f      	beq.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8010068:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801006c:	d828      	bhi.n	80100c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801006e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010072:	d01a      	beq.n	80100aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010078:	d822      	bhi.n	80100c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801007a:	2b00      	cmp	r3, #0
 801007c:	d003      	beq.n	8010086 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801007e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010082:	d007      	beq.n	8010094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010084:	e01c      	b.n	80100c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010086:	4bb8      	ldr	r3, [pc, #736]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801008a:	4ab7      	ldr	r2, [pc, #732]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801008c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010092:	e01a      	b.n	80100ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010098:	3308      	adds	r3, #8
 801009a:	2102      	movs	r1, #2
 801009c:	4618      	mov	r0, r3
 801009e:	f002 fb61 	bl	8012764 <RCCEx_PLL2_Config>
 80100a2:	4603      	mov	r3, r0
 80100a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80100a8:	e00f      	b.n	80100ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80100aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100ae:	3328      	adds	r3, #40	@ 0x28
 80100b0:	2102      	movs	r1, #2
 80100b2:	4618      	mov	r0, r3
 80100b4:	f002 fc08 	bl	80128c8 <RCCEx_PLL3_Config>
 80100b8:	4603      	mov	r3, r0
 80100ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80100be:	e004      	b.n	80100ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80100c0:	2301      	movs	r3, #1
 80100c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80100c6:	e000      	b.n	80100ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80100c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d10a      	bne.n	80100e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80100d2:	4ba5      	ldr	r3, [pc, #660]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80100d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80100da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80100e0:	4aa1      	ldr	r2, [pc, #644]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80100e2:	430b      	orrs	r3, r1
 80100e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80100e6:	e003      	b.n	80100f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80100ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80100f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80100fc:	f04f 0900 	mov.w	r9, #0
 8010100:	ea58 0309 	orrs.w	r3, r8, r9
 8010104:	d047      	beq.n	8010196 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8010106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801010a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801010c:	2b04      	cmp	r3, #4
 801010e:	d82a      	bhi.n	8010166 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8010110:	a201      	add	r2, pc, #4	@ (adr r2, 8010118 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8010112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010116:	bf00      	nop
 8010118:	0801012d 	.word	0x0801012d
 801011c:	0801013b 	.word	0x0801013b
 8010120:	08010151 	.word	0x08010151
 8010124:	0801016f 	.word	0x0801016f
 8010128:	0801016f 	.word	0x0801016f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801012c:	4b8e      	ldr	r3, [pc, #568]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801012e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010130:	4a8d      	ldr	r2, [pc, #564]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010138:	e01a      	b.n	8010170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801013a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801013e:	3308      	adds	r3, #8
 8010140:	2100      	movs	r1, #0
 8010142:	4618      	mov	r0, r3
 8010144:	f002 fb0e 	bl	8012764 <RCCEx_PLL2_Config>
 8010148:	4603      	mov	r3, r0
 801014a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801014e:	e00f      	b.n	8010170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010154:	3328      	adds	r3, #40	@ 0x28
 8010156:	2100      	movs	r1, #0
 8010158:	4618      	mov	r0, r3
 801015a:	f002 fbb5 	bl	80128c8 <RCCEx_PLL3_Config>
 801015e:	4603      	mov	r3, r0
 8010160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010164:	e004      	b.n	8010170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010166:	2301      	movs	r3, #1
 8010168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801016c:	e000      	b.n	8010170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801016e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010174:	2b00      	cmp	r3, #0
 8010176:	d10a      	bne.n	801018e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010178:	4b7b      	ldr	r3, [pc, #492]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801017a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801017c:	f023 0107 	bic.w	r1, r3, #7
 8010180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010186:	4a78      	ldr	r2, [pc, #480]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010188:	430b      	orrs	r3, r1
 801018a:	6513      	str	r3, [r2, #80]	@ 0x50
 801018c:	e003      	b.n	8010196 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801018e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801019a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80101a2:	f04f 0b00 	mov.w	fp, #0
 80101a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80101aa:	d04c      	beq.n	8010246 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80101ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101b6:	d030      	beq.n	801021a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80101b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101bc:	d829      	bhi.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80101be:	2bc0      	cmp	r3, #192	@ 0xc0
 80101c0:	d02d      	beq.n	801021e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80101c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80101c4:	d825      	bhi.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80101c6:	2b80      	cmp	r3, #128	@ 0x80
 80101c8:	d018      	beq.n	80101fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80101ca:	2b80      	cmp	r3, #128	@ 0x80
 80101cc:	d821      	bhi.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d002      	beq.n	80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80101d2:	2b40      	cmp	r3, #64	@ 0x40
 80101d4:	d007      	beq.n	80101e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80101d6:	e01c      	b.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101d8:	4b63      	ldr	r3, [pc, #396]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80101da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101dc:	4a62      	ldr	r2, [pc, #392]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80101de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80101e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80101e4:	e01c      	b.n	8010220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80101e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101ea:	3308      	adds	r3, #8
 80101ec:	2100      	movs	r1, #0
 80101ee:	4618      	mov	r0, r3
 80101f0:	f002 fab8 	bl	8012764 <RCCEx_PLL2_Config>
 80101f4:	4603      	mov	r3, r0
 80101f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80101fa:	e011      	b.n	8010220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80101fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010200:	3328      	adds	r3, #40	@ 0x28
 8010202:	2100      	movs	r1, #0
 8010204:	4618      	mov	r0, r3
 8010206:	f002 fb5f 	bl	80128c8 <RCCEx_PLL3_Config>
 801020a:	4603      	mov	r3, r0
 801020c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010210:	e006      	b.n	8010220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010212:	2301      	movs	r3, #1
 8010214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010218:	e002      	b.n	8010220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801021a:	bf00      	nop
 801021c:	e000      	b.n	8010220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801021e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010224:	2b00      	cmp	r3, #0
 8010226:	d10a      	bne.n	801023e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8010228:	4b4f      	ldr	r3, [pc, #316]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801022a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801022c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8010230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010236:	4a4c      	ldr	r2, [pc, #304]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010238:	430b      	orrs	r3, r1
 801023a:	6513      	str	r3, [r2, #80]	@ 0x50
 801023c:	e003      	b.n	8010246 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801023e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8010252:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8010256:	2300      	movs	r3, #0
 8010258:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801025c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8010260:	460b      	mov	r3, r1
 8010262:	4313      	orrs	r3, r2
 8010264:	d053      	beq.n	801030e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8010266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801026a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801026e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010272:	d035      	beq.n	80102e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8010274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010278:	d82e      	bhi.n	80102d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801027a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801027e:	d031      	beq.n	80102e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8010280:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010284:	d828      	bhi.n	80102d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8010286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801028a:	d01a      	beq.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801028c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010290:	d822      	bhi.n	80102d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8010292:	2b00      	cmp	r3, #0
 8010294:	d003      	beq.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8010296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801029a:	d007      	beq.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801029c:	e01c      	b.n	80102d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801029e:	4b32      	ldr	r3, [pc, #200]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80102a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102a2:	4a31      	ldr	r2, [pc, #196]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80102a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80102a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80102aa:	e01c      	b.n	80102e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80102ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102b0:	3308      	adds	r3, #8
 80102b2:	2100      	movs	r1, #0
 80102b4:	4618      	mov	r0, r3
 80102b6:	f002 fa55 	bl	8012764 <RCCEx_PLL2_Config>
 80102ba:	4603      	mov	r3, r0
 80102bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80102c0:	e011      	b.n	80102e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80102c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102c6:	3328      	adds	r3, #40	@ 0x28
 80102c8:	2100      	movs	r1, #0
 80102ca:	4618      	mov	r0, r3
 80102cc:	f002 fafc 	bl	80128c8 <RCCEx_PLL3_Config>
 80102d0:	4603      	mov	r3, r0
 80102d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80102d6:	e006      	b.n	80102e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80102d8:	2301      	movs	r3, #1
 80102da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80102de:	e002      	b.n	80102e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80102e0:	bf00      	nop
 80102e2:	e000      	b.n	80102e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80102e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80102e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10b      	bne.n	8010306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80102ee:	4b1e      	ldr	r3, [pc, #120]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80102f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80102f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80102fe:	4a1a      	ldr	r2, [pc, #104]	@ (8010368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010300:	430b      	orrs	r3, r1
 8010302:	6593      	str	r3, [r2, #88]	@ 0x58
 8010304:	e003      	b.n	801030e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801030a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801030e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010316:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801031a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801031e:	2300      	movs	r3, #0
 8010320:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010324:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8010328:	460b      	mov	r3, r1
 801032a:	4313      	orrs	r3, r2
 801032c:	d056      	beq.n	80103dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801032e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801033a:	d038      	beq.n	80103ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801033c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010340:	d831      	bhi.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010342:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010346:	d034      	beq.n	80103b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8010348:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801034c:	d82b      	bhi.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801034e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010352:	d01d      	beq.n	8010390 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8010354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010358:	d825      	bhi.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801035a:	2b00      	cmp	r3, #0
 801035c:	d006      	beq.n	801036c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801035e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010362:	d00a      	beq.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8010364:	e01f      	b.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010366:	bf00      	nop
 8010368:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801036c:	4ba2      	ldr	r3, [pc, #648]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801036e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010370:	4aa1      	ldr	r2, [pc, #644]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010378:	e01c      	b.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801037a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801037e:	3308      	adds	r3, #8
 8010380:	2100      	movs	r1, #0
 8010382:	4618      	mov	r0, r3
 8010384:	f002 f9ee 	bl	8012764 <RCCEx_PLL2_Config>
 8010388:	4603      	mov	r3, r0
 801038a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801038e:	e011      	b.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010394:	3328      	adds	r3, #40	@ 0x28
 8010396:	2100      	movs	r1, #0
 8010398:	4618      	mov	r0, r3
 801039a:	f002 fa95 	bl	80128c8 <RCCEx_PLL3_Config>
 801039e:	4603      	mov	r3, r0
 80103a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80103a4:	e006      	b.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80103a6:	2301      	movs	r3, #1
 80103a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80103ac:	e002      	b.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80103ae:	bf00      	nop
 80103b0:	e000      	b.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80103b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80103b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d10b      	bne.n	80103d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80103bc:	4b8e      	ldr	r3, [pc, #568]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80103be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80103c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80103cc:	4a8a      	ldr	r2, [pc, #552]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80103ce:	430b      	orrs	r3, r1
 80103d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80103d2:	e003      	b.n	80103dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80103d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80103dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80103e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80103ec:	2300      	movs	r3, #0
 80103ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80103f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80103f6:	460b      	mov	r3, r1
 80103f8:	4313      	orrs	r3, r2
 80103fa:	d03a      	beq.n	8010472 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80103fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010402:	2b30      	cmp	r3, #48	@ 0x30
 8010404:	d01f      	beq.n	8010446 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8010406:	2b30      	cmp	r3, #48	@ 0x30
 8010408:	d819      	bhi.n	801043e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801040a:	2b20      	cmp	r3, #32
 801040c:	d00c      	beq.n	8010428 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801040e:	2b20      	cmp	r3, #32
 8010410:	d815      	bhi.n	801043e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010412:	2b00      	cmp	r3, #0
 8010414:	d019      	beq.n	801044a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8010416:	2b10      	cmp	r3, #16
 8010418:	d111      	bne.n	801043e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801041a:	4b77      	ldr	r3, [pc, #476]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801041c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801041e:	4a76      	ldr	r2, [pc, #472]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010426:	e011      	b.n	801044c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801042c:	3308      	adds	r3, #8
 801042e:	2102      	movs	r1, #2
 8010430:	4618      	mov	r0, r3
 8010432:	f002 f997 	bl	8012764 <RCCEx_PLL2_Config>
 8010436:	4603      	mov	r3, r0
 8010438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801043c:	e006      	b.n	801044c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801043e:	2301      	movs	r3, #1
 8010440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010444:	e002      	b.n	801044c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010446:	bf00      	nop
 8010448:	e000      	b.n	801044c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801044a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801044c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010450:	2b00      	cmp	r3, #0
 8010452:	d10a      	bne.n	801046a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010454:	4b68      	ldr	r3, [pc, #416]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010458:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801045c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010462:	4a65      	ldr	r2, [pc, #404]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010464:	430b      	orrs	r3, r1
 8010466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010468:	e003      	b.n	8010472 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801046a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801046e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801047e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8010482:	2300      	movs	r3, #0
 8010484:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010488:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801048c:	460b      	mov	r3, r1
 801048e:	4313      	orrs	r3, r2
 8010490:	d051      	beq.n	8010536 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8010492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801049c:	d035      	beq.n	801050a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801049e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80104a2:	d82e      	bhi.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80104a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80104a8:	d031      	beq.n	801050e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80104aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80104ae:	d828      	bhi.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80104b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80104b4:	d01a      	beq.n	80104ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80104b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80104ba:	d822      	bhi.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d003      	beq.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80104c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104c4:	d007      	beq.n	80104d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80104c6:	e01c      	b.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80104c8:	4b4b      	ldr	r3, [pc, #300]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80104ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104cc:	4a4a      	ldr	r2, [pc, #296]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80104ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80104d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80104d4:	e01c      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80104d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104da:	3308      	adds	r3, #8
 80104dc:	2100      	movs	r1, #0
 80104de:	4618      	mov	r0, r3
 80104e0:	f002 f940 	bl	8012764 <RCCEx_PLL2_Config>
 80104e4:	4603      	mov	r3, r0
 80104e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80104ea:	e011      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80104ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104f0:	3328      	adds	r3, #40	@ 0x28
 80104f2:	2100      	movs	r1, #0
 80104f4:	4618      	mov	r0, r3
 80104f6:	f002 f9e7 	bl	80128c8 <RCCEx_PLL3_Config>
 80104fa:	4603      	mov	r3, r0
 80104fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010500:	e006      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010502:	2301      	movs	r3, #1
 8010504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010508:	e002      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801050a:	bf00      	nop
 801050c:	e000      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801050e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10a      	bne.n	801052e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010518:	4b37      	ldr	r3, [pc, #220]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801051a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801051c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8010520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010526:	4a34      	ldr	r2, [pc, #208]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010528:	430b      	orrs	r3, r1
 801052a:	6513      	str	r3, [r2, #80]	@ 0x50
 801052c:	e003      	b.n	8010536 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801052e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8010542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010546:	2300      	movs	r3, #0
 8010548:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801054c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8010550:	460b      	mov	r3, r1
 8010552:	4313      	orrs	r3, r2
 8010554:	d056      	beq.n	8010604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8010556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801055a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801055c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010560:	d033      	beq.n	80105ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8010562:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010566:	d82c      	bhi.n	80105c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010568:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801056c:	d02f      	beq.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801056e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010572:	d826      	bhi.n	80105c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010574:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010578:	d02b      	beq.n	80105d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801057a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801057e:	d820      	bhi.n	80105c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010584:	d012      	beq.n	80105ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8010586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801058a:	d81a      	bhi.n	80105c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801058c:	2b00      	cmp	r3, #0
 801058e:	d022      	beq.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8010590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010594:	d115      	bne.n	80105c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801059a:	3308      	adds	r3, #8
 801059c:	2101      	movs	r1, #1
 801059e:	4618      	mov	r0, r3
 80105a0:	f002 f8e0 	bl	8012764 <RCCEx_PLL2_Config>
 80105a4:	4603      	mov	r3, r0
 80105a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80105aa:	e015      	b.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80105ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105b0:	3328      	adds	r3, #40	@ 0x28
 80105b2:	2101      	movs	r1, #1
 80105b4:	4618      	mov	r0, r3
 80105b6:	f002 f987 	bl	80128c8 <RCCEx_PLL3_Config>
 80105ba:	4603      	mov	r3, r0
 80105bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80105c0:	e00a      	b.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80105c2:	2301      	movs	r3, #1
 80105c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80105c8:	e006      	b.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80105ca:	bf00      	nop
 80105cc:	e004      	b.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80105ce:	bf00      	nop
 80105d0:	e002      	b.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80105d2:	bf00      	nop
 80105d4:	e000      	b.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80105d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80105d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10d      	bne.n	80105fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80105e0:	4b05      	ldr	r3, [pc, #20]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80105e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80105e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105ee:	4a02      	ldr	r2, [pc, #8]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80105f0:	430b      	orrs	r3, r1
 80105f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80105f4:	e006      	b.n	8010604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80105f6:	bf00      	nop
 80105f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8010610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010614:	2300      	movs	r3, #0
 8010616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801061a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801061e:	460b      	mov	r3, r1
 8010620:	4313      	orrs	r3, r2
 8010622:	d055      	beq.n	80106d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8010624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801062c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010630:	d033      	beq.n	801069a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8010632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010636:	d82c      	bhi.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801063c:	d02f      	beq.n	801069e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801063e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010642:	d826      	bhi.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010644:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010648:	d02b      	beq.n	80106a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801064a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801064e:	d820      	bhi.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010654:	d012      	beq.n	801067c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8010656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801065a:	d81a      	bhi.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801065c:	2b00      	cmp	r3, #0
 801065e:	d022      	beq.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8010660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010664:	d115      	bne.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801066a:	3308      	adds	r3, #8
 801066c:	2101      	movs	r1, #1
 801066e:	4618      	mov	r0, r3
 8010670:	f002 f878 	bl	8012764 <RCCEx_PLL2_Config>
 8010674:	4603      	mov	r3, r0
 8010676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801067a:	e015      	b.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801067c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010680:	3328      	adds	r3, #40	@ 0x28
 8010682:	2101      	movs	r1, #1
 8010684:	4618      	mov	r0, r3
 8010686:	f002 f91f 	bl	80128c8 <RCCEx_PLL3_Config>
 801068a:	4603      	mov	r3, r0
 801068c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010690:	e00a      	b.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8010692:	2301      	movs	r3, #1
 8010694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010698:	e006      	b.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801069a:	bf00      	nop
 801069c:	e004      	b.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801069e:	bf00      	nop
 80106a0:	e002      	b.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80106a2:	bf00      	nop
 80106a4:	e000      	b.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80106a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80106a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d10b      	bne.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80106b0:	4ba3      	ldr	r3, [pc, #652]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80106b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80106b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80106c0:	4a9f      	ldr	r2, [pc, #636]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80106c2:	430b      	orrs	r3, r1
 80106c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80106c6:	e003      	b.n	80106d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80106cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80106d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80106dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80106e0:	2300      	movs	r3, #0
 80106e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80106e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80106ea:	460b      	mov	r3, r1
 80106ec:	4313      	orrs	r3, r2
 80106ee:	d037      	beq.n	8010760 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80106f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80106fa:	d00e      	beq.n	801071a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80106fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010700:	d816      	bhi.n	8010730 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8010702:	2b00      	cmp	r3, #0
 8010704:	d018      	beq.n	8010738 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8010706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801070a:	d111      	bne.n	8010730 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801070c:	4b8c      	ldr	r3, [pc, #560]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801070e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010710:	4a8b      	ldr	r2, [pc, #556]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010718:	e00f      	b.n	801073a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801071a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801071e:	3308      	adds	r3, #8
 8010720:	2101      	movs	r1, #1
 8010722:	4618      	mov	r0, r3
 8010724:	f002 f81e 	bl	8012764 <RCCEx_PLL2_Config>
 8010728:	4603      	mov	r3, r0
 801072a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801072e:	e004      	b.n	801073a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010730:	2301      	movs	r3, #1
 8010732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010736:	e000      	b.n	801073a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8010738:	bf00      	nop
    }

    if (ret == HAL_OK)
 801073a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801073e:	2b00      	cmp	r3, #0
 8010740:	d10a      	bne.n	8010758 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010742:	4b7f      	ldr	r3, [pc, #508]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010746:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801074a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801074e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010750:	4a7b      	ldr	r2, [pc, #492]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010752:	430b      	orrs	r3, r1
 8010754:	6513      	str	r3, [r2, #80]	@ 0x50
 8010756:	e003      	b.n	8010760 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801075c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010768:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801076c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010770:	2300      	movs	r3, #0
 8010772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010776:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801077a:	460b      	mov	r3, r1
 801077c:	4313      	orrs	r3, r2
 801077e:	d039      	beq.n	80107f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8010780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010786:	2b03      	cmp	r3, #3
 8010788:	d81c      	bhi.n	80107c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801078a:	a201      	add	r2, pc, #4	@ (adr r2, 8010790 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801078c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010790:	080107cd 	.word	0x080107cd
 8010794:	080107a1 	.word	0x080107a1
 8010798:	080107af 	.word	0x080107af
 801079c:	080107cd 	.word	0x080107cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107a0:	4b67      	ldr	r3, [pc, #412]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80107a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107a4:	4a66      	ldr	r2, [pc, #408]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80107a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80107aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80107ac:	e00f      	b.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80107ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107b2:	3308      	adds	r3, #8
 80107b4:	2102      	movs	r1, #2
 80107b6:	4618      	mov	r0, r3
 80107b8:	f001 ffd4 	bl	8012764 <RCCEx_PLL2_Config>
 80107bc:	4603      	mov	r3, r0
 80107be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80107c2:	e004      	b.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80107c4:	2301      	movs	r3, #1
 80107c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80107ca:	e000      	b.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80107cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80107ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d10a      	bne.n	80107ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80107d6:	4b5a      	ldr	r3, [pc, #360]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80107d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107da:	f023 0103 	bic.w	r1, r3, #3
 80107de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80107e4:	4a56      	ldr	r2, [pc, #344]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80107e6:	430b      	orrs	r3, r1
 80107e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80107ea:	e003      	b.n	80107f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80107f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80107f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8010800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010804:	2300      	movs	r3, #0
 8010806:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801080a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801080e:	460b      	mov	r3, r1
 8010810:	4313      	orrs	r3, r2
 8010812:	f000 809f 	beq.w	8010954 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010816:	4b4b      	ldr	r3, [pc, #300]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	4a4a      	ldr	r2, [pc, #296]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801081c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010822:	f7f3 fb17 	bl	8003e54 <HAL_GetTick>
 8010826:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801082a:	e00b      	b.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801082c:	f7f3 fb12 	bl	8003e54 <HAL_GetTick>
 8010830:	4602      	mov	r2, r0
 8010832:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	2b64      	cmp	r3, #100	@ 0x64
 801083a:	d903      	bls.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801083c:	2303      	movs	r3, #3
 801083e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010842:	e005      	b.n	8010850 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010844:	4b3f      	ldr	r3, [pc, #252]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801084c:	2b00      	cmp	r3, #0
 801084e:	d0ed      	beq.n	801082c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8010850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010854:	2b00      	cmp	r3, #0
 8010856:	d179      	bne.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010858:	4b39      	ldr	r3, [pc, #228]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801085a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801085c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010860:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010864:	4053      	eors	r3, r2
 8010866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801086a:	2b00      	cmp	r3, #0
 801086c:	d015      	beq.n	801089a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801086e:	4b34      	ldr	r3, [pc, #208]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010876:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801087a:	4b31      	ldr	r3, [pc, #196]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801087c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801087e:	4a30      	ldr	r2, [pc, #192]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010884:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010886:	4b2e      	ldr	r3, [pc, #184]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801088a:	4a2d      	ldr	r2, [pc, #180]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801088c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010890:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8010892:	4a2b      	ldr	r2, [pc, #172]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010894:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010898:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801089a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801089e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80108a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80108a6:	d118      	bne.n	80108da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108a8:	f7f3 fad4 	bl	8003e54 <HAL_GetTick>
 80108ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80108b0:	e00d      	b.n	80108ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80108b2:	f7f3 facf 	bl	8003e54 <HAL_GetTick>
 80108b6:	4602      	mov	r2, r0
 80108b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80108bc:	1ad2      	subs	r2, r2, r3
 80108be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d903      	bls.n	80108ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80108c6:	2303      	movs	r3, #3
 80108c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80108cc:	e005      	b.n	80108da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80108ce:	4b1c      	ldr	r3, [pc, #112]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108d2:	f003 0302 	and.w	r3, r3, #2
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d0eb      	beq.n	80108b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80108da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d129      	bne.n	8010936 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80108e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80108ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80108ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80108f2:	d10e      	bne.n	8010912 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80108f4:	4b12      	ldr	r3, [pc, #72]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80108fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010904:	091a      	lsrs	r2, r3, #4
 8010906:	4b10      	ldr	r3, [pc, #64]	@ (8010948 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8010908:	4013      	ands	r3, r2
 801090a:	4a0d      	ldr	r2, [pc, #52]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801090c:	430b      	orrs	r3, r1
 801090e:	6113      	str	r3, [r2, #16]
 8010910:	e005      	b.n	801091e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8010912:	4b0b      	ldr	r3, [pc, #44]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010914:	691b      	ldr	r3, [r3, #16]
 8010916:	4a0a      	ldr	r2, [pc, #40]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010918:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801091c:	6113      	str	r3, [r2, #16]
 801091e:	4b08      	ldr	r3, [pc, #32]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010920:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801092a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801092e:	4a04      	ldr	r2, [pc, #16]	@ (8010940 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010930:	430b      	orrs	r3, r1
 8010932:	6713      	str	r3, [r2, #112]	@ 0x70
 8010934:	e00e      	b.n	8010954 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801093a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801093e:	e009      	b.n	8010954 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8010940:	58024400 	.word	0x58024400
 8010944:	58024800 	.word	0x58024800
 8010948:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801094c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095c:	f002 0301 	and.w	r3, r2, #1
 8010960:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010964:	2300      	movs	r3, #0
 8010966:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801096a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801096e:	460b      	mov	r3, r1
 8010970:	4313      	orrs	r3, r2
 8010972:	f000 8089 	beq.w	8010a88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8010976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801097a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801097c:	2b28      	cmp	r3, #40	@ 0x28
 801097e:	d86b      	bhi.n	8010a58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8010980:	a201      	add	r2, pc, #4	@ (adr r2, 8010988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8010982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010986:	bf00      	nop
 8010988:	08010a61 	.word	0x08010a61
 801098c:	08010a59 	.word	0x08010a59
 8010990:	08010a59 	.word	0x08010a59
 8010994:	08010a59 	.word	0x08010a59
 8010998:	08010a59 	.word	0x08010a59
 801099c:	08010a59 	.word	0x08010a59
 80109a0:	08010a59 	.word	0x08010a59
 80109a4:	08010a59 	.word	0x08010a59
 80109a8:	08010a2d 	.word	0x08010a2d
 80109ac:	08010a59 	.word	0x08010a59
 80109b0:	08010a59 	.word	0x08010a59
 80109b4:	08010a59 	.word	0x08010a59
 80109b8:	08010a59 	.word	0x08010a59
 80109bc:	08010a59 	.word	0x08010a59
 80109c0:	08010a59 	.word	0x08010a59
 80109c4:	08010a59 	.word	0x08010a59
 80109c8:	08010a43 	.word	0x08010a43
 80109cc:	08010a59 	.word	0x08010a59
 80109d0:	08010a59 	.word	0x08010a59
 80109d4:	08010a59 	.word	0x08010a59
 80109d8:	08010a59 	.word	0x08010a59
 80109dc:	08010a59 	.word	0x08010a59
 80109e0:	08010a59 	.word	0x08010a59
 80109e4:	08010a59 	.word	0x08010a59
 80109e8:	08010a61 	.word	0x08010a61
 80109ec:	08010a59 	.word	0x08010a59
 80109f0:	08010a59 	.word	0x08010a59
 80109f4:	08010a59 	.word	0x08010a59
 80109f8:	08010a59 	.word	0x08010a59
 80109fc:	08010a59 	.word	0x08010a59
 8010a00:	08010a59 	.word	0x08010a59
 8010a04:	08010a59 	.word	0x08010a59
 8010a08:	08010a61 	.word	0x08010a61
 8010a0c:	08010a59 	.word	0x08010a59
 8010a10:	08010a59 	.word	0x08010a59
 8010a14:	08010a59 	.word	0x08010a59
 8010a18:	08010a59 	.word	0x08010a59
 8010a1c:	08010a59 	.word	0x08010a59
 8010a20:	08010a59 	.word	0x08010a59
 8010a24:	08010a59 	.word	0x08010a59
 8010a28:	08010a61 	.word	0x08010a61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a30:	3308      	adds	r3, #8
 8010a32:	2101      	movs	r1, #1
 8010a34:	4618      	mov	r0, r3
 8010a36:	f001 fe95 	bl	8012764 <RCCEx_PLL2_Config>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010a40:	e00f      	b.n	8010a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a46:	3328      	adds	r3, #40	@ 0x28
 8010a48:	2101      	movs	r1, #1
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f001 ff3c 	bl	80128c8 <RCCEx_PLL3_Config>
 8010a50:	4603      	mov	r3, r0
 8010a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010a56:	e004      	b.n	8010a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010a5e:	e000      	b.n	8010a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8010a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d10a      	bne.n	8010a80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010a6a:	4bbf      	ldr	r3, [pc, #764]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8010a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a78:	4abb      	ldr	r2, [pc, #748]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010a7a:	430b      	orrs	r3, r1
 8010a7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8010a7e:	e003      	b.n	8010a88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	f002 0302 	and.w	r3, r2, #2
 8010a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010a9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	d041      	beq.n	8010b2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010aae:	2b05      	cmp	r3, #5
 8010ab0:	d824      	bhi.n	8010afc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8010ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8010ab8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8010ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab8:	08010b05 	.word	0x08010b05
 8010abc:	08010ad1 	.word	0x08010ad1
 8010ac0:	08010ae7 	.word	0x08010ae7
 8010ac4:	08010b05 	.word	0x08010b05
 8010ac8:	08010b05 	.word	0x08010b05
 8010acc:	08010b05 	.word	0x08010b05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ad4:	3308      	adds	r3, #8
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f001 fe43 	bl	8012764 <RCCEx_PLL2_Config>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010ae4:	e00f      	b.n	8010b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010aea:	3328      	adds	r3, #40	@ 0x28
 8010aec:	2101      	movs	r1, #1
 8010aee:	4618      	mov	r0, r3
 8010af0:	f001 feea 	bl	80128c8 <RCCEx_PLL3_Config>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010afa:	e004      	b.n	8010b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010afc:	2301      	movs	r3, #1
 8010afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010b02:	e000      	b.n	8010b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8010b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d10a      	bne.n	8010b24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010b0e:	4b96      	ldr	r3, [pc, #600]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b12:	f023 0107 	bic.w	r1, r3, #7
 8010b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b1c:	4a92      	ldr	r2, [pc, #584]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010b1e:	430b      	orrs	r3, r1
 8010b20:	6553      	str	r3, [r2, #84]	@ 0x54
 8010b22:	e003      	b.n	8010b2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b34:	f002 0304 	and.w	r3, r2, #4
 8010b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010b42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8010b46:	460b      	mov	r3, r1
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	d044      	beq.n	8010bd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010b54:	2b05      	cmp	r3, #5
 8010b56:	d825      	bhi.n	8010ba4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8010b58:	a201      	add	r2, pc, #4	@ (adr r2, 8010b60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8010b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b5e:	bf00      	nop
 8010b60:	08010bad 	.word	0x08010bad
 8010b64:	08010b79 	.word	0x08010b79
 8010b68:	08010b8f 	.word	0x08010b8f
 8010b6c:	08010bad 	.word	0x08010bad
 8010b70:	08010bad 	.word	0x08010bad
 8010b74:	08010bad 	.word	0x08010bad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	2101      	movs	r1, #1
 8010b80:	4618      	mov	r0, r3
 8010b82:	f001 fdef 	bl	8012764 <RCCEx_PLL2_Config>
 8010b86:	4603      	mov	r3, r0
 8010b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010b8c:	e00f      	b.n	8010bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b92:	3328      	adds	r3, #40	@ 0x28
 8010b94:	2101      	movs	r1, #1
 8010b96:	4618      	mov	r0, r3
 8010b98:	f001 fe96 	bl	80128c8 <RCCEx_PLL3_Config>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010ba2:	e004      	b.n	8010bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010baa:	e000      	b.n	8010bae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8010bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d10b      	bne.n	8010bce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bba:	f023 0107 	bic.w	r1, r3, #7
 8010bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010bc6:	4a68      	ldr	r2, [pc, #416]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010bc8:	430b      	orrs	r3, r1
 8010bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8010bcc:	e003      	b.n	8010bd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bde:	f002 0320 	and.w	r3, r2, #32
 8010be2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010be6:	2300      	movs	r3, #0
 8010be8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	d055      	beq.n	8010ca2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8010bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010c02:	d033      	beq.n	8010c6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8010c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010c08:	d82c      	bhi.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c0e:	d02f      	beq.n	8010c70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8010c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c14:	d826      	bhi.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010c16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010c1a:	d02b      	beq.n	8010c74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8010c1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010c20:	d820      	bhi.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c26:	d012      	beq.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8010c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c2c:	d81a      	bhi.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d022      	beq.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8010c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c36:	d115      	bne.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c3c:	3308      	adds	r3, #8
 8010c3e:	2100      	movs	r1, #0
 8010c40:	4618      	mov	r0, r3
 8010c42:	f001 fd8f 	bl	8012764 <RCCEx_PLL2_Config>
 8010c46:	4603      	mov	r3, r0
 8010c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010c4c:	e015      	b.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c52:	3328      	adds	r3, #40	@ 0x28
 8010c54:	2102      	movs	r1, #2
 8010c56:	4618      	mov	r0, r3
 8010c58:	f001 fe36 	bl	80128c8 <RCCEx_PLL3_Config>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010c62:	e00a      	b.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010c64:	2301      	movs	r3, #1
 8010c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010c6a:	e006      	b.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010c6c:	bf00      	nop
 8010c6e:	e004      	b.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010c70:	bf00      	nop
 8010c72:	e002      	b.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010c74:	bf00      	nop
 8010c76:	e000      	b.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d10b      	bne.n	8010c9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010c82:	4b39      	ldr	r3, [pc, #228]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8010c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c92:	4a35      	ldr	r2, [pc, #212]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010c94:	430b      	orrs	r3, r1
 8010c96:	6553      	str	r3, [r2, #84]	@ 0x54
 8010c98:	e003      	b.n	8010ca2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010caa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8010cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010cb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	d058      	beq.n	8010d74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8010cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010cca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8010cce:	d033      	beq.n	8010d38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010cd0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8010cd4:	d82c      	bhi.n	8010d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010cda:	d02f      	beq.n	8010d3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8010cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ce0:	d826      	bhi.n	8010d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010ce2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010ce6:	d02b      	beq.n	8010d40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8010ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010cec:	d820      	bhi.n	8010d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010cf2:	d012      	beq.n	8010d1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8010cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010cf8:	d81a      	bhi.n	8010d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d022      	beq.n	8010d44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8010cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010d02:	d115      	bne.n	8010d30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d08:	3308      	adds	r3, #8
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f001 fd29 	bl	8012764 <RCCEx_PLL2_Config>
 8010d12:	4603      	mov	r3, r0
 8010d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010d18:	e015      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d1e:	3328      	adds	r3, #40	@ 0x28
 8010d20:	2102      	movs	r1, #2
 8010d22:	4618      	mov	r0, r3
 8010d24:	f001 fdd0 	bl	80128c8 <RCCEx_PLL3_Config>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010d2e:	e00a      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010d30:	2301      	movs	r3, #1
 8010d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010d36:	e006      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010d38:	bf00      	nop
 8010d3a:	e004      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010d3c:	bf00      	nop
 8010d3e:	e002      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010d40:	bf00      	nop
 8010d42:	e000      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d10e      	bne.n	8010d6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010d4e:	4b06      	ldr	r3, [pc, #24]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8010d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010d5e:	4a02      	ldr	r2, [pc, #8]	@ (8010d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010d60:	430b      	orrs	r3, r1
 8010d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8010d64:	e006      	b.n	8010d74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8010d66:	bf00      	nop
 8010d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8010d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010d84:	2300      	movs	r3, #0
 8010d86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010d8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8010d8e:	460b      	mov	r3, r1
 8010d90:	4313      	orrs	r3, r2
 8010d92:	d055      	beq.n	8010e40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010d9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8010da0:	d033      	beq.n	8010e0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8010da2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8010da6:	d82c      	bhi.n	8010e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010dac:	d02f      	beq.n	8010e0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8010dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010db2:	d826      	bhi.n	8010e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010db4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010db8:	d02b      	beq.n	8010e12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8010dba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010dbe:	d820      	bhi.n	8010e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010dc4:	d012      	beq.n	8010dec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8010dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010dca:	d81a      	bhi.n	8010e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d022      	beq.n	8010e16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8010dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010dd4:	d115      	bne.n	8010e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010dda:	3308      	adds	r3, #8
 8010ddc:	2100      	movs	r1, #0
 8010dde:	4618      	mov	r0, r3
 8010de0:	f001 fcc0 	bl	8012764 <RCCEx_PLL2_Config>
 8010de4:	4603      	mov	r3, r0
 8010de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010dea:	e015      	b.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010df0:	3328      	adds	r3, #40	@ 0x28
 8010df2:	2102      	movs	r1, #2
 8010df4:	4618      	mov	r0, r3
 8010df6:	f001 fd67 	bl	80128c8 <RCCEx_PLL3_Config>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010e00:	e00a      	b.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010e02:	2301      	movs	r3, #1
 8010e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010e08:	e006      	b.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010e0a:	bf00      	nop
 8010e0c:	e004      	b.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010e0e:	bf00      	nop
 8010e10:	e002      	b.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010e12:	bf00      	nop
 8010e14:	e000      	b.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d10b      	bne.n	8010e38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010e20:	4ba1      	ldr	r3, [pc, #644]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8010e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010e30:	4a9d      	ldr	r2, [pc, #628]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010e32:	430b      	orrs	r3, r1
 8010e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8010e36:	e003      	b.n	8010e40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e48:	f002 0308 	and.w	r3, r2, #8
 8010e4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010e50:	2300      	movs	r3, #0
 8010e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010e56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8010e5a:	460b      	mov	r3, r1
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	d01e      	beq.n	8010e9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e6c:	d10c      	bne.n	8010e88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e72:	3328      	adds	r3, #40	@ 0x28
 8010e74:	2102      	movs	r1, #2
 8010e76:	4618      	mov	r0, r3
 8010e78:	f001 fd26 	bl	80128c8 <RCCEx_PLL3_Config>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d002      	beq.n	8010e88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8010e82:	2301      	movs	r3, #1
 8010e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010e88:	4b87      	ldr	r3, [pc, #540]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e98:	4a83      	ldr	r2, [pc, #524]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010e9a:	430b      	orrs	r3, r1
 8010e9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea6:	f002 0310 	and.w	r3, r2, #16
 8010eaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010eb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8010eb8:	460b      	mov	r3, r1
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	d01e      	beq.n	8010efc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8010ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010eca:	d10c      	bne.n	8010ee6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ed0:	3328      	adds	r3, #40	@ 0x28
 8010ed2:	2102      	movs	r1, #2
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f001 fcf7 	bl	80128c8 <RCCEx_PLL3_Config>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d002      	beq.n	8010ee6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010ee6:	4b70      	ldr	r3, [pc, #448]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010eea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010ef6:	4a6c      	ldr	r2, [pc, #432]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010ef8:	430b      	orrs	r3, r1
 8010efa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8010f08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010f12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8010f16:	460b      	mov	r3, r1
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	d03e      	beq.n	8010f9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8010f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f28:	d022      	beq.n	8010f70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8010f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f2e:	d81b      	bhi.n	8010f68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d003      	beq.n	8010f3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8010f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f38:	d00b      	beq.n	8010f52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8010f3a:	e015      	b.n	8010f68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f40:	3308      	adds	r3, #8
 8010f42:	2100      	movs	r1, #0
 8010f44:	4618      	mov	r0, r3
 8010f46:	f001 fc0d 	bl	8012764 <RCCEx_PLL2_Config>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010f50:	e00f      	b.n	8010f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f56:	3328      	adds	r3, #40	@ 0x28
 8010f58:	2102      	movs	r1, #2
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f001 fcb4 	bl	80128c8 <RCCEx_PLL3_Config>
 8010f60:	4603      	mov	r3, r0
 8010f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010f66:	e004      	b.n	8010f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010f6e:	e000      	b.n	8010f72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8010f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d10b      	bne.n	8010f92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8010f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010f8a:	4a47      	ldr	r2, [pc, #284]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010f8c:	430b      	orrs	r3, r1
 8010f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8010f90:	e003      	b.n	8010f9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8010fa6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010fa8:	2300      	movs	r3, #0
 8010faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010fac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	d03b      	beq.n	801102e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8010fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010fbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010fc2:	d01f      	beq.n	8011004 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8010fc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010fc8:	d818      	bhi.n	8010ffc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8010fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010fce:	d003      	beq.n	8010fd8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8010fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010fd4:	d007      	beq.n	8010fe6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8010fd6:	e011      	b.n	8010ffc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fd8:	4b33      	ldr	r3, [pc, #204]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fdc:	4a32      	ldr	r2, [pc, #200]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8010fe4:	e00f      	b.n	8011006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010fea:	3328      	adds	r3, #40	@ 0x28
 8010fec:	2101      	movs	r1, #1
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f001 fc6a 	bl	80128c8 <RCCEx_PLL3_Config>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8010ffa:	e004      	b.n	8011006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8011002:	e000      	b.n	8011006 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8011004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801100a:	2b00      	cmp	r3, #0
 801100c:	d10b      	bne.n	8011026 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801100e:	4b26      	ldr	r3, [pc, #152]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011012:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801101e:	4a22      	ldr	r2, [pc, #136]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011020:	430b      	orrs	r3, r1
 8011022:	6553      	str	r3, [r2, #84]	@ 0x54
 8011024:	e003      	b.n	801102e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801102a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801102e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011036:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801103a:	673b      	str	r3, [r7, #112]	@ 0x70
 801103c:	2300      	movs	r3, #0
 801103e:	677b      	str	r3, [r7, #116]	@ 0x74
 8011040:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8011044:	460b      	mov	r3, r1
 8011046:	4313      	orrs	r3, r2
 8011048:	d034      	beq.n	80110b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801104a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801104e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011050:	2b00      	cmp	r3, #0
 8011052:	d003      	beq.n	801105c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8011054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011058:	d007      	beq.n	801106a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801105a:	e011      	b.n	8011080 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801105c:	4b12      	ldr	r3, [pc, #72]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801105e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011060:	4a11      	ldr	r2, [pc, #68]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8011068:	e00e      	b.n	8011088 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801106a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801106e:	3308      	adds	r3, #8
 8011070:	2102      	movs	r1, #2
 8011072:	4618      	mov	r0, r3
 8011074:	f001 fb76 	bl	8012764 <RCCEx_PLL2_Config>
 8011078:	4603      	mov	r3, r0
 801107a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801107e:	e003      	b.n	8011088 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8011080:	2301      	movs	r3, #1
 8011082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8011086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801108c:	2b00      	cmp	r3, #0
 801108e:	d10d      	bne.n	80110ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011090:	4b05      	ldr	r3, [pc, #20]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011094:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801109c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801109e:	4a02      	ldr	r2, [pc, #8]	@ (80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80110a0:	430b      	orrs	r3, r1
 80110a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80110a4:	e006      	b.n	80110b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80110a6:	bf00      	nop
 80110a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80110b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80110b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80110b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80110c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80110c2:	2300      	movs	r3, #0
 80110c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80110c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80110ca:	460b      	mov	r3, r1
 80110cc:	4313      	orrs	r3, r2
 80110ce:	d00c      	beq.n	80110ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80110d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80110d4:	3328      	adds	r3, #40	@ 0x28
 80110d6:	2102      	movs	r1, #2
 80110d8:	4618      	mov	r0, r3
 80110da:	f001 fbf5 	bl	80128c8 <RCCEx_PLL3_Config>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d002      	beq.n	80110ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80110e4:	2301      	movs	r3, #1
 80110e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80110ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80110f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80110f8:	2300      	movs	r3, #0
 80110fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80110fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8011100:	460b      	mov	r3, r1
 8011102:	4313      	orrs	r3, r2
 8011104:	d038      	beq.n	8011178 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8011106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801110a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801110e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011112:	d018      	beq.n	8011146 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8011114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011118:	d811      	bhi.n	801113e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801111a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801111e:	d014      	beq.n	801114a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8011120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011124:	d80b      	bhi.n	801113e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8011126:	2b00      	cmp	r3, #0
 8011128:	d011      	beq.n	801114e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801112a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801112e:	d106      	bne.n	801113e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011130:	4bc3      	ldr	r3, [pc, #780]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011134:	4ac2      	ldr	r2, [pc, #776]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801113a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801113c:	e008      	b.n	8011150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801113e:	2301      	movs	r3, #1
 8011140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8011144:	e004      	b.n	8011150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8011146:	bf00      	nop
 8011148:	e002      	b.n	8011150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801114a:	bf00      	nop
 801114c:	e000      	b.n	8011150 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801114e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011154:	2b00      	cmp	r3, #0
 8011156:	d10b      	bne.n	8011170 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011158:	4bb9      	ldr	r3, [pc, #740]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801115a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801115c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8011160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011168:	4ab5      	ldr	r2, [pc, #724]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801116a:	430b      	orrs	r3, r1
 801116c:	6553      	str	r3, [r2, #84]	@ 0x54
 801116e:	e003      	b.n	8011178 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011180:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8011184:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011186:	2300      	movs	r3, #0
 8011188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801118a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801118e:	460b      	mov	r3, r1
 8011190:	4313      	orrs	r3, r2
 8011192:	d009      	beq.n	80111a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011194:	4baa      	ldr	r3, [pc, #680]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011198:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801119c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80111a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111a2:	4aa7      	ldr	r2, [pc, #668]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80111a4:	430b      	orrs	r3, r1
 80111a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80111a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80111ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80111b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80111b6:	2300      	movs	r3, #0
 80111b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80111ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80111be:	460b      	mov	r3, r1
 80111c0:	4313      	orrs	r3, r2
 80111c2:	d00a      	beq.n	80111da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80111c4:	4b9e      	ldr	r3, [pc, #632]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80111cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80111d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80111d4:	4a9a      	ldr	r2, [pc, #616]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80111d6:	430b      	orrs	r3, r1
 80111d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80111da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80111de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80111e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111e8:	2300      	movs	r3, #0
 80111ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80111f0:	460b      	mov	r3, r1
 80111f2:	4313      	orrs	r3, r2
 80111f4:	d009      	beq.n	801120a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80111f6:	4b92      	ldr	r3, [pc, #584]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80111f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80111fa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80111fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011204:	4a8e      	ldr	r2, [pc, #568]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011206:	430b      	orrs	r3, r1
 8011208:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801120a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011212:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8011216:	643b      	str	r3, [r7, #64]	@ 0x40
 8011218:	2300      	movs	r3, #0
 801121a:	647b      	str	r3, [r7, #68]	@ 0x44
 801121c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8011220:	460b      	mov	r3, r1
 8011222:	4313      	orrs	r3, r2
 8011224:	d00e      	beq.n	8011244 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011226:	4b86      	ldr	r3, [pc, #536]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011228:	691b      	ldr	r3, [r3, #16]
 801122a:	4a85      	ldr	r2, [pc, #532]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801122c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011230:	6113      	str	r3, [r2, #16]
 8011232:	4b83      	ldr	r3, [pc, #524]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011234:	6919      	ldr	r1, [r3, #16]
 8011236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801123a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801123e:	4a80      	ldr	r2, [pc, #512]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011240:	430b      	orrs	r3, r1
 8011242:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8011250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011252:	2300      	movs	r3, #0
 8011254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011256:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801125a:	460b      	mov	r3, r1
 801125c:	4313      	orrs	r3, r2
 801125e:	d009      	beq.n	8011274 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011260:	4b77      	ldr	r3, [pc, #476]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011264:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8011268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801126c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801126e:	4a74      	ldr	r2, [pc, #464]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011270:	430b      	orrs	r3, r1
 8011272:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8011280:	633b      	str	r3, [r7, #48]	@ 0x30
 8011282:	2300      	movs	r3, #0
 8011284:	637b      	str	r3, [r7, #52]	@ 0x34
 8011286:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801128a:	460b      	mov	r3, r1
 801128c:	4313      	orrs	r3, r2
 801128e:	d00a      	beq.n	80112a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011290:	4b6b      	ldr	r3, [pc, #428]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011294:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8011298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801129c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80112a0:	4a67      	ldr	r2, [pc, #412]	@ (8011440 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80112a2:	430b      	orrs	r3, r1
 80112a4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80112a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80112aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ae:	2100      	movs	r1, #0
 80112b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80112b2:	f003 0301 	and.w	r3, r3, #1
 80112b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80112bc:	460b      	mov	r3, r1
 80112be:	4313      	orrs	r3, r2
 80112c0:	d011      	beq.n	80112e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80112c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80112c6:	3308      	adds	r3, #8
 80112c8:	2100      	movs	r1, #0
 80112ca:	4618      	mov	r0, r3
 80112cc:	f001 fa4a 	bl	8012764 <RCCEx_PLL2_Config>
 80112d0:	4603      	mov	r3, r0
 80112d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80112d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d003      	beq.n	80112e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80112e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80112e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	2100      	movs	r1, #0
 80112f0:	6239      	str	r1, [r7, #32]
 80112f2:	f003 0302 	and.w	r3, r3, #2
 80112f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80112f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80112fc:	460b      	mov	r3, r1
 80112fe:	4313      	orrs	r3, r2
 8011300:	d011      	beq.n	8011326 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011306:	3308      	adds	r3, #8
 8011308:	2101      	movs	r1, #1
 801130a:	4618      	mov	r0, r3
 801130c:	f001 fa2a 	bl	8012764 <RCCEx_PLL2_Config>
 8011310:	4603      	mov	r3, r0
 8011312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8011316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801131a:	2b00      	cmp	r3, #0
 801131c:	d003      	beq.n	8011326 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801131e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8011326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132e:	2100      	movs	r1, #0
 8011330:	61b9      	str	r1, [r7, #24]
 8011332:	f003 0304 	and.w	r3, r3, #4
 8011336:	61fb      	str	r3, [r7, #28]
 8011338:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801133c:	460b      	mov	r3, r1
 801133e:	4313      	orrs	r3, r2
 8011340:	d011      	beq.n	8011366 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011346:	3308      	adds	r3, #8
 8011348:	2102      	movs	r1, #2
 801134a:	4618      	mov	r0, r3
 801134c:	f001 fa0a 	bl	8012764 <RCCEx_PLL2_Config>
 8011350:	4603      	mov	r3, r0
 8011352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8011356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801135a:	2b00      	cmp	r3, #0
 801135c:	d003      	beq.n	8011366 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801135e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8011366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136e:	2100      	movs	r1, #0
 8011370:	6139      	str	r1, [r7, #16]
 8011372:	f003 0308 	and.w	r3, r3, #8
 8011376:	617b      	str	r3, [r7, #20]
 8011378:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801137c:	460b      	mov	r3, r1
 801137e:	4313      	orrs	r3, r2
 8011380:	d011      	beq.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011386:	3328      	adds	r3, #40	@ 0x28
 8011388:	2100      	movs	r1, #0
 801138a:	4618      	mov	r0, r3
 801138c:	f001 fa9c 	bl	80128c8 <RCCEx_PLL3_Config>
 8011390:	4603      	mov	r3, r0
 8011392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8011396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801139a:	2b00      	cmp	r3, #0
 801139c:	d003      	beq.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801139e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80113a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80113a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80113aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ae:	2100      	movs	r1, #0
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	f003 0310 	and.w	r3, r3, #16
 80113b6:	60fb      	str	r3, [r7, #12]
 80113b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80113bc:	460b      	mov	r3, r1
 80113be:	4313      	orrs	r3, r2
 80113c0:	d011      	beq.n	80113e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80113c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80113c6:	3328      	adds	r3, #40	@ 0x28
 80113c8:	2101      	movs	r1, #1
 80113ca:	4618      	mov	r0, r3
 80113cc:	f001 fa7c 	bl	80128c8 <RCCEx_PLL3_Config>
 80113d0:	4603      	mov	r3, r0
 80113d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80113d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d003      	beq.n	80113e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80113e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80113e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80113ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ee:	2100      	movs	r1, #0
 80113f0:	6039      	str	r1, [r7, #0]
 80113f2:	f003 0320 	and.w	r3, r3, #32
 80113f6:	607b      	str	r3, [r7, #4]
 80113f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80113fc:	460b      	mov	r3, r1
 80113fe:	4313      	orrs	r3, r2
 8011400:	d011      	beq.n	8011426 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011406:	3328      	adds	r3, #40	@ 0x28
 8011408:	2102      	movs	r1, #2
 801140a:	4618      	mov	r0, r3
 801140c:	f001 fa5c 	bl	80128c8 <RCCEx_PLL3_Config>
 8011410:	4603      	mov	r3, r0
 8011412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8011416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801141a:	2b00      	cmp	r3, #0
 801141c:	d003      	beq.n	8011426 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801141e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8011426:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801142a:	2b00      	cmp	r3, #0
 801142c:	d101      	bne.n	8011432 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801142e:	2300      	movs	r3, #0
 8011430:	e000      	b.n	8011434 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8011432:	2301      	movs	r3, #1
}
 8011434:	4618      	mov	r0, r3
 8011436:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801143a:	46bd      	mov	sp, r7
 801143c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011440:	58024400 	.word	0x58024400

08011444 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b090      	sub	sp, #64	@ 0x40
 8011448:	af00      	add	r7, sp, #0
 801144a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801144e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011452:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8011456:	430b      	orrs	r3, r1
 8011458:	f040 8094 	bne.w	8011584 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801145c:	4b9e      	ldr	r3, [pc, #632]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801145e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011460:	f003 0307 	and.w	r3, r3, #7
 8011464:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8011466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011468:	2b04      	cmp	r3, #4
 801146a:	f200 8087 	bhi.w	801157c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801146e:	a201      	add	r2, pc, #4	@ (adr r2, 8011474 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8011470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011474:	08011489 	.word	0x08011489
 8011478:	080114b1 	.word	0x080114b1
 801147c:	080114d9 	.word	0x080114d9
 8011480:	08011575 	.word	0x08011575
 8011484:	08011501 	.word	0x08011501
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011488:	4b93      	ldr	r3, [pc, #588]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011490:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011494:	d108      	bne.n	80114a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801149a:	4618      	mov	r0, r3
 801149c:	f001 f810 	bl	80124c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80114a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114a4:	f000 bd45 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114ac:	f000 bd41 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80114b0:	4b89      	ldr	r3, [pc, #548]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80114b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80114bc:	d108      	bne.n	80114d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114be:	f107 0318 	add.w	r3, r7, #24
 80114c2:	4618      	mov	r0, r3
 80114c4:	f000 fd54 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80114c8:	69bb      	ldr	r3, [r7, #24]
 80114ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114cc:	f000 bd31 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114d0:	2300      	movs	r3, #0
 80114d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114d4:	f000 bd2d 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80114d8:	4b7f      	ldr	r3, [pc, #508]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80114e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80114e4:	d108      	bne.n	80114f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114e6:	f107 030c 	add.w	r3, r7, #12
 80114ea:	4618      	mov	r0, r3
 80114ec:	f000 fe94 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114f4:	f000 bd1d 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114f8:	2300      	movs	r3, #0
 80114fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114fc:	f000 bd19 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011500:	4b75      	ldr	r3, [pc, #468]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011504:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011508:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801150a:	4b73      	ldr	r3, [pc, #460]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f003 0304 	and.w	r3, r3, #4
 8011512:	2b04      	cmp	r3, #4
 8011514:	d10c      	bne.n	8011530 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8011516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011518:	2b00      	cmp	r3, #0
 801151a:	d109      	bne.n	8011530 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801151c:	4b6e      	ldr	r3, [pc, #440]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	08db      	lsrs	r3, r3, #3
 8011522:	f003 0303 	and.w	r3, r3, #3
 8011526:	4a6d      	ldr	r2, [pc, #436]	@ (80116dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011528:	fa22 f303 	lsr.w	r3, r2, r3
 801152c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801152e:	e01f      	b.n	8011570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011530:	4b69      	ldr	r3, [pc, #420]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801153c:	d106      	bne.n	801154c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801153e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011544:	d102      	bne.n	801154c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011546:	4b66      	ldr	r3, [pc, #408]	@ (80116e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8011548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801154a:	e011      	b.n	8011570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801154c:	4b62      	ldr	r3, [pc, #392]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011558:	d106      	bne.n	8011568 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801155a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801155c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011560:	d102      	bne.n	8011568 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011562:	4b60      	ldr	r3, [pc, #384]	@ (80116e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8011564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011566:	e003      	b.n	8011570 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011568:	2300      	movs	r3, #0
 801156a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801156c:	f000 bce1 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011570:	f000 bcdf 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011574:	4b5c      	ldr	r3, [pc, #368]	@ (80116e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8011576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011578:	f000 bcdb 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801157c:	2300      	movs	r3, #0
 801157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011580:	f000 bcd7 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8011584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011588:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 801158c:	430b      	orrs	r3, r1
 801158e:	f040 80ad 	bne.w	80116ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8011592:	4b51      	ldr	r3, [pc, #324]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011596:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801159a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801159c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801159e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80115a2:	d056      	beq.n	8011652 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80115a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80115aa:	f200 8090 	bhi.w	80116ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80115ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80115b2:	f000 8088 	beq.w	80116c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80115b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80115ba:	f200 8088 	bhi.w	80116ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80115be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c0:	2b80      	cmp	r3, #128	@ 0x80
 80115c2:	d032      	beq.n	801162a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80115c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c6:	2b80      	cmp	r3, #128	@ 0x80
 80115c8:	f200 8081 	bhi.w	80116ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80115cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d003      	beq.n	80115da <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80115d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115d4:	2b40      	cmp	r3, #64	@ 0x40
 80115d6:	d014      	beq.n	8011602 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80115d8:	e079      	b.n	80116ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80115da:	4b3f      	ldr	r3, [pc, #252]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80115e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80115e6:	d108      	bne.n	80115fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80115e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80115ec:	4618      	mov	r0, r3
 80115ee:	f000 ff67 	bl	80124c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80115f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80115f6:	f000 bc9c 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80115fa:	2300      	movs	r3, #0
 80115fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115fe:	f000 bc98 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011602:	4b35      	ldr	r3, [pc, #212]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801160a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801160e:	d108      	bne.n	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011610:	f107 0318 	add.w	r3, r7, #24
 8011614:	4618      	mov	r0, r3
 8011616:	f000 fcab 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801161a:	69bb      	ldr	r3, [r7, #24]
 801161c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801161e:	f000 bc88 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011622:	2300      	movs	r3, #0
 8011624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011626:	f000 bc84 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801162a:	4b2b      	ldr	r3, [pc, #172]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011636:	d108      	bne.n	801164a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011638:	f107 030c 	add.w	r3, r7, #12
 801163c:	4618      	mov	r0, r3
 801163e:	f000 fdeb 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011646:	f000 bc74 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801164e:	f000 bc70 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011652:	4b21      	ldr	r3, [pc, #132]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011656:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801165a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801165c:	4b1e      	ldr	r3, [pc, #120]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	f003 0304 	and.w	r3, r3, #4
 8011664:	2b04      	cmp	r3, #4
 8011666:	d10c      	bne.n	8011682 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8011668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801166a:	2b00      	cmp	r3, #0
 801166c:	d109      	bne.n	8011682 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801166e:	4b1a      	ldr	r3, [pc, #104]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	08db      	lsrs	r3, r3, #3
 8011674:	f003 0303 	and.w	r3, r3, #3
 8011678:	4a18      	ldr	r2, [pc, #96]	@ (80116dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801167a:	fa22 f303 	lsr.w	r3, r2, r3
 801167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011680:	e01f      	b.n	80116c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011682:	4b15      	ldr	r3, [pc, #84]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801168a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801168e:	d106      	bne.n	801169e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8011690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011692:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011696:	d102      	bne.n	801169e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011698:	4b11      	ldr	r3, [pc, #68]	@ (80116e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801169a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801169c:	e011      	b.n	80116c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801169e:	4b0e      	ldr	r3, [pc, #56]	@ (80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80116a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80116aa:	d106      	bne.n	80116ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80116ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80116b2:	d102      	bne.n	80116ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80116b4:	4b0b      	ldr	r3, [pc, #44]	@ (80116e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80116b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80116b8:	e003      	b.n	80116c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80116ba:	2300      	movs	r3, #0
 80116bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80116be:	f000 bc38 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80116c2:	f000 bc36 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80116c6:	4b08      	ldr	r3, [pc, #32]	@ (80116e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80116c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116ca:	f000 bc32 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116d2:	f000 bc2e 	b.w	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80116d6:	bf00      	nop
 80116d8:	58024400 	.word	0x58024400
 80116dc:	03d09000 	.word	0x03d09000
 80116e0:	003d0900 	.word	0x003d0900
 80116e4:	017d7840 	.word	0x017d7840
 80116e8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80116ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116f0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80116f4:	430b      	orrs	r3, r1
 80116f6:	f040 809c 	bne.w	8011832 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80116fa:	4b9e      	ldr	r3, [pc, #632]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80116fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116fe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8011702:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8011704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011706:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801170a:	d054      	beq.n	80117b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801170c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801170e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011712:	f200 808b 	bhi.w	801182c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011718:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801171c:	f000 8083 	beq.w	8011826 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8011720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011722:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011726:	f200 8081 	bhi.w	801182c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801172a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801172c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011730:	d02f      	beq.n	8011792 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8011732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011738:	d878      	bhi.n	801182c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801173a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801173c:	2b00      	cmp	r3, #0
 801173e:	d004      	beq.n	801174a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8011740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011746:	d012      	beq.n	801176e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8011748:	e070      	b.n	801182c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801174a:	4b8a      	ldr	r3, [pc, #552]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011756:	d107      	bne.n	8011768 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801175c:	4618      	mov	r0, r3
 801175e:	f000 feaf 	bl	80124c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011766:	e3e4      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801176c:	e3e1      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801176e:	4b81      	ldr	r3, [pc, #516]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801177a:	d107      	bne.n	801178c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801177c:	f107 0318 	add.w	r3, r7, #24
 8011780:	4618      	mov	r0, r3
 8011782:	f000 fbf5 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801178a:	e3d2      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801178c:	2300      	movs	r3, #0
 801178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011790:	e3cf      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011792:	4b78      	ldr	r3, [pc, #480]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801179a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801179e:	d107      	bne.n	80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117a0:	f107 030c 	add.w	r3, r7, #12
 80117a4:	4618      	mov	r0, r3
 80117a6:	f000 fd37 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80117ae:	e3c0      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80117b0:	2300      	movs	r3, #0
 80117b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80117b4:	e3bd      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80117b6:	4b6f      	ldr	r3, [pc, #444]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80117b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80117ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80117be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80117c0:	4b6c      	ldr	r3, [pc, #432]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f003 0304 	and.w	r3, r3, #4
 80117c8:	2b04      	cmp	r3, #4
 80117ca:	d10c      	bne.n	80117e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80117cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d109      	bne.n	80117e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80117d2:	4b68      	ldr	r3, [pc, #416]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	08db      	lsrs	r3, r3, #3
 80117d8:	f003 0303 	and.w	r3, r3, #3
 80117dc:	4a66      	ldr	r2, [pc, #408]	@ (8011978 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80117de:	fa22 f303 	lsr.w	r3, r2, r3
 80117e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80117e4:	e01e      	b.n	8011824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80117e6:	4b63      	ldr	r3, [pc, #396]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80117ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117f2:	d106      	bne.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80117f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80117fa:	d102      	bne.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80117fc:	4b5f      	ldr	r3, [pc, #380]	@ (801197c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80117fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011800:	e010      	b.n	8011824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011802:	4b5c      	ldr	r3, [pc, #368]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801180a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801180e:	d106      	bne.n	801181e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8011810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011816:	d102      	bne.n	801181e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011818:	4b59      	ldr	r3, [pc, #356]	@ (8011980 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801181a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801181c:	e002      	b.n	8011824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011822:	e386      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011824:	e385      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011826:	4b57      	ldr	r3, [pc, #348]	@ (8011984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801182a:	e382      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801182c:	2300      	movs	r3, #0
 801182e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011830:	e37f      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8011832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011836:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801183a:	430b      	orrs	r3, r1
 801183c:	f040 80a7 	bne.w	801198e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8011840:	4b4c      	ldr	r3, [pc, #304]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011844:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8011848:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801184a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801184c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011850:	d055      	beq.n	80118fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8011852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011858:	f200 8096 	bhi.w	8011988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801185e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011862:	f000 8084 	beq.w	801196e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8011866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011868:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801186c:	f200 808c 	bhi.w	8011988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011876:	d030      	beq.n	80118da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8011878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801187a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801187e:	f200 8083 	bhi.w	8011988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011884:	2b00      	cmp	r3, #0
 8011886:	d004      	beq.n	8011892 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8011888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801188a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801188e:	d012      	beq.n	80118b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8011890:	e07a      	b.n	8011988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011892:	4b38      	ldr	r3, [pc, #224]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801189a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801189e:	d107      	bne.n	80118b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80118a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80118a4:	4618      	mov	r0, r3
 80118a6:	f000 fe0b 	bl	80124c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80118aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80118ae:	e340      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80118b0:	2300      	movs	r3, #0
 80118b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80118b4:	e33d      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80118b6:	4b2f      	ldr	r3, [pc, #188]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80118be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80118c2:	d107      	bne.n	80118d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80118c4:	f107 0318 	add.w	r3, r7, #24
 80118c8:	4618      	mov	r0, r3
 80118ca:	f000 fb51 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80118d2:	e32e      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80118d4:	2300      	movs	r3, #0
 80118d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80118d8:	e32b      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80118da:	4b26      	ldr	r3, [pc, #152]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80118e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80118e6:	d107      	bne.n	80118f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118e8:	f107 030c 	add.w	r3, r7, #12
 80118ec:	4618      	mov	r0, r3
 80118ee:	f000 fc93 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80118f6:	e31c      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80118f8:	2300      	movs	r3, #0
 80118fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80118fc:	e319      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80118fe:	4b1d      	ldr	r3, [pc, #116]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011902:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011906:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011908:	4b1a      	ldr	r3, [pc, #104]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	f003 0304 	and.w	r3, r3, #4
 8011910:	2b04      	cmp	r3, #4
 8011912:	d10c      	bne.n	801192e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8011914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011916:	2b00      	cmp	r3, #0
 8011918:	d109      	bne.n	801192e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801191a:	4b16      	ldr	r3, [pc, #88]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	08db      	lsrs	r3, r3, #3
 8011920:	f003 0303 	and.w	r3, r3, #3
 8011924:	4a14      	ldr	r2, [pc, #80]	@ (8011978 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8011926:	fa22 f303 	lsr.w	r3, r2, r3
 801192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801192c:	e01e      	b.n	801196c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801192e:	4b11      	ldr	r3, [pc, #68]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801193a:	d106      	bne.n	801194a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801193c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801193e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011942:	d102      	bne.n	801194a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011944:	4b0d      	ldr	r3, [pc, #52]	@ (801197c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011948:	e010      	b.n	801196c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801194a:	4b0a      	ldr	r3, [pc, #40]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011956:	d106      	bne.n	8011966 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8011958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801195a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801195e:	d102      	bne.n	8011966 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011960:	4b07      	ldr	r3, [pc, #28]	@ (8011980 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011964:	e002      	b.n	801196c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801196a:	e2e2      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801196c:	e2e1      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801196e:	4b05      	ldr	r3, [pc, #20]	@ (8011984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011972:	e2de      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011974:	58024400 	.word	0x58024400
 8011978:	03d09000 	.word	0x03d09000
 801197c:	003d0900 	.word	0x003d0900
 8011980:	017d7840 	.word	0x017d7840
 8011984:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8011988:	2300      	movs	r3, #0
 801198a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801198c:	e2d1      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801198e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011992:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8011996:	430b      	orrs	r3, r1
 8011998:	f040 809c 	bne.w	8011ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801199c:	4b93      	ldr	r3, [pc, #588]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801199e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119a0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80119a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80119a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80119ac:	d054      	beq.n	8011a58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80119ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80119b4:	f200 808b 	bhi.w	8011ace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80119b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80119be:	f000 8083 	beq.w	8011ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80119c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80119c8:	f200 8081 	bhi.w	8011ace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80119cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80119d2:	d02f      	beq.n	8011a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80119d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80119da:	d878      	bhi.n	8011ace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80119dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d004      	beq.n	80119ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80119e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80119e8:	d012      	beq.n	8011a10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80119ea:	e070      	b.n	8011ace <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80119ec:	4b7f      	ldr	r3, [pc, #508]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80119f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80119f8:	d107      	bne.n	8011a0a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80119fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80119fe:	4618      	mov	r0, r3
 8011a00:	f000 fd5e 	bl	80124c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a08:	e293      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a0e:	e290      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011a10:	4b76      	ldr	r3, [pc, #472]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011a1c:	d107      	bne.n	8011a2e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a1e:	f107 0318 	add.w	r3, r7, #24
 8011a22:	4618      	mov	r0, r3
 8011a24:	f000 faa4 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011a28:	69bb      	ldr	r3, [r7, #24]
 8011a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a2c:	e281      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a32:	e27e      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011a34:	4b6d      	ldr	r3, [pc, #436]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011a3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011a40:	d107      	bne.n	8011a52 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a42:	f107 030c 	add.w	r3, r7, #12
 8011a46:	4618      	mov	r0, r3
 8011a48:	f000 fbe6 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a50:	e26f      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a52:	2300      	movs	r3, #0
 8011a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a56:	e26c      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011a58:	4b64      	ldr	r3, [pc, #400]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011a60:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011a62:	4b62      	ldr	r3, [pc, #392]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f003 0304 	and.w	r3, r3, #4
 8011a6a:	2b04      	cmp	r3, #4
 8011a6c:	d10c      	bne.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d109      	bne.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011a74:	4b5d      	ldr	r3, [pc, #372]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	08db      	lsrs	r3, r3, #3
 8011a7a:	f003 0303 	and.w	r3, r3, #3
 8011a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011a80:	fa22 f303 	lsr.w	r3, r2, r3
 8011a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a86:	e01e      	b.n	8011ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011a88:	4b58      	ldr	r3, [pc, #352]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a94:	d106      	bne.n	8011aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8011a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a9c:	d102      	bne.n	8011aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011a9e:	4b55      	ldr	r3, [pc, #340]	@ (8011bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011aa2:	e010      	b.n	8011ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011aa4:	4b51      	ldr	r3, [pc, #324]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011ab0:	d106      	bne.n	8011ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8011ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011ab8:	d102      	bne.n	8011ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011aba:	4b4f      	ldr	r3, [pc, #316]	@ (8011bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011abe:	e002      	b.n	8011ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011ac4:	e235      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011ac6:	e234      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8011bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8011aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011acc:	e231      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ad2:	e22e      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8011ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ad8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8011adc:	430b      	orrs	r3, r1
 8011ade:	f040 808f 	bne.w	8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8011ae2:	4b42      	ldr	r3, [pc, #264]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ae6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8011aea:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8011aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011af2:	d06b      	beq.n	8011bcc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8011af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011afa:	d874      	bhi.n	8011be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011afe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011b02:	d056      	beq.n	8011bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8011b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011b0a:	d86c      	bhi.n	8011be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011b12:	d03b      	beq.n	8011b8c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8011b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011b1a:	d864      	bhi.n	8011be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011b22:	d021      	beq.n	8011b68 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8011b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011b2a:	d85c      	bhi.n	8011be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d004      	beq.n	8011b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8011b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011b38:	d004      	beq.n	8011b44 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8011b3a:	e054      	b.n	8011be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8011b3c:	f7fe fa4c 	bl	800ffd8 <HAL_RCC_GetPCLK1Freq>
 8011b40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011b42:	e1f6      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011b44:	4b29      	ldr	r3, [pc, #164]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011b50:	d107      	bne.n	8011b62 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b52:	f107 0318 	add.w	r3, r7, #24
 8011b56:	4618      	mov	r0, r3
 8011b58:	f000 fa0a 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b60:	e1e7      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b62:	2300      	movs	r3, #0
 8011b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b66:	e1e4      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011b68:	4b20      	ldr	r3, [pc, #128]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011b74:	d107      	bne.n	8011b86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b76:	f107 030c 	add.w	r3, r7, #12
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f000 fb4c 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b84:	e1d5      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b8a:	e1d2      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011b8c:	4b17      	ldr	r3, [pc, #92]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f003 0304 	and.w	r3, r3, #4
 8011b94:	2b04      	cmp	r3, #4
 8011b96:	d109      	bne.n	8011bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011b98:	4b14      	ldr	r3, [pc, #80]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	08db      	lsrs	r3, r3, #3
 8011b9e:	f003 0303 	and.w	r3, r3, #3
 8011ba2:	4a13      	ldr	r2, [pc, #76]	@ (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8011ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011baa:	e1c2      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011bac:	2300      	movs	r3, #0
 8011bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011bb0:	e1bf      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011bbe:	d102      	bne.n	8011bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8011bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8011bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011bc4:	e1b5      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011bca:	e1b2      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011bcc:	4b07      	ldr	r3, [pc, #28]	@ (8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011bd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011bd8:	d102      	bne.n	8011be0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8011bda:	4b07      	ldr	r3, [pc, #28]	@ (8011bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011bde:	e1a8      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011be0:	2300      	movs	r3, #0
 8011be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011be4:	e1a5      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011be6:	2300      	movs	r3, #0
 8011be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011bea:	e1a2      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011bec:	58024400 	.word	0x58024400
 8011bf0:	03d09000 	.word	0x03d09000
 8011bf4:	003d0900 	.word	0x003d0900
 8011bf8:	017d7840 	.word	0x017d7840
 8011bfc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c04:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8011c08:	430b      	orrs	r3, r1
 8011c0a:	d173      	bne.n	8011cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011c0c:	4b9c      	ldr	r3, [pc, #624]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011c14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011c1c:	d02f      	beq.n	8011c7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8011c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011c24:	d863      	bhi.n	8011cee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8011c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d004      	beq.n	8011c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8011c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c32:	d012      	beq.n	8011c5a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8011c34:	e05b      	b.n	8011cee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011c36:	4b92      	ldr	r3, [pc, #584]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011c42:	d107      	bne.n	8011c54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c44:	f107 0318 	add.w	r3, r7, #24
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f000 f991 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011c4e:	69bb      	ldr	r3, [r7, #24]
 8011c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011c52:	e16e      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011c54:	2300      	movs	r3, #0
 8011c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c58:	e16b      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011c5a:	4b89      	ldr	r3, [pc, #548]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011c66:	d107      	bne.n	8011c78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c68:	f107 030c 	add.w	r3, r7, #12
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f000 fad3 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011c76:	e15c      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c7c:	e159      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011c7e:	4b80      	ldr	r3, [pc, #512]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011c86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011c88:	4b7d      	ldr	r3, [pc, #500]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f003 0304 	and.w	r3, r3, #4
 8011c90:	2b04      	cmp	r3, #4
 8011c92:	d10c      	bne.n	8011cae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8011c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d109      	bne.n	8011cae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011c9a:	4b79      	ldr	r3, [pc, #484]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	08db      	lsrs	r3, r3, #3
 8011ca0:	f003 0303 	and.w	r3, r3, #3
 8011ca4:	4a77      	ldr	r2, [pc, #476]	@ (8011e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8011caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011cac:	e01e      	b.n	8011cec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011cae:	4b74      	ldr	r3, [pc, #464]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011cba:	d106      	bne.n	8011cca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8011cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011cc2:	d102      	bne.n	8011cca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011cc4:	4b70      	ldr	r3, [pc, #448]	@ (8011e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011cc8:	e010      	b.n	8011cec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011cca:	4b6d      	ldr	r3, [pc, #436]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011cd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011cd6:	d106      	bne.n	8011ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8011cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011cde:	d102      	bne.n	8011ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8011e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ce4:	e002      	b.n	8011cec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011cea:	e122      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011cec:	e121      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011cf2:	e11e      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8011cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011cf8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8011cfc:	430b      	orrs	r3, r1
 8011cfe:	d133      	bne.n	8011d68 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8011d00:	4b5f      	ldr	r3, [pc, #380]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011d08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d004      	beq.n	8011d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d16:	d012      	beq.n	8011d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8011d18:	e023      	b.n	8011d62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011d1a:	4b59      	ldr	r3, [pc, #356]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011d26:	d107      	bne.n	8011d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f000 fbc7 	bl	80124c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d36:	e0fc      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d3c:	e0f9      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011d3e:	4b50      	ldr	r3, [pc, #320]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011d4a:	d107      	bne.n	8011d5c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d4c:	f107 0318 	add.w	r3, r7, #24
 8011d50:	4618      	mov	r0, r3
 8011d52:	f000 f90d 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011d56:	6a3b      	ldr	r3, [r7, #32]
 8011d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d5a:	e0ea      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d60:	e0e7      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011d62:	2300      	movs	r3, #0
 8011d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d66:	e0e4      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d6c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8011d70:	430b      	orrs	r3, r1
 8011d72:	f040 808d 	bne.w	8011e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8011d76:	4b42      	ldr	r3, [pc, #264]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d7a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8011d7e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011d86:	d06b      	beq.n	8011e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011d8e:	d874      	bhi.n	8011e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011d96:	d056      	beq.n	8011e46 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8011d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011d9e:	d86c      	bhi.n	8011e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011da2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011da6:	d03b      	beq.n	8011e20 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8011da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011daa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011dae:	d864      	bhi.n	8011e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011db6:	d021      	beq.n	8011dfc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011dbe:	d85c      	bhi.n	8011e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d004      	beq.n	8011dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8011dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011dcc:	d004      	beq.n	8011dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8011dce:	e054      	b.n	8011e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8011dd0:	f000 f8b8 	bl	8011f44 <HAL_RCCEx_GetD3PCLK1Freq>
 8011dd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011dd6:	e0ac      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011dd8:	4b29      	ldr	r3, [pc, #164]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011de4:	d107      	bne.n	8011df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011de6:	f107 0318 	add.w	r3, r7, #24
 8011dea:	4618      	mov	r0, r3
 8011dec:	f000 f8c0 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011df4:	e09d      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011df6:	2300      	movs	r3, #0
 8011df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011dfa:	e09a      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011dfc:	4b20      	ldr	r3, [pc, #128]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e08:	d107      	bne.n	8011e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e0a:	f107 030c 	add.w	r3, r7, #12
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f000 fa02 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e18:	e08b      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e1e:	e088      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011e20:	4b17      	ldr	r3, [pc, #92]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f003 0304 	and.w	r3, r3, #4
 8011e28:	2b04      	cmp	r3, #4
 8011e2a:	d109      	bne.n	8011e40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011e2c:	4b14      	ldr	r3, [pc, #80]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	08db      	lsrs	r3, r3, #3
 8011e32:	f003 0303 	and.w	r3, r3, #3
 8011e36:	4a13      	ldr	r2, [pc, #76]	@ (8011e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011e38:	fa22 f303 	lsr.w	r3, r2, r3
 8011e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e3e:	e078      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e40:	2300      	movs	r3, #0
 8011e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e44:	e075      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011e46:	4b0e      	ldr	r3, [pc, #56]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e52:	d102      	bne.n	8011e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8011e54:	4b0c      	ldr	r3, [pc, #48]	@ (8011e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e58:	e06b      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e5e:	e068      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011e60:	4b07      	ldr	r3, [pc, #28]	@ (8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011e68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011e6c:	d102      	bne.n	8011e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8011e6e:	4b07      	ldr	r3, [pc, #28]	@ (8011e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e72:	e05e      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e78:	e05b      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e7e:	e058      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011e80:	58024400 	.word	0x58024400
 8011e84:	03d09000 	.word	0x03d09000
 8011e88:	003d0900 	.word	0x003d0900
 8011e8c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e94:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8011e98:	430b      	orrs	r3, r1
 8011e9a:	d148      	bne.n	8011f2e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8011e9c:	4b27      	ldr	r3, [pc, #156]	@ (8011f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ea0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011ea4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011eac:	d02a      	beq.n	8011f04 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8011eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011eb4:	d838      	bhi.n	8011f28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8011eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d004      	beq.n	8011ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8011ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011ec2:	d00d      	beq.n	8011ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8011ec4:	e030      	b.n	8011f28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8011f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011ed2:	d102      	bne.n	8011eda <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8011ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8011f40 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8011ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ed8:	e02b      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011eda:	2300      	movs	r3, #0
 8011edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ede:	e028      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011ee0:	4b16      	ldr	r3, [pc, #88]	@ (8011f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011ee8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011eec:	d107      	bne.n	8011efe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f000 fae4 	bl	80124c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011efc:	e019      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011efe:	2300      	movs	r3, #0
 8011f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f02:	e016      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011f04:	4b0d      	ldr	r3, [pc, #52]	@ (8011f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011f10:	d107      	bne.n	8011f22 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011f12:	f107 0318 	add.w	r3, r7, #24
 8011f16:	4618      	mov	r0, r3
 8011f18:	f000 f82a 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f20:	e007      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f22:	2300      	movs	r3, #0
 8011f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f26:	e004      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f2c:	e001      	b.n	8011f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8011f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3740      	adds	r7, #64	@ 0x40
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	58024400 	.word	0x58024400
 8011f40:	017d7840 	.word	0x017d7840

08011f44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8011f48:	f7fe f816 	bl	800ff78 <HAL_RCC_GetHCLKFreq>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	4b06      	ldr	r3, [pc, #24]	@ (8011f68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011f50:	6a1b      	ldr	r3, [r3, #32]
 8011f52:	091b      	lsrs	r3, r3, #4
 8011f54:	f003 0307 	and.w	r3, r3, #7
 8011f58:	4904      	ldr	r1, [pc, #16]	@ (8011f6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8011f5a:	5ccb      	ldrb	r3, [r1, r3]
 8011f5c:	f003 031f 	and.w	r3, r3, #31
 8011f60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	58024400 	.word	0x58024400
 8011f6c:	0801ec30 	.word	0x0801ec30

08011f70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b089      	sub	sp, #36	@ 0x24
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011f78:	4ba1      	ldr	r3, [pc, #644]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f7c:	f003 0303 	and.w	r3, r3, #3
 8011f80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8011f82:	4b9f      	ldr	r3, [pc, #636]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f86:	0b1b      	lsrs	r3, r3, #12
 8011f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011f8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8011f8e:	4b9c      	ldr	r3, [pc, #624]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f92:	091b      	lsrs	r3, r3, #4
 8011f94:	f003 0301 	and.w	r3, r3, #1
 8011f98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8011f9a:	4b99      	ldr	r3, [pc, #612]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f9e:	08db      	lsrs	r3, r3, #3
 8011fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011fa4:	693a      	ldr	r2, [r7, #16]
 8011fa6:	fb02 f303 	mul.w	r3, r2, r3
 8011faa:	ee07 3a90 	vmov	s15, r3
 8011fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011fb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f000 8111 	beq.w	80121e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	2b02      	cmp	r3, #2
 8011fc2:	f000 8083 	beq.w	80120cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	2b02      	cmp	r3, #2
 8011fca:	f200 80a1 	bhi.w	8012110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d003      	beq.n	8011fdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d056      	beq.n	8012088 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8011fda:	e099      	b.n	8012110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011fdc:	4b88      	ldr	r3, [pc, #544]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	f003 0320 	and.w	r3, r3, #32
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d02d      	beq.n	8012044 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011fe8:	4b85      	ldr	r3, [pc, #532]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	08db      	lsrs	r3, r3, #3
 8011fee:	f003 0303 	and.w	r3, r3, #3
 8011ff2:	4a84      	ldr	r2, [pc, #528]	@ (8012204 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8011ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8011ff8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	ee07 3a90 	vmov	s15, r3
 8012000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	ee07 3a90 	vmov	s15, r3
 801200a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801200e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012012:	4b7b      	ldr	r3, [pc, #492]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801201a:	ee07 3a90 	vmov	s15, r3
 801201e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012022:	ed97 6a03 	vldr	s12, [r7, #12]
 8012026:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8012208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801202a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801202e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801203e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012042:	e087      	b.n	8012154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	ee07 3a90 	vmov	s15, r3
 801204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801204e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801220c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8012052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012056:	4b6a      	ldr	r3, [pc, #424]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801205a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801205e:	ee07 3a90 	vmov	s15, r3
 8012062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012066:	ed97 6a03 	vldr	s12, [r7, #12]
 801206a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8012208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801206e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801207a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012086:	e065      	b.n	8012154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	ee07 3a90 	vmov	s15, r3
 801208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012092:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8012210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801209a:	4b59      	ldr	r3, [pc, #356]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801209c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120a2:	ee07 3a90 	vmov	s15, r3
 80120a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80120aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80120ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8012208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80120b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80120b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80120ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80120be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80120c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80120ca:	e043      	b.n	8012154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	ee07 3a90 	vmov	s15, r3
 80120d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8012214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80120da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80120de:	4b48      	ldr	r3, [pc, #288]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120e6:	ee07 3a90 	vmov	s15, r3
 80120ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80120ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80120f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8012208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80120f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80120fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80120fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012106:	ee67 7a27 	vmul.f32	s15, s14, s15
 801210a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801210e:	e021      	b.n	8012154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	ee07 3a90 	vmov	s15, r3
 8012116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801211a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8012210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801211e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012122:	4b37      	ldr	r3, [pc, #220]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801212a:	ee07 3a90 	vmov	s15, r3
 801212e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012132:	ed97 6a03 	vldr	s12, [r7, #12]
 8012136:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8012208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801213a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801213e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801214e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012152:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8012154:	4b2a      	ldr	r3, [pc, #168]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012158:	0a5b      	lsrs	r3, r3, #9
 801215a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801215e:	ee07 3a90 	vmov	s15, r3
 8012162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801216a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801216e:	edd7 6a07 	vldr	s13, [r7, #28]
 8012172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801217a:	ee17 2a90 	vmov	r2, s15
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8012182:	4b1f      	ldr	r3, [pc, #124]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012186:	0c1b      	lsrs	r3, r3, #16
 8012188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801218c:	ee07 3a90 	vmov	s15, r3
 8012190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012194:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012198:	ee37 7a87 	vadd.f32	s14, s15, s14
 801219c:	edd7 6a07 	vldr	s13, [r7, #28]
 80121a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80121a8:	ee17 2a90 	vmov	r2, s15
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80121b0:	4b13      	ldr	r3, [pc, #76]	@ (8012200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121b4:	0e1b      	lsrs	r3, r3, #24
 80121b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80121ba:	ee07 3a90 	vmov	s15, r3
 80121be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80121c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80121ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80121ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80121d6:	ee17 2a90 	vmov	r2, s15
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80121de:	e008      	b.n	80121f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2200      	movs	r2, #0
 80121e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2200      	movs	r2, #0
 80121f0:	609a      	str	r2, [r3, #8]
}
 80121f2:	bf00      	nop
 80121f4:	3724      	adds	r7, #36	@ 0x24
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr
 80121fe:	bf00      	nop
 8012200:	58024400 	.word	0x58024400
 8012204:	03d09000 	.word	0x03d09000
 8012208:	46000000 	.word	0x46000000
 801220c:	4c742400 	.word	0x4c742400
 8012210:	4a742400 	.word	0x4a742400
 8012214:	4bbebc20 	.word	0x4bbebc20

08012218 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8012218:	b480      	push	{r7}
 801221a:	b089      	sub	sp, #36	@ 0x24
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012220:	4ba1      	ldr	r3, [pc, #644]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012224:	f003 0303 	and.w	r3, r3, #3
 8012228:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801222a:	4b9f      	ldr	r3, [pc, #636]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801222e:	0d1b      	lsrs	r3, r3, #20
 8012230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012234:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8012236:	4b9c      	ldr	r3, [pc, #624]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801223a:	0a1b      	lsrs	r3, r3, #8
 801223c:	f003 0301 	and.w	r3, r3, #1
 8012240:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8012242:	4b99      	ldr	r3, [pc, #612]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012246:	08db      	lsrs	r3, r3, #3
 8012248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801224c:	693a      	ldr	r2, [r7, #16]
 801224e:	fb02 f303 	mul.w	r3, r2, r3
 8012252:	ee07 3a90 	vmov	s15, r3
 8012256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801225a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2b00      	cmp	r3, #0
 8012262:	f000 8111 	beq.w	8012488 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8012266:	69bb      	ldr	r3, [r7, #24]
 8012268:	2b02      	cmp	r3, #2
 801226a:	f000 8083 	beq.w	8012374 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801226e:	69bb      	ldr	r3, [r7, #24]
 8012270:	2b02      	cmp	r3, #2
 8012272:	f200 80a1 	bhi.w	80123b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d003      	beq.n	8012284 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	2b01      	cmp	r3, #1
 8012280:	d056      	beq.n	8012330 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8012282:	e099      	b.n	80123b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012284:	4b88      	ldr	r3, [pc, #544]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f003 0320 	and.w	r3, r3, #32
 801228c:	2b00      	cmp	r3, #0
 801228e:	d02d      	beq.n	80122ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012290:	4b85      	ldr	r3, [pc, #532]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	08db      	lsrs	r3, r3, #3
 8012296:	f003 0303 	and.w	r3, r3, #3
 801229a:	4a84      	ldr	r2, [pc, #528]	@ (80124ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801229c:	fa22 f303 	lsr.w	r3, r2, r3
 80122a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	ee07 3a90 	vmov	s15, r3
 80122a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	ee07 3a90 	vmov	s15, r3
 80122b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122ba:	4b7b      	ldr	r3, [pc, #492]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80122bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122c2:	ee07 3a90 	vmov	s15, r3
 80122c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80122ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80124b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80122d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80122de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80122ea:	e087      	b.n	80123fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	ee07 3a90 	vmov	s15, r3
 80122f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80124b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80122fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122fe:	4b6a      	ldr	r3, [pc, #424]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012306:	ee07 3a90 	vmov	s15, r3
 801230a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801230e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012312:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80124b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801231a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801231e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012326:	ee67 7a27 	vmul.f32	s15, s14, s15
 801232a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801232e:	e065      	b.n	80123fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	ee07 3a90 	vmov	s15, r3
 8012336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801233a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80124b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801233e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012342:	4b59      	ldr	r3, [pc, #356]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801234a:	ee07 3a90 	vmov	s15, r3
 801234e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012352:	ed97 6a03 	vldr	s12, [r7, #12]
 8012356:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80124b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801235a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801235e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801236a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801236e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012372:	e043      	b.n	80123fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	ee07 3a90 	vmov	s15, r3
 801237a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801237e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80124bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8012382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012386:	4b48      	ldr	r3, [pc, #288]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801238a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801238e:	ee07 3a90 	vmov	s15, r3
 8012392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012396:	ed97 6a03 	vldr	s12, [r7, #12]
 801239a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80124b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801239e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80123a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80123a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80123aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80123b6:	e021      	b.n	80123fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	ee07 3a90 	vmov	s15, r3
 80123be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80124b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80123c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80123ca:	4b37      	ldr	r3, [pc, #220]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123d2:	ee07 3a90 	vmov	s15, r3
 80123d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80123da:	ed97 6a03 	vldr	s12, [r7, #12]
 80123de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80124b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80123e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80123e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80123ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80123ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80123fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80123fc:	4b2a      	ldr	r3, [pc, #168]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012400:	0a5b      	lsrs	r3, r3, #9
 8012402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012406:	ee07 3a90 	vmov	s15, r3
 801240a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801240e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012416:	edd7 6a07 	vldr	s13, [r7, #28]
 801241a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801241e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012422:	ee17 2a90 	vmov	r2, s15
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801242a:	4b1f      	ldr	r3, [pc, #124]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801242e:	0c1b      	lsrs	r3, r3, #16
 8012430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012434:	ee07 3a90 	vmov	s15, r3
 8012438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801243c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012440:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012444:	edd7 6a07 	vldr	s13, [r7, #28]
 8012448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801244c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012450:	ee17 2a90 	vmov	r2, s15
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8012458:	4b13      	ldr	r3, [pc, #76]	@ (80124a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801245c:	0e1b      	lsrs	r3, r3, #24
 801245e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012462:	ee07 3a90 	vmov	s15, r3
 8012466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801246a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801246e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012472:	edd7 6a07 	vldr	s13, [r7, #28]
 8012476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801247a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801247e:	ee17 2a90 	vmov	r2, s15
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8012486:	e008      	b.n	801249a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2200      	movs	r2, #0
 8012492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2200      	movs	r2, #0
 8012498:	609a      	str	r2, [r3, #8]
}
 801249a:	bf00      	nop
 801249c:	3724      	adds	r7, #36	@ 0x24
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop
 80124a8:	58024400 	.word	0x58024400
 80124ac:	03d09000 	.word	0x03d09000
 80124b0:	46000000 	.word	0x46000000
 80124b4:	4c742400 	.word	0x4c742400
 80124b8:	4a742400 	.word	0x4a742400
 80124bc:	4bbebc20 	.word	0x4bbebc20

080124c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80124c0:	b480      	push	{r7}
 80124c2:	b089      	sub	sp, #36	@ 0x24
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80124c8:	4ba0      	ldr	r3, [pc, #640]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80124ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124cc:	f003 0303 	and.w	r3, r3, #3
 80124d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80124d2:	4b9e      	ldr	r3, [pc, #632]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80124d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124d6:	091b      	lsrs	r3, r3, #4
 80124d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80124dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80124de:	4b9b      	ldr	r3, [pc, #620]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80124e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124e2:	f003 0301 	and.w	r3, r3, #1
 80124e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80124e8:	4b98      	ldr	r3, [pc, #608]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80124ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80124ec:	08db      	lsrs	r3, r3, #3
 80124ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80124f2:	693a      	ldr	r2, [r7, #16]
 80124f4:	fb02 f303 	mul.w	r3, r2, r3
 80124f8:	ee07 3a90 	vmov	s15, r3
 80124fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012500:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	2b00      	cmp	r3, #0
 8012508:	f000 8111 	beq.w	801272e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	2b02      	cmp	r3, #2
 8012510:	f000 8083 	beq.w	801261a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	2b02      	cmp	r3, #2
 8012518:	f200 80a1 	bhi.w	801265e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801251c:	69bb      	ldr	r3, [r7, #24]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d003      	beq.n	801252a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8012522:	69bb      	ldr	r3, [r7, #24]
 8012524:	2b01      	cmp	r3, #1
 8012526:	d056      	beq.n	80125d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8012528:	e099      	b.n	801265e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801252a:	4b88      	ldr	r3, [pc, #544]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	f003 0320 	and.w	r3, r3, #32
 8012532:	2b00      	cmp	r3, #0
 8012534:	d02d      	beq.n	8012592 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012536:	4b85      	ldr	r3, [pc, #532]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	08db      	lsrs	r3, r3, #3
 801253c:	f003 0303 	and.w	r3, r3, #3
 8012540:	4a83      	ldr	r2, [pc, #524]	@ (8012750 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8012542:	fa22 f303 	lsr.w	r3, r2, r3
 8012546:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	ee07 3a90 	vmov	s15, r3
 801254e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	ee07 3a90 	vmov	s15, r3
 8012558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801255c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012560:	4b7a      	ldr	r3, [pc, #488]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012568:	ee07 3a90 	vmov	s15, r3
 801256c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012570:	ed97 6a03 	vldr	s12, [r7, #12]
 8012574:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8012754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801257c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012580:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012588:	ee67 7a27 	vmul.f32	s15, s14, s15
 801258c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012590:	e087      	b.n	80126a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	ee07 3a90 	vmov	s15, r3
 8012598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801259c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8012758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80125a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80125a4:	4b69      	ldr	r3, [pc, #420]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80125a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125ac:	ee07 3a90 	vmov	s15, r3
 80125b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80125b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80125b8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8012754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80125bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80125c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80125c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80125d4:	e065      	b.n	80126a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	ee07 3a90 	vmov	s15, r3
 80125dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125e0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801275c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80125e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80125e8:	4b58      	ldr	r3, [pc, #352]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80125ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125f0:	ee07 3a90 	vmov	s15, r3
 80125f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80125f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80125fc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8012754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801260c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012618:	e043      	b.n	80126a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	ee07 3a90 	vmov	s15, r3
 8012620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012624:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8012760 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8012628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801262c:	4b47      	ldr	r3, [pc, #284]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012634:	ee07 3a90 	vmov	s15, r3
 8012638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801263c:	ed97 6a03 	vldr	s12, [r7, #12]
 8012640:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8012754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801264c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801265c:	e021      	b.n	80126a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	ee07 3a90 	vmov	s15, r3
 8012664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012668:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8012758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801266c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012670:	4b36      	ldr	r3, [pc, #216]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012678:	ee07 3a90 	vmov	s15, r3
 801267c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012680:	ed97 6a03 	vldr	s12, [r7, #12]
 8012684:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801268c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012698:	ee67 7a27 	vmul.f32	s15, s14, s15
 801269c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80126a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80126a2:	4b2a      	ldr	r3, [pc, #168]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126a6:	0a5b      	lsrs	r3, r3, #9
 80126a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80126ac:	ee07 3a90 	vmov	s15, r3
 80126b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80126b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80126bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80126c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80126c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126c8:	ee17 2a90 	vmov	r2, s15
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80126d0:	4b1e      	ldr	r3, [pc, #120]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126d4:	0c1b      	lsrs	r3, r3, #16
 80126d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80126da:	ee07 3a90 	vmov	s15, r3
 80126de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80126e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80126ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80126ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80126f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126f6:	ee17 2a90 	vmov	r2, s15
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80126fe:	4b13      	ldr	r3, [pc, #76]	@ (801274c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012702:	0e1b      	lsrs	r3, r3, #24
 8012704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012708:	ee07 3a90 	vmov	s15, r3
 801270c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012718:	edd7 6a07 	vldr	s13, [r7, #28]
 801271c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012724:	ee17 2a90 	vmov	r2, s15
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801272c:	e008      	b.n	8012740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2200      	movs	r2, #0
 8012732:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2200      	movs	r2, #0
 8012738:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2200      	movs	r2, #0
 801273e:	609a      	str	r2, [r3, #8]
}
 8012740:	bf00      	nop
 8012742:	3724      	adds	r7, #36	@ 0x24
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr
 801274c:	58024400 	.word	0x58024400
 8012750:	03d09000 	.word	0x03d09000
 8012754:	46000000 	.word	0x46000000
 8012758:	4c742400 	.word	0x4c742400
 801275c:	4a742400 	.word	0x4a742400
 8012760:	4bbebc20 	.word	0x4bbebc20

08012764 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801276e:	2300      	movs	r3, #0
 8012770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012772:	4b53      	ldr	r3, [pc, #332]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012776:	f003 0303 	and.w	r3, r3, #3
 801277a:	2b03      	cmp	r3, #3
 801277c:	d101      	bne.n	8012782 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801277e:	2301      	movs	r3, #1
 8012780:	e099      	b.n	80128b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012782:	4b4f      	ldr	r3, [pc, #316]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	4a4e      	ldr	r2, [pc, #312]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012788:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801278c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801278e:	f7f1 fb61 	bl	8003e54 <HAL_GetTick>
 8012792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012794:	e008      	b.n	80127a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8012796:	f7f1 fb5d 	bl	8003e54 <HAL_GetTick>
 801279a:	4602      	mov	r2, r0
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	2b02      	cmp	r3, #2
 80127a2:	d901      	bls.n	80127a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80127a4:	2303      	movs	r3, #3
 80127a6:	e086      	b.n	80128b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80127a8:	4b45      	ldr	r3, [pc, #276]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d1f0      	bne.n	8012796 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80127b4:	4b42      	ldr	r3, [pc, #264]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 80127b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	031b      	lsls	r3, r3, #12
 80127c2:	493f      	ldr	r1, [pc, #252]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 80127c4:	4313      	orrs	r3, r2
 80127c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	3b01      	subs	r3, #1
 80127ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	689b      	ldr	r3, [r3, #8]
 80127d6:	3b01      	subs	r3, #1
 80127d8:	025b      	lsls	r3, r3, #9
 80127da:	b29b      	uxth	r3, r3
 80127dc:	431a      	orrs	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	68db      	ldr	r3, [r3, #12]
 80127e2:	3b01      	subs	r3, #1
 80127e4:	041b      	lsls	r3, r3, #16
 80127e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80127ea:	431a      	orrs	r2, r3
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	691b      	ldr	r3, [r3, #16]
 80127f0:	3b01      	subs	r3, #1
 80127f2:	061b      	lsls	r3, r3, #24
 80127f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80127f8:	4931      	ldr	r1, [pc, #196]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 80127fa:	4313      	orrs	r3, r2
 80127fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80127fe:	4b30      	ldr	r3, [pc, #192]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012802:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	695b      	ldr	r3, [r3, #20]
 801280a:	492d      	ldr	r1, [pc, #180]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 801280c:	4313      	orrs	r3, r2
 801280e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012810:	4b2b      	ldr	r3, [pc, #172]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012814:	f023 0220 	bic.w	r2, r3, #32
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	699b      	ldr	r3, [r3, #24]
 801281c:	4928      	ldr	r1, [pc, #160]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 801281e:	4313      	orrs	r3, r2
 8012820:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012822:	4b27      	ldr	r3, [pc, #156]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012826:	4a26      	ldr	r2, [pc, #152]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012828:	f023 0310 	bic.w	r3, r3, #16
 801282c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801282e:	4b24      	ldr	r3, [pc, #144]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012830:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012832:	4b24      	ldr	r3, [pc, #144]	@ (80128c4 <RCCEx_PLL2_Config+0x160>)
 8012834:	4013      	ands	r3, r2
 8012836:	687a      	ldr	r2, [r7, #4]
 8012838:	69d2      	ldr	r2, [r2, #28]
 801283a:	00d2      	lsls	r2, r2, #3
 801283c:	4920      	ldr	r1, [pc, #128]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 801283e:	4313      	orrs	r3, r2
 8012840:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012842:	4b1f      	ldr	r3, [pc, #124]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012846:	4a1e      	ldr	r2, [pc, #120]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012848:	f043 0310 	orr.w	r3, r3, #16
 801284c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d106      	bne.n	8012862 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012854:	4b1a      	ldr	r3, [pc, #104]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012858:	4a19      	ldr	r2, [pc, #100]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 801285a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801285e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012860:	e00f      	b.n	8012882 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	2b01      	cmp	r3, #1
 8012866:	d106      	bne.n	8012876 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012868:	4b15      	ldr	r3, [pc, #84]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 801286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801286c:	4a14      	ldr	r2, [pc, #80]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 801286e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012874:	e005      	b.n	8012882 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012876:	4b12      	ldr	r3, [pc, #72]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801287a:	4a11      	ldr	r2, [pc, #68]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 801287c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012880:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012882:	4b0f      	ldr	r3, [pc, #60]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	4a0e      	ldr	r2, [pc, #56]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 8012888:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801288c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801288e:	f7f1 fae1 	bl	8003e54 <HAL_GetTick>
 8012892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012894:	e008      	b.n	80128a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8012896:	f7f1 fadd 	bl	8003e54 <HAL_GetTick>
 801289a:	4602      	mov	r2, r0
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	1ad3      	subs	r3, r2, r3
 80128a0:	2b02      	cmp	r3, #2
 80128a2:	d901      	bls.n	80128a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80128a4:	2303      	movs	r3, #3
 80128a6:	e006      	b.n	80128b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80128a8:	4b05      	ldr	r3, [pc, #20]	@ (80128c0 <RCCEx_PLL2_Config+0x15c>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d0f0      	beq.n	8012896 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80128b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3710      	adds	r7, #16
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	58024400 	.word	0x58024400
 80128c4:	ffff0007 	.word	0xffff0007

080128c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80128d2:	2300      	movs	r3, #0
 80128d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80128d6:	4b53      	ldr	r3, [pc, #332]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80128d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128da:	f003 0303 	and.w	r3, r3, #3
 80128de:	2b03      	cmp	r3, #3
 80128e0:	d101      	bne.n	80128e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80128e2:	2301      	movs	r3, #1
 80128e4:	e099      	b.n	8012a1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80128e6:	4b4f      	ldr	r3, [pc, #316]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4a4e      	ldr	r2, [pc, #312]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80128ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80128f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80128f2:	f7f1 faaf 	bl	8003e54 <HAL_GetTick>
 80128f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80128f8:	e008      	b.n	801290c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80128fa:	f7f1 faab 	bl	8003e54 <HAL_GetTick>
 80128fe:	4602      	mov	r2, r0
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	1ad3      	subs	r3, r2, r3
 8012904:	2b02      	cmp	r3, #2
 8012906:	d901      	bls.n	801290c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012908:	2303      	movs	r3, #3
 801290a:	e086      	b.n	8012a1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801290c:	4b45      	ldr	r3, [pc, #276]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012914:	2b00      	cmp	r3, #0
 8012916:	d1f0      	bne.n	80128fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012918:	4b42      	ldr	r3, [pc, #264]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 801291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801291c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	051b      	lsls	r3, r3, #20
 8012926:	493f      	ldr	r1, [pc, #252]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 8012928:	4313      	orrs	r3, r2
 801292a:	628b      	str	r3, [r1, #40]	@ 0x28
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	3b01      	subs	r3, #1
 8012932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	689b      	ldr	r3, [r3, #8]
 801293a:	3b01      	subs	r3, #1
 801293c:	025b      	lsls	r3, r3, #9
 801293e:	b29b      	uxth	r3, r3
 8012940:	431a      	orrs	r2, r3
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	68db      	ldr	r3, [r3, #12]
 8012946:	3b01      	subs	r3, #1
 8012948:	041b      	lsls	r3, r3, #16
 801294a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801294e:	431a      	orrs	r2, r3
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	691b      	ldr	r3, [r3, #16]
 8012954:	3b01      	subs	r3, #1
 8012956:	061b      	lsls	r3, r3, #24
 8012958:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801295c:	4931      	ldr	r1, [pc, #196]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 801295e:	4313      	orrs	r3, r2
 8012960:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012962:	4b30      	ldr	r3, [pc, #192]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 8012964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012966:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	695b      	ldr	r3, [r3, #20]
 801296e:	492d      	ldr	r1, [pc, #180]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 8012970:	4313      	orrs	r3, r2
 8012972:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012974:	4b2b      	ldr	r3, [pc, #172]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 8012976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012978:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	699b      	ldr	r3, [r3, #24]
 8012980:	4928      	ldr	r1, [pc, #160]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 8012982:	4313      	orrs	r3, r2
 8012984:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012986:	4b27      	ldr	r3, [pc, #156]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 8012988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801298a:	4a26      	ldr	r2, [pc, #152]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 801298c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012990:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012992:	4b24      	ldr	r3, [pc, #144]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 8012994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012996:	4b24      	ldr	r3, [pc, #144]	@ (8012a28 <RCCEx_PLL3_Config+0x160>)
 8012998:	4013      	ands	r3, r2
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	69d2      	ldr	r2, [r2, #28]
 801299e:	00d2      	lsls	r2, r2, #3
 80129a0:	4920      	ldr	r1, [pc, #128]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129a2:	4313      	orrs	r3, r2
 80129a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80129a6:	4b1f      	ldr	r3, [pc, #124]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129aa:	4a1e      	ldr	r2, [pc, #120]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80129b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d106      	bne.n	80129c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80129b8:	4b1a      	ldr	r3, [pc, #104]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129bc:	4a19      	ldr	r2, [pc, #100]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80129c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80129c4:	e00f      	b.n	80129e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d106      	bne.n	80129da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80129cc:	4b15      	ldr	r3, [pc, #84]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129d0:	4a14      	ldr	r2, [pc, #80]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80129d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80129d8:	e005      	b.n	80129e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80129da:	4b12      	ldr	r3, [pc, #72]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129de:	4a11      	ldr	r2, [pc, #68]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80129e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80129e6:	4b0f      	ldr	r3, [pc, #60]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4a0e      	ldr	r2, [pc, #56]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 80129ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80129f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80129f2:	f7f1 fa2f 	bl	8003e54 <HAL_GetTick>
 80129f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80129f8:	e008      	b.n	8012a0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80129fa:	f7f1 fa2b 	bl	8003e54 <HAL_GetTick>
 80129fe:	4602      	mov	r2, r0
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	1ad3      	subs	r3, r2, r3
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d901      	bls.n	8012a0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012a08:	2303      	movs	r3, #3
 8012a0a:	e006      	b.n	8012a1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012a0c:	4b05      	ldr	r3, [pc, #20]	@ (8012a24 <RCCEx_PLL3_Config+0x15c>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d0f0      	beq.n	80129fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3710      	adds	r7, #16
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}
 8012a22:	bf00      	nop
 8012a24:	58024400 	.word	0x58024400
 8012a28:	ffff0007 	.word	0xffff0007

08012a2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d101      	bne.n	8012a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	e10f      	b.n	8012c5e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2200      	movs	r2, #0
 8012a42:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	4a87      	ldr	r2, [pc, #540]	@ (8012c68 <HAL_SPI_Init+0x23c>)
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d00f      	beq.n	8012a6e <HAL_SPI_Init+0x42>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4a86      	ldr	r2, [pc, #536]	@ (8012c6c <HAL_SPI_Init+0x240>)
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d00a      	beq.n	8012a6e <HAL_SPI_Init+0x42>
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a84      	ldr	r2, [pc, #528]	@ (8012c70 <HAL_SPI_Init+0x244>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d005      	beq.n	8012a6e <HAL_SPI_Init+0x42>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	2b0f      	cmp	r3, #15
 8012a68:	d901      	bls.n	8012a6e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e0f7      	b.n	8012c5e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 ff6c 	bl	801394c <SPI_GetPacketSize>
 8012a74:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4a7b      	ldr	r2, [pc, #492]	@ (8012c68 <HAL_SPI_Init+0x23c>)
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	d00c      	beq.n	8012a9a <HAL_SPI_Init+0x6e>
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	4a79      	ldr	r2, [pc, #484]	@ (8012c6c <HAL_SPI_Init+0x240>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d007      	beq.n	8012a9a <HAL_SPI_Init+0x6e>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4a78      	ldr	r2, [pc, #480]	@ (8012c70 <HAL_SPI_Init+0x244>)
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d002      	beq.n	8012a9a <HAL_SPI_Init+0x6e>
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2b08      	cmp	r3, #8
 8012a98:	d811      	bhi.n	8012abe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8012a9e:	4a72      	ldr	r2, [pc, #456]	@ (8012c68 <HAL_SPI_Init+0x23c>)
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d009      	beq.n	8012ab8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4a70      	ldr	r2, [pc, #448]	@ (8012c6c <HAL_SPI_Init+0x240>)
 8012aaa:	4293      	cmp	r3, r2
 8012aac:	d004      	beq.n	8012ab8 <HAL_SPI_Init+0x8c>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	4a6f      	ldr	r2, [pc, #444]	@ (8012c70 <HAL_SPI_Init+0x244>)
 8012ab4:	4293      	cmp	r3, r2
 8012ab6:	d104      	bne.n	8012ac2 <HAL_SPI_Init+0x96>
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2b10      	cmp	r3, #16
 8012abc:	d901      	bls.n	8012ac2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e0cd      	b.n	8012c5e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d106      	bne.n	8012adc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ef fe08 	bl	80026ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2202      	movs	r2, #2
 8012ae0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f022 0201 	bic.w	r2, r2, #1
 8012af2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8012afe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	699b      	ldr	r3, [r3, #24]
 8012b04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012b08:	d119      	bne.n	8012b3e <HAL_SPI_Init+0x112>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012b12:	d103      	bne.n	8012b1c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d008      	beq.n	8012b2e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d10c      	bne.n	8012b3e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b2c:	d107      	bne.n	8012b3e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012b3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d00f      	beq.n	8012b6a <HAL_SPI_Init+0x13e>
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	2b06      	cmp	r3, #6
 8012b50:	d90b      	bls.n	8012b6a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	430a      	orrs	r2, r1
 8012b66:	601a      	str	r2, [r3, #0]
 8012b68:	e007      	b.n	8012b7a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012b78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	69da      	ldr	r2, [r3, #28]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b82:	431a      	orrs	r2, r3
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	431a      	orrs	r2, r3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b8c:	ea42 0103 	orr.w	r1, r2, r3
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	68da      	ldr	r2, [r3, #12]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	430a      	orrs	r2, r1
 8012b9a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ba4:	431a      	orrs	r2, r3
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012baa:	431a      	orrs	r2, r3
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	699b      	ldr	r3, [r3, #24]
 8012bb0:	431a      	orrs	r2, r3
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	691b      	ldr	r3, [r3, #16]
 8012bb6:	431a      	orrs	r2, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	695b      	ldr	r3, [r3, #20]
 8012bbc:	431a      	orrs	r2, r3
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6a1b      	ldr	r3, [r3, #32]
 8012bc2:	431a      	orrs	r2, r3
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	431a      	orrs	r2, r3
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012bce:	431a      	orrs	r2, r3
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	689b      	ldr	r3, [r3, #8]
 8012bd4:	431a      	orrs	r2, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012bda:	ea42 0103 	orr.w	r1, r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	430a      	orrs	r2, r1
 8012be8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d113      	bne.n	8012c1a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012c04:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	689b      	ldr	r3, [r3, #8]
 8012c0c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012c18:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f022 0201 	bic.w	r2, r2, #1
 8012c28:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00a      	beq.n	8012c4c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	430a      	orrs	r2, r1
 8012c4a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2201      	movs	r2, #1
 8012c58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8012c5c:	2300      	movs	r3, #0
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3710      	adds	r7, #16
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	40013000 	.word	0x40013000
 8012c6c:	40003800 	.word	0x40003800
 8012c70:	40003c00 	.word	0x40003c00

08012c74 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b088      	sub	sp, #32
 8012c78:	af02      	add	r7, sp, #8
 8012c7a:	60f8      	str	r0, [r7, #12]
 8012c7c:	60b9      	str	r1, [r7, #8]
 8012c7e:	603b      	str	r3, [r7, #0]
 8012c80:	4613      	mov	r3, r2
 8012c82:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	3320      	adds	r3, #32
 8012c8a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012c8c:	f7f1 f8e2 	bl	8003e54 <HAL_GetTick>
 8012c90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012c98:	b2db      	uxtb	r3, r3
 8012c9a:	2b01      	cmp	r3, #1
 8012c9c:	d001      	beq.n	8012ca2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8012c9e:	2302      	movs	r3, #2
 8012ca0:	e1d1      	b.n	8013046 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d002      	beq.n	8012cae <HAL_SPI_Transmit+0x3a>
 8012ca8:	88fb      	ldrh	r3, [r7, #6]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d101      	bne.n	8012cb2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8012cae:	2301      	movs	r3, #1
 8012cb0:	e1c9      	b.n	8013046 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d101      	bne.n	8012cc0 <HAL_SPI_Transmit+0x4c>
 8012cbc:	2302      	movs	r3, #2
 8012cbe:	e1c2      	b.n	8013046 <HAL_SPI_Transmit+0x3d2>
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2203      	movs	r2, #3
 8012ccc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	68ba      	ldr	r2, [r7, #8]
 8012cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	88fa      	ldrh	r2, [r7, #6]
 8012ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	88fa      	ldrh	r2, [r7, #6]
 8012cea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	2200      	movs	r2, #0
 8012d08:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	689b      	ldr	r3, [r3, #8]
 8012d14:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8012d18:	d108      	bne.n	8012d2c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	e009      	b.n	8012d40 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8012d3e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	685a      	ldr	r2, [r3, #4]
 8012d46:	4b96      	ldr	r3, [pc, #600]	@ (8012fa0 <HAL_SPI_Transmit+0x32c>)
 8012d48:	4013      	ands	r3, r2
 8012d4a:	88f9      	ldrh	r1, [r7, #6]
 8012d4c:	68fa      	ldr	r2, [r7, #12]
 8012d4e:	6812      	ldr	r2, [r2, #0]
 8012d50:	430b      	orrs	r3, r1
 8012d52:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f042 0201 	orr.w	r2, r2, #1
 8012d62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012d6c:	d107      	bne.n	8012d7e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012d7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	2b0f      	cmp	r3, #15
 8012d84:	d947      	bls.n	8012e16 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8012d86:	e03f      	b.n	8012e08 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	695b      	ldr	r3, [r3, #20]
 8012d8e:	f003 0302 	and.w	r3, r3, #2
 8012d92:	2b02      	cmp	r3, #2
 8012d94:	d114      	bne.n	8012dc0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	6812      	ldr	r2, [r2, #0]
 8012da0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012da6:	1d1a      	adds	r2, r3, #4
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	3b01      	subs	r3, #1
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012dbe:	e023      	b.n	8012e08 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012dc0:	f7f1 f848 	bl	8003e54 <HAL_GetTick>
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	1ad3      	subs	r3, r2, r3
 8012dca:	683a      	ldr	r2, [r7, #0]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d803      	bhi.n	8012dd8 <HAL_SPI_Transmit+0x164>
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd6:	d102      	bne.n	8012dde <HAL_SPI_Transmit+0x16a>
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d114      	bne.n	8012e08 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8012dde:	68f8      	ldr	r0, [r7, #12]
 8012de0:	f000 fce6 	bl	80137b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012dea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2201      	movs	r2, #1
 8012df8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8012e04:	2303      	movs	r3, #3
 8012e06:	e11e      	b.n	8013046 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d1b9      	bne.n	8012d88 <HAL_SPI_Transmit+0x114>
 8012e14:	e0f1      	b.n	8012ffa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	68db      	ldr	r3, [r3, #12]
 8012e1a:	2b07      	cmp	r3, #7
 8012e1c:	f240 80e6 	bls.w	8012fec <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8012e20:	e05d      	b.n	8012ede <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	695b      	ldr	r3, [r3, #20]
 8012e28:	f003 0302 	and.w	r3, r3, #2
 8012e2c:	2b02      	cmp	r3, #2
 8012e2e:	d132      	bne.n	8012e96 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	2b01      	cmp	r3, #1
 8012e3a:	d918      	bls.n	8012e6e <HAL_SPI_Transmit+0x1fa>
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d014      	beq.n	8012e6e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	6812      	ldr	r2, [r2, #0]
 8012e4e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e54:	1d1a      	adds	r2, r3, #4
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	3b02      	subs	r3, #2
 8012e64:	b29a      	uxth	r2, r3
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012e6c:	e037      	b.n	8012ede <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e72:	881a      	ldrh	r2, [r3, #0]
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e7c:	1c9a      	adds	r2, r3, #2
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012e88:	b29b      	uxth	r3, r3
 8012e8a:	3b01      	subs	r3, #1
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012e94:	e023      	b.n	8012ede <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012e96:	f7f0 ffdd 	bl	8003e54 <HAL_GetTick>
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	1ad3      	subs	r3, r2, r3
 8012ea0:	683a      	ldr	r2, [r7, #0]
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d803      	bhi.n	8012eae <HAL_SPI_Transmit+0x23a>
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eac:	d102      	bne.n	8012eb4 <HAL_SPI_Transmit+0x240>
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d114      	bne.n	8012ede <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	f000 fc7b 	bl	80137b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ec0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	2201      	movs	r2, #1
 8012ece:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8012eda:	2303      	movs	r3, #3
 8012edc:	e0b3      	b.n	8013046 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012ee4:	b29b      	uxth	r3, r3
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d19b      	bne.n	8012e22 <HAL_SPI_Transmit+0x1ae>
 8012eea:	e086      	b.n	8012ffa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	695b      	ldr	r3, [r3, #20]
 8012ef2:	f003 0302 	and.w	r3, r3, #2
 8012ef6:	2b02      	cmp	r3, #2
 8012ef8:	d154      	bne.n	8012fa4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	2b03      	cmp	r3, #3
 8012f04:	d918      	bls.n	8012f38 <HAL_SPI_Transmit+0x2c4>
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f0a:	2b40      	cmp	r3, #64	@ 0x40
 8012f0c:	d914      	bls.n	8012f38 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	6812      	ldr	r2, [r2, #0]
 8012f18:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f1e:	1d1a      	adds	r2, r3, #4
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012f2a:	b29b      	uxth	r3, r3
 8012f2c:	3b04      	subs	r3, #4
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012f36:	e059      	b.n	8012fec <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	d917      	bls.n	8012f74 <HAL_SPI_Transmit+0x300>
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d013      	beq.n	8012f74 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f50:	881a      	ldrh	r2, [r3, #0]
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f5a:	1c9a      	adds	r2, r3, #2
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	3b02      	subs	r3, #2
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012f72:	e03b      	b.n	8012fec <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	3320      	adds	r3, #32
 8012f7e:	7812      	ldrb	r2, [r2, #0]
 8012f80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f86:	1c5a      	adds	r2, r3, #1
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012f92:	b29b      	uxth	r3, r3
 8012f94:	3b01      	subs	r3, #1
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012f9e:	e025      	b.n	8012fec <HAL_SPI_Transmit+0x378>
 8012fa0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012fa4:	f7f0 ff56 	bl	8003e54 <HAL_GetTick>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	1ad3      	subs	r3, r2, r3
 8012fae:	683a      	ldr	r2, [r7, #0]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d803      	bhi.n	8012fbc <HAL_SPI_Transmit+0x348>
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fba:	d102      	bne.n	8012fc2 <HAL_SPI_Transmit+0x34e>
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d114      	bne.n	8012fec <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8012fc2:	68f8      	ldr	r0, [r7, #12]
 8012fc4:	f000 fbf4 	bl	80137b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012fce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2201      	movs	r2, #1
 8012fdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8012fe8:	2303      	movs	r3, #3
 8012fea:	e02c      	b.n	8013046 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012ff2:	b29b      	uxth	r3, r3
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f47f af79 	bne.w	8012eec <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	9300      	str	r3, [sp, #0]
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	2200      	movs	r2, #0
 8013002:	2108      	movs	r1, #8
 8013004:	68f8      	ldr	r0, [r7, #12]
 8013006:	f000 fc73 	bl	80138f0 <SPI_WaitOnFlagUntilTimeout>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	d007      	beq.n	8013020 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013016:	f043 0220 	orr.w	r2, r3, #32
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	f000 fbc5 	bl	80137b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2201      	movs	r2, #1
 801302a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	2200      	movs	r2, #0
 8013032:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801303c:	2b00      	cmp	r3, #0
 801303e:	d001      	beq.n	8013044 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8013040:	2301      	movs	r3, #1
 8013042:	e000      	b.n	8013046 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8013044:	2300      	movs	r3, #0
  }
}
 8013046:	4618      	mov	r0, r3
 8013048:	3718      	adds	r7, #24
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
 801304e:	bf00      	nop

08013050 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	4613      	mov	r3, r2
 801305c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b01      	cmp	r3, #1
 8013068:	d001      	beq.n	801306e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801306a:	2302      	movs	r3, #2
 801306c:	e126      	b.n	80132bc <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d002      	beq.n	801307a <HAL_SPI_Transmit_DMA+0x2a>
 8013074:	88fb      	ldrh	r3, [r7, #6]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d101      	bne.n	801307e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801307a:	2301      	movs	r3, #1
 801307c:	e11e      	b.n	80132bc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013084:	2b01      	cmp	r3, #1
 8013086:	d101      	bne.n	801308c <HAL_SPI_Transmit_DMA+0x3c>
 8013088:	2302      	movs	r3, #2
 801308a:	e117      	b.n	80132bc <HAL_SPI_Transmit_DMA+0x26c>
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2201      	movs	r2, #1
 8013090:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2203      	movs	r2, #3
 8013098:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2200      	movs	r2, #0
 80130a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	68ba      	ldr	r2, [r7, #8]
 80130a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	88fa      	ldrh	r2, [r7, #6]
 80130ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	88fa      	ldrh	r2, [r7, #6]
 80130b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2200      	movs	r2, #0
 80130be:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	2200      	movs	r2, #0
 80130c4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2200      	movs	r2, #0
 80130ca:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2200      	movs	r2, #0
 80130d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2200      	movs	r2, #0
 80130d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	689b      	ldr	r3, [r3, #8]
 80130e0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80130e4:	d108      	bne.n	80130f8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80130f4:	601a      	str	r2, [r3, #0]
 80130f6:	e009      	b.n	801310c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801310a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	68db      	ldr	r3, [r3, #12]
 8013110:	2b0f      	cmp	r3, #15
 8013112:	d905      	bls.n	8013120 <HAL_SPI_Transmit_DMA+0xd0>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013118:	699b      	ldr	r3, [r3, #24]
 801311a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801311e:	d10f      	bne.n	8013140 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8013124:	2b07      	cmp	r3, #7
 8013126:	d911      	bls.n	801314c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801312c:	699b      	ldr	r3, [r3, #24]
 801312e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013132:	d00b      	beq.n	801314c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013138:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801313a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801313e:	d005      	beq.n	801314c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2200      	movs	r2, #0
 8013144:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8013148:	2301      	movs	r3, #1
 801314a:	e0b7      	b.n	80132bc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	68db      	ldr	r3, [r3, #12]
 8013150:	2b07      	cmp	r3, #7
 8013152:	d820      	bhi.n	8013196 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013158:	699b      	ldr	r3, [r3, #24]
 801315a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801315e:	d109      	bne.n	8013174 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013166:	b29b      	uxth	r3, r3
 8013168:	3301      	adds	r3, #1
 801316a:	105b      	asrs	r3, r3, #1
 801316c:	b29a      	uxth	r2, r3
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013178:	699b      	ldr	r3, [r3, #24]
 801317a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801317e:	d11e      	bne.n	80131be <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013186:	b29b      	uxth	r3, r3
 8013188:	3303      	adds	r3, #3
 801318a:	109b      	asrs	r3, r3, #2
 801318c:	b29a      	uxth	r2, r3
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013194:	e013      	b.n	80131be <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	2b0f      	cmp	r3, #15
 801319c:	d80f      	bhi.n	80131be <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80131a2:	699b      	ldr	r3, [r3, #24]
 80131a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80131a8:	d109      	bne.n	80131be <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	3301      	adds	r3, #1
 80131b4:	105b      	asrs	r3, r3, #1
 80131b6:	b29a      	uxth	r2, r3
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80131c2:	4a40      	ldr	r2, [pc, #256]	@ (80132c4 <HAL_SPI_Transmit_DMA+0x274>)
 80131c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80131ca:	4a3f      	ldr	r2, [pc, #252]	@ (80132c8 <HAL_SPI_Transmit_DMA+0x278>)
 80131cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80131d2:	4a3e      	ldr	r2, [pc, #248]	@ (80132cc <HAL_SPI_Transmit_DMA+0x27c>)
 80131d4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80131da:	2200      	movs	r2, #0
 80131dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	689a      	ldr	r2, [r3, #8]
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80131ec:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80131f6:	4619      	mov	r1, r3
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	3320      	adds	r3, #32
 80131fe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013206:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8013208:	f7f2 fdf6 	bl	8005df8 <HAL_DMA_Start_IT>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d011      	beq.n	8013236 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013218:	f043 0210 	orr.w	r2, r3, #16
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2201      	movs	r2, #1
 8013226:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2200      	movs	r2, #0
 801322e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8013232:	2301      	movs	r3, #1
 8013234:	e042      	b.n	80132bc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801323a:	69db      	ldr	r3, [r3, #28]
 801323c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013240:	d108      	bne.n	8013254 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	6859      	ldr	r1, [r3, #4]
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	4b20      	ldr	r3, [pc, #128]	@ (80132d0 <HAL_SPI_Transmit_DMA+0x280>)
 801324e:	400b      	ands	r3, r1
 8013250:	6053      	str	r3, [r2, #4]
 8013252:	e009      	b.n	8013268 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	685a      	ldr	r2, [r3, #4]
 801325a:	4b1d      	ldr	r3, [pc, #116]	@ (80132d0 <HAL_SPI_Transmit_DMA+0x280>)
 801325c:	4013      	ands	r3, r2
 801325e:	88f9      	ldrh	r1, [r7, #6]
 8013260:	68fa      	ldr	r2, [r7, #12]
 8013262:	6812      	ldr	r2, [r2, #0]
 8013264:	430b      	orrs	r3, r1
 8013266:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	689a      	ldr	r2, [r3, #8]
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013276:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	691a      	ldr	r2, [r3, #16]
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8013286:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	f042 0201 	orr.w	r2, r2, #1
 8013296:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80132a0:	d107      	bne.n	80132b2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80132b0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2200      	movs	r2, #0
 80132b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80132ba:	2300      	movs	r3, #0
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3710      	adds	r7, #16
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	0801371b 	.word	0x0801371b
 80132c8:	080136d5 	.word	0x080136d5
 80132cc:	08013737 	.word	0x08013737
 80132d0:	ffff0000 	.word	0xffff0000

080132d4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b08a      	sub	sp, #40	@ 0x28
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	691b      	ldr	r3, [r3, #16]
 80132e2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	695b      	ldr	r3, [r3, #20]
 80132ea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80132ec:	6a3a      	ldr	r2, [r7, #32]
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	4013      	ands	r3, r2
 80132f2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	689b      	ldr	r3, [r3, #8]
 80132fa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80132fc:	2300      	movs	r3, #0
 80132fe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013306:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	3330      	adds	r3, #48	@ 0x30
 801330e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013316:	2b00      	cmp	r3, #0
 8013318:	d010      	beq.n	801333c <HAL_SPI_IRQHandler+0x68>
 801331a:	6a3b      	ldr	r3, [r7, #32]
 801331c:	f003 0308 	and.w	r3, r3, #8
 8013320:	2b00      	cmp	r3, #0
 8013322:	d00b      	beq.n	801333c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	699a      	ldr	r2, [r3, #24]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013332:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 f9c3 	bl	80136c0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801333a:	e192      	b.n	8013662 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801333c:	69bb      	ldr	r3, [r7, #24]
 801333e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013342:	2b00      	cmp	r3, #0
 8013344:	d113      	bne.n	801336e <HAL_SPI_IRQHandler+0x9a>
 8013346:	69bb      	ldr	r3, [r7, #24]
 8013348:	f003 0320 	and.w	r3, r3, #32
 801334c:	2b00      	cmp	r3, #0
 801334e:	d10e      	bne.n	801336e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8013356:	2b00      	cmp	r3, #0
 8013358:	d009      	beq.n	801336e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	4798      	blx	r3
    hspi->RxISR(hspi);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	4798      	blx	r3
    handled = 1UL;
 801336a:	2301      	movs	r3, #1
 801336c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013374:	2b00      	cmp	r3, #0
 8013376:	d10f      	bne.n	8013398 <HAL_SPI_IRQHandler+0xc4>
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	f003 0301 	and.w	r3, r3, #1
 801337e:	2b00      	cmp	r3, #0
 8013380:	d00a      	beq.n	8013398 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8013388:	2b00      	cmp	r3, #0
 801338a:	d105      	bne.n	8013398 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	4798      	blx	r3
    handled = 1UL;
 8013394:	2301      	movs	r3, #1
 8013396:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	f003 0320 	and.w	r3, r3, #32
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d10f      	bne.n	80133c2 <HAL_SPI_IRQHandler+0xee>
 80133a2:	69bb      	ldr	r3, [r7, #24]
 80133a4:	f003 0302 	and.w	r3, r3, #2
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00a      	beq.n	80133c2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d105      	bne.n	80133c2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	4798      	blx	r3
    handled = 1UL;
 80133be:	2301      	movs	r3, #1
 80133c0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80133c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	f040 8147 	bne.w	8013658 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	f003 0308 	and.w	r3, r3, #8
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	f000 808b 	beq.w	80134ec <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	699a      	ldr	r2, [r3, #24]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f042 0208 	orr.w	r2, r2, #8
 80133e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	699a      	ldr	r2, [r3, #24]
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f042 0210 	orr.w	r2, r2, #16
 80133f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	699a      	ldr	r2, [r3, #24]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013404:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	691a      	ldr	r2, [r3, #16]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f022 0208 	bic.w	r2, r2, #8
 8013414:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	689b      	ldr	r3, [r3, #8]
 801341c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8013420:	2b00      	cmp	r3, #0
 8013422:	d13d      	bne.n	80134a0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8013424:	e036      	b.n	8013494 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	2b0f      	cmp	r3, #15
 801342c:	d90b      	bls.n	8013446 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681a      	ldr	r2, [r3, #0]
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013436:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8013438:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801343e:	1d1a      	adds	r2, r3, #4
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	665a      	str	r2, [r3, #100]	@ 0x64
 8013444:	e01d      	b.n	8013482 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	2b07      	cmp	r3, #7
 801344c:	d90b      	bls.n	8013466 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013452:	68fa      	ldr	r2, [r7, #12]
 8013454:	8812      	ldrh	r2, [r2, #0]
 8013456:	b292      	uxth	r2, r2
 8013458:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801345e:	1c9a      	adds	r2, r3, #2
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	665a      	str	r2, [r3, #100]	@ 0x64
 8013464:	e00d      	b.n	8013482 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013472:	7812      	ldrb	r2, [r2, #0]
 8013474:	b2d2      	uxtb	r2, r2
 8013476:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801347c:	1c5a      	adds	r2, r3, #1
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013488:	b29b      	uxth	r3, r3
 801348a:	3b01      	subs	r3, #1
 801348c:	b29a      	uxth	r2, r3
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801349a:	b29b      	uxth	r3, r3
 801349c:	2b00      	cmp	r3, #0
 801349e:	d1c2      	bne.n	8013426 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f000 f985 	bl	80137b0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2201      	movs	r2, #1
 80134aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d003      	beq.n	80134c0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f000 f8f7 	bl	80136ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80134be:	e0d0      	b.n	8013662 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80134c0:	7cfb      	ldrb	r3, [r7, #19]
 80134c2:	2b05      	cmp	r3, #5
 80134c4:	d103      	bne.n	80134ce <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f000 f8dc 	bl	8013684 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80134cc:	e0c6      	b.n	801365c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80134ce:	7cfb      	ldrb	r3, [r7, #19]
 80134d0:	2b04      	cmp	r3, #4
 80134d2:	d103      	bne.n	80134dc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f000 f8cb 	bl	8013670 <HAL_SPI_RxCpltCallback>
    return;
 80134da:	e0bf      	b.n	801365c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80134dc:	7cfb      	ldrb	r3, [r7, #19]
 80134de:	2b03      	cmp	r3, #3
 80134e0:	f040 80bc 	bne.w	801365c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f7ee fb1d 	bl	8001b24 <HAL_SPI_TxCpltCallback>
    return;
 80134ea:	e0b7      	b.n	801365c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80134ec:	69bb      	ldr	r3, [r7, #24]
 80134ee:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f000 80b5 	beq.w	8013662 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d00f      	beq.n	8013522 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013508:	f043 0204 	orr.w	r2, r3, #4
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	699a      	ldr	r2, [r3, #24]
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013520:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013528:	2b00      	cmp	r3, #0
 801352a:	d00f      	beq.n	801354c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013532:	f043 0201 	orr.w	r2, r3, #1
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	699a      	ldr	r2, [r3, #24]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801354a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801354c:	69bb      	ldr	r3, [r7, #24]
 801354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013552:	2b00      	cmp	r3, #0
 8013554:	d00f      	beq.n	8013576 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801355c:	f043 0208 	orr.w	r2, r3, #8
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	699a      	ldr	r2, [r3, #24]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013574:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8013576:	69bb      	ldr	r3, [r7, #24]
 8013578:	f003 0320 	and.w	r3, r3, #32
 801357c:	2b00      	cmp	r3, #0
 801357e:	d00f      	beq.n	80135a0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013586:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	699a      	ldr	r2, [r3, #24]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f042 0220 	orr.w	r2, r2, #32
 801359e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d05a      	beq.n	8013660 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	f022 0201 	bic.w	r2, r2, #1
 80135b8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	6919      	ldr	r1, [r3, #16]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681a      	ldr	r2, [r3, #0]
 80135c4:	4b28      	ldr	r3, [pc, #160]	@ (8013668 <HAL_SPI_IRQHandler+0x394>)
 80135c6:	400b      	ands	r3, r1
 80135c8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80135d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80135d4:	d138      	bne.n	8013648 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	689a      	ldr	r2, [r3, #8]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80135e4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d013      	beq.n	8013616 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135f2:	4a1e      	ldr	r2, [pc, #120]	@ (801366c <HAL_SPI_IRQHandler+0x398>)
 80135f4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7f3 f984 	bl	8006908 <HAL_DMA_Abort_IT>
 8013600:	4603      	mov	r3, r0
 8013602:	2b00      	cmp	r3, #0
 8013604:	d007      	beq.n	8013616 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801360c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801361a:	2b00      	cmp	r3, #0
 801361c:	d020      	beq.n	8013660 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013622:	4a12      	ldr	r2, [pc, #72]	@ (801366c <HAL_SPI_IRQHandler+0x398>)
 8013624:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801362a:	4618      	mov	r0, r3
 801362c:	f7f3 f96c 	bl	8006908 <HAL_DMA_Abort_IT>
 8013630:	4603      	mov	r3, r0
 8013632:	2b00      	cmp	r3, #0
 8013634:	d014      	beq.n	8013660 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801363c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8013646:	e00b      	b.n	8013660 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2201      	movs	r2, #1
 801364c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f000 f82b 	bl	80136ac <HAL_SPI_ErrorCallback>
    return;
 8013656:	e003      	b.n	8013660 <HAL_SPI_IRQHandler+0x38c>
    return;
 8013658:	bf00      	nop
 801365a:	e002      	b.n	8013662 <HAL_SPI_IRQHandler+0x38e>
    return;
 801365c:	bf00      	nop
 801365e:	e000      	b.n	8013662 <HAL_SPI_IRQHandler+0x38e>
    return;
 8013660:	bf00      	nop
  }
}
 8013662:	3728      	adds	r7, #40	@ 0x28
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	fffffc94 	.word	0xfffffc94
 801366c:	0801377d 	.word	0x0801377d

08013670 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013670:	b480      	push	{r7}
 8013672:	b083      	sub	sp, #12
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8013678:	bf00      	nop
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr

08013684 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013684:	b480      	push	{r7}
 8013686:	b083      	sub	sp, #12
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801368c:	bf00      	nop
 801368e:	370c      	adds	r7, #12
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr

08013698 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80136a0:	bf00      	nop
 80136a2:	370c      	adds	r7, #12
 80136a4:	46bd      	mov	sp, r7
 80136a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136aa:	4770      	bx	lr

080136ac <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80136b4:	bf00      	nop
 80136b6:	370c      	adds	r7, #12
 80136b8:	46bd      	mov	sp, r7
 80136ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136be:	4770      	bx	lr

080136c0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80136c0:	b480      	push	{r7}
 80136c2:	b083      	sub	sp, #12
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80136c8:	bf00      	nop
 80136ca:	370c      	adds	r7, #12
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr

080136d4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136e0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	2b07      	cmp	r3, #7
 80136ec:	d011      	beq.n	8013712 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136f2:	69db      	ldr	r3, [r3, #28]
 80136f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136f8:	d103      	bne.n	8013702 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80136fa:	68f8      	ldr	r0, [r7, #12]
 80136fc:	f7ee fa12 	bl	8001b24 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8013700:	e007      	b.n	8013712 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	691a      	ldr	r2, [r3, #16]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	f042 0208 	orr.w	r2, r2, #8
 8013710:	611a      	str	r2, [r3, #16]
}
 8013712:	bf00      	nop
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801371a:	b580      	push	{r7, lr}
 801371c:	b084      	sub	sp, #16
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013726:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8013728:	68f8      	ldr	r0, [r7, #12]
 801372a:	f7ff ffb5 	bl	8013698 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801372e:	bf00      	nop
 8013730:	3710      	adds	r7, #16
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}

08013736 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013736:	b580      	push	{r7, lr}
 8013738:	b084      	sub	sp, #16
 801373a:	af00      	add	r7, sp, #0
 801373c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013742:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f7f4 fa5d 	bl	8007c04 <HAL_DMA_GetError>
 801374a:	4603      	mov	r3, r0
 801374c:	2b02      	cmp	r3, #2
 801374e:	d011      	beq.n	8013774 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f000 f82d 	bl	80137b0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801375c:	f043 0210 	orr.w	r2, r3, #16
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2201      	movs	r2, #1
 801376a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801376e:	68f8      	ldr	r0, [r7, #12]
 8013770:	f7ff ff9c 	bl	80136ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8013774:	bf00      	nop
 8013776:	3710      	adds	r7, #16
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013788:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2200      	movs	r2, #0
 801378e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	2200      	movs	r2, #0
 8013796:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	2201      	movs	r2, #1
 801379e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80137a2:	68f8      	ldr	r0, [r7, #12]
 80137a4:	f7ff ff82 	bl	80136ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80137a8:	bf00      	nop
 80137aa:	3710      	adds	r7, #16
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80137b0:	b480      	push	{r7}
 80137b2:	b085      	sub	sp, #20
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	695b      	ldr	r3, [r3, #20]
 80137be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	699a      	ldr	r2, [r3, #24]
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f042 0208 	orr.w	r2, r2, #8
 80137ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	699a      	ldr	r2, [r3, #24]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f042 0210 	orr.w	r2, r2, #16
 80137de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f022 0201 	bic.w	r2, r2, #1
 80137ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	6919      	ldr	r1, [r3, #16]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	4b3c      	ldr	r3, [pc, #240]	@ (80138ec <SPI_CloseTransfer+0x13c>)
 80137fc:	400b      	ands	r3, r1
 80137fe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	689a      	ldr	r2, [r3, #8]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801380e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013816:	b2db      	uxtb	r3, r3
 8013818:	2b04      	cmp	r3, #4
 801381a:	d014      	beq.n	8013846 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f003 0320 	and.w	r3, r3, #32
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00f      	beq.n	8013846 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801382c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	699a      	ldr	r2, [r3, #24]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f042 0220 	orr.w	r2, r2, #32
 8013844:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801384c:	b2db      	uxtb	r3, r3
 801384e:	2b03      	cmp	r3, #3
 8013850:	d014      	beq.n	801387c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013858:	2b00      	cmp	r3, #0
 801385a:	d00f      	beq.n	801387c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013862:	f043 0204 	orr.w	r2, r3, #4
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	699a      	ldr	r2, [r3, #24]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801387a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013882:	2b00      	cmp	r3, #0
 8013884:	d00f      	beq.n	80138a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801388c:	f043 0201 	orr.w	r2, r3, #1
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	699a      	ldr	r2, [r3, #24]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80138a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d00f      	beq.n	80138d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80138b6:	f043 0208 	orr.w	r2, r3, #8
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	699a      	ldr	r2, [r3, #24]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80138ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2200      	movs	r2, #0
 80138d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2200      	movs	r2, #0
 80138dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80138e0:	bf00      	nop
 80138e2:	3714      	adds	r7, #20
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr
 80138ec:	fffffc90 	.word	0xfffffc90

080138f0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b084      	sub	sp, #16
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	603b      	str	r3, [r7, #0]
 80138fc:	4613      	mov	r3, r2
 80138fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8013900:	e010      	b.n	8013924 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013902:	f7f0 faa7 	bl	8003e54 <HAL_GetTick>
 8013906:	4602      	mov	r2, r0
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	1ad3      	subs	r3, r2, r3
 801390c:	683a      	ldr	r2, [r7, #0]
 801390e:	429a      	cmp	r2, r3
 8013910:	d803      	bhi.n	801391a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013918:	d102      	bne.n	8013920 <SPI_WaitOnFlagUntilTimeout+0x30>
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d101      	bne.n	8013924 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8013920:	2303      	movs	r3, #3
 8013922:	e00f      	b.n	8013944 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	695a      	ldr	r2, [r3, #20]
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	4013      	ands	r3, r2
 801392e:	68ba      	ldr	r2, [r7, #8]
 8013930:	429a      	cmp	r2, r3
 8013932:	bf0c      	ite	eq
 8013934:	2301      	moveq	r3, #1
 8013936:	2300      	movne	r3, #0
 8013938:	b2db      	uxtb	r3, r3
 801393a:	461a      	mov	r2, r3
 801393c:	79fb      	ldrb	r3, [r7, #7]
 801393e:	429a      	cmp	r2, r3
 8013940:	d0df      	beq.n	8013902 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8013942:	2300      	movs	r3, #0
}
 8013944:	4618      	mov	r0, r3
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801394c:	b480      	push	{r7}
 801394e:	b085      	sub	sp, #20
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013958:	095b      	lsrs	r3, r3, #5
 801395a:	3301      	adds	r3, #1
 801395c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	68db      	ldr	r3, [r3, #12]
 8013962:	3301      	adds	r3, #1
 8013964:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	3307      	adds	r3, #7
 801396a:	08db      	lsrs	r3, r3, #3
 801396c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	68fa      	ldr	r2, [r7, #12]
 8013972:	fb02 f303 	mul.w	r3, r2, r3
}
 8013976:	4618      	mov	r0, r3
 8013978:	3714      	adds	r7, #20
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr

08013982 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013982:	b580      	push	{r7, lr}
 8013984:	b082      	sub	sp, #8
 8013986:	af00      	add	r7, sp, #0
 8013988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d101      	bne.n	8013994 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013990:	2301      	movs	r3, #1
 8013992:	e049      	b.n	8013a28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801399a:	b2db      	uxtb	r3, r3
 801399c:	2b00      	cmp	r3, #0
 801399e:	d106      	bne.n	80139ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f7ee ff67 	bl	800287c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2202      	movs	r2, #2
 80139b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681a      	ldr	r2, [r3, #0]
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	3304      	adds	r3, #4
 80139be:	4619      	mov	r1, r3
 80139c0:	4610      	mov	r0, r2
 80139c2:	f000 fadf 	bl	8013f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2201      	movs	r2, #1
 80139ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2201      	movs	r2, #1
 80139d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2201      	movs	r2, #1
 80139da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2201      	movs	r2, #1
 80139e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2201      	movs	r2, #1
 80139ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2201      	movs	r2, #1
 80139f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2201      	movs	r2, #1
 80139fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2201      	movs	r2, #1
 8013a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2201      	movs	r2, #1
 8013a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2201      	movs	r2, #1
 8013a12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2201      	movs	r2, #1
 8013a1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2201      	movs	r2, #1
 8013a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013a26:	2300      	movs	r3, #0
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}

08013a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013a30:	b480      	push	{r7}
 8013a32:	b085      	sub	sp, #20
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d001      	beq.n	8013a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013a44:	2301      	movs	r3, #1
 8013a46:	e054      	b.n	8013af2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2202      	movs	r2, #2
 8013a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	68da      	ldr	r2, [r3, #12]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f042 0201 	orr.w	r2, r2, #1
 8013a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	4a26      	ldr	r2, [pc, #152]	@ (8013b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8013a66:	4293      	cmp	r3, r2
 8013a68:	d022      	beq.n	8013ab0 <HAL_TIM_Base_Start_IT+0x80>
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a72:	d01d      	beq.n	8013ab0 <HAL_TIM_Base_Start_IT+0x80>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	4a22      	ldr	r2, [pc, #136]	@ (8013b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8013a7a:	4293      	cmp	r3, r2
 8013a7c:	d018      	beq.n	8013ab0 <HAL_TIM_Base_Start_IT+0x80>
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4a21      	ldr	r2, [pc, #132]	@ (8013b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8013a84:	4293      	cmp	r3, r2
 8013a86:	d013      	beq.n	8013ab0 <HAL_TIM_Base_Start_IT+0x80>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8013b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d00e      	beq.n	8013ab0 <HAL_TIM_Base_Start_IT+0x80>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	4a1e      	ldr	r2, [pc, #120]	@ (8013b10 <HAL_TIM_Base_Start_IT+0xe0>)
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d009      	beq.n	8013ab0 <HAL_TIM_Base_Start_IT+0x80>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8013b14 <HAL_TIM_Base_Start_IT+0xe4>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d004      	beq.n	8013ab0 <HAL_TIM_Base_Start_IT+0x80>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8013b18 <HAL_TIM_Base_Start_IT+0xe8>)
 8013aac:	4293      	cmp	r3, r2
 8013aae:	d115      	bne.n	8013adc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	689a      	ldr	r2, [r3, #8]
 8013ab6:	4b19      	ldr	r3, [pc, #100]	@ (8013b1c <HAL_TIM_Base_Start_IT+0xec>)
 8013ab8:	4013      	ands	r3, r2
 8013aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2b06      	cmp	r3, #6
 8013ac0:	d015      	beq.n	8013aee <HAL_TIM_Base_Start_IT+0xbe>
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013ac8:	d011      	beq.n	8013aee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	f042 0201 	orr.w	r2, r2, #1
 8013ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ada:	e008      	b.n	8013aee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f042 0201 	orr.w	r2, r2, #1
 8013aea:	601a      	str	r2, [r3, #0]
 8013aec:	e000      	b.n	8013af0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013aee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013af0:	2300      	movs	r3, #0
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3714      	adds	r7, #20
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr
 8013afe:	bf00      	nop
 8013b00:	40010000 	.word	0x40010000
 8013b04:	40000400 	.word	0x40000400
 8013b08:	40000800 	.word	0x40000800
 8013b0c:	40000c00 	.word	0x40000c00
 8013b10:	40010400 	.word	0x40010400
 8013b14:	40001800 	.word	0x40001800
 8013b18:	40014000 	.word	0x40014000
 8013b1c:	00010007 	.word	0x00010007

08013b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	68db      	ldr	r3, [r3, #12]
 8013b2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	691b      	ldr	r3, [r3, #16]
 8013b36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	f003 0302 	and.w	r3, r3, #2
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d020      	beq.n	8013b84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f003 0302 	and.w	r3, r3, #2
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d01b      	beq.n	8013b84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f06f 0202 	mvn.w	r2, #2
 8013b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2201      	movs	r2, #1
 8013b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	699b      	ldr	r3, [r3, #24]
 8013b62:	f003 0303 	and.w	r3, r3, #3
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d003      	beq.n	8013b72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f000 f9ec 	bl	8013f48 <HAL_TIM_IC_CaptureCallback>
 8013b70:	e005      	b.n	8013b7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 f9de 	bl	8013f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f000 f9ef 	bl	8013f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2200      	movs	r2, #0
 8013b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	f003 0304 	and.w	r3, r3, #4
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d020      	beq.n	8013bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f003 0304 	and.w	r3, r3, #4
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d01b      	beq.n	8013bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f06f 0204 	mvn.w	r2, #4
 8013ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2202      	movs	r2, #2
 8013ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	699b      	ldr	r3, [r3, #24]
 8013bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d003      	beq.n	8013bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f000 f9c6 	bl	8013f48 <HAL_TIM_IC_CaptureCallback>
 8013bbc:	e005      	b.n	8013bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f000 f9b8 	bl	8013f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f000 f9c9 	bl	8013f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	f003 0308 	and.w	r3, r3, #8
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d020      	beq.n	8013c1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	f003 0308 	and.w	r3, r3, #8
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d01b      	beq.n	8013c1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f06f 0208 	mvn.w	r2, #8
 8013bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2204      	movs	r2, #4
 8013bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	69db      	ldr	r3, [r3, #28]
 8013bfa:	f003 0303 	and.w	r3, r3, #3
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d003      	beq.n	8013c0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f000 f9a0 	bl	8013f48 <HAL_TIM_IC_CaptureCallback>
 8013c08:	e005      	b.n	8013c16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 f992 	bl	8013f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f000 f9a3 	bl	8013f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	f003 0310 	and.w	r3, r3, #16
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d020      	beq.n	8013c68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	f003 0310 	and.w	r3, r3, #16
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d01b      	beq.n	8013c68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	f06f 0210 	mvn.w	r2, #16
 8013c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2208      	movs	r2, #8
 8013c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	69db      	ldr	r3, [r3, #28]
 8013c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d003      	beq.n	8013c56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f000 f97a 	bl	8013f48 <HAL_TIM_IC_CaptureCallback>
 8013c54:	e005      	b.n	8013c62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 f96c 	bl	8013f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f000 f97d 	bl	8013f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2200      	movs	r2, #0
 8013c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	f003 0301 	and.w	r3, r3, #1
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d00c      	beq.n	8013c8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	f003 0301 	and.w	r3, r3, #1
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d007      	beq.n	8013c8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	f06f 0201 	mvn.w	r2, #1
 8013c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f000 f94a 	bl	8013f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d104      	bne.n	8013ca0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d00c      	beq.n	8013cba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d007      	beq.n	8013cba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8013cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f000 fb3b 	bl	8014330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d00c      	beq.n	8013cde <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d007      	beq.n	8013cde <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8013cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 fb33 	bl	8014344 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d00c      	beq.n	8013d02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d007      	beq.n	8013d02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8013cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f000 f937 	bl	8013f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	f003 0320 	and.w	r3, r3, #32
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d00c      	beq.n	8013d26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	f003 0320 	and.w	r3, r3, #32
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d007      	beq.n	8013d26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f06f 0220 	mvn.w	r2, #32
 8013d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f000 fafb 	bl	801431c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013d26:	bf00      	nop
 8013d28:	3710      	adds	r7, #16
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
	...

08013d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b084      	sub	sp, #16
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013d44:	2b01      	cmp	r3, #1
 8013d46:	d101      	bne.n	8013d4c <HAL_TIM_ConfigClockSource+0x1c>
 8013d48:	2302      	movs	r3, #2
 8013d4a:	e0dc      	b.n	8013f06 <HAL_TIM_ConfigClockSource+0x1d6>
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2201      	movs	r2, #1
 8013d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2202      	movs	r2, #2
 8013d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	689b      	ldr	r3, [r3, #8]
 8013d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013d64:	68ba      	ldr	r2, [r7, #8]
 8013d66:	4b6a      	ldr	r3, [pc, #424]	@ (8013f10 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013d68:	4013      	ands	r3, r2
 8013d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a64      	ldr	r2, [pc, #400]	@ (8013f14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	f000 80a9 	beq.w	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013d88:	4a62      	ldr	r2, [pc, #392]	@ (8013f14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013d8a:	4293      	cmp	r3, r2
 8013d8c:	f200 80ae 	bhi.w	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013d90:	4a61      	ldr	r2, [pc, #388]	@ (8013f18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013d92:	4293      	cmp	r3, r2
 8013d94:	f000 80a1 	beq.w	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013d98:	4a5f      	ldr	r2, [pc, #380]	@ (8013f18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	f200 80a6 	bhi.w	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013da0:	4a5e      	ldr	r2, [pc, #376]	@ (8013f1c <HAL_TIM_ConfigClockSource+0x1ec>)
 8013da2:	4293      	cmp	r3, r2
 8013da4:	f000 8099 	beq.w	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013da8:	4a5c      	ldr	r2, [pc, #368]	@ (8013f1c <HAL_TIM_ConfigClockSource+0x1ec>)
 8013daa:	4293      	cmp	r3, r2
 8013dac:	f200 809e 	bhi.w	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013db0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013db4:	f000 8091 	beq.w	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013db8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013dbc:	f200 8096 	bhi.w	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013dc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013dc4:	f000 8089 	beq.w	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013dcc:	f200 808e 	bhi.w	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013dd4:	d03e      	beq.n	8013e54 <HAL_TIM_ConfigClockSource+0x124>
 8013dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013dda:	f200 8087 	bhi.w	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013de2:	f000 8086 	beq.w	8013ef2 <HAL_TIM_ConfigClockSource+0x1c2>
 8013de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013dea:	d87f      	bhi.n	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013dec:	2b70      	cmp	r3, #112	@ 0x70
 8013dee:	d01a      	beq.n	8013e26 <HAL_TIM_ConfigClockSource+0xf6>
 8013df0:	2b70      	cmp	r3, #112	@ 0x70
 8013df2:	d87b      	bhi.n	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013df4:	2b60      	cmp	r3, #96	@ 0x60
 8013df6:	d050      	beq.n	8013e9a <HAL_TIM_ConfigClockSource+0x16a>
 8013df8:	2b60      	cmp	r3, #96	@ 0x60
 8013dfa:	d877      	bhi.n	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013dfc:	2b50      	cmp	r3, #80	@ 0x50
 8013dfe:	d03c      	beq.n	8013e7a <HAL_TIM_ConfigClockSource+0x14a>
 8013e00:	2b50      	cmp	r3, #80	@ 0x50
 8013e02:	d873      	bhi.n	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013e04:	2b40      	cmp	r3, #64	@ 0x40
 8013e06:	d058      	beq.n	8013eba <HAL_TIM_ConfigClockSource+0x18a>
 8013e08:	2b40      	cmp	r3, #64	@ 0x40
 8013e0a:	d86f      	bhi.n	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013e0c:	2b30      	cmp	r3, #48	@ 0x30
 8013e0e:	d064      	beq.n	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013e10:	2b30      	cmp	r3, #48	@ 0x30
 8013e12:	d86b      	bhi.n	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013e14:	2b20      	cmp	r3, #32
 8013e16:	d060      	beq.n	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013e18:	2b20      	cmp	r3, #32
 8013e1a:	d867      	bhi.n	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d05c      	beq.n	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013e20:	2b10      	cmp	r3, #16
 8013e22:	d05a      	beq.n	8013eda <HAL_TIM_ConfigClockSource+0x1aa>
 8013e24:	e062      	b.n	8013eec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013e36:	f000 f9c3 	bl	80141c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	689b      	ldr	r3, [r3, #8]
 8013e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	68ba      	ldr	r2, [r7, #8]
 8013e50:	609a      	str	r2, [r3, #8]
      break;
 8013e52:	e04f      	b.n	8013ef4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013e64:	f000 f9ac 	bl	80141c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	689a      	ldr	r2, [r3, #8]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013e76:	609a      	str	r2, [r3, #8]
      break;
 8013e78:	e03c      	b.n	8013ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013e86:	461a      	mov	r2, r3
 8013e88:	f000 f91c 	bl	80140c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	2150      	movs	r1, #80	@ 0x50
 8013e92:	4618      	mov	r0, r3
 8013e94:	f000 f976 	bl	8014184 <TIM_ITRx_SetConfig>
      break;
 8013e98:	e02c      	b.n	8013ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	f000 f93b 	bl	8014122 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	2160      	movs	r1, #96	@ 0x60
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f000 f966 	bl	8014184 <TIM_ITRx_SetConfig>
      break;
 8013eb8:	e01c      	b.n	8013ef4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	f000 f8fc 	bl	80140c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2140      	movs	r1, #64	@ 0x40
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f000 f956 	bl	8014184 <TIM_ITRx_SetConfig>
      break;
 8013ed8:	e00c      	b.n	8013ef4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681a      	ldr	r2, [r3, #0]
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	4610      	mov	r0, r2
 8013ee6:	f000 f94d 	bl	8014184 <TIM_ITRx_SetConfig>
      break;
 8013eea:	e003      	b.n	8013ef4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013eec:	2301      	movs	r3, #1
 8013eee:	73fb      	strb	r3, [r7, #15]
      break;
 8013ef0:	e000      	b.n	8013ef4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2200      	movs	r2, #0
 8013f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3710      	adds	r7, #16
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}
 8013f0e:	bf00      	nop
 8013f10:	ffceff88 	.word	0xffceff88
 8013f14:	00100040 	.word	0x00100040
 8013f18:	00100030 	.word	0x00100030
 8013f1c:	00100020 	.word	0x00100020

08013f20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f20:	b480      	push	{r7}
 8013f22:	b083      	sub	sp, #12
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8013f28:	bf00      	nop
 8013f2a:	370c      	adds	r7, #12
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr

08013f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f34:	b480      	push	{r7}
 8013f36:	b083      	sub	sp, #12
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013f3c:	bf00      	nop
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013f50:	bf00      	nop
 8013f52:	370c      	adds	r7, #12
 8013f54:	46bd      	mov	sp, r7
 8013f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5a:	4770      	bx	lr

08013f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013f5c:	b480      	push	{r7}
 8013f5e:	b083      	sub	sp, #12
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013f64:	bf00      	nop
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013f78:	bf00      	nop
 8013f7a:	370c      	adds	r7, #12
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	4a43      	ldr	r2, [pc, #268]	@ (80140a4 <TIM_Base_SetConfig+0x120>)
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	d013      	beq.n	8013fc4 <TIM_Base_SetConfig+0x40>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013fa2:	d00f      	beq.n	8013fc4 <TIM_Base_SetConfig+0x40>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	4a40      	ldr	r2, [pc, #256]	@ (80140a8 <TIM_Base_SetConfig+0x124>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d00b      	beq.n	8013fc4 <TIM_Base_SetConfig+0x40>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	4a3f      	ldr	r2, [pc, #252]	@ (80140ac <TIM_Base_SetConfig+0x128>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d007      	beq.n	8013fc4 <TIM_Base_SetConfig+0x40>
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	4a3e      	ldr	r2, [pc, #248]	@ (80140b0 <TIM_Base_SetConfig+0x12c>)
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d003      	beq.n	8013fc4 <TIM_Base_SetConfig+0x40>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	4a3d      	ldr	r2, [pc, #244]	@ (80140b4 <TIM_Base_SetConfig+0x130>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d108      	bne.n	8013fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	68fa      	ldr	r2, [r7, #12]
 8013fd2:	4313      	orrs	r3, r2
 8013fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	4a32      	ldr	r2, [pc, #200]	@ (80140a4 <TIM_Base_SetConfig+0x120>)
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	d01f      	beq.n	801401e <TIM_Base_SetConfig+0x9a>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013fe4:	d01b      	beq.n	801401e <TIM_Base_SetConfig+0x9a>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80140a8 <TIM_Base_SetConfig+0x124>)
 8013fea:	4293      	cmp	r3, r2
 8013fec:	d017      	beq.n	801401e <TIM_Base_SetConfig+0x9a>
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80140ac <TIM_Base_SetConfig+0x128>)
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	d013      	beq.n	801401e <TIM_Base_SetConfig+0x9a>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80140b0 <TIM_Base_SetConfig+0x12c>)
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d00f      	beq.n	801401e <TIM_Base_SetConfig+0x9a>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4a2c      	ldr	r2, [pc, #176]	@ (80140b4 <TIM_Base_SetConfig+0x130>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d00b      	beq.n	801401e <TIM_Base_SetConfig+0x9a>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4a2b      	ldr	r2, [pc, #172]	@ (80140b8 <TIM_Base_SetConfig+0x134>)
 801400a:	4293      	cmp	r3, r2
 801400c:	d007      	beq.n	801401e <TIM_Base_SetConfig+0x9a>
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	4a2a      	ldr	r2, [pc, #168]	@ (80140bc <TIM_Base_SetConfig+0x138>)
 8014012:	4293      	cmp	r3, r2
 8014014:	d003      	beq.n	801401e <TIM_Base_SetConfig+0x9a>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	4a29      	ldr	r2, [pc, #164]	@ (80140c0 <TIM_Base_SetConfig+0x13c>)
 801401a:	4293      	cmp	r3, r2
 801401c:	d108      	bne.n	8014030 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	68db      	ldr	r3, [r3, #12]
 801402a:	68fa      	ldr	r2, [r7, #12]
 801402c:	4313      	orrs	r3, r2
 801402e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	695b      	ldr	r3, [r3, #20]
 801403a:	4313      	orrs	r3, r2
 801403c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	689a      	ldr	r2, [r3, #8]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	681a      	ldr	r2, [r3, #0]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	4a14      	ldr	r2, [pc, #80]	@ (80140a4 <TIM_Base_SetConfig+0x120>)
 8014052:	4293      	cmp	r3, r2
 8014054:	d00f      	beq.n	8014076 <TIM_Base_SetConfig+0xf2>
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	4a16      	ldr	r2, [pc, #88]	@ (80140b4 <TIM_Base_SetConfig+0x130>)
 801405a:	4293      	cmp	r3, r2
 801405c:	d00b      	beq.n	8014076 <TIM_Base_SetConfig+0xf2>
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	4a15      	ldr	r2, [pc, #84]	@ (80140b8 <TIM_Base_SetConfig+0x134>)
 8014062:	4293      	cmp	r3, r2
 8014064:	d007      	beq.n	8014076 <TIM_Base_SetConfig+0xf2>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	4a14      	ldr	r2, [pc, #80]	@ (80140bc <TIM_Base_SetConfig+0x138>)
 801406a:	4293      	cmp	r3, r2
 801406c:	d003      	beq.n	8014076 <TIM_Base_SetConfig+0xf2>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	4a13      	ldr	r2, [pc, #76]	@ (80140c0 <TIM_Base_SetConfig+0x13c>)
 8014072:	4293      	cmp	r3, r2
 8014074:	d103      	bne.n	801407e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	691a      	ldr	r2, [r3, #16]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	f043 0204 	orr.w	r2, r3, #4
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2201      	movs	r2, #1
 801408e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	68fa      	ldr	r2, [r7, #12]
 8014094:	601a      	str	r2, [r3, #0]
}
 8014096:	bf00      	nop
 8014098:	3714      	adds	r7, #20
 801409a:	46bd      	mov	sp, r7
 801409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a0:	4770      	bx	lr
 80140a2:	bf00      	nop
 80140a4:	40010000 	.word	0x40010000
 80140a8:	40000400 	.word	0x40000400
 80140ac:	40000800 	.word	0x40000800
 80140b0:	40000c00 	.word	0x40000c00
 80140b4:	40010400 	.word	0x40010400
 80140b8:	40014000 	.word	0x40014000
 80140bc:	40014400 	.word	0x40014400
 80140c0:	40014800 	.word	0x40014800

080140c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80140c4:	b480      	push	{r7}
 80140c6:	b087      	sub	sp, #28
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	60f8      	str	r0, [r7, #12]
 80140cc:	60b9      	str	r1, [r7, #8]
 80140ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	6a1b      	ldr	r3, [r3, #32]
 80140d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6a1b      	ldr	r3, [r3, #32]
 80140da:	f023 0201 	bic.w	r2, r3, #1
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	699b      	ldr	r3, [r3, #24]
 80140e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80140ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	011b      	lsls	r3, r3, #4
 80140f4:	693a      	ldr	r2, [r7, #16]
 80140f6:	4313      	orrs	r3, r2
 80140f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	f023 030a 	bic.w	r3, r3, #10
 8014100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014102:	697a      	ldr	r2, [r7, #20]
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	4313      	orrs	r3, r2
 8014108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	693a      	ldr	r2, [r7, #16]
 801410e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	697a      	ldr	r2, [r7, #20]
 8014114:	621a      	str	r2, [r3, #32]
}
 8014116:	bf00      	nop
 8014118:	371c      	adds	r7, #28
 801411a:	46bd      	mov	sp, r7
 801411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014120:	4770      	bx	lr

08014122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014122:	b480      	push	{r7}
 8014124:	b087      	sub	sp, #28
 8014126:	af00      	add	r7, sp, #0
 8014128:	60f8      	str	r0, [r7, #12]
 801412a:	60b9      	str	r1, [r7, #8]
 801412c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	6a1b      	ldr	r3, [r3, #32]
 8014132:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	6a1b      	ldr	r3, [r3, #32]
 8014138:	f023 0210 	bic.w	r2, r3, #16
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	699b      	ldr	r3, [r3, #24]
 8014144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801414c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	031b      	lsls	r3, r3, #12
 8014152:	693a      	ldr	r2, [r7, #16]
 8014154:	4313      	orrs	r3, r2
 8014156:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801415e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	011b      	lsls	r3, r3, #4
 8014164:	697a      	ldr	r2, [r7, #20]
 8014166:	4313      	orrs	r3, r2
 8014168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	693a      	ldr	r2, [r7, #16]
 801416e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	697a      	ldr	r2, [r7, #20]
 8014174:	621a      	str	r2, [r3, #32]
}
 8014176:	bf00      	nop
 8014178:	371c      	adds	r7, #28
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr
	...

08014184 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014184:	b480      	push	{r7}
 8014186:	b085      	sub	sp, #20
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	4b09      	ldr	r3, [pc, #36]	@ (80141bc <TIM_ITRx_SetConfig+0x38>)
 8014198:	4013      	ands	r3, r2
 801419a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801419c:	683a      	ldr	r2, [r7, #0]
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	4313      	orrs	r3, r2
 80141a2:	f043 0307 	orr.w	r3, r3, #7
 80141a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	68fa      	ldr	r2, [r7, #12]
 80141ac:	609a      	str	r2, [r3, #8]
}
 80141ae:	bf00      	nop
 80141b0:	3714      	adds	r7, #20
 80141b2:	46bd      	mov	sp, r7
 80141b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b8:	4770      	bx	lr
 80141ba:	bf00      	nop
 80141bc:	ffcfff8f 	.word	0xffcfff8f

080141c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80141c0:	b480      	push	{r7}
 80141c2:	b087      	sub	sp, #28
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
 80141cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	689b      	ldr	r3, [r3, #8]
 80141d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80141da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	021a      	lsls	r2, r3, #8
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	431a      	orrs	r2, r3
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	4313      	orrs	r3, r2
 80141e8:	697a      	ldr	r2, [r7, #20]
 80141ea:	4313      	orrs	r3, r2
 80141ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	697a      	ldr	r2, [r7, #20]
 80141f2:	609a      	str	r2, [r3, #8]
}
 80141f4:	bf00      	nop
 80141f6:	371c      	adds	r7, #28
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr

08014200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014200:	b480      	push	{r7}
 8014202:	b085      	sub	sp, #20
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014210:	2b01      	cmp	r3, #1
 8014212:	d101      	bne.n	8014218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014214:	2302      	movs	r3, #2
 8014216:	e06d      	b.n	80142f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2201      	movs	r2, #1
 801421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2202      	movs	r2, #2
 8014224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	689b      	ldr	r3, [r3, #8]
 8014236:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4a30      	ldr	r2, [pc, #192]	@ (8014300 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801423e:	4293      	cmp	r3, r2
 8014240:	d004      	beq.n	801424c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4a2f      	ldr	r2, [pc, #188]	@ (8014304 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014248:	4293      	cmp	r3, r2
 801424a:	d108      	bne.n	801425e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8014252:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	68fa      	ldr	r2, [r7, #12]
 801425a:	4313      	orrs	r3, r2
 801425c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	68fa      	ldr	r2, [r7, #12]
 801426c:	4313      	orrs	r3, r2
 801426e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	68fa      	ldr	r2, [r7, #12]
 8014276:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	4a20      	ldr	r2, [pc, #128]	@ (8014300 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801427e:	4293      	cmp	r3, r2
 8014280:	d022      	beq.n	80142c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801428a:	d01d      	beq.n	80142c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	4a1d      	ldr	r2, [pc, #116]	@ (8014308 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014292:	4293      	cmp	r3, r2
 8014294:	d018      	beq.n	80142c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	4a1c      	ldr	r2, [pc, #112]	@ (801430c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801429c:	4293      	cmp	r3, r2
 801429e:	d013      	beq.n	80142c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	4a1a      	ldr	r2, [pc, #104]	@ (8014310 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80142a6:	4293      	cmp	r3, r2
 80142a8:	d00e      	beq.n	80142c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	4a15      	ldr	r2, [pc, #84]	@ (8014304 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80142b0:	4293      	cmp	r3, r2
 80142b2:	d009      	beq.n	80142c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	4a16      	ldr	r2, [pc, #88]	@ (8014314 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80142ba:	4293      	cmp	r3, r2
 80142bc:	d004      	beq.n	80142c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	4a15      	ldr	r2, [pc, #84]	@ (8014318 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80142c4:	4293      	cmp	r3, r2
 80142c6:	d10c      	bne.n	80142e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80142ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	68ba      	ldr	r2, [r7, #8]
 80142d6:	4313      	orrs	r3, r2
 80142d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	68ba      	ldr	r2, [r7, #8]
 80142e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2201      	movs	r2, #1
 80142e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2200      	movs	r2, #0
 80142ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80142f2:	2300      	movs	r3, #0
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3714      	adds	r7, #20
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr
 8014300:	40010000 	.word	0x40010000
 8014304:	40010400 	.word	0x40010400
 8014308:	40000400 	.word	0x40000400
 801430c:	40000800 	.word	0x40000800
 8014310:	40000c00 	.word	0x40000c00
 8014314:	40001800 	.word	0x40001800
 8014318:	40014000 	.word	0x40014000

0801431c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801431c:	b480      	push	{r7}
 801431e:	b083      	sub	sp, #12
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014324:	bf00      	nop
 8014326:	370c      	adds	r7, #12
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr

08014330 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014330:	b480      	push	{r7}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014338:	bf00      	nop
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d101      	bne.n	801436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014366:	2301      	movs	r3, #1
 8014368:	e042      	b.n	80143f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014370:	2b00      	cmp	r3, #0
 8014372:	d106      	bne.n	8014382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2200      	movs	r2, #0
 8014378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f7ee faa5 	bl	80028cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2224      	movs	r2, #36	@ 0x24
 8014386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	681a      	ldr	r2, [r3, #0]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	f022 0201 	bic.w	r2, r2, #1
 8014398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d002      	beq.n	80143a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f001 fa6a 	bl	801587c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fcff 	bl	8014dac <UART_SetConfig>
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d101      	bne.n	80143b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80143b4:	2301      	movs	r3, #1
 80143b6:	e01b      	b.n	80143f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	685a      	ldr	r2, [r3, #4]
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80143c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	689a      	ldr	r2, [r3, #8]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80143d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	f042 0201 	orr.w	r2, r2, #1
 80143e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f001 fae9 	bl	80159c0 <UART_CheckIdleState>
 80143ee:	4603      	mov	r3, r0
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3708      	adds	r7, #8
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b08a      	sub	sp, #40	@ 0x28
 80143fc:	af02      	add	r7, sp, #8
 80143fe:	60f8      	str	r0, [r7, #12]
 8014400:	60b9      	str	r1, [r7, #8]
 8014402:	603b      	str	r3, [r7, #0]
 8014404:	4613      	mov	r3, r2
 8014406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801440e:	2b20      	cmp	r3, #32
 8014410:	d17b      	bne.n	801450a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d002      	beq.n	801441e <HAL_UART_Transmit+0x26>
 8014418:	88fb      	ldrh	r3, [r7, #6]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d101      	bne.n	8014422 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801441e:	2301      	movs	r3, #1
 8014420:	e074      	b.n	801450c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	2200      	movs	r2, #0
 8014426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	2221      	movs	r2, #33	@ 0x21
 801442e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014432:	f7ef fd0f 	bl	8003e54 <HAL_GetTick>
 8014436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	88fa      	ldrh	r2, [r7, #6]
 801443c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	88fa      	ldrh	r2, [r7, #6]
 8014444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	689b      	ldr	r3, [r3, #8]
 801444c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014450:	d108      	bne.n	8014464 <HAL_UART_Transmit+0x6c>
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	691b      	ldr	r3, [r3, #16]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d104      	bne.n	8014464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801445a:	2300      	movs	r3, #0
 801445c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	61bb      	str	r3, [r7, #24]
 8014462:	e003      	b.n	801446c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014468:	2300      	movs	r3, #0
 801446a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801446c:	e030      	b.n	80144d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	9300      	str	r3, [sp, #0]
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	2200      	movs	r2, #0
 8014476:	2180      	movs	r1, #128	@ 0x80
 8014478:	68f8      	ldr	r0, [r7, #12]
 801447a:	f001 fb4b 	bl	8015b14 <UART_WaitOnFlagUntilTimeout>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d005      	beq.n	8014490 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2220      	movs	r2, #32
 8014488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801448c:	2303      	movs	r3, #3
 801448e:	e03d      	b.n	801450c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014490:	69fb      	ldr	r3, [r7, #28]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d10b      	bne.n	80144ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014496:	69bb      	ldr	r3, [r7, #24]
 8014498:	881b      	ldrh	r3, [r3, #0]
 801449a:	461a      	mov	r2, r3
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80144a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80144a6:	69bb      	ldr	r3, [r7, #24]
 80144a8:	3302      	adds	r3, #2
 80144aa:	61bb      	str	r3, [r7, #24]
 80144ac:	e007      	b.n	80144be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80144ae:	69fb      	ldr	r3, [r7, #28]
 80144b0:	781a      	ldrb	r2, [r3, #0]
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	3301      	adds	r3, #1
 80144bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	3b01      	subs	r3, #1
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d1c8      	bne.n	801446e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	2200      	movs	r2, #0
 80144e4:	2140      	movs	r1, #64	@ 0x40
 80144e6:	68f8      	ldr	r0, [r7, #12]
 80144e8:	f001 fb14 	bl	8015b14 <UART_WaitOnFlagUntilTimeout>
 80144ec:	4603      	mov	r3, r0
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d005      	beq.n	80144fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2220      	movs	r2, #32
 80144f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80144fa:	2303      	movs	r3, #3
 80144fc:	e006      	b.n	801450c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2220      	movs	r2, #32
 8014502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8014506:	2300      	movs	r3, #0
 8014508:	e000      	b.n	801450c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801450a:	2302      	movs	r3, #2
  }
}
 801450c:	4618      	mov	r0, r3
 801450e:	3720      	adds	r7, #32
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b08a      	sub	sp, #40	@ 0x28
 8014518:	af00      	add	r7, sp, #0
 801451a:	60f8      	str	r0, [r7, #12]
 801451c:	60b9      	str	r1, [r7, #8]
 801451e:	4613      	mov	r3, r2
 8014520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014528:	2b20      	cmp	r3, #32
 801452a:	d137      	bne.n	801459c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d002      	beq.n	8014538 <HAL_UART_Receive_DMA+0x24>
 8014532:	88fb      	ldrh	r3, [r7, #6]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d101      	bne.n	801453c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8014538:	2301      	movs	r3, #1
 801453a:	e030      	b.n	801459e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2200      	movs	r2, #0
 8014540:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	4a18      	ldr	r2, [pc, #96]	@ (80145a8 <HAL_UART_Receive_DMA+0x94>)
 8014548:	4293      	cmp	r3, r2
 801454a:	d01f      	beq.n	801458c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014556:	2b00      	cmp	r3, #0
 8014558:	d018      	beq.n	801458c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	e853 3f00 	ldrex	r3, [r3]
 8014566:	613b      	str	r3, [r7, #16]
   return(result);
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801456e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	461a      	mov	r2, r3
 8014576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014578:	623b      	str	r3, [r7, #32]
 801457a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801457c:	69f9      	ldr	r1, [r7, #28]
 801457e:	6a3a      	ldr	r2, [r7, #32]
 8014580:	e841 2300 	strex	r3, r2, [r1]
 8014584:	61bb      	str	r3, [r7, #24]
   return(result);
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d1e6      	bne.n	801455a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801458c:	88fb      	ldrh	r3, [r7, #6]
 801458e:	461a      	mov	r2, r3
 8014590:	68b9      	ldr	r1, [r7, #8]
 8014592:	68f8      	ldr	r0, [r7, #12]
 8014594:	f001 fb2c 	bl	8015bf0 <UART_Start_Receive_DMA>
 8014598:	4603      	mov	r3, r0
 801459a:	e000      	b.n	801459e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801459c:	2302      	movs	r3, #2
  }
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3728      	adds	r7, #40	@ 0x28
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	58000c00 	.word	0x58000c00

080145ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b0ba      	sub	sp, #232	@ 0xe8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	69db      	ldr	r3, [r3, #28]
 80145ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	689b      	ldr	r3, [r3, #8]
 80145ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80145d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80145d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80145da:	4013      	ands	r3, r2
 80145dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80145e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d11b      	bne.n	8014620 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80145e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80145ec:	f003 0320 	and.w	r3, r3, #32
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d015      	beq.n	8014620 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80145f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80145f8:	f003 0320 	and.w	r3, r3, #32
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d105      	bne.n	801460c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014608:	2b00      	cmp	r3, #0
 801460a:	d009      	beq.n	8014620 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014610:	2b00      	cmp	r3, #0
 8014612:	f000 8393 	beq.w	8014d3c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	4798      	blx	r3
      }
      return;
 801461e:	e38d      	b.n	8014d3c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8014624:	2b00      	cmp	r3, #0
 8014626:	f000 8123 	beq.w	8014870 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801462a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801462e:	4b8d      	ldr	r3, [pc, #564]	@ (8014864 <HAL_UART_IRQHandler+0x2b8>)
 8014630:	4013      	ands	r3, r2
 8014632:	2b00      	cmp	r3, #0
 8014634:	d106      	bne.n	8014644 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014636:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801463a:	4b8b      	ldr	r3, [pc, #556]	@ (8014868 <HAL_UART_IRQHandler+0x2bc>)
 801463c:	4013      	ands	r3, r2
 801463e:	2b00      	cmp	r3, #0
 8014640:	f000 8116 	beq.w	8014870 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014648:	f003 0301 	and.w	r3, r3, #1
 801464c:	2b00      	cmp	r3, #0
 801464e:	d011      	beq.n	8014674 <HAL_UART_IRQHandler+0xc8>
 8014650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00b      	beq.n	8014674 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2201      	movs	r2, #1
 8014662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801466a:	f043 0201 	orr.w	r2, r3, #1
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014678:	f003 0302 	and.w	r3, r3, #2
 801467c:	2b00      	cmp	r3, #0
 801467e:	d011      	beq.n	80146a4 <HAL_UART_IRQHandler+0xf8>
 8014680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014684:	f003 0301 	and.w	r3, r3, #1
 8014688:	2b00      	cmp	r3, #0
 801468a:	d00b      	beq.n	80146a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2202      	movs	r2, #2
 8014692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801469a:	f043 0204 	orr.w	r2, r3, #4
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80146a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80146a8:	f003 0304 	and.w	r3, r3, #4
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d011      	beq.n	80146d4 <HAL_UART_IRQHandler+0x128>
 80146b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80146b4:	f003 0301 	and.w	r3, r3, #1
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d00b      	beq.n	80146d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2204      	movs	r2, #4
 80146c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80146ca:	f043 0202 	orr.w	r2, r3, #2
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80146d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80146d8:	f003 0308 	and.w	r3, r3, #8
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d017      	beq.n	8014710 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80146e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80146e4:	f003 0320 	and.w	r3, r3, #32
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d105      	bne.n	80146f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80146ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80146f0:	4b5c      	ldr	r3, [pc, #368]	@ (8014864 <HAL_UART_IRQHandler+0x2b8>)
 80146f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00b      	beq.n	8014710 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	2208      	movs	r2, #8
 80146fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014706:	f043 0208 	orr.w	r2, r3, #8
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014718:	2b00      	cmp	r3, #0
 801471a:	d012      	beq.n	8014742 <HAL_UART_IRQHandler+0x196>
 801471c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014720:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014724:	2b00      	cmp	r3, #0
 8014726:	d00c      	beq.n	8014742 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014738:	f043 0220 	orr.w	r2, r3, #32
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014748:	2b00      	cmp	r3, #0
 801474a:	f000 82f9 	beq.w	8014d40 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014752:	f003 0320 	and.w	r3, r3, #32
 8014756:	2b00      	cmp	r3, #0
 8014758:	d013      	beq.n	8014782 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801475a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801475e:	f003 0320 	and.w	r3, r3, #32
 8014762:	2b00      	cmp	r3, #0
 8014764:	d105      	bne.n	8014772 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801476e:	2b00      	cmp	r3, #0
 8014770:	d007      	beq.n	8014782 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014776:	2b00      	cmp	r3, #0
 8014778:	d003      	beq.n	8014782 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014788:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	689b      	ldr	r3, [r3, #8]
 8014792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014796:	2b40      	cmp	r3, #64	@ 0x40
 8014798:	d005      	beq.n	80147a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801479a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801479e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d054      	beq.n	8014850 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f001 fb0a 	bl	8015dc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	689b      	ldr	r3, [r3, #8]
 80147b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80147b6:	2b40      	cmp	r3, #64	@ 0x40
 80147b8:	d146      	bne.n	8014848 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	3308      	adds	r3, #8
 80147c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80147c8:	e853 3f00 	ldrex	r3, [r3]
 80147cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80147d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80147d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80147d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	3308      	adds	r3, #8
 80147e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80147e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80147ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80147f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80147f6:	e841 2300 	strex	r3, r2, [r1]
 80147fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80147fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d1d9      	bne.n	80147ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801480c:	2b00      	cmp	r3, #0
 801480e:	d017      	beq.n	8014840 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014816:	4a15      	ldr	r2, [pc, #84]	@ (801486c <HAL_UART_IRQHandler+0x2c0>)
 8014818:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014820:	4618      	mov	r0, r3
 8014822:	f7f2 f871 	bl	8006908 <HAL_DMA_Abort_IT>
 8014826:	4603      	mov	r3, r0
 8014828:	2b00      	cmp	r3, #0
 801482a:	d019      	beq.n	8014860 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801483a:	4610      	mov	r0, r2
 801483c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801483e:	e00f      	b.n	8014860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f000 fa9d 	bl	8014d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014846:	e00b      	b.n	8014860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f000 fa99 	bl	8014d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801484e:	e007      	b.n	8014860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 fa95 	bl	8014d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2200      	movs	r2, #0
 801485a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801485e:	e26f      	b.n	8014d40 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014860:	bf00      	nop
    return;
 8014862:	e26d      	b.n	8014d40 <HAL_UART_IRQHandler+0x794>
 8014864:	10000001 	.word	0x10000001
 8014868:	04000120 	.word	0x04000120
 801486c:	08016073 	.word	0x08016073

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014874:	2b01      	cmp	r3, #1
 8014876:	f040 8203 	bne.w	8014c80 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801487e:	f003 0310 	and.w	r3, r3, #16
 8014882:	2b00      	cmp	r3, #0
 8014884:	f000 81fc 	beq.w	8014c80 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801488c:	f003 0310 	and.w	r3, r3, #16
 8014890:	2b00      	cmp	r3, #0
 8014892:	f000 81f5 	beq.w	8014c80 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	2210      	movs	r2, #16
 801489c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	689b      	ldr	r3, [r3, #8]
 80148a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80148a8:	2b40      	cmp	r3, #64	@ 0x40
 80148aa:	f040 816d 	bne.w	8014b88 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	4aa4      	ldr	r2, [pc, #656]	@ (8014b48 <HAL_UART_IRQHandler+0x59c>)
 80148b8:	4293      	cmp	r3, r2
 80148ba:	d068      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	4aa1      	ldr	r2, [pc, #644]	@ (8014b4c <HAL_UART_IRQHandler+0x5a0>)
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d061      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	4a9f      	ldr	r2, [pc, #636]	@ (8014b50 <HAL_UART_IRQHandler+0x5a4>)
 80148d4:	4293      	cmp	r3, r2
 80148d6:	d05a      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	4a9c      	ldr	r2, [pc, #624]	@ (8014b54 <HAL_UART_IRQHandler+0x5a8>)
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d053      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	4a9a      	ldr	r2, [pc, #616]	@ (8014b58 <HAL_UART_IRQHandler+0x5ac>)
 80148f0:	4293      	cmp	r3, r2
 80148f2:	d04c      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	4a97      	ldr	r2, [pc, #604]	@ (8014b5c <HAL_UART_IRQHandler+0x5b0>)
 80148fe:	4293      	cmp	r3, r2
 8014900:	d045      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	4a95      	ldr	r2, [pc, #596]	@ (8014b60 <HAL_UART_IRQHandler+0x5b4>)
 801490c:	4293      	cmp	r3, r2
 801490e:	d03e      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	4a92      	ldr	r2, [pc, #584]	@ (8014b64 <HAL_UART_IRQHandler+0x5b8>)
 801491a:	4293      	cmp	r3, r2
 801491c:	d037      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	4a90      	ldr	r2, [pc, #576]	@ (8014b68 <HAL_UART_IRQHandler+0x5bc>)
 8014928:	4293      	cmp	r3, r2
 801492a:	d030      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	4a8d      	ldr	r2, [pc, #564]	@ (8014b6c <HAL_UART_IRQHandler+0x5c0>)
 8014936:	4293      	cmp	r3, r2
 8014938:	d029      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	4a8b      	ldr	r2, [pc, #556]	@ (8014b70 <HAL_UART_IRQHandler+0x5c4>)
 8014944:	4293      	cmp	r3, r2
 8014946:	d022      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	4a88      	ldr	r2, [pc, #544]	@ (8014b74 <HAL_UART_IRQHandler+0x5c8>)
 8014952:	4293      	cmp	r3, r2
 8014954:	d01b      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	4a86      	ldr	r2, [pc, #536]	@ (8014b78 <HAL_UART_IRQHandler+0x5cc>)
 8014960:	4293      	cmp	r3, r2
 8014962:	d014      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	4a83      	ldr	r2, [pc, #524]	@ (8014b7c <HAL_UART_IRQHandler+0x5d0>)
 801496e:	4293      	cmp	r3, r2
 8014970:	d00d      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	4a81      	ldr	r2, [pc, #516]	@ (8014b80 <HAL_UART_IRQHandler+0x5d4>)
 801497c:	4293      	cmp	r3, r2
 801497e:	d006      	beq.n	801498e <HAL_UART_IRQHandler+0x3e2>
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4a7e      	ldr	r2, [pc, #504]	@ (8014b84 <HAL_UART_IRQHandler+0x5d8>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d106      	bne.n	801499c <HAL_UART_IRQHandler+0x3f0>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	b29b      	uxth	r3, r3
 801499a:	e005      	b.n	80149a8 <HAL_UART_IRQHandler+0x3fc>
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80149ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f000 80ad 	beq.w	8014b10 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80149bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80149c0:	429a      	cmp	r2, r3
 80149c2:	f080 80a5 	bcs.w	8014b10 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80149cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149d6:	69db      	ldr	r3, [r3, #28]
 80149d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80149dc:	f000 8087 	beq.w	8014aee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80149ec:	e853 3f00 	ldrex	r3, [r3]
 80149f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80149f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80149f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80149fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	461a      	mov	r2, r3
 8014a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8014a0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014a0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014a1a:	e841 2300 	strex	r3, r2, [r1]
 8014a1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8014a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d1da      	bne.n	80149e0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	3308      	adds	r3, #8
 8014a30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a34:	e853 3f00 	ldrex	r3, [r3]
 8014a38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8014a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014a3c:	f023 0301 	bic.w	r3, r3, #1
 8014a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	3308      	adds	r3, #8
 8014a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014a4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8014a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8014a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014a5a:	e841 2300 	strex	r3, r2, [r1]
 8014a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d1e1      	bne.n	8014a2a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	3308      	adds	r3, #8
 8014a6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a70:	e853 3f00 	ldrex	r3, [r3]
 8014a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8014a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	3308      	adds	r3, #8
 8014a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8014a8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014a90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014a92:	e841 2300 	strex	r3, r2, [r1]
 8014a96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d1e3      	bne.n	8014a66 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2220      	movs	r2, #32
 8014aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ab4:	e853 3f00 	ldrex	r3, [r3]
 8014ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014abc:	f023 0310 	bic.w	r3, r3, #16
 8014ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014ace:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014ad0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014ad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014ad6:	e841 2300 	strex	r3, r2, [r1]
 8014ada:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1e4      	bne.n	8014aac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7f1 fbef 	bl	80062cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2202      	movs	r2, #2
 8014af2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	1ad3      	subs	r3, r2, r3
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	4619      	mov	r1, r3
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f000 f943 	bl	8014d94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8014b0e:	e119      	b.n	8014d44 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	f040 8112 	bne.w	8014d44 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014b26:	69db      	ldr	r3, [r3, #28]
 8014b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014b2c:	f040 810a 	bne.w	8014d44 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2202      	movs	r2, #2
 8014b34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	f000 f928 	bl	8014d94 <HAL_UARTEx_RxEventCallback>
      return;
 8014b44:	e0fe      	b.n	8014d44 <HAL_UART_IRQHandler+0x798>
 8014b46:	bf00      	nop
 8014b48:	40020010 	.word	0x40020010
 8014b4c:	40020028 	.word	0x40020028
 8014b50:	40020040 	.word	0x40020040
 8014b54:	40020058 	.word	0x40020058
 8014b58:	40020070 	.word	0x40020070
 8014b5c:	40020088 	.word	0x40020088
 8014b60:	400200a0 	.word	0x400200a0
 8014b64:	400200b8 	.word	0x400200b8
 8014b68:	40020410 	.word	0x40020410
 8014b6c:	40020428 	.word	0x40020428
 8014b70:	40020440 	.word	0x40020440
 8014b74:	40020458 	.word	0x40020458
 8014b78:	40020470 	.word	0x40020470
 8014b7c:	40020488 	.word	0x40020488
 8014b80:	400204a0 	.word	0x400204a0
 8014b84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014b94:	b29b      	uxth	r3, r3
 8014b96:	1ad3      	subs	r3, r2, r3
 8014b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	f000 80cf 	beq.w	8014d48 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8014baa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	f000 80ca 	beq.w	8014d48 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bbc:	e853 3f00 	ldrex	r3, [r3]
 8014bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	461a      	mov	r2, r3
 8014bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014bd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8014bd8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014bde:	e841 2300 	strex	r3, r2, [r1]
 8014be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d1e4      	bne.n	8014bb4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	3308      	adds	r3, #8
 8014bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bf4:	e853 3f00 	ldrex	r3, [r3]
 8014bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8014bfa:	6a3a      	ldr	r2, [r7, #32]
 8014bfc:	4b55      	ldr	r3, [pc, #340]	@ (8014d54 <HAL_UART_IRQHandler+0x7a8>)
 8014bfe:	4013      	ands	r3, r2
 8014c00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	3308      	adds	r3, #8
 8014c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014c0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8014c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c16:	e841 2300 	strex	r3, r2, [r1]
 8014c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d1e3      	bne.n	8014bea <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2220      	movs	r2, #32
 8014c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2200      	movs	r2, #0
 8014c34:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	e853 3f00 	ldrex	r3, [r3]
 8014c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	f023 0310 	bic.w	r3, r3, #16
 8014c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	461a      	mov	r2, r3
 8014c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014c58:	61fb      	str	r3, [r7, #28]
 8014c5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c5c:	69b9      	ldr	r1, [r7, #24]
 8014c5e:	69fa      	ldr	r2, [r7, #28]
 8014c60:	e841 2300 	strex	r3, r2, [r1]
 8014c64:	617b      	str	r3, [r7, #20]
   return(result);
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d1e4      	bne.n	8014c36 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2202      	movs	r2, #2
 8014c70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014c72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014c76:	4619      	mov	r1, r3
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f000 f88b 	bl	8014d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014c7e:	e063      	b.n	8014d48 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014c84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d00e      	beq.n	8014caa <HAL_UART_IRQHandler+0x6fe>
 8014c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d008      	beq.n	8014caa <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8014ca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f001 fa22 	bl	80160ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014ca8:	e051      	b.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d014      	beq.n	8014ce0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d105      	bne.n	8014cce <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d008      	beq.n	8014ce0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d03a      	beq.n	8014d4c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	4798      	blx	r3
    }
    return;
 8014cde:	e035      	b.n	8014d4c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d009      	beq.n	8014d00 <HAL_UART_IRQHandler+0x754>
 8014cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d003      	beq.n	8014d00 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f001 f9cc 	bl	8016096 <UART_EndTransmit_IT>
    return;
 8014cfe:	e026      	b.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014d04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d009      	beq.n	8014d20 <HAL_UART_IRQHandler+0x774>
 8014d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014d10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d003      	beq.n	8014d20 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f001 f9fb 	bl	8016114 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014d1e:	e016      	b.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014d24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d010      	beq.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
 8014d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	da0c      	bge.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f001 f9e3 	bl	8016100 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014d3a:	e008      	b.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8014d3c:	bf00      	nop
 8014d3e:	e006      	b.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
    return;
 8014d40:	bf00      	nop
 8014d42:	e004      	b.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8014d44:	bf00      	nop
 8014d46:	e002      	b.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8014d48:	bf00      	nop
 8014d4a:	e000      	b.n	8014d4e <HAL_UART_IRQHandler+0x7a2>
    return;
 8014d4c:	bf00      	nop
  }
}
 8014d4e:	37e8      	adds	r7, #232	@ 0xe8
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}
 8014d54:	effffffe 	.word	0xeffffffe

08014d58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014d60:	bf00      	nop
 8014d62:	370c      	adds	r7, #12
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr

08014d6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b083      	sub	sp, #12
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014d74:	bf00      	nop
 8014d76:	370c      	adds	r7, #12
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr

08014d80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014d88:	bf00      	nop
 8014d8a:	370c      	adds	r7, #12
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr

08014d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014d94:	b480      	push	{r7}
 8014d96:	b083      	sub	sp, #12
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	460b      	mov	r3, r1
 8014d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014da0:	bf00      	nop
 8014da2:	370c      	adds	r7, #12
 8014da4:	46bd      	mov	sp, r7
 8014da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014daa:	4770      	bx	lr

08014dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014db0:	b092      	sub	sp, #72	@ 0x48
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014db6:	2300      	movs	r3, #0
 8014db8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	689a      	ldr	r2, [r3, #8]
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	691b      	ldr	r3, [r3, #16]
 8014dc4:	431a      	orrs	r2, r3
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	695b      	ldr	r3, [r3, #20]
 8014dca:	431a      	orrs	r2, r3
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	69db      	ldr	r3, [r3, #28]
 8014dd0:	4313      	orrs	r3, r2
 8014dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	681a      	ldr	r2, [r3, #0]
 8014dda:	4bbe      	ldr	r3, [pc, #760]	@ (80150d4 <UART_SetConfig+0x328>)
 8014ddc:	4013      	ands	r3, r2
 8014dde:	697a      	ldr	r2, [r7, #20]
 8014de0:	6812      	ldr	r2, [r2, #0]
 8014de2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014de4:	430b      	orrs	r3, r1
 8014de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	68da      	ldr	r2, [r3, #12]
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	430a      	orrs	r2, r1
 8014dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	699b      	ldr	r3, [r3, #24]
 8014e02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	4ab3      	ldr	r2, [pc, #716]	@ (80150d8 <UART_SetConfig+0x32c>)
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d004      	beq.n	8014e18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014e0e:	697b      	ldr	r3, [r7, #20]
 8014e10:	6a1b      	ldr	r3, [r3, #32]
 8014e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014e14:	4313      	orrs	r3, r2
 8014e16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	689a      	ldr	r2, [r3, #8]
 8014e1e:	4baf      	ldr	r3, [pc, #700]	@ (80150dc <UART_SetConfig+0x330>)
 8014e20:	4013      	ands	r3, r2
 8014e22:	697a      	ldr	r2, [r7, #20]
 8014e24:	6812      	ldr	r2, [r2, #0]
 8014e26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014e28:	430b      	orrs	r3, r1
 8014e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e32:	f023 010f 	bic.w	r1, r3, #15
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	430a      	orrs	r2, r1
 8014e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014e42:	697b      	ldr	r3, [r7, #20]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	4aa6      	ldr	r2, [pc, #664]	@ (80150e0 <UART_SetConfig+0x334>)
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	d177      	bne.n	8014f3c <UART_SetConfig+0x190>
 8014e4c:	4ba5      	ldr	r3, [pc, #660]	@ (80150e4 <UART_SetConfig+0x338>)
 8014e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014e54:	2b28      	cmp	r3, #40	@ 0x28
 8014e56:	d86d      	bhi.n	8014f34 <UART_SetConfig+0x188>
 8014e58:	a201      	add	r2, pc, #4	@ (adr r2, 8014e60 <UART_SetConfig+0xb4>)
 8014e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e5e:	bf00      	nop
 8014e60:	08014f05 	.word	0x08014f05
 8014e64:	08014f35 	.word	0x08014f35
 8014e68:	08014f35 	.word	0x08014f35
 8014e6c:	08014f35 	.word	0x08014f35
 8014e70:	08014f35 	.word	0x08014f35
 8014e74:	08014f35 	.word	0x08014f35
 8014e78:	08014f35 	.word	0x08014f35
 8014e7c:	08014f35 	.word	0x08014f35
 8014e80:	08014f0d 	.word	0x08014f0d
 8014e84:	08014f35 	.word	0x08014f35
 8014e88:	08014f35 	.word	0x08014f35
 8014e8c:	08014f35 	.word	0x08014f35
 8014e90:	08014f35 	.word	0x08014f35
 8014e94:	08014f35 	.word	0x08014f35
 8014e98:	08014f35 	.word	0x08014f35
 8014e9c:	08014f35 	.word	0x08014f35
 8014ea0:	08014f15 	.word	0x08014f15
 8014ea4:	08014f35 	.word	0x08014f35
 8014ea8:	08014f35 	.word	0x08014f35
 8014eac:	08014f35 	.word	0x08014f35
 8014eb0:	08014f35 	.word	0x08014f35
 8014eb4:	08014f35 	.word	0x08014f35
 8014eb8:	08014f35 	.word	0x08014f35
 8014ebc:	08014f35 	.word	0x08014f35
 8014ec0:	08014f1d 	.word	0x08014f1d
 8014ec4:	08014f35 	.word	0x08014f35
 8014ec8:	08014f35 	.word	0x08014f35
 8014ecc:	08014f35 	.word	0x08014f35
 8014ed0:	08014f35 	.word	0x08014f35
 8014ed4:	08014f35 	.word	0x08014f35
 8014ed8:	08014f35 	.word	0x08014f35
 8014edc:	08014f35 	.word	0x08014f35
 8014ee0:	08014f25 	.word	0x08014f25
 8014ee4:	08014f35 	.word	0x08014f35
 8014ee8:	08014f35 	.word	0x08014f35
 8014eec:	08014f35 	.word	0x08014f35
 8014ef0:	08014f35 	.word	0x08014f35
 8014ef4:	08014f35 	.word	0x08014f35
 8014ef8:	08014f35 	.word	0x08014f35
 8014efc:	08014f35 	.word	0x08014f35
 8014f00:	08014f2d 	.word	0x08014f2d
 8014f04:	2301      	movs	r3, #1
 8014f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f0a:	e222      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f0c:	2304      	movs	r3, #4
 8014f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f12:	e21e      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f14:	2308      	movs	r3, #8
 8014f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f1a:	e21a      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f1c:	2310      	movs	r3, #16
 8014f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f22:	e216      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f24:	2320      	movs	r3, #32
 8014f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f2a:	e212      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f2c:	2340      	movs	r3, #64	@ 0x40
 8014f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f32:	e20e      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f34:	2380      	movs	r3, #128	@ 0x80
 8014f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f3a:	e20a      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	4a69      	ldr	r2, [pc, #420]	@ (80150e8 <UART_SetConfig+0x33c>)
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d130      	bne.n	8014fa8 <UART_SetConfig+0x1fc>
 8014f46:	4b67      	ldr	r3, [pc, #412]	@ (80150e4 <UART_SetConfig+0x338>)
 8014f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f4a:	f003 0307 	and.w	r3, r3, #7
 8014f4e:	2b05      	cmp	r3, #5
 8014f50:	d826      	bhi.n	8014fa0 <UART_SetConfig+0x1f4>
 8014f52:	a201      	add	r2, pc, #4	@ (adr r2, 8014f58 <UART_SetConfig+0x1ac>)
 8014f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f58:	08014f71 	.word	0x08014f71
 8014f5c:	08014f79 	.word	0x08014f79
 8014f60:	08014f81 	.word	0x08014f81
 8014f64:	08014f89 	.word	0x08014f89
 8014f68:	08014f91 	.word	0x08014f91
 8014f6c:	08014f99 	.word	0x08014f99
 8014f70:	2300      	movs	r3, #0
 8014f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f76:	e1ec      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f78:	2304      	movs	r3, #4
 8014f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f7e:	e1e8      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f80:	2308      	movs	r3, #8
 8014f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f86:	e1e4      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f88:	2310      	movs	r3, #16
 8014f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f8e:	e1e0      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f90:	2320      	movs	r3, #32
 8014f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f96:	e1dc      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014f98:	2340      	movs	r3, #64	@ 0x40
 8014f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014f9e:	e1d8      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014fa0:	2380      	movs	r3, #128	@ 0x80
 8014fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014fa6:	e1d4      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	4a4f      	ldr	r2, [pc, #316]	@ (80150ec <UART_SetConfig+0x340>)
 8014fae:	4293      	cmp	r3, r2
 8014fb0:	d130      	bne.n	8015014 <UART_SetConfig+0x268>
 8014fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80150e4 <UART_SetConfig+0x338>)
 8014fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fb6:	f003 0307 	and.w	r3, r3, #7
 8014fba:	2b05      	cmp	r3, #5
 8014fbc:	d826      	bhi.n	801500c <UART_SetConfig+0x260>
 8014fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8014fc4 <UART_SetConfig+0x218>)
 8014fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fc4:	08014fdd 	.word	0x08014fdd
 8014fc8:	08014fe5 	.word	0x08014fe5
 8014fcc:	08014fed 	.word	0x08014fed
 8014fd0:	08014ff5 	.word	0x08014ff5
 8014fd4:	08014ffd 	.word	0x08014ffd
 8014fd8:	08015005 	.word	0x08015005
 8014fdc:	2300      	movs	r3, #0
 8014fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014fe2:	e1b6      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014fe4:	2304      	movs	r3, #4
 8014fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014fea:	e1b2      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014fec:	2308      	movs	r3, #8
 8014fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014ff2:	e1ae      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014ff4:	2310      	movs	r3, #16
 8014ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014ffa:	e1aa      	b.n	8015352 <UART_SetConfig+0x5a6>
 8014ffc:	2320      	movs	r3, #32
 8014ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015002:	e1a6      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015004:	2340      	movs	r3, #64	@ 0x40
 8015006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801500a:	e1a2      	b.n	8015352 <UART_SetConfig+0x5a6>
 801500c:	2380      	movs	r3, #128	@ 0x80
 801500e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015012:	e19e      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	4a35      	ldr	r2, [pc, #212]	@ (80150f0 <UART_SetConfig+0x344>)
 801501a:	4293      	cmp	r3, r2
 801501c:	d130      	bne.n	8015080 <UART_SetConfig+0x2d4>
 801501e:	4b31      	ldr	r3, [pc, #196]	@ (80150e4 <UART_SetConfig+0x338>)
 8015020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015022:	f003 0307 	and.w	r3, r3, #7
 8015026:	2b05      	cmp	r3, #5
 8015028:	d826      	bhi.n	8015078 <UART_SetConfig+0x2cc>
 801502a:	a201      	add	r2, pc, #4	@ (adr r2, 8015030 <UART_SetConfig+0x284>)
 801502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015030:	08015049 	.word	0x08015049
 8015034:	08015051 	.word	0x08015051
 8015038:	08015059 	.word	0x08015059
 801503c:	08015061 	.word	0x08015061
 8015040:	08015069 	.word	0x08015069
 8015044:	08015071 	.word	0x08015071
 8015048:	2300      	movs	r3, #0
 801504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801504e:	e180      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015050:	2304      	movs	r3, #4
 8015052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015056:	e17c      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015058:	2308      	movs	r3, #8
 801505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801505e:	e178      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015060:	2310      	movs	r3, #16
 8015062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015066:	e174      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015068:	2320      	movs	r3, #32
 801506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801506e:	e170      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015070:	2340      	movs	r3, #64	@ 0x40
 8015072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015076:	e16c      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015078:	2380      	movs	r3, #128	@ 0x80
 801507a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801507e:	e168      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	4a1b      	ldr	r2, [pc, #108]	@ (80150f4 <UART_SetConfig+0x348>)
 8015086:	4293      	cmp	r3, r2
 8015088:	d142      	bne.n	8015110 <UART_SetConfig+0x364>
 801508a:	4b16      	ldr	r3, [pc, #88]	@ (80150e4 <UART_SetConfig+0x338>)
 801508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801508e:	f003 0307 	and.w	r3, r3, #7
 8015092:	2b05      	cmp	r3, #5
 8015094:	d838      	bhi.n	8015108 <UART_SetConfig+0x35c>
 8015096:	a201      	add	r2, pc, #4	@ (adr r2, 801509c <UART_SetConfig+0x2f0>)
 8015098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801509c:	080150b5 	.word	0x080150b5
 80150a0:	080150bd 	.word	0x080150bd
 80150a4:	080150c5 	.word	0x080150c5
 80150a8:	080150cd 	.word	0x080150cd
 80150ac:	080150f9 	.word	0x080150f9
 80150b0:	08015101 	.word	0x08015101
 80150b4:	2300      	movs	r3, #0
 80150b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150ba:	e14a      	b.n	8015352 <UART_SetConfig+0x5a6>
 80150bc:	2304      	movs	r3, #4
 80150be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150c2:	e146      	b.n	8015352 <UART_SetConfig+0x5a6>
 80150c4:	2308      	movs	r3, #8
 80150c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150ca:	e142      	b.n	8015352 <UART_SetConfig+0x5a6>
 80150cc:	2310      	movs	r3, #16
 80150ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150d2:	e13e      	b.n	8015352 <UART_SetConfig+0x5a6>
 80150d4:	cfff69f3 	.word	0xcfff69f3
 80150d8:	58000c00 	.word	0x58000c00
 80150dc:	11fff4ff 	.word	0x11fff4ff
 80150e0:	40011000 	.word	0x40011000
 80150e4:	58024400 	.word	0x58024400
 80150e8:	40004400 	.word	0x40004400
 80150ec:	40004800 	.word	0x40004800
 80150f0:	40004c00 	.word	0x40004c00
 80150f4:	40005000 	.word	0x40005000
 80150f8:	2320      	movs	r3, #32
 80150fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150fe:	e128      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015100:	2340      	movs	r3, #64	@ 0x40
 8015102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015106:	e124      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015108:	2380      	movs	r3, #128	@ 0x80
 801510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801510e:	e120      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	4acb      	ldr	r2, [pc, #812]	@ (8015444 <UART_SetConfig+0x698>)
 8015116:	4293      	cmp	r3, r2
 8015118:	d176      	bne.n	8015208 <UART_SetConfig+0x45c>
 801511a:	4bcb      	ldr	r3, [pc, #812]	@ (8015448 <UART_SetConfig+0x69c>)
 801511c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801511e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015122:	2b28      	cmp	r3, #40	@ 0x28
 8015124:	d86c      	bhi.n	8015200 <UART_SetConfig+0x454>
 8015126:	a201      	add	r2, pc, #4	@ (adr r2, 801512c <UART_SetConfig+0x380>)
 8015128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801512c:	080151d1 	.word	0x080151d1
 8015130:	08015201 	.word	0x08015201
 8015134:	08015201 	.word	0x08015201
 8015138:	08015201 	.word	0x08015201
 801513c:	08015201 	.word	0x08015201
 8015140:	08015201 	.word	0x08015201
 8015144:	08015201 	.word	0x08015201
 8015148:	08015201 	.word	0x08015201
 801514c:	080151d9 	.word	0x080151d9
 8015150:	08015201 	.word	0x08015201
 8015154:	08015201 	.word	0x08015201
 8015158:	08015201 	.word	0x08015201
 801515c:	08015201 	.word	0x08015201
 8015160:	08015201 	.word	0x08015201
 8015164:	08015201 	.word	0x08015201
 8015168:	08015201 	.word	0x08015201
 801516c:	080151e1 	.word	0x080151e1
 8015170:	08015201 	.word	0x08015201
 8015174:	08015201 	.word	0x08015201
 8015178:	08015201 	.word	0x08015201
 801517c:	08015201 	.word	0x08015201
 8015180:	08015201 	.word	0x08015201
 8015184:	08015201 	.word	0x08015201
 8015188:	08015201 	.word	0x08015201
 801518c:	080151e9 	.word	0x080151e9
 8015190:	08015201 	.word	0x08015201
 8015194:	08015201 	.word	0x08015201
 8015198:	08015201 	.word	0x08015201
 801519c:	08015201 	.word	0x08015201
 80151a0:	08015201 	.word	0x08015201
 80151a4:	08015201 	.word	0x08015201
 80151a8:	08015201 	.word	0x08015201
 80151ac:	080151f1 	.word	0x080151f1
 80151b0:	08015201 	.word	0x08015201
 80151b4:	08015201 	.word	0x08015201
 80151b8:	08015201 	.word	0x08015201
 80151bc:	08015201 	.word	0x08015201
 80151c0:	08015201 	.word	0x08015201
 80151c4:	08015201 	.word	0x08015201
 80151c8:	08015201 	.word	0x08015201
 80151cc:	080151f9 	.word	0x080151f9
 80151d0:	2301      	movs	r3, #1
 80151d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151d6:	e0bc      	b.n	8015352 <UART_SetConfig+0x5a6>
 80151d8:	2304      	movs	r3, #4
 80151da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151de:	e0b8      	b.n	8015352 <UART_SetConfig+0x5a6>
 80151e0:	2308      	movs	r3, #8
 80151e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151e6:	e0b4      	b.n	8015352 <UART_SetConfig+0x5a6>
 80151e8:	2310      	movs	r3, #16
 80151ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151ee:	e0b0      	b.n	8015352 <UART_SetConfig+0x5a6>
 80151f0:	2320      	movs	r3, #32
 80151f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151f6:	e0ac      	b.n	8015352 <UART_SetConfig+0x5a6>
 80151f8:	2340      	movs	r3, #64	@ 0x40
 80151fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151fe:	e0a8      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015200:	2380      	movs	r3, #128	@ 0x80
 8015202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015206:	e0a4      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	4a8f      	ldr	r2, [pc, #572]	@ (801544c <UART_SetConfig+0x6a0>)
 801520e:	4293      	cmp	r3, r2
 8015210:	d130      	bne.n	8015274 <UART_SetConfig+0x4c8>
 8015212:	4b8d      	ldr	r3, [pc, #564]	@ (8015448 <UART_SetConfig+0x69c>)
 8015214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015216:	f003 0307 	and.w	r3, r3, #7
 801521a:	2b05      	cmp	r3, #5
 801521c:	d826      	bhi.n	801526c <UART_SetConfig+0x4c0>
 801521e:	a201      	add	r2, pc, #4	@ (adr r2, 8015224 <UART_SetConfig+0x478>)
 8015220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015224:	0801523d 	.word	0x0801523d
 8015228:	08015245 	.word	0x08015245
 801522c:	0801524d 	.word	0x0801524d
 8015230:	08015255 	.word	0x08015255
 8015234:	0801525d 	.word	0x0801525d
 8015238:	08015265 	.word	0x08015265
 801523c:	2300      	movs	r3, #0
 801523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015242:	e086      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015244:	2304      	movs	r3, #4
 8015246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801524a:	e082      	b.n	8015352 <UART_SetConfig+0x5a6>
 801524c:	2308      	movs	r3, #8
 801524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015252:	e07e      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015254:	2310      	movs	r3, #16
 8015256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801525a:	e07a      	b.n	8015352 <UART_SetConfig+0x5a6>
 801525c:	2320      	movs	r3, #32
 801525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015262:	e076      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015264:	2340      	movs	r3, #64	@ 0x40
 8015266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801526a:	e072      	b.n	8015352 <UART_SetConfig+0x5a6>
 801526c:	2380      	movs	r3, #128	@ 0x80
 801526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015272:	e06e      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	4a75      	ldr	r2, [pc, #468]	@ (8015450 <UART_SetConfig+0x6a4>)
 801527a:	4293      	cmp	r3, r2
 801527c:	d130      	bne.n	80152e0 <UART_SetConfig+0x534>
 801527e:	4b72      	ldr	r3, [pc, #456]	@ (8015448 <UART_SetConfig+0x69c>)
 8015280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015282:	f003 0307 	and.w	r3, r3, #7
 8015286:	2b05      	cmp	r3, #5
 8015288:	d826      	bhi.n	80152d8 <UART_SetConfig+0x52c>
 801528a:	a201      	add	r2, pc, #4	@ (adr r2, 8015290 <UART_SetConfig+0x4e4>)
 801528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015290:	080152a9 	.word	0x080152a9
 8015294:	080152b1 	.word	0x080152b1
 8015298:	080152b9 	.word	0x080152b9
 801529c:	080152c1 	.word	0x080152c1
 80152a0:	080152c9 	.word	0x080152c9
 80152a4:	080152d1 	.word	0x080152d1
 80152a8:	2300      	movs	r3, #0
 80152aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152ae:	e050      	b.n	8015352 <UART_SetConfig+0x5a6>
 80152b0:	2304      	movs	r3, #4
 80152b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152b6:	e04c      	b.n	8015352 <UART_SetConfig+0x5a6>
 80152b8:	2308      	movs	r3, #8
 80152ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152be:	e048      	b.n	8015352 <UART_SetConfig+0x5a6>
 80152c0:	2310      	movs	r3, #16
 80152c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152c6:	e044      	b.n	8015352 <UART_SetConfig+0x5a6>
 80152c8:	2320      	movs	r3, #32
 80152ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152ce:	e040      	b.n	8015352 <UART_SetConfig+0x5a6>
 80152d0:	2340      	movs	r3, #64	@ 0x40
 80152d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152d6:	e03c      	b.n	8015352 <UART_SetConfig+0x5a6>
 80152d8:	2380      	movs	r3, #128	@ 0x80
 80152da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152de:	e038      	b.n	8015352 <UART_SetConfig+0x5a6>
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	4a5b      	ldr	r2, [pc, #364]	@ (8015454 <UART_SetConfig+0x6a8>)
 80152e6:	4293      	cmp	r3, r2
 80152e8:	d130      	bne.n	801534c <UART_SetConfig+0x5a0>
 80152ea:	4b57      	ldr	r3, [pc, #348]	@ (8015448 <UART_SetConfig+0x69c>)
 80152ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80152ee:	f003 0307 	and.w	r3, r3, #7
 80152f2:	2b05      	cmp	r3, #5
 80152f4:	d826      	bhi.n	8015344 <UART_SetConfig+0x598>
 80152f6:	a201      	add	r2, pc, #4	@ (adr r2, 80152fc <UART_SetConfig+0x550>)
 80152f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152fc:	08015315 	.word	0x08015315
 8015300:	0801531d 	.word	0x0801531d
 8015304:	08015325 	.word	0x08015325
 8015308:	0801532d 	.word	0x0801532d
 801530c:	08015335 	.word	0x08015335
 8015310:	0801533d 	.word	0x0801533d
 8015314:	2302      	movs	r3, #2
 8015316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801531a:	e01a      	b.n	8015352 <UART_SetConfig+0x5a6>
 801531c:	2304      	movs	r3, #4
 801531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015322:	e016      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015324:	2308      	movs	r3, #8
 8015326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801532a:	e012      	b.n	8015352 <UART_SetConfig+0x5a6>
 801532c:	2310      	movs	r3, #16
 801532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015332:	e00e      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015334:	2320      	movs	r3, #32
 8015336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801533a:	e00a      	b.n	8015352 <UART_SetConfig+0x5a6>
 801533c:	2340      	movs	r3, #64	@ 0x40
 801533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015342:	e006      	b.n	8015352 <UART_SetConfig+0x5a6>
 8015344:	2380      	movs	r3, #128	@ 0x80
 8015346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801534a:	e002      	b.n	8015352 <UART_SetConfig+0x5a6>
 801534c:	2380      	movs	r3, #128	@ 0x80
 801534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	4a3f      	ldr	r2, [pc, #252]	@ (8015454 <UART_SetConfig+0x6a8>)
 8015358:	4293      	cmp	r3, r2
 801535a:	f040 80f8 	bne.w	801554e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801535e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015362:	2b20      	cmp	r3, #32
 8015364:	dc46      	bgt.n	80153f4 <UART_SetConfig+0x648>
 8015366:	2b02      	cmp	r3, #2
 8015368:	f2c0 8082 	blt.w	8015470 <UART_SetConfig+0x6c4>
 801536c:	3b02      	subs	r3, #2
 801536e:	2b1e      	cmp	r3, #30
 8015370:	d87e      	bhi.n	8015470 <UART_SetConfig+0x6c4>
 8015372:	a201      	add	r2, pc, #4	@ (adr r2, 8015378 <UART_SetConfig+0x5cc>)
 8015374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015378:	080153fb 	.word	0x080153fb
 801537c:	08015471 	.word	0x08015471
 8015380:	08015403 	.word	0x08015403
 8015384:	08015471 	.word	0x08015471
 8015388:	08015471 	.word	0x08015471
 801538c:	08015471 	.word	0x08015471
 8015390:	08015413 	.word	0x08015413
 8015394:	08015471 	.word	0x08015471
 8015398:	08015471 	.word	0x08015471
 801539c:	08015471 	.word	0x08015471
 80153a0:	08015471 	.word	0x08015471
 80153a4:	08015471 	.word	0x08015471
 80153a8:	08015471 	.word	0x08015471
 80153ac:	08015471 	.word	0x08015471
 80153b0:	08015423 	.word	0x08015423
 80153b4:	08015471 	.word	0x08015471
 80153b8:	08015471 	.word	0x08015471
 80153bc:	08015471 	.word	0x08015471
 80153c0:	08015471 	.word	0x08015471
 80153c4:	08015471 	.word	0x08015471
 80153c8:	08015471 	.word	0x08015471
 80153cc:	08015471 	.word	0x08015471
 80153d0:	08015471 	.word	0x08015471
 80153d4:	08015471 	.word	0x08015471
 80153d8:	08015471 	.word	0x08015471
 80153dc:	08015471 	.word	0x08015471
 80153e0:	08015471 	.word	0x08015471
 80153e4:	08015471 	.word	0x08015471
 80153e8:	08015471 	.word	0x08015471
 80153ec:	08015471 	.word	0x08015471
 80153f0:	08015463 	.word	0x08015463
 80153f4:	2b40      	cmp	r3, #64	@ 0x40
 80153f6:	d037      	beq.n	8015468 <UART_SetConfig+0x6bc>
 80153f8:	e03a      	b.n	8015470 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80153fa:	f7fc fda3 	bl	8011f44 <HAL_RCCEx_GetD3PCLK1Freq>
 80153fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015400:	e03c      	b.n	801547c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015406:	4618      	mov	r0, r3
 8015408:	f7fc fdb2 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015410:	e034      	b.n	801547c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015412:	f107 0318 	add.w	r3, r7, #24
 8015416:	4618      	mov	r0, r3
 8015418:	f7fc fefe 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015420:	e02c      	b.n	801547c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015422:	4b09      	ldr	r3, [pc, #36]	@ (8015448 <UART_SetConfig+0x69c>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f003 0320 	and.w	r3, r3, #32
 801542a:	2b00      	cmp	r3, #0
 801542c:	d016      	beq.n	801545c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801542e:	4b06      	ldr	r3, [pc, #24]	@ (8015448 <UART_SetConfig+0x69c>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	08db      	lsrs	r3, r3, #3
 8015434:	f003 0303 	and.w	r3, r3, #3
 8015438:	4a07      	ldr	r2, [pc, #28]	@ (8015458 <UART_SetConfig+0x6ac>)
 801543a:	fa22 f303 	lsr.w	r3, r2, r3
 801543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015440:	e01c      	b.n	801547c <UART_SetConfig+0x6d0>
 8015442:	bf00      	nop
 8015444:	40011400 	.word	0x40011400
 8015448:	58024400 	.word	0x58024400
 801544c:	40007800 	.word	0x40007800
 8015450:	40007c00 	.word	0x40007c00
 8015454:	58000c00 	.word	0x58000c00
 8015458:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801545c:	4b9d      	ldr	r3, [pc, #628]	@ (80156d4 <UART_SetConfig+0x928>)
 801545e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015460:	e00c      	b.n	801547c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015462:	4b9d      	ldr	r3, [pc, #628]	@ (80156d8 <UART_SetConfig+0x92c>)
 8015464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015466:	e009      	b.n	801547c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801546c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801546e:	e005      	b.n	801547c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015470:	2300      	movs	r3, #0
 8015472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8015474:	2301      	movs	r3, #1
 8015476:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801547a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801547c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801547e:	2b00      	cmp	r3, #0
 8015480:	f000 81de 	beq.w	8015840 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015488:	4a94      	ldr	r2, [pc, #592]	@ (80156dc <UART_SetConfig+0x930>)
 801548a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801548e:	461a      	mov	r2, r3
 8015490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015492:	fbb3 f3f2 	udiv	r3, r3, r2
 8015496:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	685a      	ldr	r2, [r3, #4]
 801549c:	4613      	mov	r3, r2
 801549e:	005b      	lsls	r3, r3, #1
 80154a0:	4413      	add	r3, r2
 80154a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d305      	bcc.n	80154b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80154ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d903      	bls.n	80154bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80154b4:	2301      	movs	r3, #1
 80154b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80154ba:	e1c1      	b.n	8015840 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80154bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154be:	2200      	movs	r2, #0
 80154c0:	60bb      	str	r3, [r7, #8]
 80154c2:	60fa      	str	r2, [r7, #12]
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154c8:	4a84      	ldr	r2, [pc, #528]	@ (80156dc <UART_SetConfig+0x930>)
 80154ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	2200      	movs	r2, #0
 80154d2:	603b      	str	r3, [r7, #0]
 80154d4:	607a      	str	r2, [r7, #4]
 80154d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80154da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80154de:	f7ea ff57 	bl	8000390 <__aeabi_uldivmod>
 80154e2:	4602      	mov	r2, r0
 80154e4:	460b      	mov	r3, r1
 80154e6:	4610      	mov	r0, r2
 80154e8:	4619      	mov	r1, r3
 80154ea:	f04f 0200 	mov.w	r2, #0
 80154ee:	f04f 0300 	mov.w	r3, #0
 80154f2:	020b      	lsls	r3, r1, #8
 80154f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80154f8:	0202      	lsls	r2, r0, #8
 80154fa:	6979      	ldr	r1, [r7, #20]
 80154fc:	6849      	ldr	r1, [r1, #4]
 80154fe:	0849      	lsrs	r1, r1, #1
 8015500:	2000      	movs	r0, #0
 8015502:	460c      	mov	r4, r1
 8015504:	4605      	mov	r5, r0
 8015506:	eb12 0804 	adds.w	r8, r2, r4
 801550a:	eb43 0905 	adc.w	r9, r3, r5
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	2200      	movs	r2, #0
 8015514:	469a      	mov	sl, r3
 8015516:	4693      	mov	fp, r2
 8015518:	4652      	mov	r2, sl
 801551a:	465b      	mov	r3, fp
 801551c:	4640      	mov	r0, r8
 801551e:	4649      	mov	r1, r9
 8015520:	f7ea ff36 	bl	8000390 <__aeabi_uldivmod>
 8015524:	4602      	mov	r2, r0
 8015526:	460b      	mov	r3, r1
 8015528:	4613      	mov	r3, r2
 801552a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801552e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015532:	d308      	bcc.n	8015546 <UART_SetConfig+0x79a>
 8015534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801553a:	d204      	bcs.n	8015546 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015542:	60da      	str	r2, [r3, #12]
 8015544:	e17c      	b.n	8015840 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8015546:	2301      	movs	r3, #1
 8015548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801554c:	e178      	b.n	8015840 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	69db      	ldr	r3, [r3, #28]
 8015552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015556:	f040 80c5 	bne.w	80156e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801555a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801555e:	2b20      	cmp	r3, #32
 8015560:	dc48      	bgt.n	80155f4 <UART_SetConfig+0x848>
 8015562:	2b00      	cmp	r3, #0
 8015564:	db7b      	blt.n	801565e <UART_SetConfig+0x8b2>
 8015566:	2b20      	cmp	r3, #32
 8015568:	d879      	bhi.n	801565e <UART_SetConfig+0x8b2>
 801556a:	a201      	add	r2, pc, #4	@ (adr r2, 8015570 <UART_SetConfig+0x7c4>)
 801556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015570:	080155fb 	.word	0x080155fb
 8015574:	08015603 	.word	0x08015603
 8015578:	0801565f 	.word	0x0801565f
 801557c:	0801565f 	.word	0x0801565f
 8015580:	0801560b 	.word	0x0801560b
 8015584:	0801565f 	.word	0x0801565f
 8015588:	0801565f 	.word	0x0801565f
 801558c:	0801565f 	.word	0x0801565f
 8015590:	0801561b 	.word	0x0801561b
 8015594:	0801565f 	.word	0x0801565f
 8015598:	0801565f 	.word	0x0801565f
 801559c:	0801565f 	.word	0x0801565f
 80155a0:	0801565f 	.word	0x0801565f
 80155a4:	0801565f 	.word	0x0801565f
 80155a8:	0801565f 	.word	0x0801565f
 80155ac:	0801565f 	.word	0x0801565f
 80155b0:	0801562b 	.word	0x0801562b
 80155b4:	0801565f 	.word	0x0801565f
 80155b8:	0801565f 	.word	0x0801565f
 80155bc:	0801565f 	.word	0x0801565f
 80155c0:	0801565f 	.word	0x0801565f
 80155c4:	0801565f 	.word	0x0801565f
 80155c8:	0801565f 	.word	0x0801565f
 80155cc:	0801565f 	.word	0x0801565f
 80155d0:	0801565f 	.word	0x0801565f
 80155d4:	0801565f 	.word	0x0801565f
 80155d8:	0801565f 	.word	0x0801565f
 80155dc:	0801565f 	.word	0x0801565f
 80155e0:	0801565f 	.word	0x0801565f
 80155e4:	0801565f 	.word	0x0801565f
 80155e8:	0801565f 	.word	0x0801565f
 80155ec:	0801565f 	.word	0x0801565f
 80155f0:	08015651 	.word	0x08015651
 80155f4:	2b40      	cmp	r3, #64	@ 0x40
 80155f6:	d02e      	beq.n	8015656 <UART_SetConfig+0x8aa>
 80155f8:	e031      	b.n	801565e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80155fa:	f7fa fced 	bl	800ffd8 <HAL_RCC_GetPCLK1Freq>
 80155fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015600:	e033      	b.n	801566a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015602:	f7fa fcff 	bl	8010004 <HAL_RCC_GetPCLK2Freq>
 8015606:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015608:	e02f      	b.n	801566a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801560a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801560e:	4618      	mov	r0, r3
 8015610:	f7fc fcae 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015618:	e027      	b.n	801566a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801561a:	f107 0318 	add.w	r3, r7, #24
 801561e:	4618      	mov	r0, r3
 8015620:	f7fc fdfa 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015628:	e01f      	b.n	801566a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801562a:	4b2d      	ldr	r3, [pc, #180]	@ (80156e0 <UART_SetConfig+0x934>)
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	f003 0320 	and.w	r3, r3, #32
 8015632:	2b00      	cmp	r3, #0
 8015634:	d009      	beq.n	801564a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015636:	4b2a      	ldr	r3, [pc, #168]	@ (80156e0 <UART_SetConfig+0x934>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	08db      	lsrs	r3, r3, #3
 801563c:	f003 0303 	and.w	r3, r3, #3
 8015640:	4a24      	ldr	r2, [pc, #144]	@ (80156d4 <UART_SetConfig+0x928>)
 8015642:	fa22 f303 	lsr.w	r3, r2, r3
 8015646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015648:	e00f      	b.n	801566a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801564a:	4b22      	ldr	r3, [pc, #136]	@ (80156d4 <UART_SetConfig+0x928>)
 801564c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801564e:	e00c      	b.n	801566a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015650:	4b21      	ldr	r3, [pc, #132]	@ (80156d8 <UART_SetConfig+0x92c>)
 8015652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015654:	e009      	b.n	801566a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801565a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801565c:	e005      	b.n	801566a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801565e:	2300      	movs	r3, #0
 8015660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8015662:	2301      	movs	r3, #1
 8015664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8015668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801566a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801566c:	2b00      	cmp	r3, #0
 801566e:	f000 80e7 	beq.w	8015840 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015676:	4a19      	ldr	r2, [pc, #100]	@ (80156dc <UART_SetConfig+0x930>)
 8015678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801567c:	461a      	mov	r2, r3
 801567e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015680:	fbb3 f3f2 	udiv	r3, r3, r2
 8015684:	005a      	lsls	r2, r3, #1
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	085b      	lsrs	r3, r3, #1
 801568c:	441a      	add	r2, r3
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	fbb2 f3f3 	udiv	r3, r2, r3
 8015696:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801569a:	2b0f      	cmp	r3, #15
 801569c:	d916      	bls.n	80156cc <UART_SetConfig+0x920>
 801569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156a4:	d212      	bcs.n	80156cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80156a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	f023 030f 	bic.w	r3, r3, #15
 80156ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80156b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b2:	085b      	lsrs	r3, r3, #1
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	f003 0307 	and.w	r3, r3, #7
 80156ba:	b29a      	uxth	r2, r3
 80156bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80156be:	4313      	orrs	r3, r2
 80156c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80156c2:	697b      	ldr	r3, [r7, #20]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80156c8:	60da      	str	r2, [r3, #12]
 80156ca:	e0b9      	b.n	8015840 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80156cc:	2301      	movs	r3, #1
 80156ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80156d2:	e0b5      	b.n	8015840 <UART_SetConfig+0xa94>
 80156d4:	03d09000 	.word	0x03d09000
 80156d8:	003d0900 	.word	0x003d0900
 80156dc:	0801f230 	.word	0x0801f230
 80156e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80156e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80156e8:	2b20      	cmp	r3, #32
 80156ea:	dc49      	bgt.n	8015780 <UART_SetConfig+0x9d4>
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	db7c      	blt.n	80157ea <UART_SetConfig+0xa3e>
 80156f0:	2b20      	cmp	r3, #32
 80156f2:	d87a      	bhi.n	80157ea <UART_SetConfig+0xa3e>
 80156f4:	a201      	add	r2, pc, #4	@ (adr r2, 80156fc <UART_SetConfig+0x950>)
 80156f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156fa:	bf00      	nop
 80156fc:	08015787 	.word	0x08015787
 8015700:	0801578f 	.word	0x0801578f
 8015704:	080157eb 	.word	0x080157eb
 8015708:	080157eb 	.word	0x080157eb
 801570c:	08015797 	.word	0x08015797
 8015710:	080157eb 	.word	0x080157eb
 8015714:	080157eb 	.word	0x080157eb
 8015718:	080157eb 	.word	0x080157eb
 801571c:	080157a7 	.word	0x080157a7
 8015720:	080157eb 	.word	0x080157eb
 8015724:	080157eb 	.word	0x080157eb
 8015728:	080157eb 	.word	0x080157eb
 801572c:	080157eb 	.word	0x080157eb
 8015730:	080157eb 	.word	0x080157eb
 8015734:	080157eb 	.word	0x080157eb
 8015738:	080157eb 	.word	0x080157eb
 801573c:	080157b7 	.word	0x080157b7
 8015740:	080157eb 	.word	0x080157eb
 8015744:	080157eb 	.word	0x080157eb
 8015748:	080157eb 	.word	0x080157eb
 801574c:	080157eb 	.word	0x080157eb
 8015750:	080157eb 	.word	0x080157eb
 8015754:	080157eb 	.word	0x080157eb
 8015758:	080157eb 	.word	0x080157eb
 801575c:	080157eb 	.word	0x080157eb
 8015760:	080157eb 	.word	0x080157eb
 8015764:	080157eb 	.word	0x080157eb
 8015768:	080157eb 	.word	0x080157eb
 801576c:	080157eb 	.word	0x080157eb
 8015770:	080157eb 	.word	0x080157eb
 8015774:	080157eb 	.word	0x080157eb
 8015778:	080157eb 	.word	0x080157eb
 801577c:	080157dd 	.word	0x080157dd
 8015780:	2b40      	cmp	r3, #64	@ 0x40
 8015782:	d02e      	beq.n	80157e2 <UART_SetConfig+0xa36>
 8015784:	e031      	b.n	80157ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015786:	f7fa fc27 	bl	800ffd8 <HAL_RCC_GetPCLK1Freq>
 801578a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801578c:	e033      	b.n	80157f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801578e:	f7fa fc39 	bl	8010004 <HAL_RCC_GetPCLK2Freq>
 8015792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015794:	e02f      	b.n	80157f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801579a:	4618      	mov	r0, r3
 801579c:	f7fc fbe8 	bl	8011f70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80157a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157a4:	e027      	b.n	80157f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80157a6:	f107 0318 	add.w	r3, r7, #24
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7fc fd34 	bl	8012218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80157b0:	69fb      	ldr	r3, [r7, #28]
 80157b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157b4:	e01f      	b.n	80157f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80157b6:	4b2d      	ldr	r3, [pc, #180]	@ (801586c <UART_SetConfig+0xac0>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	f003 0320 	and.w	r3, r3, #32
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d009      	beq.n	80157d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80157c2:	4b2a      	ldr	r3, [pc, #168]	@ (801586c <UART_SetConfig+0xac0>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	08db      	lsrs	r3, r3, #3
 80157c8:	f003 0303 	and.w	r3, r3, #3
 80157cc:	4a28      	ldr	r2, [pc, #160]	@ (8015870 <UART_SetConfig+0xac4>)
 80157ce:	fa22 f303 	lsr.w	r3, r2, r3
 80157d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80157d4:	e00f      	b.n	80157f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80157d6:	4b26      	ldr	r3, [pc, #152]	@ (8015870 <UART_SetConfig+0xac4>)
 80157d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157da:	e00c      	b.n	80157f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80157dc:	4b25      	ldr	r3, [pc, #148]	@ (8015874 <UART_SetConfig+0xac8>)
 80157de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157e0:	e009      	b.n	80157f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80157e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80157e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157e8:	e005      	b.n	80157f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80157ea:	2300      	movs	r3, #0
 80157ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80157ee:	2301      	movs	r3, #1
 80157f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80157f4:	bf00      	nop
    }

    if (pclk != 0U)
 80157f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d021      	beq.n	8015840 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015800:	4a1d      	ldr	r2, [pc, #116]	@ (8015878 <UART_SetConfig+0xacc>)
 8015802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015806:	461a      	mov	r2, r3
 8015808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801580a:	fbb3 f2f2 	udiv	r2, r3, r2
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	085b      	lsrs	r3, r3, #1
 8015814:	441a      	add	r2, r3
 8015816:	697b      	ldr	r3, [r7, #20]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	fbb2 f3f3 	udiv	r3, r2, r3
 801581e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015822:	2b0f      	cmp	r3, #15
 8015824:	d909      	bls.n	801583a <UART_SetConfig+0xa8e>
 8015826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801582c:	d205      	bcs.n	801583a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015830:	b29a      	uxth	r2, r3
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	60da      	str	r2, [r3, #12]
 8015838:	e002      	b.n	8015840 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801583a:	2301      	movs	r3, #1
 801583c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	2201      	movs	r2, #1
 8015844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	2201      	movs	r2, #1
 801584c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	2200      	movs	r2, #0
 8015854:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	2200      	movs	r2, #0
 801585a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801585c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8015860:	4618      	mov	r0, r3
 8015862:	3748      	adds	r7, #72	@ 0x48
 8015864:	46bd      	mov	sp, r7
 8015866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801586a:	bf00      	nop
 801586c:	58024400 	.word	0x58024400
 8015870:	03d09000 	.word	0x03d09000
 8015874:	003d0900 	.word	0x003d0900
 8015878:	0801f230 	.word	0x0801f230

0801587c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801587c:	b480      	push	{r7}
 801587e:	b083      	sub	sp, #12
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015888:	f003 0308 	and.w	r3, r3, #8
 801588c:	2b00      	cmp	r3, #0
 801588e:	d00a      	beq.n	80158a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	685b      	ldr	r3, [r3, #4]
 8015896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	430a      	orrs	r2, r1
 80158a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158aa:	f003 0301 	and.w	r3, r3, #1
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d00a      	beq.n	80158c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	430a      	orrs	r2, r1
 80158c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158cc:	f003 0302 	and.w	r3, r3, #2
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d00a      	beq.n	80158ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	685b      	ldr	r3, [r3, #4]
 80158da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	430a      	orrs	r2, r1
 80158e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158ee:	f003 0304 	and.w	r3, r3, #4
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d00a      	beq.n	801590c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	430a      	orrs	r2, r1
 801590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015910:	f003 0310 	and.w	r3, r3, #16
 8015914:	2b00      	cmp	r3, #0
 8015916:	d00a      	beq.n	801592e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	689b      	ldr	r3, [r3, #8]
 801591e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	430a      	orrs	r2, r1
 801592c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015932:	f003 0320 	and.w	r3, r3, #32
 8015936:	2b00      	cmp	r3, #0
 8015938:	d00a      	beq.n	8015950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	689b      	ldr	r3, [r3, #8]
 8015940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	430a      	orrs	r2, r1
 801594e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015958:	2b00      	cmp	r3, #0
 801595a:	d01a      	beq.n	8015992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	430a      	orrs	r2, r1
 8015970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801597a:	d10a      	bne.n	8015992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	430a      	orrs	r2, r1
 8015990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801599a:	2b00      	cmp	r3, #0
 801599c:	d00a      	beq.n	80159b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	430a      	orrs	r2, r1
 80159b2:	605a      	str	r2, [r3, #4]
  }
}
 80159b4:	bf00      	nop
 80159b6:	370c      	adds	r7, #12
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr

080159c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b098      	sub	sp, #96	@ 0x60
 80159c4:	af02      	add	r7, sp, #8
 80159c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	2200      	movs	r2, #0
 80159cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80159d0:	f7ee fa40 	bl	8003e54 <HAL_GetTick>
 80159d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f003 0308 	and.w	r3, r3, #8
 80159e0:	2b08      	cmp	r3, #8
 80159e2:	d12f      	bne.n	8015a44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80159e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80159e8:	9300      	str	r3, [sp, #0]
 80159ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80159ec:	2200      	movs	r2, #0
 80159ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f000 f88e 	bl	8015b14 <UART_WaitOnFlagUntilTimeout>
 80159f8:	4603      	mov	r3, r0
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d022      	beq.n	8015a44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a06:	e853 3f00 	ldrex	r3, [r3]
 8015a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	461a      	mov	r2, r3
 8015a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8015a1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015a24:	e841 2300 	strex	r3, r2, [r1]
 8015a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d1e6      	bne.n	80159fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2220      	movs	r2, #32
 8015a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015a40:	2303      	movs	r3, #3
 8015a42:	e063      	b.n	8015b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	f003 0304 	and.w	r3, r3, #4
 8015a4e:	2b04      	cmp	r3, #4
 8015a50:	d149      	bne.n	8015ae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015a52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015a56:	9300      	str	r3, [sp, #0]
 8015a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f000 f857 	bl	8015b14 <UART_WaitOnFlagUntilTimeout>
 8015a66:	4603      	mov	r3, r0
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d03c      	beq.n	8015ae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a74:	e853 3f00 	ldrex	r3, [r3]
 8015a78:	623b      	str	r3, [r7, #32]
   return(result);
 8015a7a:	6a3b      	ldr	r3, [r7, #32]
 8015a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	461a      	mov	r2, r3
 8015a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8015a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a92:	e841 2300 	strex	r3, r2, [r1]
 8015a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d1e6      	bne.n	8015a6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	3308      	adds	r3, #8
 8015aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	e853 3f00 	ldrex	r3, [r3]
 8015aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	f023 0301 	bic.w	r3, r3, #1
 8015ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	3308      	adds	r3, #8
 8015abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015abe:	61fa      	str	r2, [r7, #28]
 8015ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ac2:	69b9      	ldr	r1, [r7, #24]
 8015ac4:	69fa      	ldr	r2, [r7, #28]
 8015ac6:	e841 2300 	strex	r3, r2, [r1]
 8015aca:	617b      	str	r3, [r7, #20]
   return(result);
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d1e5      	bne.n	8015a9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	2220      	movs	r2, #32
 8015ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2200      	movs	r2, #0
 8015ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015ae2:	2303      	movs	r3, #3
 8015ae4:	e012      	b.n	8015b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2220      	movs	r2, #32
 8015aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2220      	movs	r2, #32
 8015af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2200      	movs	r2, #0
 8015afa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	2200      	movs	r2, #0
 8015b00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2200      	movs	r2, #0
 8015b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015b0a:	2300      	movs	r3, #0
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	3758      	adds	r7, #88	@ 0x58
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b084      	sub	sp, #16
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	60f8      	str	r0, [r7, #12]
 8015b1c:	60b9      	str	r1, [r7, #8]
 8015b1e:	603b      	str	r3, [r7, #0]
 8015b20:	4613      	mov	r3, r2
 8015b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015b24:	e04f      	b.n	8015bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b2c:	d04b      	beq.n	8015bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015b2e:	f7ee f991 	bl	8003e54 <HAL_GetTick>
 8015b32:	4602      	mov	r2, r0
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	1ad3      	subs	r3, r2, r3
 8015b38:	69ba      	ldr	r2, [r7, #24]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d302      	bcc.n	8015b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8015b3e:	69bb      	ldr	r3, [r7, #24]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d101      	bne.n	8015b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015b44:	2303      	movs	r3, #3
 8015b46:	e04e      	b.n	8015be6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	f003 0304 	and.w	r3, r3, #4
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d037      	beq.n	8015bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	2b80      	cmp	r3, #128	@ 0x80
 8015b5a:	d034      	beq.n	8015bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	2b40      	cmp	r3, #64	@ 0x40
 8015b60:	d031      	beq.n	8015bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	69db      	ldr	r3, [r3, #28]
 8015b68:	f003 0308 	and.w	r3, r3, #8
 8015b6c:	2b08      	cmp	r3, #8
 8015b6e:	d110      	bne.n	8015b92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	2208      	movs	r2, #8
 8015b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015b78:	68f8      	ldr	r0, [r7, #12]
 8015b7a:	f000 f921 	bl	8015dc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	2208      	movs	r2, #8
 8015b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	2200      	movs	r2, #0
 8015b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8015b8e:	2301      	movs	r3, #1
 8015b90:	e029      	b.n	8015be6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	69db      	ldr	r3, [r3, #28]
 8015b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015ba0:	d111      	bne.n	8015bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015bac:	68f8      	ldr	r0, [r7, #12]
 8015bae:	f000 f907 	bl	8015dc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	2220      	movs	r2, #32
 8015bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8015bc2:	2303      	movs	r3, #3
 8015bc4:	e00f      	b.n	8015be6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	69da      	ldr	r2, [r3, #28]
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	4013      	ands	r3, r2
 8015bd0:	68ba      	ldr	r2, [r7, #8]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	bf0c      	ite	eq
 8015bd6:	2301      	moveq	r3, #1
 8015bd8:	2300      	movne	r3, #0
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	461a      	mov	r2, r3
 8015bde:	79fb      	ldrb	r3, [r7, #7]
 8015be0:	429a      	cmp	r2, r3
 8015be2:	d0a0      	beq.n	8015b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015be4:	2300      	movs	r3, #0
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3710      	adds	r7, #16
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
	...

08015bf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b096      	sub	sp, #88	@ 0x58
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	4613      	mov	r3, r2
 8015bfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	68ba      	ldr	r2, [r7, #8]
 8015c02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	88fa      	ldrh	r2, [r7, #6]
 8015c08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	2222      	movs	r2, #34	@ 0x22
 8015c18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d02d      	beq.n	8015c82 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c2c:	4a40      	ldr	r2, [pc, #256]	@ (8015d30 <UART_Start_Receive_DMA+0x140>)
 8015c2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c36:	4a3f      	ldr	r2, [pc, #252]	@ (8015d34 <UART_Start_Receive_DMA+0x144>)
 8015c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c40:	4a3d      	ldr	r2, [pc, #244]	@ (8015d38 <UART_Start_Receive_DMA+0x148>)
 8015c42:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	3324      	adds	r3, #36	@ 0x24
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015c60:	461a      	mov	r2, r3
 8015c62:	88fb      	ldrh	r3, [r7, #6]
 8015c64:	f7f0 f8c8 	bl	8005df8 <HAL_DMA_Start_IT>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d009      	beq.n	8015c82 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2210      	movs	r2, #16
 8015c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	2220      	movs	r2, #32
 8015c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	e051      	b.n	8015d26 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	691b      	ldr	r3, [r3, #16]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d018      	beq.n	8015cbc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c92:	e853 3f00 	ldrex	r3, [r3]
 8015c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015c9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	461a      	mov	r2, r3
 8015ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015caa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015cb0:	e841 2300 	strex	r3, r2, [r1]
 8015cb4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8015cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d1e6      	bne.n	8015c8a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	3308      	adds	r3, #8
 8015cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc6:	e853 3f00 	ldrex	r3, [r3]
 8015cca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cce:	f043 0301 	orr.w	r3, r3, #1
 8015cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	3308      	adds	r3, #8
 8015cda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015cdc:	637a      	str	r2, [r7, #52]	@ 0x34
 8015cde:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ce0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015ce2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015ce4:	e841 2300 	strex	r3, r2, [r1]
 8015ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8015cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d1e5      	bne.n	8015cbc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	3308      	adds	r3, #8
 8015cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cf8:	697b      	ldr	r3, [r7, #20]
 8015cfa:	e853 3f00 	ldrex	r3, [r3]
 8015cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	3308      	adds	r3, #8
 8015d0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015d10:	623a      	str	r2, [r7, #32]
 8015d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d14:	69f9      	ldr	r1, [r7, #28]
 8015d16:	6a3a      	ldr	r2, [r7, #32]
 8015d18:	e841 2300 	strex	r3, r2, [r1]
 8015d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8015d1e:	69bb      	ldr	r3, [r7, #24]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d1e5      	bne.n	8015cf0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8015d24:	2300      	movs	r3, #0
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3758      	adds	r7, #88	@ 0x58
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	08015e8d 	.word	0x08015e8d
 8015d34:	08015fb5 	.word	0x08015fb5
 8015d38:	08015ff3 	.word	0x08015ff3

08015d3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015d3c:	b480      	push	{r7}
 8015d3e:	b08f      	sub	sp, #60	@ 0x3c
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d4a:	6a3b      	ldr	r3, [r7, #32]
 8015d4c:	e853 3f00 	ldrex	r3, [r3]
 8015d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8015d52:	69fb      	ldr	r3, [r7, #28]
 8015d54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	461a      	mov	r2, r3
 8015d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015d64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015d6a:	e841 2300 	strex	r3, r2, [r1]
 8015d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d1e6      	bne.n	8015d44 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	3308      	adds	r3, #8
 8015d7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	e853 3f00 	ldrex	r3, [r3]
 8015d84:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8015d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	3308      	adds	r3, #8
 8015d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d96:	61ba      	str	r2, [r7, #24]
 8015d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d9a:	6979      	ldr	r1, [r7, #20]
 8015d9c:	69ba      	ldr	r2, [r7, #24]
 8015d9e:	e841 2300 	strex	r3, r2, [r1]
 8015da2:	613b      	str	r3, [r7, #16]
   return(result);
 8015da4:	693b      	ldr	r3, [r7, #16]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d1e5      	bne.n	8015d76 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2220      	movs	r2, #32
 8015dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8015db2:	bf00      	nop
 8015db4:	373c      	adds	r7, #60	@ 0x3c
 8015db6:	46bd      	mov	sp, r7
 8015db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dbc:	4770      	bx	lr
	...

08015dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	b095      	sub	sp, #84	@ 0x54
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dd0:	e853 3f00 	ldrex	r3, [r3]
 8015dd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	461a      	mov	r2, r3
 8015de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8015de8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015dee:	e841 2300 	strex	r3, r2, [r1]
 8015df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1e6      	bne.n	8015dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	3308      	adds	r3, #8
 8015e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e02:	6a3b      	ldr	r3, [r7, #32]
 8015e04:	e853 3f00 	ldrex	r3, [r3]
 8015e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8015e0a:	69fa      	ldr	r2, [r7, #28]
 8015e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8015e88 <UART_EndRxTransfer+0xc8>)
 8015e0e:	4013      	ands	r3, r2
 8015e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	3308      	adds	r3, #8
 8015e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e22:	e841 2300 	strex	r3, r2, [r1]
 8015e26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d1e5      	bne.n	8015dfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e32:	2b01      	cmp	r3, #1
 8015e34:	d118      	bne.n	8015e68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	e853 3f00 	ldrex	r3, [r3]
 8015e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	f023 0310 	bic.w	r3, r3, #16
 8015e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	461a      	mov	r2, r3
 8015e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015e54:	61bb      	str	r3, [r7, #24]
 8015e56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e58:	6979      	ldr	r1, [r7, #20]
 8015e5a:	69ba      	ldr	r2, [r7, #24]
 8015e5c:	e841 2300 	strex	r3, r2, [r1]
 8015e60:	613b      	str	r3, [r7, #16]
   return(result);
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d1e6      	bne.n	8015e36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2220      	movs	r2, #32
 8015e6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2200      	movs	r2, #0
 8015e74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8015e7c:	bf00      	nop
 8015e7e:	3754      	adds	r7, #84	@ 0x54
 8015e80:	46bd      	mov	sp, r7
 8015e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e86:	4770      	bx	lr
 8015e88:	effffffe 	.word	0xeffffffe

08015e8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b09c      	sub	sp, #112	@ 0x70
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e98:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	69db      	ldr	r3, [r3, #28]
 8015e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015ea2:	d071      	beq.n	8015f88 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8015ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015eb4:	e853 3f00 	ldrex	r3, [r3]
 8015eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015eca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015ecc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015ed0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015ed2:	e841 2300 	strex	r3, r2, [r1]
 8015ed6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8015ed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1e6      	bne.n	8015eac <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	3308      	adds	r3, #8
 8015ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ee8:	e853 3f00 	ldrex	r3, [r3]
 8015eec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ef0:	f023 0301 	bic.w	r3, r3, #1
 8015ef4:	667b      	str	r3, [r7, #100]	@ 0x64
 8015ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	3308      	adds	r3, #8
 8015efc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015efe:	647a      	str	r2, [r7, #68]	@ 0x44
 8015f00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015f06:	e841 2300 	strex	r3, r2, [r1]
 8015f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d1e5      	bne.n	8015ede <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	3308      	adds	r3, #8
 8015f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f1c:	e853 3f00 	ldrex	r3, [r3]
 8015f20:	623b      	str	r3, [r7, #32]
   return(result);
 8015f22:	6a3b      	ldr	r3, [r7, #32]
 8015f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015f28:	663b      	str	r3, [r7, #96]	@ 0x60
 8015f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	3308      	adds	r3, #8
 8015f30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015f32:	633a      	str	r2, [r7, #48]	@ 0x30
 8015f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f3a:	e841 2300 	strex	r3, r2, [r1]
 8015f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d1e5      	bne.n	8015f12 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f48:	2220      	movs	r2, #32
 8015f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f52:	2b01      	cmp	r3, #1
 8015f54:	d118      	bne.n	8015f88 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	e853 3f00 	ldrex	r3, [r3]
 8015f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	f023 0310 	bic.w	r3, r3, #16
 8015f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	461a      	mov	r2, r3
 8015f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015f74:	61fb      	str	r3, [r7, #28]
 8015f76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f78:	69b9      	ldr	r1, [r7, #24]
 8015f7a:	69fa      	ldr	r2, [r7, #28]
 8015f7c:	e841 2300 	strex	r3, r2, [r1]
 8015f80:	617b      	str	r3, [r7, #20]
   return(result);
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d1e6      	bne.n	8015f56 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f92:	2b01      	cmp	r3, #1
 8015f94:	d107      	bne.n	8015fa6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015fa0:	f7fe fef8 	bl	8014d94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015fa4:	e002      	b.n	8015fac <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8015fa6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015fa8:	f7eb fd72 	bl	8001a90 <HAL_UART_RxCpltCallback>
}
 8015fac:	bf00      	nop
 8015fae:	3770      	adds	r7, #112	@ 0x70
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fc0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2201      	movs	r2, #1
 8015fc6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	d109      	bne.n	8015fe4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015fd6:	085b      	lsrs	r3, r3, #1
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	4619      	mov	r1, r3
 8015fdc:	68f8      	ldr	r0, [r7, #12]
 8015fde:	f7fe fed9 	bl	8014d94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015fe2:	e002      	b.n	8015fea <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8015fe4:	68f8      	ldr	r0, [r7, #12]
 8015fe6:	f7fe fec1 	bl	8014d6c <HAL_UART_RxHalfCpltCallback>
}
 8015fea:	bf00      	nop
 8015fec:	3710      	adds	r7, #16
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}

08015ff2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015ff2:	b580      	push	{r7, lr}
 8015ff4:	b086      	sub	sp, #24
 8015ff6:	af00      	add	r7, sp, #0
 8015ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ffe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016006:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8016008:	697b      	ldr	r3, [r7, #20]
 801600a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801600e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	689b      	ldr	r3, [r3, #8]
 8016016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801601a:	2b80      	cmp	r3, #128	@ 0x80
 801601c:	d109      	bne.n	8016032 <UART_DMAError+0x40>
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	2b21      	cmp	r3, #33	@ 0x21
 8016022:	d106      	bne.n	8016032 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	2200      	movs	r2, #0
 8016028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801602c:	6978      	ldr	r0, [r7, #20]
 801602e:	f7ff fe85 	bl	8015d3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	689b      	ldr	r3, [r3, #8]
 8016038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801603c:	2b40      	cmp	r3, #64	@ 0x40
 801603e:	d109      	bne.n	8016054 <UART_DMAError+0x62>
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	2b22      	cmp	r3, #34	@ 0x22
 8016044:	d106      	bne.n	8016054 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	2200      	movs	r2, #0
 801604a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801604e:	6978      	ldr	r0, [r7, #20]
 8016050:	f7ff feb6 	bl	8015dc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801605a:	f043 0210 	orr.w	r2, r3, #16
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016064:	6978      	ldr	r0, [r7, #20]
 8016066:	f7fe fe8b 	bl	8014d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801606a:	bf00      	nop
 801606c:	3718      	adds	r7, #24
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}

08016072 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016072:	b580      	push	{r7, lr}
 8016074:	b084      	sub	sp, #16
 8016076:	af00      	add	r7, sp, #0
 8016078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801607e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	2200      	movs	r2, #0
 8016084:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	f7fe fe79 	bl	8014d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801608e:	bf00      	nop
 8016090:	3710      	adds	r7, #16
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}

08016096 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016096:	b580      	push	{r7, lr}
 8016098:	b088      	sub	sp, #32
 801609a:	af00      	add	r7, sp, #0
 801609c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	e853 3f00 	ldrex	r3, [r3]
 80160aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80160b2:	61fb      	str	r3, [r7, #28]
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	461a      	mov	r2, r3
 80160ba:	69fb      	ldr	r3, [r7, #28]
 80160bc:	61bb      	str	r3, [r7, #24]
 80160be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160c0:	6979      	ldr	r1, [r7, #20]
 80160c2:	69ba      	ldr	r2, [r7, #24]
 80160c4:	e841 2300 	strex	r3, r2, [r1]
 80160c8:	613b      	str	r3, [r7, #16]
   return(result);
 80160ca:	693b      	ldr	r3, [r7, #16]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d1e6      	bne.n	801609e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2220      	movs	r2, #32
 80160d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	2200      	movs	r2, #0
 80160dc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80160de:	6878      	ldr	r0, [r7, #4]
 80160e0:	f7fe fe3a 	bl	8014d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80160e4:	bf00      	nop
 80160e6:	3720      	adds	r7, #32
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80160f4:	bf00      	nop
 80160f6:	370c      	adds	r7, #12
 80160f8:	46bd      	mov	sp, r7
 80160fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fe:	4770      	bx	lr

08016100 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016100:	b480      	push	{r7}
 8016102:	b083      	sub	sp, #12
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016108:	bf00      	nop
 801610a:	370c      	adds	r7, #12
 801610c:	46bd      	mov	sp, r7
 801610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016112:	4770      	bx	lr

08016114 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016114:	b480      	push	{r7}
 8016116:	b083      	sub	sp, #12
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801611c:	bf00      	nop
 801611e:	370c      	adds	r7, #12
 8016120:	46bd      	mov	sp, r7
 8016122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016126:	4770      	bx	lr

08016128 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b084      	sub	sp, #16
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016136:	2b01      	cmp	r3, #1
 8016138:	d101      	bne.n	801613e <HAL_UARTEx_EnableFifoMode+0x16>
 801613a:	2302      	movs	r3, #2
 801613c:	e02b      	b.n	8016196 <HAL_UARTEx_EnableFifoMode+0x6e>
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2201      	movs	r2, #1
 8016142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	2224      	movs	r2, #36	@ 0x24
 801614a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	681a      	ldr	r2, [r3, #0]
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	f022 0201 	bic.w	r2, r2, #1
 8016164:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801616c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8016174:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	68fa      	ldr	r2, [r7, #12]
 801617c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f000 f88a 	bl	8016298 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2220      	movs	r2, #32
 8016188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	2200      	movs	r2, #0
 8016190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016194:	2300      	movs	r3, #0
}
 8016196:	4618      	mov	r0, r3
 8016198:	3710      	adds	r7, #16
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}

0801619e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801619e:	b580      	push	{r7, lr}
 80161a0:	b084      	sub	sp, #16
 80161a2:	af00      	add	r7, sp, #0
 80161a4:	6078      	str	r0, [r7, #4]
 80161a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80161ae:	2b01      	cmp	r3, #1
 80161b0:	d101      	bne.n	80161b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80161b2:	2302      	movs	r3, #2
 80161b4:	e02d      	b.n	8016212 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2201      	movs	r2, #1
 80161ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	2224      	movs	r2, #36	@ 0x24
 80161c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	681a      	ldr	r2, [r3, #0]
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	f022 0201 	bic.w	r2, r2, #1
 80161dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	689b      	ldr	r3, [r3, #8]
 80161e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	683a      	ldr	r2, [r7, #0]
 80161ee:	430a      	orrs	r2, r1
 80161f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f000 f850 	bl	8016298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	68fa      	ldr	r2, [r7, #12]
 80161fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2220      	movs	r2, #32
 8016204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2200      	movs	r2, #0
 801620c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016210:	2300      	movs	r3, #0
}
 8016212:	4618      	mov	r0, r3
 8016214:	3710      	adds	r7, #16
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}

0801621a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801621a:	b580      	push	{r7, lr}
 801621c:	b084      	sub	sp, #16
 801621e:	af00      	add	r7, sp, #0
 8016220:	6078      	str	r0, [r7, #4]
 8016222:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801622a:	2b01      	cmp	r3, #1
 801622c:	d101      	bne.n	8016232 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801622e:	2302      	movs	r3, #2
 8016230:	e02d      	b.n	801628e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2201      	movs	r2, #1
 8016236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	2224      	movs	r2, #36	@ 0x24
 801623e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	681a      	ldr	r2, [r3, #0]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f022 0201 	bic.w	r2, r2, #1
 8016258:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	689b      	ldr	r3, [r3, #8]
 8016260:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	683a      	ldr	r2, [r7, #0]
 801626a:	430a      	orrs	r2, r1
 801626c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 f812 	bl	8016298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	68fa      	ldr	r2, [r7, #12]
 801627a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	2220      	movs	r2, #32
 8016280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2200      	movs	r2, #0
 8016288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801628c:	2300      	movs	r3, #0
}
 801628e:	4618      	mov	r0, r3
 8016290:	3710      	adds	r7, #16
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}
	...

08016298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016298:	b480      	push	{r7}
 801629a:	b085      	sub	sp, #20
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d108      	bne.n	80162ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2201      	movs	r2, #1
 80162ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2201      	movs	r2, #1
 80162b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80162b8:	e031      	b.n	801631e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80162ba:	2310      	movs	r3, #16
 80162bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80162be:	2310      	movs	r3, #16
 80162c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	689b      	ldr	r3, [r3, #8]
 80162c8:	0e5b      	lsrs	r3, r3, #25
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	f003 0307 	and.w	r3, r3, #7
 80162d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	689b      	ldr	r3, [r3, #8]
 80162d8:	0f5b      	lsrs	r3, r3, #29
 80162da:	b2db      	uxtb	r3, r3
 80162dc:	f003 0307 	and.w	r3, r3, #7
 80162e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80162e2:	7bbb      	ldrb	r3, [r7, #14]
 80162e4:	7b3a      	ldrb	r2, [r7, #12]
 80162e6:	4911      	ldr	r1, [pc, #68]	@ (801632c <UARTEx_SetNbDataToProcess+0x94>)
 80162e8:	5c8a      	ldrb	r2, [r1, r2]
 80162ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80162ee:	7b3a      	ldrb	r2, [r7, #12]
 80162f0:	490f      	ldr	r1, [pc, #60]	@ (8016330 <UARTEx_SetNbDataToProcess+0x98>)
 80162f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80162f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016300:	7bfb      	ldrb	r3, [r7, #15]
 8016302:	7b7a      	ldrb	r2, [r7, #13]
 8016304:	4909      	ldr	r1, [pc, #36]	@ (801632c <UARTEx_SetNbDataToProcess+0x94>)
 8016306:	5c8a      	ldrb	r2, [r1, r2]
 8016308:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801630c:	7b7a      	ldrb	r2, [r7, #13]
 801630e:	4908      	ldr	r1, [pc, #32]	@ (8016330 <UARTEx_SetNbDataToProcess+0x98>)
 8016310:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016312:	fb93 f3f2 	sdiv	r3, r3, r2
 8016316:	b29a      	uxth	r2, r3
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801631e:	bf00      	nop
 8016320:	3714      	adds	r7, #20
 8016322:	46bd      	mov	sp, r7
 8016324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016328:	4770      	bx	lr
 801632a:	bf00      	nop
 801632c:	0801f248 	.word	0x0801f248
 8016330:	0801f250 	.word	0x0801f250

08016334 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016334:	b084      	sub	sp, #16
 8016336:	b580      	push	{r7, lr}
 8016338:	b084      	sub	sp, #16
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
 801633e:	f107 001c 	add.w	r0, r7, #28
 8016342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016346:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801634a:	2b01      	cmp	r3, #1
 801634c:	d121      	bne.n	8016392 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016352:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	68da      	ldr	r2, [r3, #12]
 801635e:	4b2c      	ldr	r3, [pc, #176]	@ (8016410 <USB_CoreInit+0xdc>)
 8016360:	4013      	ands	r3, r2
 8016362:	687a      	ldr	r2, [r7, #4]
 8016364:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	68db      	ldr	r3, [r3, #12]
 801636a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8016372:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016376:	2b01      	cmp	r3, #1
 8016378:	d105      	bne.n	8016386 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	68db      	ldr	r3, [r3, #12]
 801637e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f001 fafa 	bl	8017980 <USB_CoreReset>
 801638c:	4603      	mov	r3, r0
 801638e:	73fb      	strb	r3, [r7, #15]
 8016390:	e01b      	b.n	80163ca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f001 faee 	bl	8017980 <USB_CoreReset>
 80163a4:	4603      	mov	r3, r0
 80163a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80163a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d106      	bne.n	80163be <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80163bc:	e005      	b.n	80163ca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80163ca:	7fbb      	ldrb	r3, [r7, #30]
 80163cc:	2b01      	cmp	r3, #1
 80163ce:	d116      	bne.n	80163fe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80163d4:	b29a      	uxth	r2, r3
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80163de:	4b0d      	ldr	r3, [pc, #52]	@ (8016414 <USB_CoreInit+0xe0>)
 80163e0:	4313      	orrs	r3, r2
 80163e2:	687a      	ldr	r2, [r7, #4]
 80163e4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	689b      	ldr	r3, [r3, #8]
 80163ea:	f043 0206 	orr.w	r2, r3, #6
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	689b      	ldr	r3, [r3, #8]
 80163f6:	f043 0220 	orr.w	r2, r3, #32
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80163fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016400:	4618      	mov	r0, r3
 8016402:	3710      	adds	r7, #16
 8016404:	46bd      	mov	sp, r7
 8016406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801640a:	b004      	add	sp, #16
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	ffbdffbf 	.word	0xffbdffbf
 8016414:	03ee0000 	.word	0x03ee0000

08016418 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016418:	b480      	push	{r7}
 801641a:	b087      	sub	sp, #28
 801641c:	af00      	add	r7, sp, #0
 801641e:	60f8      	str	r0, [r7, #12]
 8016420:	60b9      	str	r1, [r7, #8]
 8016422:	4613      	mov	r3, r2
 8016424:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8016426:	79fb      	ldrb	r3, [r7, #7]
 8016428:	2b02      	cmp	r3, #2
 801642a:	d165      	bne.n	80164f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	4a41      	ldr	r2, [pc, #260]	@ (8016534 <USB_SetTurnaroundTime+0x11c>)
 8016430:	4293      	cmp	r3, r2
 8016432:	d906      	bls.n	8016442 <USB_SetTurnaroundTime+0x2a>
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	4a40      	ldr	r2, [pc, #256]	@ (8016538 <USB_SetTurnaroundTime+0x120>)
 8016438:	4293      	cmp	r3, r2
 801643a:	d202      	bcs.n	8016442 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801643c:	230f      	movs	r3, #15
 801643e:	617b      	str	r3, [r7, #20]
 8016440:	e062      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8016442:	68bb      	ldr	r3, [r7, #8]
 8016444:	4a3c      	ldr	r2, [pc, #240]	@ (8016538 <USB_SetTurnaroundTime+0x120>)
 8016446:	4293      	cmp	r3, r2
 8016448:	d306      	bcc.n	8016458 <USB_SetTurnaroundTime+0x40>
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	4a3b      	ldr	r2, [pc, #236]	@ (801653c <USB_SetTurnaroundTime+0x124>)
 801644e:	4293      	cmp	r3, r2
 8016450:	d202      	bcs.n	8016458 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8016452:	230e      	movs	r3, #14
 8016454:	617b      	str	r3, [r7, #20]
 8016456:	e057      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	4a38      	ldr	r2, [pc, #224]	@ (801653c <USB_SetTurnaroundTime+0x124>)
 801645c:	4293      	cmp	r3, r2
 801645e:	d306      	bcc.n	801646e <USB_SetTurnaroundTime+0x56>
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	4a37      	ldr	r2, [pc, #220]	@ (8016540 <USB_SetTurnaroundTime+0x128>)
 8016464:	4293      	cmp	r3, r2
 8016466:	d202      	bcs.n	801646e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8016468:	230d      	movs	r3, #13
 801646a:	617b      	str	r3, [r7, #20]
 801646c:	e04c      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	4a33      	ldr	r2, [pc, #204]	@ (8016540 <USB_SetTurnaroundTime+0x128>)
 8016472:	4293      	cmp	r3, r2
 8016474:	d306      	bcc.n	8016484 <USB_SetTurnaroundTime+0x6c>
 8016476:	68bb      	ldr	r3, [r7, #8]
 8016478:	4a32      	ldr	r2, [pc, #200]	@ (8016544 <USB_SetTurnaroundTime+0x12c>)
 801647a:	4293      	cmp	r3, r2
 801647c:	d802      	bhi.n	8016484 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801647e:	230c      	movs	r3, #12
 8016480:	617b      	str	r3, [r7, #20]
 8016482:	e041      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	4a2f      	ldr	r2, [pc, #188]	@ (8016544 <USB_SetTurnaroundTime+0x12c>)
 8016488:	4293      	cmp	r3, r2
 801648a:	d906      	bls.n	801649a <USB_SetTurnaroundTime+0x82>
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	4a2e      	ldr	r2, [pc, #184]	@ (8016548 <USB_SetTurnaroundTime+0x130>)
 8016490:	4293      	cmp	r3, r2
 8016492:	d802      	bhi.n	801649a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8016494:	230b      	movs	r3, #11
 8016496:	617b      	str	r3, [r7, #20]
 8016498:	e036      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	4a2a      	ldr	r2, [pc, #168]	@ (8016548 <USB_SetTurnaroundTime+0x130>)
 801649e:	4293      	cmp	r3, r2
 80164a0:	d906      	bls.n	80164b0 <USB_SetTurnaroundTime+0x98>
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	4a29      	ldr	r2, [pc, #164]	@ (801654c <USB_SetTurnaroundTime+0x134>)
 80164a6:	4293      	cmp	r3, r2
 80164a8:	d802      	bhi.n	80164b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80164aa:	230a      	movs	r3, #10
 80164ac:	617b      	str	r3, [r7, #20]
 80164ae:	e02b      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	4a26      	ldr	r2, [pc, #152]	@ (801654c <USB_SetTurnaroundTime+0x134>)
 80164b4:	4293      	cmp	r3, r2
 80164b6:	d906      	bls.n	80164c6 <USB_SetTurnaroundTime+0xae>
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	4a25      	ldr	r2, [pc, #148]	@ (8016550 <USB_SetTurnaroundTime+0x138>)
 80164bc:	4293      	cmp	r3, r2
 80164be:	d202      	bcs.n	80164c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80164c0:	2309      	movs	r3, #9
 80164c2:	617b      	str	r3, [r7, #20]
 80164c4:	e020      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80164c6:	68bb      	ldr	r3, [r7, #8]
 80164c8:	4a21      	ldr	r2, [pc, #132]	@ (8016550 <USB_SetTurnaroundTime+0x138>)
 80164ca:	4293      	cmp	r3, r2
 80164cc:	d306      	bcc.n	80164dc <USB_SetTurnaroundTime+0xc4>
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	4a20      	ldr	r2, [pc, #128]	@ (8016554 <USB_SetTurnaroundTime+0x13c>)
 80164d2:	4293      	cmp	r3, r2
 80164d4:	d802      	bhi.n	80164dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80164d6:	2308      	movs	r3, #8
 80164d8:	617b      	str	r3, [r7, #20]
 80164da:	e015      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	4a1d      	ldr	r2, [pc, #116]	@ (8016554 <USB_SetTurnaroundTime+0x13c>)
 80164e0:	4293      	cmp	r3, r2
 80164e2:	d906      	bls.n	80164f2 <USB_SetTurnaroundTime+0xda>
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	4a1c      	ldr	r2, [pc, #112]	@ (8016558 <USB_SetTurnaroundTime+0x140>)
 80164e8:	4293      	cmp	r3, r2
 80164ea:	d202      	bcs.n	80164f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80164ec:	2307      	movs	r3, #7
 80164ee:	617b      	str	r3, [r7, #20]
 80164f0:	e00a      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80164f2:	2306      	movs	r3, #6
 80164f4:	617b      	str	r3, [r7, #20]
 80164f6:	e007      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80164f8:	79fb      	ldrb	r3, [r7, #7]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d102      	bne.n	8016504 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80164fe:	2309      	movs	r3, #9
 8016500:	617b      	str	r3, [r7, #20]
 8016502:	e001      	b.n	8016508 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8016504:	2309      	movs	r3, #9
 8016506:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	68db      	ldr	r3, [r3, #12]
 801650c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	68da      	ldr	r2, [r3, #12]
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	029b      	lsls	r3, r3, #10
 801651c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8016520:	431a      	orrs	r2, r3
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016526:	2300      	movs	r3, #0
}
 8016528:	4618      	mov	r0, r3
 801652a:	371c      	adds	r7, #28
 801652c:	46bd      	mov	sp, r7
 801652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016532:	4770      	bx	lr
 8016534:	00d8acbf 	.word	0x00d8acbf
 8016538:	00e4e1c0 	.word	0x00e4e1c0
 801653c:	00f42400 	.word	0x00f42400
 8016540:	01067380 	.word	0x01067380
 8016544:	011a499f 	.word	0x011a499f
 8016548:	01312cff 	.word	0x01312cff
 801654c:	014ca43f 	.word	0x014ca43f
 8016550:	016e3600 	.word	0x016e3600
 8016554:	01a6ab1f 	.word	0x01a6ab1f
 8016558:	01e84800 	.word	0x01e84800

0801655c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801655c:	b480      	push	{r7}
 801655e:	b083      	sub	sp, #12
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	689b      	ldr	r3, [r3, #8]
 8016568:	f043 0201 	orr.w	r2, r3, #1
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016570:	2300      	movs	r3, #0
}
 8016572:	4618      	mov	r0, r3
 8016574:	370c      	adds	r7, #12
 8016576:	46bd      	mov	sp, r7
 8016578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657c:	4770      	bx	lr

0801657e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801657e:	b480      	push	{r7}
 8016580:	b083      	sub	sp, #12
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	689b      	ldr	r3, [r3, #8]
 801658a:	f023 0201 	bic.w	r2, r3, #1
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016592:	2300      	movs	r3, #0
}
 8016594:	4618      	mov	r0, r3
 8016596:	370c      	adds	r7, #12
 8016598:	46bd      	mov	sp, r7
 801659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659e:	4770      	bx	lr

080165a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	460b      	mov	r3, r1
 80165aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80165ac:	2300      	movs	r3, #0
 80165ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	68db      	ldr	r3, [r3, #12]
 80165b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80165bc:	78fb      	ldrb	r3, [r7, #3]
 80165be:	2b01      	cmp	r3, #1
 80165c0:	d115      	bne.n	80165ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80165ce:	200a      	movs	r0, #10
 80165d0:	f7ed fc4c 	bl	8003e6c <HAL_Delay>
      ms += 10U;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	330a      	adds	r3, #10
 80165d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f001 f93f 	bl	801785e <USB_GetMode>
 80165e0:	4603      	mov	r3, r0
 80165e2:	2b01      	cmp	r3, #1
 80165e4:	d01e      	beq.n	8016624 <USB_SetCurrentMode+0x84>
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80165ea:	d9f0      	bls.n	80165ce <USB_SetCurrentMode+0x2e>
 80165ec:	e01a      	b.n	8016624 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80165ee:	78fb      	ldrb	r3, [r7, #3]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d115      	bne.n	8016620 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	68db      	ldr	r3, [r3, #12]
 80165f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8016600:	200a      	movs	r0, #10
 8016602:	f7ed fc33 	bl	8003e6c <HAL_Delay>
      ms += 10U;
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	330a      	adds	r3, #10
 801660a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801660c:	6878      	ldr	r0, [r7, #4]
 801660e:	f001 f926 	bl	801785e <USB_GetMode>
 8016612:	4603      	mov	r3, r0
 8016614:	2b00      	cmp	r3, #0
 8016616:	d005      	beq.n	8016624 <USB_SetCurrentMode+0x84>
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	2bc7      	cmp	r3, #199	@ 0xc7
 801661c:	d9f0      	bls.n	8016600 <USB_SetCurrentMode+0x60>
 801661e:	e001      	b.n	8016624 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016620:	2301      	movs	r3, #1
 8016622:	e005      	b.n	8016630 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	2bc8      	cmp	r3, #200	@ 0xc8
 8016628:	d101      	bne.n	801662e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801662a:	2301      	movs	r3, #1
 801662c:	e000      	b.n	8016630 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801662e:	2300      	movs	r3, #0
}
 8016630:	4618      	mov	r0, r3
 8016632:	3710      	adds	r7, #16
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}

08016638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016638:	b084      	sub	sp, #16
 801663a:	b580      	push	{r7, lr}
 801663c:	b086      	sub	sp, #24
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
 8016642:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8016646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801664a:	2300      	movs	r3, #0
 801664c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016652:	2300      	movs	r3, #0
 8016654:	613b      	str	r3, [r7, #16]
 8016656:	e009      	b.n	801666c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8016658:	687a      	ldr	r2, [r7, #4]
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	3340      	adds	r3, #64	@ 0x40
 801665e:	009b      	lsls	r3, r3, #2
 8016660:	4413      	add	r3, r2
 8016662:	2200      	movs	r2, #0
 8016664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8016666:	693b      	ldr	r3, [r7, #16]
 8016668:	3301      	adds	r3, #1
 801666a:	613b      	str	r3, [r7, #16]
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	2b0e      	cmp	r3, #14
 8016670:	d9f2      	bls.n	8016658 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8016672:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8016676:	2b00      	cmp	r3, #0
 8016678:	d11c      	bne.n	80166b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016680:	685b      	ldr	r3, [r3, #4]
 8016682:	68fa      	ldr	r2, [r7, #12]
 8016684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016688:	f043 0302 	orr.w	r3, r3, #2
 801668c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016692:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	601a      	str	r2, [r3, #0]
 80166b2:	e005      	b.n	80166c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80166c6:	461a      	mov	r2, r3
 80166c8:	2300      	movs	r3, #0
 80166ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80166cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80166d0:	2b01      	cmp	r3, #1
 80166d2:	d10d      	bne.n	80166f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80166d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d104      	bne.n	80166e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80166dc:	2100      	movs	r1, #0
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f000 f968 	bl	80169b4 <USB_SetDevSpeed>
 80166e4:	e008      	b.n	80166f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80166e6:	2101      	movs	r1, #1
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f000 f963 	bl	80169b4 <USB_SetDevSpeed>
 80166ee:	e003      	b.n	80166f8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80166f0:	2103      	movs	r1, #3
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f000 f95e 	bl	80169b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80166f8:	2110      	movs	r1, #16
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 f8fa 	bl	80168f4 <USB_FlushTxFifo>
 8016700:	4603      	mov	r3, r0
 8016702:	2b00      	cmp	r3, #0
 8016704:	d001      	beq.n	801670a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8016706:	2301      	movs	r3, #1
 8016708:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f000 f924 	bl	8016958 <USB_FlushRxFifo>
 8016710:	4603      	mov	r3, r0
 8016712:	2b00      	cmp	r3, #0
 8016714:	d001      	beq.n	801671a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8016716:	2301      	movs	r3, #1
 8016718:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016720:	461a      	mov	r2, r3
 8016722:	2300      	movs	r3, #0
 8016724:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801672c:	461a      	mov	r2, r3
 801672e:	2300      	movs	r3, #0
 8016730:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016738:	461a      	mov	r2, r3
 801673a:	2300      	movs	r3, #0
 801673c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801673e:	2300      	movs	r3, #0
 8016740:	613b      	str	r3, [r7, #16]
 8016742:	e043      	b.n	80167cc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	015a      	lsls	r2, r3, #5
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	4413      	add	r3, r2
 801674c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801675a:	d118      	bne.n	801678e <USB_DevInit+0x156>
    {
      if (i == 0U)
 801675c:	693b      	ldr	r3, [r7, #16]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d10a      	bne.n	8016778 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	015a      	lsls	r2, r3, #5
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	4413      	add	r3, r2
 801676a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801676e:	461a      	mov	r2, r3
 8016770:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8016774:	6013      	str	r3, [r2, #0]
 8016776:	e013      	b.n	80167a0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8016778:	693b      	ldr	r3, [r7, #16]
 801677a:	015a      	lsls	r2, r3, #5
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	4413      	add	r3, r2
 8016780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016784:	461a      	mov	r2, r3
 8016786:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801678a:	6013      	str	r3, [r2, #0]
 801678c:	e008      	b.n	80167a0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	015a      	lsls	r2, r3, #5
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	4413      	add	r3, r2
 8016796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801679a:	461a      	mov	r2, r3
 801679c:	2300      	movs	r3, #0
 801679e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	015a      	lsls	r2, r3, #5
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	4413      	add	r3, r2
 80167a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80167ac:	461a      	mov	r2, r3
 80167ae:	2300      	movs	r3, #0
 80167b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80167b2:	693b      	ldr	r3, [r7, #16]
 80167b4:	015a      	lsls	r2, r3, #5
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	4413      	add	r3, r2
 80167ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80167be:	461a      	mov	r2, r3
 80167c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80167c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	3301      	adds	r3, #1
 80167ca:	613b      	str	r3, [r7, #16]
 80167cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80167d0:	461a      	mov	r2, r3
 80167d2:	693b      	ldr	r3, [r7, #16]
 80167d4:	4293      	cmp	r3, r2
 80167d6:	d3b5      	bcc.n	8016744 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80167d8:	2300      	movs	r3, #0
 80167da:	613b      	str	r3, [r7, #16]
 80167dc:	e043      	b.n	8016866 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80167de:	693b      	ldr	r3, [r7, #16]
 80167e0:	015a      	lsls	r2, r3, #5
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	4413      	add	r3, r2
 80167e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80167f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80167f4:	d118      	bne.n	8016828 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d10a      	bne.n	8016812 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80167fc:	693b      	ldr	r3, [r7, #16]
 80167fe:	015a      	lsls	r2, r3, #5
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	4413      	add	r3, r2
 8016804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016808:	461a      	mov	r2, r3
 801680a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801680e:	6013      	str	r3, [r2, #0]
 8016810:	e013      	b.n	801683a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016812:	693b      	ldr	r3, [r7, #16]
 8016814:	015a      	lsls	r2, r3, #5
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	4413      	add	r3, r2
 801681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801681e:	461a      	mov	r2, r3
 8016820:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8016824:	6013      	str	r3, [r2, #0]
 8016826:	e008      	b.n	801683a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	015a      	lsls	r2, r3, #5
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	4413      	add	r3, r2
 8016830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016834:	461a      	mov	r2, r3
 8016836:	2300      	movs	r3, #0
 8016838:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	015a      	lsls	r2, r3, #5
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	4413      	add	r3, r2
 8016842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016846:	461a      	mov	r2, r3
 8016848:	2300      	movs	r3, #0
 801684a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	015a      	lsls	r2, r3, #5
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	4413      	add	r3, r2
 8016854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016858:	461a      	mov	r2, r3
 801685a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801685e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	3301      	adds	r3, #1
 8016864:	613b      	str	r3, [r7, #16]
 8016866:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801686a:	461a      	mov	r2, r3
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	4293      	cmp	r3, r2
 8016870:	d3b5      	bcc.n	80167de <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016878:	691b      	ldr	r3, [r3, #16]
 801687a:	68fa      	ldr	r2, [r7, #12]
 801687c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016884:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2200      	movs	r2, #0
 801688a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8016892:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8016894:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016898:	2b00      	cmp	r3, #0
 801689a:	d105      	bne.n	80168a8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	699b      	ldr	r3, [r3, #24]
 80168a0:	f043 0210 	orr.w	r2, r3, #16
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	699a      	ldr	r2, [r3, #24]
 80168ac:	4b0f      	ldr	r3, [pc, #60]	@ (80168ec <USB_DevInit+0x2b4>)
 80168ae:	4313      	orrs	r3, r2
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80168b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d005      	beq.n	80168c8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	699b      	ldr	r3, [r3, #24]
 80168c0:	f043 0208 	orr.w	r2, r3, #8
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80168c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80168cc:	2b01      	cmp	r3, #1
 80168ce:	d105      	bne.n	80168dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	699a      	ldr	r2, [r3, #24]
 80168d4:	4b06      	ldr	r3, [pc, #24]	@ (80168f0 <USB_DevInit+0x2b8>)
 80168d6:	4313      	orrs	r3, r2
 80168d8:	687a      	ldr	r2, [r7, #4]
 80168da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80168dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80168de:	4618      	mov	r0, r3
 80168e0:	3718      	adds	r7, #24
 80168e2:	46bd      	mov	sp, r7
 80168e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80168e8:	b004      	add	sp, #16
 80168ea:	4770      	bx	lr
 80168ec:	803c3800 	.word	0x803c3800
 80168f0:	40000004 	.word	0x40000004

080168f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b085      	sub	sp, #20
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80168fe:	2300      	movs	r3, #0
 8016900:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	3301      	adds	r3, #1
 8016906:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801690e:	d901      	bls.n	8016914 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8016910:	2303      	movs	r3, #3
 8016912:	e01b      	b.n	801694c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	691b      	ldr	r3, [r3, #16]
 8016918:	2b00      	cmp	r3, #0
 801691a:	daf2      	bge.n	8016902 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801691c:	2300      	movs	r3, #0
 801691e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	019b      	lsls	r3, r3, #6
 8016924:	f043 0220 	orr.w	r2, r3, #32
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	3301      	adds	r3, #1
 8016930:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016938:	d901      	bls.n	801693e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801693a:	2303      	movs	r3, #3
 801693c:	e006      	b.n	801694c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	691b      	ldr	r3, [r3, #16]
 8016942:	f003 0320 	and.w	r3, r3, #32
 8016946:	2b20      	cmp	r3, #32
 8016948:	d0f0      	beq.n	801692c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801694a:	2300      	movs	r3, #0
}
 801694c:	4618      	mov	r0, r3
 801694e:	3714      	adds	r7, #20
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr

08016958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8016958:	b480      	push	{r7}
 801695a:	b085      	sub	sp, #20
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016960:	2300      	movs	r3, #0
 8016962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	3301      	adds	r3, #1
 8016968:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016970:	d901      	bls.n	8016976 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8016972:	2303      	movs	r3, #3
 8016974:	e018      	b.n	80169a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	691b      	ldr	r3, [r3, #16]
 801697a:	2b00      	cmp	r3, #0
 801697c:	daf2      	bge.n	8016964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801697e:	2300      	movs	r3, #0
 8016980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	2210      	movs	r2, #16
 8016986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	3301      	adds	r3, #1
 801698c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016994:	d901      	bls.n	801699a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8016996:	2303      	movs	r3, #3
 8016998:	e006      	b.n	80169a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	691b      	ldr	r3, [r3, #16]
 801699e:	f003 0310 	and.w	r3, r3, #16
 80169a2:	2b10      	cmp	r3, #16
 80169a4:	d0f0      	beq.n	8016988 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80169a6:	2300      	movs	r3, #0
}
 80169a8:	4618      	mov	r0, r3
 80169aa:	3714      	adds	r7, #20
 80169ac:	46bd      	mov	sp, r7
 80169ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b2:	4770      	bx	lr

080169b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80169b4:	b480      	push	{r7}
 80169b6:	b085      	sub	sp, #20
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	460b      	mov	r3, r1
 80169be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	78fb      	ldrb	r3, [r7, #3]
 80169ce:	68f9      	ldr	r1, [r7, #12]
 80169d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80169d4:	4313      	orrs	r3, r2
 80169d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80169d8:	2300      	movs	r3, #0
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3714      	adds	r7, #20
 80169de:	46bd      	mov	sp, r7
 80169e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e4:	4770      	bx	lr

080169e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80169e6:	b480      	push	{r7}
 80169e8:	b087      	sub	sp, #28
 80169ea:	af00      	add	r7, sp, #0
 80169ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80169f2:	693b      	ldr	r3, [r7, #16]
 80169f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80169f8:	689b      	ldr	r3, [r3, #8]
 80169fa:	f003 0306 	and.w	r3, r3, #6
 80169fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d102      	bne.n	8016a0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8016a06:	2300      	movs	r3, #0
 8016a08:	75fb      	strb	r3, [r7, #23]
 8016a0a:	e00a      	b.n	8016a22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	2b02      	cmp	r3, #2
 8016a10:	d002      	beq.n	8016a18 <USB_GetDevSpeed+0x32>
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	2b06      	cmp	r3, #6
 8016a16:	d102      	bne.n	8016a1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8016a18:	2302      	movs	r3, #2
 8016a1a:	75fb      	strb	r3, [r7, #23]
 8016a1c:	e001      	b.n	8016a22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8016a1e:	230f      	movs	r3, #15
 8016a20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8016a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	371c      	adds	r7, #28
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2e:	4770      	bx	lr

08016a30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016a30:	b480      	push	{r7}
 8016a32:	b085      	sub	sp, #20
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	781b      	ldrb	r3, [r3, #0]
 8016a42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	785b      	ldrb	r3, [r3, #1]
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d139      	bne.n	8016ac0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016a52:	69da      	ldr	r2, [r3, #28]
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	f003 030f 	and.w	r3, r3, #15
 8016a5c:	2101      	movs	r1, #1
 8016a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	68f9      	ldr	r1, [r7, #12]
 8016a66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016a6a:	4313      	orrs	r3, r2
 8016a6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	015a      	lsls	r2, r3, #5
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	4413      	add	r3, r2
 8016a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d153      	bne.n	8016b2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	015a      	lsls	r2, r3, #5
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016a90:	681a      	ldr	r2, [r3, #0]
 8016a92:	683b      	ldr	r3, [r7, #0]
 8016a94:	689b      	ldr	r3, [r3, #8]
 8016a96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016a9a:	683b      	ldr	r3, [r7, #0]
 8016a9c:	791b      	ldrb	r3, [r3, #4]
 8016a9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016aa0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016aa2:	68bb      	ldr	r3, [r7, #8]
 8016aa4:	059b      	lsls	r3, r3, #22
 8016aa6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016aa8:	431a      	orrs	r2, r3
 8016aaa:	68bb      	ldr	r3, [r7, #8]
 8016aac:	0159      	lsls	r1, r3, #5
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	440b      	add	r3, r1
 8016ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ab6:	4619      	mov	r1, r3
 8016ab8:	4b20      	ldr	r3, [pc, #128]	@ (8016b3c <USB_ActivateEndpoint+0x10c>)
 8016aba:	4313      	orrs	r3, r2
 8016abc:	600b      	str	r3, [r1, #0]
 8016abe:	e035      	b.n	8016b2c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016ac6:	69da      	ldr	r2, [r3, #28]
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	f003 030f 	and.w	r3, r3, #15
 8016ad0:	2101      	movs	r1, #1
 8016ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8016ad6:	041b      	lsls	r3, r3, #16
 8016ad8:	68f9      	ldr	r1, [r7, #12]
 8016ada:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016ade:	4313      	orrs	r3, r2
 8016ae0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8016ae2:	68bb      	ldr	r3, [r7, #8]
 8016ae4:	015a      	lsls	r2, r3, #5
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	4413      	add	r3, r2
 8016aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d119      	bne.n	8016b2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016af8:	68bb      	ldr	r3, [r7, #8]
 8016afa:	015a      	lsls	r2, r3, #5
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	4413      	add	r3, r2
 8016b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b04:	681a      	ldr	r2, [r3, #0]
 8016b06:	683b      	ldr	r3, [r7, #0]
 8016b08:	689b      	ldr	r3, [r3, #8]
 8016b0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	791b      	ldrb	r3, [r3, #4]
 8016b12:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016b14:	430b      	orrs	r3, r1
 8016b16:	431a      	orrs	r2, r3
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	0159      	lsls	r1, r3, #5
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	440b      	add	r3, r1
 8016b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b24:	4619      	mov	r1, r3
 8016b26:	4b05      	ldr	r3, [pc, #20]	@ (8016b3c <USB_ActivateEndpoint+0x10c>)
 8016b28:	4313      	orrs	r3, r2
 8016b2a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8016b2c:	2300      	movs	r3, #0
}
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3714      	adds	r7, #20
 8016b32:	46bd      	mov	sp, r7
 8016b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b38:	4770      	bx	lr
 8016b3a:	bf00      	nop
 8016b3c:	10008000 	.word	0x10008000

08016b40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016b40:	b480      	push	{r7}
 8016b42:	b085      	sub	sp, #20
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016b4e:	683b      	ldr	r3, [r7, #0]
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	785b      	ldrb	r3, [r3, #1]
 8016b58:	2b01      	cmp	r3, #1
 8016b5a:	d161      	bne.n	8016c20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	015a      	lsls	r2, r3, #5
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	4413      	add	r3, r2
 8016b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016b72:	d11f      	bne.n	8016bb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	015a      	lsls	r2, r3, #5
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	4413      	add	r3, r2
 8016b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	68ba      	ldr	r2, [r7, #8]
 8016b84:	0151      	lsls	r1, r2, #5
 8016b86:	68fa      	ldr	r2, [r7, #12]
 8016b88:	440a      	add	r2, r1
 8016b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016b8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016b92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	015a      	lsls	r2, r3, #5
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	4413      	add	r3, r2
 8016b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	68ba      	ldr	r2, [r7, #8]
 8016ba4:	0151      	lsls	r1, r2, #5
 8016ba6:	68fa      	ldr	r2, [r7, #12]
 8016ba8:	440a      	add	r2, r1
 8016baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016bae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	781b      	ldrb	r3, [r3, #0]
 8016bc0:	f003 030f 	and.w	r3, r3, #15
 8016bc4:	2101      	movs	r1, #1
 8016bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8016bca:	b29b      	uxth	r3, r3
 8016bcc:	43db      	mvns	r3, r3
 8016bce:	68f9      	ldr	r1, [r7, #12]
 8016bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016bd4:	4013      	ands	r3, r2
 8016bd6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016bde:	69da      	ldr	r2, [r3, #28]
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	781b      	ldrb	r3, [r3, #0]
 8016be4:	f003 030f 	and.w	r3, r3, #15
 8016be8:	2101      	movs	r1, #1
 8016bea:	fa01 f303 	lsl.w	r3, r1, r3
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	43db      	mvns	r3, r3
 8016bf2:	68f9      	ldr	r1, [r7, #12]
 8016bf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016bf8:	4013      	ands	r3, r2
 8016bfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	015a      	lsls	r2, r3, #5
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	4413      	add	r3, r2
 8016c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016c08:	681a      	ldr	r2, [r3, #0]
 8016c0a:	68bb      	ldr	r3, [r7, #8]
 8016c0c:	0159      	lsls	r1, r3, #5
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	440b      	add	r3, r1
 8016c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016c16:	4619      	mov	r1, r3
 8016c18:	4b35      	ldr	r3, [pc, #212]	@ (8016cf0 <USB_DeactivateEndpoint+0x1b0>)
 8016c1a:	4013      	ands	r3, r2
 8016c1c:	600b      	str	r3, [r1, #0]
 8016c1e:	e060      	b.n	8016ce2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	015a      	lsls	r2, r3, #5
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	4413      	add	r3, r2
 8016c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016c32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016c36:	d11f      	bne.n	8016c78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	015a      	lsls	r2, r3, #5
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	4413      	add	r3, r2
 8016c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	68ba      	ldr	r2, [r7, #8]
 8016c48:	0151      	lsls	r1, r2, #5
 8016c4a:	68fa      	ldr	r2, [r7, #12]
 8016c4c:	440a      	add	r2, r1
 8016c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016c52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016c56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	015a      	lsls	r2, r3, #5
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	4413      	add	r3, r2
 8016c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	68ba      	ldr	r2, [r7, #8]
 8016c68:	0151      	lsls	r1, r2, #5
 8016c6a:	68fa      	ldr	r2, [r7, #12]
 8016c6c:	440a      	add	r2, r1
 8016c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016c72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016c76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	f003 030f 	and.w	r3, r3, #15
 8016c88:	2101      	movs	r1, #1
 8016c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8016c8e:	041b      	lsls	r3, r3, #16
 8016c90:	43db      	mvns	r3, r3
 8016c92:	68f9      	ldr	r1, [r7, #12]
 8016c94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016c98:	4013      	ands	r3, r2
 8016c9a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016ca2:	69da      	ldr	r2, [r3, #28]
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	781b      	ldrb	r3, [r3, #0]
 8016ca8:	f003 030f 	and.w	r3, r3, #15
 8016cac:	2101      	movs	r1, #1
 8016cae:	fa01 f303 	lsl.w	r3, r1, r3
 8016cb2:	041b      	lsls	r3, r3, #16
 8016cb4:	43db      	mvns	r3, r3
 8016cb6:	68f9      	ldr	r1, [r7, #12]
 8016cb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016cbc:	4013      	ands	r3, r2
 8016cbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016cc0:	68bb      	ldr	r3, [r7, #8]
 8016cc2:	015a      	lsls	r2, r3, #5
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	4413      	add	r3, r2
 8016cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016ccc:	681a      	ldr	r2, [r3, #0]
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	0159      	lsls	r1, r3, #5
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	440b      	add	r3, r1
 8016cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016cda:	4619      	mov	r1, r3
 8016cdc:	4b05      	ldr	r3, [pc, #20]	@ (8016cf4 <USB_DeactivateEndpoint+0x1b4>)
 8016cde:	4013      	ands	r3, r2
 8016ce0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8016ce2:	2300      	movs	r3, #0
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3714      	adds	r7, #20
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cee:	4770      	bx	lr
 8016cf0:	ec337800 	.word	0xec337800
 8016cf4:	eff37800 	.word	0xeff37800

08016cf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b08a      	sub	sp, #40	@ 0x28
 8016cfc:	af02      	add	r7, sp, #8
 8016cfe:	60f8      	str	r0, [r7, #12]
 8016d00:	60b9      	str	r1, [r7, #8]
 8016d02:	4613      	mov	r3, r2
 8016d04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	785b      	ldrb	r3, [r3, #1]
 8016d14:	2b01      	cmp	r3, #1
 8016d16:	f040 8185 	bne.w	8017024 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	691b      	ldr	r3, [r3, #16]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d132      	bne.n	8016d88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	015a      	lsls	r2, r3, #5
 8016d26:	69fb      	ldr	r3, [r7, #28]
 8016d28:	4413      	add	r3, r2
 8016d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016d2e:	691a      	ldr	r2, [r3, #16]
 8016d30:	69bb      	ldr	r3, [r7, #24]
 8016d32:	0159      	lsls	r1, r3, #5
 8016d34:	69fb      	ldr	r3, [r7, #28]
 8016d36:	440b      	add	r3, r1
 8016d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016d3c:	4619      	mov	r1, r3
 8016d3e:	4ba7      	ldr	r3, [pc, #668]	@ (8016fdc <USB_EPStartXfer+0x2e4>)
 8016d40:	4013      	ands	r3, r2
 8016d42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016d44:	69bb      	ldr	r3, [r7, #24]
 8016d46:	015a      	lsls	r2, r3, #5
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	4413      	add	r3, r2
 8016d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016d50:	691b      	ldr	r3, [r3, #16]
 8016d52:	69ba      	ldr	r2, [r7, #24]
 8016d54:	0151      	lsls	r1, r2, #5
 8016d56:	69fa      	ldr	r2, [r7, #28]
 8016d58:	440a      	add	r2, r1
 8016d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016d5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016d64:	69bb      	ldr	r3, [r7, #24]
 8016d66:	015a      	lsls	r2, r3, #5
 8016d68:	69fb      	ldr	r3, [r7, #28]
 8016d6a:	4413      	add	r3, r2
 8016d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016d70:	691a      	ldr	r2, [r3, #16]
 8016d72:	69bb      	ldr	r3, [r7, #24]
 8016d74:	0159      	lsls	r1, r3, #5
 8016d76:	69fb      	ldr	r3, [r7, #28]
 8016d78:	440b      	add	r3, r1
 8016d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016d7e:	4619      	mov	r1, r3
 8016d80:	4b97      	ldr	r3, [pc, #604]	@ (8016fe0 <USB_EPStartXfer+0x2e8>)
 8016d82:	4013      	ands	r3, r2
 8016d84:	610b      	str	r3, [r1, #16]
 8016d86:	e097      	b.n	8016eb8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016d88:	69bb      	ldr	r3, [r7, #24]
 8016d8a:	015a      	lsls	r2, r3, #5
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	4413      	add	r3, r2
 8016d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016d94:	691a      	ldr	r2, [r3, #16]
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	0159      	lsls	r1, r3, #5
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	440b      	add	r3, r1
 8016d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016da2:	4619      	mov	r1, r3
 8016da4:	4b8e      	ldr	r3, [pc, #568]	@ (8016fe0 <USB_EPStartXfer+0x2e8>)
 8016da6:	4013      	ands	r3, r2
 8016da8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016daa:	69bb      	ldr	r3, [r7, #24]
 8016dac:	015a      	lsls	r2, r3, #5
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	4413      	add	r3, r2
 8016db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016db6:	691a      	ldr	r2, [r3, #16]
 8016db8:	69bb      	ldr	r3, [r7, #24]
 8016dba:	0159      	lsls	r1, r3, #5
 8016dbc:	69fb      	ldr	r3, [r7, #28]
 8016dbe:	440b      	add	r3, r1
 8016dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	4b85      	ldr	r3, [pc, #532]	@ (8016fdc <USB_EPStartXfer+0x2e4>)
 8016dc8:	4013      	ands	r3, r2
 8016dca:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8016dcc:	69bb      	ldr	r3, [r7, #24]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d11a      	bne.n	8016e08 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8016dd2:	68bb      	ldr	r3, [r7, #8]
 8016dd4:	691a      	ldr	r2, [r3, #16]
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	689b      	ldr	r3, [r3, #8]
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	d903      	bls.n	8016de6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8016dde:	68bb      	ldr	r3, [r7, #8]
 8016de0:	689a      	ldr	r2, [r3, #8]
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016de6:	69bb      	ldr	r3, [r7, #24]
 8016de8:	015a      	lsls	r2, r3, #5
 8016dea:	69fb      	ldr	r3, [r7, #28]
 8016dec:	4413      	add	r3, r2
 8016dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016df2:	691b      	ldr	r3, [r3, #16]
 8016df4:	69ba      	ldr	r2, [r7, #24]
 8016df6:	0151      	lsls	r1, r2, #5
 8016df8:	69fa      	ldr	r2, [r7, #28]
 8016dfa:	440a      	add	r2, r1
 8016dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016e00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016e04:	6113      	str	r3, [r2, #16]
 8016e06:	e044      	b.n	8016e92 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	691a      	ldr	r2, [r3, #16]
 8016e0c:	68bb      	ldr	r3, [r7, #8]
 8016e0e:	689b      	ldr	r3, [r3, #8]
 8016e10:	4413      	add	r3, r2
 8016e12:	1e5a      	subs	r2, r3, #1
 8016e14:	68bb      	ldr	r3, [r7, #8]
 8016e16:	689b      	ldr	r3, [r3, #8]
 8016e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8016e1c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8016e1e:	69bb      	ldr	r3, [r7, #24]
 8016e20:	015a      	lsls	r2, r3, #5
 8016e22:	69fb      	ldr	r3, [r7, #28]
 8016e24:	4413      	add	r3, r2
 8016e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e2a:	691a      	ldr	r2, [r3, #16]
 8016e2c:	8afb      	ldrh	r3, [r7, #22]
 8016e2e:	04d9      	lsls	r1, r3, #19
 8016e30:	4b6c      	ldr	r3, [pc, #432]	@ (8016fe4 <USB_EPStartXfer+0x2ec>)
 8016e32:	400b      	ands	r3, r1
 8016e34:	69b9      	ldr	r1, [r7, #24]
 8016e36:	0148      	lsls	r0, r1, #5
 8016e38:	69f9      	ldr	r1, [r7, #28]
 8016e3a:	4401      	add	r1, r0
 8016e3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016e40:	4313      	orrs	r3, r2
 8016e42:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	791b      	ldrb	r3, [r3, #4]
 8016e48:	2b01      	cmp	r3, #1
 8016e4a:	d122      	bne.n	8016e92 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	015a      	lsls	r2, r3, #5
 8016e50:	69fb      	ldr	r3, [r7, #28]
 8016e52:	4413      	add	r3, r2
 8016e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e58:	691b      	ldr	r3, [r3, #16]
 8016e5a:	69ba      	ldr	r2, [r7, #24]
 8016e5c:	0151      	lsls	r1, r2, #5
 8016e5e:	69fa      	ldr	r2, [r7, #28]
 8016e60:	440a      	add	r2, r1
 8016e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016e66:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8016e6a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8016e6c:	69bb      	ldr	r3, [r7, #24]
 8016e6e:	015a      	lsls	r2, r3, #5
 8016e70:	69fb      	ldr	r3, [r7, #28]
 8016e72:	4413      	add	r3, r2
 8016e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e78:	691a      	ldr	r2, [r3, #16]
 8016e7a:	8afb      	ldrh	r3, [r7, #22]
 8016e7c:	075b      	lsls	r3, r3, #29
 8016e7e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8016e82:	69b9      	ldr	r1, [r7, #24]
 8016e84:	0148      	lsls	r0, r1, #5
 8016e86:	69f9      	ldr	r1, [r7, #28]
 8016e88:	4401      	add	r1, r0
 8016e8a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016e8e:	4313      	orrs	r3, r2
 8016e90:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016e92:	69bb      	ldr	r3, [r7, #24]
 8016e94:	015a      	lsls	r2, r3, #5
 8016e96:	69fb      	ldr	r3, [r7, #28]
 8016e98:	4413      	add	r3, r2
 8016e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e9e:	691a      	ldr	r2, [r3, #16]
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	691b      	ldr	r3, [r3, #16]
 8016ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016ea8:	69b9      	ldr	r1, [r7, #24]
 8016eaa:	0148      	lsls	r0, r1, #5
 8016eac:	69f9      	ldr	r1, [r7, #28]
 8016eae:	4401      	add	r1, r0
 8016eb0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016eb4:	4313      	orrs	r3, r2
 8016eb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016eb8:	79fb      	ldrb	r3, [r7, #7]
 8016eba:	2b01      	cmp	r3, #1
 8016ebc:	d14b      	bne.n	8016f56 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	69db      	ldr	r3, [r3, #28]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d009      	beq.n	8016eda <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8016ec6:	69bb      	ldr	r3, [r7, #24]
 8016ec8:	015a      	lsls	r2, r3, #5
 8016eca:	69fb      	ldr	r3, [r7, #28]
 8016ecc:	4413      	add	r3, r2
 8016ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ed2:	461a      	mov	r2, r3
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	69db      	ldr	r3, [r3, #28]
 8016ed8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	791b      	ldrb	r3, [r3, #4]
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	d128      	bne.n	8016f34 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016ee2:	69fb      	ldr	r3, [r7, #28]
 8016ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016ee8:	689b      	ldr	r3, [r3, #8]
 8016eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d110      	bne.n	8016f14 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016ef2:	69bb      	ldr	r3, [r7, #24]
 8016ef4:	015a      	lsls	r2, r3, #5
 8016ef6:	69fb      	ldr	r3, [r7, #28]
 8016ef8:	4413      	add	r3, r2
 8016efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	69ba      	ldr	r2, [r7, #24]
 8016f02:	0151      	lsls	r1, r2, #5
 8016f04:	69fa      	ldr	r2, [r7, #28]
 8016f06:	440a      	add	r2, r1
 8016f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016f10:	6013      	str	r3, [r2, #0]
 8016f12:	e00f      	b.n	8016f34 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016f14:	69bb      	ldr	r3, [r7, #24]
 8016f16:	015a      	lsls	r2, r3, #5
 8016f18:	69fb      	ldr	r3, [r7, #28]
 8016f1a:	4413      	add	r3, r2
 8016f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	69ba      	ldr	r2, [r7, #24]
 8016f24:	0151      	lsls	r1, r2, #5
 8016f26:	69fa      	ldr	r2, [r7, #28]
 8016f28:	440a      	add	r2, r1
 8016f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016f32:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016f34:	69bb      	ldr	r3, [r7, #24]
 8016f36:	015a      	lsls	r2, r3, #5
 8016f38:	69fb      	ldr	r3, [r7, #28]
 8016f3a:	4413      	add	r3, r2
 8016f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	69ba      	ldr	r2, [r7, #24]
 8016f44:	0151      	lsls	r1, r2, #5
 8016f46:	69fa      	ldr	r2, [r7, #28]
 8016f48:	440a      	add	r2, r1
 8016f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016f52:	6013      	str	r3, [r2, #0]
 8016f54:	e169      	b.n	801722a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016f56:	69bb      	ldr	r3, [r7, #24]
 8016f58:	015a      	lsls	r2, r3, #5
 8016f5a:	69fb      	ldr	r3, [r7, #28]
 8016f5c:	4413      	add	r3, r2
 8016f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	69ba      	ldr	r2, [r7, #24]
 8016f66:	0151      	lsls	r1, r2, #5
 8016f68:	69fa      	ldr	r2, [r7, #28]
 8016f6a:	440a      	add	r2, r1
 8016f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f70:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016f74:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	791b      	ldrb	r3, [r3, #4]
 8016f7a:	2b01      	cmp	r3, #1
 8016f7c:	d015      	beq.n	8016faa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	691b      	ldr	r3, [r3, #16]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	f000 8151 	beq.w	801722a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016f88:	69fb      	ldr	r3, [r7, #28]
 8016f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	781b      	ldrb	r3, [r3, #0]
 8016f94:	f003 030f 	and.w	r3, r3, #15
 8016f98:	2101      	movs	r1, #1
 8016f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8016f9e:	69f9      	ldr	r1, [r7, #28]
 8016fa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016fa4:	4313      	orrs	r3, r2
 8016fa6:	634b      	str	r3, [r1, #52]	@ 0x34
 8016fa8:	e13f      	b.n	801722a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016fb0:	689b      	ldr	r3, [r3, #8]
 8016fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d116      	bne.n	8016fe8 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016fba:	69bb      	ldr	r3, [r7, #24]
 8016fbc:	015a      	lsls	r2, r3, #5
 8016fbe:	69fb      	ldr	r3, [r7, #28]
 8016fc0:	4413      	add	r3, r2
 8016fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	69ba      	ldr	r2, [r7, #24]
 8016fca:	0151      	lsls	r1, r2, #5
 8016fcc:	69fa      	ldr	r2, [r7, #28]
 8016fce:	440a      	add	r2, r1
 8016fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016fd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016fd8:	6013      	str	r3, [r2, #0]
 8016fda:	e015      	b.n	8017008 <USB_EPStartXfer+0x310>
 8016fdc:	e007ffff 	.word	0xe007ffff
 8016fe0:	fff80000 	.word	0xfff80000
 8016fe4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016fe8:	69bb      	ldr	r3, [r7, #24]
 8016fea:	015a      	lsls	r2, r3, #5
 8016fec:	69fb      	ldr	r3, [r7, #28]
 8016fee:	4413      	add	r3, r2
 8016ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	69ba      	ldr	r2, [r7, #24]
 8016ff8:	0151      	lsls	r1, r2, #5
 8016ffa:	69fa      	ldr	r2, [r7, #28]
 8016ffc:	440a      	add	r2, r1
 8016ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017006:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	68d9      	ldr	r1, [r3, #12]
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	781a      	ldrb	r2, [r3, #0]
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	691b      	ldr	r3, [r3, #16]
 8017014:	b298      	uxth	r0, r3
 8017016:	79fb      	ldrb	r3, [r7, #7]
 8017018:	9300      	str	r3, [sp, #0]
 801701a:	4603      	mov	r3, r0
 801701c:	68f8      	ldr	r0, [r7, #12]
 801701e:	f000 f9b9 	bl	8017394 <USB_WritePacket>
 8017022:	e102      	b.n	801722a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8017024:	69bb      	ldr	r3, [r7, #24]
 8017026:	015a      	lsls	r2, r3, #5
 8017028:	69fb      	ldr	r3, [r7, #28]
 801702a:	4413      	add	r3, r2
 801702c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017030:	691a      	ldr	r2, [r3, #16]
 8017032:	69bb      	ldr	r3, [r7, #24]
 8017034:	0159      	lsls	r1, r3, #5
 8017036:	69fb      	ldr	r3, [r7, #28]
 8017038:	440b      	add	r3, r1
 801703a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801703e:	4619      	mov	r1, r3
 8017040:	4b7c      	ldr	r3, [pc, #496]	@ (8017234 <USB_EPStartXfer+0x53c>)
 8017042:	4013      	ands	r3, r2
 8017044:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8017046:	69bb      	ldr	r3, [r7, #24]
 8017048:	015a      	lsls	r2, r3, #5
 801704a:	69fb      	ldr	r3, [r7, #28]
 801704c:	4413      	add	r3, r2
 801704e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017052:	691a      	ldr	r2, [r3, #16]
 8017054:	69bb      	ldr	r3, [r7, #24]
 8017056:	0159      	lsls	r1, r3, #5
 8017058:	69fb      	ldr	r3, [r7, #28]
 801705a:	440b      	add	r3, r1
 801705c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017060:	4619      	mov	r1, r3
 8017062:	4b75      	ldr	r3, [pc, #468]	@ (8017238 <USB_EPStartXfer+0x540>)
 8017064:	4013      	ands	r3, r2
 8017066:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8017068:	69bb      	ldr	r3, [r7, #24]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d12f      	bne.n	80170ce <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	691b      	ldr	r3, [r3, #16]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d003      	beq.n	801707e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	689a      	ldr	r2, [r3, #8]
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	689a      	ldr	r2, [r3, #8]
 8017082:	68bb      	ldr	r3, [r7, #8]
 8017084:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8017086:	69bb      	ldr	r3, [r7, #24]
 8017088:	015a      	lsls	r2, r3, #5
 801708a:	69fb      	ldr	r3, [r7, #28]
 801708c:	4413      	add	r3, r2
 801708e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017092:	691a      	ldr	r2, [r3, #16]
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	6a1b      	ldr	r3, [r3, #32]
 8017098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801709c:	69b9      	ldr	r1, [r7, #24]
 801709e:	0148      	lsls	r0, r1, #5
 80170a0:	69f9      	ldr	r1, [r7, #28]
 80170a2:	4401      	add	r1, r0
 80170a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80170a8:	4313      	orrs	r3, r2
 80170aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80170ac:	69bb      	ldr	r3, [r7, #24]
 80170ae:	015a      	lsls	r2, r3, #5
 80170b0:	69fb      	ldr	r3, [r7, #28]
 80170b2:	4413      	add	r3, r2
 80170b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80170b8:	691b      	ldr	r3, [r3, #16]
 80170ba:	69ba      	ldr	r2, [r7, #24]
 80170bc:	0151      	lsls	r1, r2, #5
 80170be:	69fa      	ldr	r2, [r7, #28]
 80170c0:	440a      	add	r2, r1
 80170c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80170c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80170ca:	6113      	str	r3, [r2, #16]
 80170cc:	e05f      	b.n	801718e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	691b      	ldr	r3, [r3, #16]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d123      	bne.n	801711e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80170d6:	69bb      	ldr	r3, [r7, #24]
 80170d8:	015a      	lsls	r2, r3, #5
 80170da:	69fb      	ldr	r3, [r7, #28]
 80170dc:	4413      	add	r3, r2
 80170de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80170e2:	691a      	ldr	r2, [r3, #16]
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	689b      	ldr	r3, [r3, #8]
 80170e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80170ec:	69b9      	ldr	r1, [r7, #24]
 80170ee:	0148      	lsls	r0, r1, #5
 80170f0:	69f9      	ldr	r1, [r7, #28]
 80170f2:	4401      	add	r1, r0
 80170f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80170f8:	4313      	orrs	r3, r2
 80170fa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80170fc:	69bb      	ldr	r3, [r7, #24]
 80170fe:	015a      	lsls	r2, r3, #5
 8017100:	69fb      	ldr	r3, [r7, #28]
 8017102:	4413      	add	r3, r2
 8017104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017108:	691b      	ldr	r3, [r3, #16]
 801710a:	69ba      	ldr	r2, [r7, #24]
 801710c:	0151      	lsls	r1, r2, #5
 801710e:	69fa      	ldr	r2, [r7, #28]
 8017110:	440a      	add	r2, r1
 8017112:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017116:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801711a:	6113      	str	r3, [r2, #16]
 801711c:	e037      	b.n	801718e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	691a      	ldr	r2, [r3, #16]
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	689b      	ldr	r3, [r3, #8]
 8017126:	4413      	add	r3, r2
 8017128:	1e5a      	subs	r2, r3, #1
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	689b      	ldr	r3, [r3, #8]
 801712e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017132:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8017134:	68bb      	ldr	r3, [r7, #8]
 8017136:	689b      	ldr	r3, [r3, #8]
 8017138:	8afa      	ldrh	r2, [r7, #22]
 801713a:	fb03 f202 	mul.w	r2, r3, r2
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8017142:	69bb      	ldr	r3, [r7, #24]
 8017144:	015a      	lsls	r2, r3, #5
 8017146:	69fb      	ldr	r3, [r7, #28]
 8017148:	4413      	add	r3, r2
 801714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801714e:	691a      	ldr	r2, [r3, #16]
 8017150:	8afb      	ldrh	r3, [r7, #22]
 8017152:	04d9      	lsls	r1, r3, #19
 8017154:	4b39      	ldr	r3, [pc, #228]	@ (801723c <USB_EPStartXfer+0x544>)
 8017156:	400b      	ands	r3, r1
 8017158:	69b9      	ldr	r1, [r7, #24]
 801715a:	0148      	lsls	r0, r1, #5
 801715c:	69f9      	ldr	r1, [r7, #28]
 801715e:	4401      	add	r1, r0
 8017160:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8017164:	4313      	orrs	r3, r2
 8017166:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8017168:	69bb      	ldr	r3, [r7, #24]
 801716a:	015a      	lsls	r2, r3, #5
 801716c:	69fb      	ldr	r3, [r7, #28]
 801716e:	4413      	add	r3, r2
 8017170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017174:	691a      	ldr	r2, [r3, #16]
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	6a1b      	ldr	r3, [r3, #32]
 801717a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801717e:	69b9      	ldr	r1, [r7, #24]
 8017180:	0148      	lsls	r0, r1, #5
 8017182:	69f9      	ldr	r1, [r7, #28]
 8017184:	4401      	add	r1, r0
 8017186:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801718a:	4313      	orrs	r3, r2
 801718c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801718e:	79fb      	ldrb	r3, [r7, #7]
 8017190:	2b01      	cmp	r3, #1
 8017192:	d10d      	bne.n	80171b0 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8017194:	68bb      	ldr	r3, [r7, #8]
 8017196:	68db      	ldr	r3, [r3, #12]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d009      	beq.n	80171b0 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	68d9      	ldr	r1, [r3, #12]
 80171a0:	69bb      	ldr	r3, [r7, #24]
 80171a2:	015a      	lsls	r2, r3, #5
 80171a4:	69fb      	ldr	r3, [r7, #28]
 80171a6:	4413      	add	r3, r2
 80171a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80171ac:	460a      	mov	r2, r1
 80171ae:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	791b      	ldrb	r3, [r3, #4]
 80171b4:	2b01      	cmp	r3, #1
 80171b6:	d128      	bne.n	801720a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80171be:	689b      	ldr	r3, [r3, #8]
 80171c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d110      	bne.n	80171ea <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80171c8:	69bb      	ldr	r3, [r7, #24]
 80171ca:	015a      	lsls	r2, r3, #5
 80171cc:	69fb      	ldr	r3, [r7, #28]
 80171ce:	4413      	add	r3, r2
 80171d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	69ba      	ldr	r2, [r7, #24]
 80171d8:	0151      	lsls	r1, r2, #5
 80171da:	69fa      	ldr	r2, [r7, #28]
 80171dc:	440a      	add	r2, r1
 80171de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80171e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80171e6:	6013      	str	r3, [r2, #0]
 80171e8:	e00f      	b.n	801720a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80171ea:	69bb      	ldr	r3, [r7, #24]
 80171ec:	015a      	lsls	r2, r3, #5
 80171ee:	69fb      	ldr	r3, [r7, #28]
 80171f0:	4413      	add	r3, r2
 80171f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	69ba      	ldr	r2, [r7, #24]
 80171fa:	0151      	lsls	r1, r2, #5
 80171fc:	69fa      	ldr	r2, [r7, #28]
 80171fe:	440a      	add	r2, r1
 8017200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017208:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801720a:	69bb      	ldr	r3, [r7, #24]
 801720c:	015a      	lsls	r2, r3, #5
 801720e:	69fb      	ldr	r3, [r7, #28]
 8017210:	4413      	add	r3, r2
 8017212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	69ba      	ldr	r2, [r7, #24]
 801721a:	0151      	lsls	r1, r2, #5
 801721c:	69fa      	ldr	r2, [r7, #28]
 801721e:	440a      	add	r2, r1
 8017220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017224:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8017228:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801722a:	2300      	movs	r3, #0
}
 801722c:	4618      	mov	r0, r3
 801722e:	3720      	adds	r7, #32
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}
 8017234:	fff80000 	.word	0xfff80000
 8017238:	e007ffff 	.word	0xe007ffff
 801723c:	1ff80000 	.word	0x1ff80000

08017240 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017240:	b480      	push	{r7}
 8017242:	b087      	sub	sp, #28
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
 8017248:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801724a:	2300      	movs	r3, #0
 801724c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801724e:	2300      	movs	r3, #0
 8017250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	785b      	ldrb	r3, [r3, #1]
 801725a:	2b01      	cmp	r3, #1
 801725c:	d14a      	bne.n	80172f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	015a      	lsls	r2, r3, #5
 8017264:	693b      	ldr	r3, [r7, #16]
 8017266:	4413      	add	r3, r2
 8017268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017276:	f040 8086 	bne.w	8017386 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	781b      	ldrb	r3, [r3, #0]
 801727e:	015a      	lsls	r2, r3, #5
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	4413      	add	r3, r2
 8017284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	683a      	ldr	r2, [r7, #0]
 801728c:	7812      	ldrb	r2, [r2, #0]
 801728e:	0151      	lsls	r1, r2, #5
 8017290:	693a      	ldr	r2, [r7, #16]
 8017292:	440a      	add	r2, r1
 8017294:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017298:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801729c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801729e:	683b      	ldr	r3, [r7, #0]
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	015a      	lsls	r2, r3, #5
 80172a4:	693b      	ldr	r3, [r7, #16]
 80172a6:	4413      	add	r3, r2
 80172a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	683a      	ldr	r2, [r7, #0]
 80172b0:	7812      	ldrb	r2, [r2, #0]
 80172b2:	0151      	lsls	r1, r2, #5
 80172b4:	693a      	ldr	r2, [r7, #16]
 80172b6:	440a      	add	r2, r1
 80172b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80172bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80172c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	3301      	adds	r3, #1
 80172c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80172ce:	4293      	cmp	r3, r2
 80172d0:	d902      	bls.n	80172d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80172d2:	2301      	movs	r3, #1
 80172d4:	75fb      	strb	r3, [r7, #23]
          break;
 80172d6:	e056      	b.n	8017386 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	781b      	ldrb	r3, [r3, #0]
 80172dc:	015a      	lsls	r2, r3, #5
 80172de:	693b      	ldr	r3, [r7, #16]
 80172e0:	4413      	add	r3, r2
 80172e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80172ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80172f0:	d0e7      	beq.n	80172c2 <USB_EPStopXfer+0x82>
 80172f2:	e048      	b.n	8017386 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	015a      	lsls	r2, r3, #5
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	4413      	add	r3, r2
 80172fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801730c:	d13b      	bne.n	8017386 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	015a      	lsls	r2, r3, #5
 8017314:	693b      	ldr	r3, [r7, #16]
 8017316:	4413      	add	r3, r2
 8017318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	683a      	ldr	r2, [r7, #0]
 8017320:	7812      	ldrb	r2, [r2, #0]
 8017322:	0151      	lsls	r1, r2, #5
 8017324:	693a      	ldr	r2, [r7, #16]
 8017326:	440a      	add	r2, r1
 8017328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801732c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017330:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	781b      	ldrb	r3, [r3, #0]
 8017336:	015a      	lsls	r2, r3, #5
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	4413      	add	r3, r2
 801733c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	683a      	ldr	r2, [r7, #0]
 8017344:	7812      	ldrb	r2, [r2, #0]
 8017346:	0151      	lsls	r1, r2, #5
 8017348:	693a      	ldr	r2, [r7, #16]
 801734a:	440a      	add	r2, r1
 801734c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017350:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8017354:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	3301      	adds	r3, #1
 801735a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017362:	4293      	cmp	r3, r2
 8017364:	d902      	bls.n	801736c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8017366:	2301      	movs	r3, #1
 8017368:	75fb      	strb	r3, [r7, #23]
          break;
 801736a:	e00c      	b.n	8017386 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	015a      	lsls	r2, r3, #5
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	4413      	add	r3, r2
 8017376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017384:	d0e7      	beq.n	8017356 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8017386:	7dfb      	ldrb	r3, [r7, #23]
}
 8017388:	4618      	mov	r0, r3
 801738a:	371c      	adds	r7, #28
 801738c:	46bd      	mov	sp, r7
 801738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017392:	4770      	bx	lr

08017394 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8017394:	b480      	push	{r7}
 8017396:	b089      	sub	sp, #36	@ 0x24
 8017398:	af00      	add	r7, sp, #0
 801739a:	60f8      	str	r0, [r7, #12]
 801739c:	60b9      	str	r1, [r7, #8]
 801739e:	4611      	mov	r1, r2
 80173a0:	461a      	mov	r2, r3
 80173a2:	460b      	mov	r3, r1
 80173a4:	71fb      	strb	r3, [r7, #7]
 80173a6:	4613      	mov	r3, r2
 80173a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80173b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d123      	bne.n	8017402 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80173ba:	88bb      	ldrh	r3, [r7, #4]
 80173bc:	3303      	adds	r3, #3
 80173be:	089b      	lsrs	r3, r3, #2
 80173c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80173c2:	2300      	movs	r3, #0
 80173c4:	61bb      	str	r3, [r7, #24]
 80173c6:	e018      	b.n	80173fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80173c8:	79fb      	ldrb	r3, [r7, #7]
 80173ca:	031a      	lsls	r2, r3, #12
 80173cc:	697b      	ldr	r3, [r7, #20]
 80173ce:	4413      	add	r3, r2
 80173d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80173d4:	461a      	mov	r2, r3
 80173d6:	69fb      	ldr	r3, [r7, #28]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80173dc:	69fb      	ldr	r3, [r7, #28]
 80173de:	3301      	adds	r3, #1
 80173e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80173e2:	69fb      	ldr	r3, [r7, #28]
 80173e4:	3301      	adds	r3, #1
 80173e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80173e8:	69fb      	ldr	r3, [r7, #28]
 80173ea:	3301      	adds	r3, #1
 80173ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80173ee:	69fb      	ldr	r3, [r7, #28]
 80173f0:	3301      	adds	r3, #1
 80173f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80173f4:	69bb      	ldr	r3, [r7, #24]
 80173f6:	3301      	adds	r3, #1
 80173f8:	61bb      	str	r3, [r7, #24]
 80173fa:	69ba      	ldr	r2, [r7, #24]
 80173fc:	693b      	ldr	r3, [r7, #16]
 80173fe:	429a      	cmp	r2, r3
 8017400:	d3e2      	bcc.n	80173c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8017402:	2300      	movs	r3, #0
}
 8017404:	4618      	mov	r0, r3
 8017406:	3724      	adds	r7, #36	@ 0x24
 8017408:	46bd      	mov	sp, r7
 801740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740e:	4770      	bx	lr

08017410 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8017410:	b480      	push	{r7}
 8017412:	b08b      	sub	sp, #44	@ 0x2c
 8017414:	af00      	add	r7, sp, #0
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	60b9      	str	r1, [r7, #8]
 801741a:	4613      	mov	r3, r2
 801741c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8017426:	88fb      	ldrh	r3, [r7, #6]
 8017428:	089b      	lsrs	r3, r3, #2
 801742a:	b29b      	uxth	r3, r3
 801742c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801742e:	88fb      	ldrh	r3, [r7, #6]
 8017430:	f003 0303 	and.w	r3, r3, #3
 8017434:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8017436:	2300      	movs	r3, #0
 8017438:	623b      	str	r3, [r7, #32]
 801743a:	e014      	b.n	8017466 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801743c:	69bb      	ldr	r3, [r7, #24]
 801743e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017442:	681a      	ldr	r2, [r3, #0]
 8017444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017446:	601a      	str	r2, [r3, #0]
    pDest++;
 8017448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801744a:	3301      	adds	r3, #1
 801744c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017450:	3301      	adds	r3, #1
 8017452:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8017454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017456:	3301      	adds	r3, #1
 8017458:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801745c:	3301      	adds	r3, #1
 801745e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8017460:	6a3b      	ldr	r3, [r7, #32]
 8017462:	3301      	adds	r3, #1
 8017464:	623b      	str	r3, [r7, #32]
 8017466:	6a3a      	ldr	r2, [r7, #32]
 8017468:	697b      	ldr	r3, [r7, #20]
 801746a:	429a      	cmp	r2, r3
 801746c:	d3e6      	bcc.n	801743c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801746e:	8bfb      	ldrh	r3, [r7, #30]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d01e      	beq.n	80174b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8017474:	2300      	movs	r3, #0
 8017476:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8017478:	69bb      	ldr	r3, [r7, #24]
 801747a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801747e:	461a      	mov	r2, r3
 8017480:	f107 0310 	add.w	r3, r7, #16
 8017484:	6812      	ldr	r2, [r2, #0]
 8017486:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8017488:	693a      	ldr	r2, [r7, #16]
 801748a:	6a3b      	ldr	r3, [r7, #32]
 801748c:	b2db      	uxtb	r3, r3
 801748e:	00db      	lsls	r3, r3, #3
 8017490:	fa22 f303 	lsr.w	r3, r2, r3
 8017494:	b2da      	uxtb	r2, r3
 8017496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017498:	701a      	strb	r2, [r3, #0]
      i++;
 801749a:	6a3b      	ldr	r3, [r7, #32]
 801749c:	3301      	adds	r3, #1
 801749e:	623b      	str	r3, [r7, #32]
      pDest++;
 80174a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174a2:	3301      	adds	r3, #1
 80174a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80174a6:	8bfb      	ldrh	r3, [r7, #30]
 80174a8:	3b01      	subs	r3, #1
 80174aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80174ac:	8bfb      	ldrh	r3, [r7, #30]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d1ea      	bne.n	8017488 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80174b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	372c      	adds	r7, #44	@ 0x2c
 80174b8:	46bd      	mov	sp, r7
 80174ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174be:	4770      	bx	lr

080174c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80174c0:	b480      	push	{r7}
 80174c2:	b085      	sub	sp, #20
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
 80174c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	785b      	ldrb	r3, [r3, #1]
 80174d8:	2b01      	cmp	r3, #1
 80174da:	d12c      	bne.n	8017536 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	015a      	lsls	r2, r3, #5
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	4413      	add	r3, r2
 80174e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	db12      	blt.n	8017514 <USB_EPSetStall+0x54>
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d00f      	beq.n	8017514 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	015a      	lsls	r2, r3, #5
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	4413      	add	r3, r2
 80174fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	68ba      	ldr	r2, [r7, #8]
 8017504:	0151      	lsls	r1, r2, #5
 8017506:	68fa      	ldr	r2, [r7, #12]
 8017508:	440a      	add	r2, r1
 801750a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801750e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8017512:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	015a      	lsls	r2, r3, #5
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	4413      	add	r3, r2
 801751c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	68ba      	ldr	r2, [r7, #8]
 8017524:	0151      	lsls	r1, r2, #5
 8017526:	68fa      	ldr	r2, [r7, #12]
 8017528:	440a      	add	r2, r1
 801752a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801752e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8017532:	6013      	str	r3, [r2, #0]
 8017534:	e02b      	b.n	801758e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	015a      	lsls	r2, r3, #5
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	4413      	add	r3, r2
 801753e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	db12      	blt.n	801756e <USB_EPSetStall+0xae>
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d00f      	beq.n	801756e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	015a      	lsls	r2, r3, #5
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	4413      	add	r3, r2
 8017556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	68ba      	ldr	r2, [r7, #8]
 801755e:	0151      	lsls	r1, r2, #5
 8017560:	68fa      	ldr	r2, [r7, #12]
 8017562:	440a      	add	r2, r1
 8017564:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017568:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801756c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801756e:	68bb      	ldr	r3, [r7, #8]
 8017570:	015a      	lsls	r2, r3, #5
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	4413      	add	r3, r2
 8017576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	68ba      	ldr	r2, [r7, #8]
 801757e:	0151      	lsls	r1, r2, #5
 8017580:	68fa      	ldr	r2, [r7, #12]
 8017582:	440a      	add	r2, r1
 8017584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017588:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801758c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801758e:	2300      	movs	r3, #0
}
 8017590:	4618      	mov	r0, r3
 8017592:	3714      	adds	r7, #20
 8017594:	46bd      	mov	sp, r7
 8017596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759a:	4770      	bx	lr

0801759c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801759c:	b480      	push	{r7}
 801759e:	b085      	sub	sp, #20
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
 80175a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	785b      	ldrb	r3, [r3, #1]
 80175b4:	2b01      	cmp	r3, #1
 80175b6:	d128      	bne.n	801760a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80175b8:	68bb      	ldr	r3, [r7, #8]
 80175ba:	015a      	lsls	r2, r3, #5
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	4413      	add	r3, r2
 80175c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	68ba      	ldr	r2, [r7, #8]
 80175c8:	0151      	lsls	r1, r2, #5
 80175ca:	68fa      	ldr	r2, [r7, #12]
 80175cc:	440a      	add	r2, r1
 80175ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80175d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80175d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80175d8:	683b      	ldr	r3, [r7, #0]
 80175da:	791b      	ldrb	r3, [r3, #4]
 80175dc:	2b03      	cmp	r3, #3
 80175de:	d003      	beq.n	80175e8 <USB_EPClearStall+0x4c>
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	791b      	ldrb	r3, [r3, #4]
 80175e4:	2b02      	cmp	r3, #2
 80175e6:	d138      	bne.n	801765a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	015a      	lsls	r2, r3, #5
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	4413      	add	r3, r2
 80175f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	68ba      	ldr	r2, [r7, #8]
 80175f8:	0151      	lsls	r1, r2, #5
 80175fa:	68fa      	ldr	r2, [r7, #12]
 80175fc:	440a      	add	r2, r1
 80175fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017606:	6013      	str	r3, [r2, #0]
 8017608:	e027      	b.n	801765a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	015a      	lsls	r2, r3, #5
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	4413      	add	r3, r2
 8017612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	68ba      	ldr	r2, [r7, #8]
 801761a:	0151      	lsls	r1, r2, #5
 801761c:	68fa      	ldr	r2, [r7, #12]
 801761e:	440a      	add	r2, r1
 8017620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017624:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017628:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	791b      	ldrb	r3, [r3, #4]
 801762e:	2b03      	cmp	r3, #3
 8017630:	d003      	beq.n	801763a <USB_EPClearStall+0x9e>
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	791b      	ldrb	r3, [r3, #4]
 8017636:	2b02      	cmp	r3, #2
 8017638:	d10f      	bne.n	801765a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801763a:	68bb      	ldr	r3, [r7, #8]
 801763c:	015a      	lsls	r2, r3, #5
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	4413      	add	r3, r2
 8017642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	68ba      	ldr	r2, [r7, #8]
 801764a:	0151      	lsls	r1, r2, #5
 801764c:	68fa      	ldr	r2, [r7, #12]
 801764e:	440a      	add	r2, r1
 8017650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017658:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801765a:	2300      	movs	r3, #0
}
 801765c:	4618      	mov	r0, r3
 801765e:	3714      	adds	r7, #20
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr

08017668 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8017668:	b480      	push	{r7}
 801766a:	b085      	sub	sp, #20
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
 8017670:	460b      	mov	r3, r1
 8017672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	68fa      	ldr	r2, [r7, #12]
 8017682:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8017686:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801768a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017692:	681a      	ldr	r2, [r3, #0]
 8017694:	78fb      	ldrb	r3, [r7, #3]
 8017696:	011b      	lsls	r3, r3, #4
 8017698:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 801769c:	68f9      	ldr	r1, [r7, #12]
 801769e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80176a2:	4313      	orrs	r3, r2
 80176a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80176a6:	2300      	movs	r3, #0
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3714      	adds	r7, #20
 80176ac:	46bd      	mov	sp, r7
 80176ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b2:	4770      	bx	lr

080176b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80176b4:	b480      	push	{r7}
 80176b6:	b085      	sub	sp, #20
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	68fa      	ldr	r2, [r7, #12]
 80176ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80176ce:	f023 0303 	bic.w	r3, r3, #3
 80176d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80176da:	685b      	ldr	r3, [r3, #4]
 80176dc:	68fa      	ldr	r2, [r7, #12]
 80176de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80176e2:	f023 0302 	bic.w	r3, r3, #2
 80176e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80176e8:	2300      	movs	r3, #0
}
 80176ea:	4618      	mov	r0, r3
 80176ec:	3714      	adds	r7, #20
 80176ee:	46bd      	mov	sp, r7
 80176f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f4:	4770      	bx	lr

080176f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80176f6:	b480      	push	{r7}
 80176f8:	b085      	sub	sp, #20
 80176fa:	af00      	add	r7, sp, #0
 80176fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	68fa      	ldr	r2, [r7, #12]
 801770c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017710:	f023 0303 	bic.w	r3, r3, #3
 8017714:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	68fa      	ldr	r2, [r7, #12]
 8017720:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8017724:	f043 0302 	orr.w	r3, r3, #2
 8017728:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801772a:	2300      	movs	r3, #0
}
 801772c:	4618      	mov	r0, r3
 801772e:	3714      	adds	r7, #20
 8017730:	46bd      	mov	sp, r7
 8017732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017736:	4770      	bx	lr

08017738 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8017738:	b480      	push	{r7}
 801773a:	b085      	sub	sp, #20
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	695b      	ldr	r3, [r3, #20]
 8017744:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	699b      	ldr	r3, [r3, #24]
 801774a:	68fa      	ldr	r2, [r7, #12]
 801774c:	4013      	ands	r3, r2
 801774e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8017750:	68fb      	ldr	r3, [r7, #12]
}
 8017752:	4618      	mov	r0, r3
 8017754:	3714      	adds	r7, #20
 8017756:	46bd      	mov	sp, r7
 8017758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775c:	4770      	bx	lr

0801775e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801775e:	b480      	push	{r7}
 8017760:	b085      	sub	sp, #20
 8017762:	af00      	add	r7, sp, #0
 8017764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017770:	699b      	ldr	r3, [r3, #24]
 8017772:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801777a:	69db      	ldr	r3, [r3, #28]
 801777c:	68ba      	ldr	r2, [r7, #8]
 801777e:	4013      	ands	r3, r2
 8017780:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8017782:	68bb      	ldr	r3, [r7, #8]
 8017784:	0c1b      	lsrs	r3, r3, #16
}
 8017786:	4618      	mov	r0, r3
 8017788:	3714      	adds	r7, #20
 801778a:	46bd      	mov	sp, r7
 801778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017790:	4770      	bx	lr

08017792 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8017792:	b480      	push	{r7}
 8017794:	b085      	sub	sp, #20
 8017796:	af00      	add	r7, sp, #0
 8017798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80177a4:	699b      	ldr	r3, [r3, #24]
 80177a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80177ae:	69db      	ldr	r3, [r3, #28]
 80177b0:	68ba      	ldr	r2, [r7, #8]
 80177b2:	4013      	ands	r3, r2
 80177b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80177b6:	68bb      	ldr	r3, [r7, #8]
 80177b8:	b29b      	uxth	r3, r3
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3714      	adds	r7, #20
 80177be:	46bd      	mov	sp, r7
 80177c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c4:	4770      	bx	lr

080177c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80177c6:	b480      	push	{r7}
 80177c8:	b085      	sub	sp, #20
 80177ca:	af00      	add	r7, sp, #0
 80177cc:	6078      	str	r0, [r7, #4]
 80177ce:	460b      	mov	r3, r1
 80177d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80177d6:	78fb      	ldrb	r3, [r7, #3]
 80177d8:	015a      	lsls	r2, r3, #5
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	4413      	add	r3, r2
 80177de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80177e2:	689b      	ldr	r3, [r3, #8]
 80177e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80177ec:	695b      	ldr	r3, [r3, #20]
 80177ee:	68ba      	ldr	r2, [r7, #8]
 80177f0:	4013      	ands	r3, r2
 80177f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80177f4:	68bb      	ldr	r3, [r7, #8]
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3714      	adds	r7, #20
 80177fa:	46bd      	mov	sp, r7
 80177fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017800:	4770      	bx	lr

08017802 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017802:	b480      	push	{r7}
 8017804:	b087      	sub	sp, #28
 8017806:	af00      	add	r7, sp, #0
 8017808:	6078      	str	r0, [r7, #4]
 801780a:	460b      	mov	r3, r1
 801780c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017818:	691b      	ldr	r3, [r3, #16]
 801781a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801781c:	697b      	ldr	r3, [r7, #20]
 801781e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017824:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8017826:	78fb      	ldrb	r3, [r7, #3]
 8017828:	f003 030f 	and.w	r3, r3, #15
 801782c:	68fa      	ldr	r2, [r7, #12]
 801782e:	fa22 f303 	lsr.w	r3, r2, r3
 8017832:	01db      	lsls	r3, r3, #7
 8017834:	b2db      	uxtb	r3, r3
 8017836:	693a      	ldr	r2, [r7, #16]
 8017838:	4313      	orrs	r3, r2
 801783a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801783c:	78fb      	ldrb	r3, [r7, #3]
 801783e:	015a      	lsls	r2, r3, #5
 8017840:	697b      	ldr	r3, [r7, #20]
 8017842:	4413      	add	r3, r2
 8017844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017848:	689b      	ldr	r3, [r3, #8]
 801784a:	693a      	ldr	r2, [r7, #16]
 801784c:	4013      	ands	r3, r2
 801784e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017850:	68bb      	ldr	r3, [r7, #8]
}
 8017852:	4618      	mov	r0, r3
 8017854:	371c      	adds	r7, #28
 8017856:	46bd      	mov	sp, r7
 8017858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785c:	4770      	bx	lr

0801785e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801785e:	b480      	push	{r7}
 8017860:	b083      	sub	sp, #12
 8017862:	af00      	add	r7, sp, #0
 8017864:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	695b      	ldr	r3, [r3, #20]
 801786a:	f003 0301 	and.w	r3, r3, #1
}
 801786e:	4618      	mov	r0, r3
 8017870:	370c      	adds	r7, #12
 8017872:	46bd      	mov	sp, r7
 8017874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017878:	4770      	bx	lr
	...

0801787c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 801787c:	b480      	push	{r7}
 801787e:	b085      	sub	sp, #20
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801788e:	681a      	ldr	r2, [r3, #0]
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017896:	4619      	mov	r1, r3
 8017898:	4b09      	ldr	r3, [pc, #36]	@ (80178c0 <USB_ActivateSetup+0x44>)
 801789a:	4013      	ands	r3, r2
 801789c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	68fa      	ldr	r2, [r7, #12]
 80178a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80178ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80178b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80178b2:	2300      	movs	r3, #0
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3714      	adds	r7, #20
 80178b8:	46bd      	mov	sp, r7
 80178ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178be:	4770      	bx	lr
 80178c0:	fffff800 	.word	0xfffff800

080178c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80178c4:	b480      	push	{r7}
 80178c6:	b087      	sub	sp, #28
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	460b      	mov	r3, r1
 80178ce:	607a      	str	r2, [r7, #4]
 80178d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	333c      	adds	r3, #60	@ 0x3c
 80178da:	3304      	adds	r3, #4
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80178e0:	693b      	ldr	r3, [r7, #16]
 80178e2:	4a26      	ldr	r2, [pc, #152]	@ (801797c <USB_EP0_OutStart+0xb8>)
 80178e4:	4293      	cmp	r3, r2
 80178e6:	d90a      	bls.n	80178fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80178e8:	697b      	ldr	r3, [r7, #20]
 80178ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80178f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80178f8:	d101      	bne.n	80178fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80178fa:	2300      	movs	r3, #0
 80178fc:	e037      	b.n	801796e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80178fe:	697b      	ldr	r3, [r7, #20]
 8017900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017904:	461a      	mov	r2, r3
 8017906:	2300      	movs	r3, #0
 8017908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801790a:	697b      	ldr	r3, [r7, #20]
 801790c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017910:	691b      	ldr	r3, [r3, #16]
 8017912:	697a      	ldr	r2, [r7, #20]
 8017914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017918:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801791c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801791e:	697b      	ldr	r3, [r7, #20]
 8017920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017924:	691b      	ldr	r3, [r3, #16]
 8017926:	697a      	ldr	r2, [r7, #20]
 8017928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801792c:	f043 0318 	orr.w	r3, r3, #24
 8017930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8017932:	697b      	ldr	r3, [r7, #20]
 8017934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017938:	691b      	ldr	r3, [r3, #16]
 801793a:	697a      	ldr	r2, [r7, #20]
 801793c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017940:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8017944:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8017946:	7afb      	ldrb	r3, [r7, #11]
 8017948:	2b01      	cmp	r3, #1
 801794a:	d10f      	bne.n	801796c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801794c:	697b      	ldr	r3, [r7, #20]
 801794e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017952:	461a      	mov	r2, r3
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8017958:	697b      	ldr	r3, [r7, #20]
 801795a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	697a      	ldr	r2, [r7, #20]
 8017962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017966:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801796a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801796c:	2300      	movs	r3, #0
}
 801796e:	4618      	mov	r0, r3
 8017970:	371c      	adds	r7, #28
 8017972:	46bd      	mov	sp, r7
 8017974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017978:	4770      	bx	lr
 801797a:	bf00      	nop
 801797c:	4f54300a 	.word	0x4f54300a

08017980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8017980:	b480      	push	{r7}
 8017982:	b085      	sub	sp, #20
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8017988:	2300      	movs	r3, #0
 801798a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	3301      	adds	r3, #1
 8017990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8017998:	d901      	bls.n	801799e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801799a:	2303      	movs	r3, #3
 801799c:	e01b      	b.n	80179d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	691b      	ldr	r3, [r3, #16]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	daf2      	bge.n	801798c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80179a6:	2300      	movs	r3, #0
 80179a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	691b      	ldr	r3, [r3, #16]
 80179ae:	f043 0201 	orr.w	r2, r3, #1
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	3301      	adds	r3, #1
 80179ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80179c2:	d901      	bls.n	80179c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80179c4:	2303      	movs	r3, #3
 80179c6:	e006      	b.n	80179d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	691b      	ldr	r3, [r3, #16]
 80179cc:	f003 0301 	and.w	r3, r3, #1
 80179d0:	2b01      	cmp	r3, #1
 80179d2:	d0f0      	beq.n	80179b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80179d4:	2300      	movs	r3, #0
}
 80179d6:	4618      	mov	r0, r3
 80179d8:	3714      	adds	r7, #20
 80179da:	46bd      	mov	sp, r7
 80179dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e0:	4770      	bx	lr

080179e2 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 80179e2:	b580      	push	{r7, lr}
 80179e4:	b082      	sub	sp, #8
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	2200      	movs	r2, #0
 80179ee:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2200      	movs	r2, #0
 80179f4:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	2200      	movs	r2, #0
 80179fa:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2200      	movs	r2, #0
 8017a00:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2200      	movs	r2, #0
 8017a06:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	2200      	movs	r2, #0
 8017a14:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 8017a18:	2044      	movs	r0, #68	@ 0x44
 8017a1a:	f003 ff05 	bl	801b828 <malloc>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	461a      	mov	r2, r3
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 8017a26:	2044      	movs	r0, #68	@ 0x44
 8017a28:	f003 fefe 	bl	801b828 <malloc>
 8017a2c:	4603      	mov	r3, r0
 8017a2e:	461a      	mov	r2, r3
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	7e1b      	ldrb	r3, [r3, #24]
 8017a38:	461a      	mov	r2, r3
 8017a3a:	4613      	mov	r3, r2
 8017a3c:	011b      	lsls	r3, r3, #4
 8017a3e:	4413      	add	r3, r2
 8017a40:	009b      	lsls	r3, r3, #2
 8017a42:	4618      	mov	r0, r3
 8017a44:	f003 fef0 	bl	801b828 <malloc>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	461a      	mov	r2, r3
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017a56:	461a      	mov	r2, r3
 8017a58:	4613      	mov	r3, r2
 8017a5a:	011b      	lsls	r3, r3, #4
 8017a5c:	4413      	add	r3, r2
 8017a5e:	009b      	lsls	r3, r3, #2
 8017a60:	4618      	mov	r0, r3
 8017a62:	f003 fee1 	bl	801b828 <malloc>
 8017a66:	4603      	mov	r3, r0
 8017a68:	461a      	mov	r2, r3
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	6818      	ldr	r0, [r3, #0]
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	689b      	ldr	r3, [r3, #8]
 8017a76:	2244      	movs	r2, #68	@ 0x44
 8017a78:	4619      	mov	r1, r3
 8017a7a:	f7fc fd4b 	bl	8014514 <HAL_UART_Receive_DMA>
 8017a7e:	4603      	mov	r3, r0
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3708      	adds	r7, #8
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 8017a88:	b480      	push	{r7}
 8017a8a:	b087      	sub	sp, #28
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	60f8      	str	r0, [r7, #12]
 8017a90:	60b9      	str	r1, [r7, #8]
 8017a92:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	7e9a      	ldrb	r2, [r3, #26]
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	7e5b      	ldrb	r3, [r3, #25]
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d101      	bne.n	8017aa4 <XBEE_RXPacket+0x1c>
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	e05b      	b.n	8017b5c <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	695a      	ldr	r2, [r3, #20]
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	7e9b      	ldrb	r3, [r3, #26]
 8017aac:	4619      	mov	r1, r3
 8017aae:	460b      	mov	r3, r1
 8017ab0:	011b      	lsls	r3, r3, #4
 8017ab2:	440b      	add	r3, r1
 8017ab4:	009b      	lsls	r3, r3, #2
 8017ab6:	4413      	add	r3, r2
 8017ab8:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	7e9b      	ldrb	r3, [r3, #26]
 8017abe:	3301      	adds	r3, #1
 8017ac0:	b2da      	uxtb	r2, r3
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	7e9b      	ldrb	r3, [r3, #26]
 8017aca:	68fa      	ldr	r2, [r7, #12]
 8017acc:	7e12      	ldrb	r2, [r2, #24]
 8017ace:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ad2:	fb01 f202 	mul.w	r2, r1, r2
 8017ad6:	1a9b      	subs	r3, r3, r2
 8017ad8:	b2da      	uxtb	r2, r3
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 8017ade:	2300      	movs	r3, #0
 8017ae0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	75bb      	strb	r3, [r7, #22]
 8017ae6:	e00e      	b.n	8017b06 <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 8017ae8:	7dbb      	ldrb	r3, [r7, #22]
 8017aea:	2b03      	cmp	r3, #3
 8017aec:	d007      	beq.n	8017afe <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 8017aee:	7dbb      	ldrb	r3, [r7, #22]
 8017af0:	693a      	ldr	r2, [r7, #16]
 8017af2:	4413      	add	r3, r2
 8017af4:	781a      	ldrb	r2, [r3, #0]
 8017af6:	7dfb      	ldrb	r3, [r7, #23]
 8017af8:	4053      	eors	r3, r2
 8017afa:	75fb      	strb	r3, [r7, #23]
 8017afc:	e000      	b.n	8017b00 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 8017afe:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8017b00:	7dbb      	ldrb	r3, [r7, #22]
 8017b02:	3301      	adds	r3, #1
 8017b04:	75bb      	strb	r3, [r7, #22]
 8017b06:	7dbb      	ldrb	r3, [r7, #22]
 8017b08:	2b43      	cmp	r3, #67	@ 0x43
 8017b0a:	d9ed      	bls.n	8017ae8 <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 8017b0c:	693b      	ldr	r3, [r7, #16]
 8017b0e:	3303      	adds	r3, #3
 8017b10:	781b      	ldrb	r3, [r3, #0]
 8017b12:	7dfa      	ldrb	r2, [r7, #23]
 8017b14:	429a      	cmp	r2, r3
 8017b16:	d001      	beq.n	8017b1c <XBEE_RXPacket+0x94>
 8017b18:	2301      	movs	r3, #1
 8017b1a:	e01f      	b.n	8017b5c <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	881b      	ldrh	r3, [r3, #0]
 8017b26:	693a      	ldr	r2, [r7, #16]
 8017b28:	3201      	adds	r2, #1
 8017b2a:	7812      	ldrb	r2, [r2, #0]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	b29a      	uxth	r2, r3
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	881b      	ldrh	r3, [r3, #0]
 8017b38:	021b      	lsls	r3, r3, #8
 8017b3a:	b29a      	uxth	r2, r3
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	881b      	ldrh	r3, [r3, #0]
 8017b44:	693a      	ldr	r2, [r7, #16]
 8017b46:	3202      	adds	r2, #2
 8017b48:	7812      	ldrb	r2, [r2, #0]
 8017b4a:	4413      	add	r3, r2
 8017b4c:	b29a      	uxth	r2, r3
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	1d1a      	adds	r2, r3, #4
 8017b56:	68bb      	ldr	r3, [r7, #8]
 8017b58:	601a      	str	r2, [r3, #0]

	return 0;
 8017b5a:	2300      	movs	r3, #0
}
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	371c      	adds	r7, #28
 8017b60:	46bd      	mov	sp, r7
 8017b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b66:	4770      	bx	lr

08017b68 <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b086      	sub	sp, #24
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	60f8      	str	r0, [r7, #12]
 8017b70:	60b9      	str	r1, [r7, #8]
 8017b72:	4613      	mov	r3, r2
 8017b74:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	f893 2020 	ldrb.w	r2, [r3, #32]
 8017b86:	7dbb      	ldrb	r3, [r7, #22]
 8017b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8017b8c:	fb01 f202 	mul.w	r2, r1, r2
 8017b90:	1a9b      	subs	r3, r3, r2
 8017b92:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8017b9a:	7dba      	ldrb	r2, [r7, #22]
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	d101      	bne.n	8017ba4 <XBEE_TXPacket+0x3c>
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	e047      	b.n	8017c34 <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	69da      	ldr	r2, [r3, #28]
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017bae:	4619      	mov	r1, r3
 8017bb0:	460b      	mov	r3, r1
 8017bb2:	011b      	lsls	r3, r3, #4
 8017bb4:	440b      	add	r3, r1
 8017bb6:	009b      	lsls	r3, r3, #2
 8017bb8:	4413      	add	r3, r2
 8017bba:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	22aa      	movs	r2, #170	@ 0xaa
 8017bc0:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 8017bc2:	88fb      	ldrh	r3, [r7, #6]
 8017bc4:	0a1b      	lsrs	r3, r3, #8
 8017bc6:	b29a      	uxth	r2, r3
 8017bc8:	693b      	ldr	r3, [r7, #16]
 8017bca:	3301      	adds	r3, #1
 8017bcc:	b2d2      	uxtb	r2, r2
 8017bce:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	3302      	adds	r3, #2
 8017bd4:	88fa      	ldrh	r2, [r7, #6]
 8017bd6:	b2d2      	uxtb	r2, r2
 8017bd8:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	3304      	adds	r3, #4
 8017bde:	2240      	movs	r2, #64	@ 0x40
 8017be0:	68b9      	ldr	r1, [r7, #8]
 8017be2:	4618      	mov	r0, r3
 8017be4:	f004 fcc9 	bl	801c57a <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 8017be8:	693b      	ldr	r3, [r7, #16]
 8017bea:	3303      	adds	r3, #3
 8017bec:	2200      	movs	r2, #0
 8017bee:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	75fb      	strb	r3, [r7, #23]
 8017bf4:	e013      	b.n	8017c1e <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 8017bf6:	7dfb      	ldrb	r3, [r7, #23]
 8017bf8:	2b03      	cmp	r3, #3
 8017bfa:	d00c      	beq.n	8017c16 <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	3303      	adds	r3, #3
 8017c00:	7819      	ldrb	r1, [r3, #0]
 8017c02:	7dfb      	ldrb	r3, [r7, #23]
 8017c04:	693a      	ldr	r2, [r7, #16]
 8017c06:	4413      	add	r3, r2
 8017c08:	781a      	ldrb	r2, [r3, #0]
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	3303      	adds	r3, #3
 8017c0e:	404a      	eors	r2, r1
 8017c10:	b2d2      	uxtb	r2, r2
 8017c12:	701a      	strb	r2, [r3, #0]
 8017c14:	e000      	b.n	8017c18 <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 8017c16:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8017c18:	7dfb      	ldrb	r3, [r7, #23]
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	75fb      	strb	r3, [r7, #23]
 8017c1e:	7dfb      	ldrb	r3, [r7, #23]
 8017c20:	2b43      	cmp	r3, #67	@ 0x43
 8017c22:	d9e8      	bls.n	8017bf6 <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	6818      	ldr	r0, [r3, #0]
 8017c28:	231e      	movs	r3, #30
 8017c2a:	2244      	movs	r2, #68	@ 0x44
 8017c2c:	6939      	ldr	r1, [r7, #16]
 8017c2e:	f7fc fbe3 	bl	80143f8 <HAL_UART_Transmit>
 8017c32:	4603      	mov	r3, r0

}
 8017c34:	4618      	mov	r0, r3
 8017c36:	3718      	adds	r7, #24
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	bd80      	pop	{r7, pc}

08017c3c <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b096      	sub	sp, #88	@ 0x58
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	7e5b      	ldrb	r3, [r3, #25]
 8017c48:	3301      	adds	r3, #1
 8017c4a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	7e1a      	ldrb	r2, [r3, #24]
 8017c52:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8017c56:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c5a:	fb01 f202 	mul.w	r2, r1, r2
 8017c5e:	1a9b      	subs	r3, r3, r2
 8017c60:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	7e9b      	ldrb	r3, [r3, #26]
 8017c68:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8017c6c:	429a      	cmp	r2, r3
 8017c6e:	d101      	bne.n	8017c74 <XBEE_RX_DMACallback+0x38>
 8017c70:	2301      	movs	r3, #1
 8017c72:	e097      	b.n	8017da4 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	7c1b      	ldrb	r3, [r3, #16]
 8017c78:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8017c82:	2300      	movs	r3, #0
 8017c84:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8017c88:	e027      	b.n	8017cda <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 8017c8a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	7c12      	ldrb	r2, [r2, #16]
 8017c92:	441a      	add	r2, r3
 8017c94:	4b45      	ldr	r3, [pc, #276]	@ (8017dac <XBEE_RX_DMACallback+0x170>)
 8017c96:	fb83 1302 	smull	r1, r3, r3, r2
 8017c9a:	1159      	asrs	r1, r3, #5
 8017c9c:	17d3      	asrs	r3, r2, #31
 8017c9e:	1ac9      	subs	r1, r1, r3
 8017ca0:	460b      	mov	r3, r1
 8017ca2:	011b      	lsls	r3, r3, #4
 8017ca4:	440b      	add	r3, r1
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	1ad1      	subs	r1, r2, r3
 8017caa:	460b      	mov	r3, r1
 8017cac:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	689a      	ldr	r2, [r3, #8]
 8017cb4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8017cb8:	4413      	add	r3, r2
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	2baa      	cmp	r3, #170	@ 0xaa
 8017cbe:	d107      	bne.n	8017cd0 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 8017cc0:	2301      	movs	r3, #1
 8017cc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8017ccc:	741a      	strb	r2, [r3, #16]
			break;
 8017cce:	e008      	b.n	8017ce2 <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8017cd0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8017cd4:	3301      	adds	r3, #1
 8017cd6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8017cda:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8017cde:	2b43      	cmp	r3, #67	@ 0x43
 8017ce0:	d9d3      	bls.n	8017c8a <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 8017ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d101      	bne.n	8017cee <XBEE_RX_DMACallback+0xb2>
 8017cea:	2302      	movs	r3, #2
 8017cec:	e05a      	b.n	8017da4 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	68da      	ldr	r2, [r3, #12]
 8017cf2:	f107 030c 	add.w	r3, r7, #12
 8017cf6:	4611      	mov	r1, r2
 8017cf8:	2244      	movs	r2, #68	@ 0x44
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f004 fc3d 	bl	801c57a <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	68d8      	ldr	r0, [r3, #12]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	689b      	ldr	r3, [r3, #8]
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	7c12      	ldrb	r2, [r2, #16]
 8017d0c:	1899      	adds	r1, r3, r2
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	7c1b      	ldrb	r3, [r3, #16]
 8017d12:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8017d16:	461a      	mov	r2, r3
 8017d18:	f004 fc2f 	bl	801c57a <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	7c1b      	ldrb	r3, [r3, #16]
 8017d20:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d201      	bcs.n	8017d2c <XBEE_RX_DMACallback+0xf0>
		return 2;
 8017d28:	2302      	movs	r3, #2
 8017d2a:	e03b      	b.n	8017da4 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8017d2c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017d30:	b29b      	uxth	r3, r3
 8017d32:	687a      	ldr	r2, [r7, #4]
 8017d34:	7c12      	ldrb	r2, [r2, #16]
 8017d36:	1a9b      	subs	r3, r3, r2
 8017d38:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8017d3c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017d40:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8017d44:	461a      	mov	r2, r3
 8017d46:	f107 030c 	add.w	r3, r7, #12
 8017d4a:	4413      	add	r3, r2
 8017d4c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017d50:	2100      	movs	r1, #0
 8017d52:	4618      	mov	r0, r3
 8017d54:	f004 fb79 	bl	801c44a <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8017d58:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017d5c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017d60:	1ad3      	subs	r3, r2, r3
 8017d62:	3344      	adds	r3, #68	@ 0x44
 8017d64:	f107 020c 	add.w	r2, r7, #12
 8017d68:	18d0      	adds	r0, r2, r3
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	6899      	ldr	r1, [r3, #8]
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	7c1b      	ldrb	r3, [r3, #16]
 8017d72:	461a      	mov	r2, r3
 8017d74:	f004 fc01 	bl	801c57a <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8017d7e:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	695a      	ldr	r2, [r3, #20]
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	7e5b      	ldrb	r3, [r3, #25]
 8017d88:	4619      	mov	r1, r3
 8017d8a:	460b      	mov	r3, r1
 8017d8c:	011b      	lsls	r3, r3, #4
 8017d8e:	440b      	add	r3, r1
 8017d90:	009b      	lsls	r3, r3, #2
 8017d92:	4413      	add	r3, r2
 8017d94:	4618      	mov	r0, r3
 8017d96:	f107 030c 	add.w	r3, r7, #12
 8017d9a:	2244      	movs	r2, #68	@ 0x44
 8017d9c:	4619      	mov	r1, r3
 8017d9e:	f004 fbec 	bl	801c57a <memcpy>

	return 0;
 8017da2:	2300      	movs	r3, #0
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	3758      	adds	r7, #88	@ 0x58
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}
 8017dac:	78787879 	.word	0x78787879

08017db0 <AllocateValueArr>:
#include "MenuOLED.h"

// FUNCS
// ------------------------------------------------------------------------------------

uint8_t* AllocateValueArr(uint8_t num) {
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b082      	sub	sp, #8
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	4603      	mov	r3, r0
 8017db8:	71fb      	strb	r3, [r7, #7]
	return (uint8_t*)malloc(sizeof(uint8_t)*num);
 8017dba:	79fb      	ldrb	r3, [r7, #7]
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f003 fd33 	bl	801b828 <malloc>
 8017dc2:	4603      	mov	r3, r0
}
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	3708      	adds	r7, #8
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	bd80      	pop	{r7, pc}

08017dcc <AllocateString>:

uint8_t* AllocateString(uint8_t* src) {
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b09c      	sub	sp, #112	@ 0x70
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
	uint8_t str_tmp[100];
	uint8_t* dst = (uint8_t*)malloc(strlen(src)+1);
 8017dd4:	6878      	ldr	r0, [r7, #4]
 8017dd6:	f7e8 fad3 	bl	8000380 <strlen>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	3301      	adds	r3, #1
 8017dde:	4618      	mov	r0, r3
 8017de0:	f003 fd22 	bl	801b828 <malloc>
 8017de4:	4603      	mov	r3, r0
 8017de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	strcpy(dst, src);
 8017de8:	6879      	ldr	r1, [r7, #4]
 8017dea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8017dec:	f004 fbbd 	bl	801c56a <strcpy>
	return dst;
 8017df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3770      	adds	r7, #112	@ 0x70
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}

08017dfa <AllocateStringArr>:

uint8_t** AllocateStringArr(uint8_t num) {
 8017dfa:	b580      	push	{r7, lr}
 8017dfc:	b082      	sub	sp, #8
 8017dfe:	af00      	add	r7, sp, #0
 8017e00:	4603      	mov	r3, r0
 8017e02:	71fb      	strb	r3, [r7, #7]
	return (uint8_t**)malloc(sizeof(uint8_t*)*num);
 8017e04:	79fb      	ldrb	r3, [r7, #7]
 8017e06:	009b      	lsls	r3, r3, #2
 8017e08:	4618      	mov	r0, r3
 8017e0a:	f003 fd0d 	bl	801b828 <malloc>
 8017e0e:	4603      	mov	r3, r0
}
 8017e10:	4618      	mov	r0, r3
 8017e12:	3708      	adds	r7, #8
 8017e14:	46bd      	mov	sp, r7
 8017e16:	bd80      	pop	{r7, pc}

08017e18 <AllocateProperties>:

Menu_Property* AllocateProperties(uint8_t num) {
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b082      	sub	sp, #8
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	4603      	mov	r3, r0
 8017e20:	71fb      	strb	r3, [r7, #7]
	return (Menu_Property*)malloc(sizeof(Menu_Property)*num);
 8017e22:	79fa      	ldrb	r2, [r7, #7]
 8017e24:	4613      	mov	r3, r2
 8017e26:	005b      	lsls	r3, r3, #1
 8017e28:	4413      	add	r3, r2
 8017e2a:	009b      	lsls	r3, r3, #2
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f003 fcfb 	bl	801b828 <malloc>
 8017e32:	4603      	mov	r3, r0
}
 8017e34:	4618      	mov	r0, r3
 8017e36:	3708      	adds	r7, #8
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bd80      	pop	{r7, pc}

08017e3c <AllocatePages>:

Menu_Page* AllocatePages(uint8_t num) {
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b082      	sub	sp, #8
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	4603      	mov	r3, r0
 8017e44:	71fb      	strb	r3, [r7, #7]
	return (Menu_Page*)malloc(sizeof(Menu_Page)*num);
 8017e46:	79fa      	ldrb	r2, [r7, #7]
 8017e48:	4613      	mov	r3, r2
 8017e4a:	005b      	lsls	r3, r3, #1
 8017e4c:	4413      	add	r3, r2
 8017e4e:	009b      	lsls	r3, r3, #2
 8017e50:	4618      	mov	r0, r3
 8017e52:	f003 fce9 	bl	801b828 <malloc>
 8017e56:	4603      	mov	r3, r0
}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3708      	adds	r7, #8
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}

08017e60 <MENU_Init>:

uint8_t MENU_Init(Menu_HandleTypeDef *hmenu) {
 8017e60:	b590      	push	{r4, r7, lr}
 8017e62:	b089      	sub	sp, #36	@ 0x24
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
	// Initialize the state packet
	hmenu->state_packet = AllocateValueArr(64);
 8017e68:	2040      	movs	r0, #64	@ 0x40
 8017e6a:	f7ff ffa1 	bl	8017db0 <AllocateValueArr>
 8017e6e:	4602      	mov	r2, r0
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	611a      	str	r2, [r3, #16]
	memset(hmenu->state_packet, 0x00, 64);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	691b      	ldr	r3, [r3, #16]
 8017e78:	2240      	movs	r2, #64	@ 0x40
 8017e7a:	2100      	movs	r1, #0
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f004 fae4 	bl	801c44a <memset>

	// Allocate pages
	hmenu->num_pages = 3;
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2203      	movs	r2, #3
 8017e86:	721a      	strb	r2, [r3, #8]
	hmenu->pages = AllocatePages(hmenu->num_pages);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	7a1b      	ldrb	r3, [r3, #8]
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f7ff ffd5 	bl	8017e3c <AllocatePages>
 8017e92:	4602      	mov	r2, r0
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	60da      	str	r2, [r3, #12]

	// PAGE 0 (CAMERA)
	hmenu->pages[0].title = AllocateString("CAMERA");
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	68dc      	ldr	r4, [r3, #12]
 8017e9c:	4893      	ldr	r0, [pc, #588]	@ (80180ec <MENU_Init+0x28c>)
 8017e9e:	f7ff ff95 	bl	8017dcc <AllocateString>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	6023      	str	r3, [r4, #0]

	hmenu->pages[0].num_properties = 3;
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	68db      	ldr	r3, [r3, #12]
 8017eaa:	2203      	movs	r2, #3
 8017eac:	711a      	strb	r2, [r3, #4]
	hmenu->pages[0].properties = AllocateProperties(hmenu->pages[0].num_properties);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	68db      	ldr	r3, [r3, #12]
 8017eb2:	791a      	ldrb	r2, [r3, #4]
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	68dc      	ldr	r4, [r3, #12]
 8017eb8:	4610      	mov	r0, r2
 8017eba:	f7ff ffad 	bl	8017e18 <AllocateProperties>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	60a3      	str	r3, [r4, #8]

	// Camera Quality
	hmenu->pages[0].properties[0].name = AllocateString("QUALITY");
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	68db      	ldr	r3, [r3, #12]
 8017ec6:	689c      	ldr	r4, [r3, #8]
 8017ec8:	4889      	ldr	r0, [pc, #548]	@ (80180f0 <MENU_Init+0x290>)
 8017eca:	f7ff ff7f 	bl	8017dcc <AllocateString>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].packet_byte = OP_CAMERA_QUALITY;
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	68db      	ldr	r3, [r3, #12]
 8017ed6:	689b      	ldr	r3, [r3, #8]
 8017ed8:	2201      	movs	r2, #1
 8017eda:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[0].num_options = 4;
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	68db      	ldr	r3, [r3, #12]
 8017ee0:	689b      	ldr	r3, [r3, #8]
 8017ee2:	2204      	movs	r2, #4
 8017ee4:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[0].option_names = AllocateStringArr(hmenu->pages[0].properties[0].num_options);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	68db      	ldr	r3, [r3, #12]
 8017eea:	689b      	ldr	r3, [r3, #8]
 8017eec:	795a      	ldrb	r2, [r3, #5]
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	68db      	ldr	r3, [r3, #12]
 8017ef2:	689c      	ldr	r4, [r3, #8]
 8017ef4:	4610      	mov	r0, r2
 8017ef6:	f7ff ff80 	bl	8017dfa <AllocateStringArr>
 8017efa:	4603      	mov	r3, r0
 8017efc:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[0].option_names[0] = AllocateString("LOW");
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	68db      	ldr	r3, [r3, #12]
 8017f02:	689b      	ldr	r3, [r3, #8]
 8017f04:	689c      	ldr	r4, [r3, #8]
 8017f06:	487b      	ldr	r0, [pc, #492]	@ (80180f4 <MENU_Init+0x294>)
 8017f08:	f7ff ff60 	bl	8017dcc <AllocateString>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[1] = AllocateString("MED");
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	68db      	ldr	r3, [r3, #12]
 8017f14:	689b      	ldr	r3, [r3, #8]
 8017f16:	689b      	ldr	r3, [r3, #8]
 8017f18:	1d1c      	adds	r4, r3, #4
 8017f1a:	4877      	ldr	r0, [pc, #476]	@ (80180f8 <MENU_Init+0x298>)
 8017f1c:	f7ff ff56 	bl	8017dcc <AllocateString>
 8017f20:	4603      	mov	r3, r0
 8017f22:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[2] = AllocateString("HIGH");
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	68db      	ldr	r3, [r3, #12]
 8017f28:	689b      	ldr	r3, [r3, #8]
 8017f2a:	689b      	ldr	r3, [r3, #8]
 8017f2c:	f103 0408 	add.w	r4, r3, #8
 8017f30:	4872      	ldr	r0, [pc, #456]	@ (80180fc <MENU_Init+0x29c>)
 8017f32:	f7ff ff4b 	bl	8017dcc <AllocateString>
 8017f36:	4603      	mov	r3, r0
 8017f38:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[3] = AllocateString("BEST");
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	68db      	ldr	r3, [r3, #12]
 8017f3e:	689b      	ldr	r3, [r3, #8]
 8017f40:	689b      	ldr	r3, [r3, #8]
 8017f42:	f103 040c 	add.w	r4, r3, #12
 8017f46:	486e      	ldr	r0, [pc, #440]	@ (8018100 <MENU_Init+0x2a0>)
 8017f48:	f7ff ff40 	bl	8017dcc <AllocateString>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	6023      	str	r3, [r4, #0]

	// Camera Vertical Shift
	hmenu->pages[0].properties[1].name = AllocateString("SHOW MS");
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	68db      	ldr	r3, [r3, #12]
 8017f54:	689b      	ldr	r3, [r3, #8]
 8017f56:	f103 040c 	add.w	r4, r3, #12
 8017f5a:	486a      	ldr	r0, [pc, #424]	@ (8018104 <MENU_Init+0x2a4>)
 8017f5c:	f7ff ff36 	bl	8017dcc <AllocateString>
 8017f60:	4603      	mov	r3, r0
 8017f62:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].packet_byte = OP_CAMERA_FRAMETIME;
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	68db      	ldr	r3, [r3, #12]
 8017f68:	689b      	ldr	r3, [r3, #8]
 8017f6a:	330c      	adds	r3, #12
 8017f6c:	2202      	movs	r2, #2
 8017f6e:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[1].num_options = 2;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	68db      	ldr	r3, [r3, #12]
 8017f74:	689b      	ldr	r3, [r3, #8]
 8017f76:	330c      	adds	r3, #12
 8017f78:	2202      	movs	r2, #2
 8017f7a:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[1].option_names = AllocateStringArr(hmenu->pages[0].properties[1].num_options);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	689b      	ldr	r3, [r3, #8]
 8017f82:	330c      	adds	r3, #12
 8017f84:	795a      	ldrb	r2, [r3, #5]
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	68db      	ldr	r3, [r3, #12]
 8017f8a:	689b      	ldr	r3, [r3, #8]
 8017f8c:	f103 040c 	add.w	r4, r3, #12
 8017f90:	4610      	mov	r0, r2
 8017f92:	f7ff ff32 	bl	8017dfa <AllocateStringArr>
 8017f96:	4603      	mov	r3, r0
 8017f98:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[1].option_names[0] = AllocateString("[\x83\x83]");
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	68db      	ldr	r3, [r3, #12]
 8017f9e:	689b      	ldr	r3, [r3, #8]
 8017fa0:	330c      	adds	r3, #12
 8017fa2:	689c      	ldr	r4, [r3, #8]
 8017fa4:	4858      	ldr	r0, [pc, #352]	@ (8018108 <MENU_Init+0x2a8>)
 8017fa6:	f7ff ff11 	bl	8017dcc <AllocateString>
 8017faa:	4603      	mov	r3, r0
 8017fac:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].option_names[1] = AllocateString("[\x80\x80]");
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	68db      	ldr	r3, [r3, #12]
 8017fb2:	689b      	ldr	r3, [r3, #8]
 8017fb4:	330c      	adds	r3, #12
 8017fb6:	689b      	ldr	r3, [r3, #8]
 8017fb8:	1d1c      	adds	r4, r3, #4
 8017fba:	4854      	ldr	r0, [pc, #336]	@ (801810c <MENU_Init+0x2ac>)
 8017fbc:	f7ff ff06 	bl	8017dcc <AllocateString>
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	6023      	str	r3, [r4, #0]

	// Camera Mode
	hmenu->pages[0].properties[2].name = AllocateString("ENCODING");
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	68db      	ldr	r3, [r3, #12]
 8017fc8:	689b      	ldr	r3, [r3, #8]
 8017fca:	f103 0418 	add.w	r4, r3, #24
 8017fce:	4850      	ldr	r0, [pc, #320]	@ (8018110 <MENU_Init+0x2b0>)
 8017fd0:	f7ff fefc 	bl	8017dcc <AllocateString>
 8017fd4:	4603      	mov	r3, r0
 8017fd6:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[2].packet_byte = OP_CAMERA_ENCODING;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	68db      	ldr	r3, [r3, #12]
 8017fdc:	689b      	ldr	r3, [r3, #8]
 8017fde:	3318      	adds	r3, #24
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[2].num_options = 2;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	68db      	ldr	r3, [r3, #12]
 8017fe8:	689b      	ldr	r3, [r3, #8]
 8017fea:	3318      	adds	r3, #24
 8017fec:	2202      	movs	r2, #2
 8017fee:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[2].option_names = AllocateStringArr(hmenu->pages[0].properties[2].num_options);
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	68db      	ldr	r3, [r3, #12]
 8017ff4:	689b      	ldr	r3, [r3, #8]
 8017ff6:	3318      	adds	r3, #24
 8017ff8:	795a      	ldrb	r2, [r3, #5]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	68db      	ldr	r3, [r3, #12]
 8017ffe:	689b      	ldr	r3, [r3, #8]
 8018000:	f103 0418 	add.w	r4, r3, #24
 8018004:	4610      	mov	r0, r2
 8018006:	f7ff fef8 	bl	8017dfa <AllocateStringArr>
 801800a:	4603      	mov	r3, r0
 801800c:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[2].option_names[0] = AllocateString("JPEG");
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	68db      	ldr	r3, [r3, #12]
 8018012:	689b      	ldr	r3, [r3, #8]
 8018014:	3318      	adds	r3, #24
 8018016:	689c      	ldr	r4, [r3, #8]
 8018018:	483e      	ldr	r0, [pc, #248]	@ (8018114 <MENU_Init+0x2b4>)
 801801a:	f7ff fed7 	bl	8017dcc <AllocateString>
 801801e:	4603      	mov	r3, r0
 8018020:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[2].option_names[1] = AllocateString("RAW");
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	68db      	ldr	r3, [r3, #12]
 8018026:	689b      	ldr	r3, [r3, #8]
 8018028:	3318      	adds	r3, #24
 801802a:	689b      	ldr	r3, [r3, #8]
 801802c:	1d1c      	adds	r4, r3, #4
 801802e:	483a      	ldr	r0, [pc, #232]	@ (8018118 <MENU_Init+0x2b8>)
 8018030:	f7ff fecc 	bl	8017dcc <AllocateString>
 8018034:	4603      	mov	r3, r0
 8018036:	6023      	str	r3, [r4, #0]

	// PAGE 1 (LIGHTS)
	hmenu->pages[1].title = AllocateString("LIGHTING");
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	68db      	ldr	r3, [r3, #12]
 801803c:	f103 040c 	add.w	r4, r3, #12
 8018040:	4836      	ldr	r0, [pc, #216]	@ (801811c <MENU_Init+0x2bc>)
 8018042:	f7ff fec3 	bl	8017dcc <AllocateString>
 8018046:	4603      	mov	r3, r0
 8018048:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].num_properties = 4;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	68db      	ldr	r3, [r3, #12]
 801804e:	330c      	adds	r3, #12
 8018050:	2204      	movs	r2, #4
 8018052:	711a      	strb	r2, [r3, #4]
	hmenu->pages[1].properties = AllocateProperties(hmenu->pages[1].num_properties);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	68db      	ldr	r3, [r3, #12]
 8018058:	330c      	adds	r3, #12
 801805a:	791a      	ldrb	r2, [r3, #4]
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	68db      	ldr	r3, [r3, #12]
 8018060:	f103 040c 	add.w	r4, r3, #12
 8018064:	4610      	mov	r0, r2
 8018066:	f7ff fed7 	bl	8017e18 <AllocateProperties>
 801806a:	4603      	mov	r3, r0
 801806c:	60a3      	str	r3, [r4, #8]

	// Pre-allocate the percent strings
	uint8_t *percentStr[5];
	percentStr[0] = AllocateString("[\x80\x80\x80\x80]");
 801806e:	482c      	ldr	r0, [pc, #176]	@ (8018120 <MENU_Init+0x2c0>)
 8018070:	f7ff feac 	bl	8017dcc <AllocateString>
 8018074:	4603      	mov	r3, r0
 8018076:	60bb      	str	r3, [r7, #8]
	percentStr[1] = AllocateString("[\x83\x80\x80\x80]");
 8018078:	482a      	ldr	r0, [pc, #168]	@ (8018124 <MENU_Init+0x2c4>)
 801807a:	f7ff fea7 	bl	8017dcc <AllocateString>
 801807e:	4603      	mov	r3, r0
 8018080:	60fb      	str	r3, [r7, #12]
	percentStr[2] = AllocateString("[\x83\x83\x80\x80]");
 8018082:	4829      	ldr	r0, [pc, #164]	@ (8018128 <MENU_Init+0x2c8>)
 8018084:	f7ff fea2 	bl	8017dcc <AllocateString>
 8018088:	4603      	mov	r3, r0
 801808a:	613b      	str	r3, [r7, #16]
	percentStr[3] = AllocateString("[\x83\x83\x83\x80]");
 801808c:	4827      	ldr	r0, [pc, #156]	@ (801812c <MENU_Init+0x2cc>)
 801808e:	f7ff fe9d 	bl	8017dcc <AllocateString>
 8018092:	4603      	mov	r3, r0
 8018094:	617b      	str	r3, [r7, #20]
	percentStr[4] = AllocateString("[\x83\x83\x83\x83]");
 8018096:	4826      	ldr	r0, [pc, #152]	@ (8018130 <MENU_Init+0x2d0>)
 8018098:	f7ff fe98 	bl	8017dcc <AllocateString>
 801809c:	4603      	mov	r3, r0
 801809e:	61bb      	str	r3, [r7, #24]

	hmenu->pages[1].properties[0].name = AllocateString("HEADLIGHTS");
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	68db      	ldr	r3, [r3, #12]
 80180a4:	330c      	adds	r3, #12
 80180a6:	689c      	ldr	r4, [r3, #8]
 80180a8:	4822      	ldr	r0, [pc, #136]	@ (8018134 <MENU_Init+0x2d4>)
 80180aa:	f7ff fe8f 	bl	8017dcc <AllocateString>
 80180ae:	4603      	mov	r3, r0
 80180b0:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].packet_byte = 3;
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	68db      	ldr	r3, [r3, #12]
 80180b6:	330c      	adds	r3, #12
 80180b8:	689b      	ldr	r3, [r3, #8]
 80180ba:	2203      	movs	r2, #3
 80180bc:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[0].num_options = 5;
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	68db      	ldr	r3, [r3, #12]
 80180c2:	330c      	adds	r3, #12
 80180c4:	689b      	ldr	r3, [r3, #8]
 80180c6:	2205      	movs	r2, #5
 80180c8:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[0].option_names = AllocateStringArr(hmenu->pages[1].properties[0].num_options);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	68db      	ldr	r3, [r3, #12]
 80180ce:	330c      	adds	r3, #12
 80180d0:	689b      	ldr	r3, [r3, #8]
 80180d2:	795a      	ldrb	r2, [r3, #5]
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	68db      	ldr	r3, [r3, #12]
 80180d8:	330c      	adds	r3, #12
 80180da:	689c      	ldr	r4, [r3, #8]
 80180dc:	4610      	mov	r0, r2
 80180de:	f7ff fe8c 	bl	8017dfa <AllocateStringArr>
 80180e2:	4603      	mov	r3, r0
 80180e4:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 80180e6:	2300      	movs	r3, #0
 80180e8:	77fb      	strb	r3, [r7, #31]
 80180ea:	e037      	b.n	801815c <MENU_Init+0x2fc>
 80180ec:	0801ea70 	.word	0x0801ea70
 80180f0:	0801ea78 	.word	0x0801ea78
 80180f4:	0801ea80 	.word	0x0801ea80
 80180f8:	0801ea84 	.word	0x0801ea84
 80180fc:	0801ea88 	.word	0x0801ea88
 8018100:	0801ea90 	.word	0x0801ea90
 8018104:	0801ea98 	.word	0x0801ea98
 8018108:	0801eaa0 	.word	0x0801eaa0
 801810c:	0801eaa8 	.word	0x0801eaa8
 8018110:	0801eab0 	.word	0x0801eab0
 8018114:	0801eabc 	.word	0x0801eabc
 8018118:	0801eac4 	.word	0x0801eac4
 801811c:	0801eac8 	.word	0x0801eac8
 8018120:	0801ead4 	.word	0x0801ead4
 8018124:	0801eadc 	.word	0x0801eadc
 8018128:	0801eae4 	.word	0x0801eae4
 801812c:	0801eaec 	.word	0x0801eaec
 8018130:	0801eaf4 	.word	0x0801eaf4
 8018134:	0801eafc 	.word	0x0801eafc
		hmenu->pages[1].properties[0].option_names[i] = percentStr[i];
 8018138:	7ffb      	ldrb	r3, [r7, #31]
 801813a:	687a      	ldr	r2, [r7, #4]
 801813c:	68d2      	ldr	r2, [r2, #12]
 801813e:	320c      	adds	r2, #12
 8018140:	6892      	ldr	r2, [r2, #8]
 8018142:	6891      	ldr	r1, [r2, #8]
 8018144:	7ffa      	ldrb	r2, [r7, #31]
 8018146:	0092      	lsls	r2, r2, #2
 8018148:	440a      	add	r2, r1
 801814a:	009b      	lsls	r3, r3, #2
 801814c:	3320      	adds	r3, #32
 801814e:	443b      	add	r3, r7
 8018150:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8018154:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 8018156:	7ffb      	ldrb	r3, [r7, #31]
 8018158:	3301      	adds	r3, #1
 801815a:	77fb      	strb	r3, [r7, #31]
 801815c:	7ffb      	ldrb	r3, [r7, #31]
 801815e:	2b04      	cmp	r3, #4
 8018160:	d9ea      	bls.n	8018138 <MENU_Init+0x2d8>

	hmenu->pages[1].properties[1].name = AllocateString("INT. R");
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	68db      	ldr	r3, [r3, #12]
 8018166:	330c      	adds	r3, #12
 8018168:	689b      	ldr	r3, [r3, #8]
 801816a:	f103 040c 	add.w	r4, r3, #12
 801816e:	4864      	ldr	r0, [pc, #400]	@ (8018300 <MENU_Init+0x4a0>)
 8018170:	f7ff fe2c 	bl	8017dcc <AllocateString>
 8018174:	4603      	mov	r3, r0
 8018176:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].packet_byte = 4;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	68db      	ldr	r3, [r3, #12]
 801817c:	330c      	adds	r3, #12
 801817e:	689b      	ldr	r3, [r3, #8]
 8018180:	330c      	adds	r3, #12
 8018182:	2204      	movs	r2, #4
 8018184:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[1].num_options = 5;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	68db      	ldr	r3, [r3, #12]
 801818a:	330c      	adds	r3, #12
 801818c:	689b      	ldr	r3, [r3, #8]
 801818e:	330c      	adds	r3, #12
 8018190:	2205      	movs	r2, #5
 8018192:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[1].option_names = AllocateStringArr(hmenu->pages[1].properties[1].num_options);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	68db      	ldr	r3, [r3, #12]
 8018198:	330c      	adds	r3, #12
 801819a:	689b      	ldr	r3, [r3, #8]
 801819c:	330c      	adds	r3, #12
 801819e:	795a      	ldrb	r2, [r3, #5]
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	68db      	ldr	r3, [r3, #12]
 80181a4:	330c      	adds	r3, #12
 80181a6:	689b      	ldr	r3, [r3, #8]
 80181a8:	f103 040c 	add.w	r4, r3, #12
 80181ac:	4610      	mov	r0, r2
 80181ae:	f7ff fe24 	bl	8017dfa <AllocateStringArr>
 80181b2:	4603      	mov	r3, r0
 80181b4:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 80181b6:	2300      	movs	r3, #0
 80181b8:	77bb      	strb	r3, [r7, #30]
 80181ba:	e012      	b.n	80181e2 <MENU_Init+0x382>
		hmenu->pages[1].properties[1].option_names[i] = percentStr[i];
 80181bc:	7fbb      	ldrb	r3, [r7, #30]
 80181be:	687a      	ldr	r2, [r7, #4]
 80181c0:	68d2      	ldr	r2, [r2, #12]
 80181c2:	320c      	adds	r2, #12
 80181c4:	6892      	ldr	r2, [r2, #8]
 80181c6:	320c      	adds	r2, #12
 80181c8:	6891      	ldr	r1, [r2, #8]
 80181ca:	7fba      	ldrb	r2, [r7, #30]
 80181cc:	0092      	lsls	r2, r2, #2
 80181ce:	440a      	add	r2, r1
 80181d0:	009b      	lsls	r3, r3, #2
 80181d2:	3320      	adds	r3, #32
 80181d4:	443b      	add	r3, r7
 80181d6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80181da:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 80181dc:	7fbb      	ldrb	r3, [r7, #30]
 80181de:	3301      	adds	r3, #1
 80181e0:	77bb      	strb	r3, [r7, #30]
 80181e2:	7fbb      	ldrb	r3, [r7, #30]
 80181e4:	2b04      	cmp	r3, #4
 80181e6:	d9e9      	bls.n	80181bc <MENU_Init+0x35c>

	hmenu->pages[1].properties[2].name = AllocateString("INT. G");
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	68db      	ldr	r3, [r3, #12]
 80181ec:	330c      	adds	r3, #12
 80181ee:	689b      	ldr	r3, [r3, #8]
 80181f0:	f103 0418 	add.w	r4, r3, #24
 80181f4:	4843      	ldr	r0, [pc, #268]	@ (8018304 <MENU_Init+0x4a4>)
 80181f6:	f7ff fde9 	bl	8017dcc <AllocateString>
 80181fa:	4603      	mov	r3, r0
 80181fc:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].packet_byte = 5;
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	68db      	ldr	r3, [r3, #12]
 8018202:	330c      	adds	r3, #12
 8018204:	689b      	ldr	r3, [r3, #8]
 8018206:	3318      	adds	r3, #24
 8018208:	2205      	movs	r2, #5
 801820a:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[2].num_options = 5;
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	68db      	ldr	r3, [r3, #12]
 8018210:	330c      	adds	r3, #12
 8018212:	689b      	ldr	r3, [r3, #8]
 8018214:	3318      	adds	r3, #24
 8018216:	2205      	movs	r2, #5
 8018218:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[2].option_names = AllocateStringArr(hmenu->pages[1].properties[2].num_options);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	68db      	ldr	r3, [r3, #12]
 801821e:	330c      	adds	r3, #12
 8018220:	689b      	ldr	r3, [r3, #8]
 8018222:	3318      	adds	r3, #24
 8018224:	795a      	ldrb	r2, [r3, #5]
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	68db      	ldr	r3, [r3, #12]
 801822a:	330c      	adds	r3, #12
 801822c:	689b      	ldr	r3, [r3, #8]
 801822e:	f103 0418 	add.w	r4, r3, #24
 8018232:	4610      	mov	r0, r2
 8018234:	f7ff fde1 	bl	8017dfa <AllocateStringArr>
 8018238:	4603      	mov	r3, r0
 801823a:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 801823c:	2300      	movs	r3, #0
 801823e:	777b      	strb	r3, [r7, #29]
 8018240:	e012      	b.n	8018268 <MENU_Init+0x408>
		hmenu->pages[1].properties[2].option_names[i] = percentStr[i];
 8018242:	7f7b      	ldrb	r3, [r7, #29]
 8018244:	687a      	ldr	r2, [r7, #4]
 8018246:	68d2      	ldr	r2, [r2, #12]
 8018248:	320c      	adds	r2, #12
 801824a:	6892      	ldr	r2, [r2, #8]
 801824c:	3218      	adds	r2, #24
 801824e:	6891      	ldr	r1, [r2, #8]
 8018250:	7f7a      	ldrb	r2, [r7, #29]
 8018252:	0092      	lsls	r2, r2, #2
 8018254:	440a      	add	r2, r1
 8018256:	009b      	lsls	r3, r3, #2
 8018258:	3320      	adds	r3, #32
 801825a:	443b      	add	r3, r7
 801825c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8018260:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 8018262:	7f7b      	ldrb	r3, [r7, #29]
 8018264:	3301      	adds	r3, #1
 8018266:	777b      	strb	r3, [r7, #29]
 8018268:	7f7b      	ldrb	r3, [r7, #29]
 801826a:	2b04      	cmp	r3, #4
 801826c:	d9e9      	bls.n	8018242 <MENU_Init+0x3e2>

	hmenu->pages[1].properties[3].name = AllocateString("INT. B");
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	68db      	ldr	r3, [r3, #12]
 8018272:	330c      	adds	r3, #12
 8018274:	689b      	ldr	r3, [r3, #8]
 8018276:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801827a:	4823      	ldr	r0, [pc, #140]	@ (8018308 <MENU_Init+0x4a8>)
 801827c:	f7ff fda6 	bl	8017dcc <AllocateString>
 8018280:	4603      	mov	r3, r0
 8018282:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].packet_byte = 6;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	68db      	ldr	r3, [r3, #12]
 8018288:	330c      	adds	r3, #12
 801828a:	689b      	ldr	r3, [r3, #8]
 801828c:	3324      	adds	r3, #36	@ 0x24
 801828e:	2206      	movs	r2, #6
 8018290:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[3].num_options = 5;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	68db      	ldr	r3, [r3, #12]
 8018296:	330c      	adds	r3, #12
 8018298:	689b      	ldr	r3, [r3, #8]
 801829a:	3324      	adds	r3, #36	@ 0x24
 801829c:	2205      	movs	r2, #5
 801829e:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[3].option_names = AllocateStringArr(hmenu->pages[1].properties[3].num_options);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	68db      	ldr	r3, [r3, #12]
 80182a4:	330c      	adds	r3, #12
 80182a6:	689b      	ldr	r3, [r3, #8]
 80182a8:	3324      	adds	r3, #36	@ 0x24
 80182aa:	795a      	ldrb	r2, [r3, #5]
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	330c      	adds	r3, #12
 80182b2:	689b      	ldr	r3, [r3, #8]
 80182b4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80182b8:	4610      	mov	r0, r2
 80182ba:	f7ff fd9e 	bl	8017dfa <AllocateStringArr>
 80182be:	4603      	mov	r3, r0
 80182c0:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 80182c2:	2300      	movs	r3, #0
 80182c4:	773b      	strb	r3, [r7, #28]
 80182c6:	e012      	b.n	80182ee <MENU_Init+0x48e>
		hmenu->pages[1].properties[3].option_names[i] = percentStr[i];
 80182c8:	7f3b      	ldrb	r3, [r7, #28]
 80182ca:	687a      	ldr	r2, [r7, #4]
 80182cc:	68d2      	ldr	r2, [r2, #12]
 80182ce:	320c      	adds	r2, #12
 80182d0:	6892      	ldr	r2, [r2, #8]
 80182d2:	3224      	adds	r2, #36	@ 0x24
 80182d4:	6891      	ldr	r1, [r2, #8]
 80182d6:	7f3a      	ldrb	r2, [r7, #28]
 80182d8:	0092      	lsls	r2, r2, #2
 80182da:	440a      	add	r2, r1
 80182dc:	009b      	lsls	r3, r3, #2
 80182de:	3320      	adds	r3, #32
 80182e0:	443b      	add	r3, r7
 80182e2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80182e6:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 80182e8:	7f3b      	ldrb	r3, [r7, #28]
 80182ea:	3301      	adds	r3, #1
 80182ec:	773b      	strb	r3, [r7, #28]
 80182ee:	7f3b      	ldrb	r3, [r7, #28]
 80182f0:	2b04      	cmp	r3, #4
 80182f2:	d9e9      	bls.n	80182c8 <MENU_Init+0x468>

	return 0;
 80182f4:	2300      	movs	r3, #0
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3724      	adds	r7, #36	@ 0x24
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd90      	pop	{r4, r7, pc}
 80182fe:	bf00      	nop
 8018300:	0801eb08 	.word	0x0801eb08
 8018304:	0801eb10 	.word	0x0801eb10
 8018308:	0801eb18 	.word	0x0801eb18

0801830c <MENU_Draw>:

uint8_t MENU_Draw(Menu_HandleTypeDef *hmenu, uint32_t delta_t) {
 801830c:	b5b0      	push	{r4, r5, r7, lr}
 801830e:	b092      	sub	sp, #72	@ 0x48
 8018310:	af02      	add	r7, sp, #8
 8018312:	6078      	str	r0, [r7, #4]
 8018314:	6039      	str	r1, [r7, #0]
	// Do the animations
	hmenu->page_anim++;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	7d5b      	ldrb	r3, [r3, #21]
 801831a:	3301      	adds	r3, #1
 801831c:	b2da      	uxtb	r2, r3
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	755a      	strb	r2, [r3, #21]
	if (hmenu->page_anim == 0xFF)
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	7d5b      	ldrb	r3, [r3, #21]
 8018326:	2bff      	cmp	r3, #255	@ 0xff
 8018328:	d102      	bne.n	8018330 <MENU_Draw+0x24>
		hmenu->page_anim = 0xF1; // Loop the last 16 animation frames
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	22f1      	movs	r2, #241	@ 0xf1
 801832e:	755a      	strb	r2, [r3, #21]


	if (hmenu->property_anim != 0xFF)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	7e1b      	ldrb	r3, [r3, #24]
 8018334:	2bff      	cmp	r3, #255	@ 0xff
 8018336:	d005      	beq.n	8018344 <MENU_Draw+0x38>
		hmenu->property_anim++;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	7e1b      	ldrb	r3, [r3, #24]
 801833c:	3301      	adds	r3, #1
 801833e:	b2da      	uxtb	r2, r3
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	761a      	strb	r2, [r3, #24]

	if (hmenu->current_page == 0) {
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	7d1b      	ldrb	r3, [r3, #20]
 8018348:	2b00      	cmp	r3, #0
 801834a:	f040 82e0 	bne.w	801890e <MENU_Draw+0x602>
		// STATUS PAGE, SPECIAL RULES
		uint8_t tmp_msg[20];

		// Draw the title CAR on the left screen
		hmenu->ssdL_handle->str_cursor = (128 - 7*6);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	2256      	movs	r2, #86	@ 0x56
 8018354:	821a      	strh	r2, [r3, #16]
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	6819      	ldr	r1, [r3, #0]
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	7d5b      	ldrb	r3, [r3, #21]
 801835e:	2200      	movs	r2, #0
 8018360:	9200      	str	r2, [sp, #0]
 8018362:	4a79      	ldr	r2, [pc, #484]	@ (8018548 <MENU_Draw+0x23c>)
 8018364:	6878      	ldr	r0, [r7, #4]
 8018366:	f000 fcdf 	bl	8018d28 <MENU_AnimateString>
				"VEHICLE",
				hmenu->page_anim, 0);

		// Draw the left screen stats

		if (hmenu->alert_voltage_car && (hmenu->page_anim % 4) >= 2)
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8018370:	2b00      	cmp	r3, #0
 8018372:	d00a      	beq.n	801838a <MENU_Draw+0x7e>
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	7d5b      	ldrb	r3, [r3, #21]
 8018378:	f003 0302 	and.w	r3, r3, #2
 801837c:	b2db      	uxtb	r3, r3
 801837e:	2b00      	cmp	r3, #0
 8018380:	d003      	beq.n	801838a <MENU_Draw+0x7e>
					hmenu->ssdL_handle->draw_inverted = 1;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	2201      	movs	r2, #1
 8018388:	749a      	strb	r2, [r3, #18]

		hmenu->ssdL_handle->str_cursor = 16 + 2*128;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8018392:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "% 5.2f V  ", hmenu->voltage_car);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801839a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801839e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80183a2:	ec53 2b17 	vmov	r2, r3, d7
 80183a6:	4969      	ldr	r1, [pc, #420]	@ (801854c <MENU_Draw+0x240>)
 80183a8:	f003 ffea 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6819      	ldr	r1, [r3, #0]
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	7d5b      	ldrb	r3, [r3, #21]
 80183b4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80183b8:	2002      	movs	r0, #2
 80183ba:	9000      	str	r0, [sp, #0]
 80183bc:	6878      	ldr	r0, [r7, #4]
 80183be:	f000 fcb3 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 2);

		hmenu->ssdL_handle->draw_inverted = 0;
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	2200      	movs	r2, #0
 80183c8:	749a      	strb	r2, [r3, #18]
		if (hmenu->alert_current_car && (hmenu->page_anim % 4) >= 2)
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d00a      	beq.n	80183ea <MENU_Draw+0xde>
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	7d5b      	ldrb	r3, [r3, #21]
 80183d8:	f003 0302 	and.w	r3, r3, #2
 80183dc:	b2db      	uxtb	r3, r3
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d003      	beq.n	80183ea <MENU_Draw+0xde>
			hmenu->ssdL_handle->draw_inverted = 1;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	2201      	movs	r2, #1
 80183e8:	749a      	strb	r2, [r3, #18]

		hmenu->ssdL_handle->str_cursor = 16 + 3*128;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80183f2:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "% 5.2f A ", hmenu->current_car);
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80183fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80183fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8018402:	ec53 2b17 	vmov	r2, r3, d7
 8018406:	4952      	ldr	r1, [pc, #328]	@ (8018550 <MENU_Draw+0x244>)
 8018408:	f003 ffba 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	6819      	ldr	r1, [r3, #0]
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	7d5b      	ldrb	r3, [r3, #21]
 8018414:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018418:	2003      	movs	r0, #3
 801841a:	9000      	str	r0, [sp, #0]
 801841c:	6878      	ldr	r0, [r7, #4]
 801841e:	f000 fc83 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 3);

		hmenu->ssdL_handle->draw_inverted = 0;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	2200      	movs	r2, #0
 8018428:	749a      	strb	r2, [r3, #18]

		hmenu->ssdL_handle->str_cursor = 60 + 2*128;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8018432:	821a      	strh	r2, [r3, #16]
		hmenu->ssdL_handle->draw_scale = 1;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	2201      	movs	r2, #1
 801843a:	74da      	strb	r2, [r3, #19]
		sprintf(tmp_msg, "% 4.0f", hmenu->voltage_car*hmenu->current_car);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	edd3 7a08 	vldr	s15, [r3, #32]
 8018448:	ee67 7a27 	vmul.f32	s15, s14, s15
 801844c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018450:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8018454:	ec53 2b17 	vmov	r2, r3, d7
 8018458:	493e      	ldr	r1, [pc, #248]	@ (8018554 <MENU_Draw+0x248>)
 801845a:	f003 ff91 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	6819      	ldr	r1, [r3, #0]
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	7d5b      	ldrb	r3, [r3, #21]
 8018466:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801846a:	2006      	movs	r0, #6
 801846c:	9000      	str	r0, [sp, #0]
 801846e:	6878      	ldr	r0, [r7, #4]
 8018470:	f000 fc5a 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 6);

		hmenu->ssdL_handle->str_cursor = 114 + 2*128;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	f44f 72b9 	mov.w	r2, #370	@ 0x172
 801847c:	821a      	strh	r2, [r3, #16]
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6819      	ldr	r1, [r3, #0]
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	7d5b      	ldrb	r3, [r3, #21]
 8018486:	220a      	movs	r2, #10
 8018488:	9200      	str	r2, [sp, #0]
 801848a:	4a33      	ldr	r2, [pc, #204]	@ (8018558 <MENU_Draw+0x24c>)
 801848c:	6878      	ldr	r0, [r7, #4]
 801848e:	f000 fc4b 	bl	8018d28 <MENU_AnimateString>
						"W",
						hmenu->page_anim, 10);

		hmenu->ssdL_handle->draw_scale = 0;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	2200      	movs	r2, #0
 8018498:	74da      	strb	r2, [r3, #19]

		// BATTERY

		hmenu->ssdL_handle->str_cursor = 16 + 5*128;
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80184a2:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "BAT:  % 3.0f ", hmenu->bat_perc_car);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80184aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80184ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80184b2:	ec53 2b17 	vmov	r2, r3, d7
 80184b6:	4929      	ldr	r1, [pc, #164]	@ (801855c <MENU_Draw+0x250>)
 80184b8:	f003 ff62 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	6819      	ldr	r1, [r3, #0]
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	7d5b      	ldrb	r3, [r3, #21]
 80184c4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80184c8:	2006      	movs	r0, #6
 80184ca:	9000      	str	r0, [sp, #0]
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f000 fc2b 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 6);


		if (hmenu->bat_time_car >= 0) {
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80184d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80184dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184e0:	db42      	blt.n	8018568 <MENU_Draw+0x25c>
			hmenu->ssdL_handle->str_cursor = 16 + 6*128;
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80184ea:	821a      	strh	r2, [r3, #16]
			sprintf(tmp_msg, "TIME: % 3.0f ", hmenu->bat_time_car);
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80184f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80184f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80184fa:	ec53 2b17 	vmov	r2, r3, d7
 80184fe:	4918      	ldr	r1, [pc, #96]	@ (8018560 <MENU_Draw+0x254>)
 8018500:	f003 ff3e 	bl	801c380 <siprintf>
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	6819      	ldr	r1, [r3, #0]
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	7d5b      	ldrb	r3, [r3, #21]
 801850c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018510:	2008      	movs	r0, #8
 8018512:	9000      	str	r0, [sp, #0]
 8018514:	6878      	ldr	r0, [r7, #4]
 8018516:	f000 fc07 	bl	8018d28 <MENU_AnimateString>
							tmp_msg,
							hmenu->page_anim, 8);

			hmenu->ssdL_handle->str_cursor = 16 + 7*128;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	f44f 7264 	mov.w	r2, #912	@ 0x390
 8018522:	821a      	strh	r2, [r3, #16]
			sprintf(tmp_msg, "CHARGE");
 8018524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018528:	490e      	ldr	r1, [pc, #56]	@ (8018564 <MENU_Draw+0x258>)
 801852a:	4618      	mov	r0, r3
 801852c:	f003 ff28 	bl	801c380 <siprintf>
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6819      	ldr	r1, [r3, #0]
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	7d5b      	ldrb	r3, [r3, #21]
 8018538:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801853c:	200a      	movs	r0, #10
 801853e:	9000      	str	r0, [sp, #0]
 8018540:	6878      	ldr	r0, [r7, #4]
 8018542:	f000 fbf1 	bl	8018d28 <MENU_AnimateString>
 8018546:	e043      	b.n	80185d0 <MENU_Draw+0x2c4>
 8018548:	0801eb20 	.word	0x0801eb20
 801854c:	0801eb28 	.word	0x0801eb28
 8018550:	0801eb34 	.word	0x0801eb34
 8018554:	0801eb40 	.word	0x0801eb40
 8018558:	0801eb48 	.word	0x0801eb48
 801855c:	0801eb4c 	.word	0x0801eb4c
 8018560:	0801eb5c 	.word	0x0801eb5c
 8018564:	0801eb6c 	.word	0x0801eb6c
						tmp_msg,
						hmenu->page_anim, 10);
		}
		else {
			hmenu->ssdL_handle->str_cursor = 16 + 6*128;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8018570:	821a      	strh	r2, [r3, #16]
			sprintf(tmp_msg, "TIME: % 3.0f ", -hmenu->bat_time_car);
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8018578:	eef1 7a67 	vneg.f32	s15, s15
 801857c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018580:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8018584:	ec53 2b17 	vmov	r2, r3, d7
 8018588:	49a1      	ldr	r1, [pc, #644]	@ (8018810 <MENU_Draw+0x504>)
 801858a:	f003 fef9 	bl	801c380 <siprintf>
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	6819      	ldr	r1, [r3, #0]
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	7d5b      	ldrb	r3, [r3, #21]
 8018596:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801859a:	2008      	movs	r0, #8
 801859c:	9000      	str	r0, [sp, #0]
 801859e:	6878      	ldr	r0, [r7, #4]
 80185a0:	f000 fbc2 	bl	8018d28 <MENU_AnimateString>
							tmp_msg,
							hmenu->page_anim, 8);

			hmenu->ssdL_handle->str_cursor = 16 + 7*128;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	f44f 7264 	mov.w	r2, #912	@ 0x390
 80185ac:	821a      	strh	r2, [r3, #16]
			sprintf(tmp_msg, "DISCHARGE");
 80185ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80185b2:	4998      	ldr	r1, [pc, #608]	@ (8018814 <MENU_Draw+0x508>)
 80185b4:	4618      	mov	r0, r3
 80185b6:	f003 fee3 	bl	801c380 <siprintf>
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	6819      	ldr	r1, [r3, #0]
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	7d5b      	ldrb	r3, [r3, #21]
 80185c2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80185c6:	200a      	movs	r0, #10
 80185c8:	9000      	str	r0, [sp, #0]
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f000 fbac 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 10);
		}

		// Draw the title CON on the right screen
		hmenu->ssdR_handle->str_cursor = 0;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	685b      	ldr	r3, [r3, #4]
 80185d4:	2200      	movs	r2, #0
 80185d6:	821a      	strh	r2, [r3, #16]
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	6859      	ldr	r1, [r3, #4]
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	7d5b      	ldrb	r3, [r3, #21]
 80185e0:	2200      	movs	r2, #0
 80185e2:	9200      	str	r2, [sp, #0]
 80185e4:	4a8c      	ldr	r2, [pc, #560]	@ (8018818 <MENU_Draw+0x50c>)
 80185e6:	6878      	ldr	r0, [r7, #4]
 80185e8:	f000 fb9e 	bl	8018d28 <MENU_AnimateString>
				"CONTROLLER",
				hmenu->page_anim, 0);

		// Draw the right screen stats

		if (hmenu->alert_voltage_con && (hmenu->page_anim % ALERT_BLINKFREQ) >= ALERT_BLINKDUTY)
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d00a      	beq.n	801860c <MENU_Draw+0x300>
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	7d5b      	ldrb	r3, [r3, #21]
 80185fa:	f003 0304 	and.w	r3, r3, #4
 80185fe:	b2db      	uxtb	r3, r3
 8018600:	2b00      	cmp	r3, #0
 8018602:	d003      	beq.n	801860c <MENU_Draw+0x300>
			hmenu->ssdR_handle->draw_inverted = 1;
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	685b      	ldr	r3, [r3, #4]
 8018608:	2201      	movs	r2, #1
 801860a:	749a      	strb	r2, [r3, #18]

		hmenu->ssdR_handle->str_cursor = 2*128;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	685b      	ldr	r3, [r3, #4]
 8018610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018614:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "% 5.2f V ", hmenu->voltage_con);
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801861c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018620:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8018624:	ec53 2b17 	vmov	r2, r3, d7
 8018628:	497c      	ldr	r1, [pc, #496]	@ (801881c <MENU_Draw+0x510>)
 801862a:	f003 fea9 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6859      	ldr	r1, [r3, #4]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	7d5b      	ldrb	r3, [r3, #21]
 8018636:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801863a:	2002      	movs	r0, #2
 801863c:	9000      	str	r0, [sp, #0]
 801863e:	6878      	ldr	r0, [r7, #4]
 8018640:	f000 fb72 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 2);

		hmenu->ssdR_handle->draw_inverted = 0;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	685b      	ldr	r3, [r3, #4]
 8018648:	2200      	movs	r2, #0
 801864a:	749a      	strb	r2, [r3, #18]
		if (hmenu->alert_current_con && (hmenu->page_anim % ALERT_BLINKFREQ) >= ALERT_BLINKDUTY)
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018652:	2b00      	cmp	r3, #0
 8018654:	d00a      	beq.n	801866c <MENU_Draw+0x360>
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	7d5b      	ldrb	r3, [r3, #21]
 801865a:	f003 0304 	and.w	r3, r3, #4
 801865e:	b2db      	uxtb	r3, r3
 8018660:	2b00      	cmp	r3, #0
 8018662:	d003      	beq.n	801866c <MENU_Draw+0x360>
			hmenu->ssdR_handle->draw_inverted = 1;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	2201      	movs	r2, #1
 801866a:	749a      	strb	r2, [r3, #18]

		hmenu->ssdR_handle->str_cursor = 3*128;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	685b      	ldr	r3, [r3, #4]
 8018670:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8018674:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "% 5.2f A ", hmenu->current_con);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	edd3 7a07 	vldr	s15, [r3, #28]
 801867c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018680:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8018684:	ec53 2b17 	vmov	r2, r3, d7
 8018688:	4965      	ldr	r1, [pc, #404]	@ (8018820 <MENU_Draw+0x514>)
 801868a:	f003 fe79 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	6859      	ldr	r1, [r3, #4]
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	7d5b      	ldrb	r3, [r3, #21]
 8018696:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801869a:	2003      	movs	r0, #3
 801869c:	9000      	str	r0, [sp, #0]
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f000 fb42 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 3);

		hmenu->ssdR_handle->draw_inverted = 0;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	2200      	movs	r2, #0
 80186aa:	749a      	strb	r2, [r3, #18]

		hmenu->ssdR_handle->str_cursor = 44 + 2*128;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	685b      	ldr	r3, [r3, #4]
 80186b0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80186b4:	821a      	strh	r2, [r3, #16]
		hmenu->ssdR_handle->draw_scale = 1;
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	685b      	ldr	r3, [r3, #4]
 80186ba:	2201      	movs	r2, #1
 80186bc:	74da      	strb	r2, [r3, #19]
		sprintf(tmp_msg, "% 4.0f", hmenu->voltage_con*hmenu->current_con);
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80186ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80186ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80186d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80186d6:	ec53 2b17 	vmov	r2, r3, d7
 80186da:	4952      	ldr	r1, [pc, #328]	@ (8018824 <MENU_Draw+0x518>)
 80186dc:	f003 fe50 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	6859      	ldr	r1, [r3, #4]
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	7d5b      	ldrb	r3, [r3, #21]
 80186e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80186ec:	2006      	movs	r0, #6
 80186ee:	9000      	str	r0, [sp, #0]
 80186f0:	6878      	ldr	r0, [r7, #4]
 80186f2:	f000 fb19 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 6);

		hmenu->ssdR_handle->str_cursor = 98 + 2*128;
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	685b      	ldr	r3, [r3, #4]
 80186fa:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 80186fe:	821a      	strh	r2, [r3, #16]
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	6859      	ldr	r1, [r3, #4]
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	7d5b      	ldrb	r3, [r3, #21]
 8018708:	220a      	movs	r2, #10
 801870a:	9200      	str	r2, [sp, #0]
 801870c:	4a46      	ldr	r2, [pc, #280]	@ (8018828 <MENU_Draw+0x51c>)
 801870e:	6878      	ldr	r0, [r7, #4]
 8018710:	f000 fb0a 	bl	8018d28 <MENU_AnimateString>
						"W",
						hmenu->page_anim, 10);
		hmenu->ssdR_handle->draw_scale = 0;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	685b      	ldr	r3, [r3, #4]
 8018718:	2200      	movs	r2, #0
 801871a:	74da      	strb	r2, [r3, #19]

		// BATTERY

		// Draw the divider
		hmenu->ssdR_handle->draw_scale = 1;
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	2201      	movs	r2, #1
 8018722:	74da      	strb	r2, [r3, #19]

		hmenu->ssdR_handle->str_cursor = 4*128 + 2;
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	685b      	ldr	r3, [r3, #4]
 8018728:	f240 2202 	movw	r2, #514	@ 0x202
 801872c:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "---------");
 801872e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018732:	493e      	ldr	r1, [pc, #248]	@ (801882c <MENU_Draw+0x520>)
 8018734:	4618      	mov	r0, r3
 8018736:	f003 fe23 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	6859      	ldr	r1, [r3, #4]
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	7d5b      	ldrb	r3, [r3, #21]
 8018742:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018746:	2006      	movs	r0, #6
 8018748:	9000      	str	r0, [sp, #0]
 801874a:	6878      	ldr	r0, [r7, #4]
 801874c:	f000 faec 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 6);

		hmenu->ssdR_handle->str_cursor = 5*128 + 80;
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	685b      	ldr	r3, [r3, #4]
 8018754:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8018758:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "---");
 801875a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801875e:	4934      	ldr	r1, [pc, #208]	@ (8018830 <MENU_Draw+0x524>)
 8018760:	4618      	mov	r0, r3
 8018762:	f003 fe0d 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	6859      	ldr	r1, [r3, #4]
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	7d5b      	ldrb	r3, [r3, #21]
 801876e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018772:	2006      	movs	r0, #6
 8018774:	9000      	str	r0, [sp, #0]
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f000 fad6 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 6);

		hmenu->ssdR_handle->draw_scale = 0;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	685b      	ldr	r3, [r3, #4]
 8018780:	2200      	movs	r2, #0
 8018782:	74da      	strb	r2, [r3, #19]

		// Draw the bats label
		hmenu->ssdR_handle->draw_inverted = 1;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	2201      	movs	r2, #1
 801878a:	749a      	strb	r2, [r3, #18]
		hmenu->ssdR_handle->str_cursor = 5*128 + 74;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	685b      	ldr	r3, [r3, #4]
 8018790:	f240 22ca 	movw	r2, #714	@ 0x2ca
 8018794:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "\x84 BATS ");
 8018796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801879a:	4926      	ldr	r1, [pc, #152]	@ (8018834 <MENU_Draw+0x528>)
 801879c:	4618      	mov	r0, r3
 801879e:	f003 fdef 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6859      	ldr	r1, [r3, #4]
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	7d5b      	ldrb	r3, [r3, #21]
 80187aa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80187ae:	2006      	movs	r0, #6
 80187b0:	9000      	str	r0, [sp, #0]
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f000 fab8 	bl	8018d28 <MENU_AnimateString>
						tmp_msg,
						hmenu->page_anim, 6);
		hmenu->ssdR_handle->draw_inverted = 0;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	2200      	movs	r2, #0
 80187be:	749a      	strb	r2, [r3, #18]

		if (hmenu->bat_time_con == 0.0) {
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80187c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80187ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ce:	d135      	bne.n	801883c <MENU_Draw+0x530>
			// CHARGING
			hmenu->ssdR_handle->draw_scale = 1;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	685b      	ldr	r3, [r3, #4]
 80187d4:	2201      	movs	r2, #1
 80187d6:	74da      	strb	r2, [r3, #19]
			hmenu->ssdR_handle->str_cursor = 6*128 + 10;
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	685b      	ldr	r3, [r3, #4]
 80187dc:	f240 320a 	movw	r2, #778	@ 0x30a
 80187e0:	821a      	strh	r2, [r3, #16]
			sprintf(tmp_msg, "CHRG");
 80187e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80187e6:	4914      	ldr	r1, [pc, #80]	@ (8018838 <MENU_Draw+0x52c>)
 80187e8:	4618      	mov	r0, r3
 80187ea:	f003 fdc9 	bl	801c380 <siprintf>
			MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	6859      	ldr	r1, [r3, #4]
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	7d5b      	ldrb	r3, [r3, #21]
 80187f6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80187fa:	2006      	movs	r0, #6
 80187fc:	9000      	str	r0, [sp, #0]
 80187fe:	6878      	ldr	r0, [r7, #4]
 8018800:	f000 fa92 	bl	8018d28 <MENU_AnimateString>
							tmp_msg,
							hmenu->page_anim, 6);
			hmenu->ssdR_handle->draw_scale = 0;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	2200      	movs	r2, #0
 801880a:	74da      	strb	r2, [r3, #19]
 801880c:	e062      	b.n	80188d4 <MENU_Draw+0x5c8>
 801880e:	bf00      	nop
 8018810:	0801eb5c 	.word	0x0801eb5c
 8018814:	0801eb74 	.word	0x0801eb74
 8018818:	0801eb80 	.word	0x0801eb80
 801881c:	0801eb8c 	.word	0x0801eb8c
 8018820:	0801eb34 	.word	0x0801eb34
 8018824:	0801eb40 	.word	0x0801eb40
 8018828:	0801eb48 	.word	0x0801eb48
 801882c:	0801eb98 	.word	0x0801eb98
 8018830:	0801eba4 	.word	0x0801eba4
 8018834:	0801eba8 	.word	0x0801eba8
 8018838:	0801ebb0 	.word	0x0801ebb0

		} else {
			// DISCHARGING
			hmenu->ssdR_handle->str_cursor = 6*128;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	685b      	ldr	r3, [r3, #4]
 8018840:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8018844:	821a      	strh	r2, [r3, #16]
			if ((hmenu->alert_battery_con) && (hmenu->page_anim % ALERT_BLINKFREQ) >= ALERT_BLINKDUTY)
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801884c:	2b00      	cmp	r3, #0
 801884e:	d00a      	beq.n	8018866 <MENU_Draw+0x55a>
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	7d5b      	ldrb	r3, [r3, #21]
 8018854:	f003 0304 	and.w	r3, r3, #4
 8018858:	b2db      	uxtb	r3, r3
 801885a:	2b00      	cmp	r3, #0
 801885c:	d003      	beq.n	8018866 <MENU_Draw+0x55a>
				hmenu->ssdR_handle->draw_inverted = 1;
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	2201      	movs	r2, #1
 8018864:	749a      	strb	r2, [r3, #18]

			sprintf(tmp_msg, "% 4.1f %%", hmenu->bat_perc_con);
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801886c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018870:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8018874:	ec53 2b17 	vmov	r2, r3, d7
 8018878:	4943      	ldr	r1, [pc, #268]	@ (8018988 <MENU_Draw+0x67c>)
 801887a:	f003 fd81 	bl	801c380 <siprintf>
			MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	6859      	ldr	r1, [r3, #4]
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	7d5b      	ldrb	r3, [r3, #21]
 8018886:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801888a:	2007      	movs	r0, #7
 801888c:	9000      	str	r0, [sp, #0]
 801888e:	6878      	ldr	r0, [r7, #4]
 8018890:	f000 fa4a 	bl	8018d28 <MENU_AnimateString>
							tmp_msg,
							hmenu->page_anim, 7);

			hmenu->ssdR_handle->draw_inverted = 0;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	685b      	ldr	r3, [r3, #4]
 8018898:	2200      	movs	r2, #0
 801889a:	749a      	strb	r2, [r3, #18]

			hmenu->ssdR_handle->str_cursor = 7*128;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	685b      	ldr	r3, [r3, #4]
 80188a0:	f44f 7260 	mov.w	r2, #896	@ 0x380
 80188a4:	821a      	strh	r2, [r3, #16]
			sprintf(tmp_msg, "% 4.1f M", hmenu->bat_time_con);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80188ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80188b0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80188b4:	ec53 2b17 	vmov	r2, r3, d7
 80188b8:	4934      	ldr	r1, [pc, #208]	@ (801898c <MENU_Draw+0x680>)
 80188ba:	f003 fd61 	bl	801c380 <siprintf>
			MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	6859      	ldr	r1, [r3, #4]
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	7d5b      	ldrb	r3, [r3, #21]
 80188c6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80188ca:	2008      	movs	r0, #8
 80188cc:	9000      	str	r0, [sp, #0]
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	f000 fa2a 	bl	8018d28 <MENU_AnimateString>
							tmp_msg,
							hmenu->page_anim, 8);
		}

		hmenu->ssdR_handle->str_cursor = 7*128 + 68;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	685b      	ldr	r3, [r3, #4]
 80188d8:	f44f 7271 	mov.w	r2, #964	@ 0x3c4
 80188dc:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "% 3.1f *C", hmenu->bat_temp_con);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80188e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80188e8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80188ec:	ec53 2b17 	vmov	r2, r3, d7
 80188f0:	4927      	ldr	r1, [pc, #156]	@ (8018990 <MENU_Draw+0x684>)
 80188f2:	f003 fd45 	bl	801c380 <siprintf>
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	6859      	ldr	r1, [r3, #4]
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	7d5b      	ldrb	r3, [r3, #21]
 80188fe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018902:	2008      	movs	r0, #8
 8018904:	9000      	str	r0, [sp, #0]
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f000 fa0e 	bl	8018d28 <MENU_AnimateString>
 801890c:	e14d      	b.n	8018baa <MENU_Draw+0x89e>


	} else {
		// REGULAR PAGE, ADJUST INDEX

		Menu_Page 	  activePage = hmenu->pages[hmenu->current_page-1];
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	68da      	ldr	r2, [r3, #12]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	7d1b      	ldrb	r3, [r3, #20]
 8018916:	4619      	mov	r1, r3
 8018918:	460b      	mov	r3, r1
 801891a:	005b      	lsls	r3, r3, #1
 801891c:	440b      	add	r3, r1
 801891e:	009b      	lsls	r3, r3, #2
 8018920:	3b0c      	subs	r3, #12
 8018922:	441a      	add	r2, r3
 8018924:	f107 0318 	add.w	r3, r7, #24
 8018928:	ca07      	ldmia	r2, {r0, r1, r2}
 801892a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Menu_Property activeProperty = activePage.properties[hmenu->current_property];
 801892e:	6a3a      	ldr	r2, [r7, #32]
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	7d9b      	ldrb	r3, [r3, #22]
 8018934:	4619      	mov	r1, r3
 8018936:	460b      	mov	r3, r1
 8018938:	005b      	lsls	r3, r3, #1
 801893a:	440b      	add	r3, r1
 801893c:	009b      	lsls	r3, r3, #2
 801893e:	441a      	add	r2, r3
 8018940:	f107 030c 	add.w	r3, r7, #12
 8018944:	ca07      	ldmia	r2, {r0, r1, r2}
 8018946:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		// Draw the title on the left
		hmenu->ssdL_handle->str_cursor = (128 - strlen(activePage.title)*6);
 801894a:	69bb      	ldr	r3, [r7, #24]
 801894c:	4618      	mov	r0, r3
 801894e:	f7e7 fd17 	bl	8000380 <strlen>
 8018952:	4603      	mov	r3, r0
 8018954:	b29b      	uxth	r3, r3
 8018956:	461a      	mov	r2, r3
 8018958:	0052      	lsls	r2, r2, #1
 801895a:	4413      	add	r3, r2
 801895c:	005b      	lsls	r3, r3, #1
 801895e:	b29a      	uxth	r2, r3
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	f1c2 0280 	rsb	r2, r2, #128	@ 0x80
 8018968:	b292      	uxth	r2, r2
 801896a:	821a      	strh	r2, [r3, #16]
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	6819      	ldr	r1, [r3, #0]
 8018970:	69ba      	ldr	r2, [r7, #24]
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	7d5b      	ldrb	r3, [r3, #21]
 8018976:	2000      	movs	r0, #0
 8018978:	9000      	str	r0, [sp, #0]
 801897a:	6878      	ldr	r0, [r7, #4]
 801897c:	f000 f9d4 	bl	8018d28 <MENU_AnimateString>
				activePage.title,
				hmenu->page_anim, 0);


		for (uint8_t i = 0; i < activePage.num_properties; i++) {
 8018980:	2300      	movs	r3, #0
 8018982:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8018986:	e0c5      	b.n	8018b14 <MENU_Draw+0x808>
 8018988:	0801ebb8 	.word	0x0801ebb8
 801898c:	0801ebc4 	.word	0x0801ebc4
 8018990:	0801ebd0 	.word	0x0801ebd0
			// Draw the properties
			// Compute offset using property anim
			hmenu->ssdL_handle->str_cursor = 16 + (2+i)*128;
 8018994:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018998:	3302      	adds	r3, #2
 801899a:	b29b      	uxth	r3, r3
 801899c:	01db      	lsls	r3, r3, #7
 801899e:	b29a      	uxth	r2, r3
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	3210      	adds	r2, #16
 80189a6:	b292      	uxth	r2, r2
 80189a8:	821a      	strh	r2, [r3, #16]
			if (i == hmenu->current_property) {
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	7d9b      	ldrb	r3, [r3, #22]
 80189ae:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80189b2:	429a      	cmp	r2, r3
 80189b4:	d112      	bne.n	80189dc <MENU_Draw+0x6d0>
				uint8_t num_bars = hmenu->property_anim;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	7e1b      	ldrb	r3, [r3, #24]
 80189ba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
				if (num_bars > 3) num_bars = 3;
 80189be:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80189c2:	2b03      	cmp	r3, #3
 80189c4:	d902      	bls.n	80189cc <MENU_Draw+0x6c0>
 80189c6:	2303      	movs	r3, #3
 80189c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
				SSD1306_DrawString(hmenu->ssdL_handle, ">> ", num_bars);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80189d4:	4977      	ldr	r1, [pc, #476]	@ (8018bb4 <MENU_Draw+0x8a8>)
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7ea fc6a 	bl	80032b0 <SSD1306_DrawString>
			}

			// De-animate the previous property
			if (i == hmenu->last_property && hmenu->property_anim/2 <= 2) {
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	7ddb      	ldrb	r3, [r3, #23]
 80189e0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80189e4:	429a      	cmp	r2, r3
 80189e6:	d11a      	bne.n	8018a1e <MENU_Draw+0x712>
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	7e1b      	ldrb	r3, [r3, #24]
 80189ec:	2b05      	cmp	r3, #5
 80189ee:	d816      	bhi.n	8018a1e <MENU_Draw+0x712>
				uint8_t num_bars = 2 - hmenu->property_anim/2;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	7e1b      	ldrb	r3, [r3, #24]
 80189f4:	085b      	lsrs	r3, r3, #1
 80189f6:	b2db      	uxtb	r3, r3
 80189f8:	f1c3 0302 	rsb	r3, r3, #2
 80189fc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				if (num_bars > 2) num_bars = 2;
 8018a00:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8018a04:	2b02      	cmp	r3, #2
 8018a06:	d902      	bls.n	8018a0e <MENU_Draw+0x702>
 8018a08:	2302      	movs	r3, #2
 8018a0a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				SSD1306_DrawString(hmenu->ssdL_handle, ">> ", num_bars);
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8018a16:	4967      	ldr	r1, [pc, #412]	@ (8018bb4 <MENU_Draw+0x8a8>)
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f7ea fc49 	bl	80032b0 <SSD1306_DrawString>
			}

			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	6818      	ldr	r0, [r3, #0]
					activePage.properties[i].name,
 8018a22:	6a39      	ldr	r1, [r7, #32]
 8018a24:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8018a28:	4613      	mov	r3, r2
 8018a2a:	005b      	lsls	r3, r3, #1
 8018a2c:	4413      	add	r3, r2
 8018a2e:	009b      	lsls	r3, r3, #2
 8018a30:	440b      	add	r3, r1
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8018a32:	681a      	ldr	r2, [r3, #0]
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	7d59      	ldrb	r1, [r3, #21]
 8018a38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018a3c:	3303      	adds	r3, #3
 8018a3e:	b2db      	uxtb	r3, r3
 8018a40:	005b      	lsls	r3, r3, #1
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	9300      	str	r3, [sp, #0]
 8018a46:	460b      	mov	r3, r1
 8018a48:	4601      	mov	r1, r0
 8018a4a:	6878      	ldr	r0, [r7, #4]
 8018a4c:	f000 f96c 	bl	8018d28 <MENU_AnimateString>
					hmenu->page_anim, 6+i*2);

			// Draw the values these properties have
			uint8_t op_value = hmenu->state_packet[activePage.properties[i].packet_byte];
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	6919      	ldr	r1, [r3, #16]
 8018a54:	6a38      	ldr	r0, [r7, #32]
 8018a56:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8018a5a:	4613      	mov	r3, r2
 8018a5c:	005b      	lsls	r3, r3, #1
 8018a5e:	4413      	add	r3, r2
 8018a60:	009b      	lsls	r3, r3, #2
 8018a62:	4403      	add	r3, r0
 8018a64:	791b      	ldrb	r3, [r3, #4]
 8018a66:	440b      	add	r3, r1
 8018a68:	781b      	ldrb	r3, [r3, #0]
 8018a6a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			if (op_value < activePage.properties[i].num_options) {
 8018a6e:	6a39      	ldr	r1, [r7, #32]
 8018a70:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8018a74:	4613      	mov	r3, r2
 8018a76:	005b      	lsls	r3, r3, #1
 8018a78:	4413      	add	r3, r2
 8018a7a:	009b      	lsls	r3, r3, #2
 8018a7c:	440b      	add	r3, r1
 8018a7e:	795b      	ldrb	r3, [r3, #5]
 8018a80:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d240      	bcs.n	8018b0a <MENU_Draw+0x7fe>
				hmenu->ssdL_handle->str_cursor = (3+i)*128 - strlen(activePage.properties[i].option_names[op_value])*6;
 8018a88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018a8c:	3303      	adds	r3, #3
 8018a8e:	b29b      	uxth	r3, r3
 8018a90:	01db      	lsls	r3, r3, #7
 8018a92:	b29c      	uxth	r4, r3
 8018a94:	6a39      	ldr	r1, [r7, #32]
 8018a96:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8018a9a:	4613      	mov	r3, r2
 8018a9c:	005b      	lsls	r3, r3, #1
 8018a9e:	4413      	add	r3, r2
 8018aa0:	009b      	lsls	r3, r3, #2
 8018aa2:	440b      	add	r3, r1
 8018aa4:	689a      	ldr	r2, [r3, #8]
 8018aa6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018aaa:	009b      	lsls	r3, r3, #2
 8018aac:	4413      	add	r3, r2
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f7e7 fc65 	bl	8000380 <strlen>
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	b29b      	uxth	r3, r3
 8018aba:	461a      	mov	r2, r3
 8018abc:	0052      	lsls	r2, r2, #1
 8018abe:	4413      	add	r3, r2
 8018ac0:	005b      	lsls	r3, r3, #1
 8018ac2:	b29a      	uxth	r2, r3
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	1aa2      	subs	r2, r4, r2
 8018aca:	b292      	uxth	r2, r2
 8018acc:	821a      	strh	r2, [r3, #16]
				MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	6818      	ldr	r0, [r3, #0]
						activePage.properties[i].option_names[op_value],
 8018ad2:	6a39      	ldr	r1, [r7, #32]
 8018ad4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8018ad8:	4613      	mov	r3, r2
 8018ada:	005b      	lsls	r3, r3, #1
 8018adc:	4413      	add	r3, r2
 8018ade:	009b      	lsls	r3, r3, #2
 8018ae0:	440b      	add	r3, r1
 8018ae2:	689a      	ldr	r2, [r3, #8]
 8018ae4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018ae8:	009b      	lsls	r3, r3, #2
 8018aea:	4413      	add	r3, r2
				MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8018aec:	681a      	ldr	r2, [r3, #0]
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	7d59      	ldrb	r1, [r3, #21]
 8018af2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018af6:	3303      	adds	r3, #3
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	005b      	lsls	r3, r3, #1
 8018afc:	b2db      	uxtb	r3, r3
 8018afe:	9300      	str	r3, [sp, #0]
 8018b00:	460b      	mov	r3, r1
 8018b02:	4601      	mov	r1, r0
 8018b04:	6878      	ldr	r0, [r7, #4]
 8018b06:	f000 f90f 	bl	8018d28 <MENU_AnimateString>
		for (uint8_t i = 0; i < activePage.num_properties; i++) {
 8018b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018b0e:	3301      	adds	r3, #1
 8018b10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8018b14:	7f3b      	ldrb	r3, [r7, #28]
 8018b16:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8018b1a:	429a      	cmp	r2, r3
 8018b1c:	f4ff af3a 	bcc.w	8018994 <MENU_Draw+0x688>
						hmenu->page_anim, 6+i*2);
			}
		}

		// Draw the selected property on the RIGHT
		hmenu->ssdR_handle->str_cursor = 0;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	685b      	ldr	r3, [r3, #4]
 8018b24:	2200      	movs	r2, #0
 8018b26:	821a      	strh	r2, [r3, #16]
		MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6859      	ldr	r1, [r3, #4]
 8018b2c:	68fa      	ldr	r2, [r7, #12]
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	7e1b      	ldrb	r3, [r3, #24]
 8018b32:	2001      	movs	r0, #1
 8018b34:	9000      	str	r0, [sp, #0]
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f000 f8f6 	bl	8018d28 <MENU_AnimateString>
					activeProperty.name,
					hmenu->property_anim, 1);

		// Draw the selected option on the right
		uint8_t op_value = hmenu->state_packet[activeProperty.packet_byte];
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	691b      	ldr	r3, [r3, #16]
 8018b40:	7c3a      	ldrb	r2, [r7, #16]
 8018b42:	4413      	add	r3, r2
 8018b44:	781b      	ldrb	r3, [r3, #0]
 8018b46:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		if (op_value < activeProperty.num_options) {
 8018b4a:	7c7b      	ldrb	r3, [r7, #17]
 8018b4c:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018b50:	429a      	cmp	r2, r3
 8018b52:	d22a      	bcs.n	8018baa <MENU_Draw+0x89e>
			hmenu->ssdR_handle->str_cursor = 2*128;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	685b      	ldr	r3, [r3, #4]
 8018b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018b5c:	821a      	strh	r2, [r3, #16]
			SSD1306_DrawString(hmenu->ssdR_handle, "> ", 2);
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	685b      	ldr	r3, [r3, #4]
 8018b62:	2202      	movs	r2, #2
 8018b64:	4914      	ldr	r1, [pc, #80]	@ (8018bb8 <MENU_Draw+0x8ac>)
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7ea fba2 	bl	80032b0 <SSD1306_DrawString>
			SSD1306_DrawString(hmenu->ssdR_handle, activeProperty.option_names[op_value], strlen(activeProperty.option_names[op_value]));
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	685c      	ldr	r4, [r3, #4]
 8018b70:	697a      	ldr	r2, [r7, #20]
 8018b72:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018b76:	009b      	lsls	r3, r3, #2
 8018b78:	4413      	add	r3, r2
 8018b7a:	681d      	ldr	r5, [r3, #0]
 8018b7c:	697a      	ldr	r2, [r7, #20]
 8018b7e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018b82:	009b      	lsls	r3, r3, #2
 8018b84:	4413      	add	r3, r2
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f7e7 fbf9 	bl	8000380 <strlen>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	461a      	mov	r2, r3
 8018b94:	4629      	mov	r1, r5
 8018b96:	4620      	mov	r0, r4
 8018b98:	f7ea fb8a 	bl	80032b0 <SSD1306_DrawString>
			SSD1306_DrawString(hmenu->ssdR_handle, " <", 2);
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	685b      	ldr	r3, [r3, #4]
 8018ba0:	2202      	movs	r2, #2
 8018ba2:	4906      	ldr	r1, [pc, #24]	@ (8018bbc <MENU_Draw+0x8b0>)
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	f7ea fb83 	bl	80032b0 <SSD1306_DrawString>
		}
	}
}
 8018baa:	bf00      	nop
 8018bac:	4618      	mov	r0, r3
 8018bae:	3740      	adds	r7, #64	@ 0x40
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8018bb4:	0801ebdc 	.word	0x0801ebdc
 8018bb8:	0801ebe0 	.word	0x0801ebe0
 8018bbc:	0801ebe4 	.word	0x0801ebe4

08018bc0 <MENU_ParseInput>:

void MENU_ParseInput(Menu_HandleTypeDef *hmenu, uint8_t inputs[4]) {
 8018bc0:	b480      	push	{r7}
 8018bc2:	b087      	sub	sp, #28
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	6039      	str	r1, [r7, #0]
	if (inputs[0]) {
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	781b      	ldrb	r3, [r3, #0]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d01d      	beq.n	8018c0e <MENU_ParseInput+0x4e>
		if (hmenu->current_page == 0) {
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	7d1b      	ldrb	r3, [r3, #20]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d106      	bne.n	8018be8 <MENU_ParseInput+0x28>
			hmenu->current_page = hmenu->num_pages - 1;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	7a1b      	ldrb	r3, [r3, #8]
 8018bde:	3b01      	subs	r3, #1
 8018be0:	b2da      	uxtb	r2, r3
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	751a      	strb	r2, [r3, #20]
 8018be6:	e005      	b.n	8018bf4 <MENU_ParseInput+0x34>
		} else {
			hmenu->current_page--;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	7d1b      	ldrb	r3, [r3, #20]
 8018bec:	3b01      	subs	r3, #1
 8018bee:	b2da      	uxtb	r2, r3
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	751a      	strb	r2, [r3, #20]
		}
		hmenu->page_anim = 0;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	755a      	strb	r2, [r3, #21]
		hmenu->property_anim = 0;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	761a      	strb	r2, [r3, #24]
		hmenu->current_property = 0;
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	2200      	movs	r2, #0
 8018c04:	759a      	strb	r2, [r3, #22]
		hmenu->last_property = 0xFF;
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	22ff      	movs	r2, #255	@ 0xff
 8018c0a:	75da      	strb	r2, [r3, #23]
 8018c0c:	e022      	b.n	8018c54 <MENU_ParseInput+0x94>
	} else if (inputs[1]) {
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	3301      	adds	r3, #1
 8018c12:	781b      	ldrb	r3, [r3, #0]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d01d      	beq.n	8018c54 <MENU_ParseInput+0x94>
		if (hmenu->current_page == hmenu->num_pages - 1) {
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	7d1b      	ldrb	r3, [r3, #20]
 8018c1c:	461a      	mov	r2, r3
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	7a1b      	ldrb	r3, [r3, #8]
 8018c22:	3b01      	subs	r3, #1
 8018c24:	429a      	cmp	r2, r3
 8018c26:	d103      	bne.n	8018c30 <MENU_ParseInput+0x70>
			hmenu->current_page = 0;
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	751a      	strb	r2, [r3, #20]
 8018c2e:	e005      	b.n	8018c3c <MENU_ParseInput+0x7c>
		} else {
			hmenu->current_page++;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	7d1b      	ldrb	r3, [r3, #20]
 8018c34:	3301      	adds	r3, #1
 8018c36:	b2da      	uxtb	r2, r3
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	751a      	strb	r2, [r3, #20]
		}
		hmenu->page_anim = 0;
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	2200      	movs	r2, #0
 8018c40:	755a      	strb	r2, [r3, #21]
		hmenu->property_anim = 0;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	2200      	movs	r2, #0
 8018c46:	761a      	strb	r2, [r3, #24]
		hmenu->current_property = 0;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	759a      	strb	r2, [r3, #22]
		hmenu->last_property = 0xFF;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	22ff      	movs	r2, #255	@ 0xff
 8018c52:	75da      	strb	r2, [r3, #23]
	}

	if (inputs[3]) {
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	3303      	adds	r3, #3
 8018c58:	781b      	ldrb	r3, [r3, #0]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d021      	beq.n	8018ca2 <MENU_ParseInput+0xe2>
		hmenu->last_property = hmenu->current_property;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	7d9a      	ldrb	r2, [r3, #22]
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	75da      	strb	r2, [r3, #23]
		if (hmenu->current_property == hmenu->pages[hmenu->current_page].num_properties - 1)
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	7d9b      	ldrb	r3, [r3, #22]
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	68da      	ldr	r2, [r3, #12]
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	7d1b      	ldrb	r3, [r3, #20]
 8018c74:	4619      	mov	r1, r3
 8018c76:	460b      	mov	r3, r1
 8018c78:	005b      	lsls	r3, r3, #1
 8018c7a:	440b      	add	r3, r1
 8018c7c:	009b      	lsls	r3, r3, #2
 8018c7e:	4413      	add	r3, r2
 8018c80:	791b      	ldrb	r3, [r3, #4]
 8018c82:	3b01      	subs	r3, #1
 8018c84:	4298      	cmp	r0, r3
 8018c86:	d103      	bne.n	8018c90 <MENU_ParseInput+0xd0>
			hmenu->current_property = 0;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	759a      	strb	r2, [r3, #22]
 8018c8e:	e005      	b.n	8018c9c <MENU_ParseInput+0xdc>
		else
			hmenu->current_property++;
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	7d9b      	ldrb	r3, [r3, #22]
 8018c94:	3301      	adds	r3, #1
 8018c96:	b2da      	uxtb	r2, r3
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	759a      	strb	r2, [r3, #22]
		hmenu->property_anim = 0;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2200      	movs	r2, #0
 8018ca0:	761a      	strb	r2, [r3, #24]
	}

	if (inputs[2] && hmenu->current_page > 0) {
 8018ca2:	683b      	ldr	r3, [r7, #0]
 8018ca4:	3302      	adds	r3, #2
 8018ca6:	781b      	ldrb	r3, [r3, #0]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d037      	beq.n	8018d1c <MENU_ParseInput+0x15c>
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	7d1b      	ldrb	r3, [r3, #20]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d033      	beq.n	8018d1c <MENU_ParseInput+0x15c>
		Menu_Property activeProperty = hmenu->pages[hmenu->current_page-1].properties[hmenu->current_property];
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	68da      	ldr	r2, [r3, #12]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	7d1b      	ldrb	r3, [r3, #20]
 8018cbc:	4619      	mov	r1, r3
 8018cbe:	460b      	mov	r3, r1
 8018cc0:	005b      	lsls	r3, r3, #1
 8018cc2:	440b      	add	r3, r1
 8018cc4:	009b      	lsls	r3, r3, #2
 8018cc6:	3b0c      	subs	r3, #12
 8018cc8:	4413      	add	r3, r2
 8018cca:	689a      	ldr	r2, [r3, #8]
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	7d9b      	ldrb	r3, [r3, #22]
 8018cd0:	4619      	mov	r1, r3
 8018cd2:	460b      	mov	r3, r1
 8018cd4:	005b      	lsls	r3, r3, #1
 8018cd6:	440b      	add	r3, r1
 8018cd8:	009b      	lsls	r3, r3, #2
 8018cda:	441a      	add	r2, r3
 8018cdc:	f107 0308 	add.w	r3, r7, #8
 8018ce0:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ce2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		uint8_t propertyByte = activeProperty.packet_byte;
 8018ce6:	7b3b      	ldrb	r3, [r7, #12]
 8018ce8:	75fb      	strb	r3, [r7, #23]
		if (hmenu->state_packet[propertyByte] == activeProperty.num_options - 1)
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	691a      	ldr	r2, [r3, #16]
 8018cee:	7dfb      	ldrb	r3, [r7, #23]
 8018cf0:	4413      	add	r3, r2
 8018cf2:	781b      	ldrb	r3, [r3, #0]
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	7b7b      	ldrb	r3, [r7, #13]
 8018cf8:	3b01      	subs	r3, #1
 8018cfa:	429a      	cmp	r2, r3
 8018cfc:	d106      	bne.n	8018d0c <MENU_ParseInput+0x14c>
			hmenu->state_packet[propertyByte] = 0;
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	691a      	ldr	r2, [r3, #16]
 8018d02:	7dfb      	ldrb	r3, [r7, #23]
 8018d04:	4413      	add	r3, r2
 8018d06:	2200      	movs	r2, #0
 8018d08:	701a      	strb	r2, [r3, #0]
		else
			hmenu->state_packet[propertyByte]++;
	}
}
 8018d0a:	e007      	b.n	8018d1c <MENU_ParseInput+0x15c>
			hmenu->state_packet[propertyByte]++;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	691a      	ldr	r2, [r3, #16]
 8018d10:	7dfb      	ldrb	r3, [r7, #23]
 8018d12:	4413      	add	r3, r2
 8018d14:	781a      	ldrb	r2, [r3, #0]
 8018d16:	3201      	adds	r2, #1
 8018d18:	b2d2      	uxtb	r2, r2
 8018d1a:	701a      	strb	r2, [r3, #0]
}
 8018d1c:	bf00      	nop
 8018d1e:	371c      	adds	r7, #28
 8018d20:	46bd      	mov	sp, r7
 8018d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d26:	4770      	bx	lr

08018d28 <MENU_AnimateString>:

void MENU_AnimateString(Menu_HandleTypeDef *hmenu, SSD1306_HandleTypeDef *hssd, uint8_t *str, uint8_t anim_val, uint8_t anim_start) {
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b086      	sub	sp, #24
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	60f8      	str	r0, [r7, #12]
 8018d30:	60b9      	str	r1, [r7, #8]
 8018d32:	607a      	str	r2, [r7, #4]
 8018d34:	70fb      	strb	r3, [r7, #3]
	if (hmenu->page_anim < anim_start) return;
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	7d5b      	ldrb	r3, [r3, #21]
 8018d3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018d3e:	429a      	cmp	r2, r3
 8018d40:	d817      	bhi.n	8018d72 <MENU_AnimateString+0x4a>
	uint8_t min_len = strlen(str);
 8018d42:	6878      	ldr	r0, [r7, #4]
 8018d44:	f7e7 fb1c 	bl	8000380 <strlen>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	75fb      	strb	r3, [r7, #23]
	if (min_len > anim_val - anim_start)
 8018d4c:	7dfa      	ldrb	r2, [r7, #23]
 8018d4e:	78f9      	ldrb	r1, [r7, #3]
 8018d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018d54:	1acb      	subs	r3, r1, r3
 8018d56:	429a      	cmp	r2, r3
 8018d58:	dd04      	ble.n	8018d64 <MENU_AnimateString+0x3c>
		min_len = anim_val - anim_start;
 8018d5a:	78fa      	ldrb	r2, [r7, #3]
 8018d5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018d60:	1ad3      	subs	r3, r2, r3
 8018d62:	75fb      	strb	r3, [r7, #23]

	SSD1306_DrawString(hssd, str, min_len);
 8018d64:	7dfb      	ldrb	r3, [r7, #23]
 8018d66:	461a      	mov	r2, r3
 8018d68:	6879      	ldr	r1, [r7, #4]
 8018d6a:	68b8      	ldr	r0, [r7, #8]
 8018d6c:	f7ea faa0 	bl	80032b0 <SSD1306_DrawString>
 8018d70:	e000      	b.n	8018d74 <MENU_AnimateString+0x4c>
	if (hmenu->page_anim < anim_start) return;
 8018d72:	bf00      	nop
}
 8018d74:	3718      	adds	r7, #24
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}
	...

08018d7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b084      	sub	sp, #16
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
 8018d84:	460b      	mov	r3, r1
 8018d86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8018d88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8018d8c:	f002 fd08 	bl	801b7a0 <USBD_static_malloc>
 8018d90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d109      	bne.n	8018dac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	32b0      	adds	r2, #176	@ 0xb0
 8018da2:	2100      	movs	r1, #0
 8018da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8018da8:	2302      	movs	r3, #2
 8018daa:	e0d4      	b.n	8018f56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8018dac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8018db0:	2100      	movs	r1, #0
 8018db2:	68f8      	ldr	r0, [r7, #12]
 8018db4:	f003 fb49 	bl	801c44a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	32b0      	adds	r2, #176	@ 0xb0
 8018dc2:	68f9      	ldr	r1, [r7, #12]
 8018dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	32b0      	adds	r2, #176	@ 0xb0
 8018dd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	7c1b      	ldrb	r3, [r3, #16]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d138      	bne.n	8018e56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8018de4:	4b5e      	ldr	r3, [pc, #376]	@ (8018f60 <USBD_CDC_Init+0x1e4>)
 8018de6:	7819      	ldrb	r1, [r3, #0]
 8018de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018dec:	2202      	movs	r2, #2
 8018dee:	6878      	ldr	r0, [r7, #4]
 8018df0:	f002 fbb3 	bl	801b55a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8018df4:	4b5a      	ldr	r3, [pc, #360]	@ (8018f60 <USBD_CDC_Init+0x1e4>)
 8018df6:	781b      	ldrb	r3, [r3, #0]
 8018df8:	f003 020f 	and.w	r2, r3, #15
 8018dfc:	6879      	ldr	r1, [r7, #4]
 8018dfe:	4613      	mov	r3, r2
 8018e00:	009b      	lsls	r3, r3, #2
 8018e02:	4413      	add	r3, r2
 8018e04:	009b      	lsls	r3, r3, #2
 8018e06:	440b      	add	r3, r1
 8018e08:	3324      	adds	r3, #36	@ 0x24
 8018e0a:	2201      	movs	r2, #1
 8018e0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8018e0e:	4b55      	ldr	r3, [pc, #340]	@ (8018f64 <USBD_CDC_Init+0x1e8>)
 8018e10:	7819      	ldrb	r1, [r3, #0]
 8018e12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018e16:	2202      	movs	r2, #2
 8018e18:	6878      	ldr	r0, [r7, #4]
 8018e1a:	f002 fb9e 	bl	801b55a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8018e1e:	4b51      	ldr	r3, [pc, #324]	@ (8018f64 <USBD_CDC_Init+0x1e8>)
 8018e20:	781b      	ldrb	r3, [r3, #0]
 8018e22:	f003 020f 	and.w	r2, r3, #15
 8018e26:	6879      	ldr	r1, [r7, #4]
 8018e28:	4613      	mov	r3, r2
 8018e2a:	009b      	lsls	r3, r3, #2
 8018e2c:	4413      	add	r3, r2
 8018e2e:	009b      	lsls	r3, r3, #2
 8018e30:	440b      	add	r3, r1
 8018e32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018e36:	2201      	movs	r2, #1
 8018e38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8018f68 <USBD_CDC_Init+0x1ec>)
 8018e3c:	781b      	ldrb	r3, [r3, #0]
 8018e3e:	f003 020f 	and.w	r2, r3, #15
 8018e42:	6879      	ldr	r1, [r7, #4]
 8018e44:	4613      	mov	r3, r2
 8018e46:	009b      	lsls	r3, r3, #2
 8018e48:	4413      	add	r3, r2
 8018e4a:	009b      	lsls	r3, r3, #2
 8018e4c:	440b      	add	r3, r1
 8018e4e:	3326      	adds	r3, #38	@ 0x26
 8018e50:	2210      	movs	r2, #16
 8018e52:	801a      	strh	r2, [r3, #0]
 8018e54:	e035      	b.n	8018ec2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8018e56:	4b42      	ldr	r3, [pc, #264]	@ (8018f60 <USBD_CDC_Init+0x1e4>)
 8018e58:	7819      	ldrb	r1, [r3, #0]
 8018e5a:	2340      	movs	r3, #64	@ 0x40
 8018e5c:	2202      	movs	r2, #2
 8018e5e:	6878      	ldr	r0, [r7, #4]
 8018e60:	f002 fb7b 	bl	801b55a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8018e64:	4b3e      	ldr	r3, [pc, #248]	@ (8018f60 <USBD_CDC_Init+0x1e4>)
 8018e66:	781b      	ldrb	r3, [r3, #0]
 8018e68:	f003 020f 	and.w	r2, r3, #15
 8018e6c:	6879      	ldr	r1, [r7, #4]
 8018e6e:	4613      	mov	r3, r2
 8018e70:	009b      	lsls	r3, r3, #2
 8018e72:	4413      	add	r3, r2
 8018e74:	009b      	lsls	r3, r3, #2
 8018e76:	440b      	add	r3, r1
 8018e78:	3324      	adds	r3, #36	@ 0x24
 8018e7a:	2201      	movs	r2, #1
 8018e7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8018e7e:	4b39      	ldr	r3, [pc, #228]	@ (8018f64 <USBD_CDC_Init+0x1e8>)
 8018e80:	7819      	ldrb	r1, [r3, #0]
 8018e82:	2340      	movs	r3, #64	@ 0x40
 8018e84:	2202      	movs	r2, #2
 8018e86:	6878      	ldr	r0, [r7, #4]
 8018e88:	f002 fb67 	bl	801b55a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8018e8c:	4b35      	ldr	r3, [pc, #212]	@ (8018f64 <USBD_CDC_Init+0x1e8>)
 8018e8e:	781b      	ldrb	r3, [r3, #0]
 8018e90:	f003 020f 	and.w	r2, r3, #15
 8018e94:	6879      	ldr	r1, [r7, #4]
 8018e96:	4613      	mov	r3, r2
 8018e98:	009b      	lsls	r3, r3, #2
 8018e9a:	4413      	add	r3, r2
 8018e9c:	009b      	lsls	r3, r3, #2
 8018e9e:	440b      	add	r3, r1
 8018ea0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018ea4:	2201      	movs	r2, #1
 8018ea6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8018f68 <USBD_CDC_Init+0x1ec>)
 8018eaa:	781b      	ldrb	r3, [r3, #0]
 8018eac:	f003 020f 	and.w	r2, r3, #15
 8018eb0:	6879      	ldr	r1, [r7, #4]
 8018eb2:	4613      	mov	r3, r2
 8018eb4:	009b      	lsls	r3, r3, #2
 8018eb6:	4413      	add	r3, r2
 8018eb8:	009b      	lsls	r3, r3, #2
 8018eba:	440b      	add	r3, r1
 8018ebc:	3326      	adds	r3, #38	@ 0x26
 8018ebe:	2210      	movs	r2, #16
 8018ec0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018ec2:	4b29      	ldr	r3, [pc, #164]	@ (8018f68 <USBD_CDC_Init+0x1ec>)
 8018ec4:	7819      	ldrb	r1, [r3, #0]
 8018ec6:	2308      	movs	r3, #8
 8018ec8:	2203      	movs	r2, #3
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	f002 fb45 	bl	801b55a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8018ed0:	4b25      	ldr	r3, [pc, #148]	@ (8018f68 <USBD_CDC_Init+0x1ec>)
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	f003 020f 	and.w	r2, r3, #15
 8018ed8:	6879      	ldr	r1, [r7, #4]
 8018eda:	4613      	mov	r3, r2
 8018edc:	009b      	lsls	r3, r3, #2
 8018ede:	4413      	add	r3, r2
 8018ee0:	009b      	lsls	r3, r3, #2
 8018ee2:	440b      	add	r3, r1
 8018ee4:	3324      	adds	r3, #36	@ 0x24
 8018ee6:	2201      	movs	r2, #1
 8018ee8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	2200      	movs	r2, #0
 8018eee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018ef8:	687a      	ldr	r2, [r7, #4]
 8018efa:	33b0      	adds	r3, #176	@ 0xb0
 8018efc:	009b      	lsls	r3, r3, #2
 8018efe:	4413      	add	r3, r2
 8018f00:	685b      	ldr	r3, [r3, #4]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	2200      	movs	r2, #0
 8018f0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	2200      	movs	r2, #0
 8018f12:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d101      	bne.n	8018f24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8018f20:	2302      	movs	r3, #2
 8018f22:	e018      	b.n	8018f56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	7c1b      	ldrb	r3, [r3, #16]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d10a      	bne.n	8018f42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8018f64 <USBD_CDC_Init+0x1e8>)
 8018f2e:	7819      	ldrb	r1, [r3, #0]
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018f3a:	6878      	ldr	r0, [r7, #4]
 8018f3c:	f002 fbfc 	bl	801b738 <USBD_LL_PrepareReceive>
 8018f40:	e008      	b.n	8018f54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018f42:	4b08      	ldr	r3, [pc, #32]	@ (8018f64 <USBD_CDC_Init+0x1e8>)
 8018f44:	7819      	ldrb	r1, [r3, #0]
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018f4c:	2340      	movs	r3, #64	@ 0x40
 8018f4e:	6878      	ldr	r0, [r7, #4]
 8018f50:	f002 fbf2 	bl	801b738 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018f54:	2300      	movs	r3, #0
}
 8018f56:	4618      	mov	r0, r3
 8018f58:	3710      	adds	r7, #16
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	bd80      	pop	{r7, pc}
 8018f5e:	bf00      	nop
 8018f60:	240002d7 	.word	0x240002d7
 8018f64:	240002d8 	.word	0x240002d8
 8018f68:	240002d9 	.word	0x240002d9

08018f6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
 8018f74:	460b      	mov	r3, r1
 8018f76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8018f78:	4b3a      	ldr	r3, [pc, #232]	@ (8019064 <USBD_CDC_DeInit+0xf8>)
 8018f7a:	781b      	ldrb	r3, [r3, #0]
 8018f7c:	4619      	mov	r1, r3
 8018f7e:	6878      	ldr	r0, [r7, #4]
 8018f80:	f002 fb11 	bl	801b5a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8018f84:	4b37      	ldr	r3, [pc, #220]	@ (8019064 <USBD_CDC_DeInit+0xf8>)
 8018f86:	781b      	ldrb	r3, [r3, #0]
 8018f88:	f003 020f 	and.w	r2, r3, #15
 8018f8c:	6879      	ldr	r1, [r7, #4]
 8018f8e:	4613      	mov	r3, r2
 8018f90:	009b      	lsls	r3, r3, #2
 8018f92:	4413      	add	r3, r2
 8018f94:	009b      	lsls	r3, r3, #2
 8018f96:	440b      	add	r3, r1
 8018f98:	3324      	adds	r3, #36	@ 0x24
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8018f9e:	4b32      	ldr	r3, [pc, #200]	@ (8019068 <USBD_CDC_DeInit+0xfc>)
 8018fa0:	781b      	ldrb	r3, [r3, #0]
 8018fa2:	4619      	mov	r1, r3
 8018fa4:	6878      	ldr	r0, [r7, #4]
 8018fa6:	f002 fafe 	bl	801b5a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8018faa:	4b2f      	ldr	r3, [pc, #188]	@ (8019068 <USBD_CDC_DeInit+0xfc>)
 8018fac:	781b      	ldrb	r3, [r3, #0]
 8018fae:	f003 020f 	and.w	r2, r3, #15
 8018fb2:	6879      	ldr	r1, [r7, #4]
 8018fb4:	4613      	mov	r3, r2
 8018fb6:	009b      	lsls	r3, r3, #2
 8018fb8:	4413      	add	r3, r2
 8018fba:	009b      	lsls	r3, r3, #2
 8018fbc:	440b      	add	r3, r1
 8018fbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8018fc6:	4b29      	ldr	r3, [pc, #164]	@ (801906c <USBD_CDC_DeInit+0x100>)
 8018fc8:	781b      	ldrb	r3, [r3, #0]
 8018fca:	4619      	mov	r1, r3
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	f002 faea 	bl	801b5a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8018fd2:	4b26      	ldr	r3, [pc, #152]	@ (801906c <USBD_CDC_DeInit+0x100>)
 8018fd4:	781b      	ldrb	r3, [r3, #0]
 8018fd6:	f003 020f 	and.w	r2, r3, #15
 8018fda:	6879      	ldr	r1, [r7, #4]
 8018fdc:	4613      	mov	r3, r2
 8018fde:	009b      	lsls	r3, r3, #2
 8018fe0:	4413      	add	r3, r2
 8018fe2:	009b      	lsls	r3, r3, #2
 8018fe4:	440b      	add	r3, r1
 8018fe6:	3324      	adds	r3, #36	@ 0x24
 8018fe8:	2200      	movs	r2, #0
 8018fea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8018fec:	4b1f      	ldr	r3, [pc, #124]	@ (801906c <USBD_CDC_DeInit+0x100>)
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	f003 020f 	and.w	r2, r3, #15
 8018ff4:	6879      	ldr	r1, [r7, #4]
 8018ff6:	4613      	mov	r3, r2
 8018ff8:	009b      	lsls	r3, r3, #2
 8018ffa:	4413      	add	r3, r2
 8018ffc:	009b      	lsls	r3, r3, #2
 8018ffe:	440b      	add	r3, r1
 8019000:	3326      	adds	r3, #38	@ 0x26
 8019002:	2200      	movs	r2, #0
 8019004:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	32b0      	adds	r2, #176	@ 0xb0
 8019010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d01f      	beq.n	8019058 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801901e:	687a      	ldr	r2, [r7, #4]
 8019020:	33b0      	adds	r3, #176	@ 0xb0
 8019022:	009b      	lsls	r3, r3, #2
 8019024:	4413      	add	r3, r2
 8019026:	685b      	ldr	r3, [r3, #4]
 8019028:	685b      	ldr	r3, [r3, #4]
 801902a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	32b0      	adds	r2, #176	@ 0xb0
 8019036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801903a:	4618      	mov	r0, r3
 801903c:	f002 fbbe 	bl	801b7bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	32b0      	adds	r2, #176	@ 0xb0
 801904a:	2100      	movs	r1, #0
 801904c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	2200      	movs	r2, #0
 8019054:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8019058:	2300      	movs	r3, #0
}
 801905a:	4618      	mov	r0, r3
 801905c:	3708      	adds	r7, #8
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}
 8019062:	bf00      	nop
 8019064:	240002d7 	.word	0x240002d7
 8019068:	240002d8 	.word	0x240002d8
 801906c:	240002d9 	.word	0x240002d9

08019070 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b086      	sub	sp, #24
 8019074:	af00      	add	r7, sp, #0
 8019076:	6078      	str	r0, [r7, #4]
 8019078:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	32b0      	adds	r2, #176	@ 0xb0
 8019084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019088:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801908a:	2300      	movs	r3, #0
 801908c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801908e:	2300      	movs	r3, #0
 8019090:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8019092:	2300      	movs	r3, #0
 8019094:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8019096:	693b      	ldr	r3, [r7, #16]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d101      	bne.n	80190a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801909c:	2303      	movs	r3, #3
 801909e:	e0bf      	b.n	8019220 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80190a0:	683b      	ldr	r3, [r7, #0]
 80190a2:	781b      	ldrb	r3, [r3, #0]
 80190a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d050      	beq.n	801914e <USBD_CDC_Setup+0xde>
 80190ac:	2b20      	cmp	r3, #32
 80190ae:	f040 80af 	bne.w	8019210 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	88db      	ldrh	r3, [r3, #6]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d03a      	beq.n	8019130 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	781b      	ldrb	r3, [r3, #0]
 80190be:	b25b      	sxtb	r3, r3
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	da1b      	bge.n	80190fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80190ca:	687a      	ldr	r2, [r7, #4]
 80190cc:	33b0      	adds	r3, #176	@ 0xb0
 80190ce:	009b      	lsls	r3, r3, #2
 80190d0:	4413      	add	r3, r2
 80190d2:	685b      	ldr	r3, [r3, #4]
 80190d4:	689b      	ldr	r3, [r3, #8]
 80190d6:	683a      	ldr	r2, [r7, #0]
 80190d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80190da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80190dc:	683a      	ldr	r2, [r7, #0]
 80190de:	88d2      	ldrh	r2, [r2, #6]
 80190e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80190e2:	683b      	ldr	r3, [r7, #0]
 80190e4:	88db      	ldrh	r3, [r3, #6]
 80190e6:	2b07      	cmp	r3, #7
 80190e8:	bf28      	it	cs
 80190ea:	2307      	movcs	r3, #7
 80190ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80190ee:	693b      	ldr	r3, [r7, #16]
 80190f0:	89fa      	ldrh	r2, [r7, #14]
 80190f2:	4619      	mov	r1, r3
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f001 fdbd 	bl	801ac74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80190fa:	e090      	b.n	801921e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	785a      	ldrb	r2, [r3, #1]
 8019100:	693b      	ldr	r3, [r7, #16]
 8019102:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	88db      	ldrh	r3, [r3, #6]
 801910a:	2b3f      	cmp	r3, #63	@ 0x3f
 801910c:	d803      	bhi.n	8019116 <USBD_CDC_Setup+0xa6>
 801910e:	683b      	ldr	r3, [r7, #0]
 8019110:	88db      	ldrh	r3, [r3, #6]
 8019112:	b2da      	uxtb	r2, r3
 8019114:	e000      	b.n	8019118 <USBD_CDC_Setup+0xa8>
 8019116:	2240      	movs	r2, #64	@ 0x40
 8019118:	693b      	ldr	r3, [r7, #16]
 801911a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801911e:	6939      	ldr	r1, [r7, #16]
 8019120:	693b      	ldr	r3, [r7, #16]
 8019122:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8019126:	461a      	mov	r2, r3
 8019128:	6878      	ldr	r0, [r7, #4]
 801912a:	f001 fdcf 	bl	801accc <USBD_CtlPrepareRx>
      break;
 801912e:	e076      	b.n	801921e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8019136:	687a      	ldr	r2, [r7, #4]
 8019138:	33b0      	adds	r3, #176	@ 0xb0
 801913a:	009b      	lsls	r3, r3, #2
 801913c:	4413      	add	r3, r2
 801913e:	685b      	ldr	r3, [r3, #4]
 8019140:	689b      	ldr	r3, [r3, #8]
 8019142:	683a      	ldr	r2, [r7, #0]
 8019144:	7850      	ldrb	r0, [r2, #1]
 8019146:	2200      	movs	r2, #0
 8019148:	6839      	ldr	r1, [r7, #0]
 801914a:	4798      	blx	r3
      break;
 801914c:	e067      	b.n	801921e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	785b      	ldrb	r3, [r3, #1]
 8019152:	2b0b      	cmp	r3, #11
 8019154:	d851      	bhi.n	80191fa <USBD_CDC_Setup+0x18a>
 8019156:	a201      	add	r2, pc, #4	@ (adr r2, 801915c <USBD_CDC_Setup+0xec>)
 8019158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801915c:	0801918d 	.word	0x0801918d
 8019160:	08019209 	.word	0x08019209
 8019164:	080191fb 	.word	0x080191fb
 8019168:	080191fb 	.word	0x080191fb
 801916c:	080191fb 	.word	0x080191fb
 8019170:	080191fb 	.word	0x080191fb
 8019174:	080191fb 	.word	0x080191fb
 8019178:	080191fb 	.word	0x080191fb
 801917c:	080191fb 	.word	0x080191fb
 8019180:	080191fb 	.word	0x080191fb
 8019184:	080191b7 	.word	0x080191b7
 8019188:	080191e1 	.word	0x080191e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019192:	b2db      	uxtb	r3, r3
 8019194:	2b03      	cmp	r3, #3
 8019196:	d107      	bne.n	80191a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8019198:	f107 030a 	add.w	r3, r7, #10
 801919c:	2202      	movs	r2, #2
 801919e:	4619      	mov	r1, r3
 80191a0:	6878      	ldr	r0, [r7, #4]
 80191a2:	f001 fd67 	bl	801ac74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80191a6:	e032      	b.n	801920e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80191a8:	6839      	ldr	r1, [r7, #0]
 80191aa:	6878      	ldr	r0, [r7, #4]
 80191ac:	f001 fce5 	bl	801ab7a <USBD_CtlError>
            ret = USBD_FAIL;
 80191b0:	2303      	movs	r3, #3
 80191b2:	75fb      	strb	r3, [r7, #23]
          break;
 80191b4:	e02b      	b.n	801920e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80191bc:	b2db      	uxtb	r3, r3
 80191be:	2b03      	cmp	r3, #3
 80191c0:	d107      	bne.n	80191d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80191c2:	f107 030d 	add.w	r3, r7, #13
 80191c6:	2201      	movs	r2, #1
 80191c8:	4619      	mov	r1, r3
 80191ca:	6878      	ldr	r0, [r7, #4]
 80191cc:	f001 fd52 	bl	801ac74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80191d0:	e01d      	b.n	801920e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80191d2:	6839      	ldr	r1, [r7, #0]
 80191d4:	6878      	ldr	r0, [r7, #4]
 80191d6:	f001 fcd0 	bl	801ab7a <USBD_CtlError>
            ret = USBD_FAIL;
 80191da:	2303      	movs	r3, #3
 80191dc:	75fb      	strb	r3, [r7, #23]
          break;
 80191de:	e016      	b.n	801920e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80191e6:	b2db      	uxtb	r3, r3
 80191e8:	2b03      	cmp	r3, #3
 80191ea:	d00f      	beq.n	801920c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80191ec:	6839      	ldr	r1, [r7, #0]
 80191ee:	6878      	ldr	r0, [r7, #4]
 80191f0:	f001 fcc3 	bl	801ab7a <USBD_CtlError>
            ret = USBD_FAIL;
 80191f4:	2303      	movs	r3, #3
 80191f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80191f8:	e008      	b.n	801920c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80191fa:	6839      	ldr	r1, [r7, #0]
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f001 fcbc 	bl	801ab7a <USBD_CtlError>
          ret = USBD_FAIL;
 8019202:	2303      	movs	r3, #3
 8019204:	75fb      	strb	r3, [r7, #23]
          break;
 8019206:	e002      	b.n	801920e <USBD_CDC_Setup+0x19e>
          break;
 8019208:	bf00      	nop
 801920a:	e008      	b.n	801921e <USBD_CDC_Setup+0x1ae>
          break;
 801920c:	bf00      	nop
      }
      break;
 801920e:	e006      	b.n	801921e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8019210:	6839      	ldr	r1, [r7, #0]
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	f001 fcb1 	bl	801ab7a <USBD_CtlError>
      ret = USBD_FAIL;
 8019218:	2303      	movs	r3, #3
 801921a:	75fb      	strb	r3, [r7, #23]
      break;
 801921c:	bf00      	nop
  }

  return (uint8_t)ret;
 801921e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019220:	4618      	mov	r0, r3
 8019222:	3718      	adds	r7, #24
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}

08019228 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b084      	sub	sp, #16
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	460b      	mov	r3, r1
 8019232:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801923a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	32b0      	adds	r2, #176	@ 0xb0
 8019246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d101      	bne.n	8019252 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801924e:	2303      	movs	r3, #3
 8019250:	e065      	b.n	801931e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	32b0      	adds	r2, #176	@ 0xb0
 801925c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019260:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8019262:	78fb      	ldrb	r3, [r7, #3]
 8019264:	f003 020f 	and.w	r2, r3, #15
 8019268:	6879      	ldr	r1, [r7, #4]
 801926a:	4613      	mov	r3, r2
 801926c:	009b      	lsls	r3, r3, #2
 801926e:	4413      	add	r3, r2
 8019270:	009b      	lsls	r3, r3, #2
 8019272:	440b      	add	r3, r1
 8019274:	3318      	adds	r3, #24
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d02f      	beq.n	80192dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801927c:	78fb      	ldrb	r3, [r7, #3]
 801927e:	f003 020f 	and.w	r2, r3, #15
 8019282:	6879      	ldr	r1, [r7, #4]
 8019284:	4613      	mov	r3, r2
 8019286:	009b      	lsls	r3, r3, #2
 8019288:	4413      	add	r3, r2
 801928a:	009b      	lsls	r3, r3, #2
 801928c:	440b      	add	r3, r1
 801928e:	3318      	adds	r3, #24
 8019290:	681a      	ldr	r2, [r3, #0]
 8019292:	78fb      	ldrb	r3, [r7, #3]
 8019294:	f003 010f 	and.w	r1, r3, #15
 8019298:	68f8      	ldr	r0, [r7, #12]
 801929a:	460b      	mov	r3, r1
 801929c:	00db      	lsls	r3, r3, #3
 801929e:	440b      	add	r3, r1
 80192a0:	009b      	lsls	r3, r3, #2
 80192a2:	4403      	add	r3, r0
 80192a4:	331c      	adds	r3, #28
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80192ac:	fb01 f303 	mul.w	r3, r1, r3
 80192b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d112      	bne.n	80192dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80192b6:	78fb      	ldrb	r3, [r7, #3]
 80192b8:	f003 020f 	and.w	r2, r3, #15
 80192bc:	6879      	ldr	r1, [r7, #4]
 80192be:	4613      	mov	r3, r2
 80192c0:	009b      	lsls	r3, r3, #2
 80192c2:	4413      	add	r3, r2
 80192c4:	009b      	lsls	r3, r3, #2
 80192c6:	440b      	add	r3, r1
 80192c8:	3318      	adds	r3, #24
 80192ca:	2200      	movs	r2, #0
 80192cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80192ce:	78f9      	ldrb	r1, [r7, #3]
 80192d0:	2300      	movs	r3, #0
 80192d2:	2200      	movs	r2, #0
 80192d4:	6878      	ldr	r0, [r7, #4]
 80192d6:	f002 fa0e 	bl	801b6f6 <USBD_LL_Transmit>
 80192da:	e01f      	b.n	801931c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80192dc:	68bb      	ldr	r3, [r7, #8]
 80192de:	2200      	movs	r2, #0
 80192e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80192ea:	687a      	ldr	r2, [r7, #4]
 80192ec:	33b0      	adds	r3, #176	@ 0xb0
 80192ee:	009b      	lsls	r3, r3, #2
 80192f0:	4413      	add	r3, r2
 80192f2:	685b      	ldr	r3, [r3, #4]
 80192f4:	691b      	ldr	r3, [r3, #16]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d010      	beq.n	801931c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8019300:	687a      	ldr	r2, [r7, #4]
 8019302:	33b0      	adds	r3, #176	@ 0xb0
 8019304:	009b      	lsls	r3, r3, #2
 8019306:	4413      	add	r3, r2
 8019308:	685b      	ldr	r3, [r3, #4]
 801930a:	691b      	ldr	r3, [r3, #16]
 801930c:	68ba      	ldr	r2, [r7, #8]
 801930e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8019312:	68ba      	ldr	r2, [r7, #8]
 8019314:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8019318:	78fa      	ldrb	r2, [r7, #3]
 801931a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801931c:	2300      	movs	r3, #0
}
 801931e:	4618      	mov	r0, r3
 8019320:	3710      	adds	r7, #16
 8019322:	46bd      	mov	sp, r7
 8019324:	bd80      	pop	{r7, pc}

08019326 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019326:	b580      	push	{r7, lr}
 8019328:	b084      	sub	sp, #16
 801932a:	af00      	add	r7, sp, #0
 801932c:	6078      	str	r0, [r7, #4]
 801932e:	460b      	mov	r3, r1
 8019330:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	32b0      	adds	r2, #176	@ 0xb0
 801933c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019340:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	32b0      	adds	r2, #176	@ 0xb0
 801934c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d101      	bne.n	8019358 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8019354:	2303      	movs	r3, #3
 8019356:	e01a      	b.n	801938e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8019358:	78fb      	ldrb	r3, [r7, #3]
 801935a:	4619      	mov	r1, r3
 801935c:	6878      	ldr	r0, [r7, #4]
 801935e:	f002 fa0c 	bl	801b77a <USBD_LL_GetRxDataSize>
 8019362:	4602      	mov	r2, r0
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	33b0      	adds	r3, #176	@ 0xb0
 8019374:	009b      	lsls	r3, r3, #2
 8019376:	4413      	add	r3, r2
 8019378:	685b      	ldr	r3, [r3, #4]
 801937a:	68db      	ldr	r3, [r3, #12]
 801937c:	68fa      	ldr	r2, [r7, #12]
 801937e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8019382:	68fa      	ldr	r2, [r7, #12]
 8019384:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8019388:	4611      	mov	r1, r2
 801938a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801938c:	2300      	movs	r3, #0
}
 801938e:	4618      	mov	r0, r3
 8019390:	3710      	adds	r7, #16
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}

08019396 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019396:	b580      	push	{r7, lr}
 8019398:	b084      	sub	sp, #16
 801939a:	af00      	add	r7, sp, #0
 801939c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	32b0      	adds	r2, #176	@ 0xb0
 80193a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80193ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d101      	bne.n	80193b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80193b4:	2303      	movs	r3, #3
 80193b6:	e024      	b.n	8019402 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80193be:	687a      	ldr	r2, [r7, #4]
 80193c0:	33b0      	adds	r3, #176	@ 0xb0
 80193c2:	009b      	lsls	r3, r3, #2
 80193c4:	4413      	add	r3, r2
 80193c6:	685b      	ldr	r3, [r3, #4]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d019      	beq.n	8019400 <USBD_CDC_EP0_RxReady+0x6a>
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80193d2:	2bff      	cmp	r3, #255	@ 0xff
 80193d4:	d014      	beq.n	8019400 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80193dc:	687a      	ldr	r2, [r7, #4]
 80193de:	33b0      	adds	r3, #176	@ 0xb0
 80193e0:	009b      	lsls	r3, r3, #2
 80193e2:	4413      	add	r3, r2
 80193e4:	685b      	ldr	r3, [r3, #4]
 80193e6:	689b      	ldr	r3, [r3, #8]
 80193e8:	68fa      	ldr	r2, [r7, #12]
 80193ea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80193ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80193f0:	68fa      	ldr	r2, [r7, #12]
 80193f2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80193f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	22ff      	movs	r2, #255	@ 0xff
 80193fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8019400:	2300      	movs	r3, #0
}
 8019402:	4618      	mov	r0, r3
 8019404:	3710      	adds	r7, #16
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}
	...

0801940c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b086      	sub	sp, #24
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8019414:	2182      	movs	r1, #130	@ 0x82
 8019416:	4818      	ldr	r0, [pc, #96]	@ (8019478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8019418:	f000 fd4f 	bl	8019eba <USBD_GetEpDesc>
 801941c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801941e:	2101      	movs	r1, #1
 8019420:	4815      	ldr	r0, [pc, #84]	@ (8019478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8019422:	f000 fd4a 	bl	8019eba <USBD_GetEpDesc>
 8019426:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8019428:	2181      	movs	r1, #129	@ 0x81
 801942a:	4813      	ldr	r0, [pc, #76]	@ (8019478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801942c:	f000 fd45 	bl	8019eba <USBD_GetEpDesc>
 8019430:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8019432:	697b      	ldr	r3, [r7, #20]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d002      	beq.n	801943e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8019438:	697b      	ldr	r3, [r7, #20]
 801943a:	2210      	movs	r2, #16
 801943c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801943e:	693b      	ldr	r3, [r7, #16]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d006      	beq.n	8019452 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8019444:	693b      	ldr	r3, [r7, #16]
 8019446:	2200      	movs	r2, #0
 8019448:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801944c:	711a      	strb	r2, [r3, #4]
 801944e:	2200      	movs	r2, #0
 8019450:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d006      	beq.n	8019466 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	2200      	movs	r2, #0
 801945c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019460:	711a      	strb	r2, [r3, #4]
 8019462:	2200      	movs	r2, #0
 8019464:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	2243      	movs	r2, #67	@ 0x43
 801946a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801946c:	4b02      	ldr	r3, [pc, #8]	@ (8019478 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801946e:	4618      	mov	r0, r3
 8019470:	3718      	adds	r7, #24
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}
 8019476:	bf00      	nop
 8019478:	24000294 	.word	0x24000294

0801947c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b086      	sub	sp, #24
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8019484:	2182      	movs	r1, #130	@ 0x82
 8019486:	4818      	ldr	r0, [pc, #96]	@ (80194e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8019488:	f000 fd17 	bl	8019eba <USBD_GetEpDesc>
 801948c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801948e:	2101      	movs	r1, #1
 8019490:	4815      	ldr	r0, [pc, #84]	@ (80194e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8019492:	f000 fd12 	bl	8019eba <USBD_GetEpDesc>
 8019496:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8019498:	2181      	movs	r1, #129	@ 0x81
 801949a:	4813      	ldr	r0, [pc, #76]	@ (80194e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801949c:	f000 fd0d 	bl	8019eba <USBD_GetEpDesc>
 80194a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80194a2:	697b      	ldr	r3, [r7, #20]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d002      	beq.n	80194ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80194a8:	697b      	ldr	r3, [r7, #20]
 80194aa:	2210      	movs	r2, #16
 80194ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80194ae:	693b      	ldr	r3, [r7, #16]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d006      	beq.n	80194c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80194b4:	693b      	ldr	r3, [r7, #16]
 80194b6:	2200      	movs	r2, #0
 80194b8:	711a      	strb	r2, [r3, #4]
 80194ba:	2200      	movs	r2, #0
 80194bc:	f042 0202 	orr.w	r2, r2, #2
 80194c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d006      	beq.n	80194d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	2200      	movs	r2, #0
 80194cc:	711a      	strb	r2, [r3, #4]
 80194ce:	2200      	movs	r2, #0
 80194d0:	f042 0202 	orr.w	r2, r2, #2
 80194d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	2243      	movs	r2, #67	@ 0x43
 80194da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80194dc:	4b02      	ldr	r3, [pc, #8]	@ (80194e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3718      	adds	r7, #24
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	24000294 	.word	0x24000294

080194ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b086      	sub	sp, #24
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80194f4:	2182      	movs	r1, #130	@ 0x82
 80194f6:	4818      	ldr	r0, [pc, #96]	@ (8019558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80194f8:	f000 fcdf 	bl	8019eba <USBD_GetEpDesc>
 80194fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80194fe:	2101      	movs	r1, #1
 8019500:	4815      	ldr	r0, [pc, #84]	@ (8019558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8019502:	f000 fcda 	bl	8019eba <USBD_GetEpDesc>
 8019506:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8019508:	2181      	movs	r1, #129	@ 0x81
 801950a:	4813      	ldr	r0, [pc, #76]	@ (8019558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801950c:	f000 fcd5 	bl	8019eba <USBD_GetEpDesc>
 8019510:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8019512:	697b      	ldr	r3, [r7, #20]
 8019514:	2b00      	cmp	r3, #0
 8019516:	d002      	beq.n	801951e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8019518:	697b      	ldr	r3, [r7, #20]
 801951a:	2210      	movs	r2, #16
 801951c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d006      	beq.n	8019532 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8019524:	693b      	ldr	r3, [r7, #16]
 8019526:	2200      	movs	r2, #0
 8019528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801952c:	711a      	strb	r2, [r3, #4]
 801952e:	2200      	movs	r2, #0
 8019530:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d006      	beq.n	8019546 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	2200      	movs	r2, #0
 801953c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019540:	711a      	strb	r2, [r3, #4]
 8019542:	2200      	movs	r2, #0
 8019544:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	2243      	movs	r2, #67	@ 0x43
 801954a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801954c:	4b02      	ldr	r3, [pc, #8]	@ (8019558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801954e:	4618      	mov	r0, r3
 8019550:	3718      	adds	r7, #24
 8019552:	46bd      	mov	sp, r7
 8019554:	bd80      	pop	{r7, pc}
 8019556:	bf00      	nop
 8019558:	24000294 	.word	0x24000294

0801955c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801955c:	b480      	push	{r7}
 801955e:	b083      	sub	sp, #12
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	220a      	movs	r2, #10
 8019568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801956a:	4b03      	ldr	r3, [pc, #12]	@ (8019578 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801956c:	4618      	mov	r0, r3
 801956e:	370c      	adds	r7, #12
 8019570:	46bd      	mov	sp, r7
 8019572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019576:	4770      	bx	lr
 8019578:	24000250 	.word	0x24000250

0801957c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801957c:	b480      	push	{r7}
 801957e:	b083      	sub	sp, #12
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8019586:	683b      	ldr	r3, [r7, #0]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d101      	bne.n	8019590 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801958c:	2303      	movs	r3, #3
 801958e:	e009      	b.n	80195a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8019596:	687a      	ldr	r2, [r7, #4]
 8019598:	33b0      	adds	r3, #176	@ 0xb0
 801959a:	009b      	lsls	r3, r3, #2
 801959c:	4413      	add	r3, r2
 801959e:	683a      	ldr	r2, [r7, #0]
 80195a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80195a2:	2300      	movs	r3, #0
}
 80195a4:	4618      	mov	r0, r3
 80195a6:	370c      	adds	r7, #12
 80195a8:	46bd      	mov	sp, r7
 80195aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ae:	4770      	bx	lr

080195b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80195b0:	b480      	push	{r7}
 80195b2:	b087      	sub	sp, #28
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	60f8      	str	r0, [r7, #12]
 80195b8:	60b9      	str	r1, [r7, #8]
 80195ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	32b0      	adds	r2, #176	@ 0xb0
 80195c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80195ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80195cc:	697b      	ldr	r3, [r7, #20]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d101      	bne.n	80195d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80195d2:	2303      	movs	r3, #3
 80195d4:	e008      	b.n	80195e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80195d6:	697b      	ldr	r3, [r7, #20]
 80195d8:	68ba      	ldr	r2, [r7, #8]
 80195da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80195de:	697b      	ldr	r3, [r7, #20]
 80195e0:	687a      	ldr	r2, [r7, #4]
 80195e2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80195e6:	2300      	movs	r3, #0
}
 80195e8:	4618      	mov	r0, r3
 80195ea:	371c      	adds	r7, #28
 80195ec:	46bd      	mov	sp, r7
 80195ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f2:	4770      	bx	lr

080195f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80195f4:	b480      	push	{r7}
 80195f6:	b085      	sub	sp, #20
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
 80195fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	32b0      	adds	r2, #176	@ 0xb0
 8019608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801960c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d101      	bne.n	8019618 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8019614:	2303      	movs	r3, #3
 8019616:	e004      	b.n	8019622 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	683a      	ldr	r2, [r7, #0]
 801961c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8019620:	2300      	movs	r3, #0
}
 8019622:	4618      	mov	r0, r3
 8019624:	3714      	adds	r7, #20
 8019626:	46bd      	mov	sp, r7
 8019628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962c:	4770      	bx	lr
	...

08019630 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b084      	sub	sp, #16
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	32b0      	adds	r2, #176	@ 0xb0
 8019642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019646:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8019648:	2301      	movs	r3, #1
 801964a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801964c:	68bb      	ldr	r3, [r7, #8]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d101      	bne.n	8019656 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8019652:	2303      	movs	r3, #3
 8019654:	e025      	b.n	80196a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8019656:	68bb      	ldr	r3, [r7, #8]
 8019658:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801965c:	2b00      	cmp	r3, #0
 801965e:	d11f      	bne.n	80196a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	2201      	movs	r2, #1
 8019664:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8019668:	4b10      	ldr	r3, [pc, #64]	@ (80196ac <USBD_CDC_TransmitPacket+0x7c>)
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	f003 020f 	and.w	r2, r3, #15
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8019676:	6878      	ldr	r0, [r7, #4]
 8019678:	4613      	mov	r3, r2
 801967a:	009b      	lsls	r3, r3, #2
 801967c:	4413      	add	r3, r2
 801967e:	009b      	lsls	r3, r3, #2
 8019680:	4403      	add	r3, r0
 8019682:	3318      	adds	r3, #24
 8019684:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8019686:	4b09      	ldr	r3, [pc, #36]	@ (80196ac <USBD_CDC_TransmitPacket+0x7c>)
 8019688:	7819      	ldrb	r1, [r3, #0]
 801968a:	68bb      	ldr	r3, [r7, #8]
 801968c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8019696:	6878      	ldr	r0, [r7, #4]
 8019698:	f002 f82d 	bl	801b6f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 801969c:	2300      	movs	r3, #0
 801969e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80196a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80196a2:	4618      	mov	r0, r3
 80196a4:	3710      	adds	r7, #16
 80196a6:	46bd      	mov	sp, r7
 80196a8:	bd80      	pop	{r7, pc}
 80196aa:	bf00      	nop
 80196ac:	240002d7 	.word	0x240002d7

080196b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b084      	sub	sp, #16
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	32b0      	adds	r2, #176	@ 0xb0
 80196c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80196c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	32b0      	adds	r2, #176	@ 0xb0
 80196d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d101      	bne.n	80196de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80196da:	2303      	movs	r3, #3
 80196dc:	e018      	b.n	8019710 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	7c1b      	ldrb	r3, [r3, #16]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d10a      	bne.n	80196fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80196e6:	4b0c      	ldr	r3, [pc, #48]	@ (8019718 <USBD_CDC_ReceivePacket+0x68>)
 80196e8:	7819      	ldrb	r1, [r3, #0]
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80196f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80196f4:	6878      	ldr	r0, [r7, #4]
 80196f6:	f002 f81f 	bl	801b738 <USBD_LL_PrepareReceive>
 80196fa:	e008      	b.n	801970e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80196fc:	4b06      	ldr	r3, [pc, #24]	@ (8019718 <USBD_CDC_ReceivePacket+0x68>)
 80196fe:	7819      	ldrb	r1, [r3, #0]
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019706:	2340      	movs	r3, #64	@ 0x40
 8019708:	6878      	ldr	r0, [r7, #4]
 801970a:	f002 f815 	bl	801b738 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801970e:	2300      	movs	r3, #0
}
 8019710:	4618      	mov	r0, r3
 8019712:	3710      	adds	r7, #16
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	240002d8 	.word	0x240002d8

0801971c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b086      	sub	sp, #24
 8019720:	af00      	add	r7, sp, #0
 8019722:	60f8      	str	r0, [r7, #12]
 8019724:	60b9      	str	r1, [r7, #8]
 8019726:	4613      	mov	r3, r2
 8019728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d101      	bne.n	8019734 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8019730:	2303      	movs	r3, #3
 8019732:	e01f      	b.n	8019774 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	2200      	movs	r2, #0
 8019738:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	2200      	movs	r2, #0
 8019740:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	2200      	movs	r2, #0
 8019748:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801974c:	68bb      	ldr	r3, [r7, #8]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d003      	beq.n	801975a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	68ba      	ldr	r2, [r7, #8]
 8019756:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	2201      	movs	r2, #1
 801975e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	79fa      	ldrb	r2, [r7, #7]
 8019766:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8019768:	68f8      	ldr	r0, [r7, #12]
 801976a:	f001 fe8b 	bl	801b484 <USBD_LL_Init>
 801976e:	4603      	mov	r3, r0
 8019770:	75fb      	strb	r3, [r7, #23]

  return ret;
 8019772:	7dfb      	ldrb	r3, [r7, #23]
}
 8019774:	4618      	mov	r0, r3
 8019776:	3718      	adds	r7, #24
 8019778:	46bd      	mov	sp, r7
 801977a:	bd80      	pop	{r7, pc}

0801977c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b084      	sub	sp, #16
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
 8019784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019786:	2300      	movs	r3, #0
 8019788:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d101      	bne.n	8019794 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8019790:	2303      	movs	r3, #3
 8019792:	e025      	b.n	80197e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	683a      	ldr	r2, [r7, #0]
 8019798:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	32ae      	adds	r2, #174	@ 0xae
 80197a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80197aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d00f      	beq.n	80197d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	32ae      	adds	r2, #174	@ 0xae
 80197ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80197be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197c0:	f107 020e 	add.w	r2, r7, #14
 80197c4:	4610      	mov	r0, r2
 80197c6:	4798      	blx	r3
 80197c8:	4602      	mov	r2, r0
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80197d6:	1c5a      	adds	r2, r3, #1
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80197de:	2300      	movs	r3, #0
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	3710      	adds	r7, #16
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}

080197e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b082      	sub	sp, #8
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80197f0:	6878      	ldr	r0, [r7, #4]
 80197f2:	f001 fe97 	bl	801b524 <USBD_LL_Start>
 80197f6:	4603      	mov	r3, r0
}
 80197f8:	4618      	mov	r0, r3
 80197fa:	3708      	adds	r7, #8
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8019800:	b480      	push	{r7}
 8019802:	b083      	sub	sp, #12
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019808:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801980a:	4618      	mov	r0, r3
 801980c:	370c      	adds	r7, #12
 801980e:	46bd      	mov	sp, r7
 8019810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019814:	4770      	bx	lr

08019816 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019816:	b580      	push	{r7, lr}
 8019818:	b084      	sub	sp, #16
 801981a:	af00      	add	r7, sp, #0
 801981c:	6078      	str	r0, [r7, #4]
 801981e:	460b      	mov	r3, r1
 8019820:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8019822:	2300      	movs	r3, #0
 8019824:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801982c:	2b00      	cmp	r3, #0
 801982e:	d009      	beq.n	8019844 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	78fa      	ldrb	r2, [r7, #3]
 801983a:	4611      	mov	r1, r2
 801983c:	6878      	ldr	r0, [r7, #4]
 801983e:	4798      	blx	r3
 8019840:	4603      	mov	r3, r0
 8019842:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8019844:	7bfb      	ldrb	r3, [r7, #15]
}
 8019846:	4618      	mov	r0, r3
 8019848:	3710      	adds	r7, #16
 801984a:	46bd      	mov	sp, r7
 801984c:	bd80      	pop	{r7, pc}

0801984e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801984e:	b580      	push	{r7, lr}
 8019850:	b084      	sub	sp, #16
 8019852:	af00      	add	r7, sp, #0
 8019854:	6078      	str	r0, [r7, #4]
 8019856:	460b      	mov	r3, r1
 8019858:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801985a:	2300      	movs	r3, #0
 801985c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019864:	685b      	ldr	r3, [r3, #4]
 8019866:	78fa      	ldrb	r2, [r7, #3]
 8019868:	4611      	mov	r1, r2
 801986a:	6878      	ldr	r0, [r7, #4]
 801986c:	4798      	blx	r3
 801986e:	4603      	mov	r3, r0
 8019870:	2b00      	cmp	r3, #0
 8019872:	d001      	beq.n	8019878 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8019874:	2303      	movs	r3, #3
 8019876:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8019878:	7bfb      	ldrb	r3, [r7, #15]
}
 801987a:	4618      	mov	r0, r3
 801987c:	3710      	adds	r7, #16
 801987e:	46bd      	mov	sp, r7
 8019880:	bd80      	pop	{r7, pc}

08019882 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8019882:	b580      	push	{r7, lr}
 8019884:	b084      	sub	sp, #16
 8019886:	af00      	add	r7, sp, #0
 8019888:	6078      	str	r0, [r7, #4]
 801988a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8019892:	6839      	ldr	r1, [r7, #0]
 8019894:	4618      	mov	r0, r3
 8019896:	f001 f936 	bl	801ab06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	2201      	movs	r2, #1
 801989e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80198a8:	461a      	mov	r2, r3
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80198b6:	f003 031f 	and.w	r3, r3, #31
 80198ba:	2b02      	cmp	r3, #2
 80198bc:	d01a      	beq.n	80198f4 <USBD_LL_SetupStage+0x72>
 80198be:	2b02      	cmp	r3, #2
 80198c0:	d822      	bhi.n	8019908 <USBD_LL_SetupStage+0x86>
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d002      	beq.n	80198cc <USBD_LL_SetupStage+0x4a>
 80198c6:	2b01      	cmp	r3, #1
 80198c8:	d00a      	beq.n	80198e0 <USBD_LL_SetupStage+0x5e>
 80198ca:	e01d      	b.n	8019908 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80198d2:	4619      	mov	r1, r3
 80198d4:	6878      	ldr	r0, [r7, #4]
 80198d6:	f000 fb63 	bl	8019fa0 <USBD_StdDevReq>
 80198da:	4603      	mov	r3, r0
 80198dc:	73fb      	strb	r3, [r7, #15]
      break;
 80198de:	e020      	b.n	8019922 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80198e6:	4619      	mov	r1, r3
 80198e8:	6878      	ldr	r0, [r7, #4]
 80198ea:	f000 fbcb 	bl	801a084 <USBD_StdItfReq>
 80198ee:	4603      	mov	r3, r0
 80198f0:	73fb      	strb	r3, [r7, #15]
      break;
 80198f2:	e016      	b.n	8019922 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80198fa:	4619      	mov	r1, r3
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f000 fc2d 	bl	801a15c <USBD_StdEPReq>
 8019902:	4603      	mov	r3, r0
 8019904:	73fb      	strb	r3, [r7, #15]
      break;
 8019906:	e00c      	b.n	8019922 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801990e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8019912:	b2db      	uxtb	r3, r3
 8019914:	4619      	mov	r1, r3
 8019916:	6878      	ldr	r0, [r7, #4]
 8019918:	f001 fe64 	bl	801b5e4 <USBD_LL_StallEP>
 801991c:	4603      	mov	r3, r0
 801991e:	73fb      	strb	r3, [r7, #15]
      break;
 8019920:	bf00      	nop
  }

  return ret;
 8019922:	7bfb      	ldrb	r3, [r7, #15]
}
 8019924:	4618      	mov	r0, r3
 8019926:	3710      	adds	r7, #16
 8019928:	46bd      	mov	sp, r7
 801992a:	bd80      	pop	{r7, pc}

0801992c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801992c:	b580      	push	{r7, lr}
 801992e:	b086      	sub	sp, #24
 8019930:	af00      	add	r7, sp, #0
 8019932:	60f8      	str	r0, [r7, #12]
 8019934:	460b      	mov	r3, r1
 8019936:	607a      	str	r2, [r7, #4]
 8019938:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801993a:	2300      	movs	r3, #0
 801993c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801993e:	7afb      	ldrb	r3, [r7, #11]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d16e      	bne.n	8019a22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801994a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8019952:	2b03      	cmp	r3, #3
 8019954:	f040 8098 	bne.w	8019a88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8019958:	693b      	ldr	r3, [r7, #16]
 801995a:	689a      	ldr	r2, [r3, #8]
 801995c:	693b      	ldr	r3, [r7, #16]
 801995e:	68db      	ldr	r3, [r3, #12]
 8019960:	429a      	cmp	r2, r3
 8019962:	d913      	bls.n	801998c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8019964:	693b      	ldr	r3, [r7, #16]
 8019966:	689a      	ldr	r2, [r3, #8]
 8019968:	693b      	ldr	r3, [r7, #16]
 801996a:	68db      	ldr	r3, [r3, #12]
 801996c:	1ad2      	subs	r2, r2, r3
 801996e:	693b      	ldr	r3, [r7, #16]
 8019970:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8019972:	693b      	ldr	r3, [r7, #16]
 8019974:	68da      	ldr	r2, [r3, #12]
 8019976:	693b      	ldr	r3, [r7, #16]
 8019978:	689b      	ldr	r3, [r3, #8]
 801997a:	4293      	cmp	r3, r2
 801997c:	bf28      	it	cs
 801997e:	4613      	movcs	r3, r2
 8019980:	461a      	mov	r2, r3
 8019982:	6879      	ldr	r1, [r7, #4]
 8019984:	68f8      	ldr	r0, [r7, #12]
 8019986:	f001 f9be 	bl	801ad06 <USBD_CtlContinueRx>
 801998a:	e07d      	b.n	8019a88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8019992:	f003 031f 	and.w	r3, r3, #31
 8019996:	2b02      	cmp	r3, #2
 8019998:	d014      	beq.n	80199c4 <USBD_LL_DataOutStage+0x98>
 801999a:	2b02      	cmp	r3, #2
 801999c:	d81d      	bhi.n	80199da <USBD_LL_DataOutStage+0xae>
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d002      	beq.n	80199a8 <USBD_LL_DataOutStage+0x7c>
 80199a2:	2b01      	cmp	r3, #1
 80199a4:	d003      	beq.n	80199ae <USBD_LL_DataOutStage+0x82>
 80199a6:	e018      	b.n	80199da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80199a8:	2300      	movs	r3, #0
 80199aa:	75bb      	strb	r3, [r7, #22]
            break;
 80199ac:	e018      	b.n	80199e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80199b4:	b2db      	uxtb	r3, r3
 80199b6:	4619      	mov	r1, r3
 80199b8:	68f8      	ldr	r0, [r7, #12]
 80199ba:	f000 fa64 	bl	8019e86 <USBD_CoreFindIF>
 80199be:	4603      	mov	r3, r0
 80199c0:	75bb      	strb	r3, [r7, #22]
            break;
 80199c2:	e00d      	b.n	80199e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80199ca:	b2db      	uxtb	r3, r3
 80199cc:	4619      	mov	r1, r3
 80199ce:	68f8      	ldr	r0, [r7, #12]
 80199d0:	f000 fa66 	bl	8019ea0 <USBD_CoreFindEP>
 80199d4:	4603      	mov	r3, r0
 80199d6:	75bb      	strb	r3, [r7, #22]
            break;
 80199d8:	e002      	b.n	80199e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80199da:	2300      	movs	r3, #0
 80199dc:	75bb      	strb	r3, [r7, #22]
            break;
 80199de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80199e0:	7dbb      	ldrb	r3, [r7, #22]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d119      	bne.n	8019a1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80199ec:	b2db      	uxtb	r3, r3
 80199ee:	2b03      	cmp	r3, #3
 80199f0:	d113      	bne.n	8019a1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80199f2:	7dba      	ldrb	r2, [r7, #22]
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	32ae      	adds	r2, #174	@ 0xae
 80199f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80199fc:	691b      	ldr	r3, [r3, #16]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d00b      	beq.n	8019a1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8019a02:	7dba      	ldrb	r2, [r7, #22]
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8019a0a:	7dba      	ldrb	r2, [r7, #22]
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	32ae      	adds	r2, #174	@ 0xae
 8019a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019a14:	691b      	ldr	r3, [r3, #16]
 8019a16:	68f8      	ldr	r0, [r7, #12]
 8019a18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8019a1a:	68f8      	ldr	r0, [r7, #12]
 8019a1c:	f001 f984 	bl	801ad28 <USBD_CtlSendStatus>
 8019a20:	e032      	b.n	8019a88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8019a22:	7afb      	ldrb	r3, [r7, #11]
 8019a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019a28:	b2db      	uxtb	r3, r3
 8019a2a:	4619      	mov	r1, r3
 8019a2c:	68f8      	ldr	r0, [r7, #12]
 8019a2e:	f000 fa37 	bl	8019ea0 <USBD_CoreFindEP>
 8019a32:	4603      	mov	r3, r0
 8019a34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019a36:	7dbb      	ldrb	r3, [r7, #22]
 8019a38:	2bff      	cmp	r3, #255	@ 0xff
 8019a3a:	d025      	beq.n	8019a88 <USBD_LL_DataOutStage+0x15c>
 8019a3c:	7dbb      	ldrb	r3, [r7, #22]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d122      	bne.n	8019a88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019a48:	b2db      	uxtb	r3, r3
 8019a4a:	2b03      	cmp	r3, #3
 8019a4c:	d117      	bne.n	8019a7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8019a4e:	7dba      	ldrb	r2, [r7, #22]
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	32ae      	adds	r2, #174	@ 0xae
 8019a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019a58:	699b      	ldr	r3, [r3, #24]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d00f      	beq.n	8019a7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8019a5e:	7dba      	ldrb	r2, [r7, #22]
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8019a66:	7dba      	ldrb	r2, [r7, #22]
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	32ae      	adds	r2, #174	@ 0xae
 8019a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019a70:	699b      	ldr	r3, [r3, #24]
 8019a72:	7afa      	ldrb	r2, [r7, #11]
 8019a74:	4611      	mov	r1, r2
 8019a76:	68f8      	ldr	r0, [r7, #12]
 8019a78:	4798      	blx	r3
 8019a7a:	4603      	mov	r3, r0
 8019a7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8019a7e:	7dfb      	ldrb	r3, [r7, #23]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d001      	beq.n	8019a88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8019a84:	7dfb      	ldrb	r3, [r7, #23]
 8019a86:	e000      	b.n	8019a8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8019a88:	2300      	movs	r3, #0
}
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	3718      	adds	r7, #24
 8019a8e:	46bd      	mov	sp, r7
 8019a90:	bd80      	pop	{r7, pc}

08019a92 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8019a92:	b580      	push	{r7, lr}
 8019a94:	b086      	sub	sp, #24
 8019a96:	af00      	add	r7, sp, #0
 8019a98:	60f8      	str	r0, [r7, #12]
 8019a9a:	460b      	mov	r3, r1
 8019a9c:	607a      	str	r2, [r7, #4]
 8019a9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8019aa0:	7afb      	ldrb	r3, [r7, #11]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d16f      	bne.n	8019b86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	3314      	adds	r3, #20
 8019aaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8019ab2:	2b02      	cmp	r3, #2
 8019ab4:	d15a      	bne.n	8019b6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8019ab6:	693b      	ldr	r3, [r7, #16]
 8019ab8:	689a      	ldr	r2, [r3, #8]
 8019aba:	693b      	ldr	r3, [r7, #16]
 8019abc:	68db      	ldr	r3, [r3, #12]
 8019abe:	429a      	cmp	r2, r3
 8019ac0:	d914      	bls.n	8019aec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8019ac2:	693b      	ldr	r3, [r7, #16]
 8019ac4:	689a      	ldr	r2, [r3, #8]
 8019ac6:	693b      	ldr	r3, [r7, #16]
 8019ac8:	68db      	ldr	r3, [r3, #12]
 8019aca:	1ad2      	subs	r2, r2, r3
 8019acc:	693b      	ldr	r3, [r7, #16]
 8019ace:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8019ad0:	693b      	ldr	r3, [r7, #16]
 8019ad2:	689b      	ldr	r3, [r3, #8]
 8019ad4:	461a      	mov	r2, r3
 8019ad6:	6879      	ldr	r1, [r7, #4]
 8019ad8:	68f8      	ldr	r0, [r7, #12]
 8019ada:	f001 f8e6 	bl	801acaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019ade:	2300      	movs	r3, #0
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	2100      	movs	r1, #0
 8019ae4:	68f8      	ldr	r0, [r7, #12]
 8019ae6:	f001 fe27 	bl	801b738 <USBD_LL_PrepareReceive>
 8019aea:	e03f      	b.n	8019b6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8019aec:	693b      	ldr	r3, [r7, #16]
 8019aee:	68da      	ldr	r2, [r3, #12]
 8019af0:	693b      	ldr	r3, [r7, #16]
 8019af2:	689b      	ldr	r3, [r3, #8]
 8019af4:	429a      	cmp	r2, r3
 8019af6:	d11c      	bne.n	8019b32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8019af8:	693b      	ldr	r3, [r7, #16]
 8019afa:	685a      	ldr	r2, [r3, #4]
 8019afc:	693b      	ldr	r3, [r7, #16]
 8019afe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d316      	bcc.n	8019b32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8019b04:	693b      	ldr	r3, [r7, #16]
 8019b06:	685a      	ldr	r2, [r3, #4]
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8019b0e:	429a      	cmp	r2, r3
 8019b10:	d20f      	bcs.n	8019b32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8019b12:	2200      	movs	r2, #0
 8019b14:	2100      	movs	r1, #0
 8019b16:	68f8      	ldr	r0, [r7, #12]
 8019b18:	f001 f8c7 	bl	801acaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	2200      	movs	r2, #0
 8019b20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019b24:	2300      	movs	r3, #0
 8019b26:	2200      	movs	r2, #0
 8019b28:	2100      	movs	r1, #0
 8019b2a:	68f8      	ldr	r0, [r7, #12]
 8019b2c:	f001 fe04 	bl	801b738 <USBD_LL_PrepareReceive>
 8019b30:	e01c      	b.n	8019b6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019b38:	b2db      	uxtb	r3, r3
 8019b3a:	2b03      	cmp	r3, #3
 8019b3c:	d10f      	bne.n	8019b5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019b44:	68db      	ldr	r3, [r3, #12]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d009      	beq.n	8019b5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	2200      	movs	r2, #0
 8019b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019b58:	68db      	ldr	r3, [r3, #12]
 8019b5a:	68f8      	ldr	r0, [r7, #12]
 8019b5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8019b5e:	2180      	movs	r1, #128	@ 0x80
 8019b60:	68f8      	ldr	r0, [r7, #12]
 8019b62:	f001 fd3f 	bl	801b5e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8019b66:	68f8      	ldr	r0, [r7, #12]
 8019b68:	f001 f8f1 	bl	801ad4e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d03a      	beq.n	8019bec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8019b76:	68f8      	ldr	r0, [r7, #12]
 8019b78:	f7ff fe42 	bl	8019800 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	2200      	movs	r2, #0
 8019b80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8019b84:	e032      	b.n	8019bec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8019b86:	7afb      	ldrb	r3, [r7, #11]
 8019b88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019b8c:	b2db      	uxtb	r3, r3
 8019b8e:	4619      	mov	r1, r3
 8019b90:	68f8      	ldr	r0, [r7, #12]
 8019b92:	f000 f985 	bl	8019ea0 <USBD_CoreFindEP>
 8019b96:	4603      	mov	r3, r0
 8019b98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019b9a:	7dfb      	ldrb	r3, [r7, #23]
 8019b9c:	2bff      	cmp	r3, #255	@ 0xff
 8019b9e:	d025      	beq.n	8019bec <USBD_LL_DataInStage+0x15a>
 8019ba0:	7dfb      	ldrb	r3, [r7, #23]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d122      	bne.n	8019bec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019bac:	b2db      	uxtb	r3, r3
 8019bae:	2b03      	cmp	r3, #3
 8019bb0:	d11c      	bne.n	8019bec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8019bb2:	7dfa      	ldrb	r2, [r7, #23]
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	32ae      	adds	r2, #174	@ 0xae
 8019bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019bbc:	695b      	ldr	r3, [r3, #20]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d014      	beq.n	8019bec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8019bc2:	7dfa      	ldrb	r2, [r7, #23]
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8019bca:	7dfa      	ldrb	r2, [r7, #23]
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	32ae      	adds	r2, #174	@ 0xae
 8019bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019bd4:	695b      	ldr	r3, [r3, #20]
 8019bd6:	7afa      	ldrb	r2, [r7, #11]
 8019bd8:	4611      	mov	r1, r2
 8019bda:	68f8      	ldr	r0, [r7, #12]
 8019bdc:	4798      	blx	r3
 8019bde:	4603      	mov	r3, r0
 8019be0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8019be2:	7dbb      	ldrb	r3, [r7, #22]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d001      	beq.n	8019bec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8019be8:	7dbb      	ldrb	r3, [r7, #22]
 8019bea:	e000      	b.n	8019bee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8019bec:	2300      	movs	r3, #0
}
 8019bee:	4618      	mov	r0, r3
 8019bf0:	3718      	adds	r7, #24
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	bd80      	pop	{r7, pc}

08019bf6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8019bf6:	b580      	push	{r7, lr}
 8019bf8:	b084      	sub	sp, #16
 8019bfa:	af00      	add	r7, sp, #0
 8019bfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2201      	movs	r2, #1
 8019c06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	2200      	movs	r2, #0
 8019c16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	2200      	movs	r2, #0
 8019c24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d014      	beq.n	8019c5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d00e      	beq.n	8019c5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019c44:	685b      	ldr	r3, [r3, #4]
 8019c46:	687a      	ldr	r2, [r7, #4]
 8019c48:	6852      	ldr	r2, [r2, #4]
 8019c4a:	b2d2      	uxtb	r2, r2
 8019c4c:	4611      	mov	r1, r2
 8019c4e:	6878      	ldr	r0, [r7, #4]
 8019c50:	4798      	blx	r3
 8019c52:	4603      	mov	r3, r0
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d001      	beq.n	8019c5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8019c58:	2303      	movs	r3, #3
 8019c5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8019c5c:	2340      	movs	r3, #64	@ 0x40
 8019c5e:	2200      	movs	r2, #0
 8019c60:	2100      	movs	r1, #0
 8019c62:	6878      	ldr	r0, [r7, #4]
 8019c64:	f001 fc79 	bl	801b55a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	2201      	movs	r2, #1
 8019c6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2240      	movs	r2, #64	@ 0x40
 8019c74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8019c78:	2340      	movs	r3, #64	@ 0x40
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	2180      	movs	r1, #128	@ 0x80
 8019c7e:	6878      	ldr	r0, [r7, #4]
 8019c80:	f001 fc6b 	bl	801b55a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	2201      	movs	r2, #1
 8019c88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2240      	movs	r2, #64	@ 0x40
 8019c8e:	621a      	str	r2, [r3, #32]

  return ret;
 8019c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	3710      	adds	r7, #16
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}

08019c9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8019c9a:	b480      	push	{r7}
 8019c9c:	b083      	sub	sp, #12
 8019c9e:	af00      	add	r7, sp, #0
 8019ca0:	6078      	str	r0, [r7, #4]
 8019ca2:	460b      	mov	r3, r1
 8019ca4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	78fa      	ldrb	r2, [r7, #3]
 8019caa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8019cac:	2300      	movs	r3, #0
}
 8019cae:	4618      	mov	r0, r3
 8019cb0:	370c      	adds	r7, #12
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb8:	4770      	bx	lr

08019cba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8019cba:	b480      	push	{r7}
 8019cbc:	b083      	sub	sp, #12
 8019cbe:	af00      	add	r7, sp, #0
 8019cc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019cc8:	b2db      	uxtb	r3, r3
 8019cca:	2b04      	cmp	r3, #4
 8019ccc:	d006      	beq.n	8019cdc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019cd4:	b2da      	uxtb	r2, r3
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	2204      	movs	r2, #4
 8019ce0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8019ce4:	2300      	movs	r3, #0
}
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	370c      	adds	r7, #12
 8019cea:	46bd      	mov	sp, r7
 8019cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf0:	4770      	bx	lr

08019cf2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8019cf2:	b480      	push	{r7}
 8019cf4:	b083      	sub	sp, #12
 8019cf6:	af00      	add	r7, sp, #0
 8019cf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019d00:	b2db      	uxtb	r3, r3
 8019d02:	2b04      	cmp	r3, #4
 8019d04:	d106      	bne.n	8019d14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8019d0c:	b2da      	uxtb	r2, r3
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8019d14:	2300      	movs	r3, #0
}
 8019d16:	4618      	mov	r0, r3
 8019d18:	370c      	adds	r7, #12
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d20:	4770      	bx	lr

08019d22 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8019d22:	b580      	push	{r7, lr}
 8019d24:	b082      	sub	sp, #8
 8019d26:	af00      	add	r7, sp, #0
 8019d28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	2b03      	cmp	r3, #3
 8019d34:	d110      	bne.n	8019d58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d00b      	beq.n	8019d58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019d46:	69db      	ldr	r3, [r3, #28]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d005      	beq.n	8019d58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019d52:	69db      	ldr	r3, [r3, #28]
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8019d58:	2300      	movs	r3, #0
}
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	3708      	adds	r7, #8
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}

08019d62 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8019d62:	b580      	push	{r7, lr}
 8019d64:	b082      	sub	sp, #8
 8019d66:	af00      	add	r7, sp, #0
 8019d68:	6078      	str	r0, [r7, #4]
 8019d6a:	460b      	mov	r3, r1
 8019d6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	32ae      	adds	r2, #174	@ 0xae
 8019d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d101      	bne.n	8019d84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8019d80:	2303      	movs	r3, #3
 8019d82:	e01c      	b.n	8019dbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019d8a:	b2db      	uxtb	r3, r3
 8019d8c:	2b03      	cmp	r3, #3
 8019d8e:	d115      	bne.n	8019dbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	32ae      	adds	r2, #174	@ 0xae
 8019d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d9e:	6a1b      	ldr	r3, [r3, #32]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d00b      	beq.n	8019dbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	32ae      	adds	r2, #174	@ 0xae
 8019dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019db2:	6a1b      	ldr	r3, [r3, #32]
 8019db4:	78fa      	ldrb	r2, [r7, #3]
 8019db6:	4611      	mov	r1, r2
 8019db8:	6878      	ldr	r0, [r7, #4]
 8019dba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8019dbc:	2300      	movs	r3, #0
}
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	3708      	adds	r7, #8
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd80      	pop	{r7, pc}

08019dc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8019dc6:	b580      	push	{r7, lr}
 8019dc8:	b082      	sub	sp, #8
 8019dca:	af00      	add	r7, sp, #0
 8019dcc:	6078      	str	r0, [r7, #4]
 8019dce:	460b      	mov	r3, r1
 8019dd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	32ae      	adds	r2, #174	@ 0xae
 8019ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d101      	bne.n	8019de8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8019de4:	2303      	movs	r3, #3
 8019de6:	e01c      	b.n	8019e22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019dee:	b2db      	uxtb	r3, r3
 8019df0:	2b03      	cmp	r3, #3
 8019df2:	d115      	bne.n	8019e20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	32ae      	adds	r2, #174	@ 0xae
 8019dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d00b      	beq.n	8019e20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	32ae      	adds	r2, #174	@ 0xae
 8019e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e18:	78fa      	ldrb	r2, [r7, #3]
 8019e1a:	4611      	mov	r1, r2
 8019e1c:	6878      	ldr	r0, [r7, #4]
 8019e1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8019e20:	2300      	movs	r3, #0
}
 8019e22:	4618      	mov	r0, r3
 8019e24:	3708      	adds	r7, #8
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}

08019e2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8019e2a:	b480      	push	{r7}
 8019e2c:	b083      	sub	sp, #12
 8019e2e:	af00      	add	r7, sp, #0
 8019e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019e32:	2300      	movs	r3, #0
}
 8019e34:	4618      	mov	r0, r3
 8019e36:	370c      	adds	r7, #12
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e3e:	4770      	bx	lr

08019e40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b084      	sub	sp, #16
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8019e48:	2300      	movs	r3, #0
 8019e4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	2201      	movs	r2, #1
 8019e50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d00e      	beq.n	8019e7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019e64:	685b      	ldr	r3, [r3, #4]
 8019e66:	687a      	ldr	r2, [r7, #4]
 8019e68:	6852      	ldr	r2, [r2, #4]
 8019e6a:	b2d2      	uxtb	r2, r2
 8019e6c:	4611      	mov	r1, r2
 8019e6e:	6878      	ldr	r0, [r7, #4]
 8019e70:	4798      	blx	r3
 8019e72:	4603      	mov	r3, r0
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d001      	beq.n	8019e7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8019e78:	2303      	movs	r3, #3
 8019e7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8019e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e7e:	4618      	mov	r0, r3
 8019e80:	3710      	adds	r7, #16
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bd80      	pop	{r7, pc}

08019e86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8019e86:	b480      	push	{r7}
 8019e88:	b083      	sub	sp, #12
 8019e8a:	af00      	add	r7, sp, #0
 8019e8c:	6078      	str	r0, [r7, #4]
 8019e8e:	460b      	mov	r3, r1
 8019e90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8019e92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8019e94:	4618      	mov	r0, r3
 8019e96:	370c      	adds	r7, #12
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9e:	4770      	bx	lr

08019ea0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8019ea0:	b480      	push	{r7}
 8019ea2:	b083      	sub	sp, #12
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	460b      	mov	r3, r1
 8019eaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8019eac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8019eae:	4618      	mov	r0, r3
 8019eb0:	370c      	adds	r7, #12
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb8:	4770      	bx	lr

08019eba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8019eba:	b580      	push	{r7, lr}
 8019ebc:	b086      	sub	sp, #24
 8019ebe:	af00      	add	r7, sp, #0
 8019ec0:	6078      	str	r0, [r7, #4]
 8019ec2:	460b      	mov	r3, r1
 8019ec4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8019ece:	2300      	movs	r3, #0
 8019ed0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	885b      	ldrh	r3, [r3, #2]
 8019ed6:	b29b      	uxth	r3, r3
 8019ed8:	68fa      	ldr	r2, [r7, #12]
 8019eda:	7812      	ldrb	r2, [r2, #0]
 8019edc:	4293      	cmp	r3, r2
 8019ede:	d91f      	bls.n	8019f20 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	781b      	ldrb	r3, [r3, #0]
 8019ee4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8019ee6:	e013      	b.n	8019f10 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8019ee8:	f107 030a 	add.w	r3, r7, #10
 8019eec:	4619      	mov	r1, r3
 8019eee:	6978      	ldr	r0, [r7, #20]
 8019ef0:	f000 f81b 	bl	8019f2a <USBD_GetNextDesc>
 8019ef4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	785b      	ldrb	r3, [r3, #1]
 8019efa:	2b05      	cmp	r3, #5
 8019efc:	d108      	bne.n	8019f10 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8019efe:	697b      	ldr	r3, [r7, #20]
 8019f00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8019f02:	693b      	ldr	r3, [r7, #16]
 8019f04:	789b      	ldrb	r3, [r3, #2]
 8019f06:	78fa      	ldrb	r2, [r7, #3]
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	d008      	beq.n	8019f1e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	885b      	ldrh	r3, [r3, #2]
 8019f14:	b29a      	uxth	r2, r3
 8019f16:	897b      	ldrh	r3, [r7, #10]
 8019f18:	429a      	cmp	r2, r3
 8019f1a:	d8e5      	bhi.n	8019ee8 <USBD_GetEpDesc+0x2e>
 8019f1c:	e000      	b.n	8019f20 <USBD_GetEpDesc+0x66>
          break;
 8019f1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8019f20:	693b      	ldr	r3, [r7, #16]
}
 8019f22:	4618      	mov	r0, r3
 8019f24:	3718      	adds	r7, #24
 8019f26:	46bd      	mov	sp, r7
 8019f28:	bd80      	pop	{r7, pc}

08019f2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8019f2a:	b480      	push	{r7}
 8019f2c:	b085      	sub	sp, #20
 8019f2e:	af00      	add	r7, sp, #0
 8019f30:	6078      	str	r0, [r7, #4]
 8019f32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	881b      	ldrh	r3, [r3, #0]
 8019f3c:	68fa      	ldr	r2, [r7, #12]
 8019f3e:	7812      	ldrb	r2, [r2, #0]
 8019f40:	4413      	add	r3, r2
 8019f42:	b29a      	uxth	r2, r3
 8019f44:	683b      	ldr	r3, [r7, #0]
 8019f46:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	781b      	ldrb	r3, [r3, #0]
 8019f4c:	461a      	mov	r2, r3
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	4413      	add	r3, r2
 8019f52:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8019f54:	68fb      	ldr	r3, [r7, #12]
}
 8019f56:	4618      	mov	r0, r3
 8019f58:	3714      	adds	r7, #20
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f60:	4770      	bx	lr

08019f62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8019f62:	b480      	push	{r7}
 8019f64:	b087      	sub	sp, #28
 8019f66:	af00      	add	r7, sp, #0
 8019f68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8019f6e:	697b      	ldr	r3, [r7, #20]
 8019f70:	781b      	ldrb	r3, [r3, #0]
 8019f72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8019f74:	697b      	ldr	r3, [r7, #20]
 8019f76:	3301      	adds	r3, #1
 8019f78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8019f7a:	697b      	ldr	r3, [r7, #20]
 8019f7c:	781b      	ldrb	r3, [r3, #0]
 8019f7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8019f80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8019f84:	021b      	lsls	r3, r3, #8
 8019f86:	b21a      	sxth	r2, r3
 8019f88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019f8c:	4313      	orrs	r3, r2
 8019f8e:	b21b      	sxth	r3, r3
 8019f90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8019f92:	89fb      	ldrh	r3, [r7, #14]
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	371c      	adds	r7, #28
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f9e:	4770      	bx	lr

08019fa0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b084      	sub	sp, #16
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	6078      	str	r0, [r7, #4]
 8019fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019faa:	2300      	movs	r3, #0
 8019fac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	781b      	ldrb	r3, [r3, #0]
 8019fb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019fb6:	2b40      	cmp	r3, #64	@ 0x40
 8019fb8:	d005      	beq.n	8019fc6 <USBD_StdDevReq+0x26>
 8019fba:	2b40      	cmp	r3, #64	@ 0x40
 8019fbc:	d857      	bhi.n	801a06e <USBD_StdDevReq+0xce>
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d00f      	beq.n	8019fe2 <USBD_StdDevReq+0x42>
 8019fc2:	2b20      	cmp	r3, #32
 8019fc4:	d153      	bne.n	801a06e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	32ae      	adds	r2, #174	@ 0xae
 8019fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019fd4:	689b      	ldr	r3, [r3, #8]
 8019fd6:	6839      	ldr	r1, [r7, #0]
 8019fd8:	6878      	ldr	r0, [r7, #4]
 8019fda:	4798      	blx	r3
 8019fdc:	4603      	mov	r3, r0
 8019fde:	73fb      	strb	r3, [r7, #15]
      break;
 8019fe0:	e04a      	b.n	801a078 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	785b      	ldrb	r3, [r3, #1]
 8019fe6:	2b09      	cmp	r3, #9
 8019fe8:	d83b      	bhi.n	801a062 <USBD_StdDevReq+0xc2>
 8019fea:	a201      	add	r2, pc, #4	@ (adr r2, 8019ff0 <USBD_StdDevReq+0x50>)
 8019fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ff0:	0801a045 	.word	0x0801a045
 8019ff4:	0801a059 	.word	0x0801a059
 8019ff8:	0801a063 	.word	0x0801a063
 8019ffc:	0801a04f 	.word	0x0801a04f
 801a000:	0801a063 	.word	0x0801a063
 801a004:	0801a023 	.word	0x0801a023
 801a008:	0801a019 	.word	0x0801a019
 801a00c:	0801a063 	.word	0x0801a063
 801a010:	0801a03b 	.word	0x0801a03b
 801a014:	0801a02d 	.word	0x0801a02d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a018:	6839      	ldr	r1, [r7, #0]
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f000 fa3c 	bl	801a498 <USBD_GetDescriptor>
          break;
 801a020:	e024      	b.n	801a06c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a022:	6839      	ldr	r1, [r7, #0]
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	f000 fbcb 	bl	801a7c0 <USBD_SetAddress>
          break;
 801a02a:	e01f      	b.n	801a06c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a02c:	6839      	ldr	r1, [r7, #0]
 801a02e:	6878      	ldr	r0, [r7, #4]
 801a030:	f000 fc0a 	bl	801a848 <USBD_SetConfig>
 801a034:	4603      	mov	r3, r0
 801a036:	73fb      	strb	r3, [r7, #15]
          break;
 801a038:	e018      	b.n	801a06c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a03a:	6839      	ldr	r1, [r7, #0]
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	f000 fcad 	bl	801a99c <USBD_GetConfig>
          break;
 801a042:	e013      	b.n	801a06c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a044:	6839      	ldr	r1, [r7, #0]
 801a046:	6878      	ldr	r0, [r7, #4]
 801a048:	f000 fcde 	bl	801aa08 <USBD_GetStatus>
          break;
 801a04c:	e00e      	b.n	801a06c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a04e:	6839      	ldr	r1, [r7, #0]
 801a050:	6878      	ldr	r0, [r7, #4]
 801a052:	f000 fd0d 	bl	801aa70 <USBD_SetFeature>
          break;
 801a056:	e009      	b.n	801a06c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a058:	6839      	ldr	r1, [r7, #0]
 801a05a:	6878      	ldr	r0, [r7, #4]
 801a05c:	f000 fd31 	bl	801aac2 <USBD_ClrFeature>
          break;
 801a060:	e004      	b.n	801a06c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801a062:	6839      	ldr	r1, [r7, #0]
 801a064:	6878      	ldr	r0, [r7, #4]
 801a066:	f000 fd88 	bl	801ab7a <USBD_CtlError>
          break;
 801a06a:	bf00      	nop
      }
      break;
 801a06c:	e004      	b.n	801a078 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801a06e:	6839      	ldr	r1, [r7, #0]
 801a070:	6878      	ldr	r0, [r7, #4]
 801a072:	f000 fd82 	bl	801ab7a <USBD_CtlError>
      break;
 801a076:	bf00      	nop
  }

  return ret;
 801a078:	7bfb      	ldrb	r3, [r7, #15]
}
 801a07a:	4618      	mov	r0, r3
 801a07c:	3710      	adds	r7, #16
 801a07e:	46bd      	mov	sp, r7
 801a080:	bd80      	pop	{r7, pc}
 801a082:	bf00      	nop

0801a084 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b084      	sub	sp, #16
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
 801a08c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a08e:	2300      	movs	r3, #0
 801a090:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a092:	683b      	ldr	r3, [r7, #0]
 801a094:	781b      	ldrb	r3, [r3, #0]
 801a096:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a09a:	2b40      	cmp	r3, #64	@ 0x40
 801a09c:	d005      	beq.n	801a0aa <USBD_StdItfReq+0x26>
 801a09e:	2b40      	cmp	r3, #64	@ 0x40
 801a0a0:	d852      	bhi.n	801a148 <USBD_StdItfReq+0xc4>
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d001      	beq.n	801a0aa <USBD_StdItfReq+0x26>
 801a0a6:	2b20      	cmp	r3, #32
 801a0a8:	d14e      	bne.n	801a148 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801a0b0:	b2db      	uxtb	r3, r3
 801a0b2:	3b01      	subs	r3, #1
 801a0b4:	2b02      	cmp	r3, #2
 801a0b6:	d840      	bhi.n	801a13a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	889b      	ldrh	r3, [r3, #4]
 801a0bc:	b2db      	uxtb	r3, r3
 801a0be:	2b01      	cmp	r3, #1
 801a0c0:	d836      	bhi.n	801a130 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801a0c2:	683b      	ldr	r3, [r7, #0]
 801a0c4:	889b      	ldrh	r3, [r3, #4]
 801a0c6:	b2db      	uxtb	r3, r3
 801a0c8:	4619      	mov	r1, r3
 801a0ca:	6878      	ldr	r0, [r7, #4]
 801a0cc:	f7ff fedb 	bl	8019e86 <USBD_CoreFindIF>
 801a0d0:	4603      	mov	r3, r0
 801a0d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801a0d4:	7bbb      	ldrb	r3, [r7, #14]
 801a0d6:	2bff      	cmp	r3, #255	@ 0xff
 801a0d8:	d01d      	beq.n	801a116 <USBD_StdItfReq+0x92>
 801a0da:	7bbb      	ldrb	r3, [r7, #14]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d11a      	bne.n	801a116 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801a0e0:	7bba      	ldrb	r2, [r7, #14]
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	32ae      	adds	r2, #174	@ 0xae
 801a0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a0ea:	689b      	ldr	r3, [r3, #8]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d00f      	beq.n	801a110 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801a0f0:	7bba      	ldrb	r2, [r7, #14]
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801a0f8:	7bba      	ldrb	r2, [r7, #14]
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	32ae      	adds	r2, #174	@ 0xae
 801a0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a102:	689b      	ldr	r3, [r3, #8]
 801a104:	6839      	ldr	r1, [r7, #0]
 801a106:	6878      	ldr	r0, [r7, #4]
 801a108:	4798      	blx	r3
 801a10a:	4603      	mov	r3, r0
 801a10c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801a10e:	e004      	b.n	801a11a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801a110:	2303      	movs	r3, #3
 801a112:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801a114:	e001      	b.n	801a11a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801a116:	2303      	movs	r3, #3
 801a118:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a11a:	683b      	ldr	r3, [r7, #0]
 801a11c:	88db      	ldrh	r3, [r3, #6]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d110      	bne.n	801a144 <USBD_StdItfReq+0xc0>
 801a122:	7bfb      	ldrb	r3, [r7, #15]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d10d      	bne.n	801a144 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a128:	6878      	ldr	r0, [r7, #4]
 801a12a:	f000 fdfd 	bl	801ad28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a12e:	e009      	b.n	801a144 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801a130:	6839      	ldr	r1, [r7, #0]
 801a132:	6878      	ldr	r0, [r7, #4]
 801a134:	f000 fd21 	bl	801ab7a <USBD_CtlError>
          break;
 801a138:	e004      	b.n	801a144 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801a13a:	6839      	ldr	r1, [r7, #0]
 801a13c:	6878      	ldr	r0, [r7, #4]
 801a13e:	f000 fd1c 	bl	801ab7a <USBD_CtlError>
          break;
 801a142:	e000      	b.n	801a146 <USBD_StdItfReq+0xc2>
          break;
 801a144:	bf00      	nop
      }
      break;
 801a146:	e004      	b.n	801a152 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801a148:	6839      	ldr	r1, [r7, #0]
 801a14a:	6878      	ldr	r0, [r7, #4]
 801a14c:	f000 fd15 	bl	801ab7a <USBD_CtlError>
      break;
 801a150:	bf00      	nop
  }

  return ret;
 801a152:	7bfb      	ldrb	r3, [r7, #15]
}
 801a154:	4618      	mov	r0, r3
 801a156:	3710      	adds	r7, #16
 801a158:	46bd      	mov	sp, r7
 801a15a:	bd80      	pop	{r7, pc}

0801a15c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b084      	sub	sp, #16
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
 801a164:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801a166:	2300      	movs	r3, #0
 801a168:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801a16a:	683b      	ldr	r3, [r7, #0]
 801a16c:	889b      	ldrh	r3, [r3, #4]
 801a16e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a170:	683b      	ldr	r3, [r7, #0]
 801a172:	781b      	ldrb	r3, [r3, #0]
 801a174:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a178:	2b40      	cmp	r3, #64	@ 0x40
 801a17a:	d007      	beq.n	801a18c <USBD_StdEPReq+0x30>
 801a17c:	2b40      	cmp	r3, #64	@ 0x40
 801a17e:	f200 817f 	bhi.w	801a480 <USBD_StdEPReq+0x324>
 801a182:	2b00      	cmp	r3, #0
 801a184:	d02a      	beq.n	801a1dc <USBD_StdEPReq+0x80>
 801a186:	2b20      	cmp	r3, #32
 801a188:	f040 817a 	bne.w	801a480 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801a18c:	7bbb      	ldrb	r3, [r7, #14]
 801a18e:	4619      	mov	r1, r3
 801a190:	6878      	ldr	r0, [r7, #4]
 801a192:	f7ff fe85 	bl	8019ea0 <USBD_CoreFindEP>
 801a196:	4603      	mov	r3, r0
 801a198:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801a19a:	7b7b      	ldrb	r3, [r7, #13]
 801a19c:	2bff      	cmp	r3, #255	@ 0xff
 801a19e:	f000 8174 	beq.w	801a48a <USBD_StdEPReq+0x32e>
 801a1a2:	7b7b      	ldrb	r3, [r7, #13]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	f040 8170 	bne.w	801a48a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801a1aa:	7b7a      	ldrb	r2, [r7, #13]
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801a1b2:	7b7a      	ldrb	r2, [r7, #13]
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	32ae      	adds	r2, #174	@ 0xae
 801a1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a1bc:	689b      	ldr	r3, [r3, #8]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	f000 8163 	beq.w	801a48a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801a1c4:	7b7a      	ldrb	r2, [r7, #13]
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	32ae      	adds	r2, #174	@ 0xae
 801a1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a1ce:	689b      	ldr	r3, [r3, #8]
 801a1d0:	6839      	ldr	r1, [r7, #0]
 801a1d2:	6878      	ldr	r0, [r7, #4]
 801a1d4:	4798      	blx	r3
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801a1da:	e156      	b.n	801a48a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a1dc:	683b      	ldr	r3, [r7, #0]
 801a1de:	785b      	ldrb	r3, [r3, #1]
 801a1e0:	2b03      	cmp	r3, #3
 801a1e2:	d008      	beq.n	801a1f6 <USBD_StdEPReq+0x9a>
 801a1e4:	2b03      	cmp	r3, #3
 801a1e6:	f300 8145 	bgt.w	801a474 <USBD_StdEPReq+0x318>
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	f000 809b 	beq.w	801a326 <USBD_StdEPReq+0x1ca>
 801a1f0:	2b01      	cmp	r3, #1
 801a1f2:	d03c      	beq.n	801a26e <USBD_StdEPReq+0x112>
 801a1f4:	e13e      	b.n	801a474 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801a1fc:	b2db      	uxtb	r3, r3
 801a1fe:	2b02      	cmp	r3, #2
 801a200:	d002      	beq.n	801a208 <USBD_StdEPReq+0xac>
 801a202:	2b03      	cmp	r3, #3
 801a204:	d016      	beq.n	801a234 <USBD_StdEPReq+0xd8>
 801a206:	e02c      	b.n	801a262 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a208:	7bbb      	ldrb	r3, [r7, #14]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d00d      	beq.n	801a22a <USBD_StdEPReq+0xce>
 801a20e:	7bbb      	ldrb	r3, [r7, #14]
 801a210:	2b80      	cmp	r3, #128	@ 0x80
 801a212:	d00a      	beq.n	801a22a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a214:	7bbb      	ldrb	r3, [r7, #14]
 801a216:	4619      	mov	r1, r3
 801a218:	6878      	ldr	r0, [r7, #4]
 801a21a:	f001 f9e3 	bl	801b5e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a21e:	2180      	movs	r1, #128	@ 0x80
 801a220:	6878      	ldr	r0, [r7, #4]
 801a222:	f001 f9df 	bl	801b5e4 <USBD_LL_StallEP>
 801a226:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a228:	e020      	b.n	801a26c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801a22a:	6839      	ldr	r1, [r7, #0]
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	f000 fca4 	bl	801ab7a <USBD_CtlError>
              break;
 801a232:	e01b      	b.n	801a26c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a234:	683b      	ldr	r3, [r7, #0]
 801a236:	885b      	ldrh	r3, [r3, #2]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d10e      	bne.n	801a25a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a23c:	7bbb      	ldrb	r3, [r7, #14]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d00b      	beq.n	801a25a <USBD_StdEPReq+0xfe>
 801a242:	7bbb      	ldrb	r3, [r7, #14]
 801a244:	2b80      	cmp	r3, #128	@ 0x80
 801a246:	d008      	beq.n	801a25a <USBD_StdEPReq+0xfe>
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	88db      	ldrh	r3, [r3, #6]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d104      	bne.n	801a25a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a250:	7bbb      	ldrb	r3, [r7, #14]
 801a252:	4619      	mov	r1, r3
 801a254:	6878      	ldr	r0, [r7, #4]
 801a256:	f001 f9c5 	bl	801b5e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a25a:	6878      	ldr	r0, [r7, #4]
 801a25c:	f000 fd64 	bl	801ad28 <USBD_CtlSendStatus>

              break;
 801a260:	e004      	b.n	801a26c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801a262:	6839      	ldr	r1, [r7, #0]
 801a264:	6878      	ldr	r0, [r7, #4]
 801a266:	f000 fc88 	bl	801ab7a <USBD_CtlError>
              break;
 801a26a:	bf00      	nop
          }
          break;
 801a26c:	e107      	b.n	801a47e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801a274:	b2db      	uxtb	r3, r3
 801a276:	2b02      	cmp	r3, #2
 801a278:	d002      	beq.n	801a280 <USBD_StdEPReq+0x124>
 801a27a:	2b03      	cmp	r3, #3
 801a27c:	d016      	beq.n	801a2ac <USBD_StdEPReq+0x150>
 801a27e:	e04b      	b.n	801a318 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a280:	7bbb      	ldrb	r3, [r7, #14]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d00d      	beq.n	801a2a2 <USBD_StdEPReq+0x146>
 801a286:	7bbb      	ldrb	r3, [r7, #14]
 801a288:	2b80      	cmp	r3, #128	@ 0x80
 801a28a:	d00a      	beq.n	801a2a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a28c:	7bbb      	ldrb	r3, [r7, #14]
 801a28e:	4619      	mov	r1, r3
 801a290:	6878      	ldr	r0, [r7, #4]
 801a292:	f001 f9a7 	bl	801b5e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a296:	2180      	movs	r1, #128	@ 0x80
 801a298:	6878      	ldr	r0, [r7, #4]
 801a29a:	f001 f9a3 	bl	801b5e4 <USBD_LL_StallEP>
 801a29e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a2a0:	e040      	b.n	801a324 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801a2a2:	6839      	ldr	r1, [r7, #0]
 801a2a4:	6878      	ldr	r0, [r7, #4]
 801a2a6:	f000 fc68 	bl	801ab7a <USBD_CtlError>
              break;
 801a2aa:	e03b      	b.n	801a324 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a2ac:	683b      	ldr	r3, [r7, #0]
 801a2ae:	885b      	ldrh	r3, [r3, #2]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d136      	bne.n	801a322 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a2b4:	7bbb      	ldrb	r3, [r7, #14]
 801a2b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d004      	beq.n	801a2c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a2be:	7bbb      	ldrb	r3, [r7, #14]
 801a2c0:	4619      	mov	r1, r3
 801a2c2:	6878      	ldr	r0, [r7, #4]
 801a2c4:	f001 f9ad 	bl	801b622 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a2c8:	6878      	ldr	r0, [r7, #4]
 801a2ca:	f000 fd2d 	bl	801ad28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801a2ce:	7bbb      	ldrb	r3, [r7, #14]
 801a2d0:	4619      	mov	r1, r3
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f7ff fde4 	bl	8019ea0 <USBD_CoreFindEP>
 801a2d8:	4603      	mov	r3, r0
 801a2da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801a2dc:	7b7b      	ldrb	r3, [r7, #13]
 801a2de:	2bff      	cmp	r3, #255	@ 0xff
 801a2e0:	d01f      	beq.n	801a322 <USBD_StdEPReq+0x1c6>
 801a2e2:	7b7b      	ldrb	r3, [r7, #13]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d11c      	bne.n	801a322 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801a2e8:	7b7a      	ldrb	r2, [r7, #13]
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801a2f0:	7b7a      	ldrb	r2, [r7, #13]
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	32ae      	adds	r2, #174	@ 0xae
 801a2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a2fa:	689b      	ldr	r3, [r3, #8]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d010      	beq.n	801a322 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801a300:	7b7a      	ldrb	r2, [r7, #13]
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	32ae      	adds	r2, #174	@ 0xae
 801a306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a30a:	689b      	ldr	r3, [r3, #8]
 801a30c:	6839      	ldr	r1, [r7, #0]
 801a30e:	6878      	ldr	r0, [r7, #4]
 801a310:	4798      	blx	r3
 801a312:	4603      	mov	r3, r0
 801a314:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801a316:	e004      	b.n	801a322 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801a318:	6839      	ldr	r1, [r7, #0]
 801a31a:	6878      	ldr	r0, [r7, #4]
 801a31c:	f000 fc2d 	bl	801ab7a <USBD_CtlError>
              break;
 801a320:	e000      	b.n	801a324 <USBD_StdEPReq+0x1c8>
              break;
 801a322:	bf00      	nop
          }
          break;
 801a324:	e0ab      	b.n	801a47e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801a32c:	b2db      	uxtb	r3, r3
 801a32e:	2b02      	cmp	r3, #2
 801a330:	d002      	beq.n	801a338 <USBD_StdEPReq+0x1dc>
 801a332:	2b03      	cmp	r3, #3
 801a334:	d032      	beq.n	801a39c <USBD_StdEPReq+0x240>
 801a336:	e097      	b.n	801a468 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a338:	7bbb      	ldrb	r3, [r7, #14]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d007      	beq.n	801a34e <USBD_StdEPReq+0x1f2>
 801a33e:	7bbb      	ldrb	r3, [r7, #14]
 801a340:	2b80      	cmp	r3, #128	@ 0x80
 801a342:	d004      	beq.n	801a34e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801a344:	6839      	ldr	r1, [r7, #0]
 801a346:	6878      	ldr	r0, [r7, #4]
 801a348:	f000 fc17 	bl	801ab7a <USBD_CtlError>
                break;
 801a34c:	e091      	b.n	801a472 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a34e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a352:	2b00      	cmp	r3, #0
 801a354:	da0b      	bge.n	801a36e <USBD_StdEPReq+0x212>
 801a356:	7bbb      	ldrb	r3, [r7, #14]
 801a358:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a35c:	4613      	mov	r3, r2
 801a35e:	009b      	lsls	r3, r3, #2
 801a360:	4413      	add	r3, r2
 801a362:	009b      	lsls	r3, r3, #2
 801a364:	3310      	adds	r3, #16
 801a366:	687a      	ldr	r2, [r7, #4]
 801a368:	4413      	add	r3, r2
 801a36a:	3304      	adds	r3, #4
 801a36c:	e00b      	b.n	801a386 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a36e:	7bbb      	ldrb	r3, [r7, #14]
 801a370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a374:	4613      	mov	r3, r2
 801a376:	009b      	lsls	r3, r3, #2
 801a378:	4413      	add	r3, r2
 801a37a:	009b      	lsls	r3, r3, #2
 801a37c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801a380:	687a      	ldr	r2, [r7, #4]
 801a382:	4413      	add	r3, r2
 801a384:	3304      	adds	r3, #4
 801a386:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a388:	68bb      	ldr	r3, [r7, #8]
 801a38a:	2200      	movs	r2, #0
 801a38c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a38e:	68bb      	ldr	r3, [r7, #8]
 801a390:	2202      	movs	r2, #2
 801a392:	4619      	mov	r1, r3
 801a394:	6878      	ldr	r0, [r7, #4]
 801a396:	f000 fc6d 	bl	801ac74 <USBD_CtlSendData>
              break;
 801a39a:	e06a      	b.n	801a472 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a39c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	da11      	bge.n	801a3c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a3a4:	7bbb      	ldrb	r3, [r7, #14]
 801a3a6:	f003 020f 	and.w	r2, r3, #15
 801a3aa:	6879      	ldr	r1, [r7, #4]
 801a3ac:	4613      	mov	r3, r2
 801a3ae:	009b      	lsls	r3, r3, #2
 801a3b0:	4413      	add	r3, r2
 801a3b2:	009b      	lsls	r3, r3, #2
 801a3b4:	440b      	add	r3, r1
 801a3b6:	3324      	adds	r3, #36	@ 0x24
 801a3b8:	881b      	ldrh	r3, [r3, #0]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d117      	bne.n	801a3ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801a3be:	6839      	ldr	r1, [r7, #0]
 801a3c0:	6878      	ldr	r0, [r7, #4]
 801a3c2:	f000 fbda 	bl	801ab7a <USBD_CtlError>
                  break;
 801a3c6:	e054      	b.n	801a472 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a3c8:	7bbb      	ldrb	r3, [r7, #14]
 801a3ca:	f003 020f 	and.w	r2, r3, #15
 801a3ce:	6879      	ldr	r1, [r7, #4]
 801a3d0:	4613      	mov	r3, r2
 801a3d2:	009b      	lsls	r3, r3, #2
 801a3d4:	4413      	add	r3, r2
 801a3d6:	009b      	lsls	r3, r3, #2
 801a3d8:	440b      	add	r3, r1
 801a3da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801a3de:	881b      	ldrh	r3, [r3, #0]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d104      	bne.n	801a3ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801a3e4:	6839      	ldr	r1, [r7, #0]
 801a3e6:	6878      	ldr	r0, [r7, #4]
 801a3e8:	f000 fbc7 	bl	801ab7a <USBD_CtlError>
                  break;
 801a3ec:	e041      	b.n	801a472 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a3ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	da0b      	bge.n	801a40e <USBD_StdEPReq+0x2b2>
 801a3f6:	7bbb      	ldrb	r3, [r7, #14]
 801a3f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a3fc:	4613      	mov	r3, r2
 801a3fe:	009b      	lsls	r3, r3, #2
 801a400:	4413      	add	r3, r2
 801a402:	009b      	lsls	r3, r3, #2
 801a404:	3310      	adds	r3, #16
 801a406:	687a      	ldr	r2, [r7, #4]
 801a408:	4413      	add	r3, r2
 801a40a:	3304      	adds	r3, #4
 801a40c:	e00b      	b.n	801a426 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a40e:	7bbb      	ldrb	r3, [r7, #14]
 801a410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a414:	4613      	mov	r3, r2
 801a416:	009b      	lsls	r3, r3, #2
 801a418:	4413      	add	r3, r2
 801a41a:	009b      	lsls	r3, r3, #2
 801a41c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801a420:	687a      	ldr	r2, [r7, #4]
 801a422:	4413      	add	r3, r2
 801a424:	3304      	adds	r3, #4
 801a426:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a428:	7bbb      	ldrb	r3, [r7, #14]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d002      	beq.n	801a434 <USBD_StdEPReq+0x2d8>
 801a42e:	7bbb      	ldrb	r3, [r7, #14]
 801a430:	2b80      	cmp	r3, #128	@ 0x80
 801a432:	d103      	bne.n	801a43c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801a434:	68bb      	ldr	r3, [r7, #8]
 801a436:	2200      	movs	r2, #0
 801a438:	601a      	str	r2, [r3, #0]
 801a43a:	e00e      	b.n	801a45a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801a43c:	7bbb      	ldrb	r3, [r7, #14]
 801a43e:	4619      	mov	r1, r3
 801a440:	6878      	ldr	r0, [r7, #4]
 801a442:	f001 f90d 	bl	801b660 <USBD_LL_IsStallEP>
 801a446:	4603      	mov	r3, r0
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d003      	beq.n	801a454 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801a44c:	68bb      	ldr	r3, [r7, #8]
 801a44e:	2201      	movs	r2, #1
 801a450:	601a      	str	r2, [r3, #0]
 801a452:	e002      	b.n	801a45a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801a454:	68bb      	ldr	r3, [r7, #8]
 801a456:	2200      	movs	r2, #0
 801a458:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	2202      	movs	r2, #2
 801a45e:	4619      	mov	r1, r3
 801a460:	6878      	ldr	r0, [r7, #4]
 801a462:	f000 fc07 	bl	801ac74 <USBD_CtlSendData>
              break;
 801a466:	e004      	b.n	801a472 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801a468:	6839      	ldr	r1, [r7, #0]
 801a46a:	6878      	ldr	r0, [r7, #4]
 801a46c:	f000 fb85 	bl	801ab7a <USBD_CtlError>
              break;
 801a470:	bf00      	nop
          }
          break;
 801a472:	e004      	b.n	801a47e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801a474:	6839      	ldr	r1, [r7, #0]
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f000 fb7f 	bl	801ab7a <USBD_CtlError>
          break;
 801a47c:	bf00      	nop
      }
      break;
 801a47e:	e005      	b.n	801a48c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801a480:	6839      	ldr	r1, [r7, #0]
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f000 fb79 	bl	801ab7a <USBD_CtlError>
      break;
 801a488:	e000      	b.n	801a48c <USBD_StdEPReq+0x330>
      break;
 801a48a:	bf00      	nop
  }

  return ret;
 801a48c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a48e:	4618      	mov	r0, r3
 801a490:	3710      	adds	r7, #16
 801a492:	46bd      	mov	sp, r7
 801a494:	bd80      	pop	{r7, pc}
	...

0801a498 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a498:	b580      	push	{r7, lr}
 801a49a:	b084      	sub	sp, #16
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
 801a4a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801a4ae:	683b      	ldr	r3, [r7, #0]
 801a4b0:	885b      	ldrh	r3, [r3, #2]
 801a4b2:	0a1b      	lsrs	r3, r3, #8
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	3b01      	subs	r3, #1
 801a4b8:	2b0e      	cmp	r3, #14
 801a4ba:	f200 8152 	bhi.w	801a762 <USBD_GetDescriptor+0x2ca>
 801a4be:	a201      	add	r2, pc, #4	@ (adr r2, 801a4c4 <USBD_GetDescriptor+0x2c>)
 801a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4c4:	0801a535 	.word	0x0801a535
 801a4c8:	0801a54d 	.word	0x0801a54d
 801a4cc:	0801a58d 	.word	0x0801a58d
 801a4d0:	0801a763 	.word	0x0801a763
 801a4d4:	0801a763 	.word	0x0801a763
 801a4d8:	0801a703 	.word	0x0801a703
 801a4dc:	0801a72f 	.word	0x0801a72f
 801a4e0:	0801a763 	.word	0x0801a763
 801a4e4:	0801a763 	.word	0x0801a763
 801a4e8:	0801a763 	.word	0x0801a763
 801a4ec:	0801a763 	.word	0x0801a763
 801a4f0:	0801a763 	.word	0x0801a763
 801a4f4:	0801a763 	.word	0x0801a763
 801a4f8:	0801a763 	.word	0x0801a763
 801a4fc:	0801a501 	.word	0x0801a501
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a506:	69db      	ldr	r3, [r3, #28]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d00b      	beq.n	801a524 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a512:	69db      	ldr	r3, [r3, #28]
 801a514:	687a      	ldr	r2, [r7, #4]
 801a516:	7c12      	ldrb	r2, [r2, #16]
 801a518:	f107 0108 	add.w	r1, r7, #8
 801a51c:	4610      	mov	r0, r2
 801a51e:	4798      	blx	r3
 801a520:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a522:	e126      	b.n	801a772 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801a524:	6839      	ldr	r1, [r7, #0]
 801a526:	6878      	ldr	r0, [r7, #4]
 801a528:	f000 fb27 	bl	801ab7a <USBD_CtlError>
        err++;
 801a52c:	7afb      	ldrb	r3, [r7, #11]
 801a52e:	3301      	adds	r3, #1
 801a530:	72fb      	strb	r3, [r7, #11]
      break;
 801a532:	e11e      	b.n	801a772 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	687a      	ldr	r2, [r7, #4]
 801a53e:	7c12      	ldrb	r2, [r2, #16]
 801a540:	f107 0108 	add.w	r1, r7, #8
 801a544:	4610      	mov	r0, r2
 801a546:	4798      	blx	r3
 801a548:	60f8      	str	r0, [r7, #12]
      break;
 801a54a:	e112      	b.n	801a772 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	7c1b      	ldrb	r3, [r3, #16]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d10d      	bne.n	801a570 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a55c:	f107 0208 	add.w	r2, r7, #8
 801a560:	4610      	mov	r0, r2
 801a562:	4798      	blx	r3
 801a564:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	3301      	adds	r3, #1
 801a56a:	2202      	movs	r2, #2
 801a56c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a56e:	e100      	b.n	801a772 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801a576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a578:	f107 0208 	add.w	r2, r7, #8
 801a57c:	4610      	mov	r0, r2
 801a57e:	4798      	blx	r3
 801a580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	3301      	adds	r3, #1
 801a586:	2202      	movs	r2, #2
 801a588:	701a      	strb	r2, [r3, #0]
      break;
 801a58a:	e0f2      	b.n	801a772 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a58c:	683b      	ldr	r3, [r7, #0]
 801a58e:	885b      	ldrh	r3, [r3, #2]
 801a590:	b2db      	uxtb	r3, r3
 801a592:	2b05      	cmp	r3, #5
 801a594:	f200 80ac 	bhi.w	801a6f0 <USBD_GetDescriptor+0x258>
 801a598:	a201      	add	r2, pc, #4	@ (adr r2, 801a5a0 <USBD_GetDescriptor+0x108>)
 801a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a59e:	bf00      	nop
 801a5a0:	0801a5b9 	.word	0x0801a5b9
 801a5a4:	0801a5ed 	.word	0x0801a5ed
 801a5a8:	0801a621 	.word	0x0801a621
 801a5ac:	0801a655 	.word	0x0801a655
 801a5b0:	0801a689 	.word	0x0801a689
 801a5b4:	0801a6bd 	.word	0x0801a6bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a5be:	685b      	ldr	r3, [r3, #4]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d00b      	beq.n	801a5dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a5ca:	685b      	ldr	r3, [r3, #4]
 801a5cc:	687a      	ldr	r2, [r7, #4]
 801a5ce:	7c12      	ldrb	r2, [r2, #16]
 801a5d0:	f107 0108 	add.w	r1, r7, #8
 801a5d4:	4610      	mov	r0, r2
 801a5d6:	4798      	blx	r3
 801a5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a5da:	e091      	b.n	801a700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a5dc:	6839      	ldr	r1, [r7, #0]
 801a5de:	6878      	ldr	r0, [r7, #4]
 801a5e0:	f000 facb 	bl	801ab7a <USBD_CtlError>
            err++;
 801a5e4:	7afb      	ldrb	r3, [r7, #11]
 801a5e6:	3301      	adds	r3, #1
 801a5e8:	72fb      	strb	r3, [r7, #11]
          break;
 801a5ea:	e089      	b.n	801a700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a5f2:	689b      	ldr	r3, [r3, #8]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d00b      	beq.n	801a610 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a5fe:	689b      	ldr	r3, [r3, #8]
 801a600:	687a      	ldr	r2, [r7, #4]
 801a602:	7c12      	ldrb	r2, [r2, #16]
 801a604:	f107 0108 	add.w	r1, r7, #8
 801a608:	4610      	mov	r0, r2
 801a60a:	4798      	blx	r3
 801a60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a60e:	e077      	b.n	801a700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a610:	6839      	ldr	r1, [r7, #0]
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	f000 fab1 	bl	801ab7a <USBD_CtlError>
            err++;
 801a618:	7afb      	ldrb	r3, [r7, #11]
 801a61a:	3301      	adds	r3, #1
 801a61c:	72fb      	strb	r3, [r7, #11]
          break;
 801a61e:	e06f      	b.n	801a700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a626:	68db      	ldr	r3, [r3, #12]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d00b      	beq.n	801a644 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a632:	68db      	ldr	r3, [r3, #12]
 801a634:	687a      	ldr	r2, [r7, #4]
 801a636:	7c12      	ldrb	r2, [r2, #16]
 801a638:	f107 0108 	add.w	r1, r7, #8
 801a63c:	4610      	mov	r0, r2
 801a63e:	4798      	blx	r3
 801a640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a642:	e05d      	b.n	801a700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a644:	6839      	ldr	r1, [r7, #0]
 801a646:	6878      	ldr	r0, [r7, #4]
 801a648:	f000 fa97 	bl	801ab7a <USBD_CtlError>
            err++;
 801a64c:	7afb      	ldrb	r3, [r7, #11]
 801a64e:	3301      	adds	r3, #1
 801a650:	72fb      	strb	r3, [r7, #11]
          break;
 801a652:	e055      	b.n	801a700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a65a:	691b      	ldr	r3, [r3, #16]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d00b      	beq.n	801a678 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a666:	691b      	ldr	r3, [r3, #16]
 801a668:	687a      	ldr	r2, [r7, #4]
 801a66a:	7c12      	ldrb	r2, [r2, #16]
 801a66c:	f107 0108 	add.w	r1, r7, #8
 801a670:	4610      	mov	r0, r2
 801a672:	4798      	blx	r3
 801a674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a676:	e043      	b.n	801a700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a678:	6839      	ldr	r1, [r7, #0]
 801a67a:	6878      	ldr	r0, [r7, #4]
 801a67c:	f000 fa7d 	bl	801ab7a <USBD_CtlError>
            err++;
 801a680:	7afb      	ldrb	r3, [r7, #11]
 801a682:	3301      	adds	r3, #1
 801a684:	72fb      	strb	r3, [r7, #11]
          break;
 801a686:	e03b      	b.n	801a700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a68e:	695b      	ldr	r3, [r3, #20]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d00b      	beq.n	801a6ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a69a:	695b      	ldr	r3, [r3, #20]
 801a69c:	687a      	ldr	r2, [r7, #4]
 801a69e:	7c12      	ldrb	r2, [r2, #16]
 801a6a0:	f107 0108 	add.w	r1, r7, #8
 801a6a4:	4610      	mov	r0, r2
 801a6a6:	4798      	blx	r3
 801a6a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a6aa:	e029      	b.n	801a700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a6ac:	6839      	ldr	r1, [r7, #0]
 801a6ae:	6878      	ldr	r0, [r7, #4]
 801a6b0:	f000 fa63 	bl	801ab7a <USBD_CtlError>
            err++;
 801a6b4:	7afb      	ldrb	r3, [r7, #11]
 801a6b6:	3301      	adds	r3, #1
 801a6b8:	72fb      	strb	r3, [r7, #11]
          break;
 801a6ba:	e021      	b.n	801a700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a6c2:	699b      	ldr	r3, [r3, #24]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d00b      	beq.n	801a6e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801a6ce:	699b      	ldr	r3, [r3, #24]
 801a6d0:	687a      	ldr	r2, [r7, #4]
 801a6d2:	7c12      	ldrb	r2, [r2, #16]
 801a6d4:	f107 0108 	add.w	r1, r7, #8
 801a6d8:	4610      	mov	r0, r2
 801a6da:	4798      	blx	r3
 801a6dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a6de:	e00f      	b.n	801a700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a6e0:	6839      	ldr	r1, [r7, #0]
 801a6e2:	6878      	ldr	r0, [r7, #4]
 801a6e4:	f000 fa49 	bl	801ab7a <USBD_CtlError>
            err++;
 801a6e8:	7afb      	ldrb	r3, [r7, #11]
 801a6ea:	3301      	adds	r3, #1
 801a6ec:	72fb      	strb	r3, [r7, #11]
          break;
 801a6ee:	e007      	b.n	801a700 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801a6f0:	6839      	ldr	r1, [r7, #0]
 801a6f2:	6878      	ldr	r0, [r7, #4]
 801a6f4:	f000 fa41 	bl	801ab7a <USBD_CtlError>
          err++;
 801a6f8:	7afb      	ldrb	r3, [r7, #11]
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801a6fe:	bf00      	nop
      }
      break;
 801a700:	e037      	b.n	801a772 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	7c1b      	ldrb	r3, [r3, #16]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d109      	bne.n	801a71e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801a710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a712:	f107 0208 	add.w	r2, r7, #8
 801a716:	4610      	mov	r0, r2
 801a718:	4798      	blx	r3
 801a71a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a71c:	e029      	b.n	801a772 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801a71e:	6839      	ldr	r1, [r7, #0]
 801a720:	6878      	ldr	r0, [r7, #4]
 801a722:	f000 fa2a 	bl	801ab7a <USBD_CtlError>
        err++;
 801a726:	7afb      	ldrb	r3, [r7, #11]
 801a728:	3301      	adds	r3, #1
 801a72a:	72fb      	strb	r3, [r7, #11]
      break;
 801a72c:	e021      	b.n	801a772 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	7c1b      	ldrb	r3, [r3, #16]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d10d      	bne.n	801a752 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801a73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a73e:	f107 0208 	add.w	r2, r7, #8
 801a742:	4610      	mov	r0, r2
 801a744:	4798      	blx	r3
 801a746:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	3301      	adds	r3, #1
 801a74c:	2207      	movs	r2, #7
 801a74e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a750:	e00f      	b.n	801a772 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801a752:	6839      	ldr	r1, [r7, #0]
 801a754:	6878      	ldr	r0, [r7, #4]
 801a756:	f000 fa10 	bl	801ab7a <USBD_CtlError>
        err++;
 801a75a:	7afb      	ldrb	r3, [r7, #11]
 801a75c:	3301      	adds	r3, #1
 801a75e:	72fb      	strb	r3, [r7, #11]
      break;
 801a760:	e007      	b.n	801a772 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801a762:	6839      	ldr	r1, [r7, #0]
 801a764:	6878      	ldr	r0, [r7, #4]
 801a766:	f000 fa08 	bl	801ab7a <USBD_CtlError>
      err++;
 801a76a:	7afb      	ldrb	r3, [r7, #11]
 801a76c:	3301      	adds	r3, #1
 801a76e:	72fb      	strb	r3, [r7, #11]
      break;
 801a770:	bf00      	nop
  }

  if (err != 0U)
 801a772:	7afb      	ldrb	r3, [r7, #11]
 801a774:	2b00      	cmp	r3, #0
 801a776:	d11e      	bne.n	801a7b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	88db      	ldrh	r3, [r3, #6]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d016      	beq.n	801a7ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801a780:	893b      	ldrh	r3, [r7, #8]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d00e      	beq.n	801a7a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801a786:	683b      	ldr	r3, [r7, #0]
 801a788:	88da      	ldrh	r2, [r3, #6]
 801a78a:	893b      	ldrh	r3, [r7, #8]
 801a78c:	4293      	cmp	r3, r2
 801a78e:	bf28      	it	cs
 801a790:	4613      	movcs	r3, r2
 801a792:	b29b      	uxth	r3, r3
 801a794:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801a796:	893b      	ldrh	r3, [r7, #8]
 801a798:	461a      	mov	r2, r3
 801a79a:	68f9      	ldr	r1, [r7, #12]
 801a79c:	6878      	ldr	r0, [r7, #4]
 801a79e:	f000 fa69 	bl	801ac74 <USBD_CtlSendData>
 801a7a2:	e009      	b.n	801a7b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801a7a4:	6839      	ldr	r1, [r7, #0]
 801a7a6:	6878      	ldr	r0, [r7, #4]
 801a7a8:	f000 f9e7 	bl	801ab7a <USBD_CtlError>
 801a7ac:	e004      	b.n	801a7b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801a7ae:	6878      	ldr	r0, [r7, #4]
 801a7b0:	f000 faba 	bl	801ad28 <USBD_CtlSendStatus>
 801a7b4:	e000      	b.n	801a7b8 <USBD_GetDescriptor+0x320>
    return;
 801a7b6:	bf00      	nop
  }
}
 801a7b8:	3710      	adds	r7, #16
 801a7ba:	46bd      	mov	sp, r7
 801a7bc:	bd80      	pop	{r7, pc}
 801a7be:	bf00      	nop

0801a7c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a7c0:	b580      	push	{r7, lr}
 801a7c2:	b084      	sub	sp, #16
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]
 801a7c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801a7ca:	683b      	ldr	r3, [r7, #0]
 801a7cc:	889b      	ldrh	r3, [r3, #4]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d131      	bne.n	801a836 <USBD_SetAddress+0x76>
 801a7d2:	683b      	ldr	r3, [r7, #0]
 801a7d4:	88db      	ldrh	r3, [r3, #6]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d12d      	bne.n	801a836 <USBD_SetAddress+0x76>
 801a7da:	683b      	ldr	r3, [r7, #0]
 801a7dc:	885b      	ldrh	r3, [r3, #2]
 801a7de:	2b7f      	cmp	r3, #127	@ 0x7f
 801a7e0:	d829      	bhi.n	801a836 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801a7e2:	683b      	ldr	r3, [r7, #0]
 801a7e4:	885b      	ldrh	r3, [r3, #2]
 801a7e6:	b2db      	uxtb	r3, r3
 801a7e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a7ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801a7f4:	b2db      	uxtb	r3, r3
 801a7f6:	2b03      	cmp	r3, #3
 801a7f8:	d104      	bne.n	801a804 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801a7fa:	6839      	ldr	r1, [r7, #0]
 801a7fc:	6878      	ldr	r0, [r7, #4]
 801a7fe:	f000 f9bc 	bl	801ab7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a802:	e01d      	b.n	801a840 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	7bfa      	ldrb	r2, [r7, #15]
 801a808:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801a80c:	7bfb      	ldrb	r3, [r7, #15]
 801a80e:	4619      	mov	r1, r3
 801a810:	6878      	ldr	r0, [r7, #4]
 801a812:	f000 ff51 	bl	801b6b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801a816:	6878      	ldr	r0, [r7, #4]
 801a818:	f000 fa86 	bl	801ad28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801a81c:	7bfb      	ldrb	r3, [r7, #15]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d004      	beq.n	801a82c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	2202      	movs	r2, #2
 801a826:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a82a:	e009      	b.n	801a840 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	2201      	movs	r2, #1
 801a830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a834:	e004      	b.n	801a840 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801a836:	6839      	ldr	r1, [r7, #0]
 801a838:	6878      	ldr	r0, [r7, #4]
 801a83a:	f000 f99e 	bl	801ab7a <USBD_CtlError>
  }
}
 801a83e:	bf00      	nop
 801a840:	bf00      	nop
 801a842:	3710      	adds	r7, #16
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}

0801a848 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a848:	b580      	push	{r7, lr}
 801a84a:	b084      	sub	sp, #16
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
 801a850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a852:	2300      	movs	r3, #0
 801a854:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801a856:	683b      	ldr	r3, [r7, #0]
 801a858:	885b      	ldrh	r3, [r3, #2]
 801a85a:	b2da      	uxtb	r2, r3
 801a85c:	4b4e      	ldr	r3, [pc, #312]	@ (801a998 <USBD_SetConfig+0x150>)
 801a85e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801a860:	4b4d      	ldr	r3, [pc, #308]	@ (801a998 <USBD_SetConfig+0x150>)
 801a862:	781b      	ldrb	r3, [r3, #0]
 801a864:	2b01      	cmp	r3, #1
 801a866:	d905      	bls.n	801a874 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801a868:	6839      	ldr	r1, [r7, #0]
 801a86a:	6878      	ldr	r0, [r7, #4]
 801a86c:	f000 f985 	bl	801ab7a <USBD_CtlError>
    return USBD_FAIL;
 801a870:	2303      	movs	r3, #3
 801a872:	e08c      	b.n	801a98e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801a87a:	b2db      	uxtb	r3, r3
 801a87c:	2b02      	cmp	r3, #2
 801a87e:	d002      	beq.n	801a886 <USBD_SetConfig+0x3e>
 801a880:	2b03      	cmp	r3, #3
 801a882:	d029      	beq.n	801a8d8 <USBD_SetConfig+0x90>
 801a884:	e075      	b.n	801a972 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801a886:	4b44      	ldr	r3, [pc, #272]	@ (801a998 <USBD_SetConfig+0x150>)
 801a888:	781b      	ldrb	r3, [r3, #0]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d020      	beq.n	801a8d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801a88e:	4b42      	ldr	r3, [pc, #264]	@ (801a998 <USBD_SetConfig+0x150>)
 801a890:	781b      	ldrb	r3, [r3, #0]
 801a892:	461a      	mov	r2, r3
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801a898:	4b3f      	ldr	r3, [pc, #252]	@ (801a998 <USBD_SetConfig+0x150>)
 801a89a:	781b      	ldrb	r3, [r3, #0]
 801a89c:	4619      	mov	r1, r3
 801a89e:	6878      	ldr	r0, [r7, #4]
 801a8a0:	f7fe ffb9 	bl	8019816 <USBD_SetClassConfig>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801a8a8:	7bfb      	ldrb	r3, [r7, #15]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d008      	beq.n	801a8c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801a8ae:	6839      	ldr	r1, [r7, #0]
 801a8b0:	6878      	ldr	r0, [r7, #4]
 801a8b2:	f000 f962 	bl	801ab7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	2202      	movs	r2, #2
 801a8ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801a8be:	e065      	b.n	801a98c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801a8c0:	6878      	ldr	r0, [r7, #4]
 801a8c2:	f000 fa31 	bl	801ad28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	2203      	movs	r2, #3
 801a8ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801a8ce:	e05d      	b.n	801a98c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801a8d0:	6878      	ldr	r0, [r7, #4]
 801a8d2:	f000 fa29 	bl	801ad28 <USBD_CtlSendStatus>
      break;
 801a8d6:	e059      	b.n	801a98c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801a8d8:	4b2f      	ldr	r3, [pc, #188]	@ (801a998 <USBD_SetConfig+0x150>)
 801a8da:	781b      	ldrb	r3, [r3, #0]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d112      	bne.n	801a906 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	2202      	movs	r2, #2
 801a8e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801a8e8:	4b2b      	ldr	r3, [pc, #172]	@ (801a998 <USBD_SetConfig+0x150>)
 801a8ea:	781b      	ldrb	r3, [r3, #0]
 801a8ec:	461a      	mov	r2, r3
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801a8f2:	4b29      	ldr	r3, [pc, #164]	@ (801a998 <USBD_SetConfig+0x150>)
 801a8f4:	781b      	ldrb	r3, [r3, #0]
 801a8f6:	4619      	mov	r1, r3
 801a8f8:	6878      	ldr	r0, [r7, #4]
 801a8fa:	f7fe ffa8 	bl	801984e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801a8fe:	6878      	ldr	r0, [r7, #4]
 801a900:	f000 fa12 	bl	801ad28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801a904:	e042      	b.n	801a98c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801a906:	4b24      	ldr	r3, [pc, #144]	@ (801a998 <USBD_SetConfig+0x150>)
 801a908:	781b      	ldrb	r3, [r3, #0]
 801a90a:	461a      	mov	r2, r3
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	685b      	ldr	r3, [r3, #4]
 801a910:	429a      	cmp	r2, r3
 801a912:	d02a      	beq.n	801a96a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	685b      	ldr	r3, [r3, #4]
 801a918:	b2db      	uxtb	r3, r3
 801a91a:	4619      	mov	r1, r3
 801a91c:	6878      	ldr	r0, [r7, #4]
 801a91e:	f7fe ff96 	bl	801984e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801a922:	4b1d      	ldr	r3, [pc, #116]	@ (801a998 <USBD_SetConfig+0x150>)
 801a924:	781b      	ldrb	r3, [r3, #0]
 801a926:	461a      	mov	r2, r3
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801a92c:	4b1a      	ldr	r3, [pc, #104]	@ (801a998 <USBD_SetConfig+0x150>)
 801a92e:	781b      	ldrb	r3, [r3, #0]
 801a930:	4619      	mov	r1, r3
 801a932:	6878      	ldr	r0, [r7, #4]
 801a934:	f7fe ff6f 	bl	8019816 <USBD_SetClassConfig>
 801a938:	4603      	mov	r3, r0
 801a93a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801a93c:	7bfb      	ldrb	r3, [r7, #15]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d00f      	beq.n	801a962 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801a942:	6839      	ldr	r1, [r7, #0]
 801a944:	6878      	ldr	r0, [r7, #4]
 801a946:	f000 f918 	bl	801ab7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	b2db      	uxtb	r3, r3
 801a950:	4619      	mov	r1, r3
 801a952:	6878      	ldr	r0, [r7, #4]
 801a954:	f7fe ff7b 	bl	801984e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	2202      	movs	r2, #2
 801a95c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801a960:	e014      	b.n	801a98c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801a962:	6878      	ldr	r0, [r7, #4]
 801a964:	f000 f9e0 	bl	801ad28 <USBD_CtlSendStatus>
      break;
 801a968:	e010      	b.n	801a98c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801a96a:	6878      	ldr	r0, [r7, #4]
 801a96c:	f000 f9dc 	bl	801ad28 <USBD_CtlSendStatus>
      break;
 801a970:	e00c      	b.n	801a98c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801a972:	6839      	ldr	r1, [r7, #0]
 801a974:	6878      	ldr	r0, [r7, #4]
 801a976:	f000 f900 	bl	801ab7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801a97a:	4b07      	ldr	r3, [pc, #28]	@ (801a998 <USBD_SetConfig+0x150>)
 801a97c:	781b      	ldrb	r3, [r3, #0]
 801a97e:	4619      	mov	r1, r3
 801a980:	6878      	ldr	r0, [r7, #4]
 801a982:	f7fe ff64 	bl	801984e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801a986:	2303      	movs	r3, #3
 801a988:	73fb      	strb	r3, [r7, #15]
      break;
 801a98a:	bf00      	nop
  }

  return ret;
 801a98c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a98e:	4618      	mov	r0, r3
 801a990:	3710      	adds	r7, #16
 801a992:	46bd      	mov	sp, r7
 801a994:	bd80      	pop	{r7, pc}
 801a996:	bf00      	nop
 801a998:	240472c0 	.word	0x240472c0

0801a99c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b082      	sub	sp, #8
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	6078      	str	r0, [r7, #4]
 801a9a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801a9a6:	683b      	ldr	r3, [r7, #0]
 801a9a8:	88db      	ldrh	r3, [r3, #6]
 801a9aa:	2b01      	cmp	r3, #1
 801a9ac:	d004      	beq.n	801a9b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801a9ae:	6839      	ldr	r1, [r7, #0]
 801a9b0:	6878      	ldr	r0, [r7, #4]
 801a9b2:	f000 f8e2 	bl	801ab7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801a9b6:	e023      	b.n	801aa00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801a9be:	b2db      	uxtb	r3, r3
 801a9c0:	2b02      	cmp	r3, #2
 801a9c2:	dc02      	bgt.n	801a9ca <USBD_GetConfig+0x2e>
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	dc03      	bgt.n	801a9d0 <USBD_GetConfig+0x34>
 801a9c8:	e015      	b.n	801a9f6 <USBD_GetConfig+0x5a>
 801a9ca:	2b03      	cmp	r3, #3
 801a9cc:	d00b      	beq.n	801a9e6 <USBD_GetConfig+0x4a>
 801a9ce:	e012      	b.n	801a9f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	3308      	adds	r3, #8
 801a9da:	2201      	movs	r2, #1
 801a9dc:	4619      	mov	r1, r3
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f000 f948 	bl	801ac74 <USBD_CtlSendData>
        break;
 801a9e4:	e00c      	b.n	801aa00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	3304      	adds	r3, #4
 801a9ea:	2201      	movs	r2, #1
 801a9ec:	4619      	mov	r1, r3
 801a9ee:	6878      	ldr	r0, [r7, #4]
 801a9f0:	f000 f940 	bl	801ac74 <USBD_CtlSendData>
        break;
 801a9f4:	e004      	b.n	801aa00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801a9f6:	6839      	ldr	r1, [r7, #0]
 801a9f8:	6878      	ldr	r0, [r7, #4]
 801a9fa:	f000 f8be 	bl	801ab7a <USBD_CtlError>
        break;
 801a9fe:	bf00      	nop
}
 801aa00:	bf00      	nop
 801aa02:	3708      	adds	r7, #8
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b082      	sub	sp, #8
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
 801aa10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801aa18:	b2db      	uxtb	r3, r3
 801aa1a:	3b01      	subs	r3, #1
 801aa1c:	2b02      	cmp	r3, #2
 801aa1e:	d81e      	bhi.n	801aa5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801aa20:	683b      	ldr	r3, [r7, #0]
 801aa22:	88db      	ldrh	r3, [r3, #6]
 801aa24:	2b02      	cmp	r3, #2
 801aa26:	d004      	beq.n	801aa32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801aa28:	6839      	ldr	r1, [r7, #0]
 801aa2a:	6878      	ldr	r0, [r7, #4]
 801aa2c:	f000 f8a5 	bl	801ab7a <USBD_CtlError>
        break;
 801aa30:	e01a      	b.n	801aa68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	2201      	movs	r2, #1
 801aa36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d005      	beq.n	801aa4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	68db      	ldr	r3, [r3, #12]
 801aa46:	f043 0202 	orr.w	r2, r3, #2
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	330c      	adds	r3, #12
 801aa52:	2202      	movs	r2, #2
 801aa54:	4619      	mov	r1, r3
 801aa56:	6878      	ldr	r0, [r7, #4]
 801aa58:	f000 f90c 	bl	801ac74 <USBD_CtlSendData>
      break;
 801aa5c:	e004      	b.n	801aa68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801aa5e:	6839      	ldr	r1, [r7, #0]
 801aa60:	6878      	ldr	r0, [r7, #4]
 801aa62:	f000 f88a 	bl	801ab7a <USBD_CtlError>
      break;
 801aa66:	bf00      	nop
  }
}
 801aa68:	bf00      	nop
 801aa6a:	3708      	adds	r7, #8
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}

0801aa70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801aa7a:	683b      	ldr	r3, [r7, #0]
 801aa7c:	885b      	ldrh	r3, [r3, #2]
 801aa7e:	2b01      	cmp	r3, #1
 801aa80:	d107      	bne.n	801aa92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	2201      	movs	r2, #1
 801aa86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801aa8a:	6878      	ldr	r0, [r7, #4]
 801aa8c:	f000 f94c 	bl	801ad28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801aa90:	e013      	b.n	801aaba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	885b      	ldrh	r3, [r3, #2]
 801aa96:	2b02      	cmp	r3, #2
 801aa98:	d10b      	bne.n	801aab2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801aa9a:	683b      	ldr	r3, [r7, #0]
 801aa9c:	889b      	ldrh	r3, [r3, #4]
 801aa9e:	0a1b      	lsrs	r3, r3, #8
 801aaa0:	b29b      	uxth	r3, r3
 801aaa2:	b2da      	uxtb	r2, r3
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801aaaa:	6878      	ldr	r0, [r7, #4]
 801aaac:	f000 f93c 	bl	801ad28 <USBD_CtlSendStatus>
}
 801aab0:	e003      	b.n	801aaba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801aab2:	6839      	ldr	r1, [r7, #0]
 801aab4:	6878      	ldr	r0, [r7, #4]
 801aab6:	f000 f860 	bl	801ab7a <USBD_CtlError>
}
 801aaba:	bf00      	nop
 801aabc:	3708      	adds	r7, #8
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}

0801aac2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aac2:	b580      	push	{r7, lr}
 801aac4:	b082      	sub	sp, #8
 801aac6:	af00      	add	r7, sp, #0
 801aac8:	6078      	str	r0, [r7, #4]
 801aaca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801aad2:	b2db      	uxtb	r3, r3
 801aad4:	3b01      	subs	r3, #1
 801aad6:	2b02      	cmp	r3, #2
 801aad8:	d80b      	bhi.n	801aaf2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801aada:	683b      	ldr	r3, [r7, #0]
 801aadc:	885b      	ldrh	r3, [r3, #2]
 801aade:	2b01      	cmp	r3, #1
 801aae0:	d10c      	bne.n	801aafc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	2200      	movs	r2, #0
 801aae6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801aaea:	6878      	ldr	r0, [r7, #4]
 801aaec:	f000 f91c 	bl	801ad28 <USBD_CtlSendStatus>
      }
      break;
 801aaf0:	e004      	b.n	801aafc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801aaf2:	6839      	ldr	r1, [r7, #0]
 801aaf4:	6878      	ldr	r0, [r7, #4]
 801aaf6:	f000 f840 	bl	801ab7a <USBD_CtlError>
      break;
 801aafa:	e000      	b.n	801aafe <USBD_ClrFeature+0x3c>
      break;
 801aafc:	bf00      	nop
  }
}
 801aafe:	bf00      	nop
 801ab00:	3708      	adds	r7, #8
 801ab02:	46bd      	mov	sp, r7
 801ab04:	bd80      	pop	{r7, pc}

0801ab06 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801ab06:	b580      	push	{r7, lr}
 801ab08:	b084      	sub	sp, #16
 801ab0a:	af00      	add	r7, sp, #0
 801ab0c:	6078      	str	r0, [r7, #4]
 801ab0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801ab10:	683b      	ldr	r3, [r7, #0]
 801ab12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	781a      	ldrb	r2, [r3, #0]
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	3301      	adds	r3, #1
 801ab20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	781a      	ldrb	r2, [r3, #0]
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	3301      	adds	r3, #1
 801ab2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801ab30:	68f8      	ldr	r0, [r7, #12]
 801ab32:	f7ff fa16 	bl	8019f62 <SWAPBYTE>
 801ab36:	4603      	mov	r3, r0
 801ab38:	461a      	mov	r2, r3
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	3301      	adds	r3, #1
 801ab42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	3301      	adds	r3, #1
 801ab48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801ab4a:	68f8      	ldr	r0, [r7, #12]
 801ab4c:	f7ff fa09 	bl	8019f62 <SWAPBYTE>
 801ab50:	4603      	mov	r3, r0
 801ab52:	461a      	mov	r2, r3
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	3301      	adds	r3, #1
 801ab5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	3301      	adds	r3, #1
 801ab62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801ab64:	68f8      	ldr	r0, [r7, #12]
 801ab66:	f7ff f9fc 	bl	8019f62 <SWAPBYTE>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	80da      	strh	r2, [r3, #6]
}
 801ab72:	bf00      	nop
 801ab74:	3710      	adds	r7, #16
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bd80      	pop	{r7, pc}

0801ab7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ab7a:	b580      	push	{r7, lr}
 801ab7c:	b082      	sub	sp, #8
 801ab7e:	af00      	add	r7, sp, #0
 801ab80:	6078      	str	r0, [r7, #4]
 801ab82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801ab84:	2180      	movs	r1, #128	@ 0x80
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	f000 fd2c 	bl	801b5e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801ab8c:	2100      	movs	r1, #0
 801ab8e:	6878      	ldr	r0, [r7, #4]
 801ab90:	f000 fd28 	bl	801b5e4 <USBD_LL_StallEP>
}
 801ab94:	bf00      	nop
 801ab96:	3708      	adds	r7, #8
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	bd80      	pop	{r7, pc}

0801ab9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801ab9c:	b580      	push	{r7, lr}
 801ab9e:	b086      	sub	sp, #24
 801aba0:	af00      	add	r7, sp, #0
 801aba2:	60f8      	str	r0, [r7, #12]
 801aba4:	60b9      	str	r1, [r7, #8]
 801aba6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801aba8:	2300      	movs	r3, #0
 801abaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d042      	beq.n	801ac38 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801abb6:	6938      	ldr	r0, [r7, #16]
 801abb8:	f000 f842 	bl	801ac40 <USBD_GetLen>
 801abbc:	4603      	mov	r3, r0
 801abbe:	3301      	adds	r3, #1
 801abc0:	005b      	lsls	r3, r3, #1
 801abc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801abc6:	d808      	bhi.n	801abda <USBD_GetString+0x3e>
 801abc8:	6938      	ldr	r0, [r7, #16]
 801abca:	f000 f839 	bl	801ac40 <USBD_GetLen>
 801abce:	4603      	mov	r3, r0
 801abd0:	3301      	adds	r3, #1
 801abd2:	b29b      	uxth	r3, r3
 801abd4:	005b      	lsls	r3, r3, #1
 801abd6:	b29a      	uxth	r2, r3
 801abd8:	e001      	b.n	801abde <USBD_GetString+0x42>
 801abda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801abe2:	7dfb      	ldrb	r3, [r7, #23]
 801abe4:	68ba      	ldr	r2, [r7, #8]
 801abe6:	4413      	add	r3, r2
 801abe8:	687a      	ldr	r2, [r7, #4]
 801abea:	7812      	ldrb	r2, [r2, #0]
 801abec:	701a      	strb	r2, [r3, #0]
  idx++;
 801abee:	7dfb      	ldrb	r3, [r7, #23]
 801abf0:	3301      	adds	r3, #1
 801abf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801abf4:	7dfb      	ldrb	r3, [r7, #23]
 801abf6:	68ba      	ldr	r2, [r7, #8]
 801abf8:	4413      	add	r3, r2
 801abfa:	2203      	movs	r2, #3
 801abfc:	701a      	strb	r2, [r3, #0]
  idx++;
 801abfe:	7dfb      	ldrb	r3, [r7, #23]
 801ac00:	3301      	adds	r3, #1
 801ac02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801ac04:	e013      	b.n	801ac2e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801ac06:	7dfb      	ldrb	r3, [r7, #23]
 801ac08:	68ba      	ldr	r2, [r7, #8]
 801ac0a:	4413      	add	r3, r2
 801ac0c:	693a      	ldr	r2, [r7, #16]
 801ac0e:	7812      	ldrb	r2, [r2, #0]
 801ac10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801ac12:	693b      	ldr	r3, [r7, #16]
 801ac14:	3301      	adds	r3, #1
 801ac16:	613b      	str	r3, [r7, #16]
    idx++;
 801ac18:	7dfb      	ldrb	r3, [r7, #23]
 801ac1a:	3301      	adds	r3, #1
 801ac1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801ac1e:	7dfb      	ldrb	r3, [r7, #23]
 801ac20:	68ba      	ldr	r2, [r7, #8]
 801ac22:	4413      	add	r3, r2
 801ac24:	2200      	movs	r2, #0
 801ac26:	701a      	strb	r2, [r3, #0]
    idx++;
 801ac28:	7dfb      	ldrb	r3, [r7, #23]
 801ac2a:	3301      	adds	r3, #1
 801ac2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801ac2e:	693b      	ldr	r3, [r7, #16]
 801ac30:	781b      	ldrb	r3, [r3, #0]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d1e7      	bne.n	801ac06 <USBD_GetString+0x6a>
 801ac36:	e000      	b.n	801ac3a <USBD_GetString+0x9e>
    return;
 801ac38:	bf00      	nop
  }
}
 801ac3a:	3718      	adds	r7, #24
 801ac3c:	46bd      	mov	sp, r7
 801ac3e:	bd80      	pop	{r7, pc}

0801ac40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801ac40:	b480      	push	{r7}
 801ac42:	b085      	sub	sp, #20
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801ac48:	2300      	movs	r3, #0
 801ac4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801ac50:	e005      	b.n	801ac5e <USBD_GetLen+0x1e>
  {
    len++;
 801ac52:	7bfb      	ldrb	r3, [r7, #15]
 801ac54:	3301      	adds	r3, #1
 801ac56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801ac58:	68bb      	ldr	r3, [r7, #8]
 801ac5a:	3301      	adds	r3, #1
 801ac5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801ac5e:	68bb      	ldr	r3, [r7, #8]
 801ac60:	781b      	ldrb	r3, [r3, #0]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d1f5      	bne.n	801ac52 <USBD_GetLen+0x12>
  }

  return len;
 801ac66:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac68:	4618      	mov	r0, r3
 801ac6a:	3714      	adds	r7, #20
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac72:	4770      	bx	lr

0801ac74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b084      	sub	sp, #16
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	60f8      	str	r0, [r7, #12]
 801ac7c:	60b9      	str	r1, [r7, #8]
 801ac7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	2202      	movs	r2, #2
 801ac84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	687a      	ldr	r2, [r7, #4]
 801ac8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	687a      	ldr	r2, [r7, #4]
 801ac92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	68ba      	ldr	r2, [r7, #8]
 801ac98:	2100      	movs	r1, #0
 801ac9a:	68f8      	ldr	r0, [r7, #12]
 801ac9c:	f000 fd2b 	bl	801b6f6 <USBD_LL_Transmit>

  return USBD_OK;
 801aca0:	2300      	movs	r3, #0
}
 801aca2:	4618      	mov	r0, r3
 801aca4:	3710      	adds	r7, #16
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd80      	pop	{r7, pc}

0801acaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801acaa:	b580      	push	{r7, lr}
 801acac:	b084      	sub	sp, #16
 801acae:	af00      	add	r7, sp, #0
 801acb0:	60f8      	str	r0, [r7, #12]
 801acb2:	60b9      	str	r1, [r7, #8]
 801acb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	68ba      	ldr	r2, [r7, #8]
 801acba:	2100      	movs	r1, #0
 801acbc:	68f8      	ldr	r0, [r7, #12]
 801acbe:	f000 fd1a 	bl	801b6f6 <USBD_LL_Transmit>

  return USBD_OK;
 801acc2:	2300      	movs	r3, #0
}
 801acc4:	4618      	mov	r0, r3
 801acc6:	3710      	adds	r7, #16
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd80      	pop	{r7, pc}

0801accc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b084      	sub	sp, #16
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	60f8      	str	r0, [r7, #12]
 801acd4:	60b9      	str	r1, [r7, #8]
 801acd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	2203      	movs	r2, #3
 801acdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	687a      	ldr	r2, [r7, #4]
 801ace4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	687a      	ldr	r2, [r7, #4]
 801acec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	68ba      	ldr	r2, [r7, #8]
 801acf4:	2100      	movs	r1, #0
 801acf6:	68f8      	ldr	r0, [r7, #12]
 801acf8:	f000 fd1e 	bl	801b738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801acfc:	2300      	movs	r3, #0
}
 801acfe:	4618      	mov	r0, r3
 801ad00:	3710      	adds	r7, #16
 801ad02:	46bd      	mov	sp, r7
 801ad04:	bd80      	pop	{r7, pc}

0801ad06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801ad06:	b580      	push	{r7, lr}
 801ad08:	b084      	sub	sp, #16
 801ad0a:	af00      	add	r7, sp, #0
 801ad0c:	60f8      	str	r0, [r7, #12]
 801ad0e:	60b9      	str	r1, [r7, #8]
 801ad10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	68ba      	ldr	r2, [r7, #8]
 801ad16:	2100      	movs	r1, #0
 801ad18:	68f8      	ldr	r0, [r7, #12]
 801ad1a:	f000 fd0d 	bl	801b738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ad1e:	2300      	movs	r3, #0
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	3710      	adds	r7, #16
 801ad24:	46bd      	mov	sp, r7
 801ad26:	bd80      	pop	{r7, pc}

0801ad28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b082      	sub	sp, #8
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	2204      	movs	r2, #4
 801ad34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801ad38:	2300      	movs	r3, #0
 801ad3a:	2200      	movs	r2, #0
 801ad3c:	2100      	movs	r1, #0
 801ad3e:	6878      	ldr	r0, [r7, #4]
 801ad40:	f000 fcd9 	bl	801b6f6 <USBD_LL_Transmit>

  return USBD_OK;
 801ad44:	2300      	movs	r3, #0
}
 801ad46:	4618      	mov	r0, r3
 801ad48:	3708      	adds	r7, #8
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	bd80      	pop	{r7, pc}

0801ad4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801ad4e:	b580      	push	{r7, lr}
 801ad50:	b082      	sub	sp, #8
 801ad52:	af00      	add	r7, sp, #0
 801ad54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	2205      	movs	r2, #5
 801ad5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801ad5e:	2300      	movs	r3, #0
 801ad60:	2200      	movs	r2, #0
 801ad62:	2100      	movs	r1, #0
 801ad64:	6878      	ldr	r0, [r7, #4]
 801ad66:	f000 fce7 	bl	801b738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ad6a:	2300      	movs	r3, #0
}
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	3708      	adds	r7, #8
 801ad70:	46bd      	mov	sp, r7
 801ad72:	bd80      	pop	{r7, pc}

0801ad74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801ad78:	2200      	movs	r2, #0
 801ad7a:	4918      	ldr	r1, [pc, #96]	@ (801addc <MX_USB_DEVICE_Init+0x68>)
 801ad7c:	4818      	ldr	r0, [pc, #96]	@ (801ade0 <MX_USB_DEVICE_Init+0x6c>)
 801ad7e:	f7fe fccd 	bl	801971c <USBD_Init>
 801ad82:	4603      	mov	r3, r0
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d001      	beq.n	801ad8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801ad88:	f7e7 fa34 	bl	80021f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801ad8c:	4915      	ldr	r1, [pc, #84]	@ (801ade4 <MX_USB_DEVICE_Init+0x70>)
 801ad8e:	4814      	ldr	r0, [pc, #80]	@ (801ade0 <MX_USB_DEVICE_Init+0x6c>)
 801ad90:	f7fe fcf4 	bl	801977c <USBD_RegisterClass>
 801ad94:	4603      	mov	r3, r0
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d001      	beq.n	801ad9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801ad9a:	f7e7 fa2b 	bl	80021f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801ad9e:	4912      	ldr	r1, [pc, #72]	@ (801ade8 <MX_USB_DEVICE_Init+0x74>)
 801ada0:	480f      	ldr	r0, [pc, #60]	@ (801ade0 <MX_USB_DEVICE_Init+0x6c>)
 801ada2:	f7fe fbeb 	bl	801957c <USBD_CDC_RegisterInterface>
 801ada6:	4603      	mov	r3, r0
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d001      	beq.n	801adb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801adac:	f7e7 fa22 	bl	80021f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801adb0:	480b      	ldr	r0, [pc, #44]	@ (801ade0 <MX_USB_DEVICE_Init+0x6c>)
 801adb2:	f7fe fd19 	bl	80197e8 <USBD_Start>
 801adb6:	4603      	mov	r3, r0
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d001      	beq.n	801adc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801adbc:	f7e7 fa1a 	bl	80021f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801adc0:	f7f4 f940 	bl	800f044 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 801adc4:	4b06      	ldr	r3, [pc, #24]	@ (801ade0 <MX_USB_DEVICE_Init+0x6c>)
 801adc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801adca:	4a05      	ldr	r2, [pc, #20]	@ (801ade0 <MX_USB_DEVICE_Init+0x6c>)
 801adcc:	33b0      	adds	r3, #176	@ 0xb0
 801adce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801add2:	4a06      	ldr	r2, [pc, #24]	@ (801adec <MX_USB_DEVICE_Init+0x78>)
 801add4:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801add6:	bf00      	nop
 801add8:	bd80      	pop	{r7, pc}
 801adda:	bf00      	nop
 801addc:	240002f0 	.word	0x240002f0
 801ade0:	240472c4 	.word	0x240472c4
 801ade4:	2400025c 	.word	0x2400025c
 801ade8:	240002dc 	.word	0x240002dc
 801adec:	240475a0 	.word	0x240475a0

0801adf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801adf4:	2200      	movs	r2, #0
 801adf6:	4905      	ldr	r1, [pc, #20]	@ (801ae0c <CDC_Init_FS+0x1c>)
 801adf8:	4805      	ldr	r0, [pc, #20]	@ (801ae10 <CDC_Init_FS+0x20>)
 801adfa:	f7fe fbd9 	bl	80195b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801adfe:	4905      	ldr	r1, [pc, #20]	@ (801ae14 <CDC_Init_FS+0x24>)
 801ae00:	4803      	ldr	r0, [pc, #12]	@ (801ae10 <CDC_Init_FS+0x20>)
 801ae02:	f7fe fbf7 	bl	80195f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801ae06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801ae08:	4618      	mov	r0, r3
 801ae0a:	bd80      	pop	{r7, pc}
 801ae0c:	24047da4 	.word	0x24047da4
 801ae10:	240472c4 	.word	0x240472c4
 801ae14:	240475a4 	.word	0x240475a4

0801ae18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ae18:	b480      	push	{r7}
 801ae1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ae1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ae1e:	4618      	mov	r0, r3
 801ae20:	46bd      	mov	sp, r7
 801ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae26:	4770      	bx	lr

0801ae28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ae28:	b480      	push	{r7}
 801ae2a:	b083      	sub	sp, #12
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	4603      	mov	r3, r0
 801ae30:	6039      	str	r1, [r7, #0]
 801ae32:	71fb      	strb	r3, [r7, #7]
 801ae34:	4613      	mov	r3, r2
 801ae36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ae38:	79fb      	ldrb	r3, [r7, #7]
 801ae3a:	2b23      	cmp	r3, #35	@ 0x23
 801ae3c:	d84a      	bhi.n	801aed4 <CDC_Control_FS+0xac>
 801ae3e:	a201      	add	r2, pc, #4	@ (adr r2, 801ae44 <CDC_Control_FS+0x1c>)
 801ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae44:	0801aed5 	.word	0x0801aed5
 801ae48:	0801aed5 	.word	0x0801aed5
 801ae4c:	0801aed5 	.word	0x0801aed5
 801ae50:	0801aed5 	.word	0x0801aed5
 801ae54:	0801aed5 	.word	0x0801aed5
 801ae58:	0801aed5 	.word	0x0801aed5
 801ae5c:	0801aed5 	.word	0x0801aed5
 801ae60:	0801aed5 	.word	0x0801aed5
 801ae64:	0801aed5 	.word	0x0801aed5
 801ae68:	0801aed5 	.word	0x0801aed5
 801ae6c:	0801aed5 	.word	0x0801aed5
 801ae70:	0801aed5 	.word	0x0801aed5
 801ae74:	0801aed5 	.word	0x0801aed5
 801ae78:	0801aed5 	.word	0x0801aed5
 801ae7c:	0801aed5 	.word	0x0801aed5
 801ae80:	0801aed5 	.word	0x0801aed5
 801ae84:	0801aed5 	.word	0x0801aed5
 801ae88:	0801aed5 	.word	0x0801aed5
 801ae8c:	0801aed5 	.word	0x0801aed5
 801ae90:	0801aed5 	.word	0x0801aed5
 801ae94:	0801aed5 	.word	0x0801aed5
 801ae98:	0801aed5 	.word	0x0801aed5
 801ae9c:	0801aed5 	.word	0x0801aed5
 801aea0:	0801aed5 	.word	0x0801aed5
 801aea4:	0801aed5 	.word	0x0801aed5
 801aea8:	0801aed5 	.word	0x0801aed5
 801aeac:	0801aed5 	.word	0x0801aed5
 801aeb0:	0801aed5 	.word	0x0801aed5
 801aeb4:	0801aed5 	.word	0x0801aed5
 801aeb8:	0801aed5 	.word	0x0801aed5
 801aebc:	0801aed5 	.word	0x0801aed5
 801aec0:	0801aed5 	.word	0x0801aed5
 801aec4:	0801aed5 	.word	0x0801aed5
 801aec8:	0801aed5 	.word	0x0801aed5
 801aecc:	0801aed5 	.word	0x0801aed5
 801aed0:	0801aed5 	.word	0x0801aed5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801aed4:	bf00      	nop
  }

  return (USBD_OK);
 801aed6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801aed8:	4618      	mov	r0, r3
 801aeda:	370c      	adds	r7, #12
 801aedc:	46bd      	mov	sp, r7
 801aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee2:	4770      	bx	lr

0801aee4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b082      	sub	sp, #8
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
 801aeec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801aeee:	6879      	ldr	r1, [r7, #4]
 801aef0:	480a      	ldr	r0, [pc, #40]	@ (801af1c <CDC_Receive_FS+0x38>)
 801aef2:	f7fe fb7f 	bl	80195f4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801aef6:	4809      	ldr	r0, [pc, #36]	@ (801af1c <CDC_Receive_FS+0x38>)
 801aef8:	f7fe fbda 	bl	80196b0 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 801aefc:	4b08      	ldr	r3, [pc, #32]	@ (801af20 <CDC_Receive_FS+0x3c>)
 801aefe:	2201      	movs	r2, #1
 801af00:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 801af02:	683b      	ldr	r3, [r7, #0]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	b29a      	uxth	r2, r3
 801af08:	2364      	movs	r3, #100	@ 0x64
 801af0a:	6879      	ldr	r1, [r7, #4]
 801af0c:	4805      	ldr	r0, [pc, #20]	@ (801af24 <CDC_Receive_FS+0x40>)
 801af0e:	f7f9 fa73 	bl	80143f8 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 801af12:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801af14:	4618      	mov	r0, r3
 801af16:	3708      	adds	r7, #8
 801af18:	46bd      	mov	sp, r7
 801af1a:	bd80      	pop	{r7, pc}
 801af1c:	240472c4 	.word	0x240472c4
 801af20:	240472b4 	.word	0x240472b4
 801af24:	24000a18 	.word	0x24000a18

0801af28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b084      	sub	sp, #16
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
 801af30:	460b      	mov	r3, r1
 801af32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801af34:	2300      	movs	r3, #0
 801af36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801af38:	4b0d      	ldr	r3, [pc, #52]	@ (801af70 <CDC_Transmit_FS+0x48>)
 801af3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801af3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801af40:	68bb      	ldr	r3, [r7, #8]
 801af42:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801af46:	2b00      	cmp	r3, #0
 801af48:	d001      	beq.n	801af4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801af4a:	2301      	movs	r3, #1
 801af4c:	e00b      	b.n	801af66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801af4e:	887b      	ldrh	r3, [r7, #2]
 801af50:	461a      	mov	r2, r3
 801af52:	6879      	ldr	r1, [r7, #4]
 801af54:	4806      	ldr	r0, [pc, #24]	@ (801af70 <CDC_Transmit_FS+0x48>)
 801af56:	f7fe fb2b 	bl	80195b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801af5a:	4805      	ldr	r0, [pc, #20]	@ (801af70 <CDC_Transmit_FS+0x48>)
 801af5c:	f7fe fb68 	bl	8019630 <USBD_CDC_TransmitPacket>
 801af60:	4603      	mov	r3, r0
 801af62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801af64:	7bfb      	ldrb	r3, [r7, #15]
}
 801af66:	4618      	mov	r0, r3
 801af68:	3710      	adds	r7, #16
 801af6a:	46bd      	mov	sp, r7
 801af6c:	bd80      	pop	{r7, pc}
 801af6e:	bf00      	nop
 801af70:	240472c4 	.word	0x240472c4

0801af74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801af74:	b480      	push	{r7}
 801af76:	b087      	sub	sp, #28
 801af78:	af00      	add	r7, sp, #0
 801af7a:	60f8      	str	r0, [r7, #12]
 801af7c:	60b9      	str	r1, [r7, #8]
 801af7e:	4613      	mov	r3, r2
 801af80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801af82:	2300      	movs	r3, #0
 801af84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801af86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801af8a:	4618      	mov	r0, r3
 801af8c:	371c      	adds	r7, #28
 801af8e:	46bd      	mov	sp, r7
 801af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af94:	4770      	bx	lr
	...

0801af98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801af98:	b480      	push	{r7}
 801af9a:	b083      	sub	sp, #12
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	4603      	mov	r3, r0
 801afa0:	6039      	str	r1, [r7, #0]
 801afa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801afa4:	683b      	ldr	r3, [r7, #0]
 801afa6:	2212      	movs	r2, #18
 801afa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801afaa:	4b03      	ldr	r3, [pc, #12]	@ (801afb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801afac:	4618      	mov	r0, r3
 801afae:	370c      	adds	r7, #12
 801afb0:	46bd      	mov	sp, r7
 801afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb6:	4770      	bx	lr
 801afb8:	24000310 	.word	0x24000310

0801afbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801afbc:	b480      	push	{r7}
 801afbe:	b083      	sub	sp, #12
 801afc0:	af00      	add	r7, sp, #0
 801afc2:	4603      	mov	r3, r0
 801afc4:	6039      	str	r1, [r7, #0]
 801afc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801afc8:	683b      	ldr	r3, [r7, #0]
 801afca:	2204      	movs	r2, #4
 801afcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801afce:	4b03      	ldr	r3, [pc, #12]	@ (801afdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801afd0:	4618      	mov	r0, r3
 801afd2:	370c      	adds	r7, #12
 801afd4:	46bd      	mov	sp, r7
 801afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afda:	4770      	bx	lr
 801afdc:	24000324 	.word	0x24000324

0801afe0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b082      	sub	sp, #8
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	4603      	mov	r3, r0
 801afe8:	6039      	str	r1, [r7, #0]
 801afea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801afec:	79fb      	ldrb	r3, [r7, #7]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d105      	bne.n	801affe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801aff2:	683a      	ldr	r2, [r7, #0]
 801aff4:	4907      	ldr	r1, [pc, #28]	@ (801b014 <USBD_FS_ProductStrDescriptor+0x34>)
 801aff6:	4808      	ldr	r0, [pc, #32]	@ (801b018 <USBD_FS_ProductStrDescriptor+0x38>)
 801aff8:	f7ff fdd0 	bl	801ab9c <USBD_GetString>
 801affc:	e004      	b.n	801b008 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801affe:	683a      	ldr	r2, [r7, #0]
 801b000:	4904      	ldr	r1, [pc, #16]	@ (801b014 <USBD_FS_ProductStrDescriptor+0x34>)
 801b002:	4805      	ldr	r0, [pc, #20]	@ (801b018 <USBD_FS_ProductStrDescriptor+0x38>)
 801b004:	f7ff fdca 	bl	801ab9c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b008:	4b02      	ldr	r3, [pc, #8]	@ (801b014 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	3708      	adds	r7, #8
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}
 801b012:	bf00      	nop
 801b014:	240485a4 	.word	0x240485a4
 801b018:	0801ebe8 	.word	0x0801ebe8

0801b01c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b082      	sub	sp, #8
 801b020:	af00      	add	r7, sp, #0
 801b022:	4603      	mov	r3, r0
 801b024:	6039      	str	r1, [r7, #0]
 801b026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b028:	683a      	ldr	r2, [r7, #0]
 801b02a:	4904      	ldr	r1, [pc, #16]	@ (801b03c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b02c:	4804      	ldr	r0, [pc, #16]	@ (801b040 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b02e:	f7ff fdb5 	bl	801ab9c <USBD_GetString>
  return USBD_StrDesc;
 801b032:	4b02      	ldr	r3, [pc, #8]	@ (801b03c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b034:	4618      	mov	r0, r3
 801b036:	3708      	adds	r7, #8
 801b038:	46bd      	mov	sp, r7
 801b03a:	bd80      	pop	{r7, pc}
 801b03c:	240485a4 	.word	0x240485a4
 801b040:	0801ec00 	.word	0x0801ec00

0801b044 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b044:	b580      	push	{r7, lr}
 801b046:	b082      	sub	sp, #8
 801b048:	af00      	add	r7, sp, #0
 801b04a:	4603      	mov	r3, r0
 801b04c:	6039      	str	r1, [r7, #0]
 801b04e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b050:	683b      	ldr	r3, [r7, #0]
 801b052:	221a      	movs	r2, #26
 801b054:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b056:	f000 f843 	bl	801b0e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b05a:	4b02      	ldr	r3, [pc, #8]	@ (801b064 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b05c:	4618      	mov	r0, r3
 801b05e:	3708      	adds	r7, #8
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}
 801b064:	24000328 	.word	0x24000328

0801b068 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b082      	sub	sp, #8
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	4603      	mov	r3, r0
 801b070:	6039      	str	r1, [r7, #0]
 801b072:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b074:	79fb      	ldrb	r3, [r7, #7]
 801b076:	2b00      	cmp	r3, #0
 801b078:	d105      	bne.n	801b086 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b07a:	683a      	ldr	r2, [r7, #0]
 801b07c:	4907      	ldr	r1, [pc, #28]	@ (801b09c <USBD_FS_ConfigStrDescriptor+0x34>)
 801b07e:	4808      	ldr	r0, [pc, #32]	@ (801b0a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b080:	f7ff fd8c 	bl	801ab9c <USBD_GetString>
 801b084:	e004      	b.n	801b090 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b086:	683a      	ldr	r2, [r7, #0]
 801b088:	4904      	ldr	r1, [pc, #16]	@ (801b09c <USBD_FS_ConfigStrDescriptor+0x34>)
 801b08a:	4805      	ldr	r0, [pc, #20]	@ (801b0a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b08c:	f7ff fd86 	bl	801ab9c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b090:	4b02      	ldr	r3, [pc, #8]	@ (801b09c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b092:	4618      	mov	r0, r3
 801b094:	3708      	adds	r7, #8
 801b096:	46bd      	mov	sp, r7
 801b098:	bd80      	pop	{r7, pc}
 801b09a:	bf00      	nop
 801b09c:	240485a4 	.word	0x240485a4
 801b0a0:	0801ec14 	.word	0x0801ec14

0801b0a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b082      	sub	sp, #8
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	6039      	str	r1, [r7, #0]
 801b0ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b0b0:	79fb      	ldrb	r3, [r7, #7]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d105      	bne.n	801b0c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b0b6:	683a      	ldr	r2, [r7, #0]
 801b0b8:	4907      	ldr	r1, [pc, #28]	@ (801b0d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b0ba:	4808      	ldr	r0, [pc, #32]	@ (801b0dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b0bc:	f7ff fd6e 	bl	801ab9c <USBD_GetString>
 801b0c0:	e004      	b.n	801b0cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b0c2:	683a      	ldr	r2, [r7, #0]
 801b0c4:	4904      	ldr	r1, [pc, #16]	@ (801b0d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b0c6:	4805      	ldr	r0, [pc, #20]	@ (801b0dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b0c8:	f7ff fd68 	bl	801ab9c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b0cc:	4b02      	ldr	r3, [pc, #8]	@ (801b0d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	3708      	adds	r7, #8
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bd80      	pop	{r7, pc}
 801b0d6:	bf00      	nop
 801b0d8:	240485a4 	.word	0x240485a4
 801b0dc:	0801ec20 	.word	0x0801ec20

0801b0e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b084      	sub	sp, #16
 801b0e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b0e6:	4b0f      	ldr	r3, [pc, #60]	@ (801b124 <Get_SerialNum+0x44>)
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b0ec:	4b0e      	ldr	r3, [pc, #56]	@ (801b128 <Get_SerialNum+0x48>)
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b0f2:	4b0e      	ldr	r3, [pc, #56]	@ (801b12c <Get_SerialNum+0x4c>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b0f8:	68fa      	ldr	r2, [r7, #12]
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	4413      	add	r3, r2
 801b0fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d009      	beq.n	801b11a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b106:	2208      	movs	r2, #8
 801b108:	4909      	ldr	r1, [pc, #36]	@ (801b130 <Get_SerialNum+0x50>)
 801b10a:	68f8      	ldr	r0, [r7, #12]
 801b10c:	f000 f814 	bl	801b138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b110:	2204      	movs	r2, #4
 801b112:	4908      	ldr	r1, [pc, #32]	@ (801b134 <Get_SerialNum+0x54>)
 801b114:	68b8      	ldr	r0, [r7, #8]
 801b116:	f000 f80f 	bl	801b138 <IntToUnicode>
  }
}
 801b11a:	bf00      	nop
 801b11c:	3710      	adds	r7, #16
 801b11e:	46bd      	mov	sp, r7
 801b120:	bd80      	pop	{r7, pc}
 801b122:	bf00      	nop
 801b124:	1ff1e800 	.word	0x1ff1e800
 801b128:	1ff1e804 	.word	0x1ff1e804
 801b12c:	1ff1e808 	.word	0x1ff1e808
 801b130:	2400032a 	.word	0x2400032a
 801b134:	2400033a 	.word	0x2400033a

0801b138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b138:	b480      	push	{r7}
 801b13a:	b087      	sub	sp, #28
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	60f8      	str	r0, [r7, #12]
 801b140:	60b9      	str	r1, [r7, #8]
 801b142:	4613      	mov	r3, r2
 801b144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b146:	2300      	movs	r3, #0
 801b148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b14a:	2300      	movs	r3, #0
 801b14c:	75fb      	strb	r3, [r7, #23]
 801b14e:	e027      	b.n	801b1a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	0f1b      	lsrs	r3, r3, #28
 801b154:	2b09      	cmp	r3, #9
 801b156:	d80b      	bhi.n	801b170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	0f1b      	lsrs	r3, r3, #28
 801b15c:	b2da      	uxtb	r2, r3
 801b15e:	7dfb      	ldrb	r3, [r7, #23]
 801b160:	005b      	lsls	r3, r3, #1
 801b162:	4619      	mov	r1, r3
 801b164:	68bb      	ldr	r3, [r7, #8]
 801b166:	440b      	add	r3, r1
 801b168:	3230      	adds	r2, #48	@ 0x30
 801b16a:	b2d2      	uxtb	r2, r2
 801b16c:	701a      	strb	r2, [r3, #0]
 801b16e:	e00a      	b.n	801b186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	0f1b      	lsrs	r3, r3, #28
 801b174:	b2da      	uxtb	r2, r3
 801b176:	7dfb      	ldrb	r3, [r7, #23]
 801b178:	005b      	lsls	r3, r3, #1
 801b17a:	4619      	mov	r1, r3
 801b17c:	68bb      	ldr	r3, [r7, #8]
 801b17e:	440b      	add	r3, r1
 801b180:	3237      	adds	r2, #55	@ 0x37
 801b182:	b2d2      	uxtb	r2, r2
 801b184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	011b      	lsls	r3, r3, #4
 801b18a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b18c:	7dfb      	ldrb	r3, [r7, #23]
 801b18e:	005b      	lsls	r3, r3, #1
 801b190:	3301      	adds	r3, #1
 801b192:	68ba      	ldr	r2, [r7, #8]
 801b194:	4413      	add	r3, r2
 801b196:	2200      	movs	r2, #0
 801b198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b19a:	7dfb      	ldrb	r3, [r7, #23]
 801b19c:	3301      	adds	r3, #1
 801b19e:	75fb      	strb	r3, [r7, #23]
 801b1a0:	7dfa      	ldrb	r2, [r7, #23]
 801b1a2:	79fb      	ldrb	r3, [r7, #7]
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d3d3      	bcc.n	801b150 <IntToUnicode+0x18>
  }
}
 801b1a8:	bf00      	nop
 801b1aa:	bf00      	nop
 801b1ac:	371c      	adds	r7, #28
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1b4:	4770      	bx	lr
	...

0801b1b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b0ba      	sub	sp, #232	@ 0xe8
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b1c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801b1c4:	2200      	movs	r2, #0
 801b1c6:	601a      	str	r2, [r3, #0]
 801b1c8:	605a      	str	r2, [r3, #4]
 801b1ca:	609a      	str	r2, [r3, #8]
 801b1cc:	60da      	str	r2, [r3, #12]
 801b1ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801b1d0:	f107 0310 	add.w	r3, r7, #16
 801b1d4:	22c0      	movs	r2, #192	@ 0xc0
 801b1d6:	2100      	movs	r1, #0
 801b1d8:	4618      	mov	r0, r3
 801b1da:	f001 f936 	bl	801c44a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	4a2c      	ldr	r2, [pc, #176]	@ (801b294 <HAL_PCD_MspInit+0xdc>)
 801b1e4:	4293      	cmp	r3, r2
 801b1e6:	d151      	bne.n	801b28c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801b1e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801b1ec:	f04f 0300 	mov.w	r3, #0
 801b1f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801b1f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801b1f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b1fc:	f107 0310 	add.w	r3, r7, #16
 801b200:	4618      	mov	r0, r3
 801b202:	f7f4 ff15 	bl	8010030 <HAL_RCCEx_PeriphCLKConfig>
 801b206:	4603      	mov	r3, r0
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d001      	beq.n	801b210 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801b20c:	f7e6 fff2 	bl	80021f4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801b210:	f7f3 ff18 	bl	800f044 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b214:	4b20      	ldr	r3, [pc, #128]	@ (801b298 <HAL_PCD_MspInit+0xe0>)
 801b216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b21a:	4a1f      	ldr	r2, [pc, #124]	@ (801b298 <HAL_PCD_MspInit+0xe0>)
 801b21c:	f043 0301 	orr.w	r3, r3, #1
 801b220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b224:	4b1c      	ldr	r3, [pc, #112]	@ (801b298 <HAL_PCD_MspInit+0xe0>)
 801b226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b22a:	f003 0301 	and.w	r3, r3, #1
 801b22e:	60fb      	str	r3, [r7, #12]
 801b230:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801b232:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801b236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b23a:	2302      	movs	r3, #2
 801b23c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b240:	2300      	movs	r3, #0
 801b242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b246:	2300      	movs	r3, #0
 801b248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801b24c:	230a      	movs	r3, #10
 801b24e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b252:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801b256:	4619      	mov	r1, r3
 801b258:	4810      	ldr	r0, [pc, #64]	@ (801b29c <HAL_PCD_MspInit+0xe4>)
 801b25a:	f7ed f8c7 	bl	80083ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b25e:	4b0e      	ldr	r3, [pc, #56]	@ (801b298 <HAL_PCD_MspInit+0xe0>)
 801b260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801b264:	4a0c      	ldr	r2, [pc, #48]	@ (801b298 <HAL_PCD_MspInit+0xe0>)
 801b266:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801b26a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801b26e:	4b0a      	ldr	r3, [pc, #40]	@ (801b298 <HAL_PCD_MspInit+0xe0>)
 801b270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801b274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801b278:	60bb      	str	r3, [r7, #8]
 801b27a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801b27c:	2200      	movs	r2, #0
 801b27e:	2100      	movs	r1, #0
 801b280:	2065      	movs	r0, #101	@ 0x65
 801b282:	f7ea f9b0 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b286:	2065      	movs	r0, #101	@ 0x65
 801b288:	f7ea f9c7 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b28c:	bf00      	nop
 801b28e:	37e8      	adds	r7, #232	@ 0xe8
 801b290:	46bd      	mov	sp, r7
 801b292:	bd80      	pop	{r7, pc}
 801b294:	40080000 	.word	0x40080000
 801b298:	58024400 	.word	0x58024400
 801b29c:	58020000 	.word	0x58020000

0801b2a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b082      	sub	sp, #8
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801b2b4:	4619      	mov	r1, r3
 801b2b6:	4610      	mov	r0, r2
 801b2b8:	f7fe fae3 	bl	8019882 <USBD_LL_SetupStage>
}
 801b2bc:	bf00      	nop
 801b2be:	3708      	adds	r7, #8
 801b2c0:	46bd      	mov	sp, r7
 801b2c2:	bd80      	pop	{r7, pc}

0801b2c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b082      	sub	sp, #8
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	6078      	str	r0, [r7, #4]
 801b2cc:	460b      	mov	r3, r1
 801b2ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801b2d6:	78fa      	ldrb	r2, [r7, #3]
 801b2d8:	6879      	ldr	r1, [r7, #4]
 801b2da:	4613      	mov	r3, r2
 801b2dc:	00db      	lsls	r3, r3, #3
 801b2de:	4413      	add	r3, r2
 801b2e0:	009b      	lsls	r3, r3, #2
 801b2e2:	440b      	add	r3, r1
 801b2e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801b2e8:	681a      	ldr	r2, [r3, #0]
 801b2ea:	78fb      	ldrb	r3, [r7, #3]
 801b2ec:	4619      	mov	r1, r3
 801b2ee:	f7fe fb1d 	bl	801992c <USBD_LL_DataOutStage>
}
 801b2f2:	bf00      	nop
 801b2f4:	3708      	adds	r7, #8
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}

0801b2fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b2fa:	b580      	push	{r7, lr}
 801b2fc:	b082      	sub	sp, #8
 801b2fe:	af00      	add	r7, sp, #0
 801b300:	6078      	str	r0, [r7, #4]
 801b302:	460b      	mov	r3, r1
 801b304:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801b30c:	78fa      	ldrb	r2, [r7, #3]
 801b30e:	6879      	ldr	r1, [r7, #4]
 801b310:	4613      	mov	r3, r2
 801b312:	00db      	lsls	r3, r3, #3
 801b314:	4413      	add	r3, r2
 801b316:	009b      	lsls	r3, r3, #2
 801b318:	440b      	add	r3, r1
 801b31a:	3320      	adds	r3, #32
 801b31c:	681a      	ldr	r2, [r3, #0]
 801b31e:	78fb      	ldrb	r3, [r7, #3]
 801b320:	4619      	mov	r1, r3
 801b322:	f7fe fbb6 	bl	8019a92 <USBD_LL_DataInStage>
}
 801b326:	bf00      	nop
 801b328:	3708      	adds	r7, #8
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd80      	pop	{r7, pc}

0801b32e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b32e:	b580      	push	{r7, lr}
 801b330:	b082      	sub	sp, #8
 801b332:	af00      	add	r7, sp, #0
 801b334:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7fe fcf0 	bl	8019d22 <USBD_LL_SOF>
}
 801b342:	bf00      	nop
 801b344:	3708      	adds	r7, #8
 801b346:	46bd      	mov	sp, r7
 801b348:	bd80      	pop	{r7, pc}

0801b34a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b34a:	b580      	push	{r7, lr}
 801b34c:	b084      	sub	sp, #16
 801b34e:	af00      	add	r7, sp, #0
 801b350:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b352:	2301      	movs	r3, #1
 801b354:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	79db      	ldrb	r3, [r3, #7]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d102      	bne.n	801b364 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801b35e:	2300      	movs	r3, #0
 801b360:	73fb      	strb	r3, [r7, #15]
 801b362:	e008      	b.n	801b376 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	79db      	ldrb	r3, [r3, #7]
 801b368:	2b02      	cmp	r3, #2
 801b36a:	d102      	bne.n	801b372 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801b36c:	2301      	movs	r3, #1
 801b36e:	73fb      	strb	r3, [r7, #15]
 801b370:	e001      	b.n	801b376 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801b372:	f7e6 ff3f 	bl	80021f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b37c:	7bfa      	ldrb	r2, [r7, #15]
 801b37e:	4611      	mov	r1, r2
 801b380:	4618      	mov	r0, r3
 801b382:	f7fe fc8a 	bl	8019c9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b38c:	4618      	mov	r0, r3
 801b38e:	f7fe fc32 	bl	8019bf6 <USBD_LL_Reset>
}
 801b392:	bf00      	nop
 801b394:	3710      	adds	r7, #16
 801b396:	46bd      	mov	sp, r7
 801b398:	bd80      	pop	{r7, pc}
	...

0801b39c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	b082      	sub	sp, #8
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	f7fe fc85 	bl	8019cba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	687a      	ldr	r2, [r7, #4]
 801b3bc:	6812      	ldr	r2, [r2, #0]
 801b3be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801b3c2:	f043 0301 	orr.w	r3, r3, #1
 801b3c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	7adb      	ldrb	r3, [r3, #11]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d005      	beq.n	801b3dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b3d0:	4b04      	ldr	r3, [pc, #16]	@ (801b3e4 <HAL_PCD_SuspendCallback+0x48>)
 801b3d2:	691b      	ldr	r3, [r3, #16]
 801b3d4:	4a03      	ldr	r2, [pc, #12]	@ (801b3e4 <HAL_PCD_SuspendCallback+0x48>)
 801b3d6:	f043 0306 	orr.w	r3, r3, #6
 801b3da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b3dc:	bf00      	nop
 801b3de:	3708      	adds	r7, #8
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	bd80      	pop	{r7, pc}
 801b3e4:	e000ed00 	.word	0xe000ed00

0801b3e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b3e8:	b580      	push	{r7, lr}
 801b3ea:	b082      	sub	sp, #8
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f7fe fc7b 	bl	8019cf2 <USBD_LL_Resume>
}
 801b3fc:	bf00      	nop
 801b3fe:	3708      	adds	r7, #8
 801b400:	46bd      	mov	sp, r7
 801b402:	bd80      	pop	{r7, pc}

0801b404 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b082      	sub	sp, #8
 801b408:	af00      	add	r7, sp, #0
 801b40a:	6078      	str	r0, [r7, #4]
 801b40c:	460b      	mov	r3, r1
 801b40e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b416:	78fa      	ldrb	r2, [r7, #3]
 801b418:	4611      	mov	r1, r2
 801b41a:	4618      	mov	r0, r3
 801b41c:	f7fe fcd3 	bl	8019dc6 <USBD_LL_IsoOUTIncomplete>
}
 801b420:	bf00      	nop
 801b422:	3708      	adds	r7, #8
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}

0801b428 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b082      	sub	sp, #8
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
 801b430:	460b      	mov	r3, r1
 801b432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b43a:	78fa      	ldrb	r2, [r7, #3]
 801b43c:	4611      	mov	r1, r2
 801b43e:	4618      	mov	r0, r3
 801b440:	f7fe fc8f 	bl	8019d62 <USBD_LL_IsoINIncomplete>
}
 801b444:	bf00      	nop
 801b446:	3708      	adds	r7, #8
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}

0801b44c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b082      	sub	sp, #8
 801b450:	af00      	add	r7, sp, #0
 801b452:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b45a:	4618      	mov	r0, r3
 801b45c:	f7fe fce5 	bl	8019e2a <USBD_LL_DevConnected>
}
 801b460:	bf00      	nop
 801b462:	3708      	adds	r7, #8
 801b464:	46bd      	mov	sp, r7
 801b466:	bd80      	pop	{r7, pc}

0801b468 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b468:	b580      	push	{r7, lr}
 801b46a:	b082      	sub	sp, #8
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b476:	4618      	mov	r0, r3
 801b478:	f7fe fce2 	bl	8019e40 <USBD_LL_DevDisconnected>
}
 801b47c:	bf00      	nop
 801b47e:	3708      	adds	r7, #8
 801b480:	46bd      	mov	sp, r7
 801b482:	bd80      	pop	{r7, pc}

0801b484 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b484:	b580      	push	{r7, lr}
 801b486:	b082      	sub	sp, #8
 801b488:	af00      	add	r7, sp, #0
 801b48a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	781b      	ldrb	r3, [r3, #0]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d13e      	bne.n	801b512 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801b494:	4a21      	ldr	r2, [pc, #132]	@ (801b51c <USBD_LL_Init+0x98>)
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	4a1f      	ldr	r2, [pc, #124]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b4a4:	4b1d      	ldr	r3, [pc, #116]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4a6:	4a1e      	ldr	r2, [pc, #120]	@ (801b520 <USBD_LL_Init+0x9c>)
 801b4a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801b4aa:	4b1c      	ldr	r3, [pc, #112]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4ac:	2209      	movs	r2, #9
 801b4ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801b4b0:	4b1a      	ldr	r3, [pc, #104]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4b2:	2202      	movs	r2, #2
 801b4b4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b4b6:	4b19      	ldr	r3, [pc, #100]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b4bc:	4b17      	ldr	r3, [pc, #92]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4be:	2202      	movs	r2, #2
 801b4c0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b4c2:	4b16      	ldr	r3, [pc, #88]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4c4:	2200      	movs	r2, #0
 801b4c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801b4c8:	4b14      	ldr	r3, [pc, #80]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801b4ce:	4b13      	ldr	r3, [pc, #76]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801b4d4:	4b11      	ldr	r3, [pc, #68]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4d6:	2200      	movs	r2, #0
 801b4d8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801b4da:	4b10      	ldr	r3, [pc, #64]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4dc:	2200      	movs	r2, #0
 801b4de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801b4e0:	4b0e      	ldr	r3, [pc, #56]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4e2:	2200      	movs	r2, #0
 801b4e4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801b4e6:	480d      	ldr	r0, [pc, #52]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4e8:	f7f2 fad2 	bl	800da90 <HAL_PCD_Init>
 801b4ec:	4603      	mov	r3, r0
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d001      	beq.n	801b4f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801b4f2:	f7e6 fe7f 	bl	80021f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801b4f6:	2180      	movs	r1, #128	@ 0x80
 801b4f8:	4808      	ldr	r0, [pc, #32]	@ (801b51c <USBD_LL_Init+0x98>)
 801b4fa:	f7f3 fd28 	bl	800ef4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801b4fe:	2240      	movs	r2, #64	@ 0x40
 801b500:	2100      	movs	r1, #0
 801b502:	4806      	ldr	r0, [pc, #24]	@ (801b51c <USBD_LL_Init+0x98>)
 801b504:	f7f3 fcdc 	bl	800eec0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801b508:	2280      	movs	r2, #128	@ 0x80
 801b50a:	2101      	movs	r1, #1
 801b50c:	4803      	ldr	r0, [pc, #12]	@ (801b51c <USBD_LL_Init+0x98>)
 801b50e:	f7f3 fcd7 	bl	800eec0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801b512:	2300      	movs	r3, #0
}
 801b514:	4618      	mov	r0, r3
 801b516:	3708      	adds	r7, #8
 801b518:	46bd      	mov	sp, r7
 801b51a:	bd80      	pop	{r7, pc}
 801b51c:	240487a4 	.word	0x240487a4
 801b520:	40080000 	.word	0x40080000

0801b524 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b084      	sub	sp, #16
 801b528:	af00      	add	r7, sp, #0
 801b52a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b52c:	2300      	movs	r3, #0
 801b52e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b530:	2300      	movs	r3, #0
 801b532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b53a:	4618      	mov	r0, r3
 801b53c:	f7f2 fbb4 	bl	800dca8 <HAL_PCD_Start>
 801b540:	4603      	mov	r3, r0
 801b542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b544:	7bfb      	ldrb	r3, [r7, #15]
 801b546:	4618      	mov	r0, r3
 801b548:	f000 f942 	bl	801b7d0 <USBD_Get_USB_Status>
 801b54c:	4603      	mov	r3, r0
 801b54e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b550:	7bbb      	ldrb	r3, [r7, #14]
}
 801b552:	4618      	mov	r0, r3
 801b554:	3710      	adds	r7, #16
 801b556:	46bd      	mov	sp, r7
 801b558:	bd80      	pop	{r7, pc}

0801b55a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b55a:	b580      	push	{r7, lr}
 801b55c:	b084      	sub	sp, #16
 801b55e:	af00      	add	r7, sp, #0
 801b560:	6078      	str	r0, [r7, #4]
 801b562:	4608      	mov	r0, r1
 801b564:	4611      	mov	r1, r2
 801b566:	461a      	mov	r2, r3
 801b568:	4603      	mov	r3, r0
 801b56a:	70fb      	strb	r3, [r7, #3]
 801b56c:	460b      	mov	r3, r1
 801b56e:	70bb      	strb	r3, [r7, #2]
 801b570:	4613      	mov	r3, r2
 801b572:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b574:	2300      	movs	r3, #0
 801b576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b578:	2300      	movs	r3, #0
 801b57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b582:	78bb      	ldrb	r3, [r7, #2]
 801b584:	883a      	ldrh	r2, [r7, #0]
 801b586:	78f9      	ldrb	r1, [r7, #3]
 801b588:	f7f3 f8b5 	bl	800e6f6 <HAL_PCD_EP_Open>
 801b58c:	4603      	mov	r3, r0
 801b58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b590:	7bfb      	ldrb	r3, [r7, #15]
 801b592:	4618      	mov	r0, r3
 801b594:	f000 f91c 	bl	801b7d0 <USBD_Get_USB_Status>
 801b598:	4603      	mov	r3, r0
 801b59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b59c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b59e:	4618      	mov	r0, r3
 801b5a0:	3710      	adds	r7, #16
 801b5a2:	46bd      	mov	sp, r7
 801b5a4:	bd80      	pop	{r7, pc}

0801b5a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b5a6:	b580      	push	{r7, lr}
 801b5a8:	b084      	sub	sp, #16
 801b5aa:	af00      	add	r7, sp, #0
 801b5ac:	6078      	str	r0, [r7, #4]
 801b5ae:	460b      	mov	r3, r1
 801b5b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b5c0:	78fa      	ldrb	r2, [r7, #3]
 801b5c2:	4611      	mov	r1, r2
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	f7f3 f900 	bl	800e7ca <HAL_PCD_EP_Close>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b5ce:	7bfb      	ldrb	r3, [r7, #15]
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f000 f8fd 	bl	801b7d0 <USBD_Get_USB_Status>
 801b5d6:	4603      	mov	r3, r0
 801b5d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b5da:	7bbb      	ldrb	r3, [r7, #14]
}
 801b5dc:	4618      	mov	r0, r3
 801b5de:	3710      	adds	r7, #16
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bd80      	pop	{r7, pc}

0801b5e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b084      	sub	sp, #16
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	460b      	mov	r3, r1
 801b5ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b5fe:	78fa      	ldrb	r2, [r7, #3]
 801b600:	4611      	mov	r1, r2
 801b602:	4618      	mov	r0, r3
 801b604:	f7f3 f9b8 	bl	800e978 <HAL_PCD_EP_SetStall>
 801b608:	4603      	mov	r3, r0
 801b60a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b60c:	7bfb      	ldrb	r3, [r7, #15]
 801b60e:	4618      	mov	r0, r3
 801b610:	f000 f8de 	bl	801b7d0 <USBD_Get_USB_Status>
 801b614:	4603      	mov	r3, r0
 801b616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b618:	7bbb      	ldrb	r3, [r7, #14]
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	3710      	adds	r7, #16
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd80      	pop	{r7, pc}

0801b622 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b622:	b580      	push	{r7, lr}
 801b624:	b084      	sub	sp, #16
 801b626:	af00      	add	r7, sp, #0
 801b628:	6078      	str	r0, [r7, #4]
 801b62a:	460b      	mov	r3, r1
 801b62c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b62e:	2300      	movs	r3, #0
 801b630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b632:	2300      	movs	r3, #0
 801b634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b63c:	78fa      	ldrb	r2, [r7, #3]
 801b63e:	4611      	mov	r1, r2
 801b640:	4618      	mov	r0, r3
 801b642:	f7f3 f9fc 	bl	800ea3e <HAL_PCD_EP_ClrStall>
 801b646:	4603      	mov	r3, r0
 801b648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b64a:	7bfb      	ldrb	r3, [r7, #15]
 801b64c:	4618      	mov	r0, r3
 801b64e:	f000 f8bf 	bl	801b7d0 <USBD_Get_USB_Status>
 801b652:	4603      	mov	r3, r0
 801b654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b656:	7bbb      	ldrb	r3, [r7, #14]
}
 801b658:	4618      	mov	r0, r3
 801b65a:	3710      	adds	r7, #16
 801b65c:	46bd      	mov	sp, r7
 801b65e:	bd80      	pop	{r7, pc}

0801b660 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b660:	b480      	push	{r7}
 801b662:	b085      	sub	sp, #20
 801b664:	af00      	add	r7, sp, #0
 801b666:	6078      	str	r0, [r7, #4]
 801b668:	460b      	mov	r3, r1
 801b66a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b672:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	da0b      	bge.n	801b694 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b67c:	78fb      	ldrb	r3, [r7, #3]
 801b67e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b682:	68f9      	ldr	r1, [r7, #12]
 801b684:	4613      	mov	r3, r2
 801b686:	00db      	lsls	r3, r3, #3
 801b688:	4413      	add	r3, r2
 801b68a:	009b      	lsls	r3, r3, #2
 801b68c:	440b      	add	r3, r1
 801b68e:	3316      	adds	r3, #22
 801b690:	781b      	ldrb	r3, [r3, #0]
 801b692:	e00b      	b.n	801b6ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b694:	78fb      	ldrb	r3, [r7, #3]
 801b696:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b69a:	68f9      	ldr	r1, [r7, #12]
 801b69c:	4613      	mov	r3, r2
 801b69e:	00db      	lsls	r3, r3, #3
 801b6a0:	4413      	add	r3, r2
 801b6a2:	009b      	lsls	r3, r3, #2
 801b6a4:	440b      	add	r3, r1
 801b6a6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801b6aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	3714      	adds	r7, #20
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6b6:	4770      	bx	lr

0801b6b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b6b8:	b580      	push	{r7, lr}
 801b6ba:	b084      	sub	sp, #16
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	6078      	str	r0, [r7, #4]
 801b6c0:	460b      	mov	r3, r1
 801b6c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b6c8:	2300      	movs	r3, #0
 801b6ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b6d2:	78fa      	ldrb	r2, [r7, #3]
 801b6d4:	4611      	mov	r1, r2
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	f7f2 ffe9 	bl	800e6ae <HAL_PCD_SetAddress>
 801b6dc:	4603      	mov	r3, r0
 801b6de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b6e0:	7bfb      	ldrb	r3, [r7, #15]
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f000 f874 	bl	801b7d0 <USBD_Get_USB_Status>
 801b6e8:	4603      	mov	r3, r0
 801b6ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b6ec:	7bbb      	ldrb	r3, [r7, #14]
}
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	3710      	adds	r7, #16
 801b6f2:	46bd      	mov	sp, r7
 801b6f4:	bd80      	pop	{r7, pc}

0801b6f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b6f6:	b580      	push	{r7, lr}
 801b6f8:	b086      	sub	sp, #24
 801b6fa:	af00      	add	r7, sp, #0
 801b6fc:	60f8      	str	r0, [r7, #12]
 801b6fe:	607a      	str	r2, [r7, #4]
 801b700:	603b      	str	r3, [r7, #0]
 801b702:	460b      	mov	r3, r1
 801b704:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b706:	2300      	movs	r3, #0
 801b708:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b70a:	2300      	movs	r3, #0
 801b70c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b714:	7af9      	ldrb	r1, [r7, #11]
 801b716:	683b      	ldr	r3, [r7, #0]
 801b718:	687a      	ldr	r2, [r7, #4]
 801b71a:	f7f3 f8f3 	bl	800e904 <HAL_PCD_EP_Transmit>
 801b71e:	4603      	mov	r3, r0
 801b720:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b722:	7dfb      	ldrb	r3, [r7, #23]
 801b724:	4618      	mov	r0, r3
 801b726:	f000 f853 	bl	801b7d0 <USBD_Get_USB_Status>
 801b72a:	4603      	mov	r3, r0
 801b72c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b72e:	7dbb      	ldrb	r3, [r7, #22]
}
 801b730:	4618      	mov	r0, r3
 801b732:	3718      	adds	r7, #24
 801b734:	46bd      	mov	sp, r7
 801b736:	bd80      	pop	{r7, pc}

0801b738 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b086      	sub	sp, #24
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	60f8      	str	r0, [r7, #12]
 801b740:	607a      	str	r2, [r7, #4]
 801b742:	603b      	str	r3, [r7, #0]
 801b744:	460b      	mov	r3, r1
 801b746:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b748:	2300      	movs	r3, #0
 801b74a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b74c:	2300      	movs	r3, #0
 801b74e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b756:	7af9      	ldrb	r1, [r7, #11]
 801b758:	683b      	ldr	r3, [r7, #0]
 801b75a:	687a      	ldr	r2, [r7, #4]
 801b75c:	f7f3 f87f 	bl	800e85e <HAL_PCD_EP_Receive>
 801b760:	4603      	mov	r3, r0
 801b762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b764:	7dfb      	ldrb	r3, [r7, #23]
 801b766:	4618      	mov	r0, r3
 801b768:	f000 f832 	bl	801b7d0 <USBD_Get_USB_Status>
 801b76c:	4603      	mov	r3, r0
 801b76e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b770:	7dbb      	ldrb	r3, [r7, #22]
}
 801b772:	4618      	mov	r0, r3
 801b774:	3718      	adds	r7, #24
 801b776:	46bd      	mov	sp, r7
 801b778:	bd80      	pop	{r7, pc}

0801b77a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b77a:	b580      	push	{r7, lr}
 801b77c:	b082      	sub	sp, #8
 801b77e:	af00      	add	r7, sp, #0
 801b780:	6078      	str	r0, [r7, #4]
 801b782:	460b      	mov	r3, r1
 801b784:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b78c:	78fa      	ldrb	r2, [r7, #3]
 801b78e:	4611      	mov	r1, r2
 801b790:	4618      	mov	r0, r3
 801b792:	f7f3 f89f 	bl	800e8d4 <HAL_PCD_EP_GetRxCount>
 801b796:	4603      	mov	r3, r0
}
 801b798:	4618      	mov	r0, r3
 801b79a:	3708      	adds	r7, #8
 801b79c:	46bd      	mov	sp, r7
 801b79e:	bd80      	pop	{r7, pc}

0801b7a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b7a0:	b480      	push	{r7}
 801b7a2:	b083      	sub	sp, #12
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b7a8:	4b03      	ldr	r3, [pc, #12]	@ (801b7b8 <USBD_static_malloc+0x18>)
}
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	370c      	adds	r7, #12
 801b7ae:	46bd      	mov	sp, r7
 801b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b4:	4770      	bx	lr
 801b7b6:	bf00      	nop
 801b7b8:	24048c88 	.word	0x24048c88

0801b7bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b7bc:	b480      	push	{r7}
 801b7be:	b083      	sub	sp, #12
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801b7c4:	bf00      	nop
 801b7c6:	370c      	adds	r7, #12
 801b7c8:	46bd      	mov	sp, r7
 801b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ce:	4770      	bx	lr

0801b7d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b7d0:	b480      	push	{r7}
 801b7d2:	b085      	sub	sp, #20
 801b7d4:	af00      	add	r7, sp, #0
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b7da:	2300      	movs	r3, #0
 801b7dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b7de:	79fb      	ldrb	r3, [r7, #7]
 801b7e0:	2b03      	cmp	r3, #3
 801b7e2:	d817      	bhi.n	801b814 <USBD_Get_USB_Status+0x44>
 801b7e4:	a201      	add	r2, pc, #4	@ (adr r2, 801b7ec <USBD_Get_USB_Status+0x1c>)
 801b7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7ea:	bf00      	nop
 801b7ec:	0801b7fd 	.word	0x0801b7fd
 801b7f0:	0801b803 	.word	0x0801b803
 801b7f4:	0801b809 	.word	0x0801b809
 801b7f8:	0801b80f 	.word	0x0801b80f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	73fb      	strb	r3, [r7, #15]
    break;
 801b800:	e00b      	b.n	801b81a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b802:	2303      	movs	r3, #3
 801b804:	73fb      	strb	r3, [r7, #15]
    break;
 801b806:	e008      	b.n	801b81a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b808:	2301      	movs	r3, #1
 801b80a:	73fb      	strb	r3, [r7, #15]
    break;
 801b80c:	e005      	b.n	801b81a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b80e:	2303      	movs	r3, #3
 801b810:	73fb      	strb	r3, [r7, #15]
    break;
 801b812:	e002      	b.n	801b81a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b814:	2303      	movs	r3, #3
 801b816:	73fb      	strb	r3, [r7, #15]
    break;
 801b818:	bf00      	nop
  }
  return usb_status;
 801b81a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b81c:	4618      	mov	r0, r3
 801b81e:	3714      	adds	r7, #20
 801b820:	46bd      	mov	sp, r7
 801b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b826:	4770      	bx	lr

0801b828 <malloc>:
 801b828:	4b02      	ldr	r3, [pc, #8]	@ (801b834 <malloc+0xc>)
 801b82a:	4601      	mov	r1, r0
 801b82c:	6818      	ldr	r0, [r3, #0]
 801b82e:	f000 b825 	b.w	801b87c <_malloc_r>
 801b832:	bf00      	nop
 801b834:	24000350 	.word	0x24000350

0801b838 <sbrk_aligned>:
 801b838:	b570      	push	{r4, r5, r6, lr}
 801b83a:	4e0f      	ldr	r6, [pc, #60]	@ (801b878 <sbrk_aligned+0x40>)
 801b83c:	460c      	mov	r4, r1
 801b83e:	6831      	ldr	r1, [r6, #0]
 801b840:	4605      	mov	r5, r0
 801b842:	b911      	cbnz	r1, 801b84a <sbrk_aligned+0x12>
 801b844:	f000 fe42 	bl	801c4cc <_sbrk_r>
 801b848:	6030      	str	r0, [r6, #0]
 801b84a:	4621      	mov	r1, r4
 801b84c:	4628      	mov	r0, r5
 801b84e:	f000 fe3d 	bl	801c4cc <_sbrk_r>
 801b852:	1c43      	adds	r3, r0, #1
 801b854:	d103      	bne.n	801b85e <sbrk_aligned+0x26>
 801b856:	f04f 34ff 	mov.w	r4, #4294967295
 801b85a:	4620      	mov	r0, r4
 801b85c:	bd70      	pop	{r4, r5, r6, pc}
 801b85e:	1cc4      	adds	r4, r0, #3
 801b860:	f024 0403 	bic.w	r4, r4, #3
 801b864:	42a0      	cmp	r0, r4
 801b866:	d0f8      	beq.n	801b85a <sbrk_aligned+0x22>
 801b868:	1a21      	subs	r1, r4, r0
 801b86a:	4628      	mov	r0, r5
 801b86c:	f000 fe2e 	bl	801c4cc <_sbrk_r>
 801b870:	3001      	adds	r0, #1
 801b872:	d1f2      	bne.n	801b85a <sbrk_aligned+0x22>
 801b874:	e7ef      	b.n	801b856 <sbrk_aligned+0x1e>
 801b876:	bf00      	nop
 801b878:	24048ea8 	.word	0x24048ea8

0801b87c <_malloc_r>:
 801b87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b880:	1ccd      	adds	r5, r1, #3
 801b882:	f025 0503 	bic.w	r5, r5, #3
 801b886:	3508      	adds	r5, #8
 801b888:	2d0c      	cmp	r5, #12
 801b88a:	bf38      	it	cc
 801b88c:	250c      	movcc	r5, #12
 801b88e:	2d00      	cmp	r5, #0
 801b890:	4606      	mov	r6, r0
 801b892:	db01      	blt.n	801b898 <_malloc_r+0x1c>
 801b894:	42a9      	cmp	r1, r5
 801b896:	d904      	bls.n	801b8a2 <_malloc_r+0x26>
 801b898:	230c      	movs	r3, #12
 801b89a:	6033      	str	r3, [r6, #0]
 801b89c:	2000      	movs	r0, #0
 801b89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b978 <_malloc_r+0xfc>
 801b8a6:	f000 f869 	bl	801b97c <__malloc_lock>
 801b8aa:	f8d8 3000 	ldr.w	r3, [r8]
 801b8ae:	461c      	mov	r4, r3
 801b8b0:	bb44      	cbnz	r4, 801b904 <_malloc_r+0x88>
 801b8b2:	4629      	mov	r1, r5
 801b8b4:	4630      	mov	r0, r6
 801b8b6:	f7ff ffbf 	bl	801b838 <sbrk_aligned>
 801b8ba:	1c43      	adds	r3, r0, #1
 801b8bc:	4604      	mov	r4, r0
 801b8be:	d158      	bne.n	801b972 <_malloc_r+0xf6>
 801b8c0:	f8d8 4000 	ldr.w	r4, [r8]
 801b8c4:	4627      	mov	r7, r4
 801b8c6:	2f00      	cmp	r7, #0
 801b8c8:	d143      	bne.n	801b952 <_malloc_r+0xd6>
 801b8ca:	2c00      	cmp	r4, #0
 801b8cc:	d04b      	beq.n	801b966 <_malloc_r+0xea>
 801b8ce:	6823      	ldr	r3, [r4, #0]
 801b8d0:	4639      	mov	r1, r7
 801b8d2:	4630      	mov	r0, r6
 801b8d4:	eb04 0903 	add.w	r9, r4, r3
 801b8d8:	f000 fdf8 	bl	801c4cc <_sbrk_r>
 801b8dc:	4581      	cmp	r9, r0
 801b8de:	d142      	bne.n	801b966 <_malloc_r+0xea>
 801b8e0:	6821      	ldr	r1, [r4, #0]
 801b8e2:	1a6d      	subs	r5, r5, r1
 801b8e4:	4629      	mov	r1, r5
 801b8e6:	4630      	mov	r0, r6
 801b8e8:	f7ff ffa6 	bl	801b838 <sbrk_aligned>
 801b8ec:	3001      	adds	r0, #1
 801b8ee:	d03a      	beq.n	801b966 <_malloc_r+0xea>
 801b8f0:	6823      	ldr	r3, [r4, #0]
 801b8f2:	442b      	add	r3, r5
 801b8f4:	6023      	str	r3, [r4, #0]
 801b8f6:	f8d8 3000 	ldr.w	r3, [r8]
 801b8fa:	685a      	ldr	r2, [r3, #4]
 801b8fc:	bb62      	cbnz	r2, 801b958 <_malloc_r+0xdc>
 801b8fe:	f8c8 7000 	str.w	r7, [r8]
 801b902:	e00f      	b.n	801b924 <_malloc_r+0xa8>
 801b904:	6822      	ldr	r2, [r4, #0]
 801b906:	1b52      	subs	r2, r2, r5
 801b908:	d420      	bmi.n	801b94c <_malloc_r+0xd0>
 801b90a:	2a0b      	cmp	r2, #11
 801b90c:	d917      	bls.n	801b93e <_malloc_r+0xc2>
 801b90e:	1961      	adds	r1, r4, r5
 801b910:	42a3      	cmp	r3, r4
 801b912:	6025      	str	r5, [r4, #0]
 801b914:	bf18      	it	ne
 801b916:	6059      	strne	r1, [r3, #4]
 801b918:	6863      	ldr	r3, [r4, #4]
 801b91a:	bf08      	it	eq
 801b91c:	f8c8 1000 	streq.w	r1, [r8]
 801b920:	5162      	str	r2, [r4, r5]
 801b922:	604b      	str	r3, [r1, #4]
 801b924:	4630      	mov	r0, r6
 801b926:	f000 f82f 	bl	801b988 <__malloc_unlock>
 801b92a:	f104 000b 	add.w	r0, r4, #11
 801b92e:	1d23      	adds	r3, r4, #4
 801b930:	f020 0007 	bic.w	r0, r0, #7
 801b934:	1ac2      	subs	r2, r0, r3
 801b936:	bf1c      	itt	ne
 801b938:	1a1b      	subne	r3, r3, r0
 801b93a:	50a3      	strne	r3, [r4, r2]
 801b93c:	e7af      	b.n	801b89e <_malloc_r+0x22>
 801b93e:	6862      	ldr	r2, [r4, #4]
 801b940:	42a3      	cmp	r3, r4
 801b942:	bf0c      	ite	eq
 801b944:	f8c8 2000 	streq.w	r2, [r8]
 801b948:	605a      	strne	r2, [r3, #4]
 801b94a:	e7eb      	b.n	801b924 <_malloc_r+0xa8>
 801b94c:	4623      	mov	r3, r4
 801b94e:	6864      	ldr	r4, [r4, #4]
 801b950:	e7ae      	b.n	801b8b0 <_malloc_r+0x34>
 801b952:	463c      	mov	r4, r7
 801b954:	687f      	ldr	r7, [r7, #4]
 801b956:	e7b6      	b.n	801b8c6 <_malloc_r+0x4a>
 801b958:	461a      	mov	r2, r3
 801b95a:	685b      	ldr	r3, [r3, #4]
 801b95c:	42a3      	cmp	r3, r4
 801b95e:	d1fb      	bne.n	801b958 <_malloc_r+0xdc>
 801b960:	2300      	movs	r3, #0
 801b962:	6053      	str	r3, [r2, #4]
 801b964:	e7de      	b.n	801b924 <_malloc_r+0xa8>
 801b966:	230c      	movs	r3, #12
 801b968:	6033      	str	r3, [r6, #0]
 801b96a:	4630      	mov	r0, r6
 801b96c:	f000 f80c 	bl	801b988 <__malloc_unlock>
 801b970:	e794      	b.n	801b89c <_malloc_r+0x20>
 801b972:	6005      	str	r5, [r0, #0]
 801b974:	e7d6      	b.n	801b924 <_malloc_r+0xa8>
 801b976:	bf00      	nop
 801b978:	24048eac 	.word	0x24048eac

0801b97c <__malloc_lock>:
 801b97c:	4801      	ldr	r0, [pc, #4]	@ (801b984 <__malloc_lock+0x8>)
 801b97e:	f000 bdf2 	b.w	801c566 <__retarget_lock_acquire_recursive>
 801b982:	bf00      	nop
 801b984:	24048ff0 	.word	0x24048ff0

0801b988 <__malloc_unlock>:
 801b988:	4801      	ldr	r0, [pc, #4]	@ (801b990 <__malloc_unlock+0x8>)
 801b98a:	f000 bded 	b.w	801c568 <__retarget_lock_release_recursive>
 801b98e:	bf00      	nop
 801b990:	24048ff0 	.word	0x24048ff0

0801b994 <__cvt>:
 801b994:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b996:	ed2d 8b02 	vpush	{d8}
 801b99a:	eeb0 8b40 	vmov.f64	d8, d0
 801b99e:	b085      	sub	sp, #20
 801b9a0:	4617      	mov	r7, r2
 801b9a2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801b9a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b9a6:	ee18 2a90 	vmov	r2, s17
 801b9aa:	f025 0520 	bic.w	r5, r5, #32
 801b9ae:	2a00      	cmp	r2, #0
 801b9b0:	bfb6      	itet	lt
 801b9b2:	222d      	movlt	r2, #45	@ 0x2d
 801b9b4:	2200      	movge	r2, #0
 801b9b6:	eeb1 8b40 	vneglt.f64	d8, d0
 801b9ba:	2d46      	cmp	r5, #70	@ 0x46
 801b9bc:	460c      	mov	r4, r1
 801b9be:	701a      	strb	r2, [r3, #0]
 801b9c0:	d004      	beq.n	801b9cc <__cvt+0x38>
 801b9c2:	2d45      	cmp	r5, #69	@ 0x45
 801b9c4:	d100      	bne.n	801b9c8 <__cvt+0x34>
 801b9c6:	3401      	adds	r4, #1
 801b9c8:	2102      	movs	r1, #2
 801b9ca:	e000      	b.n	801b9ce <__cvt+0x3a>
 801b9cc:	2103      	movs	r1, #3
 801b9ce:	ab03      	add	r3, sp, #12
 801b9d0:	9301      	str	r3, [sp, #4]
 801b9d2:	ab02      	add	r3, sp, #8
 801b9d4:	9300      	str	r3, [sp, #0]
 801b9d6:	4622      	mov	r2, r4
 801b9d8:	4633      	mov	r3, r6
 801b9da:	eeb0 0b48 	vmov.f64	d0, d8
 801b9de:	f000 fe63 	bl	801c6a8 <_dtoa_r>
 801b9e2:	2d47      	cmp	r5, #71	@ 0x47
 801b9e4:	d114      	bne.n	801ba10 <__cvt+0x7c>
 801b9e6:	07fb      	lsls	r3, r7, #31
 801b9e8:	d50a      	bpl.n	801ba00 <__cvt+0x6c>
 801b9ea:	1902      	adds	r2, r0, r4
 801b9ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9f4:	bf08      	it	eq
 801b9f6:	9203      	streq	r2, [sp, #12]
 801b9f8:	2130      	movs	r1, #48	@ 0x30
 801b9fa:	9b03      	ldr	r3, [sp, #12]
 801b9fc:	4293      	cmp	r3, r2
 801b9fe:	d319      	bcc.n	801ba34 <__cvt+0xa0>
 801ba00:	9b03      	ldr	r3, [sp, #12]
 801ba02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ba04:	1a1b      	subs	r3, r3, r0
 801ba06:	6013      	str	r3, [r2, #0]
 801ba08:	b005      	add	sp, #20
 801ba0a:	ecbd 8b02 	vpop	{d8}
 801ba0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba10:	2d46      	cmp	r5, #70	@ 0x46
 801ba12:	eb00 0204 	add.w	r2, r0, r4
 801ba16:	d1e9      	bne.n	801b9ec <__cvt+0x58>
 801ba18:	7803      	ldrb	r3, [r0, #0]
 801ba1a:	2b30      	cmp	r3, #48	@ 0x30
 801ba1c:	d107      	bne.n	801ba2e <__cvt+0x9a>
 801ba1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba26:	bf1c      	itt	ne
 801ba28:	f1c4 0401 	rsbne	r4, r4, #1
 801ba2c:	6034      	strne	r4, [r6, #0]
 801ba2e:	6833      	ldr	r3, [r6, #0]
 801ba30:	441a      	add	r2, r3
 801ba32:	e7db      	b.n	801b9ec <__cvt+0x58>
 801ba34:	1c5c      	adds	r4, r3, #1
 801ba36:	9403      	str	r4, [sp, #12]
 801ba38:	7019      	strb	r1, [r3, #0]
 801ba3a:	e7de      	b.n	801b9fa <__cvt+0x66>

0801ba3c <__exponent>:
 801ba3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ba3e:	2900      	cmp	r1, #0
 801ba40:	bfba      	itte	lt
 801ba42:	4249      	neglt	r1, r1
 801ba44:	232d      	movlt	r3, #45	@ 0x2d
 801ba46:	232b      	movge	r3, #43	@ 0x2b
 801ba48:	2909      	cmp	r1, #9
 801ba4a:	7002      	strb	r2, [r0, #0]
 801ba4c:	7043      	strb	r3, [r0, #1]
 801ba4e:	dd29      	ble.n	801baa4 <__exponent+0x68>
 801ba50:	f10d 0307 	add.w	r3, sp, #7
 801ba54:	461d      	mov	r5, r3
 801ba56:	270a      	movs	r7, #10
 801ba58:	461a      	mov	r2, r3
 801ba5a:	fbb1 f6f7 	udiv	r6, r1, r7
 801ba5e:	fb07 1416 	mls	r4, r7, r6, r1
 801ba62:	3430      	adds	r4, #48	@ 0x30
 801ba64:	f802 4c01 	strb.w	r4, [r2, #-1]
 801ba68:	460c      	mov	r4, r1
 801ba6a:	2c63      	cmp	r4, #99	@ 0x63
 801ba6c:	f103 33ff 	add.w	r3, r3, #4294967295
 801ba70:	4631      	mov	r1, r6
 801ba72:	dcf1      	bgt.n	801ba58 <__exponent+0x1c>
 801ba74:	3130      	adds	r1, #48	@ 0x30
 801ba76:	1e94      	subs	r4, r2, #2
 801ba78:	f803 1c01 	strb.w	r1, [r3, #-1]
 801ba7c:	1c41      	adds	r1, r0, #1
 801ba7e:	4623      	mov	r3, r4
 801ba80:	42ab      	cmp	r3, r5
 801ba82:	d30a      	bcc.n	801ba9a <__exponent+0x5e>
 801ba84:	f10d 0309 	add.w	r3, sp, #9
 801ba88:	1a9b      	subs	r3, r3, r2
 801ba8a:	42ac      	cmp	r4, r5
 801ba8c:	bf88      	it	hi
 801ba8e:	2300      	movhi	r3, #0
 801ba90:	3302      	adds	r3, #2
 801ba92:	4403      	add	r3, r0
 801ba94:	1a18      	subs	r0, r3, r0
 801ba96:	b003      	add	sp, #12
 801ba98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ba9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 801baa2:	e7ed      	b.n	801ba80 <__exponent+0x44>
 801baa4:	2330      	movs	r3, #48	@ 0x30
 801baa6:	3130      	adds	r1, #48	@ 0x30
 801baa8:	7083      	strb	r3, [r0, #2]
 801baaa:	70c1      	strb	r1, [r0, #3]
 801baac:	1d03      	adds	r3, r0, #4
 801baae:	e7f1      	b.n	801ba94 <__exponent+0x58>

0801bab0 <_printf_float>:
 801bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bab4:	b08d      	sub	sp, #52	@ 0x34
 801bab6:	460c      	mov	r4, r1
 801bab8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801babc:	4616      	mov	r6, r2
 801babe:	461f      	mov	r7, r3
 801bac0:	4605      	mov	r5, r0
 801bac2:	f000 fccb 	bl	801c45c <_localeconv_r>
 801bac6:	f8d0 b000 	ldr.w	fp, [r0]
 801baca:	4658      	mov	r0, fp
 801bacc:	f7e4 fc58 	bl	8000380 <strlen>
 801bad0:	2300      	movs	r3, #0
 801bad2:	930a      	str	r3, [sp, #40]	@ 0x28
 801bad4:	f8d8 3000 	ldr.w	r3, [r8]
 801bad8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801badc:	6822      	ldr	r2, [r4, #0]
 801bade:	9005      	str	r0, [sp, #20]
 801bae0:	3307      	adds	r3, #7
 801bae2:	f023 0307 	bic.w	r3, r3, #7
 801bae6:	f103 0108 	add.w	r1, r3, #8
 801baea:	f8c8 1000 	str.w	r1, [r8]
 801baee:	ed93 0b00 	vldr	d0, [r3]
 801baf2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801bd50 <_printf_float+0x2a0>
 801baf6:	eeb0 7bc0 	vabs.f64	d7, d0
 801bafa:	eeb4 7b46 	vcmp.f64	d7, d6
 801bafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb02:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801bb06:	dd24      	ble.n	801bb52 <_printf_float+0xa2>
 801bb08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb10:	d502      	bpl.n	801bb18 <_printf_float+0x68>
 801bb12:	232d      	movs	r3, #45	@ 0x2d
 801bb14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bb18:	498f      	ldr	r1, [pc, #572]	@ (801bd58 <_printf_float+0x2a8>)
 801bb1a:	4b90      	ldr	r3, [pc, #576]	@ (801bd5c <_printf_float+0x2ac>)
 801bb1c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801bb20:	bf8c      	ite	hi
 801bb22:	4688      	movhi	r8, r1
 801bb24:	4698      	movls	r8, r3
 801bb26:	f022 0204 	bic.w	r2, r2, #4
 801bb2a:	2303      	movs	r3, #3
 801bb2c:	6123      	str	r3, [r4, #16]
 801bb2e:	6022      	str	r2, [r4, #0]
 801bb30:	f04f 0a00 	mov.w	sl, #0
 801bb34:	9700      	str	r7, [sp, #0]
 801bb36:	4633      	mov	r3, r6
 801bb38:	aa0b      	add	r2, sp, #44	@ 0x2c
 801bb3a:	4621      	mov	r1, r4
 801bb3c:	4628      	mov	r0, r5
 801bb3e:	f000 f9d1 	bl	801bee4 <_printf_common>
 801bb42:	3001      	adds	r0, #1
 801bb44:	f040 8089 	bne.w	801bc5a <_printf_float+0x1aa>
 801bb48:	f04f 30ff 	mov.w	r0, #4294967295
 801bb4c:	b00d      	add	sp, #52	@ 0x34
 801bb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb52:	eeb4 0b40 	vcmp.f64	d0, d0
 801bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb5a:	d709      	bvc.n	801bb70 <_printf_float+0xc0>
 801bb5c:	ee10 3a90 	vmov	r3, s1
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	bfbc      	itt	lt
 801bb64:	232d      	movlt	r3, #45	@ 0x2d
 801bb66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801bb6a:	497d      	ldr	r1, [pc, #500]	@ (801bd60 <_printf_float+0x2b0>)
 801bb6c:	4b7d      	ldr	r3, [pc, #500]	@ (801bd64 <_printf_float+0x2b4>)
 801bb6e:	e7d5      	b.n	801bb1c <_printf_float+0x6c>
 801bb70:	6863      	ldr	r3, [r4, #4]
 801bb72:	1c59      	adds	r1, r3, #1
 801bb74:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801bb78:	d139      	bne.n	801bbee <_printf_float+0x13e>
 801bb7a:	2306      	movs	r3, #6
 801bb7c:	6063      	str	r3, [r4, #4]
 801bb7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801bb82:	2300      	movs	r3, #0
 801bb84:	6022      	str	r2, [r4, #0]
 801bb86:	9303      	str	r3, [sp, #12]
 801bb88:	ab0a      	add	r3, sp, #40	@ 0x28
 801bb8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bb8e:	ab09      	add	r3, sp, #36	@ 0x24
 801bb90:	9300      	str	r3, [sp, #0]
 801bb92:	6861      	ldr	r1, [r4, #4]
 801bb94:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801bb98:	4628      	mov	r0, r5
 801bb9a:	f7ff fefb 	bl	801b994 <__cvt>
 801bb9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801bba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bba4:	4680      	mov	r8, r0
 801bba6:	d129      	bne.n	801bbfc <_printf_float+0x14c>
 801bba8:	1cc8      	adds	r0, r1, #3
 801bbaa:	db02      	blt.n	801bbb2 <_printf_float+0x102>
 801bbac:	6863      	ldr	r3, [r4, #4]
 801bbae:	4299      	cmp	r1, r3
 801bbb0:	dd41      	ble.n	801bc36 <_printf_float+0x186>
 801bbb2:	f1a9 0902 	sub.w	r9, r9, #2
 801bbb6:	fa5f f989 	uxtb.w	r9, r9
 801bbba:	3901      	subs	r1, #1
 801bbbc:	464a      	mov	r2, r9
 801bbbe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801bbc2:	9109      	str	r1, [sp, #36]	@ 0x24
 801bbc4:	f7ff ff3a 	bl	801ba3c <__exponent>
 801bbc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bbca:	1813      	adds	r3, r2, r0
 801bbcc:	2a01      	cmp	r2, #1
 801bbce:	4682      	mov	sl, r0
 801bbd0:	6123      	str	r3, [r4, #16]
 801bbd2:	dc02      	bgt.n	801bbda <_printf_float+0x12a>
 801bbd4:	6822      	ldr	r2, [r4, #0]
 801bbd6:	07d2      	lsls	r2, r2, #31
 801bbd8:	d501      	bpl.n	801bbde <_printf_float+0x12e>
 801bbda:	3301      	adds	r3, #1
 801bbdc:	6123      	str	r3, [r4, #16]
 801bbde:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d0a6      	beq.n	801bb34 <_printf_float+0x84>
 801bbe6:	232d      	movs	r3, #45	@ 0x2d
 801bbe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bbec:	e7a2      	b.n	801bb34 <_printf_float+0x84>
 801bbee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801bbf2:	d1c4      	bne.n	801bb7e <_printf_float+0xce>
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d1c2      	bne.n	801bb7e <_printf_float+0xce>
 801bbf8:	2301      	movs	r3, #1
 801bbfa:	e7bf      	b.n	801bb7c <_printf_float+0xcc>
 801bbfc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801bc00:	d9db      	bls.n	801bbba <_printf_float+0x10a>
 801bc02:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801bc06:	d118      	bne.n	801bc3a <_printf_float+0x18a>
 801bc08:	2900      	cmp	r1, #0
 801bc0a:	6863      	ldr	r3, [r4, #4]
 801bc0c:	dd0b      	ble.n	801bc26 <_printf_float+0x176>
 801bc0e:	6121      	str	r1, [r4, #16]
 801bc10:	b913      	cbnz	r3, 801bc18 <_printf_float+0x168>
 801bc12:	6822      	ldr	r2, [r4, #0]
 801bc14:	07d0      	lsls	r0, r2, #31
 801bc16:	d502      	bpl.n	801bc1e <_printf_float+0x16e>
 801bc18:	3301      	adds	r3, #1
 801bc1a:	440b      	add	r3, r1
 801bc1c:	6123      	str	r3, [r4, #16]
 801bc1e:	65a1      	str	r1, [r4, #88]	@ 0x58
 801bc20:	f04f 0a00 	mov.w	sl, #0
 801bc24:	e7db      	b.n	801bbde <_printf_float+0x12e>
 801bc26:	b913      	cbnz	r3, 801bc2e <_printf_float+0x17e>
 801bc28:	6822      	ldr	r2, [r4, #0]
 801bc2a:	07d2      	lsls	r2, r2, #31
 801bc2c:	d501      	bpl.n	801bc32 <_printf_float+0x182>
 801bc2e:	3302      	adds	r3, #2
 801bc30:	e7f4      	b.n	801bc1c <_printf_float+0x16c>
 801bc32:	2301      	movs	r3, #1
 801bc34:	e7f2      	b.n	801bc1c <_printf_float+0x16c>
 801bc36:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801bc3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bc3c:	4299      	cmp	r1, r3
 801bc3e:	db05      	blt.n	801bc4c <_printf_float+0x19c>
 801bc40:	6823      	ldr	r3, [r4, #0]
 801bc42:	6121      	str	r1, [r4, #16]
 801bc44:	07d8      	lsls	r0, r3, #31
 801bc46:	d5ea      	bpl.n	801bc1e <_printf_float+0x16e>
 801bc48:	1c4b      	adds	r3, r1, #1
 801bc4a:	e7e7      	b.n	801bc1c <_printf_float+0x16c>
 801bc4c:	2900      	cmp	r1, #0
 801bc4e:	bfd4      	ite	le
 801bc50:	f1c1 0202 	rsble	r2, r1, #2
 801bc54:	2201      	movgt	r2, #1
 801bc56:	4413      	add	r3, r2
 801bc58:	e7e0      	b.n	801bc1c <_printf_float+0x16c>
 801bc5a:	6823      	ldr	r3, [r4, #0]
 801bc5c:	055a      	lsls	r2, r3, #21
 801bc5e:	d407      	bmi.n	801bc70 <_printf_float+0x1c0>
 801bc60:	6923      	ldr	r3, [r4, #16]
 801bc62:	4642      	mov	r2, r8
 801bc64:	4631      	mov	r1, r6
 801bc66:	4628      	mov	r0, r5
 801bc68:	47b8      	blx	r7
 801bc6a:	3001      	adds	r0, #1
 801bc6c:	d12a      	bne.n	801bcc4 <_printf_float+0x214>
 801bc6e:	e76b      	b.n	801bb48 <_printf_float+0x98>
 801bc70:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801bc74:	f240 80e0 	bls.w	801be38 <_printf_float+0x388>
 801bc78:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801bc7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc84:	d133      	bne.n	801bcee <_printf_float+0x23e>
 801bc86:	4a38      	ldr	r2, [pc, #224]	@ (801bd68 <_printf_float+0x2b8>)
 801bc88:	2301      	movs	r3, #1
 801bc8a:	4631      	mov	r1, r6
 801bc8c:	4628      	mov	r0, r5
 801bc8e:	47b8      	blx	r7
 801bc90:	3001      	adds	r0, #1
 801bc92:	f43f af59 	beq.w	801bb48 <_printf_float+0x98>
 801bc96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801bc9a:	4543      	cmp	r3, r8
 801bc9c:	db02      	blt.n	801bca4 <_printf_float+0x1f4>
 801bc9e:	6823      	ldr	r3, [r4, #0]
 801bca0:	07d8      	lsls	r0, r3, #31
 801bca2:	d50f      	bpl.n	801bcc4 <_printf_float+0x214>
 801bca4:	9b05      	ldr	r3, [sp, #20]
 801bca6:	465a      	mov	r2, fp
 801bca8:	4631      	mov	r1, r6
 801bcaa:	4628      	mov	r0, r5
 801bcac:	47b8      	blx	r7
 801bcae:	3001      	adds	r0, #1
 801bcb0:	f43f af4a 	beq.w	801bb48 <_printf_float+0x98>
 801bcb4:	f04f 0900 	mov.w	r9, #0
 801bcb8:	f108 38ff 	add.w	r8, r8, #4294967295
 801bcbc:	f104 0a1a 	add.w	sl, r4, #26
 801bcc0:	45c8      	cmp	r8, r9
 801bcc2:	dc09      	bgt.n	801bcd8 <_printf_float+0x228>
 801bcc4:	6823      	ldr	r3, [r4, #0]
 801bcc6:	079b      	lsls	r3, r3, #30
 801bcc8:	f100 8107 	bmi.w	801beda <_printf_float+0x42a>
 801bccc:	68e0      	ldr	r0, [r4, #12]
 801bcce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bcd0:	4298      	cmp	r0, r3
 801bcd2:	bfb8      	it	lt
 801bcd4:	4618      	movlt	r0, r3
 801bcd6:	e739      	b.n	801bb4c <_printf_float+0x9c>
 801bcd8:	2301      	movs	r3, #1
 801bcda:	4652      	mov	r2, sl
 801bcdc:	4631      	mov	r1, r6
 801bcde:	4628      	mov	r0, r5
 801bce0:	47b8      	blx	r7
 801bce2:	3001      	adds	r0, #1
 801bce4:	f43f af30 	beq.w	801bb48 <_printf_float+0x98>
 801bce8:	f109 0901 	add.w	r9, r9, #1
 801bcec:	e7e8      	b.n	801bcc0 <_printf_float+0x210>
 801bcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	dc3b      	bgt.n	801bd6c <_printf_float+0x2bc>
 801bcf4:	4a1c      	ldr	r2, [pc, #112]	@ (801bd68 <_printf_float+0x2b8>)
 801bcf6:	2301      	movs	r3, #1
 801bcf8:	4631      	mov	r1, r6
 801bcfa:	4628      	mov	r0, r5
 801bcfc:	47b8      	blx	r7
 801bcfe:	3001      	adds	r0, #1
 801bd00:	f43f af22 	beq.w	801bb48 <_printf_float+0x98>
 801bd04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801bd08:	ea59 0303 	orrs.w	r3, r9, r3
 801bd0c:	d102      	bne.n	801bd14 <_printf_float+0x264>
 801bd0e:	6823      	ldr	r3, [r4, #0]
 801bd10:	07d9      	lsls	r1, r3, #31
 801bd12:	d5d7      	bpl.n	801bcc4 <_printf_float+0x214>
 801bd14:	9b05      	ldr	r3, [sp, #20]
 801bd16:	465a      	mov	r2, fp
 801bd18:	4631      	mov	r1, r6
 801bd1a:	4628      	mov	r0, r5
 801bd1c:	47b8      	blx	r7
 801bd1e:	3001      	adds	r0, #1
 801bd20:	f43f af12 	beq.w	801bb48 <_printf_float+0x98>
 801bd24:	f04f 0a00 	mov.w	sl, #0
 801bd28:	f104 0b1a 	add.w	fp, r4, #26
 801bd2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd2e:	425b      	negs	r3, r3
 801bd30:	4553      	cmp	r3, sl
 801bd32:	dc01      	bgt.n	801bd38 <_printf_float+0x288>
 801bd34:	464b      	mov	r3, r9
 801bd36:	e794      	b.n	801bc62 <_printf_float+0x1b2>
 801bd38:	2301      	movs	r3, #1
 801bd3a:	465a      	mov	r2, fp
 801bd3c:	4631      	mov	r1, r6
 801bd3e:	4628      	mov	r0, r5
 801bd40:	47b8      	blx	r7
 801bd42:	3001      	adds	r0, #1
 801bd44:	f43f af00 	beq.w	801bb48 <_printf_float+0x98>
 801bd48:	f10a 0a01 	add.w	sl, sl, #1
 801bd4c:	e7ee      	b.n	801bd2c <_printf_float+0x27c>
 801bd4e:	bf00      	nop
 801bd50:	ffffffff 	.word	0xffffffff
 801bd54:	7fefffff 	.word	0x7fefffff
 801bd58:	0801f25c 	.word	0x0801f25c
 801bd5c:	0801f258 	.word	0x0801f258
 801bd60:	0801f264 	.word	0x0801f264
 801bd64:	0801f260 	.word	0x0801f260
 801bd68:	0801f268 	.word	0x0801f268
 801bd6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bd6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801bd72:	4553      	cmp	r3, sl
 801bd74:	bfa8      	it	ge
 801bd76:	4653      	movge	r3, sl
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	4699      	mov	r9, r3
 801bd7c:	dc37      	bgt.n	801bdee <_printf_float+0x33e>
 801bd7e:	2300      	movs	r3, #0
 801bd80:	9307      	str	r3, [sp, #28]
 801bd82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bd86:	f104 021a 	add.w	r2, r4, #26
 801bd8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bd8c:	9907      	ldr	r1, [sp, #28]
 801bd8e:	9306      	str	r3, [sp, #24]
 801bd90:	eba3 0309 	sub.w	r3, r3, r9
 801bd94:	428b      	cmp	r3, r1
 801bd96:	dc31      	bgt.n	801bdfc <_printf_float+0x34c>
 801bd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd9a:	459a      	cmp	sl, r3
 801bd9c:	dc3b      	bgt.n	801be16 <_printf_float+0x366>
 801bd9e:	6823      	ldr	r3, [r4, #0]
 801bda0:	07da      	lsls	r2, r3, #31
 801bda2:	d438      	bmi.n	801be16 <_printf_float+0x366>
 801bda4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bda6:	ebaa 0903 	sub.w	r9, sl, r3
 801bdaa:	9b06      	ldr	r3, [sp, #24]
 801bdac:	ebaa 0303 	sub.w	r3, sl, r3
 801bdb0:	4599      	cmp	r9, r3
 801bdb2:	bfa8      	it	ge
 801bdb4:	4699      	movge	r9, r3
 801bdb6:	f1b9 0f00 	cmp.w	r9, #0
 801bdba:	dc34      	bgt.n	801be26 <_printf_float+0x376>
 801bdbc:	f04f 0800 	mov.w	r8, #0
 801bdc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bdc4:	f104 0b1a 	add.w	fp, r4, #26
 801bdc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bdca:	ebaa 0303 	sub.w	r3, sl, r3
 801bdce:	eba3 0309 	sub.w	r3, r3, r9
 801bdd2:	4543      	cmp	r3, r8
 801bdd4:	f77f af76 	ble.w	801bcc4 <_printf_float+0x214>
 801bdd8:	2301      	movs	r3, #1
 801bdda:	465a      	mov	r2, fp
 801bddc:	4631      	mov	r1, r6
 801bdde:	4628      	mov	r0, r5
 801bde0:	47b8      	blx	r7
 801bde2:	3001      	adds	r0, #1
 801bde4:	f43f aeb0 	beq.w	801bb48 <_printf_float+0x98>
 801bde8:	f108 0801 	add.w	r8, r8, #1
 801bdec:	e7ec      	b.n	801bdc8 <_printf_float+0x318>
 801bdee:	4642      	mov	r2, r8
 801bdf0:	4631      	mov	r1, r6
 801bdf2:	4628      	mov	r0, r5
 801bdf4:	47b8      	blx	r7
 801bdf6:	3001      	adds	r0, #1
 801bdf8:	d1c1      	bne.n	801bd7e <_printf_float+0x2ce>
 801bdfa:	e6a5      	b.n	801bb48 <_printf_float+0x98>
 801bdfc:	2301      	movs	r3, #1
 801bdfe:	4631      	mov	r1, r6
 801be00:	4628      	mov	r0, r5
 801be02:	9206      	str	r2, [sp, #24]
 801be04:	47b8      	blx	r7
 801be06:	3001      	adds	r0, #1
 801be08:	f43f ae9e 	beq.w	801bb48 <_printf_float+0x98>
 801be0c:	9b07      	ldr	r3, [sp, #28]
 801be0e:	9a06      	ldr	r2, [sp, #24]
 801be10:	3301      	adds	r3, #1
 801be12:	9307      	str	r3, [sp, #28]
 801be14:	e7b9      	b.n	801bd8a <_printf_float+0x2da>
 801be16:	9b05      	ldr	r3, [sp, #20]
 801be18:	465a      	mov	r2, fp
 801be1a:	4631      	mov	r1, r6
 801be1c:	4628      	mov	r0, r5
 801be1e:	47b8      	blx	r7
 801be20:	3001      	adds	r0, #1
 801be22:	d1bf      	bne.n	801bda4 <_printf_float+0x2f4>
 801be24:	e690      	b.n	801bb48 <_printf_float+0x98>
 801be26:	9a06      	ldr	r2, [sp, #24]
 801be28:	464b      	mov	r3, r9
 801be2a:	4442      	add	r2, r8
 801be2c:	4631      	mov	r1, r6
 801be2e:	4628      	mov	r0, r5
 801be30:	47b8      	blx	r7
 801be32:	3001      	adds	r0, #1
 801be34:	d1c2      	bne.n	801bdbc <_printf_float+0x30c>
 801be36:	e687      	b.n	801bb48 <_printf_float+0x98>
 801be38:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801be3c:	f1b9 0f01 	cmp.w	r9, #1
 801be40:	dc01      	bgt.n	801be46 <_printf_float+0x396>
 801be42:	07db      	lsls	r3, r3, #31
 801be44:	d536      	bpl.n	801beb4 <_printf_float+0x404>
 801be46:	2301      	movs	r3, #1
 801be48:	4642      	mov	r2, r8
 801be4a:	4631      	mov	r1, r6
 801be4c:	4628      	mov	r0, r5
 801be4e:	47b8      	blx	r7
 801be50:	3001      	adds	r0, #1
 801be52:	f43f ae79 	beq.w	801bb48 <_printf_float+0x98>
 801be56:	9b05      	ldr	r3, [sp, #20]
 801be58:	465a      	mov	r2, fp
 801be5a:	4631      	mov	r1, r6
 801be5c:	4628      	mov	r0, r5
 801be5e:	47b8      	blx	r7
 801be60:	3001      	adds	r0, #1
 801be62:	f43f ae71 	beq.w	801bb48 <_printf_float+0x98>
 801be66:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801be6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801be6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be72:	f109 39ff 	add.w	r9, r9, #4294967295
 801be76:	d018      	beq.n	801beaa <_printf_float+0x3fa>
 801be78:	464b      	mov	r3, r9
 801be7a:	f108 0201 	add.w	r2, r8, #1
 801be7e:	4631      	mov	r1, r6
 801be80:	4628      	mov	r0, r5
 801be82:	47b8      	blx	r7
 801be84:	3001      	adds	r0, #1
 801be86:	d10c      	bne.n	801bea2 <_printf_float+0x3f2>
 801be88:	e65e      	b.n	801bb48 <_printf_float+0x98>
 801be8a:	2301      	movs	r3, #1
 801be8c:	465a      	mov	r2, fp
 801be8e:	4631      	mov	r1, r6
 801be90:	4628      	mov	r0, r5
 801be92:	47b8      	blx	r7
 801be94:	3001      	adds	r0, #1
 801be96:	f43f ae57 	beq.w	801bb48 <_printf_float+0x98>
 801be9a:	f108 0801 	add.w	r8, r8, #1
 801be9e:	45c8      	cmp	r8, r9
 801bea0:	dbf3      	blt.n	801be8a <_printf_float+0x3da>
 801bea2:	4653      	mov	r3, sl
 801bea4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801bea8:	e6dc      	b.n	801bc64 <_printf_float+0x1b4>
 801beaa:	f04f 0800 	mov.w	r8, #0
 801beae:	f104 0b1a 	add.w	fp, r4, #26
 801beb2:	e7f4      	b.n	801be9e <_printf_float+0x3ee>
 801beb4:	2301      	movs	r3, #1
 801beb6:	4642      	mov	r2, r8
 801beb8:	e7e1      	b.n	801be7e <_printf_float+0x3ce>
 801beba:	2301      	movs	r3, #1
 801bebc:	464a      	mov	r2, r9
 801bebe:	4631      	mov	r1, r6
 801bec0:	4628      	mov	r0, r5
 801bec2:	47b8      	blx	r7
 801bec4:	3001      	adds	r0, #1
 801bec6:	f43f ae3f 	beq.w	801bb48 <_printf_float+0x98>
 801beca:	f108 0801 	add.w	r8, r8, #1
 801bece:	68e3      	ldr	r3, [r4, #12]
 801bed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bed2:	1a5b      	subs	r3, r3, r1
 801bed4:	4543      	cmp	r3, r8
 801bed6:	dcf0      	bgt.n	801beba <_printf_float+0x40a>
 801bed8:	e6f8      	b.n	801bccc <_printf_float+0x21c>
 801beda:	f04f 0800 	mov.w	r8, #0
 801bede:	f104 0919 	add.w	r9, r4, #25
 801bee2:	e7f4      	b.n	801bece <_printf_float+0x41e>

0801bee4 <_printf_common>:
 801bee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bee8:	4616      	mov	r6, r2
 801beea:	4698      	mov	r8, r3
 801beec:	688a      	ldr	r2, [r1, #8]
 801beee:	690b      	ldr	r3, [r1, #16]
 801bef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bef4:	4293      	cmp	r3, r2
 801bef6:	bfb8      	it	lt
 801bef8:	4613      	movlt	r3, r2
 801befa:	6033      	str	r3, [r6, #0]
 801befc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bf00:	4607      	mov	r7, r0
 801bf02:	460c      	mov	r4, r1
 801bf04:	b10a      	cbz	r2, 801bf0a <_printf_common+0x26>
 801bf06:	3301      	adds	r3, #1
 801bf08:	6033      	str	r3, [r6, #0]
 801bf0a:	6823      	ldr	r3, [r4, #0]
 801bf0c:	0699      	lsls	r1, r3, #26
 801bf0e:	bf42      	ittt	mi
 801bf10:	6833      	ldrmi	r3, [r6, #0]
 801bf12:	3302      	addmi	r3, #2
 801bf14:	6033      	strmi	r3, [r6, #0]
 801bf16:	6825      	ldr	r5, [r4, #0]
 801bf18:	f015 0506 	ands.w	r5, r5, #6
 801bf1c:	d106      	bne.n	801bf2c <_printf_common+0x48>
 801bf1e:	f104 0a19 	add.w	sl, r4, #25
 801bf22:	68e3      	ldr	r3, [r4, #12]
 801bf24:	6832      	ldr	r2, [r6, #0]
 801bf26:	1a9b      	subs	r3, r3, r2
 801bf28:	42ab      	cmp	r3, r5
 801bf2a:	dc26      	bgt.n	801bf7a <_printf_common+0x96>
 801bf2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bf30:	6822      	ldr	r2, [r4, #0]
 801bf32:	3b00      	subs	r3, #0
 801bf34:	bf18      	it	ne
 801bf36:	2301      	movne	r3, #1
 801bf38:	0692      	lsls	r2, r2, #26
 801bf3a:	d42b      	bmi.n	801bf94 <_printf_common+0xb0>
 801bf3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bf40:	4641      	mov	r1, r8
 801bf42:	4638      	mov	r0, r7
 801bf44:	47c8      	blx	r9
 801bf46:	3001      	adds	r0, #1
 801bf48:	d01e      	beq.n	801bf88 <_printf_common+0xa4>
 801bf4a:	6823      	ldr	r3, [r4, #0]
 801bf4c:	6922      	ldr	r2, [r4, #16]
 801bf4e:	f003 0306 	and.w	r3, r3, #6
 801bf52:	2b04      	cmp	r3, #4
 801bf54:	bf02      	ittt	eq
 801bf56:	68e5      	ldreq	r5, [r4, #12]
 801bf58:	6833      	ldreq	r3, [r6, #0]
 801bf5a:	1aed      	subeq	r5, r5, r3
 801bf5c:	68a3      	ldr	r3, [r4, #8]
 801bf5e:	bf0c      	ite	eq
 801bf60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf64:	2500      	movne	r5, #0
 801bf66:	4293      	cmp	r3, r2
 801bf68:	bfc4      	itt	gt
 801bf6a:	1a9b      	subgt	r3, r3, r2
 801bf6c:	18ed      	addgt	r5, r5, r3
 801bf6e:	2600      	movs	r6, #0
 801bf70:	341a      	adds	r4, #26
 801bf72:	42b5      	cmp	r5, r6
 801bf74:	d11a      	bne.n	801bfac <_printf_common+0xc8>
 801bf76:	2000      	movs	r0, #0
 801bf78:	e008      	b.n	801bf8c <_printf_common+0xa8>
 801bf7a:	2301      	movs	r3, #1
 801bf7c:	4652      	mov	r2, sl
 801bf7e:	4641      	mov	r1, r8
 801bf80:	4638      	mov	r0, r7
 801bf82:	47c8      	blx	r9
 801bf84:	3001      	adds	r0, #1
 801bf86:	d103      	bne.n	801bf90 <_printf_common+0xac>
 801bf88:	f04f 30ff 	mov.w	r0, #4294967295
 801bf8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf90:	3501      	adds	r5, #1
 801bf92:	e7c6      	b.n	801bf22 <_printf_common+0x3e>
 801bf94:	18e1      	adds	r1, r4, r3
 801bf96:	1c5a      	adds	r2, r3, #1
 801bf98:	2030      	movs	r0, #48	@ 0x30
 801bf9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bf9e:	4422      	add	r2, r4
 801bfa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bfa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bfa8:	3302      	adds	r3, #2
 801bfaa:	e7c7      	b.n	801bf3c <_printf_common+0x58>
 801bfac:	2301      	movs	r3, #1
 801bfae:	4622      	mov	r2, r4
 801bfb0:	4641      	mov	r1, r8
 801bfb2:	4638      	mov	r0, r7
 801bfb4:	47c8      	blx	r9
 801bfb6:	3001      	adds	r0, #1
 801bfb8:	d0e6      	beq.n	801bf88 <_printf_common+0xa4>
 801bfba:	3601      	adds	r6, #1
 801bfbc:	e7d9      	b.n	801bf72 <_printf_common+0x8e>
	...

0801bfc0 <_printf_i>:
 801bfc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bfc4:	7e0f      	ldrb	r7, [r1, #24]
 801bfc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bfc8:	2f78      	cmp	r7, #120	@ 0x78
 801bfca:	4691      	mov	r9, r2
 801bfcc:	4680      	mov	r8, r0
 801bfce:	460c      	mov	r4, r1
 801bfd0:	469a      	mov	sl, r3
 801bfd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bfd6:	d807      	bhi.n	801bfe8 <_printf_i+0x28>
 801bfd8:	2f62      	cmp	r7, #98	@ 0x62
 801bfda:	d80a      	bhi.n	801bff2 <_printf_i+0x32>
 801bfdc:	2f00      	cmp	r7, #0
 801bfde:	f000 80d1 	beq.w	801c184 <_printf_i+0x1c4>
 801bfe2:	2f58      	cmp	r7, #88	@ 0x58
 801bfe4:	f000 80b8 	beq.w	801c158 <_printf_i+0x198>
 801bfe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bfec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bff0:	e03a      	b.n	801c068 <_printf_i+0xa8>
 801bff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bff6:	2b15      	cmp	r3, #21
 801bff8:	d8f6      	bhi.n	801bfe8 <_printf_i+0x28>
 801bffa:	a101      	add	r1, pc, #4	@ (adr r1, 801c000 <_printf_i+0x40>)
 801bffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c000:	0801c059 	.word	0x0801c059
 801c004:	0801c06d 	.word	0x0801c06d
 801c008:	0801bfe9 	.word	0x0801bfe9
 801c00c:	0801bfe9 	.word	0x0801bfe9
 801c010:	0801bfe9 	.word	0x0801bfe9
 801c014:	0801bfe9 	.word	0x0801bfe9
 801c018:	0801c06d 	.word	0x0801c06d
 801c01c:	0801bfe9 	.word	0x0801bfe9
 801c020:	0801bfe9 	.word	0x0801bfe9
 801c024:	0801bfe9 	.word	0x0801bfe9
 801c028:	0801bfe9 	.word	0x0801bfe9
 801c02c:	0801c16b 	.word	0x0801c16b
 801c030:	0801c097 	.word	0x0801c097
 801c034:	0801c125 	.word	0x0801c125
 801c038:	0801bfe9 	.word	0x0801bfe9
 801c03c:	0801bfe9 	.word	0x0801bfe9
 801c040:	0801c18d 	.word	0x0801c18d
 801c044:	0801bfe9 	.word	0x0801bfe9
 801c048:	0801c097 	.word	0x0801c097
 801c04c:	0801bfe9 	.word	0x0801bfe9
 801c050:	0801bfe9 	.word	0x0801bfe9
 801c054:	0801c12d 	.word	0x0801c12d
 801c058:	6833      	ldr	r3, [r6, #0]
 801c05a:	1d1a      	adds	r2, r3, #4
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	6032      	str	r2, [r6, #0]
 801c060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c068:	2301      	movs	r3, #1
 801c06a:	e09c      	b.n	801c1a6 <_printf_i+0x1e6>
 801c06c:	6833      	ldr	r3, [r6, #0]
 801c06e:	6820      	ldr	r0, [r4, #0]
 801c070:	1d19      	adds	r1, r3, #4
 801c072:	6031      	str	r1, [r6, #0]
 801c074:	0606      	lsls	r6, r0, #24
 801c076:	d501      	bpl.n	801c07c <_printf_i+0xbc>
 801c078:	681d      	ldr	r5, [r3, #0]
 801c07a:	e003      	b.n	801c084 <_printf_i+0xc4>
 801c07c:	0645      	lsls	r5, r0, #25
 801c07e:	d5fb      	bpl.n	801c078 <_printf_i+0xb8>
 801c080:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c084:	2d00      	cmp	r5, #0
 801c086:	da03      	bge.n	801c090 <_printf_i+0xd0>
 801c088:	232d      	movs	r3, #45	@ 0x2d
 801c08a:	426d      	negs	r5, r5
 801c08c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c090:	4858      	ldr	r0, [pc, #352]	@ (801c1f4 <_printf_i+0x234>)
 801c092:	230a      	movs	r3, #10
 801c094:	e011      	b.n	801c0ba <_printf_i+0xfa>
 801c096:	6821      	ldr	r1, [r4, #0]
 801c098:	6833      	ldr	r3, [r6, #0]
 801c09a:	0608      	lsls	r0, r1, #24
 801c09c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c0a0:	d402      	bmi.n	801c0a8 <_printf_i+0xe8>
 801c0a2:	0649      	lsls	r1, r1, #25
 801c0a4:	bf48      	it	mi
 801c0a6:	b2ad      	uxthmi	r5, r5
 801c0a8:	2f6f      	cmp	r7, #111	@ 0x6f
 801c0aa:	4852      	ldr	r0, [pc, #328]	@ (801c1f4 <_printf_i+0x234>)
 801c0ac:	6033      	str	r3, [r6, #0]
 801c0ae:	bf14      	ite	ne
 801c0b0:	230a      	movne	r3, #10
 801c0b2:	2308      	moveq	r3, #8
 801c0b4:	2100      	movs	r1, #0
 801c0b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c0ba:	6866      	ldr	r6, [r4, #4]
 801c0bc:	60a6      	str	r6, [r4, #8]
 801c0be:	2e00      	cmp	r6, #0
 801c0c0:	db05      	blt.n	801c0ce <_printf_i+0x10e>
 801c0c2:	6821      	ldr	r1, [r4, #0]
 801c0c4:	432e      	orrs	r6, r5
 801c0c6:	f021 0104 	bic.w	r1, r1, #4
 801c0ca:	6021      	str	r1, [r4, #0]
 801c0cc:	d04b      	beq.n	801c166 <_printf_i+0x1a6>
 801c0ce:	4616      	mov	r6, r2
 801c0d0:	fbb5 f1f3 	udiv	r1, r5, r3
 801c0d4:	fb03 5711 	mls	r7, r3, r1, r5
 801c0d8:	5dc7      	ldrb	r7, [r0, r7]
 801c0da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c0de:	462f      	mov	r7, r5
 801c0e0:	42bb      	cmp	r3, r7
 801c0e2:	460d      	mov	r5, r1
 801c0e4:	d9f4      	bls.n	801c0d0 <_printf_i+0x110>
 801c0e6:	2b08      	cmp	r3, #8
 801c0e8:	d10b      	bne.n	801c102 <_printf_i+0x142>
 801c0ea:	6823      	ldr	r3, [r4, #0]
 801c0ec:	07df      	lsls	r7, r3, #31
 801c0ee:	d508      	bpl.n	801c102 <_printf_i+0x142>
 801c0f0:	6923      	ldr	r3, [r4, #16]
 801c0f2:	6861      	ldr	r1, [r4, #4]
 801c0f4:	4299      	cmp	r1, r3
 801c0f6:	bfde      	ittt	le
 801c0f8:	2330      	movle	r3, #48	@ 0x30
 801c0fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c0fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c102:	1b92      	subs	r2, r2, r6
 801c104:	6122      	str	r2, [r4, #16]
 801c106:	f8cd a000 	str.w	sl, [sp]
 801c10a:	464b      	mov	r3, r9
 801c10c:	aa03      	add	r2, sp, #12
 801c10e:	4621      	mov	r1, r4
 801c110:	4640      	mov	r0, r8
 801c112:	f7ff fee7 	bl	801bee4 <_printf_common>
 801c116:	3001      	adds	r0, #1
 801c118:	d14a      	bne.n	801c1b0 <_printf_i+0x1f0>
 801c11a:	f04f 30ff 	mov.w	r0, #4294967295
 801c11e:	b004      	add	sp, #16
 801c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c124:	6823      	ldr	r3, [r4, #0]
 801c126:	f043 0320 	orr.w	r3, r3, #32
 801c12a:	6023      	str	r3, [r4, #0]
 801c12c:	4832      	ldr	r0, [pc, #200]	@ (801c1f8 <_printf_i+0x238>)
 801c12e:	2778      	movs	r7, #120	@ 0x78
 801c130:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c134:	6823      	ldr	r3, [r4, #0]
 801c136:	6831      	ldr	r1, [r6, #0]
 801c138:	061f      	lsls	r7, r3, #24
 801c13a:	f851 5b04 	ldr.w	r5, [r1], #4
 801c13e:	d402      	bmi.n	801c146 <_printf_i+0x186>
 801c140:	065f      	lsls	r7, r3, #25
 801c142:	bf48      	it	mi
 801c144:	b2ad      	uxthmi	r5, r5
 801c146:	6031      	str	r1, [r6, #0]
 801c148:	07d9      	lsls	r1, r3, #31
 801c14a:	bf44      	itt	mi
 801c14c:	f043 0320 	orrmi.w	r3, r3, #32
 801c150:	6023      	strmi	r3, [r4, #0]
 801c152:	b11d      	cbz	r5, 801c15c <_printf_i+0x19c>
 801c154:	2310      	movs	r3, #16
 801c156:	e7ad      	b.n	801c0b4 <_printf_i+0xf4>
 801c158:	4826      	ldr	r0, [pc, #152]	@ (801c1f4 <_printf_i+0x234>)
 801c15a:	e7e9      	b.n	801c130 <_printf_i+0x170>
 801c15c:	6823      	ldr	r3, [r4, #0]
 801c15e:	f023 0320 	bic.w	r3, r3, #32
 801c162:	6023      	str	r3, [r4, #0]
 801c164:	e7f6      	b.n	801c154 <_printf_i+0x194>
 801c166:	4616      	mov	r6, r2
 801c168:	e7bd      	b.n	801c0e6 <_printf_i+0x126>
 801c16a:	6833      	ldr	r3, [r6, #0]
 801c16c:	6825      	ldr	r5, [r4, #0]
 801c16e:	6961      	ldr	r1, [r4, #20]
 801c170:	1d18      	adds	r0, r3, #4
 801c172:	6030      	str	r0, [r6, #0]
 801c174:	062e      	lsls	r6, r5, #24
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	d501      	bpl.n	801c17e <_printf_i+0x1be>
 801c17a:	6019      	str	r1, [r3, #0]
 801c17c:	e002      	b.n	801c184 <_printf_i+0x1c4>
 801c17e:	0668      	lsls	r0, r5, #25
 801c180:	d5fb      	bpl.n	801c17a <_printf_i+0x1ba>
 801c182:	8019      	strh	r1, [r3, #0]
 801c184:	2300      	movs	r3, #0
 801c186:	6123      	str	r3, [r4, #16]
 801c188:	4616      	mov	r6, r2
 801c18a:	e7bc      	b.n	801c106 <_printf_i+0x146>
 801c18c:	6833      	ldr	r3, [r6, #0]
 801c18e:	1d1a      	adds	r2, r3, #4
 801c190:	6032      	str	r2, [r6, #0]
 801c192:	681e      	ldr	r6, [r3, #0]
 801c194:	6862      	ldr	r2, [r4, #4]
 801c196:	2100      	movs	r1, #0
 801c198:	4630      	mov	r0, r6
 801c19a:	f7e4 f8a1 	bl	80002e0 <memchr>
 801c19e:	b108      	cbz	r0, 801c1a4 <_printf_i+0x1e4>
 801c1a0:	1b80      	subs	r0, r0, r6
 801c1a2:	6060      	str	r0, [r4, #4]
 801c1a4:	6863      	ldr	r3, [r4, #4]
 801c1a6:	6123      	str	r3, [r4, #16]
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c1ae:	e7aa      	b.n	801c106 <_printf_i+0x146>
 801c1b0:	6923      	ldr	r3, [r4, #16]
 801c1b2:	4632      	mov	r2, r6
 801c1b4:	4649      	mov	r1, r9
 801c1b6:	4640      	mov	r0, r8
 801c1b8:	47d0      	blx	sl
 801c1ba:	3001      	adds	r0, #1
 801c1bc:	d0ad      	beq.n	801c11a <_printf_i+0x15a>
 801c1be:	6823      	ldr	r3, [r4, #0]
 801c1c0:	079b      	lsls	r3, r3, #30
 801c1c2:	d413      	bmi.n	801c1ec <_printf_i+0x22c>
 801c1c4:	68e0      	ldr	r0, [r4, #12]
 801c1c6:	9b03      	ldr	r3, [sp, #12]
 801c1c8:	4298      	cmp	r0, r3
 801c1ca:	bfb8      	it	lt
 801c1cc:	4618      	movlt	r0, r3
 801c1ce:	e7a6      	b.n	801c11e <_printf_i+0x15e>
 801c1d0:	2301      	movs	r3, #1
 801c1d2:	4632      	mov	r2, r6
 801c1d4:	4649      	mov	r1, r9
 801c1d6:	4640      	mov	r0, r8
 801c1d8:	47d0      	blx	sl
 801c1da:	3001      	adds	r0, #1
 801c1dc:	d09d      	beq.n	801c11a <_printf_i+0x15a>
 801c1de:	3501      	adds	r5, #1
 801c1e0:	68e3      	ldr	r3, [r4, #12]
 801c1e2:	9903      	ldr	r1, [sp, #12]
 801c1e4:	1a5b      	subs	r3, r3, r1
 801c1e6:	42ab      	cmp	r3, r5
 801c1e8:	dcf2      	bgt.n	801c1d0 <_printf_i+0x210>
 801c1ea:	e7eb      	b.n	801c1c4 <_printf_i+0x204>
 801c1ec:	2500      	movs	r5, #0
 801c1ee:	f104 0619 	add.w	r6, r4, #25
 801c1f2:	e7f5      	b.n	801c1e0 <_printf_i+0x220>
 801c1f4:	0801f26a 	.word	0x0801f26a
 801c1f8:	0801f27b 	.word	0x0801f27b

0801c1fc <std>:
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	b510      	push	{r4, lr}
 801c200:	4604      	mov	r4, r0
 801c202:	e9c0 3300 	strd	r3, r3, [r0]
 801c206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c20a:	6083      	str	r3, [r0, #8]
 801c20c:	8181      	strh	r1, [r0, #12]
 801c20e:	6643      	str	r3, [r0, #100]	@ 0x64
 801c210:	81c2      	strh	r2, [r0, #14]
 801c212:	6183      	str	r3, [r0, #24]
 801c214:	4619      	mov	r1, r3
 801c216:	2208      	movs	r2, #8
 801c218:	305c      	adds	r0, #92	@ 0x5c
 801c21a:	f000 f916 	bl	801c44a <memset>
 801c21e:	4b0d      	ldr	r3, [pc, #52]	@ (801c254 <std+0x58>)
 801c220:	6263      	str	r3, [r4, #36]	@ 0x24
 801c222:	4b0d      	ldr	r3, [pc, #52]	@ (801c258 <std+0x5c>)
 801c224:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c226:	4b0d      	ldr	r3, [pc, #52]	@ (801c25c <std+0x60>)
 801c228:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c22a:	4b0d      	ldr	r3, [pc, #52]	@ (801c260 <std+0x64>)
 801c22c:	6323      	str	r3, [r4, #48]	@ 0x30
 801c22e:	4b0d      	ldr	r3, [pc, #52]	@ (801c264 <std+0x68>)
 801c230:	6224      	str	r4, [r4, #32]
 801c232:	429c      	cmp	r4, r3
 801c234:	d006      	beq.n	801c244 <std+0x48>
 801c236:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c23a:	4294      	cmp	r4, r2
 801c23c:	d002      	beq.n	801c244 <std+0x48>
 801c23e:	33d0      	adds	r3, #208	@ 0xd0
 801c240:	429c      	cmp	r4, r3
 801c242:	d105      	bne.n	801c250 <std+0x54>
 801c244:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c24c:	f000 b98a 	b.w	801c564 <__retarget_lock_init_recursive>
 801c250:	bd10      	pop	{r4, pc}
 801c252:	bf00      	nop
 801c254:	0801c3c5 	.word	0x0801c3c5
 801c258:	0801c3e7 	.word	0x0801c3e7
 801c25c:	0801c41f 	.word	0x0801c41f
 801c260:	0801c443 	.word	0x0801c443
 801c264:	24048eb0 	.word	0x24048eb0

0801c268 <stdio_exit_handler>:
 801c268:	4a02      	ldr	r2, [pc, #8]	@ (801c274 <stdio_exit_handler+0xc>)
 801c26a:	4903      	ldr	r1, [pc, #12]	@ (801c278 <stdio_exit_handler+0x10>)
 801c26c:	4803      	ldr	r0, [pc, #12]	@ (801c27c <stdio_exit_handler+0x14>)
 801c26e:	f000 b869 	b.w	801c344 <_fwalk_sglue>
 801c272:	bf00      	nop
 801c274:	24000344 	.word	0x24000344
 801c278:	0801dca5 	.word	0x0801dca5
 801c27c:	24000354 	.word	0x24000354

0801c280 <cleanup_stdio>:
 801c280:	6841      	ldr	r1, [r0, #4]
 801c282:	4b0c      	ldr	r3, [pc, #48]	@ (801c2b4 <cleanup_stdio+0x34>)
 801c284:	4299      	cmp	r1, r3
 801c286:	b510      	push	{r4, lr}
 801c288:	4604      	mov	r4, r0
 801c28a:	d001      	beq.n	801c290 <cleanup_stdio+0x10>
 801c28c:	f001 fd0a 	bl	801dca4 <_fflush_r>
 801c290:	68a1      	ldr	r1, [r4, #8]
 801c292:	4b09      	ldr	r3, [pc, #36]	@ (801c2b8 <cleanup_stdio+0x38>)
 801c294:	4299      	cmp	r1, r3
 801c296:	d002      	beq.n	801c29e <cleanup_stdio+0x1e>
 801c298:	4620      	mov	r0, r4
 801c29a:	f001 fd03 	bl	801dca4 <_fflush_r>
 801c29e:	68e1      	ldr	r1, [r4, #12]
 801c2a0:	4b06      	ldr	r3, [pc, #24]	@ (801c2bc <cleanup_stdio+0x3c>)
 801c2a2:	4299      	cmp	r1, r3
 801c2a4:	d004      	beq.n	801c2b0 <cleanup_stdio+0x30>
 801c2a6:	4620      	mov	r0, r4
 801c2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2ac:	f001 bcfa 	b.w	801dca4 <_fflush_r>
 801c2b0:	bd10      	pop	{r4, pc}
 801c2b2:	bf00      	nop
 801c2b4:	24048eb0 	.word	0x24048eb0
 801c2b8:	24048f18 	.word	0x24048f18
 801c2bc:	24048f80 	.word	0x24048f80

0801c2c0 <global_stdio_init.part.0>:
 801c2c0:	b510      	push	{r4, lr}
 801c2c2:	4b0b      	ldr	r3, [pc, #44]	@ (801c2f0 <global_stdio_init.part.0+0x30>)
 801c2c4:	4c0b      	ldr	r4, [pc, #44]	@ (801c2f4 <global_stdio_init.part.0+0x34>)
 801c2c6:	4a0c      	ldr	r2, [pc, #48]	@ (801c2f8 <global_stdio_init.part.0+0x38>)
 801c2c8:	601a      	str	r2, [r3, #0]
 801c2ca:	4620      	mov	r0, r4
 801c2cc:	2200      	movs	r2, #0
 801c2ce:	2104      	movs	r1, #4
 801c2d0:	f7ff ff94 	bl	801c1fc <std>
 801c2d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c2d8:	2201      	movs	r2, #1
 801c2da:	2109      	movs	r1, #9
 801c2dc:	f7ff ff8e 	bl	801c1fc <std>
 801c2e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c2e4:	2202      	movs	r2, #2
 801c2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2ea:	2112      	movs	r1, #18
 801c2ec:	f7ff bf86 	b.w	801c1fc <std>
 801c2f0:	24048fe8 	.word	0x24048fe8
 801c2f4:	24048eb0 	.word	0x24048eb0
 801c2f8:	0801c269 	.word	0x0801c269

0801c2fc <__sfp_lock_acquire>:
 801c2fc:	4801      	ldr	r0, [pc, #4]	@ (801c304 <__sfp_lock_acquire+0x8>)
 801c2fe:	f000 b932 	b.w	801c566 <__retarget_lock_acquire_recursive>
 801c302:	bf00      	nop
 801c304:	24048ff1 	.word	0x24048ff1

0801c308 <__sfp_lock_release>:
 801c308:	4801      	ldr	r0, [pc, #4]	@ (801c310 <__sfp_lock_release+0x8>)
 801c30a:	f000 b92d 	b.w	801c568 <__retarget_lock_release_recursive>
 801c30e:	bf00      	nop
 801c310:	24048ff1 	.word	0x24048ff1

0801c314 <__sinit>:
 801c314:	b510      	push	{r4, lr}
 801c316:	4604      	mov	r4, r0
 801c318:	f7ff fff0 	bl	801c2fc <__sfp_lock_acquire>
 801c31c:	6a23      	ldr	r3, [r4, #32]
 801c31e:	b11b      	cbz	r3, 801c328 <__sinit+0x14>
 801c320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c324:	f7ff bff0 	b.w	801c308 <__sfp_lock_release>
 801c328:	4b04      	ldr	r3, [pc, #16]	@ (801c33c <__sinit+0x28>)
 801c32a:	6223      	str	r3, [r4, #32]
 801c32c:	4b04      	ldr	r3, [pc, #16]	@ (801c340 <__sinit+0x2c>)
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	2b00      	cmp	r3, #0
 801c332:	d1f5      	bne.n	801c320 <__sinit+0xc>
 801c334:	f7ff ffc4 	bl	801c2c0 <global_stdio_init.part.0>
 801c338:	e7f2      	b.n	801c320 <__sinit+0xc>
 801c33a:	bf00      	nop
 801c33c:	0801c281 	.word	0x0801c281
 801c340:	24048fe8 	.word	0x24048fe8

0801c344 <_fwalk_sglue>:
 801c344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c348:	4607      	mov	r7, r0
 801c34a:	4688      	mov	r8, r1
 801c34c:	4614      	mov	r4, r2
 801c34e:	2600      	movs	r6, #0
 801c350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c354:	f1b9 0901 	subs.w	r9, r9, #1
 801c358:	d505      	bpl.n	801c366 <_fwalk_sglue+0x22>
 801c35a:	6824      	ldr	r4, [r4, #0]
 801c35c:	2c00      	cmp	r4, #0
 801c35e:	d1f7      	bne.n	801c350 <_fwalk_sglue+0xc>
 801c360:	4630      	mov	r0, r6
 801c362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c366:	89ab      	ldrh	r3, [r5, #12]
 801c368:	2b01      	cmp	r3, #1
 801c36a:	d907      	bls.n	801c37c <_fwalk_sglue+0x38>
 801c36c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c370:	3301      	adds	r3, #1
 801c372:	d003      	beq.n	801c37c <_fwalk_sglue+0x38>
 801c374:	4629      	mov	r1, r5
 801c376:	4638      	mov	r0, r7
 801c378:	47c0      	blx	r8
 801c37a:	4306      	orrs	r6, r0
 801c37c:	3568      	adds	r5, #104	@ 0x68
 801c37e:	e7e9      	b.n	801c354 <_fwalk_sglue+0x10>

0801c380 <siprintf>:
 801c380:	b40e      	push	{r1, r2, r3}
 801c382:	b510      	push	{r4, lr}
 801c384:	b09d      	sub	sp, #116	@ 0x74
 801c386:	ab1f      	add	r3, sp, #124	@ 0x7c
 801c388:	9002      	str	r0, [sp, #8]
 801c38a:	9006      	str	r0, [sp, #24]
 801c38c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c390:	480a      	ldr	r0, [pc, #40]	@ (801c3bc <siprintf+0x3c>)
 801c392:	9107      	str	r1, [sp, #28]
 801c394:	9104      	str	r1, [sp, #16]
 801c396:	490a      	ldr	r1, [pc, #40]	@ (801c3c0 <siprintf+0x40>)
 801c398:	f853 2b04 	ldr.w	r2, [r3], #4
 801c39c:	9105      	str	r1, [sp, #20]
 801c39e:	2400      	movs	r4, #0
 801c3a0:	a902      	add	r1, sp, #8
 801c3a2:	6800      	ldr	r0, [r0, #0]
 801c3a4:	9301      	str	r3, [sp, #4]
 801c3a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801c3a8:	f001 fafc 	bl	801d9a4 <_svfiprintf_r>
 801c3ac:	9b02      	ldr	r3, [sp, #8]
 801c3ae:	701c      	strb	r4, [r3, #0]
 801c3b0:	b01d      	add	sp, #116	@ 0x74
 801c3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3b6:	b003      	add	sp, #12
 801c3b8:	4770      	bx	lr
 801c3ba:	bf00      	nop
 801c3bc:	24000350 	.word	0x24000350
 801c3c0:	ffff0208 	.word	0xffff0208

0801c3c4 <__sread>:
 801c3c4:	b510      	push	{r4, lr}
 801c3c6:	460c      	mov	r4, r1
 801c3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3cc:	f000 f86c 	bl	801c4a8 <_read_r>
 801c3d0:	2800      	cmp	r0, #0
 801c3d2:	bfab      	itete	ge
 801c3d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c3d6:	89a3      	ldrhlt	r3, [r4, #12]
 801c3d8:	181b      	addge	r3, r3, r0
 801c3da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c3de:	bfac      	ite	ge
 801c3e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c3e2:	81a3      	strhlt	r3, [r4, #12]
 801c3e4:	bd10      	pop	{r4, pc}

0801c3e6 <__swrite>:
 801c3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3ea:	461f      	mov	r7, r3
 801c3ec:	898b      	ldrh	r3, [r1, #12]
 801c3ee:	05db      	lsls	r3, r3, #23
 801c3f0:	4605      	mov	r5, r0
 801c3f2:	460c      	mov	r4, r1
 801c3f4:	4616      	mov	r6, r2
 801c3f6:	d505      	bpl.n	801c404 <__swrite+0x1e>
 801c3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3fc:	2302      	movs	r3, #2
 801c3fe:	2200      	movs	r2, #0
 801c400:	f000 f840 	bl	801c484 <_lseek_r>
 801c404:	89a3      	ldrh	r3, [r4, #12]
 801c406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c40a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c40e:	81a3      	strh	r3, [r4, #12]
 801c410:	4632      	mov	r2, r6
 801c412:	463b      	mov	r3, r7
 801c414:	4628      	mov	r0, r5
 801c416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c41a:	f000 b867 	b.w	801c4ec <_write_r>

0801c41e <__sseek>:
 801c41e:	b510      	push	{r4, lr}
 801c420:	460c      	mov	r4, r1
 801c422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c426:	f000 f82d 	bl	801c484 <_lseek_r>
 801c42a:	1c43      	adds	r3, r0, #1
 801c42c:	89a3      	ldrh	r3, [r4, #12]
 801c42e:	bf15      	itete	ne
 801c430:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c432:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c436:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c43a:	81a3      	strheq	r3, [r4, #12]
 801c43c:	bf18      	it	ne
 801c43e:	81a3      	strhne	r3, [r4, #12]
 801c440:	bd10      	pop	{r4, pc}

0801c442 <__sclose>:
 801c442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c446:	f000 b80d 	b.w	801c464 <_close_r>

0801c44a <memset>:
 801c44a:	4402      	add	r2, r0
 801c44c:	4603      	mov	r3, r0
 801c44e:	4293      	cmp	r3, r2
 801c450:	d100      	bne.n	801c454 <memset+0xa>
 801c452:	4770      	bx	lr
 801c454:	f803 1b01 	strb.w	r1, [r3], #1
 801c458:	e7f9      	b.n	801c44e <memset+0x4>
	...

0801c45c <_localeconv_r>:
 801c45c:	4800      	ldr	r0, [pc, #0]	@ (801c460 <_localeconv_r+0x4>)
 801c45e:	4770      	bx	lr
 801c460:	24000490 	.word	0x24000490

0801c464 <_close_r>:
 801c464:	b538      	push	{r3, r4, r5, lr}
 801c466:	4d06      	ldr	r5, [pc, #24]	@ (801c480 <_close_r+0x1c>)
 801c468:	2300      	movs	r3, #0
 801c46a:	4604      	mov	r4, r0
 801c46c:	4608      	mov	r0, r1
 801c46e:	602b      	str	r3, [r5, #0]
 801c470:	f7e6 fc10 	bl	8002c94 <_close>
 801c474:	1c43      	adds	r3, r0, #1
 801c476:	d102      	bne.n	801c47e <_close_r+0x1a>
 801c478:	682b      	ldr	r3, [r5, #0]
 801c47a:	b103      	cbz	r3, 801c47e <_close_r+0x1a>
 801c47c:	6023      	str	r3, [r4, #0]
 801c47e:	bd38      	pop	{r3, r4, r5, pc}
 801c480:	24048fec 	.word	0x24048fec

0801c484 <_lseek_r>:
 801c484:	b538      	push	{r3, r4, r5, lr}
 801c486:	4d07      	ldr	r5, [pc, #28]	@ (801c4a4 <_lseek_r+0x20>)
 801c488:	4604      	mov	r4, r0
 801c48a:	4608      	mov	r0, r1
 801c48c:	4611      	mov	r1, r2
 801c48e:	2200      	movs	r2, #0
 801c490:	602a      	str	r2, [r5, #0]
 801c492:	461a      	mov	r2, r3
 801c494:	f7e6 fc25 	bl	8002ce2 <_lseek>
 801c498:	1c43      	adds	r3, r0, #1
 801c49a:	d102      	bne.n	801c4a2 <_lseek_r+0x1e>
 801c49c:	682b      	ldr	r3, [r5, #0]
 801c49e:	b103      	cbz	r3, 801c4a2 <_lseek_r+0x1e>
 801c4a0:	6023      	str	r3, [r4, #0]
 801c4a2:	bd38      	pop	{r3, r4, r5, pc}
 801c4a4:	24048fec 	.word	0x24048fec

0801c4a8 <_read_r>:
 801c4a8:	b538      	push	{r3, r4, r5, lr}
 801c4aa:	4d07      	ldr	r5, [pc, #28]	@ (801c4c8 <_read_r+0x20>)
 801c4ac:	4604      	mov	r4, r0
 801c4ae:	4608      	mov	r0, r1
 801c4b0:	4611      	mov	r1, r2
 801c4b2:	2200      	movs	r2, #0
 801c4b4:	602a      	str	r2, [r5, #0]
 801c4b6:	461a      	mov	r2, r3
 801c4b8:	f7e6 fbb3 	bl	8002c22 <_read>
 801c4bc:	1c43      	adds	r3, r0, #1
 801c4be:	d102      	bne.n	801c4c6 <_read_r+0x1e>
 801c4c0:	682b      	ldr	r3, [r5, #0]
 801c4c2:	b103      	cbz	r3, 801c4c6 <_read_r+0x1e>
 801c4c4:	6023      	str	r3, [r4, #0]
 801c4c6:	bd38      	pop	{r3, r4, r5, pc}
 801c4c8:	24048fec 	.word	0x24048fec

0801c4cc <_sbrk_r>:
 801c4cc:	b538      	push	{r3, r4, r5, lr}
 801c4ce:	4d06      	ldr	r5, [pc, #24]	@ (801c4e8 <_sbrk_r+0x1c>)
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	4604      	mov	r4, r0
 801c4d4:	4608      	mov	r0, r1
 801c4d6:	602b      	str	r3, [r5, #0]
 801c4d8:	f7e6 fc10 	bl	8002cfc <_sbrk>
 801c4dc:	1c43      	adds	r3, r0, #1
 801c4de:	d102      	bne.n	801c4e6 <_sbrk_r+0x1a>
 801c4e0:	682b      	ldr	r3, [r5, #0]
 801c4e2:	b103      	cbz	r3, 801c4e6 <_sbrk_r+0x1a>
 801c4e4:	6023      	str	r3, [r4, #0]
 801c4e6:	bd38      	pop	{r3, r4, r5, pc}
 801c4e8:	24048fec 	.word	0x24048fec

0801c4ec <_write_r>:
 801c4ec:	b538      	push	{r3, r4, r5, lr}
 801c4ee:	4d07      	ldr	r5, [pc, #28]	@ (801c50c <_write_r+0x20>)
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	4608      	mov	r0, r1
 801c4f4:	4611      	mov	r1, r2
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	602a      	str	r2, [r5, #0]
 801c4fa:	461a      	mov	r2, r3
 801c4fc:	f7e6 fbae 	bl	8002c5c <_write>
 801c500:	1c43      	adds	r3, r0, #1
 801c502:	d102      	bne.n	801c50a <_write_r+0x1e>
 801c504:	682b      	ldr	r3, [r5, #0]
 801c506:	b103      	cbz	r3, 801c50a <_write_r+0x1e>
 801c508:	6023      	str	r3, [r4, #0]
 801c50a:	bd38      	pop	{r3, r4, r5, pc}
 801c50c:	24048fec 	.word	0x24048fec

0801c510 <__errno>:
 801c510:	4b01      	ldr	r3, [pc, #4]	@ (801c518 <__errno+0x8>)
 801c512:	6818      	ldr	r0, [r3, #0]
 801c514:	4770      	bx	lr
 801c516:	bf00      	nop
 801c518:	24000350 	.word	0x24000350

0801c51c <__libc_init_array>:
 801c51c:	b570      	push	{r4, r5, r6, lr}
 801c51e:	4d0d      	ldr	r5, [pc, #52]	@ (801c554 <__libc_init_array+0x38>)
 801c520:	4c0d      	ldr	r4, [pc, #52]	@ (801c558 <__libc_init_array+0x3c>)
 801c522:	1b64      	subs	r4, r4, r5
 801c524:	10a4      	asrs	r4, r4, #2
 801c526:	2600      	movs	r6, #0
 801c528:	42a6      	cmp	r6, r4
 801c52a:	d109      	bne.n	801c540 <__libc_init_array+0x24>
 801c52c:	4d0b      	ldr	r5, [pc, #44]	@ (801c55c <__libc_init_array+0x40>)
 801c52e:	4c0c      	ldr	r4, [pc, #48]	@ (801c560 <__libc_init_array+0x44>)
 801c530:	f002 fa32 	bl	801e998 <_init>
 801c534:	1b64      	subs	r4, r4, r5
 801c536:	10a4      	asrs	r4, r4, #2
 801c538:	2600      	movs	r6, #0
 801c53a:	42a6      	cmp	r6, r4
 801c53c:	d105      	bne.n	801c54a <__libc_init_array+0x2e>
 801c53e:	bd70      	pop	{r4, r5, r6, pc}
 801c540:	f855 3b04 	ldr.w	r3, [r5], #4
 801c544:	4798      	blx	r3
 801c546:	3601      	adds	r6, #1
 801c548:	e7ee      	b.n	801c528 <__libc_init_array+0xc>
 801c54a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c54e:	4798      	blx	r3
 801c550:	3601      	adds	r6, #1
 801c552:	e7f2      	b.n	801c53a <__libc_init_array+0x1e>
 801c554:	08020e90 	.word	0x08020e90
 801c558:	08020e90 	.word	0x08020e90
 801c55c:	08020e90 	.word	0x08020e90
 801c560:	08020e94 	.word	0x08020e94

0801c564 <__retarget_lock_init_recursive>:
 801c564:	4770      	bx	lr

0801c566 <__retarget_lock_acquire_recursive>:
 801c566:	4770      	bx	lr

0801c568 <__retarget_lock_release_recursive>:
 801c568:	4770      	bx	lr

0801c56a <strcpy>:
 801c56a:	4603      	mov	r3, r0
 801c56c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c570:	f803 2b01 	strb.w	r2, [r3], #1
 801c574:	2a00      	cmp	r2, #0
 801c576:	d1f9      	bne.n	801c56c <strcpy+0x2>
 801c578:	4770      	bx	lr

0801c57a <memcpy>:
 801c57a:	440a      	add	r2, r1
 801c57c:	4291      	cmp	r1, r2
 801c57e:	f100 33ff 	add.w	r3, r0, #4294967295
 801c582:	d100      	bne.n	801c586 <memcpy+0xc>
 801c584:	4770      	bx	lr
 801c586:	b510      	push	{r4, lr}
 801c588:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c58c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c590:	4291      	cmp	r1, r2
 801c592:	d1f9      	bne.n	801c588 <memcpy+0xe>
 801c594:	bd10      	pop	{r4, pc}

0801c596 <quorem>:
 801c596:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c59a:	6903      	ldr	r3, [r0, #16]
 801c59c:	690c      	ldr	r4, [r1, #16]
 801c59e:	42a3      	cmp	r3, r4
 801c5a0:	4607      	mov	r7, r0
 801c5a2:	db7e      	blt.n	801c6a2 <quorem+0x10c>
 801c5a4:	3c01      	subs	r4, #1
 801c5a6:	f101 0814 	add.w	r8, r1, #20
 801c5aa:	00a3      	lsls	r3, r4, #2
 801c5ac:	f100 0514 	add.w	r5, r0, #20
 801c5b0:	9300      	str	r3, [sp, #0]
 801c5b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c5b6:	9301      	str	r3, [sp, #4]
 801c5b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c5bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c5c0:	3301      	adds	r3, #1
 801c5c2:	429a      	cmp	r2, r3
 801c5c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c5c8:	fbb2 f6f3 	udiv	r6, r2, r3
 801c5cc:	d32e      	bcc.n	801c62c <quorem+0x96>
 801c5ce:	f04f 0a00 	mov.w	sl, #0
 801c5d2:	46c4      	mov	ip, r8
 801c5d4:	46ae      	mov	lr, r5
 801c5d6:	46d3      	mov	fp, sl
 801c5d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c5dc:	b298      	uxth	r0, r3
 801c5de:	fb06 a000 	mla	r0, r6, r0, sl
 801c5e2:	0c02      	lsrs	r2, r0, #16
 801c5e4:	0c1b      	lsrs	r3, r3, #16
 801c5e6:	fb06 2303 	mla	r3, r6, r3, r2
 801c5ea:	f8de 2000 	ldr.w	r2, [lr]
 801c5ee:	b280      	uxth	r0, r0
 801c5f0:	b292      	uxth	r2, r2
 801c5f2:	1a12      	subs	r2, r2, r0
 801c5f4:	445a      	add	r2, fp
 801c5f6:	f8de 0000 	ldr.w	r0, [lr]
 801c5fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c5fe:	b29b      	uxth	r3, r3
 801c600:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c604:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c608:	b292      	uxth	r2, r2
 801c60a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c60e:	45e1      	cmp	r9, ip
 801c610:	f84e 2b04 	str.w	r2, [lr], #4
 801c614:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c618:	d2de      	bcs.n	801c5d8 <quorem+0x42>
 801c61a:	9b00      	ldr	r3, [sp, #0]
 801c61c:	58eb      	ldr	r3, [r5, r3]
 801c61e:	b92b      	cbnz	r3, 801c62c <quorem+0x96>
 801c620:	9b01      	ldr	r3, [sp, #4]
 801c622:	3b04      	subs	r3, #4
 801c624:	429d      	cmp	r5, r3
 801c626:	461a      	mov	r2, r3
 801c628:	d32f      	bcc.n	801c68a <quorem+0xf4>
 801c62a:	613c      	str	r4, [r7, #16]
 801c62c:	4638      	mov	r0, r7
 801c62e:	f001 f855 	bl	801d6dc <__mcmp>
 801c632:	2800      	cmp	r0, #0
 801c634:	db25      	blt.n	801c682 <quorem+0xec>
 801c636:	4629      	mov	r1, r5
 801c638:	2000      	movs	r0, #0
 801c63a:	f858 2b04 	ldr.w	r2, [r8], #4
 801c63e:	f8d1 c000 	ldr.w	ip, [r1]
 801c642:	fa1f fe82 	uxth.w	lr, r2
 801c646:	fa1f f38c 	uxth.w	r3, ip
 801c64a:	eba3 030e 	sub.w	r3, r3, lr
 801c64e:	4403      	add	r3, r0
 801c650:	0c12      	lsrs	r2, r2, #16
 801c652:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c656:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c65a:	b29b      	uxth	r3, r3
 801c65c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c660:	45c1      	cmp	r9, r8
 801c662:	f841 3b04 	str.w	r3, [r1], #4
 801c666:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c66a:	d2e6      	bcs.n	801c63a <quorem+0xa4>
 801c66c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c670:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c674:	b922      	cbnz	r2, 801c680 <quorem+0xea>
 801c676:	3b04      	subs	r3, #4
 801c678:	429d      	cmp	r5, r3
 801c67a:	461a      	mov	r2, r3
 801c67c:	d30b      	bcc.n	801c696 <quorem+0x100>
 801c67e:	613c      	str	r4, [r7, #16]
 801c680:	3601      	adds	r6, #1
 801c682:	4630      	mov	r0, r6
 801c684:	b003      	add	sp, #12
 801c686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c68a:	6812      	ldr	r2, [r2, #0]
 801c68c:	3b04      	subs	r3, #4
 801c68e:	2a00      	cmp	r2, #0
 801c690:	d1cb      	bne.n	801c62a <quorem+0x94>
 801c692:	3c01      	subs	r4, #1
 801c694:	e7c6      	b.n	801c624 <quorem+0x8e>
 801c696:	6812      	ldr	r2, [r2, #0]
 801c698:	3b04      	subs	r3, #4
 801c69a:	2a00      	cmp	r2, #0
 801c69c:	d1ef      	bne.n	801c67e <quorem+0xe8>
 801c69e:	3c01      	subs	r4, #1
 801c6a0:	e7ea      	b.n	801c678 <quorem+0xe2>
 801c6a2:	2000      	movs	r0, #0
 801c6a4:	e7ee      	b.n	801c684 <quorem+0xee>
	...

0801c6a8 <_dtoa_r>:
 801c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6ac:	ed2d 8b02 	vpush	{d8}
 801c6b0:	69c7      	ldr	r7, [r0, #28]
 801c6b2:	b091      	sub	sp, #68	@ 0x44
 801c6b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c6b8:	ec55 4b10 	vmov	r4, r5, d0
 801c6bc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801c6be:	9107      	str	r1, [sp, #28]
 801c6c0:	4681      	mov	r9, r0
 801c6c2:	9209      	str	r2, [sp, #36]	@ 0x24
 801c6c4:	930d      	str	r3, [sp, #52]	@ 0x34
 801c6c6:	b97f      	cbnz	r7, 801c6e8 <_dtoa_r+0x40>
 801c6c8:	2010      	movs	r0, #16
 801c6ca:	f7ff f8ad 	bl	801b828 <malloc>
 801c6ce:	4602      	mov	r2, r0
 801c6d0:	f8c9 001c 	str.w	r0, [r9, #28]
 801c6d4:	b920      	cbnz	r0, 801c6e0 <_dtoa_r+0x38>
 801c6d6:	4ba0      	ldr	r3, [pc, #640]	@ (801c958 <_dtoa_r+0x2b0>)
 801c6d8:	21ef      	movs	r1, #239	@ 0xef
 801c6da:	48a0      	ldr	r0, [pc, #640]	@ (801c95c <_dtoa_r+0x2b4>)
 801c6dc:	f001 fb24 	bl	801dd28 <__assert_func>
 801c6e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c6e4:	6007      	str	r7, [r0, #0]
 801c6e6:	60c7      	str	r7, [r0, #12]
 801c6e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c6ec:	6819      	ldr	r1, [r3, #0]
 801c6ee:	b159      	cbz	r1, 801c708 <_dtoa_r+0x60>
 801c6f0:	685a      	ldr	r2, [r3, #4]
 801c6f2:	604a      	str	r2, [r1, #4]
 801c6f4:	2301      	movs	r3, #1
 801c6f6:	4093      	lsls	r3, r2
 801c6f8:	608b      	str	r3, [r1, #8]
 801c6fa:	4648      	mov	r0, r9
 801c6fc:	f000 fdbc 	bl	801d278 <_Bfree>
 801c700:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c704:	2200      	movs	r2, #0
 801c706:	601a      	str	r2, [r3, #0]
 801c708:	1e2b      	subs	r3, r5, #0
 801c70a:	bfbb      	ittet	lt
 801c70c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c710:	9303      	strlt	r3, [sp, #12]
 801c712:	2300      	movge	r3, #0
 801c714:	2201      	movlt	r2, #1
 801c716:	bfac      	ite	ge
 801c718:	6033      	strge	r3, [r6, #0]
 801c71a:	6032      	strlt	r2, [r6, #0]
 801c71c:	4b90      	ldr	r3, [pc, #576]	@ (801c960 <_dtoa_r+0x2b8>)
 801c71e:	9e03      	ldr	r6, [sp, #12]
 801c720:	43b3      	bics	r3, r6
 801c722:	d110      	bne.n	801c746 <_dtoa_r+0x9e>
 801c724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c726:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c72a:	6013      	str	r3, [r2, #0]
 801c72c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801c730:	4323      	orrs	r3, r4
 801c732:	f000 84e6 	beq.w	801d102 <_dtoa_r+0xa5a>
 801c736:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c738:	4f8a      	ldr	r7, [pc, #552]	@ (801c964 <_dtoa_r+0x2bc>)
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	f000 84e8 	beq.w	801d110 <_dtoa_r+0xa68>
 801c740:	1cfb      	adds	r3, r7, #3
 801c742:	f000 bce3 	b.w	801d10c <_dtoa_r+0xa64>
 801c746:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c74a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c752:	d10a      	bne.n	801c76a <_dtoa_r+0xc2>
 801c754:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c756:	2301      	movs	r3, #1
 801c758:	6013      	str	r3, [r2, #0]
 801c75a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c75c:	b113      	cbz	r3, 801c764 <_dtoa_r+0xbc>
 801c75e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801c760:	4b81      	ldr	r3, [pc, #516]	@ (801c968 <_dtoa_r+0x2c0>)
 801c762:	6013      	str	r3, [r2, #0]
 801c764:	4f81      	ldr	r7, [pc, #516]	@ (801c96c <_dtoa_r+0x2c4>)
 801c766:	f000 bcd3 	b.w	801d110 <_dtoa_r+0xa68>
 801c76a:	aa0e      	add	r2, sp, #56	@ 0x38
 801c76c:	a90f      	add	r1, sp, #60	@ 0x3c
 801c76e:	4648      	mov	r0, r9
 801c770:	eeb0 0b48 	vmov.f64	d0, d8
 801c774:	f001 f862 	bl	801d83c <__d2b>
 801c778:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801c77c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c77e:	9001      	str	r0, [sp, #4]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d045      	beq.n	801c810 <_dtoa_r+0x168>
 801c784:	eeb0 7b48 	vmov.f64	d7, d8
 801c788:	ee18 1a90 	vmov	r1, s17
 801c78c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c790:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801c794:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801c798:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801c79c:	2500      	movs	r5, #0
 801c79e:	ee07 1a90 	vmov	s15, r1
 801c7a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801c7a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801c940 <_dtoa_r+0x298>
 801c7aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c7ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801c948 <_dtoa_r+0x2a0>
 801c7b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c7b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801c950 <_dtoa_r+0x2a8>
 801c7ba:	ee07 3a90 	vmov	s15, r3
 801c7be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c7c2:	eeb0 7b46 	vmov.f64	d7, d6
 801c7c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c7ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c7ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7d6:	ee16 8a90 	vmov	r8, s13
 801c7da:	d508      	bpl.n	801c7ee <_dtoa_r+0x146>
 801c7dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c7e0:	eeb4 6b47 	vcmp.f64	d6, d7
 801c7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7e8:	bf18      	it	ne
 801c7ea:	f108 38ff 	addne.w	r8, r8, #4294967295
 801c7ee:	f1b8 0f16 	cmp.w	r8, #22
 801c7f2:	d82b      	bhi.n	801c84c <_dtoa_r+0x1a4>
 801c7f4:	495e      	ldr	r1, [pc, #376]	@ (801c970 <_dtoa_r+0x2c8>)
 801c7f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801c7fa:	ed91 7b00 	vldr	d7, [r1]
 801c7fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c806:	d501      	bpl.n	801c80c <_dtoa_r+0x164>
 801c808:	f108 38ff 	add.w	r8, r8, #4294967295
 801c80c:	2100      	movs	r1, #0
 801c80e:	e01e      	b.n	801c84e <_dtoa_r+0x1a6>
 801c810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c812:	4413      	add	r3, r2
 801c814:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801c818:	2920      	cmp	r1, #32
 801c81a:	bfc1      	itttt	gt
 801c81c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801c820:	408e      	lslgt	r6, r1
 801c822:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801c826:	fa24 f101 	lsrgt.w	r1, r4, r1
 801c82a:	bfd6      	itet	le
 801c82c:	f1c1 0120 	rsble	r1, r1, #32
 801c830:	4331      	orrgt	r1, r6
 801c832:	fa04 f101 	lslle.w	r1, r4, r1
 801c836:	ee07 1a90 	vmov	s15, r1
 801c83a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c83e:	3b01      	subs	r3, #1
 801c840:	ee17 1a90 	vmov	r1, s15
 801c844:	2501      	movs	r5, #1
 801c846:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801c84a:	e7a8      	b.n	801c79e <_dtoa_r+0xf6>
 801c84c:	2101      	movs	r1, #1
 801c84e:	1ad2      	subs	r2, r2, r3
 801c850:	1e53      	subs	r3, r2, #1
 801c852:	9306      	str	r3, [sp, #24]
 801c854:	bf45      	ittet	mi
 801c856:	f1c2 0301 	rsbmi	r3, r2, #1
 801c85a:	9304      	strmi	r3, [sp, #16]
 801c85c:	2300      	movpl	r3, #0
 801c85e:	2300      	movmi	r3, #0
 801c860:	bf4c      	ite	mi
 801c862:	9306      	strmi	r3, [sp, #24]
 801c864:	9304      	strpl	r3, [sp, #16]
 801c866:	f1b8 0f00 	cmp.w	r8, #0
 801c86a:	910c      	str	r1, [sp, #48]	@ 0x30
 801c86c:	db18      	blt.n	801c8a0 <_dtoa_r+0x1f8>
 801c86e:	9b06      	ldr	r3, [sp, #24]
 801c870:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801c874:	4443      	add	r3, r8
 801c876:	9306      	str	r3, [sp, #24]
 801c878:	2300      	movs	r3, #0
 801c87a:	9a07      	ldr	r2, [sp, #28]
 801c87c:	2a09      	cmp	r2, #9
 801c87e:	d845      	bhi.n	801c90c <_dtoa_r+0x264>
 801c880:	2a05      	cmp	r2, #5
 801c882:	bfc4      	itt	gt
 801c884:	3a04      	subgt	r2, #4
 801c886:	9207      	strgt	r2, [sp, #28]
 801c888:	9a07      	ldr	r2, [sp, #28]
 801c88a:	f1a2 0202 	sub.w	r2, r2, #2
 801c88e:	bfcc      	ite	gt
 801c890:	2400      	movgt	r4, #0
 801c892:	2401      	movle	r4, #1
 801c894:	2a03      	cmp	r2, #3
 801c896:	d844      	bhi.n	801c922 <_dtoa_r+0x27a>
 801c898:	e8df f002 	tbb	[pc, r2]
 801c89c:	0b173634 	.word	0x0b173634
 801c8a0:	9b04      	ldr	r3, [sp, #16]
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	eba3 0308 	sub.w	r3, r3, r8
 801c8a8:	9304      	str	r3, [sp, #16]
 801c8aa:	920a      	str	r2, [sp, #40]	@ 0x28
 801c8ac:	f1c8 0300 	rsb	r3, r8, #0
 801c8b0:	e7e3      	b.n	801c87a <_dtoa_r+0x1d2>
 801c8b2:	2201      	movs	r2, #1
 801c8b4:	9208      	str	r2, [sp, #32]
 801c8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c8b8:	eb08 0b02 	add.w	fp, r8, r2
 801c8bc:	f10b 0a01 	add.w	sl, fp, #1
 801c8c0:	4652      	mov	r2, sl
 801c8c2:	2a01      	cmp	r2, #1
 801c8c4:	bfb8      	it	lt
 801c8c6:	2201      	movlt	r2, #1
 801c8c8:	e006      	b.n	801c8d8 <_dtoa_r+0x230>
 801c8ca:	2201      	movs	r2, #1
 801c8cc:	9208      	str	r2, [sp, #32]
 801c8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c8d0:	2a00      	cmp	r2, #0
 801c8d2:	dd29      	ble.n	801c928 <_dtoa_r+0x280>
 801c8d4:	4693      	mov	fp, r2
 801c8d6:	4692      	mov	sl, r2
 801c8d8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801c8dc:	2100      	movs	r1, #0
 801c8de:	2004      	movs	r0, #4
 801c8e0:	f100 0614 	add.w	r6, r0, #20
 801c8e4:	4296      	cmp	r6, r2
 801c8e6:	d926      	bls.n	801c936 <_dtoa_r+0x28e>
 801c8e8:	6079      	str	r1, [r7, #4]
 801c8ea:	4648      	mov	r0, r9
 801c8ec:	9305      	str	r3, [sp, #20]
 801c8ee:	f000 fc83 	bl	801d1f8 <_Balloc>
 801c8f2:	9b05      	ldr	r3, [sp, #20]
 801c8f4:	4607      	mov	r7, r0
 801c8f6:	2800      	cmp	r0, #0
 801c8f8:	d13e      	bne.n	801c978 <_dtoa_r+0x2d0>
 801c8fa:	4b1e      	ldr	r3, [pc, #120]	@ (801c974 <_dtoa_r+0x2cc>)
 801c8fc:	4602      	mov	r2, r0
 801c8fe:	f240 11af 	movw	r1, #431	@ 0x1af
 801c902:	e6ea      	b.n	801c6da <_dtoa_r+0x32>
 801c904:	2200      	movs	r2, #0
 801c906:	e7e1      	b.n	801c8cc <_dtoa_r+0x224>
 801c908:	2200      	movs	r2, #0
 801c90a:	e7d3      	b.n	801c8b4 <_dtoa_r+0x20c>
 801c90c:	2401      	movs	r4, #1
 801c90e:	2200      	movs	r2, #0
 801c910:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801c914:	f04f 3bff 	mov.w	fp, #4294967295
 801c918:	2100      	movs	r1, #0
 801c91a:	46da      	mov	sl, fp
 801c91c:	2212      	movs	r2, #18
 801c91e:	9109      	str	r1, [sp, #36]	@ 0x24
 801c920:	e7da      	b.n	801c8d8 <_dtoa_r+0x230>
 801c922:	2201      	movs	r2, #1
 801c924:	9208      	str	r2, [sp, #32]
 801c926:	e7f5      	b.n	801c914 <_dtoa_r+0x26c>
 801c928:	f04f 0b01 	mov.w	fp, #1
 801c92c:	46da      	mov	sl, fp
 801c92e:	465a      	mov	r2, fp
 801c930:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801c934:	e7d0      	b.n	801c8d8 <_dtoa_r+0x230>
 801c936:	3101      	adds	r1, #1
 801c938:	0040      	lsls	r0, r0, #1
 801c93a:	e7d1      	b.n	801c8e0 <_dtoa_r+0x238>
 801c93c:	f3af 8000 	nop.w
 801c940:	636f4361 	.word	0x636f4361
 801c944:	3fd287a7 	.word	0x3fd287a7
 801c948:	8b60c8b3 	.word	0x8b60c8b3
 801c94c:	3fc68a28 	.word	0x3fc68a28
 801c950:	509f79fb 	.word	0x509f79fb
 801c954:	3fd34413 	.word	0x3fd34413
 801c958:	0801f299 	.word	0x0801f299
 801c95c:	0801f2b0 	.word	0x0801f2b0
 801c960:	7ff00000 	.word	0x7ff00000
 801c964:	0801f295 	.word	0x0801f295
 801c968:	0801f269 	.word	0x0801f269
 801c96c:	0801f268 	.word	0x0801f268
 801c970:	0801f400 	.word	0x0801f400
 801c974:	0801f308 	.word	0x0801f308
 801c978:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801c97c:	f1ba 0f0e 	cmp.w	sl, #14
 801c980:	6010      	str	r0, [r2, #0]
 801c982:	d86e      	bhi.n	801ca62 <_dtoa_r+0x3ba>
 801c984:	2c00      	cmp	r4, #0
 801c986:	d06c      	beq.n	801ca62 <_dtoa_r+0x3ba>
 801c988:	f1b8 0f00 	cmp.w	r8, #0
 801c98c:	f340 80b4 	ble.w	801caf8 <_dtoa_r+0x450>
 801c990:	4ac8      	ldr	r2, [pc, #800]	@ (801ccb4 <_dtoa_r+0x60c>)
 801c992:	f008 010f 	and.w	r1, r8, #15
 801c996:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c99a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801c99e:	ed92 7b00 	vldr	d7, [r2]
 801c9a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 801c9a6:	f000 809b 	beq.w	801cae0 <_dtoa_r+0x438>
 801c9aa:	4ac3      	ldr	r2, [pc, #780]	@ (801ccb8 <_dtoa_r+0x610>)
 801c9ac:	ed92 6b08 	vldr	d6, [r2, #32]
 801c9b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c9b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c9b8:	f001 010f 	and.w	r1, r1, #15
 801c9bc:	2203      	movs	r2, #3
 801c9be:	48be      	ldr	r0, [pc, #760]	@ (801ccb8 <_dtoa_r+0x610>)
 801c9c0:	2900      	cmp	r1, #0
 801c9c2:	f040 808f 	bne.w	801cae4 <_dtoa_r+0x43c>
 801c9c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c9ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c9ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c9d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c9d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c9d8:	2900      	cmp	r1, #0
 801c9da:	f000 80b3 	beq.w	801cb44 <_dtoa_r+0x49c>
 801c9de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801c9e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9ea:	f140 80ab 	bpl.w	801cb44 <_dtoa_r+0x49c>
 801c9ee:	f1ba 0f00 	cmp.w	sl, #0
 801c9f2:	f000 80a7 	beq.w	801cb44 <_dtoa_r+0x49c>
 801c9f6:	f1bb 0f00 	cmp.w	fp, #0
 801c9fa:	dd30      	ble.n	801ca5e <_dtoa_r+0x3b6>
 801c9fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801ca00:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ca04:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ca08:	f108 31ff 	add.w	r1, r8, #4294967295
 801ca0c:	9105      	str	r1, [sp, #20]
 801ca0e:	3201      	adds	r2, #1
 801ca10:	465c      	mov	r4, fp
 801ca12:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ca16:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801ca1a:	ee07 2a90 	vmov	s15, r2
 801ca1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ca22:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ca26:	ee15 2a90 	vmov	r2, s11
 801ca2a:	ec51 0b15 	vmov	r0, r1, d5
 801ca2e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801ca32:	2c00      	cmp	r4, #0
 801ca34:	f040 808a 	bne.w	801cb4c <_dtoa_r+0x4a4>
 801ca38:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801ca3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ca40:	ec41 0b17 	vmov	d7, r0, r1
 801ca44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ca48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca4c:	f300 826a 	bgt.w	801cf24 <_dtoa_r+0x87c>
 801ca50:	eeb1 7b47 	vneg.f64	d7, d7
 801ca54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ca58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca5c:	d423      	bmi.n	801caa6 <_dtoa_r+0x3fe>
 801ca5e:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ca62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ca64:	2a00      	cmp	r2, #0
 801ca66:	f2c0 8129 	blt.w	801ccbc <_dtoa_r+0x614>
 801ca6a:	f1b8 0f0e 	cmp.w	r8, #14
 801ca6e:	f300 8125 	bgt.w	801ccbc <_dtoa_r+0x614>
 801ca72:	4b90      	ldr	r3, [pc, #576]	@ (801ccb4 <_dtoa_r+0x60c>)
 801ca74:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ca78:	ed93 6b00 	vldr	d6, [r3]
 801ca7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	f280 80c8 	bge.w	801cc14 <_dtoa_r+0x56c>
 801ca84:	f1ba 0f00 	cmp.w	sl, #0
 801ca88:	f300 80c4 	bgt.w	801cc14 <_dtoa_r+0x56c>
 801ca8c:	d10b      	bne.n	801caa6 <_dtoa_r+0x3fe>
 801ca8e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801ca92:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ca96:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ca9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ca9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caa2:	f2c0 823c 	blt.w	801cf1e <_dtoa_r+0x876>
 801caa6:	2400      	movs	r4, #0
 801caa8:	4625      	mov	r5, r4
 801caaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caac:	43db      	mvns	r3, r3
 801caae:	9305      	str	r3, [sp, #20]
 801cab0:	463e      	mov	r6, r7
 801cab2:	f04f 0800 	mov.w	r8, #0
 801cab6:	4621      	mov	r1, r4
 801cab8:	4648      	mov	r0, r9
 801caba:	f000 fbdd 	bl	801d278 <_Bfree>
 801cabe:	2d00      	cmp	r5, #0
 801cac0:	f000 80a2 	beq.w	801cc08 <_dtoa_r+0x560>
 801cac4:	f1b8 0f00 	cmp.w	r8, #0
 801cac8:	d005      	beq.n	801cad6 <_dtoa_r+0x42e>
 801caca:	45a8      	cmp	r8, r5
 801cacc:	d003      	beq.n	801cad6 <_dtoa_r+0x42e>
 801cace:	4641      	mov	r1, r8
 801cad0:	4648      	mov	r0, r9
 801cad2:	f000 fbd1 	bl	801d278 <_Bfree>
 801cad6:	4629      	mov	r1, r5
 801cad8:	4648      	mov	r0, r9
 801cada:	f000 fbcd 	bl	801d278 <_Bfree>
 801cade:	e093      	b.n	801cc08 <_dtoa_r+0x560>
 801cae0:	2202      	movs	r2, #2
 801cae2:	e76c      	b.n	801c9be <_dtoa_r+0x316>
 801cae4:	07cc      	lsls	r4, r1, #31
 801cae6:	d504      	bpl.n	801caf2 <_dtoa_r+0x44a>
 801cae8:	ed90 6b00 	vldr	d6, [r0]
 801caec:	3201      	adds	r2, #1
 801caee:	ee27 7b06 	vmul.f64	d7, d7, d6
 801caf2:	1049      	asrs	r1, r1, #1
 801caf4:	3008      	adds	r0, #8
 801caf6:	e763      	b.n	801c9c0 <_dtoa_r+0x318>
 801caf8:	d022      	beq.n	801cb40 <_dtoa_r+0x498>
 801cafa:	f1c8 0100 	rsb	r1, r8, #0
 801cafe:	4a6d      	ldr	r2, [pc, #436]	@ (801ccb4 <_dtoa_r+0x60c>)
 801cb00:	f001 000f 	and.w	r0, r1, #15
 801cb04:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cb08:	ed92 7b00 	vldr	d7, [r2]
 801cb0c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801cb10:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cb14:	4868      	ldr	r0, [pc, #416]	@ (801ccb8 <_dtoa_r+0x610>)
 801cb16:	1109      	asrs	r1, r1, #4
 801cb18:	2400      	movs	r4, #0
 801cb1a:	2202      	movs	r2, #2
 801cb1c:	b929      	cbnz	r1, 801cb2a <_dtoa_r+0x482>
 801cb1e:	2c00      	cmp	r4, #0
 801cb20:	f43f af57 	beq.w	801c9d2 <_dtoa_r+0x32a>
 801cb24:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cb28:	e753      	b.n	801c9d2 <_dtoa_r+0x32a>
 801cb2a:	07ce      	lsls	r6, r1, #31
 801cb2c:	d505      	bpl.n	801cb3a <_dtoa_r+0x492>
 801cb2e:	ed90 6b00 	vldr	d6, [r0]
 801cb32:	3201      	adds	r2, #1
 801cb34:	2401      	movs	r4, #1
 801cb36:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb3a:	1049      	asrs	r1, r1, #1
 801cb3c:	3008      	adds	r0, #8
 801cb3e:	e7ed      	b.n	801cb1c <_dtoa_r+0x474>
 801cb40:	2202      	movs	r2, #2
 801cb42:	e746      	b.n	801c9d2 <_dtoa_r+0x32a>
 801cb44:	f8cd 8014 	str.w	r8, [sp, #20]
 801cb48:	4654      	mov	r4, sl
 801cb4a:	e762      	b.n	801ca12 <_dtoa_r+0x36a>
 801cb4c:	4a59      	ldr	r2, [pc, #356]	@ (801ccb4 <_dtoa_r+0x60c>)
 801cb4e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801cb52:	ed12 4b02 	vldr	d4, [r2, #-8]
 801cb56:	9a08      	ldr	r2, [sp, #32]
 801cb58:	ec41 0b17 	vmov	d7, r0, r1
 801cb5c:	443c      	add	r4, r7
 801cb5e:	b34a      	cbz	r2, 801cbb4 <_dtoa_r+0x50c>
 801cb60:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801cb64:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801cb68:	463e      	mov	r6, r7
 801cb6a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801cb6e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801cb72:	ee35 7b47 	vsub.f64	d7, d5, d7
 801cb76:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cb7a:	ee14 2a90 	vmov	r2, s9
 801cb7e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cb82:	3230      	adds	r2, #48	@ 0x30
 801cb84:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cb88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb90:	f806 2b01 	strb.w	r2, [r6], #1
 801cb94:	d438      	bmi.n	801cc08 <_dtoa_r+0x560>
 801cb96:	ee32 5b46 	vsub.f64	d5, d2, d6
 801cb9a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801cb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cba2:	d46e      	bmi.n	801cc82 <_dtoa_r+0x5da>
 801cba4:	42a6      	cmp	r6, r4
 801cba6:	f43f af5a 	beq.w	801ca5e <_dtoa_r+0x3b6>
 801cbaa:	ee27 7b03 	vmul.f64	d7, d7, d3
 801cbae:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cbb2:	e7e0      	b.n	801cb76 <_dtoa_r+0x4ce>
 801cbb4:	4621      	mov	r1, r4
 801cbb6:	463e      	mov	r6, r7
 801cbb8:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cbbc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801cbc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cbc4:	ee14 2a90 	vmov	r2, s9
 801cbc8:	3230      	adds	r2, #48	@ 0x30
 801cbca:	f806 2b01 	strb.w	r2, [r6], #1
 801cbce:	42a6      	cmp	r6, r4
 801cbd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cbd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cbd8:	d119      	bne.n	801cc0e <_dtoa_r+0x566>
 801cbda:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801cbde:	ee37 4b05 	vadd.f64	d4, d7, d5
 801cbe2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801cbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbea:	dc4a      	bgt.n	801cc82 <_dtoa_r+0x5da>
 801cbec:	ee35 5b47 	vsub.f64	d5, d5, d7
 801cbf0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801cbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbf8:	f57f af31 	bpl.w	801ca5e <_dtoa_r+0x3b6>
 801cbfc:	460e      	mov	r6, r1
 801cbfe:	3901      	subs	r1, #1
 801cc00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cc04:	2b30      	cmp	r3, #48	@ 0x30
 801cc06:	d0f9      	beq.n	801cbfc <_dtoa_r+0x554>
 801cc08:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cc0c:	e027      	b.n	801cc5e <_dtoa_r+0x5b6>
 801cc0e:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cc12:	e7d5      	b.n	801cbc0 <_dtoa_r+0x518>
 801cc14:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cc18:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801cc1c:	463e      	mov	r6, r7
 801cc1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801cc22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801cc26:	ee15 3a10 	vmov	r3, s10
 801cc2a:	3330      	adds	r3, #48	@ 0x30
 801cc2c:	f806 3b01 	strb.w	r3, [r6], #1
 801cc30:	1bf3      	subs	r3, r6, r7
 801cc32:	459a      	cmp	sl, r3
 801cc34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801cc38:	eea3 7b46 	vfms.f64	d7, d3, d6
 801cc3c:	d132      	bne.n	801cca4 <_dtoa_r+0x5fc>
 801cc3e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801cc42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc4a:	dc18      	bgt.n	801cc7e <_dtoa_r+0x5d6>
 801cc4c:	eeb4 7b46 	vcmp.f64	d7, d6
 801cc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc54:	d103      	bne.n	801cc5e <_dtoa_r+0x5b6>
 801cc56:	ee15 3a10 	vmov	r3, s10
 801cc5a:	07db      	lsls	r3, r3, #31
 801cc5c:	d40f      	bmi.n	801cc7e <_dtoa_r+0x5d6>
 801cc5e:	9901      	ldr	r1, [sp, #4]
 801cc60:	4648      	mov	r0, r9
 801cc62:	f000 fb09 	bl	801d278 <_Bfree>
 801cc66:	2300      	movs	r3, #0
 801cc68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cc6a:	7033      	strb	r3, [r6, #0]
 801cc6c:	f108 0301 	add.w	r3, r8, #1
 801cc70:	6013      	str	r3, [r2, #0]
 801cc72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	f000 824b 	beq.w	801d110 <_dtoa_r+0xa68>
 801cc7a:	601e      	str	r6, [r3, #0]
 801cc7c:	e248      	b.n	801d110 <_dtoa_r+0xa68>
 801cc7e:	f8cd 8014 	str.w	r8, [sp, #20]
 801cc82:	4633      	mov	r3, r6
 801cc84:	461e      	mov	r6, r3
 801cc86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cc8a:	2a39      	cmp	r2, #57	@ 0x39
 801cc8c:	d106      	bne.n	801cc9c <_dtoa_r+0x5f4>
 801cc8e:	429f      	cmp	r7, r3
 801cc90:	d1f8      	bne.n	801cc84 <_dtoa_r+0x5dc>
 801cc92:	9a05      	ldr	r2, [sp, #20]
 801cc94:	3201      	adds	r2, #1
 801cc96:	9205      	str	r2, [sp, #20]
 801cc98:	2230      	movs	r2, #48	@ 0x30
 801cc9a:	703a      	strb	r2, [r7, #0]
 801cc9c:	781a      	ldrb	r2, [r3, #0]
 801cc9e:	3201      	adds	r2, #1
 801cca0:	701a      	strb	r2, [r3, #0]
 801cca2:	e7b1      	b.n	801cc08 <_dtoa_r+0x560>
 801cca4:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cca8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ccac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccb0:	d1b5      	bne.n	801cc1e <_dtoa_r+0x576>
 801ccb2:	e7d4      	b.n	801cc5e <_dtoa_r+0x5b6>
 801ccb4:	0801f400 	.word	0x0801f400
 801ccb8:	0801f3d8 	.word	0x0801f3d8
 801ccbc:	9908      	ldr	r1, [sp, #32]
 801ccbe:	2900      	cmp	r1, #0
 801ccc0:	f000 80e9 	beq.w	801ce96 <_dtoa_r+0x7ee>
 801ccc4:	9907      	ldr	r1, [sp, #28]
 801ccc6:	2901      	cmp	r1, #1
 801ccc8:	f300 80cb 	bgt.w	801ce62 <_dtoa_r+0x7ba>
 801cccc:	2d00      	cmp	r5, #0
 801ccce:	f000 80c4 	beq.w	801ce5a <_dtoa_r+0x7b2>
 801ccd2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801ccd6:	9e04      	ldr	r6, [sp, #16]
 801ccd8:	461c      	mov	r4, r3
 801ccda:	9305      	str	r3, [sp, #20]
 801ccdc:	9b04      	ldr	r3, [sp, #16]
 801ccde:	4413      	add	r3, r2
 801cce0:	9304      	str	r3, [sp, #16]
 801cce2:	9b06      	ldr	r3, [sp, #24]
 801cce4:	2101      	movs	r1, #1
 801cce6:	4413      	add	r3, r2
 801cce8:	4648      	mov	r0, r9
 801ccea:	9306      	str	r3, [sp, #24]
 801ccec:	f000 fb78 	bl	801d3e0 <__i2b>
 801ccf0:	9b05      	ldr	r3, [sp, #20]
 801ccf2:	4605      	mov	r5, r0
 801ccf4:	b166      	cbz	r6, 801cd10 <_dtoa_r+0x668>
 801ccf6:	9a06      	ldr	r2, [sp, #24]
 801ccf8:	2a00      	cmp	r2, #0
 801ccfa:	dd09      	ble.n	801cd10 <_dtoa_r+0x668>
 801ccfc:	42b2      	cmp	r2, r6
 801ccfe:	9904      	ldr	r1, [sp, #16]
 801cd00:	bfa8      	it	ge
 801cd02:	4632      	movge	r2, r6
 801cd04:	1a89      	subs	r1, r1, r2
 801cd06:	9104      	str	r1, [sp, #16]
 801cd08:	9906      	ldr	r1, [sp, #24]
 801cd0a:	1ab6      	subs	r6, r6, r2
 801cd0c:	1a8a      	subs	r2, r1, r2
 801cd0e:	9206      	str	r2, [sp, #24]
 801cd10:	b30b      	cbz	r3, 801cd56 <_dtoa_r+0x6ae>
 801cd12:	9a08      	ldr	r2, [sp, #32]
 801cd14:	2a00      	cmp	r2, #0
 801cd16:	f000 80c5 	beq.w	801cea4 <_dtoa_r+0x7fc>
 801cd1a:	2c00      	cmp	r4, #0
 801cd1c:	f000 80bf 	beq.w	801ce9e <_dtoa_r+0x7f6>
 801cd20:	4629      	mov	r1, r5
 801cd22:	4622      	mov	r2, r4
 801cd24:	4648      	mov	r0, r9
 801cd26:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cd28:	f000 fc12 	bl	801d550 <__pow5mult>
 801cd2c:	9a01      	ldr	r2, [sp, #4]
 801cd2e:	4601      	mov	r1, r0
 801cd30:	4605      	mov	r5, r0
 801cd32:	4648      	mov	r0, r9
 801cd34:	f000 fb6a 	bl	801d40c <__multiply>
 801cd38:	9901      	ldr	r1, [sp, #4]
 801cd3a:	9005      	str	r0, [sp, #20]
 801cd3c:	4648      	mov	r0, r9
 801cd3e:	f000 fa9b 	bl	801d278 <_Bfree>
 801cd42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cd44:	1b1b      	subs	r3, r3, r4
 801cd46:	f000 80b0 	beq.w	801ceaa <_dtoa_r+0x802>
 801cd4a:	9905      	ldr	r1, [sp, #20]
 801cd4c:	461a      	mov	r2, r3
 801cd4e:	4648      	mov	r0, r9
 801cd50:	f000 fbfe 	bl	801d550 <__pow5mult>
 801cd54:	9001      	str	r0, [sp, #4]
 801cd56:	2101      	movs	r1, #1
 801cd58:	4648      	mov	r0, r9
 801cd5a:	f000 fb41 	bl	801d3e0 <__i2b>
 801cd5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd60:	4604      	mov	r4, r0
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	f000 81da 	beq.w	801d11c <_dtoa_r+0xa74>
 801cd68:	461a      	mov	r2, r3
 801cd6a:	4601      	mov	r1, r0
 801cd6c:	4648      	mov	r0, r9
 801cd6e:	f000 fbef 	bl	801d550 <__pow5mult>
 801cd72:	9b07      	ldr	r3, [sp, #28]
 801cd74:	2b01      	cmp	r3, #1
 801cd76:	4604      	mov	r4, r0
 801cd78:	f300 80a0 	bgt.w	801cebc <_dtoa_r+0x814>
 801cd7c:	9b02      	ldr	r3, [sp, #8]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	f040 8096 	bne.w	801ceb0 <_dtoa_r+0x808>
 801cd84:	9b03      	ldr	r3, [sp, #12]
 801cd86:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801cd8a:	2a00      	cmp	r2, #0
 801cd8c:	f040 8092 	bne.w	801ceb4 <_dtoa_r+0x80c>
 801cd90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801cd94:	0d12      	lsrs	r2, r2, #20
 801cd96:	0512      	lsls	r2, r2, #20
 801cd98:	2a00      	cmp	r2, #0
 801cd9a:	f000 808d 	beq.w	801ceb8 <_dtoa_r+0x810>
 801cd9e:	9b04      	ldr	r3, [sp, #16]
 801cda0:	3301      	adds	r3, #1
 801cda2:	9304      	str	r3, [sp, #16]
 801cda4:	9b06      	ldr	r3, [sp, #24]
 801cda6:	3301      	adds	r3, #1
 801cda8:	9306      	str	r3, [sp, #24]
 801cdaa:	2301      	movs	r3, #1
 801cdac:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cdae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	f000 81b9 	beq.w	801d128 <_dtoa_r+0xa80>
 801cdb6:	6922      	ldr	r2, [r4, #16]
 801cdb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801cdbc:	6910      	ldr	r0, [r2, #16]
 801cdbe:	f000 fac3 	bl	801d348 <__hi0bits>
 801cdc2:	f1c0 0020 	rsb	r0, r0, #32
 801cdc6:	9b06      	ldr	r3, [sp, #24]
 801cdc8:	4418      	add	r0, r3
 801cdca:	f010 001f 	ands.w	r0, r0, #31
 801cdce:	f000 8081 	beq.w	801ced4 <_dtoa_r+0x82c>
 801cdd2:	f1c0 0220 	rsb	r2, r0, #32
 801cdd6:	2a04      	cmp	r2, #4
 801cdd8:	dd73      	ble.n	801cec2 <_dtoa_r+0x81a>
 801cdda:	9b04      	ldr	r3, [sp, #16]
 801cddc:	f1c0 001c 	rsb	r0, r0, #28
 801cde0:	4403      	add	r3, r0
 801cde2:	9304      	str	r3, [sp, #16]
 801cde4:	9b06      	ldr	r3, [sp, #24]
 801cde6:	4406      	add	r6, r0
 801cde8:	4403      	add	r3, r0
 801cdea:	9306      	str	r3, [sp, #24]
 801cdec:	9b04      	ldr	r3, [sp, #16]
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	dd05      	ble.n	801cdfe <_dtoa_r+0x756>
 801cdf2:	9901      	ldr	r1, [sp, #4]
 801cdf4:	461a      	mov	r2, r3
 801cdf6:	4648      	mov	r0, r9
 801cdf8:	f000 fc04 	bl	801d604 <__lshift>
 801cdfc:	9001      	str	r0, [sp, #4]
 801cdfe:	9b06      	ldr	r3, [sp, #24]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	dd05      	ble.n	801ce10 <_dtoa_r+0x768>
 801ce04:	4621      	mov	r1, r4
 801ce06:	461a      	mov	r2, r3
 801ce08:	4648      	mov	r0, r9
 801ce0a:	f000 fbfb 	bl	801d604 <__lshift>
 801ce0e:	4604      	mov	r4, r0
 801ce10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d060      	beq.n	801ced8 <_dtoa_r+0x830>
 801ce16:	9801      	ldr	r0, [sp, #4]
 801ce18:	4621      	mov	r1, r4
 801ce1a:	f000 fc5f 	bl	801d6dc <__mcmp>
 801ce1e:	2800      	cmp	r0, #0
 801ce20:	da5a      	bge.n	801ced8 <_dtoa_r+0x830>
 801ce22:	f108 33ff 	add.w	r3, r8, #4294967295
 801ce26:	9305      	str	r3, [sp, #20]
 801ce28:	9901      	ldr	r1, [sp, #4]
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	220a      	movs	r2, #10
 801ce2e:	4648      	mov	r0, r9
 801ce30:	f000 fa44 	bl	801d2bc <__multadd>
 801ce34:	9b08      	ldr	r3, [sp, #32]
 801ce36:	9001      	str	r0, [sp, #4]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	f000 8177 	beq.w	801d12c <_dtoa_r+0xa84>
 801ce3e:	4629      	mov	r1, r5
 801ce40:	2300      	movs	r3, #0
 801ce42:	220a      	movs	r2, #10
 801ce44:	4648      	mov	r0, r9
 801ce46:	f000 fa39 	bl	801d2bc <__multadd>
 801ce4a:	f1bb 0f00 	cmp.w	fp, #0
 801ce4e:	4605      	mov	r5, r0
 801ce50:	dc6e      	bgt.n	801cf30 <_dtoa_r+0x888>
 801ce52:	9b07      	ldr	r3, [sp, #28]
 801ce54:	2b02      	cmp	r3, #2
 801ce56:	dc48      	bgt.n	801ceea <_dtoa_r+0x842>
 801ce58:	e06a      	b.n	801cf30 <_dtoa_r+0x888>
 801ce5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ce5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801ce60:	e739      	b.n	801ccd6 <_dtoa_r+0x62e>
 801ce62:	f10a 34ff 	add.w	r4, sl, #4294967295
 801ce66:	42a3      	cmp	r3, r4
 801ce68:	db07      	blt.n	801ce7a <_dtoa_r+0x7d2>
 801ce6a:	f1ba 0f00 	cmp.w	sl, #0
 801ce6e:	eba3 0404 	sub.w	r4, r3, r4
 801ce72:	db0b      	blt.n	801ce8c <_dtoa_r+0x7e4>
 801ce74:	9e04      	ldr	r6, [sp, #16]
 801ce76:	4652      	mov	r2, sl
 801ce78:	e72f      	b.n	801ccda <_dtoa_r+0x632>
 801ce7a:	1ae2      	subs	r2, r4, r3
 801ce7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce7e:	9e04      	ldr	r6, [sp, #16]
 801ce80:	4413      	add	r3, r2
 801ce82:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce84:	4652      	mov	r2, sl
 801ce86:	4623      	mov	r3, r4
 801ce88:	2400      	movs	r4, #0
 801ce8a:	e726      	b.n	801ccda <_dtoa_r+0x632>
 801ce8c:	9a04      	ldr	r2, [sp, #16]
 801ce8e:	eba2 060a 	sub.w	r6, r2, sl
 801ce92:	2200      	movs	r2, #0
 801ce94:	e721      	b.n	801ccda <_dtoa_r+0x632>
 801ce96:	9e04      	ldr	r6, [sp, #16]
 801ce98:	9d08      	ldr	r5, [sp, #32]
 801ce9a:	461c      	mov	r4, r3
 801ce9c:	e72a      	b.n	801ccf4 <_dtoa_r+0x64c>
 801ce9e:	9a01      	ldr	r2, [sp, #4]
 801cea0:	9205      	str	r2, [sp, #20]
 801cea2:	e752      	b.n	801cd4a <_dtoa_r+0x6a2>
 801cea4:	9901      	ldr	r1, [sp, #4]
 801cea6:	461a      	mov	r2, r3
 801cea8:	e751      	b.n	801cd4e <_dtoa_r+0x6a6>
 801ceaa:	9b05      	ldr	r3, [sp, #20]
 801ceac:	9301      	str	r3, [sp, #4]
 801ceae:	e752      	b.n	801cd56 <_dtoa_r+0x6ae>
 801ceb0:	2300      	movs	r3, #0
 801ceb2:	e77b      	b.n	801cdac <_dtoa_r+0x704>
 801ceb4:	9b02      	ldr	r3, [sp, #8]
 801ceb6:	e779      	b.n	801cdac <_dtoa_r+0x704>
 801ceb8:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ceba:	e778      	b.n	801cdae <_dtoa_r+0x706>
 801cebc:	2300      	movs	r3, #0
 801cebe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cec0:	e779      	b.n	801cdb6 <_dtoa_r+0x70e>
 801cec2:	d093      	beq.n	801cdec <_dtoa_r+0x744>
 801cec4:	9b04      	ldr	r3, [sp, #16]
 801cec6:	321c      	adds	r2, #28
 801cec8:	4413      	add	r3, r2
 801ceca:	9304      	str	r3, [sp, #16]
 801cecc:	9b06      	ldr	r3, [sp, #24]
 801cece:	4416      	add	r6, r2
 801ced0:	4413      	add	r3, r2
 801ced2:	e78a      	b.n	801cdea <_dtoa_r+0x742>
 801ced4:	4602      	mov	r2, r0
 801ced6:	e7f5      	b.n	801cec4 <_dtoa_r+0x81c>
 801ced8:	f1ba 0f00 	cmp.w	sl, #0
 801cedc:	f8cd 8014 	str.w	r8, [sp, #20]
 801cee0:	46d3      	mov	fp, sl
 801cee2:	dc21      	bgt.n	801cf28 <_dtoa_r+0x880>
 801cee4:	9b07      	ldr	r3, [sp, #28]
 801cee6:	2b02      	cmp	r3, #2
 801cee8:	dd1e      	ble.n	801cf28 <_dtoa_r+0x880>
 801ceea:	f1bb 0f00 	cmp.w	fp, #0
 801ceee:	f47f addc 	bne.w	801caaa <_dtoa_r+0x402>
 801cef2:	4621      	mov	r1, r4
 801cef4:	465b      	mov	r3, fp
 801cef6:	2205      	movs	r2, #5
 801cef8:	4648      	mov	r0, r9
 801cefa:	f000 f9df 	bl	801d2bc <__multadd>
 801cefe:	4601      	mov	r1, r0
 801cf00:	4604      	mov	r4, r0
 801cf02:	9801      	ldr	r0, [sp, #4]
 801cf04:	f000 fbea 	bl	801d6dc <__mcmp>
 801cf08:	2800      	cmp	r0, #0
 801cf0a:	f77f adce 	ble.w	801caaa <_dtoa_r+0x402>
 801cf0e:	463e      	mov	r6, r7
 801cf10:	2331      	movs	r3, #49	@ 0x31
 801cf12:	f806 3b01 	strb.w	r3, [r6], #1
 801cf16:	9b05      	ldr	r3, [sp, #20]
 801cf18:	3301      	adds	r3, #1
 801cf1a:	9305      	str	r3, [sp, #20]
 801cf1c:	e5c9      	b.n	801cab2 <_dtoa_r+0x40a>
 801cf1e:	f8cd 8014 	str.w	r8, [sp, #20]
 801cf22:	4654      	mov	r4, sl
 801cf24:	4625      	mov	r5, r4
 801cf26:	e7f2      	b.n	801cf0e <_dtoa_r+0x866>
 801cf28:	9b08      	ldr	r3, [sp, #32]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	f000 8102 	beq.w	801d134 <_dtoa_r+0xa8c>
 801cf30:	2e00      	cmp	r6, #0
 801cf32:	dd05      	ble.n	801cf40 <_dtoa_r+0x898>
 801cf34:	4629      	mov	r1, r5
 801cf36:	4632      	mov	r2, r6
 801cf38:	4648      	mov	r0, r9
 801cf3a:	f000 fb63 	bl	801d604 <__lshift>
 801cf3e:	4605      	mov	r5, r0
 801cf40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d058      	beq.n	801cff8 <_dtoa_r+0x950>
 801cf46:	6869      	ldr	r1, [r5, #4]
 801cf48:	4648      	mov	r0, r9
 801cf4a:	f000 f955 	bl	801d1f8 <_Balloc>
 801cf4e:	4606      	mov	r6, r0
 801cf50:	b928      	cbnz	r0, 801cf5e <_dtoa_r+0x8b6>
 801cf52:	4b82      	ldr	r3, [pc, #520]	@ (801d15c <_dtoa_r+0xab4>)
 801cf54:	4602      	mov	r2, r0
 801cf56:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801cf5a:	f7ff bbbe 	b.w	801c6da <_dtoa_r+0x32>
 801cf5e:	692a      	ldr	r2, [r5, #16]
 801cf60:	3202      	adds	r2, #2
 801cf62:	0092      	lsls	r2, r2, #2
 801cf64:	f105 010c 	add.w	r1, r5, #12
 801cf68:	300c      	adds	r0, #12
 801cf6a:	f7ff fb06 	bl	801c57a <memcpy>
 801cf6e:	2201      	movs	r2, #1
 801cf70:	4631      	mov	r1, r6
 801cf72:	4648      	mov	r0, r9
 801cf74:	f000 fb46 	bl	801d604 <__lshift>
 801cf78:	1c7b      	adds	r3, r7, #1
 801cf7a:	9304      	str	r3, [sp, #16]
 801cf7c:	eb07 030b 	add.w	r3, r7, fp
 801cf80:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf82:	9b02      	ldr	r3, [sp, #8]
 801cf84:	f003 0301 	and.w	r3, r3, #1
 801cf88:	46a8      	mov	r8, r5
 801cf8a:	9308      	str	r3, [sp, #32]
 801cf8c:	4605      	mov	r5, r0
 801cf8e:	9b04      	ldr	r3, [sp, #16]
 801cf90:	9801      	ldr	r0, [sp, #4]
 801cf92:	4621      	mov	r1, r4
 801cf94:	f103 3bff 	add.w	fp, r3, #4294967295
 801cf98:	f7ff fafd 	bl	801c596 <quorem>
 801cf9c:	4641      	mov	r1, r8
 801cf9e:	9002      	str	r0, [sp, #8]
 801cfa0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801cfa4:	9801      	ldr	r0, [sp, #4]
 801cfa6:	f000 fb99 	bl	801d6dc <__mcmp>
 801cfaa:	462a      	mov	r2, r5
 801cfac:	9006      	str	r0, [sp, #24]
 801cfae:	4621      	mov	r1, r4
 801cfb0:	4648      	mov	r0, r9
 801cfb2:	f000 fbaf 	bl	801d714 <__mdiff>
 801cfb6:	68c2      	ldr	r2, [r0, #12]
 801cfb8:	4606      	mov	r6, r0
 801cfba:	b9fa      	cbnz	r2, 801cffc <_dtoa_r+0x954>
 801cfbc:	4601      	mov	r1, r0
 801cfbe:	9801      	ldr	r0, [sp, #4]
 801cfc0:	f000 fb8c 	bl	801d6dc <__mcmp>
 801cfc4:	4602      	mov	r2, r0
 801cfc6:	4631      	mov	r1, r6
 801cfc8:	4648      	mov	r0, r9
 801cfca:	920a      	str	r2, [sp, #40]	@ 0x28
 801cfcc:	f000 f954 	bl	801d278 <_Bfree>
 801cfd0:	9b07      	ldr	r3, [sp, #28]
 801cfd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cfd4:	9e04      	ldr	r6, [sp, #16]
 801cfd6:	ea42 0103 	orr.w	r1, r2, r3
 801cfda:	9b08      	ldr	r3, [sp, #32]
 801cfdc:	4319      	orrs	r1, r3
 801cfde:	d10f      	bne.n	801d000 <_dtoa_r+0x958>
 801cfe0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801cfe4:	d028      	beq.n	801d038 <_dtoa_r+0x990>
 801cfe6:	9b06      	ldr	r3, [sp, #24]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	dd02      	ble.n	801cff2 <_dtoa_r+0x94a>
 801cfec:	9b02      	ldr	r3, [sp, #8]
 801cfee:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801cff2:	f88b a000 	strb.w	sl, [fp]
 801cff6:	e55e      	b.n	801cab6 <_dtoa_r+0x40e>
 801cff8:	4628      	mov	r0, r5
 801cffa:	e7bd      	b.n	801cf78 <_dtoa_r+0x8d0>
 801cffc:	2201      	movs	r2, #1
 801cffe:	e7e2      	b.n	801cfc6 <_dtoa_r+0x91e>
 801d000:	9b06      	ldr	r3, [sp, #24]
 801d002:	2b00      	cmp	r3, #0
 801d004:	db04      	blt.n	801d010 <_dtoa_r+0x968>
 801d006:	9907      	ldr	r1, [sp, #28]
 801d008:	430b      	orrs	r3, r1
 801d00a:	9908      	ldr	r1, [sp, #32]
 801d00c:	430b      	orrs	r3, r1
 801d00e:	d120      	bne.n	801d052 <_dtoa_r+0x9aa>
 801d010:	2a00      	cmp	r2, #0
 801d012:	ddee      	ble.n	801cff2 <_dtoa_r+0x94a>
 801d014:	9901      	ldr	r1, [sp, #4]
 801d016:	2201      	movs	r2, #1
 801d018:	4648      	mov	r0, r9
 801d01a:	f000 faf3 	bl	801d604 <__lshift>
 801d01e:	4621      	mov	r1, r4
 801d020:	9001      	str	r0, [sp, #4]
 801d022:	f000 fb5b 	bl	801d6dc <__mcmp>
 801d026:	2800      	cmp	r0, #0
 801d028:	dc03      	bgt.n	801d032 <_dtoa_r+0x98a>
 801d02a:	d1e2      	bne.n	801cff2 <_dtoa_r+0x94a>
 801d02c:	f01a 0f01 	tst.w	sl, #1
 801d030:	d0df      	beq.n	801cff2 <_dtoa_r+0x94a>
 801d032:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801d036:	d1d9      	bne.n	801cfec <_dtoa_r+0x944>
 801d038:	2339      	movs	r3, #57	@ 0x39
 801d03a:	f88b 3000 	strb.w	r3, [fp]
 801d03e:	4633      	mov	r3, r6
 801d040:	461e      	mov	r6, r3
 801d042:	3b01      	subs	r3, #1
 801d044:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d048:	2a39      	cmp	r2, #57	@ 0x39
 801d04a:	d052      	beq.n	801d0f2 <_dtoa_r+0xa4a>
 801d04c:	3201      	adds	r2, #1
 801d04e:	701a      	strb	r2, [r3, #0]
 801d050:	e531      	b.n	801cab6 <_dtoa_r+0x40e>
 801d052:	2a00      	cmp	r2, #0
 801d054:	dd07      	ble.n	801d066 <_dtoa_r+0x9be>
 801d056:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801d05a:	d0ed      	beq.n	801d038 <_dtoa_r+0x990>
 801d05c:	f10a 0301 	add.w	r3, sl, #1
 801d060:	f88b 3000 	strb.w	r3, [fp]
 801d064:	e527      	b.n	801cab6 <_dtoa_r+0x40e>
 801d066:	9b04      	ldr	r3, [sp, #16]
 801d068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d06a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801d06e:	4293      	cmp	r3, r2
 801d070:	d029      	beq.n	801d0c6 <_dtoa_r+0xa1e>
 801d072:	9901      	ldr	r1, [sp, #4]
 801d074:	2300      	movs	r3, #0
 801d076:	220a      	movs	r2, #10
 801d078:	4648      	mov	r0, r9
 801d07a:	f000 f91f 	bl	801d2bc <__multadd>
 801d07e:	45a8      	cmp	r8, r5
 801d080:	9001      	str	r0, [sp, #4]
 801d082:	f04f 0300 	mov.w	r3, #0
 801d086:	f04f 020a 	mov.w	r2, #10
 801d08a:	4641      	mov	r1, r8
 801d08c:	4648      	mov	r0, r9
 801d08e:	d107      	bne.n	801d0a0 <_dtoa_r+0x9f8>
 801d090:	f000 f914 	bl	801d2bc <__multadd>
 801d094:	4680      	mov	r8, r0
 801d096:	4605      	mov	r5, r0
 801d098:	9b04      	ldr	r3, [sp, #16]
 801d09a:	3301      	adds	r3, #1
 801d09c:	9304      	str	r3, [sp, #16]
 801d09e:	e776      	b.n	801cf8e <_dtoa_r+0x8e6>
 801d0a0:	f000 f90c 	bl	801d2bc <__multadd>
 801d0a4:	4629      	mov	r1, r5
 801d0a6:	4680      	mov	r8, r0
 801d0a8:	2300      	movs	r3, #0
 801d0aa:	220a      	movs	r2, #10
 801d0ac:	4648      	mov	r0, r9
 801d0ae:	f000 f905 	bl	801d2bc <__multadd>
 801d0b2:	4605      	mov	r5, r0
 801d0b4:	e7f0      	b.n	801d098 <_dtoa_r+0x9f0>
 801d0b6:	f1bb 0f00 	cmp.w	fp, #0
 801d0ba:	bfcc      	ite	gt
 801d0bc:	465e      	movgt	r6, fp
 801d0be:	2601      	movle	r6, #1
 801d0c0:	443e      	add	r6, r7
 801d0c2:	f04f 0800 	mov.w	r8, #0
 801d0c6:	9901      	ldr	r1, [sp, #4]
 801d0c8:	2201      	movs	r2, #1
 801d0ca:	4648      	mov	r0, r9
 801d0cc:	f000 fa9a 	bl	801d604 <__lshift>
 801d0d0:	4621      	mov	r1, r4
 801d0d2:	9001      	str	r0, [sp, #4]
 801d0d4:	f000 fb02 	bl	801d6dc <__mcmp>
 801d0d8:	2800      	cmp	r0, #0
 801d0da:	dcb0      	bgt.n	801d03e <_dtoa_r+0x996>
 801d0dc:	d102      	bne.n	801d0e4 <_dtoa_r+0xa3c>
 801d0de:	f01a 0f01 	tst.w	sl, #1
 801d0e2:	d1ac      	bne.n	801d03e <_dtoa_r+0x996>
 801d0e4:	4633      	mov	r3, r6
 801d0e6:	461e      	mov	r6, r3
 801d0e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d0ec:	2a30      	cmp	r2, #48	@ 0x30
 801d0ee:	d0fa      	beq.n	801d0e6 <_dtoa_r+0xa3e>
 801d0f0:	e4e1      	b.n	801cab6 <_dtoa_r+0x40e>
 801d0f2:	429f      	cmp	r7, r3
 801d0f4:	d1a4      	bne.n	801d040 <_dtoa_r+0x998>
 801d0f6:	9b05      	ldr	r3, [sp, #20]
 801d0f8:	3301      	adds	r3, #1
 801d0fa:	9305      	str	r3, [sp, #20]
 801d0fc:	2331      	movs	r3, #49	@ 0x31
 801d0fe:	703b      	strb	r3, [r7, #0]
 801d100:	e4d9      	b.n	801cab6 <_dtoa_r+0x40e>
 801d102:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d104:	4f16      	ldr	r7, [pc, #88]	@ (801d160 <_dtoa_r+0xab8>)
 801d106:	b11b      	cbz	r3, 801d110 <_dtoa_r+0xa68>
 801d108:	f107 0308 	add.w	r3, r7, #8
 801d10c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801d10e:	6013      	str	r3, [r2, #0]
 801d110:	4638      	mov	r0, r7
 801d112:	b011      	add	sp, #68	@ 0x44
 801d114:	ecbd 8b02 	vpop	{d8}
 801d118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d11c:	9b07      	ldr	r3, [sp, #28]
 801d11e:	2b01      	cmp	r3, #1
 801d120:	f77f ae2c 	ble.w	801cd7c <_dtoa_r+0x6d4>
 801d124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d126:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d128:	2001      	movs	r0, #1
 801d12a:	e64c      	b.n	801cdc6 <_dtoa_r+0x71e>
 801d12c:	f1bb 0f00 	cmp.w	fp, #0
 801d130:	f77f aed8 	ble.w	801cee4 <_dtoa_r+0x83c>
 801d134:	463e      	mov	r6, r7
 801d136:	9801      	ldr	r0, [sp, #4]
 801d138:	4621      	mov	r1, r4
 801d13a:	f7ff fa2c 	bl	801c596 <quorem>
 801d13e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801d142:	f806 ab01 	strb.w	sl, [r6], #1
 801d146:	1bf2      	subs	r2, r6, r7
 801d148:	4593      	cmp	fp, r2
 801d14a:	ddb4      	ble.n	801d0b6 <_dtoa_r+0xa0e>
 801d14c:	9901      	ldr	r1, [sp, #4]
 801d14e:	2300      	movs	r3, #0
 801d150:	220a      	movs	r2, #10
 801d152:	4648      	mov	r0, r9
 801d154:	f000 f8b2 	bl	801d2bc <__multadd>
 801d158:	9001      	str	r0, [sp, #4]
 801d15a:	e7ec      	b.n	801d136 <_dtoa_r+0xa8e>
 801d15c:	0801f308 	.word	0x0801f308
 801d160:	0801f28c 	.word	0x0801f28c

0801d164 <_free_r>:
 801d164:	b538      	push	{r3, r4, r5, lr}
 801d166:	4605      	mov	r5, r0
 801d168:	2900      	cmp	r1, #0
 801d16a:	d041      	beq.n	801d1f0 <_free_r+0x8c>
 801d16c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d170:	1f0c      	subs	r4, r1, #4
 801d172:	2b00      	cmp	r3, #0
 801d174:	bfb8      	it	lt
 801d176:	18e4      	addlt	r4, r4, r3
 801d178:	f7fe fc00 	bl	801b97c <__malloc_lock>
 801d17c:	4a1d      	ldr	r2, [pc, #116]	@ (801d1f4 <_free_r+0x90>)
 801d17e:	6813      	ldr	r3, [r2, #0]
 801d180:	b933      	cbnz	r3, 801d190 <_free_r+0x2c>
 801d182:	6063      	str	r3, [r4, #4]
 801d184:	6014      	str	r4, [r2, #0]
 801d186:	4628      	mov	r0, r5
 801d188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d18c:	f7fe bbfc 	b.w	801b988 <__malloc_unlock>
 801d190:	42a3      	cmp	r3, r4
 801d192:	d908      	bls.n	801d1a6 <_free_r+0x42>
 801d194:	6820      	ldr	r0, [r4, #0]
 801d196:	1821      	adds	r1, r4, r0
 801d198:	428b      	cmp	r3, r1
 801d19a:	bf01      	itttt	eq
 801d19c:	6819      	ldreq	r1, [r3, #0]
 801d19e:	685b      	ldreq	r3, [r3, #4]
 801d1a0:	1809      	addeq	r1, r1, r0
 801d1a2:	6021      	streq	r1, [r4, #0]
 801d1a4:	e7ed      	b.n	801d182 <_free_r+0x1e>
 801d1a6:	461a      	mov	r2, r3
 801d1a8:	685b      	ldr	r3, [r3, #4]
 801d1aa:	b10b      	cbz	r3, 801d1b0 <_free_r+0x4c>
 801d1ac:	42a3      	cmp	r3, r4
 801d1ae:	d9fa      	bls.n	801d1a6 <_free_r+0x42>
 801d1b0:	6811      	ldr	r1, [r2, #0]
 801d1b2:	1850      	adds	r0, r2, r1
 801d1b4:	42a0      	cmp	r0, r4
 801d1b6:	d10b      	bne.n	801d1d0 <_free_r+0x6c>
 801d1b8:	6820      	ldr	r0, [r4, #0]
 801d1ba:	4401      	add	r1, r0
 801d1bc:	1850      	adds	r0, r2, r1
 801d1be:	4283      	cmp	r3, r0
 801d1c0:	6011      	str	r1, [r2, #0]
 801d1c2:	d1e0      	bne.n	801d186 <_free_r+0x22>
 801d1c4:	6818      	ldr	r0, [r3, #0]
 801d1c6:	685b      	ldr	r3, [r3, #4]
 801d1c8:	6053      	str	r3, [r2, #4]
 801d1ca:	4408      	add	r0, r1
 801d1cc:	6010      	str	r0, [r2, #0]
 801d1ce:	e7da      	b.n	801d186 <_free_r+0x22>
 801d1d0:	d902      	bls.n	801d1d8 <_free_r+0x74>
 801d1d2:	230c      	movs	r3, #12
 801d1d4:	602b      	str	r3, [r5, #0]
 801d1d6:	e7d6      	b.n	801d186 <_free_r+0x22>
 801d1d8:	6820      	ldr	r0, [r4, #0]
 801d1da:	1821      	adds	r1, r4, r0
 801d1dc:	428b      	cmp	r3, r1
 801d1de:	bf04      	itt	eq
 801d1e0:	6819      	ldreq	r1, [r3, #0]
 801d1e2:	685b      	ldreq	r3, [r3, #4]
 801d1e4:	6063      	str	r3, [r4, #4]
 801d1e6:	bf04      	itt	eq
 801d1e8:	1809      	addeq	r1, r1, r0
 801d1ea:	6021      	streq	r1, [r4, #0]
 801d1ec:	6054      	str	r4, [r2, #4]
 801d1ee:	e7ca      	b.n	801d186 <_free_r+0x22>
 801d1f0:	bd38      	pop	{r3, r4, r5, pc}
 801d1f2:	bf00      	nop
 801d1f4:	24048eac 	.word	0x24048eac

0801d1f8 <_Balloc>:
 801d1f8:	b570      	push	{r4, r5, r6, lr}
 801d1fa:	69c6      	ldr	r6, [r0, #28]
 801d1fc:	4604      	mov	r4, r0
 801d1fe:	460d      	mov	r5, r1
 801d200:	b976      	cbnz	r6, 801d220 <_Balloc+0x28>
 801d202:	2010      	movs	r0, #16
 801d204:	f7fe fb10 	bl	801b828 <malloc>
 801d208:	4602      	mov	r2, r0
 801d20a:	61e0      	str	r0, [r4, #28]
 801d20c:	b920      	cbnz	r0, 801d218 <_Balloc+0x20>
 801d20e:	4b18      	ldr	r3, [pc, #96]	@ (801d270 <_Balloc+0x78>)
 801d210:	4818      	ldr	r0, [pc, #96]	@ (801d274 <_Balloc+0x7c>)
 801d212:	216b      	movs	r1, #107	@ 0x6b
 801d214:	f000 fd88 	bl	801dd28 <__assert_func>
 801d218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d21c:	6006      	str	r6, [r0, #0]
 801d21e:	60c6      	str	r6, [r0, #12]
 801d220:	69e6      	ldr	r6, [r4, #28]
 801d222:	68f3      	ldr	r3, [r6, #12]
 801d224:	b183      	cbz	r3, 801d248 <_Balloc+0x50>
 801d226:	69e3      	ldr	r3, [r4, #28]
 801d228:	68db      	ldr	r3, [r3, #12]
 801d22a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d22e:	b9b8      	cbnz	r0, 801d260 <_Balloc+0x68>
 801d230:	2101      	movs	r1, #1
 801d232:	fa01 f605 	lsl.w	r6, r1, r5
 801d236:	1d72      	adds	r2, r6, #5
 801d238:	0092      	lsls	r2, r2, #2
 801d23a:	4620      	mov	r0, r4
 801d23c:	f000 fd92 	bl	801dd64 <_calloc_r>
 801d240:	b160      	cbz	r0, 801d25c <_Balloc+0x64>
 801d242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d246:	e00e      	b.n	801d266 <_Balloc+0x6e>
 801d248:	2221      	movs	r2, #33	@ 0x21
 801d24a:	2104      	movs	r1, #4
 801d24c:	4620      	mov	r0, r4
 801d24e:	f000 fd89 	bl	801dd64 <_calloc_r>
 801d252:	69e3      	ldr	r3, [r4, #28]
 801d254:	60f0      	str	r0, [r6, #12]
 801d256:	68db      	ldr	r3, [r3, #12]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d1e4      	bne.n	801d226 <_Balloc+0x2e>
 801d25c:	2000      	movs	r0, #0
 801d25e:	bd70      	pop	{r4, r5, r6, pc}
 801d260:	6802      	ldr	r2, [r0, #0]
 801d262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d266:	2300      	movs	r3, #0
 801d268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d26c:	e7f7      	b.n	801d25e <_Balloc+0x66>
 801d26e:	bf00      	nop
 801d270:	0801f299 	.word	0x0801f299
 801d274:	0801f319 	.word	0x0801f319

0801d278 <_Bfree>:
 801d278:	b570      	push	{r4, r5, r6, lr}
 801d27a:	69c6      	ldr	r6, [r0, #28]
 801d27c:	4605      	mov	r5, r0
 801d27e:	460c      	mov	r4, r1
 801d280:	b976      	cbnz	r6, 801d2a0 <_Bfree+0x28>
 801d282:	2010      	movs	r0, #16
 801d284:	f7fe fad0 	bl	801b828 <malloc>
 801d288:	4602      	mov	r2, r0
 801d28a:	61e8      	str	r0, [r5, #28]
 801d28c:	b920      	cbnz	r0, 801d298 <_Bfree+0x20>
 801d28e:	4b09      	ldr	r3, [pc, #36]	@ (801d2b4 <_Bfree+0x3c>)
 801d290:	4809      	ldr	r0, [pc, #36]	@ (801d2b8 <_Bfree+0x40>)
 801d292:	218f      	movs	r1, #143	@ 0x8f
 801d294:	f000 fd48 	bl	801dd28 <__assert_func>
 801d298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d29c:	6006      	str	r6, [r0, #0]
 801d29e:	60c6      	str	r6, [r0, #12]
 801d2a0:	b13c      	cbz	r4, 801d2b2 <_Bfree+0x3a>
 801d2a2:	69eb      	ldr	r3, [r5, #28]
 801d2a4:	6862      	ldr	r2, [r4, #4]
 801d2a6:	68db      	ldr	r3, [r3, #12]
 801d2a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d2ac:	6021      	str	r1, [r4, #0]
 801d2ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d2b2:	bd70      	pop	{r4, r5, r6, pc}
 801d2b4:	0801f299 	.word	0x0801f299
 801d2b8:	0801f319 	.word	0x0801f319

0801d2bc <__multadd>:
 801d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2c0:	690d      	ldr	r5, [r1, #16]
 801d2c2:	4607      	mov	r7, r0
 801d2c4:	460c      	mov	r4, r1
 801d2c6:	461e      	mov	r6, r3
 801d2c8:	f101 0c14 	add.w	ip, r1, #20
 801d2cc:	2000      	movs	r0, #0
 801d2ce:	f8dc 3000 	ldr.w	r3, [ip]
 801d2d2:	b299      	uxth	r1, r3
 801d2d4:	fb02 6101 	mla	r1, r2, r1, r6
 801d2d8:	0c1e      	lsrs	r6, r3, #16
 801d2da:	0c0b      	lsrs	r3, r1, #16
 801d2dc:	fb02 3306 	mla	r3, r2, r6, r3
 801d2e0:	b289      	uxth	r1, r1
 801d2e2:	3001      	adds	r0, #1
 801d2e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d2e8:	4285      	cmp	r5, r0
 801d2ea:	f84c 1b04 	str.w	r1, [ip], #4
 801d2ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d2f2:	dcec      	bgt.n	801d2ce <__multadd+0x12>
 801d2f4:	b30e      	cbz	r6, 801d33a <__multadd+0x7e>
 801d2f6:	68a3      	ldr	r3, [r4, #8]
 801d2f8:	42ab      	cmp	r3, r5
 801d2fa:	dc19      	bgt.n	801d330 <__multadd+0x74>
 801d2fc:	6861      	ldr	r1, [r4, #4]
 801d2fe:	4638      	mov	r0, r7
 801d300:	3101      	adds	r1, #1
 801d302:	f7ff ff79 	bl	801d1f8 <_Balloc>
 801d306:	4680      	mov	r8, r0
 801d308:	b928      	cbnz	r0, 801d316 <__multadd+0x5a>
 801d30a:	4602      	mov	r2, r0
 801d30c:	4b0c      	ldr	r3, [pc, #48]	@ (801d340 <__multadd+0x84>)
 801d30e:	480d      	ldr	r0, [pc, #52]	@ (801d344 <__multadd+0x88>)
 801d310:	21ba      	movs	r1, #186	@ 0xba
 801d312:	f000 fd09 	bl	801dd28 <__assert_func>
 801d316:	6922      	ldr	r2, [r4, #16]
 801d318:	3202      	adds	r2, #2
 801d31a:	f104 010c 	add.w	r1, r4, #12
 801d31e:	0092      	lsls	r2, r2, #2
 801d320:	300c      	adds	r0, #12
 801d322:	f7ff f92a 	bl	801c57a <memcpy>
 801d326:	4621      	mov	r1, r4
 801d328:	4638      	mov	r0, r7
 801d32a:	f7ff ffa5 	bl	801d278 <_Bfree>
 801d32e:	4644      	mov	r4, r8
 801d330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d334:	3501      	adds	r5, #1
 801d336:	615e      	str	r6, [r3, #20]
 801d338:	6125      	str	r5, [r4, #16]
 801d33a:	4620      	mov	r0, r4
 801d33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d340:	0801f308 	.word	0x0801f308
 801d344:	0801f319 	.word	0x0801f319

0801d348 <__hi0bits>:
 801d348:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d34c:	4603      	mov	r3, r0
 801d34e:	bf36      	itet	cc
 801d350:	0403      	lslcc	r3, r0, #16
 801d352:	2000      	movcs	r0, #0
 801d354:	2010      	movcc	r0, #16
 801d356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d35a:	bf3c      	itt	cc
 801d35c:	021b      	lslcc	r3, r3, #8
 801d35e:	3008      	addcc	r0, #8
 801d360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d364:	bf3c      	itt	cc
 801d366:	011b      	lslcc	r3, r3, #4
 801d368:	3004      	addcc	r0, #4
 801d36a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d36e:	bf3c      	itt	cc
 801d370:	009b      	lslcc	r3, r3, #2
 801d372:	3002      	addcc	r0, #2
 801d374:	2b00      	cmp	r3, #0
 801d376:	db05      	blt.n	801d384 <__hi0bits+0x3c>
 801d378:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d37c:	f100 0001 	add.w	r0, r0, #1
 801d380:	bf08      	it	eq
 801d382:	2020      	moveq	r0, #32
 801d384:	4770      	bx	lr

0801d386 <__lo0bits>:
 801d386:	6803      	ldr	r3, [r0, #0]
 801d388:	4602      	mov	r2, r0
 801d38a:	f013 0007 	ands.w	r0, r3, #7
 801d38e:	d00b      	beq.n	801d3a8 <__lo0bits+0x22>
 801d390:	07d9      	lsls	r1, r3, #31
 801d392:	d421      	bmi.n	801d3d8 <__lo0bits+0x52>
 801d394:	0798      	lsls	r0, r3, #30
 801d396:	bf49      	itett	mi
 801d398:	085b      	lsrmi	r3, r3, #1
 801d39a:	089b      	lsrpl	r3, r3, #2
 801d39c:	2001      	movmi	r0, #1
 801d39e:	6013      	strmi	r3, [r2, #0]
 801d3a0:	bf5c      	itt	pl
 801d3a2:	6013      	strpl	r3, [r2, #0]
 801d3a4:	2002      	movpl	r0, #2
 801d3a6:	4770      	bx	lr
 801d3a8:	b299      	uxth	r1, r3
 801d3aa:	b909      	cbnz	r1, 801d3b0 <__lo0bits+0x2a>
 801d3ac:	0c1b      	lsrs	r3, r3, #16
 801d3ae:	2010      	movs	r0, #16
 801d3b0:	b2d9      	uxtb	r1, r3
 801d3b2:	b909      	cbnz	r1, 801d3b8 <__lo0bits+0x32>
 801d3b4:	3008      	adds	r0, #8
 801d3b6:	0a1b      	lsrs	r3, r3, #8
 801d3b8:	0719      	lsls	r1, r3, #28
 801d3ba:	bf04      	itt	eq
 801d3bc:	091b      	lsreq	r3, r3, #4
 801d3be:	3004      	addeq	r0, #4
 801d3c0:	0799      	lsls	r1, r3, #30
 801d3c2:	bf04      	itt	eq
 801d3c4:	089b      	lsreq	r3, r3, #2
 801d3c6:	3002      	addeq	r0, #2
 801d3c8:	07d9      	lsls	r1, r3, #31
 801d3ca:	d403      	bmi.n	801d3d4 <__lo0bits+0x4e>
 801d3cc:	085b      	lsrs	r3, r3, #1
 801d3ce:	f100 0001 	add.w	r0, r0, #1
 801d3d2:	d003      	beq.n	801d3dc <__lo0bits+0x56>
 801d3d4:	6013      	str	r3, [r2, #0]
 801d3d6:	4770      	bx	lr
 801d3d8:	2000      	movs	r0, #0
 801d3da:	4770      	bx	lr
 801d3dc:	2020      	movs	r0, #32
 801d3de:	4770      	bx	lr

0801d3e0 <__i2b>:
 801d3e0:	b510      	push	{r4, lr}
 801d3e2:	460c      	mov	r4, r1
 801d3e4:	2101      	movs	r1, #1
 801d3e6:	f7ff ff07 	bl	801d1f8 <_Balloc>
 801d3ea:	4602      	mov	r2, r0
 801d3ec:	b928      	cbnz	r0, 801d3fa <__i2b+0x1a>
 801d3ee:	4b05      	ldr	r3, [pc, #20]	@ (801d404 <__i2b+0x24>)
 801d3f0:	4805      	ldr	r0, [pc, #20]	@ (801d408 <__i2b+0x28>)
 801d3f2:	f240 1145 	movw	r1, #325	@ 0x145
 801d3f6:	f000 fc97 	bl	801dd28 <__assert_func>
 801d3fa:	2301      	movs	r3, #1
 801d3fc:	6144      	str	r4, [r0, #20]
 801d3fe:	6103      	str	r3, [r0, #16]
 801d400:	bd10      	pop	{r4, pc}
 801d402:	bf00      	nop
 801d404:	0801f308 	.word	0x0801f308
 801d408:	0801f319 	.word	0x0801f319

0801d40c <__multiply>:
 801d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d410:	4617      	mov	r7, r2
 801d412:	690a      	ldr	r2, [r1, #16]
 801d414:	693b      	ldr	r3, [r7, #16]
 801d416:	429a      	cmp	r2, r3
 801d418:	bfa8      	it	ge
 801d41a:	463b      	movge	r3, r7
 801d41c:	4689      	mov	r9, r1
 801d41e:	bfa4      	itt	ge
 801d420:	460f      	movge	r7, r1
 801d422:	4699      	movge	r9, r3
 801d424:	693d      	ldr	r5, [r7, #16]
 801d426:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d42a:	68bb      	ldr	r3, [r7, #8]
 801d42c:	6879      	ldr	r1, [r7, #4]
 801d42e:	eb05 060a 	add.w	r6, r5, sl
 801d432:	42b3      	cmp	r3, r6
 801d434:	b085      	sub	sp, #20
 801d436:	bfb8      	it	lt
 801d438:	3101      	addlt	r1, #1
 801d43a:	f7ff fedd 	bl	801d1f8 <_Balloc>
 801d43e:	b930      	cbnz	r0, 801d44e <__multiply+0x42>
 801d440:	4602      	mov	r2, r0
 801d442:	4b41      	ldr	r3, [pc, #260]	@ (801d548 <__multiply+0x13c>)
 801d444:	4841      	ldr	r0, [pc, #260]	@ (801d54c <__multiply+0x140>)
 801d446:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d44a:	f000 fc6d 	bl	801dd28 <__assert_func>
 801d44e:	f100 0414 	add.w	r4, r0, #20
 801d452:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d456:	4623      	mov	r3, r4
 801d458:	2200      	movs	r2, #0
 801d45a:	4573      	cmp	r3, lr
 801d45c:	d320      	bcc.n	801d4a0 <__multiply+0x94>
 801d45e:	f107 0814 	add.w	r8, r7, #20
 801d462:	f109 0114 	add.w	r1, r9, #20
 801d466:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d46a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d46e:	9302      	str	r3, [sp, #8]
 801d470:	1beb      	subs	r3, r5, r7
 801d472:	3b15      	subs	r3, #21
 801d474:	f023 0303 	bic.w	r3, r3, #3
 801d478:	3304      	adds	r3, #4
 801d47a:	3715      	adds	r7, #21
 801d47c:	42bd      	cmp	r5, r7
 801d47e:	bf38      	it	cc
 801d480:	2304      	movcc	r3, #4
 801d482:	9301      	str	r3, [sp, #4]
 801d484:	9b02      	ldr	r3, [sp, #8]
 801d486:	9103      	str	r1, [sp, #12]
 801d488:	428b      	cmp	r3, r1
 801d48a:	d80c      	bhi.n	801d4a6 <__multiply+0x9a>
 801d48c:	2e00      	cmp	r6, #0
 801d48e:	dd03      	ble.n	801d498 <__multiply+0x8c>
 801d490:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d494:	2b00      	cmp	r3, #0
 801d496:	d055      	beq.n	801d544 <__multiply+0x138>
 801d498:	6106      	str	r6, [r0, #16]
 801d49a:	b005      	add	sp, #20
 801d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4a0:	f843 2b04 	str.w	r2, [r3], #4
 801d4a4:	e7d9      	b.n	801d45a <__multiply+0x4e>
 801d4a6:	f8b1 a000 	ldrh.w	sl, [r1]
 801d4aa:	f1ba 0f00 	cmp.w	sl, #0
 801d4ae:	d01f      	beq.n	801d4f0 <__multiply+0xe4>
 801d4b0:	46c4      	mov	ip, r8
 801d4b2:	46a1      	mov	r9, r4
 801d4b4:	2700      	movs	r7, #0
 801d4b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d4ba:	f8d9 3000 	ldr.w	r3, [r9]
 801d4be:	fa1f fb82 	uxth.w	fp, r2
 801d4c2:	b29b      	uxth	r3, r3
 801d4c4:	fb0a 330b 	mla	r3, sl, fp, r3
 801d4c8:	443b      	add	r3, r7
 801d4ca:	f8d9 7000 	ldr.w	r7, [r9]
 801d4ce:	0c12      	lsrs	r2, r2, #16
 801d4d0:	0c3f      	lsrs	r7, r7, #16
 801d4d2:	fb0a 7202 	mla	r2, sl, r2, r7
 801d4d6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801d4da:	b29b      	uxth	r3, r3
 801d4dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d4e0:	4565      	cmp	r5, ip
 801d4e2:	f849 3b04 	str.w	r3, [r9], #4
 801d4e6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801d4ea:	d8e4      	bhi.n	801d4b6 <__multiply+0xaa>
 801d4ec:	9b01      	ldr	r3, [sp, #4]
 801d4ee:	50e7      	str	r7, [r4, r3]
 801d4f0:	9b03      	ldr	r3, [sp, #12]
 801d4f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d4f6:	3104      	adds	r1, #4
 801d4f8:	f1b9 0f00 	cmp.w	r9, #0
 801d4fc:	d020      	beq.n	801d540 <__multiply+0x134>
 801d4fe:	6823      	ldr	r3, [r4, #0]
 801d500:	4647      	mov	r7, r8
 801d502:	46a4      	mov	ip, r4
 801d504:	f04f 0a00 	mov.w	sl, #0
 801d508:	f8b7 b000 	ldrh.w	fp, [r7]
 801d50c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801d510:	fb09 220b 	mla	r2, r9, fp, r2
 801d514:	4452      	add	r2, sl
 801d516:	b29b      	uxth	r3, r3
 801d518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d51c:	f84c 3b04 	str.w	r3, [ip], #4
 801d520:	f857 3b04 	ldr.w	r3, [r7], #4
 801d524:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d528:	f8bc 3000 	ldrh.w	r3, [ip]
 801d52c:	fb09 330a 	mla	r3, r9, sl, r3
 801d530:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801d534:	42bd      	cmp	r5, r7
 801d536:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d53a:	d8e5      	bhi.n	801d508 <__multiply+0xfc>
 801d53c:	9a01      	ldr	r2, [sp, #4]
 801d53e:	50a3      	str	r3, [r4, r2]
 801d540:	3404      	adds	r4, #4
 801d542:	e79f      	b.n	801d484 <__multiply+0x78>
 801d544:	3e01      	subs	r6, #1
 801d546:	e7a1      	b.n	801d48c <__multiply+0x80>
 801d548:	0801f308 	.word	0x0801f308
 801d54c:	0801f319 	.word	0x0801f319

0801d550 <__pow5mult>:
 801d550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d554:	4615      	mov	r5, r2
 801d556:	f012 0203 	ands.w	r2, r2, #3
 801d55a:	4607      	mov	r7, r0
 801d55c:	460e      	mov	r6, r1
 801d55e:	d007      	beq.n	801d570 <__pow5mult+0x20>
 801d560:	4c25      	ldr	r4, [pc, #148]	@ (801d5f8 <__pow5mult+0xa8>)
 801d562:	3a01      	subs	r2, #1
 801d564:	2300      	movs	r3, #0
 801d566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d56a:	f7ff fea7 	bl	801d2bc <__multadd>
 801d56e:	4606      	mov	r6, r0
 801d570:	10ad      	asrs	r5, r5, #2
 801d572:	d03d      	beq.n	801d5f0 <__pow5mult+0xa0>
 801d574:	69fc      	ldr	r4, [r7, #28]
 801d576:	b97c      	cbnz	r4, 801d598 <__pow5mult+0x48>
 801d578:	2010      	movs	r0, #16
 801d57a:	f7fe f955 	bl	801b828 <malloc>
 801d57e:	4602      	mov	r2, r0
 801d580:	61f8      	str	r0, [r7, #28]
 801d582:	b928      	cbnz	r0, 801d590 <__pow5mult+0x40>
 801d584:	4b1d      	ldr	r3, [pc, #116]	@ (801d5fc <__pow5mult+0xac>)
 801d586:	481e      	ldr	r0, [pc, #120]	@ (801d600 <__pow5mult+0xb0>)
 801d588:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d58c:	f000 fbcc 	bl	801dd28 <__assert_func>
 801d590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d594:	6004      	str	r4, [r0, #0]
 801d596:	60c4      	str	r4, [r0, #12]
 801d598:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d59c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d5a0:	b94c      	cbnz	r4, 801d5b6 <__pow5mult+0x66>
 801d5a2:	f240 2171 	movw	r1, #625	@ 0x271
 801d5a6:	4638      	mov	r0, r7
 801d5a8:	f7ff ff1a 	bl	801d3e0 <__i2b>
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	f8c8 0008 	str.w	r0, [r8, #8]
 801d5b2:	4604      	mov	r4, r0
 801d5b4:	6003      	str	r3, [r0, #0]
 801d5b6:	f04f 0900 	mov.w	r9, #0
 801d5ba:	07eb      	lsls	r3, r5, #31
 801d5bc:	d50a      	bpl.n	801d5d4 <__pow5mult+0x84>
 801d5be:	4631      	mov	r1, r6
 801d5c0:	4622      	mov	r2, r4
 801d5c2:	4638      	mov	r0, r7
 801d5c4:	f7ff ff22 	bl	801d40c <__multiply>
 801d5c8:	4631      	mov	r1, r6
 801d5ca:	4680      	mov	r8, r0
 801d5cc:	4638      	mov	r0, r7
 801d5ce:	f7ff fe53 	bl	801d278 <_Bfree>
 801d5d2:	4646      	mov	r6, r8
 801d5d4:	106d      	asrs	r5, r5, #1
 801d5d6:	d00b      	beq.n	801d5f0 <__pow5mult+0xa0>
 801d5d8:	6820      	ldr	r0, [r4, #0]
 801d5da:	b938      	cbnz	r0, 801d5ec <__pow5mult+0x9c>
 801d5dc:	4622      	mov	r2, r4
 801d5de:	4621      	mov	r1, r4
 801d5e0:	4638      	mov	r0, r7
 801d5e2:	f7ff ff13 	bl	801d40c <__multiply>
 801d5e6:	6020      	str	r0, [r4, #0]
 801d5e8:	f8c0 9000 	str.w	r9, [r0]
 801d5ec:	4604      	mov	r4, r0
 801d5ee:	e7e4      	b.n	801d5ba <__pow5mult+0x6a>
 801d5f0:	4630      	mov	r0, r6
 801d5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5f6:	bf00      	nop
 801d5f8:	0801f3cc 	.word	0x0801f3cc
 801d5fc:	0801f299 	.word	0x0801f299
 801d600:	0801f319 	.word	0x0801f319

0801d604 <__lshift>:
 801d604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d608:	460c      	mov	r4, r1
 801d60a:	6849      	ldr	r1, [r1, #4]
 801d60c:	6923      	ldr	r3, [r4, #16]
 801d60e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d612:	68a3      	ldr	r3, [r4, #8]
 801d614:	4607      	mov	r7, r0
 801d616:	4691      	mov	r9, r2
 801d618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d61c:	f108 0601 	add.w	r6, r8, #1
 801d620:	42b3      	cmp	r3, r6
 801d622:	db0b      	blt.n	801d63c <__lshift+0x38>
 801d624:	4638      	mov	r0, r7
 801d626:	f7ff fde7 	bl	801d1f8 <_Balloc>
 801d62a:	4605      	mov	r5, r0
 801d62c:	b948      	cbnz	r0, 801d642 <__lshift+0x3e>
 801d62e:	4602      	mov	r2, r0
 801d630:	4b28      	ldr	r3, [pc, #160]	@ (801d6d4 <__lshift+0xd0>)
 801d632:	4829      	ldr	r0, [pc, #164]	@ (801d6d8 <__lshift+0xd4>)
 801d634:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d638:	f000 fb76 	bl	801dd28 <__assert_func>
 801d63c:	3101      	adds	r1, #1
 801d63e:	005b      	lsls	r3, r3, #1
 801d640:	e7ee      	b.n	801d620 <__lshift+0x1c>
 801d642:	2300      	movs	r3, #0
 801d644:	f100 0114 	add.w	r1, r0, #20
 801d648:	f100 0210 	add.w	r2, r0, #16
 801d64c:	4618      	mov	r0, r3
 801d64e:	4553      	cmp	r3, sl
 801d650:	db33      	blt.n	801d6ba <__lshift+0xb6>
 801d652:	6920      	ldr	r0, [r4, #16]
 801d654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d658:	f104 0314 	add.w	r3, r4, #20
 801d65c:	f019 091f 	ands.w	r9, r9, #31
 801d660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d664:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d668:	d02b      	beq.n	801d6c2 <__lshift+0xbe>
 801d66a:	f1c9 0e20 	rsb	lr, r9, #32
 801d66e:	468a      	mov	sl, r1
 801d670:	2200      	movs	r2, #0
 801d672:	6818      	ldr	r0, [r3, #0]
 801d674:	fa00 f009 	lsl.w	r0, r0, r9
 801d678:	4310      	orrs	r0, r2
 801d67a:	f84a 0b04 	str.w	r0, [sl], #4
 801d67e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d682:	459c      	cmp	ip, r3
 801d684:	fa22 f20e 	lsr.w	r2, r2, lr
 801d688:	d8f3      	bhi.n	801d672 <__lshift+0x6e>
 801d68a:	ebac 0304 	sub.w	r3, ip, r4
 801d68e:	3b15      	subs	r3, #21
 801d690:	f023 0303 	bic.w	r3, r3, #3
 801d694:	3304      	adds	r3, #4
 801d696:	f104 0015 	add.w	r0, r4, #21
 801d69a:	4560      	cmp	r0, ip
 801d69c:	bf88      	it	hi
 801d69e:	2304      	movhi	r3, #4
 801d6a0:	50ca      	str	r2, [r1, r3]
 801d6a2:	b10a      	cbz	r2, 801d6a8 <__lshift+0xa4>
 801d6a4:	f108 0602 	add.w	r6, r8, #2
 801d6a8:	3e01      	subs	r6, #1
 801d6aa:	4638      	mov	r0, r7
 801d6ac:	612e      	str	r6, [r5, #16]
 801d6ae:	4621      	mov	r1, r4
 801d6b0:	f7ff fde2 	bl	801d278 <_Bfree>
 801d6b4:	4628      	mov	r0, r5
 801d6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6ba:	f842 0f04 	str.w	r0, [r2, #4]!
 801d6be:	3301      	adds	r3, #1
 801d6c0:	e7c5      	b.n	801d64e <__lshift+0x4a>
 801d6c2:	3904      	subs	r1, #4
 801d6c4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6c8:	f841 2f04 	str.w	r2, [r1, #4]!
 801d6cc:	459c      	cmp	ip, r3
 801d6ce:	d8f9      	bhi.n	801d6c4 <__lshift+0xc0>
 801d6d0:	e7ea      	b.n	801d6a8 <__lshift+0xa4>
 801d6d2:	bf00      	nop
 801d6d4:	0801f308 	.word	0x0801f308
 801d6d8:	0801f319 	.word	0x0801f319

0801d6dc <__mcmp>:
 801d6dc:	690a      	ldr	r2, [r1, #16]
 801d6de:	4603      	mov	r3, r0
 801d6e0:	6900      	ldr	r0, [r0, #16]
 801d6e2:	1a80      	subs	r0, r0, r2
 801d6e4:	b530      	push	{r4, r5, lr}
 801d6e6:	d10e      	bne.n	801d706 <__mcmp+0x2a>
 801d6e8:	3314      	adds	r3, #20
 801d6ea:	3114      	adds	r1, #20
 801d6ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d6f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d6f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d6f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d6fc:	4295      	cmp	r5, r2
 801d6fe:	d003      	beq.n	801d708 <__mcmp+0x2c>
 801d700:	d205      	bcs.n	801d70e <__mcmp+0x32>
 801d702:	f04f 30ff 	mov.w	r0, #4294967295
 801d706:	bd30      	pop	{r4, r5, pc}
 801d708:	42a3      	cmp	r3, r4
 801d70a:	d3f3      	bcc.n	801d6f4 <__mcmp+0x18>
 801d70c:	e7fb      	b.n	801d706 <__mcmp+0x2a>
 801d70e:	2001      	movs	r0, #1
 801d710:	e7f9      	b.n	801d706 <__mcmp+0x2a>
	...

0801d714 <__mdiff>:
 801d714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d718:	4689      	mov	r9, r1
 801d71a:	4606      	mov	r6, r0
 801d71c:	4611      	mov	r1, r2
 801d71e:	4648      	mov	r0, r9
 801d720:	4614      	mov	r4, r2
 801d722:	f7ff ffdb 	bl	801d6dc <__mcmp>
 801d726:	1e05      	subs	r5, r0, #0
 801d728:	d112      	bne.n	801d750 <__mdiff+0x3c>
 801d72a:	4629      	mov	r1, r5
 801d72c:	4630      	mov	r0, r6
 801d72e:	f7ff fd63 	bl	801d1f8 <_Balloc>
 801d732:	4602      	mov	r2, r0
 801d734:	b928      	cbnz	r0, 801d742 <__mdiff+0x2e>
 801d736:	4b3f      	ldr	r3, [pc, #252]	@ (801d834 <__mdiff+0x120>)
 801d738:	f240 2137 	movw	r1, #567	@ 0x237
 801d73c:	483e      	ldr	r0, [pc, #248]	@ (801d838 <__mdiff+0x124>)
 801d73e:	f000 faf3 	bl	801dd28 <__assert_func>
 801d742:	2301      	movs	r3, #1
 801d744:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d748:	4610      	mov	r0, r2
 801d74a:	b003      	add	sp, #12
 801d74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d750:	bfbc      	itt	lt
 801d752:	464b      	movlt	r3, r9
 801d754:	46a1      	movlt	r9, r4
 801d756:	4630      	mov	r0, r6
 801d758:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d75c:	bfba      	itte	lt
 801d75e:	461c      	movlt	r4, r3
 801d760:	2501      	movlt	r5, #1
 801d762:	2500      	movge	r5, #0
 801d764:	f7ff fd48 	bl	801d1f8 <_Balloc>
 801d768:	4602      	mov	r2, r0
 801d76a:	b918      	cbnz	r0, 801d774 <__mdiff+0x60>
 801d76c:	4b31      	ldr	r3, [pc, #196]	@ (801d834 <__mdiff+0x120>)
 801d76e:	f240 2145 	movw	r1, #581	@ 0x245
 801d772:	e7e3      	b.n	801d73c <__mdiff+0x28>
 801d774:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d778:	6926      	ldr	r6, [r4, #16]
 801d77a:	60c5      	str	r5, [r0, #12]
 801d77c:	f109 0310 	add.w	r3, r9, #16
 801d780:	f109 0514 	add.w	r5, r9, #20
 801d784:	f104 0e14 	add.w	lr, r4, #20
 801d788:	f100 0b14 	add.w	fp, r0, #20
 801d78c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d790:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d794:	9301      	str	r3, [sp, #4]
 801d796:	46d9      	mov	r9, fp
 801d798:	f04f 0c00 	mov.w	ip, #0
 801d79c:	9b01      	ldr	r3, [sp, #4]
 801d79e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d7a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d7a6:	9301      	str	r3, [sp, #4]
 801d7a8:	fa1f f38a 	uxth.w	r3, sl
 801d7ac:	4619      	mov	r1, r3
 801d7ae:	b283      	uxth	r3, r0
 801d7b0:	1acb      	subs	r3, r1, r3
 801d7b2:	0c00      	lsrs	r0, r0, #16
 801d7b4:	4463      	add	r3, ip
 801d7b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d7ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d7be:	b29b      	uxth	r3, r3
 801d7c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d7c4:	4576      	cmp	r6, lr
 801d7c6:	f849 3b04 	str.w	r3, [r9], #4
 801d7ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d7ce:	d8e5      	bhi.n	801d79c <__mdiff+0x88>
 801d7d0:	1b33      	subs	r3, r6, r4
 801d7d2:	3b15      	subs	r3, #21
 801d7d4:	f023 0303 	bic.w	r3, r3, #3
 801d7d8:	3415      	adds	r4, #21
 801d7da:	3304      	adds	r3, #4
 801d7dc:	42a6      	cmp	r6, r4
 801d7de:	bf38      	it	cc
 801d7e0:	2304      	movcc	r3, #4
 801d7e2:	441d      	add	r5, r3
 801d7e4:	445b      	add	r3, fp
 801d7e6:	461e      	mov	r6, r3
 801d7e8:	462c      	mov	r4, r5
 801d7ea:	4544      	cmp	r4, r8
 801d7ec:	d30e      	bcc.n	801d80c <__mdiff+0xf8>
 801d7ee:	f108 0103 	add.w	r1, r8, #3
 801d7f2:	1b49      	subs	r1, r1, r5
 801d7f4:	f021 0103 	bic.w	r1, r1, #3
 801d7f8:	3d03      	subs	r5, #3
 801d7fa:	45a8      	cmp	r8, r5
 801d7fc:	bf38      	it	cc
 801d7fe:	2100      	movcc	r1, #0
 801d800:	440b      	add	r3, r1
 801d802:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d806:	b191      	cbz	r1, 801d82e <__mdiff+0x11a>
 801d808:	6117      	str	r7, [r2, #16]
 801d80a:	e79d      	b.n	801d748 <__mdiff+0x34>
 801d80c:	f854 1b04 	ldr.w	r1, [r4], #4
 801d810:	46e6      	mov	lr, ip
 801d812:	0c08      	lsrs	r0, r1, #16
 801d814:	fa1c fc81 	uxtah	ip, ip, r1
 801d818:	4471      	add	r1, lr
 801d81a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d81e:	b289      	uxth	r1, r1
 801d820:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d824:	f846 1b04 	str.w	r1, [r6], #4
 801d828:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d82c:	e7dd      	b.n	801d7ea <__mdiff+0xd6>
 801d82e:	3f01      	subs	r7, #1
 801d830:	e7e7      	b.n	801d802 <__mdiff+0xee>
 801d832:	bf00      	nop
 801d834:	0801f308 	.word	0x0801f308
 801d838:	0801f319 	.word	0x0801f319

0801d83c <__d2b>:
 801d83c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d840:	460f      	mov	r7, r1
 801d842:	2101      	movs	r1, #1
 801d844:	ec59 8b10 	vmov	r8, r9, d0
 801d848:	4616      	mov	r6, r2
 801d84a:	f7ff fcd5 	bl	801d1f8 <_Balloc>
 801d84e:	4604      	mov	r4, r0
 801d850:	b930      	cbnz	r0, 801d860 <__d2b+0x24>
 801d852:	4602      	mov	r2, r0
 801d854:	4b23      	ldr	r3, [pc, #140]	@ (801d8e4 <__d2b+0xa8>)
 801d856:	4824      	ldr	r0, [pc, #144]	@ (801d8e8 <__d2b+0xac>)
 801d858:	f240 310f 	movw	r1, #783	@ 0x30f
 801d85c:	f000 fa64 	bl	801dd28 <__assert_func>
 801d860:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d864:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d868:	b10d      	cbz	r5, 801d86e <__d2b+0x32>
 801d86a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d86e:	9301      	str	r3, [sp, #4]
 801d870:	f1b8 0300 	subs.w	r3, r8, #0
 801d874:	d023      	beq.n	801d8be <__d2b+0x82>
 801d876:	4668      	mov	r0, sp
 801d878:	9300      	str	r3, [sp, #0]
 801d87a:	f7ff fd84 	bl	801d386 <__lo0bits>
 801d87e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d882:	b1d0      	cbz	r0, 801d8ba <__d2b+0x7e>
 801d884:	f1c0 0320 	rsb	r3, r0, #32
 801d888:	fa02 f303 	lsl.w	r3, r2, r3
 801d88c:	430b      	orrs	r3, r1
 801d88e:	40c2      	lsrs	r2, r0
 801d890:	6163      	str	r3, [r4, #20]
 801d892:	9201      	str	r2, [sp, #4]
 801d894:	9b01      	ldr	r3, [sp, #4]
 801d896:	61a3      	str	r3, [r4, #24]
 801d898:	2b00      	cmp	r3, #0
 801d89a:	bf0c      	ite	eq
 801d89c:	2201      	moveq	r2, #1
 801d89e:	2202      	movne	r2, #2
 801d8a0:	6122      	str	r2, [r4, #16]
 801d8a2:	b1a5      	cbz	r5, 801d8ce <__d2b+0x92>
 801d8a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d8a8:	4405      	add	r5, r0
 801d8aa:	603d      	str	r5, [r7, #0]
 801d8ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d8b0:	6030      	str	r0, [r6, #0]
 801d8b2:	4620      	mov	r0, r4
 801d8b4:	b003      	add	sp, #12
 801d8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d8ba:	6161      	str	r1, [r4, #20]
 801d8bc:	e7ea      	b.n	801d894 <__d2b+0x58>
 801d8be:	a801      	add	r0, sp, #4
 801d8c0:	f7ff fd61 	bl	801d386 <__lo0bits>
 801d8c4:	9b01      	ldr	r3, [sp, #4]
 801d8c6:	6163      	str	r3, [r4, #20]
 801d8c8:	3020      	adds	r0, #32
 801d8ca:	2201      	movs	r2, #1
 801d8cc:	e7e8      	b.n	801d8a0 <__d2b+0x64>
 801d8ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d8d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d8d6:	6038      	str	r0, [r7, #0]
 801d8d8:	6918      	ldr	r0, [r3, #16]
 801d8da:	f7ff fd35 	bl	801d348 <__hi0bits>
 801d8de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d8e2:	e7e5      	b.n	801d8b0 <__d2b+0x74>
 801d8e4:	0801f308 	.word	0x0801f308
 801d8e8:	0801f319 	.word	0x0801f319

0801d8ec <__ssputs_r>:
 801d8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8f0:	688e      	ldr	r6, [r1, #8]
 801d8f2:	461f      	mov	r7, r3
 801d8f4:	42be      	cmp	r6, r7
 801d8f6:	680b      	ldr	r3, [r1, #0]
 801d8f8:	4682      	mov	sl, r0
 801d8fa:	460c      	mov	r4, r1
 801d8fc:	4690      	mov	r8, r2
 801d8fe:	d82d      	bhi.n	801d95c <__ssputs_r+0x70>
 801d900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d904:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d908:	d026      	beq.n	801d958 <__ssputs_r+0x6c>
 801d90a:	6965      	ldr	r5, [r4, #20]
 801d90c:	6909      	ldr	r1, [r1, #16]
 801d90e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d912:	eba3 0901 	sub.w	r9, r3, r1
 801d916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d91a:	1c7b      	adds	r3, r7, #1
 801d91c:	444b      	add	r3, r9
 801d91e:	106d      	asrs	r5, r5, #1
 801d920:	429d      	cmp	r5, r3
 801d922:	bf38      	it	cc
 801d924:	461d      	movcc	r5, r3
 801d926:	0553      	lsls	r3, r2, #21
 801d928:	d527      	bpl.n	801d97a <__ssputs_r+0x8e>
 801d92a:	4629      	mov	r1, r5
 801d92c:	f7fd ffa6 	bl	801b87c <_malloc_r>
 801d930:	4606      	mov	r6, r0
 801d932:	b360      	cbz	r0, 801d98e <__ssputs_r+0xa2>
 801d934:	6921      	ldr	r1, [r4, #16]
 801d936:	464a      	mov	r2, r9
 801d938:	f7fe fe1f 	bl	801c57a <memcpy>
 801d93c:	89a3      	ldrh	r3, [r4, #12]
 801d93e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d946:	81a3      	strh	r3, [r4, #12]
 801d948:	6126      	str	r6, [r4, #16]
 801d94a:	6165      	str	r5, [r4, #20]
 801d94c:	444e      	add	r6, r9
 801d94e:	eba5 0509 	sub.w	r5, r5, r9
 801d952:	6026      	str	r6, [r4, #0]
 801d954:	60a5      	str	r5, [r4, #8]
 801d956:	463e      	mov	r6, r7
 801d958:	42be      	cmp	r6, r7
 801d95a:	d900      	bls.n	801d95e <__ssputs_r+0x72>
 801d95c:	463e      	mov	r6, r7
 801d95e:	6820      	ldr	r0, [r4, #0]
 801d960:	4632      	mov	r2, r6
 801d962:	4641      	mov	r1, r8
 801d964:	f000 f9c6 	bl	801dcf4 <memmove>
 801d968:	68a3      	ldr	r3, [r4, #8]
 801d96a:	1b9b      	subs	r3, r3, r6
 801d96c:	60a3      	str	r3, [r4, #8]
 801d96e:	6823      	ldr	r3, [r4, #0]
 801d970:	4433      	add	r3, r6
 801d972:	6023      	str	r3, [r4, #0]
 801d974:	2000      	movs	r0, #0
 801d976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d97a:	462a      	mov	r2, r5
 801d97c:	f000 fa18 	bl	801ddb0 <_realloc_r>
 801d980:	4606      	mov	r6, r0
 801d982:	2800      	cmp	r0, #0
 801d984:	d1e0      	bne.n	801d948 <__ssputs_r+0x5c>
 801d986:	6921      	ldr	r1, [r4, #16]
 801d988:	4650      	mov	r0, sl
 801d98a:	f7ff fbeb 	bl	801d164 <_free_r>
 801d98e:	230c      	movs	r3, #12
 801d990:	f8ca 3000 	str.w	r3, [sl]
 801d994:	89a3      	ldrh	r3, [r4, #12]
 801d996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d99a:	81a3      	strh	r3, [r4, #12]
 801d99c:	f04f 30ff 	mov.w	r0, #4294967295
 801d9a0:	e7e9      	b.n	801d976 <__ssputs_r+0x8a>
	...

0801d9a4 <_svfiprintf_r>:
 801d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9a8:	4698      	mov	r8, r3
 801d9aa:	898b      	ldrh	r3, [r1, #12]
 801d9ac:	061b      	lsls	r3, r3, #24
 801d9ae:	b09d      	sub	sp, #116	@ 0x74
 801d9b0:	4607      	mov	r7, r0
 801d9b2:	460d      	mov	r5, r1
 801d9b4:	4614      	mov	r4, r2
 801d9b6:	d510      	bpl.n	801d9da <_svfiprintf_r+0x36>
 801d9b8:	690b      	ldr	r3, [r1, #16]
 801d9ba:	b973      	cbnz	r3, 801d9da <_svfiprintf_r+0x36>
 801d9bc:	2140      	movs	r1, #64	@ 0x40
 801d9be:	f7fd ff5d 	bl	801b87c <_malloc_r>
 801d9c2:	6028      	str	r0, [r5, #0]
 801d9c4:	6128      	str	r0, [r5, #16]
 801d9c6:	b930      	cbnz	r0, 801d9d6 <_svfiprintf_r+0x32>
 801d9c8:	230c      	movs	r3, #12
 801d9ca:	603b      	str	r3, [r7, #0]
 801d9cc:	f04f 30ff 	mov.w	r0, #4294967295
 801d9d0:	b01d      	add	sp, #116	@ 0x74
 801d9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9d6:	2340      	movs	r3, #64	@ 0x40
 801d9d8:	616b      	str	r3, [r5, #20]
 801d9da:	2300      	movs	r3, #0
 801d9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9de:	2320      	movs	r3, #32
 801d9e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d9e8:	2330      	movs	r3, #48	@ 0x30
 801d9ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801db88 <_svfiprintf_r+0x1e4>
 801d9ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d9f2:	f04f 0901 	mov.w	r9, #1
 801d9f6:	4623      	mov	r3, r4
 801d9f8:	469a      	mov	sl, r3
 801d9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9fe:	b10a      	cbz	r2, 801da04 <_svfiprintf_r+0x60>
 801da00:	2a25      	cmp	r2, #37	@ 0x25
 801da02:	d1f9      	bne.n	801d9f8 <_svfiprintf_r+0x54>
 801da04:	ebba 0b04 	subs.w	fp, sl, r4
 801da08:	d00b      	beq.n	801da22 <_svfiprintf_r+0x7e>
 801da0a:	465b      	mov	r3, fp
 801da0c:	4622      	mov	r2, r4
 801da0e:	4629      	mov	r1, r5
 801da10:	4638      	mov	r0, r7
 801da12:	f7ff ff6b 	bl	801d8ec <__ssputs_r>
 801da16:	3001      	adds	r0, #1
 801da18:	f000 80a7 	beq.w	801db6a <_svfiprintf_r+0x1c6>
 801da1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da1e:	445a      	add	r2, fp
 801da20:	9209      	str	r2, [sp, #36]	@ 0x24
 801da22:	f89a 3000 	ldrb.w	r3, [sl]
 801da26:	2b00      	cmp	r3, #0
 801da28:	f000 809f 	beq.w	801db6a <_svfiprintf_r+0x1c6>
 801da2c:	2300      	movs	r3, #0
 801da2e:	f04f 32ff 	mov.w	r2, #4294967295
 801da32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801da36:	f10a 0a01 	add.w	sl, sl, #1
 801da3a:	9304      	str	r3, [sp, #16]
 801da3c:	9307      	str	r3, [sp, #28]
 801da3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801da42:	931a      	str	r3, [sp, #104]	@ 0x68
 801da44:	4654      	mov	r4, sl
 801da46:	2205      	movs	r2, #5
 801da48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da4c:	484e      	ldr	r0, [pc, #312]	@ (801db88 <_svfiprintf_r+0x1e4>)
 801da4e:	f7e2 fc47 	bl	80002e0 <memchr>
 801da52:	9a04      	ldr	r2, [sp, #16]
 801da54:	b9d8      	cbnz	r0, 801da8e <_svfiprintf_r+0xea>
 801da56:	06d0      	lsls	r0, r2, #27
 801da58:	bf44      	itt	mi
 801da5a:	2320      	movmi	r3, #32
 801da5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801da60:	0711      	lsls	r1, r2, #28
 801da62:	bf44      	itt	mi
 801da64:	232b      	movmi	r3, #43	@ 0x2b
 801da66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801da6a:	f89a 3000 	ldrb.w	r3, [sl]
 801da6e:	2b2a      	cmp	r3, #42	@ 0x2a
 801da70:	d015      	beq.n	801da9e <_svfiprintf_r+0xfa>
 801da72:	9a07      	ldr	r2, [sp, #28]
 801da74:	4654      	mov	r4, sl
 801da76:	2000      	movs	r0, #0
 801da78:	f04f 0c0a 	mov.w	ip, #10
 801da7c:	4621      	mov	r1, r4
 801da7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da82:	3b30      	subs	r3, #48	@ 0x30
 801da84:	2b09      	cmp	r3, #9
 801da86:	d94b      	bls.n	801db20 <_svfiprintf_r+0x17c>
 801da88:	b1b0      	cbz	r0, 801dab8 <_svfiprintf_r+0x114>
 801da8a:	9207      	str	r2, [sp, #28]
 801da8c:	e014      	b.n	801dab8 <_svfiprintf_r+0x114>
 801da8e:	eba0 0308 	sub.w	r3, r0, r8
 801da92:	fa09 f303 	lsl.w	r3, r9, r3
 801da96:	4313      	orrs	r3, r2
 801da98:	9304      	str	r3, [sp, #16]
 801da9a:	46a2      	mov	sl, r4
 801da9c:	e7d2      	b.n	801da44 <_svfiprintf_r+0xa0>
 801da9e:	9b03      	ldr	r3, [sp, #12]
 801daa0:	1d19      	adds	r1, r3, #4
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	9103      	str	r1, [sp, #12]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	bfbb      	ittet	lt
 801daaa:	425b      	neglt	r3, r3
 801daac:	f042 0202 	orrlt.w	r2, r2, #2
 801dab0:	9307      	strge	r3, [sp, #28]
 801dab2:	9307      	strlt	r3, [sp, #28]
 801dab4:	bfb8      	it	lt
 801dab6:	9204      	strlt	r2, [sp, #16]
 801dab8:	7823      	ldrb	r3, [r4, #0]
 801daba:	2b2e      	cmp	r3, #46	@ 0x2e
 801dabc:	d10a      	bne.n	801dad4 <_svfiprintf_r+0x130>
 801dabe:	7863      	ldrb	r3, [r4, #1]
 801dac0:	2b2a      	cmp	r3, #42	@ 0x2a
 801dac2:	d132      	bne.n	801db2a <_svfiprintf_r+0x186>
 801dac4:	9b03      	ldr	r3, [sp, #12]
 801dac6:	1d1a      	adds	r2, r3, #4
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	9203      	str	r2, [sp, #12]
 801dacc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dad0:	3402      	adds	r4, #2
 801dad2:	9305      	str	r3, [sp, #20]
 801dad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801db98 <_svfiprintf_r+0x1f4>
 801dad8:	7821      	ldrb	r1, [r4, #0]
 801dada:	2203      	movs	r2, #3
 801dadc:	4650      	mov	r0, sl
 801dade:	f7e2 fbff 	bl	80002e0 <memchr>
 801dae2:	b138      	cbz	r0, 801daf4 <_svfiprintf_r+0x150>
 801dae4:	9b04      	ldr	r3, [sp, #16]
 801dae6:	eba0 000a 	sub.w	r0, r0, sl
 801daea:	2240      	movs	r2, #64	@ 0x40
 801daec:	4082      	lsls	r2, r0
 801daee:	4313      	orrs	r3, r2
 801daf0:	3401      	adds	r4, #1
 801daf2:	9304      	str	r3, [sp, #16]
 801daf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801daf8:	4824      	ldr	r0, [pc, #144]	@ (801db8c <_svfiprintf_r+0x1e8>)
 801dafa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dafe:	2206      	movs	r2, #6
 801db00:	f7e2 fbee 	bl	80002e0 <memchr>
 801db04:	2800      	cmp	r0, #0
 801db06:	d036      	beq.n	801db76 <_svfiprintf_r+0x1d2>
 801db08:	4b21      	ldr	r3, [pc, #132]	@ (801db90 <_svfiprintf_r+0x1ec>)
 801db0a:	bb1b      	cbnz	r3, 801db54 <_svfiprintf_r+0x1b0>
 801db0c:	9b03      	ldr	r3, [sp, #12]
 801db0e:	3307      	adds	r3, #7
 801db10:	f023 0307 	bic.w	r3, r3, #7
 801db14:	3308      	adds	r3, #8
 801db16:	9303      	str	r3, [sp, #12]
 801db18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db1a:	4433      	add	r3, r6
 801db1c:	9309      	str	r3, [sp, #36]	@ 0x24
 801db1e:	e76a      	b.n	801d9f6 <_svfiprintf_r+0x52>
 801db20:	fb0c 3202 	mla	r2, ip, r2, r3
 801db24:	460c      	mov	r4, r1
 801db26:	2001      	movs	r0, #1
 801db28:	e7a8      	b.n	801da7c <_svfiprintf_r+0xd8>
 801db2a:	2300      	movs	r3, #0
 801db2c:	3401      	adds	r4, #1
 801db2e:	9305      	str	r3, [sp, #20]
 801db30:	4619      	mov	r1, r3
 801db32:	f04f 0c0a 	mov.w	ip, #10
 801db36:	4620      	mov	r0, r4
 801db38:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db3c:	3a30      	subs	r2, #48	@ 0x30
 801db3e:	2a09      	cmp	r2, #9
 801db40:	d903      	bls.n	801db4a <_svfiprintf_r+0x1a6>
 801db42:	2b00      	cmp	r3, #0
 801db44:	d0c6      	beq.n	801dad4 <_svfiprintf_r+0x130>
 801db46:	9105      	str	r1, [sp, #20]
 801db48:	e7c4      	b.n	801dad4 <_svfiprintf_r+0x130>
 801db4a:	fb0c 2101 	mla	r1, ip, r1, r2
 801db4e:	4604      	mov	r4, r0
 801db50:	2301      	movs	r3, #1
 801db52:	e7f0      	b.n	801db36 <_svfiprintf_r+0x192>
 801db54:	ab03      	add	r3, sp, #12
 801db56:	9300      	str	r3, [sp, #0]
 801db58:	462a      	mov	r2, r5
 801db5a:	4b0e      	ldr	r3, [pc, #56]	@ (801db94 <_svfiprintf_r+0x1f0>)
 801db5c:	a904      	add	r1, sp, #16
 801db5e:	4638      	mov	r0, r7
 801db60:	f7fd ffa6 	bl	801bab0 <_printf_float>
 801db64:	1c42      	adds	r2, r0, #1
 801db66:	4606      	mov	r6, r0
 801db68:	d1d6      	bne.n	801db18 <_svfiprintf_r+0x174>
 801db6a:	89ab      	ldrh	r3, [r5, #12]
 801db6c:	065b      	lsls	r3, r3, #25
 801db6e:	f53f af2d 	bmi.w	801d9cc <_svfiprintf_r+0x28>
 801db72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db74:	e72c      	b.n	801d9d0 <_svfiprintf_r+0x2c>
 801db76:	ab03      	add	r3, sp, #12
 801db78:	9300      	str	r3, [sp, #0]
 801db7a:	462a      	mov	r2, r5
 801db7c:	4b05      	ldr	r3, [pc, #20]	@ (801db94 <_svfiprintf_r+0x1f0>)
 801db7e:	a904      	add	r1, sp, #16
 801db80:	4638      	mov	r0, r7
 801db82:	f7fe fa1d 	bl	801bfc0 <_printf_i>
 801db86:	e7ed      	b.n	801db64 <_svfiprintf_r+0x1c0>
 801db88:	0801f372 	.word	0x0801f372
 801db8c:	0801f37c 	.word	0x0801f37c
 801db90:	0801bab1 	.word	0x0801bab1
 801db94:	0801d8ed 	.word	0x0801d8ed
 801db98:	0801f378 	.word	0x0801f378

0801db9c <__sflush_r>:
 801db9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dba4:	0716      	lsls	r6, r2, #28
 801dba6:	4605      	mov	r5, r0
 801dba8:	460c      	mov	r4, r1
 801dbaa:	d454      	bmi.n	801dc56 <__sflush_r+0xba>
 801dbac:	684b      	ldr	r3, [r1, #4]
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	dc02      	bgt.n	801dbb8 <__sflush_r+0x1c>
 801dbb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	dd48      	ble.n	801dc4a <__sflush_r+0xae>
 801dbb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dbba:	2e00      	cmp	r6, #0
 801dbbc:	d045      	beq.n	801dc4a <__sflush_r+0xae>
 801dbbe:	2300      	movs	r3, #0
 801dbc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dbc4:	682f      	ldr	r7, [r5, #0]
 801dbc6:	6a21      	ldr	r1, [r4, #32]
 801dbc8:	602b      	str	r3, [r5, #0]
 801dbca:	d030      	beq.n	801dc2e <__sflush_r+0x92>
 801dbcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dbce:	89a3      	ldrh	r3, [r4, #12]
 801dbd0:	0759      	lsls	r1, r3, #29
 801dbd2:	d505      	bpl.n	801dbe0 <__sflush_r+0x44>
 801dbd4:	6863      	ldr	r3, [r4, #4]
 801dbd6:	1ad2      	subs	r2, r2, r3
 801dbd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dbda:	b10b      	cbz	r3, 801dbe0 <__sflush_r+0x44>
 801dbdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dbde:	1ad2      	subs	r2, r2, r3
 801dbe0:	2300      	movs	r3, #0
 801dbe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dbe4:	6a21      	ldr	r1, [r4, #32]
 801dbe6:	4628      	mov	r0, r5
 801dbe8:	47b0      	blx	r6
 801dbea:	1c43      	adds	r3, r0, #1
 801dbec:	89a3      	ldrh	r3, [r4, #12]
 801dbee:	d106      	bne.n	801dbfe <__sflush_r+0x62>
 801dbf0:	6829      	ldr	r1, [r5, #0]
 801dbf2:	291d      	cmp	r1, #29
 801dbf4:	d82b      	bhi.n	801dc4e <__sflush_r+0xb2>
 801dbf6:	4a2a      	ldr	r2, [pc, #168]	@ (801dca0 <__sflush_r+0x104>)
 801dbf8:	40ca      	lsrs	r2, r1
 801dbfa:	07d6      	lsls	r6, r2, #31
 801dbfc:	d527      	bpl.n	801dc4e <__sflush_r+0xb2>
 801dbfe:	2200      	movs	r2, #0
 801dc00:	6062      	str	r2, [r4, #4]
 801dc02:	04d9      	lsls	r1, r3, #19
 801dc04:	6922      	ldr	r2, [r4, #16]
 801dc06:	6022      	str	r2, [r4, #0]
 801dc08:	d504      	bpl.n	801dc14 <__sflush_r+0x78>
 801dc0a:	1c42      	adds	r2, r0, #1
 801dc0c:	d101      	bne.n	801dc12 <__sflush_r+0x76>
 801dc0e:	682b      	ldr	r3, [r5, #0]
 801dc10:	b903      	cbnz	r3, 801dc14 <__sflush_r+0x78>
 801dc12:	6560      	str	r0, [r4, #84]	@ 0x54
 801dc14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dc16:	602f      	str	r7, [r5, #0]
 801dc18:	b1b9      	cbz	r1, 801dc4a <__sflush_r+0xae>
 801dc1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dc1e:	4299      	cmp	r1, r3
 801dc20:	d002      	beq.n	801dc28 <__sflush_r+0x8c>
 801dc22:	4628      	mov	r0, r5
 801dc24:	f7ff fa9e 	bl	801d164 <_free_r>
 801dc28:	2300      	movs	r3, #0
 801dc2a:	6363      	str	r3, [r4, #52]	@ 0x34
 801dc2c:	e00d      	b.n	801dc4a <__sflush_r+0xae>
 801dc2e:	2301      	movs	r3, #1
 801dc30:	4628      	mov	r0, r5
 801dc32:	47b0      	blx	r6
 801dc34:	4602      	mov	r2, r0
 801dc36:	1c50      	adds	r0, r2, #1
 801dc38:	d1c9      	bne.n	801dbce <__sflush_r+0x32>
 801dc3a:	682b      	ldr	r3, [r5, #0]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d0c6      	beq.n	801dbce <__sflush_r+0x32>
 801dc40:	2b1d      	cmp	r3, #29
 801dc42:	d001      	beq.n	801dc48 <__sflush_r+0xac>
 801dc44:	2b16      	cmp	r3, #22
 801dc46:	d11e      	bne.n	801dc86 <__sflush_r+0xea>
 801dc48:	602f      	str	r7, [r5, #0]
 801dc4a:	2000      	movs	r0, #0
 801dc4c:	e022      	b.n	801dc94 <__sflush_r+0xf8>
 801dc4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc52:	b21b      	sxth	r3, r3
 801dc54:	e01b      	b.n	801dc8e <__sflush_r+0xf2>
 801dc56:	690f      	ldr	r7, [r1, #16]
 801dc58:	2f00      	cmp	r7, #0
 801dc5a:	d0f6      	beq.n	801dc4a <__sflush_r+0xae>
 801dc5c:	0793      	lsls	r3, r2, #30
 801dc5e:	680e      	ldr	r6, [r1, #0]
 801dc60:	bf08      	it	eq
 801dc62:	694b      	ldreq	r3, [r1, #20]
 801dc64:	600f      	str	r7, [r1, #0]
 801dc66:	bf18      	it	ne
 801dc68:	2300      	movne	r3, #0
 801dc6a:	eba6 0807 	sub.w	r8, r6, r7
 801dc6e:	608b      	str	r3, [r1, #8]
 801dc70:	f1b8 0f00 	cmp.w	r8, #0
 801dc74:	dde9      	ble.n	801dc4a <__sflush_r+0xae>
 801dc76:	6a21      	ldr	r1, [r4, #32]
 801dc78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dc7a:	4643      	mov	r3, r8
 801dc7c:	463a      	mov	r2, r7
 801dc7e:	4628      	mov	r0, r5
 801dc80:	47b0      	blx	r6
 801dc82:	2800      	cmp	r0, #0
 801dc84:	dc08      	bgt.n	801dc98 <__sflush_r+0xfc>
 801dc86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc8e:	81a3      	strh	r3, [r4, #12]
 801dc90:	f04f 30ff 	mov.w	r0, #4294967295
 801dc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc98:	4407      	add	r7, r0
 801dc9a:	eba8 0800 	sub.w	r8, r8, r0
 801dc9e:	e7e7      	b.n	801dc70 <__sflush_r+0xd4>
 801dca0:	20400001 	.word	0x20400001

0801dca4 <_fflush_r>:
 801dca4:	b538      	push	{r3, r4, r5, lr}
 801dca6:	690b      	ldr	r3, [r1, #16]
 801dca8:	4605      	mov	r5, r0
 801dcaa:	460c      	mov	r4, r1
 801dcac:	b913      	cbnz	r3, 801dcb4 <_fflush_r+0x10>
 801dcae:	2500      	movs	r5, #0
 801dcb0:	4628      	mov	r0, r5
 801dcb2:	bd38      	pop	{r3, r4, r5, pc}
 801dcb4:	b118      	cbz	r0, 801dcbe <_fflush_r+0x1a>
 801dcb6:	6a03      	ldr	r3, [r0, #32]
 801dcb8:	b90b      	cbnz	r3, 801dcbe <_fflush_r+0x1a>
 801dcba:	f7fe fb2b 	bl	801c314 <__sinit>
 801dcbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d0f3      	beq.n	801dcae <_fflush_r+0xa>
 801dcc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dcc8:	07d0      	lsls	r0, r2, #31
 801dcca:	d404      	bmi.n	801dcd6 <_fflush_r+0x32>
 801dccc:	0599      	lsls	r1, r3, #22
 801dcce:	d402      	bmi.n	801dcd6 <_fflush_r+0x32>
 801dcd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dcd2:	f7fe fc48 	bl	801c566 <__retarget_lock_acquire_recursive>
 801dcd6:	4628      	mov	r0, r5
 801dcd8:	4621      	mov	r1, r4
 801dcda:	f7ff ff5f 	bl	801db9c <__sflush_r>
 801dcde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dce0:	07da      	lsls	r2, r3, #31
 801dce2:	4605      	mov	r5, r0
 801dce4:	d4e4      	bmi.n	801dcb0 <_fflush_r+0xc>
 801dce6:	89a3      	ldrh	r3, [r4, #12]
 801dce8:	059b      	lsls	r3, r3, #22
 801dcea:	d4e1      	bmi.n	801dcb0 <_fflush_r+0xc>
 801dcec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dcee:	f7fe fc3b 	bl	801c568 <__retarget_lock_release_recursive>
 801dcf2:	e7dd      	b.n	801dcb0 <_fflush_r+0xc>

0801dcf4 <memmove>:
 801dcf4:	4288      	cmp	r0, r1
 801dcf6:	b510      	push	{r4, lr}
 801dcf8:	eb01 0402 	add.w	r4, r1, r2
 801dcfc:	d902      	bls.n	801dd04 <memmove+0x10>
 801dcfe:	4284      	cmp	r4, r0
 801dd00:	4623      	mov	r3, r4
 801dd02:	d807      	bhi.n	801dd14 <memmove+0x20>
 801dd04:	1e43      	subs	r3, r0, #1
 801dd06:	42a1      	cmp	r1, r4
 801dd08:	d008      	beq.n	801dd1c <memmove+0x28>
 801dd0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dd0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dd12:	e7f8      	b.n	801dd06 <memmove+0x12>
 801dd14:	4402      	add	r2, r0
 801dd16:	4601      	mov	r1, r0
 801dd18:	428a      	cmp	r2, r1
 801dd1a:	d100      	bne.n	801dd1e <memmove+0x2a>
 801dd1c:	bd10      	pop	{r4, pc}
 801dd1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dd22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dd26:	e7f7      	b.n	801dd18 <memmove+0x24>

0801dd28 <__assert_func>:
 801dd28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dd2a:	4614      	mov	r4, r2
 801dd2c:	461a      	mov	r2, r3
 801dd2e:	4b09      	ldr	r3, [pc, #36]	@ (801dd54 <__assert_func+0x2c>)
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	4605      	mov	r5, r0
 801dd34:	68d8      	ldr	r0, [r3, #12]
 801dd36:	b14c      	cbz	r4, 801dd4c <__assert_func+0x24>
 801dd38:	4b07      	ldr	r3, [pc, #28]	@ (801dd58 <__assert_func+0x30>)
 801dd3a:	9100      	str	r1, [sp, #0]
 801dd3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dd40:	4906      	ldr	r1, [pc, #24]	@ (801dd5c <__assert_func+0x34>)
 801dd42:	462b      	mov	r3, r5
 801dd44:	f000 f870 	bl	801de28 <fiprintf>
 801dd48:	f000 f880 	bl	801de4c <abort>
 801dd4c:	4b04      	ldr	r3, [pc, #16]	@ (801dd60 <__assert_func+0x38>)
 801dd4e:	461c      	mov	r4, r3
 801dd50:	e7f3      	b.n	801dd3a <__assert_func+0x12>
 801dd52:	bf00      	nop
 801dd54:	24000350 	.word	0x24000350
 801dd58:	0801f38d 	.word	0x0801f38d
 801dd5c:	0801f39a 	.word	0x0801f39a
 801dd60:	0801f3c8 	.word	0x0801f3c8

0801dd64 <_calloc_r>:
 801dd64:	b570      	push	{r4, r5, r6, lr}
 801dd66:	fba1 5402 	umull	r5, r4, r1, r2
 801dd6a:	b934      	cbnz	r4, 801dd7a <_calloc_r+0x16>
 801dd6c:	4629      	mov	r1, r5
 801dd6e:	f7fd fd85 	bl	801b87c <_malloc_r>
 801dd72:	4606      	mov	r6, r0
 801dd74:	b928      	cbnz	r0, 801dd82 <_calloc_r+0x1e>
 801dd76:	4630      	mov	r0, r6
 801dd78:	bd70      	pop	{r4, r5, r6, pc}
 801dd7a:	220c      	movs	r2, #12
 801dd7c:	6002      	str	r2, [r0, #0]
 801dd7e:	2600      	movs	r6, #0
 801dd80:	e7f9      	b.n	801dd76 <_calloc_r+0x12>
 801dd82:	462a      	mov	r2, r5
 801dd84:	4621      	mov	r1, r4
 801dd86:	f7fe fb60 	bl	801c44a <memset>
 801dd8a:	e7f4      	b.n	801dd76 <_calloc_r+0x12>

0801dd8c <__ascii_mbtowc>:
 801dd8c:	b082      	sub	sp, #8
 801dd8e:	b901      	cbnz	r1, 801dd92 <__ascii_mbtowc+0x6>
 801dd90:	a901      	add	r1, sp, #4
 801dd92:	b142      	cbz	r2, 801dda6 <__ascii_mbtowc+0x1a>
 801dd94:	b14b      	cbz	r3, 801ddaa <__ascii_mbtowc+0x1e>
 801dd96:	7813      	ldrb	r3, [r2, #0]
 801dd98:	600b      	str	r3, [r1, #0]
 801dd9a:	7812      	ldrb	r2, [r2, #0]
 801dd9c:	1e10      	subs	r0, r2, #0
 801dd9e:	bf18      	it	ne
 801dda0:	2001      	movne	r0, #1
 801dda2:	b002      	add	sp, #8
 801dda4:	4770      	bx	lr
 801dda6:	4610      	mov	r0, r2
 801dda8:	e7fb      	b.n	801dda2 <__ascii_mbtowc+0x16>
 801ddaa:	f06f 0001 	mvn.w	r0, #1
 801ddae:	e7f8      	b.n	801dda2 <__ascii_mbtowc+0x16>

0801ddb0 <_realloc_r>:
 801ddb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddb4:	4607      	mov	r7, r0
 801ddb6:	4614      	mov	r4, r2
 801ddb8:	460d      	mov	r5, r1
 801ddba:	b921      	cbnz	r1, 801ddc6 <_realloc_r+0x16>
 801ddbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ddc0:	4611      	mov	r1, r2
 801ddc2:	f7fd bd5b 	b.w	801b87c <_malloc_r>
 801ddc6:	b92a      	cbnz	r2, 801ddd4 <_realloc_r+0x24>
 801ddc8:	f7ff f9cc 	bl	801d164 <_free_r>
 801ddcc:	4625      	mov	r5, r4
 801ddce:	4628      	mov	r0, r5
 801ddd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddd4:	f000 f841 	bl	801de5a <_malloc_usable_size_r>
 801ddd8:	4284      	cmp	r4, r0
 801ddda:	4606      	mov	r6, r0
 801dddc:	d802      	bhi.n	801dde4 <_realloc_r+0x34>
 801ddde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801dde2:	d8f4      	bhi.n	801ddce <_realloc_r+0x1e>
 801dde4:	4621      	mov	r1, r4
 801dde6:	4638      	mov	r0, r7
 801dde8:	f7fd fd48 	bl	801b87c <_malloc_r>
 801ddec:	4680      	mov	r8, r0
 801ddee:	b908      	cbnz	r0, 801ddf4 <_realloc_r+0x44>
 801ddf0:	4645      	mov	r5, r8
 801ddf2:	e7ec      	b.n	801ddce <_realloc_r+0x1e>
 801ddf4:	42b4      	cmp	r4, r6
 801ddf6:	4622      	mov	r2, r4
 801ddf8:	4629      	mov	r1, r5
 801ddfa:	bf28      	it	cs
 801ddfc:	4632      	movcs	r2, r6
 801ddfe:	f7fe fbbc 	bl	801c57a <memcpy>
 801de02:	4629      	mov	r1, r5
 801de04:	4638      	mov	r0, r7
 801de06:	f7ff f9ad 	bl	801d164 <_free_r>
 801de0a:	e7f1      	b.n	801ddf0 <_realloc_r+0x40>

0801de0c <__ascii_wctomb>:
 801de0c:	4603      	mov	r3, r0
 801de0e:	4608      	mov	r0, r1
 801de10:	b141      	cbz	r1, 801de24 <__ascii_wctomb+0x18>
 801de12:	2aff      	cmp	r2, #255	@ 0xff
 801de14:	d904      	bls.n	801de20 <__ascii_wctomb+0x14>
 801de16:	228a      	movs	r2, #138	@ 0x8a
 801de18:	601a      	str	r2, [r3, #0]
 801de1a:	f04f 30ff 	mov.w	r0, #4294967295
 801de1e:	4770      	bx	lr
 801de20:	700a      	strb	r2, [r1, #0]
 801de22:	2001      	movs	r0, #1
 801de24:	4770      	bx	lr
	...

0801de28 <fiprintf>:
 801de28:	b40e      	push	{r1, r2, r3}
 801de2a:	b503      	push	{r0, r1, lr}
 801de2c:	4601      	mov	r1, r0
 801de2e:	ab03      	add	r3, sp, #12
 801de30:	4805      	ldr	r0, [pc, #20]	@ (801de48 <fiprintf+0x20>)
 801de32:	f853 2b04 	ldr.w	r2, [r3], #4
 801de36:	6800      	ldr	r0, [r0, #0]
 801de38:	9301      	str	r3, [sp, #4]
 801de3a:	f000 f83f 	bl	801debc <_vfiprintf_r>
 801de3e:	b002      	add	sp, #8
 801de40:	f85d eb04 	ldr.w	lr, [sp], #4
 801de44:	b003      	add	sp, #12
 801de46:	4770      	bx	lr
 801de48:	24000350 	.word	0x24000350

0801de4c <abort>:
 801de4c:	b508      	push	{r3, lr}
 801de4e:	2006      	movs	r0, #6
 801de50:	f000 fa08 	bl	801e264 <raise>
 801de54:	2001      	movs	r0, #1
 801de56:	f7e4 fed9 	bl	8002c0c <_exit>

0801de5a <_malloc_usable_size_r>:
 801de5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de5e:	1f18      	subs	r0, r3, #4
 801de60:	2b00      	cmp	r3, #0
 801de62:	bfbc      	itt	lt
 801de64:	580b      	ldrlt	r3, [r1, r0]
 801de66:	18c0      	addlt	r0, r0, r3
 801de68:	4770      	bx	lr

0801de6a <__sfputc_r>:
 801de6a:	6893      	ldr	r3, [r2, #8]
 801de6c:	3b01      	subs	r3, #1
 801de6e:	2b00      	cmp	r3, #0
 801de70:	b410      	push	{r4}
 801de72:	6093      	str	r3, [r2, #8]
 801de74:	da08      	bge.n	801de88 <__sfputc_r+0x1e>
 801de76:	6994      	ldr	r4, [r2, #24]
 801de78:	42a3      	cmp	r3, r4
 801de7a:	db01      	blt.n	801de80 <__sfputc_r+0x16>
 801de7c:	290a      	cmp	r1, #10
 801de7e:	d103      	bne.n	801de88 <__sfputc_r+0x1e>
 801de80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de84:	f000 b932 	b.w	801e0ec <__swbuf_r>
 801de88:	6813      	ldr	r3, [r2, #0]
 801de8a:	1c58      	adds	r0, r3, #1
 801de8c:	6010      	str	r0, [r2, #0]
 801de8e:	7019      	strb	r1, [r3, #0]
 801de90:	4608      	mov	r0, r1
 801de92:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de96:	4770      	bx	lr

0801de98 <__sfputs_r>:
 801de98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de9a:	4606      	mov	r6, r0
 801de9c:	460f      	mov	r7, r1
 801de9e:	4614      	mov	r4, r2
 801dea0:	18d5      	adds	r5, r2, r3
 801dea2:	42ac      	cmp	r4, r5
 801dea4:	d101      	bne.n	801deaa <__sfputs_r+0x12>
 801dea6:	2000      	movs	r0, #0
 801dea8:	e007      	b.n	801deba <__sfputs_r+0x22>
 801deaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801deae:	463a      	mov	r2, r7
 801deb0:	4630      	mov	r0, r6
 801deb2:	f7ff ffda 	bl	801de6a <__sfputc_r>
 801deb6:	1c43      	adds	r3, r0, #1
 801deb8:	d1f3      	bne.n	801dea2 <__sfputs_r+0xa>
 801deba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801debc <_vfiprintf_r>:
 801debc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dec0:	460d      	mov	r5, r1
 801dec2:	b09d      	sub	sp, #116	@ 0x74
 801dec4:	4614      	mov	r4, r2
 801dec6:	4698      	mov	r8, r3
 801dec8:	4606      	mov	r6, r0
 801deca:	b118      	cbz	r0, 801ded4 <_vfiprintf_r+0x18>
 801decc:	6a03      	ldr	r3, [r0, #32]
 801dece:	b90b      	cbnz	r3, 801ded4 <_vfiprintf_r+0x18>
 801ded0:	f7fe fa20 	bl	801c314 <__sinit>
 801ded4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ded6:	07d9      	lsls	r1, r3, #31
 801ded8:	d405      	bmi.n	801dee6 <_vfiprintf_r+0x2a>
 801deda:	89ab      	ldrh	r3, [r5, #12]
 801dedc:	059a      	lsls	r2, r3, #22
 801dede:	d402      	bmi.n	801dee6 <_vfiprintf_r+0x2a>
 801dee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dee2:	f7fe fb40 	bl	801c566 <__retarget_lock_acquire_recursive>
 801dee6:	89ab      	ldrh	r3, [r5, #12]
 801dee8:	071b      	lsls	r3, r3, #28
 801deea:	d501      	bpl.n	801def0 <_vfiprintf_r+0x34>
 801deec:	692b      	ldr	r3, [r5, #16]
 801deee:	b99b      	cbnz	r3, 801df18 <_vfiprintf_r+0x5c>
 801def0:	4629      	mov	r1, r5
 801def2:	4630      	mov	r0, r6
 801def4:	f000 f938 	bl	801e168 <__swsetup_r>
 801def8:	b170      	cbz	r0, 801df18 <_vfiprintf_r+0x5c>
 801defa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801defc:	07dc      	lsls	r4, r3, #31
 801defe:	d504      	bpl.n	801df0a <_vfiprintf_r+0x4e>
 801df00:	f04f 30ff 	mov.w	r0, #4294967295
 801df04:	b01d      	add	sp, #116	@ 0x74
 801df06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df0a:	89ab      	ldrh	r3, [r5, #12]
 801df0c:	0598      	lsls	r0, r3, #22
 801df0e:	d4f7      	bmi.n	801df00 <_vfiprintf_r+0x44>
 801df10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801df12:	f7fe fb29 	bl	801c568 <__retarget_lock_release_recursive>
 801df16:	e7f3      	b.n	801df00 <_vfiprintf_r+0x44>
 801df18:	2300      	movs	r3, #0
 801df1a:	9309      	str	r3, [sp, #36]	@ 0x24
 801df1c:	2320      	movs	r3, #32
 801df1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801df22:	f8cd 800c 	str.w	r8, [sp, #12]
 801df26:	2330      	movs	r3, #48	@ 0x30
 801df28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e0d8 <_vfiprintf_r+0x21c>
 801df2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801df30:	f04f 0901 	mov.w	r9, #1
 801df34:	4623      	mov	r3, r4
 801df36:	469a      	mov	sl, r3
 801df38:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df3c:	b10a      	cbz	r2, 801df42 <_vfiprintf_r+0x86>
 801df3e:	2a25      	cmp	r2, #37	@ 0x25
 801df40:	d1f9      	bne.n	801df36 <_vfiprintf_r+0x7a>
 801df42:	ebba 0b04 	subs.w	fp, sl, r4
 801df46:	d00b      	beq.n	801df60 <_vfiprintf_r+0xa4>
 801df48:	465b      	mov	r3, fp
 801df4a:	4622      	mov	r2, r4
 801df4c:	4629      	mov	r1, r5
 801df4e:	4630      	mov	r0, r6
 801df50:	f7ff ffa2 	bl	801de98 <__sfputs_r>
 801df54:	3001      	adds	r0, #1
 801df56:	f000 80a7 	beq.w	801e0a8 <_vfiprintf_r+0x1ec>
 801df5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df5c:	445a      	add	r2, fp
 801df5e:	9209      	str	r2, [sp, #36]	@ 0x24
 801df60:	f89a 3000 	ldrb.w	r3, [sl]
 801df64:	2b00      	cmp	r3, #0
 801df66:	f000 809f 	beq.w	801e0a8 <_vfiprintf_r+0x1ec>
 801df6a:	2300      	movs	r3, #0
 801df6c:	f04f 32ff 	mov.w	r2, #4294967295
 801df70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df74:	f10a 0a01 	add.w	sl, sl, #1
 801df78:	9304      	str	r3, [sp, #16]
 801df7a:	9307      	str	r3, [sp, #28]
 801df7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801df80:	931a      	str	r3, [sp, #104]	@ 0x68
 801df82:	4654      	mov	r4, sl
 801df84:	2205      	movs	r2, #5
 801df86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df8a:	4853      	ldr	r0, [pc, #332]	@ (801e0d8 <_vfiprintf_r+0x21c>)
 801df8c:	f7e2 f9a8 	bl	80002e0 <memchr>
 801df90:	9a04      	ldr	r2, [sp, #16]
 801df92:	b9d8      	cbnz	r0, 801dfcc <_vfiprintf_r+0x110>
 801df94:	06d1      	lsls	r1, r2, #27
 801df96:	bf44      	itt	mi
 801df98:	2320      	movmi	r3, #32
 801df9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801df9e:	0713      	lsls	r3, r2, #28
 801dfa0:	bf44      	itt	mi
 801dfa2:	232b      	movmi	r3, #43	@ 0x2b
 801dfa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dfa8:	f89a 3000 	ldrb.w	r3, [sl]
 801dfac:	2b2a      	cmp	r3, #42	@ 0x2a
 801dfae:	d015      	beq.n	801dfdc <_vfiprintf_r+0x120>
 801dfb0:	9a07      	ldr	r2, [sp, #28]
 801dfb2:	4654      	mov	r4, sl
 801dfb4:	2000      	movs	r0, #0
 801dfb6:	f04f 0c0a 	mov.w	ip, #10
 801dfba:	4621      	mov	r1, r4
 801dfbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dfc0:	3b30      	subs	r3, #48	@ 0x30
 801dfc2:	2b09      	cmp	r3, #9
 801dfc4:	d94b      	bls.n	801e05e <_vfiprintf_r+0x1a2>
 801dfc6:	b1b0      	cbz	r0, 801dff6 <_vfiprintf_r+0x13a>
 801dfc8:	9207      	str	r2, [sp, #28]
 801dfca:	e014      	b.n	801dff6 <_vfiprintf_r+0x13a>
 801dfcc:	eba0 0308 	sub.w	r3, r0, r8
 801dfd0:	fa09 f303 	lsl.w	r3, r9, r3
 801dfd4:	4313      	orrs	r3, r2
 801dfd6:	9304      	str	r3, [sp, #16]
 801dfd8:	46a2      	mov	sl, r4
 801dfda:	e7d2      	b.n	801df82 <_vfiprintf_r+0xc6>
 801dfdc:	9b03      	ldr	r3, [sp, #12]
 801dfde:	1d19      	adds	r1, r3, #4
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	9103      	str	r1, [sp, #12]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	bfbb      	ittet	lt
 801dfe8:	425b      	neglt	r3, r3
 801dfea:	f042 0202 	orrlt.w	r2, r2, #2
 801dfee:	9307      	strge	r3, [sp, #28]
 801dff0:	9307      	strlt	r3, [sp, #28]
 801dff2:	bfb8      	it	lt
 801dff4:	9204      	strlt	r2, [sp, #16]
 801dff6:	7823      	ldrb	r3, [r4, #0]
 801dff8:	2b2e      	cmp	r3, #46	@ 0x2e
 801dffa:	d10a      	bne.n	801e012 <_vfiprintf_r+0x156>
 801dffc:	7863      	ldrb	r3, [r4, #1]
 801dffe:	2b2a      	cmp	r3, #42	@ 0x2a
 801e000:	d132      	bne.n	801e068 <_vfiprintf_r+0x1ac>
 801e002:	9b03      	ldr	r3, [sp, #12]
 801e004:	1d1a      	adds	r2, r3, #4
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	9203      	str	r2, [sp, #12]
 801e00a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e00e:	3402      	adds	r4, #2
 801e010:	9305      	str	r3, [sp, #20]
 801e012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e0e8 <_vfiprintf_r+0x22c>
 801e016:	7821      	ldrb	r1, [r4, #0]
 801e018:	2203      	movs	r2, #3
 801e01a:	4650      	mov	r0, sl
 801e01c:	f7e2 f960 	bl	80002e0 <memchr>
 801e020:	b138      	cbz	r0, 801e032 <_vfiprintf_r+0x176>
 801e022:	9b04      	ldr	r3, [sp, #16]
 801e024:	eba0 000a 	sub.w	r0, r0, sl
 801e028:	2240      	movs	r2, #64	@ 0x40
 801e02a:	4082      	lsls	r2, r0
 801e02c:	4313      	orrs	r3, r2
 801e02e:	3401      	adds	r4, #1
 801e030:	9304      	str	r3, [sp, #16]
 801e032:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e036:	4829      	ldr	r0, [pc, #164]	@ (801e0dc <_vfiprintf_r+0x220>)
 801e038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e03c:	2206      	movs	r2, #6
 801e03e:	f7e2 f94f 	bl	80002e0 <memchr>
 801e042:	2800      	cmp	r0, #0
 801e044:	d03f      	beq.n	801e0c6 <_vfiprintf_r+0x20a>
 801e046:	4b26      	ldr	r3, [pc, #152]	@ (801e0e0 <_vfiprintf_r+0x224>)
 801e048:	bb1b      	cbnz	r3, 801e092 <_vfiprintf_r+0x1d6>
 801e04a:	9b03      	ldr	r3, [sp, #12]
 801e04c:	3307      	adds	r3, #7
 801e04e:	f023 0307 	bic.w	r3, r3, #7
 801e052:	3308      	adds	r3, #8
 801e054:	9303      	str	r3, [sp, #12]
 801e056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e058:	443b      	add	r3, r7
 801e05a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e05c:	e76a      	b.n	801df34 <_vfiprintf_r+0x78>
 801e05e:	fb0c 3202 	mla	r2, ip, r2, r3
 801e062:	460c      	mov	r4, r1
 801e064:	2001      	movs	r0, #1
 801e066:	e7a8      	b.n	801dfba <_vfiprintf_r+0xfe>
 801e068:	2300      	movs	r3, #0
 801e06a:	3401      	adds	r4, #1
 801e06c:	9305      	str	r3, [sp, #20]
 801e06e:	4619      	mov	r1, r3
 801e070:	f04f 0c0a 	mov.w	ip, #10
 801e074:	4620      	mov	r0, r4
 801e076:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e07a:	3a30      	subs	r2, #48	@ 0x30
 801e07c:	2a09      	cmp	r2, #9
 801e07e:	d903      	bls.n	801e088 <_vfiprintf_r+0x1cc>
 801e080:	2b00      	cmp	r3, #0
 801e082:	d0c6      	beq.n	801e012 <_vfiprintf_r+0x156>
 801e084:	9105      	str	r1, [sp, #20]
 801e086:	e7c4      	b.n	801e012 <_vfiprintf_r+0x156>
 801e088:	fb0c 2101 	mla	r1, ip, r1, r2
 801e08c:	4604      	mov	r4, r0
 801e08e:	2301      	movs	r3, #1
 801e090:	e7f0      	b.n	801e074 <_vfiprintf_r+0x1b8>
 801e092:	ab03      	add	r3, sp, #12
 801e094:	9300      	str	r3, [sp, #0]
 801e096:	462a      	mov	r2, r5
 801e098:	4b12      	ldr	r3, [pc, #72]	@ (801e0e4 <_vfiprintf_r+0x228>)
 801e09a:	a904      	add	r1, sp, #16
 801e09c:	4630      	mov	r0, r6
 801e09e:	f7fd fd07 	bl	801bab0 <_printf_float>
 801e0a2:	4607      	mov	r7, r0
 801e0a4:	1c78      	adds	r0, r7, #1
 801e0a6:	d1d6      	bne.n	801e056 <_vfiprintf_r+0x19a>
 801e0a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e0aa:	07d9      	lsls	r1, r3, #31
 801e0ac:	d405      	bmi.n	801e0ba <_vfiprintf_r+0x1fe>
 801e0ae:	89ab      	ldrh	r3, [r5, #12]
 801e0b0:	059a      	lsls	r2, r3, #22
 801e0b2:	d402      	bmi.n	801e0ba <_vfiprintf_r+0x1fe>
 801e0b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e0b6:	f7fe fa57 	bl	801c568 <__retarget_lock_release_recursive>
 801e0ba:	89ab      	ldrh	r3, [r5, #12]
 801e0bc:	065b      	lsls	r3, r3, #25
 801e0be:	f53f af1f 	bmi.w	801df00 <_vfiprintf_r+0x44>
 801e0c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e0c4:	e71e      	b.n	801df04 <_vfiprintf_r+0x48>
 801e0c6:	ab03      	add	r3, sp, #12
 801e0c8:	9300      	str	r3, [sp, #0]
 801e0ca:	462a      	mov	r2, r5
 801e0cc:	4b05      	ldr	r3, [pc, #20]	@ (801e0e4 <_vfiprintf_r+0x228>)
 801e0ce:	a904      	add	r1, sp, #16
 801e0d0:	4630      	mov	r0, r6
 801e0d2:	f7fd ff75 	bl	801bfc0 <_printf_i>
 801e0d6:	e7e4      	b.n	801e0a2 <_vfiprintf_r+0x1e6>
 801e0d8:	0801f372 	.word	0x0801f372
 801e0dc:	0801f37c 	.word	0x0801f37c
 801e0e0:	0801bab1 	.word	0x0801bab1
 801e0e4:	0801de99 	.word	0x0801de99
 801e0e8:	0801f378 	.word	0x0801f378

0801e0ec <__swbuf_r>:
 801e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0ee:	460e      	mov	r6, r1
 801e0f0:	4614      	mov	r4, r2
 801e0f2:	4605      	mov	r5, r0
 801e0f4:	b118      	cbz	r0, 801e0fe <__swbuf_r+0x12>
 801e0f6:	6a03      	ldr	r3, [r0, #32]
 801e0f8:	b90b      	cbnz	r3, 801e0fe <__swbuf_r+0x12>
 801e0fa:	f7fe f90b 	bl	801c314 <__sinit>
 801e0fe:	69a3      	ldr	r3, [r4, #24]
 801e100:	60a3      	str	r3, [r4, #8]
 801e102:	89a3      	ldrh	r3, [r4, #12]
 801e104:	071a      	lsls	r2, r3, #28
 801e106:	d501      	bpl.n	801e10c <__swbuf_r+0x20>
 801e108:	6923      	ldr	r3, [r4, #16]
 801e10a:	b943      	cbnz	r3, 801e11e <__swbuf_r+0x32>
 801e10c:	4621      	mov	r1, r4
 801e10e:	4628      	mov	r0, r5
 801e110:	f000 f82a 	bl	801e168 <__swsetup_r>
 801e114:	b118      	cbz	r0, 801e11e <__swbuf_r+0x32>
 801e116:	f04f 37ff 	mov.w	r7, #4294967295
 801e11a:	4638      	mov	r0, r7
 801e11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e11e:	6823      	ldr	r3, [r4, #0]
 801e120:	6922      	ldr	r2, [r4, #16]
 801e122:	1a98      	subs	r0, r3, r2
 801e124:	6963      	ldr	r3, [r4, #20]
 801e126:	b2f6      	uxtb	r6, r6
 801e128:	4283      	cmp	r3, r0
 801e12a:	4637      	mov	r7, r6
 801e12c:	dc05      	bgt.n	801e13a <__swbuf_r+0x4e>
 801e12e:	4621      	mov	r1, r4
 801e130:	4628      	mov	r0, r5
 801e132:	f7ff fdb7 	bl	801dca4 <_fflush_r>
 801e136:	2800      	cmp	r0, #0
 801e138:	d1ed      	bne.n	801e116 <__swbuf_r+0x2a>
 801e13a:	68a3      	ldr	r3, [r4, #8]
 801e13c:	3b01      	subs	r3, #1
 801e13e:	60a3      	str	r3, [r4, #8]
 801e140:	6823      	ldr	r3, [r4, #0]
 801e142:	1c5a      	adds	r2, r3, #1
 801e144:	6022      	str	r2, [r4, #0]
 801e146:	701e      	strb	r6, [r3, #0]
 801e148:	6962      	ldr	r2, [r4, #20]
 801e14a:	1c43      	adds	r3, r0, #1
 801e14c:	429a      	cmp	r2, r3
 801e14e:	d004      	beq.n	801e15a <__swbuf_r+0x6e>
 801e150:	89a3      	ldrh	r3, [r4, #12]
 801e152:	07db      	lsls	r3, r3, #31
 801e154:	d5e1      	bpl.n	801e11a <__swbuf_r+0x2e>
 801e156:	2e0a      	cmp	r6, #10
 801e158:	d1df      	bne.n	801e11a <__swbuf_r+0x2e>
 801e15a:	4621      	mov	r1, r4
 801e15c:	4628      	mov	r0, r5
 801e15e:	f7ff fda1 	bl	801dca4 <_fflush_r>
 801e162:	2800      	cmp	r0, #0
 801e164:	d0d9      	beq.n	801e11a <__swbuf_r+0x2e>
 801e166:	e7d6      	b.n	801e116 <__swbuf_r+0x2a>

0801e168 <__swsetup_r>:
 801e168:	b538      	push	{r3, r4, r5, lr}
 801e16a:	4b29      	ldr	r3, [pc, #164]	@ (801e210 <__swsetup_r+0xa8>)
 801e16c:	4605      	mov	r5, r0
 801e16e:	6818      	ldr	r0, [r3, #0]
 801e170:	460c      	mov	r4, r1
 801e172:	b118      	cbz	r0, 801e17c <__swsetup_r+0x14>
 801e174:	6a03      	ldr	r3, [r0, #32]
 801e176:	b90b      	cbnz	r3, 801e17c <__swsetup_r+0x14>
 801e178:	f7fe f8cc 	bl	801c314 <__sinit>
 801e17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e180:	0719      	lsls	r1, r3, #28
 801e182:	d422      	bmi.n	801e1ca <__swsetup_r+0x62>
 801e184:	06da      	lsls	r2, r3, #27
 801e186:	d407      	bmi.n	801e198 <__swsetup_r+0x30>
 801e188:	2209      	movs	r2, #9
 801e18a:	602a      	str	r2, [r5, #0]
 801e18c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e190:	81a3      	strh	r3, [r4, #12]
 801e192:	f04f 30ff 	mov.w	r0, #4294967295
 801e196:	e033      	b.n	801e200 <__swsetup_r+0x98>
 801e198:	0758      	lsls	r0, r3, #29
 801e19a:	d512      	bpl.n	801e1c2 <__swsetup_r+0x5a>
 801e19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e19e:	b141      	cbz	r1, 801e1b2 <__swsetup_r+0x4a>
 801e1a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e1a4:	4299      	cmp	r1, r3
 801e1a6:	d002      	beq.n	801e1ae <__swsetup_r+0x46>
 801e1a8:	4628      	mov	r0, r5
 801e1aa:	f7fe ffdb 	bl	801d164 <_free_r>
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	6363      	str	r3, [r4, #52]	@ 0x34
 801e1b2:	89a3      	ldrh	r3, [r4, #12]
 801e1b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e1b8:	81a3      	strh	r3, [r4, #12]
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	6063      	str	r3, [r4, #4]
 801e1be:	6923      	ldr	r3, [r4, #16]
 801e1c0:	6023      	str	r3, [r4, #0]
 801e1c2:	89a3      	ldrh	r3, [r4, #12]
 801e1c4:	f043 0308 	orr.w	r3, r3, #8
 801e1c8:	81a3      	strh	r3, [r4, #12]
 801e1ca:	6923      	ldr	r3, [r4, #16]
 801e1cc:	b94b      	cbnz	r3, 801e1e2 <__swsetup_r+0x7a>
 801e1ce:	89a3      	ldrh	r3, [r4, #12]
 801e1d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e1d8:	d003      	beq.n	801e1e2 <__swsetup_r+0x7a>
 801e1da:	4621      	mov	r1, r4
 801e1dc:	4628      	mov	r0, r5
 801e1de:	f000 f883 	bl	801e2e8 <__smakebuf_r>
 801e1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1e6:	f013 0201 	ands.w	r2, r3, #1
 801e1ea:	d00a      	beq.n	801e202 <__swsetup_r+0x9a>
 801e1ec:	2200      	movs	r2, #0
 801e1ee:	60a2      	str	r2, [r4, #8]
 801e1f0:	6962      	ldr	r2, [r4, #20]
 801e1f2:	4252      	negs	r2, r2
 801e1f4:	61a2      	str	r2, [r4, #24]
 801e1f6:	6922      	ldr	r2, [r4, #16]
 801e1f8:	b942      	cbnz	r2, 801e20c <__swsetup_r+0xa4>
 801e1fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e1fe:	d1c5      	bne.n	801e18c <__swsetup_r+0x24>
 801e200:	bd38      	pop	{r3, r4, r5, pc}
 801e202:	0799      	lsls	r1, r3, #30
 801e204:	bf58      	it	pl
 801e206:	6962      	ldrpl	r2, [r4, #20]
 801e208:	60a2      	str	r2, [r4, #8]
 801e20a:	e7f4      	b.n	801e1f6 <__swsetup_r+0x8e>
 801e20c:	2000      	movs	r0, #0
 801e20e:	e7f7      	b.n	801e200 <__swsetup_r+0x98>
 801e210:	24000350 	.word	0x24000350

0801e214 <_raise_r>:
 801e214:	291f      	cmp	r1, #31
 801e216:	b538      	push	{r3, r4, r5, lr}
 801e218:	4605      	mov	r5, r0
 801e21a:	460c      	mov	r4, r1
 801e21c:	d904      	bls.n	801e228 <_raise_r+0x14>
 801e21e:	2316      	movs	r3, #22
 801e220:	6003      	str	r3, [r0, #0]
 801e222:	f04f 30ff 	mov.w	r0, #4294967295
 801e226:	bd38      	pop	{r3, r4, r5, pc}
 801e228:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e22a:	b112      	cbz	r2, 801e232 <_raise_r+0x1e>
 801e22c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e230:	b94b      	cbnz	r3, 801e246 <_raise_r+0x32>
 801e232:	4628      	mov	r0, r5
 801e234:	f000 f830 	bl	801e298 <_getpid_r>
 801e238:	4622      	mov	r2, r4
 801e23a:	4601      	mov	r1, r0
 801e23c:	4628      	mov	r0, r5
 801e23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e242:	f000 b817 	b.w	801e274 <_kill_r>
 801e246:	2b01      	cmp	r3, #1
 801e248:	d00a      	beq.n	801e260 <_raise_r+0x4c>
 801e24a:	1c59      	adds	r1, r3, #1
 801e24c:	d103      	bne.n	801e256 <_raise_r+0x42>
 801e24e:	2316      	movs	r3, #22
 801e250:	6003      	str	r3, [r0, #0]
 801e252:	2001      	movs	r0, #1
 801e254:	e7e7      	b.n	801e226 <_raise_r+0x12>
 801e256:	2100      	movs	r1, #0
 801e258:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e25c:	4620      	mov	r0, r4
 801e25e:	4798      	blx	r3
 801e260:	2000      	movs	r0, #0
 801e262:	e7e0      	b.n	801e226 <_raise_r+0x12>

0801e264 <raise>:
 801e264:	4b02      	ldr	r3, [pc, #8]	@ (801e270 <raise+0xc>)
 801e266:	4601      	mov	r1, r0
 801e268:	6818      	ldr	r0, [r3, #0]
 801e26a:	f7ff bfd3 	b.w	801e214 <_raise_r>
 801e26e:	bf00      	nop
 801e270:	24000350 	.word	0x24000350

0801e274 <_kill_r>:
 801e274:	b538      	push	{r3, r4, r5, lr}
 801e276:	4d07      	ldr	r5, [pc, #28]	@ (801e294 <_kill_r+0x20>)
 801e278:	2300      	movs	r3, #0
 801e27a:	4604      	mov	r4, r0
 801e27c:	4608      	mov	r0, r1
 801e27e:	4611      	mov	r1, r2
 801e280:	602b      	str	r3, [r5, #0]
 801e282:	f7e4 fcb3 	bl	8002bec <_kill>
 801e286:	1c43      	adds	r3, r0, #1
 801e288:	d102      	bne.n	801e290 <_kill_r+0x1c>
 801e28a:	682b      	ldr	r3, [r5, #0]
 801e28c:	b103      	cbz	r3, 801e290 <_kill_r+0x1c>
 801e28e:	6023      	str	r3, [r4, #0]
 801e290:	bd38      	pop	{r3, r4, r5, pc}
 801e292:	bf00      	nop
 801e294:	24048fec 	.word	0x24048fec

0801e298 <_getpid_r>:
 801e298:	f7e4 bca0 	b.w	8002bdc <_getpid>

0801e29c <__swhatbuf_r>:
 801e29c:	b570      	push	{r4, r5, r6, lr}
 801e29e:	460c      	mov	r4, r1
 801e2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e2a4:	2900      	cmp	r1, #0
 801e2a6:	b096      	sub	sp, #88	@ 0x58
 801e2a8:	4615      	mov	r5, r2
 801e2aa:	461e      	mov	r6, r3
 801e2ac:	da0d      	bge.n	801e2ca <__swhatbuf_r+0x2e>
 801e2ae:	89a3      	ldrh	r3, [r4, #12]
 801e2b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e2b4:	f04f 0100 	mov.w	r1, #0
 801e2b8:	bf14      	ite	ne
 801e2ba:	2340      	movne	r3, #64	@ 0x40
 801e2bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e2c0:	2000      	movs	r0, #0
 801e2c2:	6031      	str	r1, [r6, #0]
 801e2c4:	602b      	str	r3, [r5, #0]
 801e2c6:	b016      	add	sp, #88	@ 0x58
 801e2c8:	bd70      	pop	{r4, r5, r6, pc}
 801e2ca:	466a      	mov	r2, sp
 801e2cc:	f000 f848 	bl	801e360 <_fstat_r>
 801e2d0:	2800      	cmp	r0, #0
 801e2d2:	dbec      	blt.n	801e2ae <__swhatbuf_r+0x12>
 801e2d4:	9901      	ldr	r1, [sp, #4]
 801e2d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e2da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e2de:	4259      	negs	r1, r3
 801e2e0:	4159      	adcs	r1, r3
 801e2e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e2e6:	e7eb      	b.n	801e2c0 <__swhatbuf_r+0x24>

0801e2e8 <__smakebuf_r>:
 801e2e8:	898b      	ldrh	r3, [r1, #12]
 801e2ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e2ec:	079d      	lsls	r5, r3, #30
 801e2ee:	4606      	mov	r6, r0
 801e2f0:	460c      	mov	r4, r1
 801e2f2:	d507      	bpl.n	801e304 <__smakebuf_r+0x1c>
 801e2f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e2f8:	6023      	str	r3, [r4, #0]
 801e2fa:	6123      	str	r3, [r4, #16]
 801e2fc:	2301      	movs	r3, #1
 801e2fe:	6163      	str	r3, [r4, #20]
 801e300:	b003      	add	sp, #12
 801e302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e304:	ab01      	add	r3, sp, #4
 801e306:	466a      	mov	r2, sp
 801e308:	f7ff ffc8 	bl	801e29c <__swhatbuf_r>
 801e30c:	9f00      	ldr	r7, [sp, #0]
 801e30e:	4605      	mov	r5, r0
 801e310:	4639      	mov	r1, r7
 801e312:	4630      	mov	r0, r6
 801e314:	f7fd fab2 	bl	801b87c <_malloc_r>
 801e318:	b948      	cbnz	r0, 801e32e <__smakebuf_r+0x46>
 801e31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e31e:	059a      	lsls	r2, r3, #22
 801e320:	d4ee      	bmi.n	801e300 <__smakebuf_r+0x18>
 801e322:	f023 0303 	bic.w	r3, r3, #3
 801e326:	f043 0302 	orr.w	r3, r3, #2
 801e32a:	81a3      	strh	r3, [r4, #12]
 801e32c:	e7e2      	b.n	801e2f4 <__smakebuf_r+0xc>
 801e32e:	89a3      	ldrh	r3, [r4, #12]
 801e330:	6020      	str	r0, [r4, #0]
 801e332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e336:	81a3      	strh	r3, [r4, #12]
 801e338:	9b01      	ldr	r3, [sp, #4]
 801e33a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e33e:	b15b      	cbz	r3, 801e358 <__smakebuf_r+0x70>
 801e340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e344:	4630      	mov	r0, r6
 801e346:	f000 f81d 	bl	801e384 <_isatty_r>
 801e34a:	b128      	cbz	r0, 801e358 <__smakebuf_r+0x70>
 801e34c:	89a3      	ldrh	r3, [r4, #12]
 801e34e:	f023 0303 	bic.w	r3, r3, #3
 801e352:	f043 0301 	orr.w	r3, r3, #1
 801e356:	81a3      	strh	r3, [r4, #12]
 801e358:	89a3      	ldrh	r3, [r4, #12]
 801e35a:	431d      	orrs	r5, r3
 801e35c:	81a5      	strh	r5, [r4, #12]
 801e35e:	e7cf      	b.n	801e300 <__smakebuf_r+0x18>

0801e360 <_fstat_r>:
 801e360:	b538      	push	{r3, r4, r5, lr}
 801e362:	4d07      	ldr	r5, [pc, #28]	@ (801e380 <_fstat_r+0x20>)
 801e364:	2300      	movs	r3, #0
 801e366:	4604      	mov	r4, r0
 801e368:	4608      	mov	r0, r1
 801e36a:	4611      	mov	r1, r2
 801e36c:	602b      	str	r3, [r5, #0]
 801e36e:	f7e4 fc9d 	bl	8002cac <_fstat>
 801e372:	1c43      	adds	r3, r0, #1
 801e374:	d102      	bne.n	801e37c <_fstat_r+0x1c>
 801e376:	682b      	ldr	r3, [r5, #0]
 801e378:	b103      	cbz	r3, 801e37c <_fstat_r+0x1c>
 801e37a:	6023      	str	r3, [r4, #0]
 801e37c:	bd38      	pop	{r3, r4, r5, pc}
 801e37e:	bf00      	nop
 801e380:	24048fec 	.word	0x24048fec

0801e384 <_isatty_r>:
 801e384:	b538      	push	{r3, r4, r5, lr}
 801e386:	4d06      	ldr	r5, [pc, #24]	@ (801e3a0 <_isatty_r+0x1c>)
 801e388:	2300      	movs	r3, #0
 801e38a:	4604      	mov	r4, r0
 801e38c:	4608      	mov	r0, r1
 801e38e:	602b      	str	r3, [r5, #0]
 801e390:	f7e4 fc9c 	bl	8002ccc <_isatty>
 801e394:	1c43      	adds	r3, r0, #1
 801e396:	d102      	bne.n	801e39e <_isatty_r+0x1a>
 801e398:	682b      	ldr	r3, [r5, #0]
 801e39a:	b103      	cbz	r3, 801e39e <_isatty_r+0x1a>
 801e39c:	6023      	str	r3, [r4, #0]
 801e39e:	bd38      	pop	{r3, r4, r5, pc}
 801e3a0:	24048fec 	.word	0x24048fec

0801e3a4 <checkint>:
 801e3a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e3a8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e3ac:	429a      	cmp	r2, r3
 801e3ae:	b570      	push	{r4, r5, r6, lr}
 801e3b0:	dd2a      	ble.n	801e408 <checkint+0x64>
 801e3b2:	f240 4333 	movw	r3, #1075	@ 0x433
 801e3b6:	429a      	cmp	r2, r3
 801e3b8:	dc24      	bgt.n	801e404 <checkint+0x60>
 801e3ba:	1a9b      	subs	r3, r3, r2
 801e3bc:	f1a3 0620 	sub.w	r6, r3, #32
 801e3c0:	f04f 32ff 	mov.w	r2, #4294967295
 801e3c4:	fa02 f403 	lsl.w	r4, r2, r3
 801e3c8:	fa02 f606 	lsl.w	r6, r2, r6
 801e3cc:	f1c3 0520 	rsb	r5, r3, #32
 801e3d0:	fa22 f505 	lsr.w	r5, r2, r5
 801e3d4:	4334      	orrs	r4, r6
 801e3d6:	432c      	orrs	r4, r5
 801e3d8:	409a      	lsls	r2, r3
 801e3da:	ea20 0202 	bic.w	r2, r0, r2
 801e3de:	ea21 0404 	bic.w	r4, r1, r4
 801e3e2:	4322      	orrs	r2, r4
 801e3e4:	f1a3 0420 	sub.w	r4, r3, #32
 801e3e8:	f1c3 0220 	rsb	r2, r3, #32
 801e3ec:	d10c      	bne.n	801e408 <checkint+0x64>
 801e3ee:	40d8      	lsrs	r0, r3
 801e3f0:	fa01 f302 	lsl.w	r3, r1, r2
 801e3f4:	4318      	orrs	r0, r3
 801e3f6:	40e1      	lsrs	r1, r4
 801e3f8:	4308      	orrs	r0, r1
 801e3fa:	f000 0001 	and.w	r0, r0, #1
 801e3fe:	f1d0 0002 	rsbs	r0, r0, #2
 801e402:	bd70      	pop	{r4, r5, r6, pc}
 801e404:	2002      	movs	r0, #2
 801e406:	e7fc      	b.n	801e402 <checkint+0x5e>
 801e408:	2000      	movs	r0, #0
 801e40a:	e7fa      	b.n	801e402 <checkint+0x5e>
 801e40c:	0000      	movs	r0, r0
	...

0801e410 <pow>:
 801e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e414:	ee10 4a90 	vmov	r4, s1
 801e418:	ed2d 8b0a 	vpush	{d8-d12}
 801e41c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e420:	ee11 aa90 	vmov	sl, s3
 801e424:	f108 32ff 	add.w	r2, r8, #4294967295
 801e428:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e42c:	429a      	cmp	r2, r3
 801e42e:	ee10 5a10 	vmov	r5, s0
 801e432:	ee11 0a10 	vmov	r0, s2
 801e436:	b087      	sub	sp, #28
 801e438:	46c4      	mov	ip, r8
 801e43a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e43e:	d806      	bhi.n	801e44e <pow+0x3e>
 801e440:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e444:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e448:	2b7f      	cmp	r3, #127	@ 0x7f
 801e44a:	f240 8157 	bls.w	801e6fc <pow+0x2ec>
 801e44e:	1802      	adds	r2, r0, r0
 801e450:	eb4a 010a 	adc.w	r1, sl, sl
 801e454:	f06f 0b01 	mvn.w	fp, #1
 801e458:	1e57      	subs	r7, r2, #1
 801e45a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e45e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e462:	45bb      	cmp	fp, r7
 801e464:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e468:	d242      	bcs.n	801e4f0 <pow+0xe0>
 801e46a:	ea52 0301 	orrs.w	r3, r2, r1
 801e46e:	f04f 0300 	mov.w	r3, #0
 801e472:	d10c      	bne.n	801e48e <pow+0x7e>
 801e474:	196d      	adds	r5, r5, r5
 801e476:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e47a:	4164      	adcs	r4, r4
 801e47c:	42ab      	cmp	r3, r5
 801e47e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e482:	41a3      	sbcs	r3, r4
 801e484:	f0c0 808f 	bcc.w	801e5a6 <pow+0x196>
 801e488:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e48c:	e02b      	b.n	801e4e6 <pow+0xd6>
 801e48e:	4ed4      	ldr	r6, [pc, #848]	@ (801e7e0 <pow+0x3d0>)
 801e490:	42b4      	cmp	r4, r6
 801e492:	bf08      	it	eq
 801e494:	429d      	cmpeq	r5, r3
 801e496:	d109      	bne.n	801e4ac <pow+0x9c>
 801e498:	1800      	adds	r0, r0, r0
 801e49a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e49e:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e4a2:	4283      	cmp	r3, r0
 801e4a4:	4bcf      	ldr	r3, [pc, #828]	@ (801e7e4 <pow+0x3d4>)
 801e4a6:	eb73 030a 	sbcs.w	r3, r3, sl
 801e4aa:	e7eb      	b.n	801e484 <pow+0x74>
 801e4ac:	196d      	adds	r5, r5, r5
 801e4ae:	48ce      	ldr	r0, [pc, #824]	@ (801e7e8 <pow+0x3d8>)
 801e4b0:	4164      	adcs	r4, r4
 801e4b2:	42ab      	cmp	r3, r5
 801e4b4:	eb70 0604 	sbcs.w	r6, r0, r4
 801e4b8:	d375      	bcc.n	801e5a6 <pow+0x196>
 801e4ba:	4281      	cmp	r1, r0
 801e4bc:	bf08      	it	eq
 801e4be:	429a      	cmpeq	r2, r3
 801e4c0:	d171      	bne.n	801e5a6 <pow+0x196>
 801e4c2:	4aca      	ldr	r2, [pc, #808]	@ (801e7ec <pow+0x3dc>)
 801e4c4:	4294      	cmp	r4, r2
 801e4c6:	bf08      	it	eq
 801e4c8:	429d      	cmpeq	r5, r3
 801e4ca:	d0dd      	beq.n	801e488 <pow+0x78>
 801e4cc:	4294      	cmp	r4, r2
 801e4ce:	ea6f 0a0a 	mvn.w	sl, sl
 801e4d2:	bf34      	ite	cc
 801e4d4:	2400      	movcc	r4, #0
 801e4d6:	2401      	movcs	r4, #1
 801e4d8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e4dc:	4554      	cmp	r4, sl
 801e4de:	f040 81dc 	bne.w	801e89a <pow+0x48a>
 801e4e2:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e4e6:	b007      	add	sp, #28
 801e4e8:	ecbd 8b0a 	vpop	{d8-d12}
 801e4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4f0:	196f      	adds	r7, r5, r5
 801e4f2:	eb44 0904 	adc.w	r9, r4, r4
 801e4f6:	1e7a      	subs	r2, r7, #1
 801e4f8:	f169 0300 	sbc.w	r3, r9, #0
 801e4fc:	4593      	cmp	fp, r2
 801e4fe:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e502:	d225      	bcs.n	801e550 <pow+0x140>
 801e504:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e508:	2c00      	cmp	r4, #0
 801e50a:	da13      	bge.n	801e534 <pow+0x124>
 801e50c:	4651      	mov	r1, sl
 801e50e:	f7ff ff49 	bl	801e3a4 <checkint>
 801e512:	2801      	cmp	r0, #1
 801e514:	d10e      	bne.n	801e534 <pow+0x124>
 801e516:	eeb1 0b40 	vneg.f64	d0, d0
 801e51a:	ea57 0909 	orrs.w	r9, r7, r9
 801e51e:	d10b      	bne.n	801e538 <pow+0x128>
 801e520:	f1ba 0f00 	cmp.w	sl, #0
 801e524:	dadf      	bge.n	801e4e6 <pow+0xd6>
 801e526:	b007      	add	sp, #28
 801e528:	ecbd 8b0a 	vpop	{d8-d12}
 801e52c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e530:	f000 b9ee 	b.w	801e910 <__math_divzero>
 801e534:	2000      	movs	r0, #0
 801e536:	e7f0      	b.n	801e51a <pow+0x10a>
 801e538:	f1ba 0f00 	cmp.w	sl, #0
 801e53c:	dad3      	bge.n	801e4e6 <pow+0xd6>
 801e53e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e542:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e546:	ed8d 7b00 	vstr	d7, [sp]
 801e54a:	ed9d 0b00 	vldr	d0, [sp]
 801e54e:	e7ca      	b.n	801e4e6 <pow+0xd6>
 801e550:	2c00      	cmp	r4, #0
 801e552:	da2b      	bge.n	801e5ac <pow+0x19c>
 801e554:	4651      	mov	r1, sl
 801e556:	f7ff ff25 	bl	801e3a4 <checkint>
 801e55a:	b930      	cbnz	r0, 801e56a <pow+0x15a>
 801e55c:	b007      	add	sp, #28
 801e55e:	ecbd 8b0a 	vpop	{d8-d12}
 801e562:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e566:	f000 b9eb 	b.w	801e940 <__math_invalid>
 801e56a:	1e41      	subs	r1, r0, #1
 801e56c:	4248      	negs	r0, r1
 801e56e:	4148      	adcs	r0, r1
 801e570:	0480      	lsls	r0, r0, #18
 801e572:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e576:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e57a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e57e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e582:	2b7f      	cmp	r3, #127	@ 0x7f
 801e584:	d92d      	bls.n	801e5e2 <pow+0x1d2>
 801e586:	4b96      	ldr	r3, [pc, #600]	@ (801e7e0 <pow+0x3d0>)
 801e588:	2000      	movs	r0, #0
 801e58a:	429c      	cmp	r4, r3
 801e58c:	bf08      	it	eq
 801e58e:	4285      	cmpeq	r5, r0
 801e590:	f43f af7a 	beq.w	801e488 <pow+0x78>
 801e594:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e598:	428a      	cmp	r2, r1
 801e59a:	d80c      	bhi.n	801e5b6 <pow+0x1a6>
 801e59c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e5a0:	42a8      	cmp	r0, r5
 801e5a2:	41a3      	sbcs	r3, r4
 801e5a4:	d204      	bcs.n	801e5b0 <pow+0x1a0>
 801e5a6:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e5aa:	e79c      	b.n	801e4e6 <pow+0xd6>
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	e7e4      	b.n	801e57a <pow+0x16a>
 801e5b0:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e5b4:	e797      	b.n	801e4e6 <pow+0xd6>
 801e5b6:	2d01      	cmp	r5, #1
 801e5b8:	eb74 0303 	sbcs.w	r3, r4, r3
 801e5bc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e5c0:	bf34      	ite	cc
 801e5c2:	2301      	movcc	r3, #1
 801e5c4:	2300      	movcs	r3, #0
 801e5c6:	4296      	cmp	r6, r2
 801e5c8:	bf8c      	ite	hi
 801e5ca:	2600      	movhi	r6, #0
 801e5cc:	2601      	movls	r6, #1
 801e5ce:	42b3      	cmp	r3, r6
 801e5d0:	f000 809c 	beq.w	801e70c <pow+0x2fc>
 801e5d4:	b007      	add	sp, #28
 801e5d6:	ecbd 8b0a 	vpop	{d8-d12}
 801e5da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5de:	f000 b98f 	b.w	801e900 <__math_oflow>
 801e5e2:	f1bc 0f00 	cmp.w	ip, #0
 801e5e6:	d10a      	bne.n	801e5fe <pow+0x1ee>
 801e5e8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e7d0 <pow+0x3c0>
 801e5ec:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e5f0:	ec53 2b17 	vmov	r2, r3, d7
 801e5f4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e5f8:	4615      	mov	r5, r2
 801e5fa:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e5fe:	4a7c      	ldr	r2, [pc, #496]	@ (801e7f0 <pow+0x3e0>)
 801e600:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e604:	4422      	add	r2, r4
 801e606:	1513      	asrs	r3, r2, #20
 801e608:	ee03 3a10 	vmov	s6, r3
 801e60c:	4b79      	ldr	r3, [pc, #484]	@ (801e7f4 <pow+0x3e4>)
 801e60e:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e612:	f36f 0213 	bfc	r2, #0, #20
 801e616:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e61a:	1aa7      	subs	r7, r4, r2
 801e61c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e620:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e624:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e628:	1e2e      	subs	r6, r5, #0
 801e62a:	ec47 6b14 	vmov	d4, r6, r7
 801e62e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e632:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e636:	ed93 5b00 	vldr	d5, [r3]
 801e63a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e63e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e642:	ed93 5b02 	vldr	d5, [r3, #8]
 801e646:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e64a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e64e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e652:	ed93 5b04 	vldr	d5, [r3, #16]
 801e656:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e65a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e65e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e662:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e666:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e66a:	eeb0 9b40 	vmov.f64	d9, d0
 801e66e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e672:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e676:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e67a:	ed93 5b06 	vldr	d5, [r3, #24]
 801e67e:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e682:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e686:	ed93 4b08 	vldr	d4, [r3, #32]
 801e68a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e68e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e692:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e696:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e69a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e69e:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e6a2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e6a6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e6aa:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e6ae:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e6b2:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e6b6:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e6ba:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e6be:	ee16 3a90 	vmov	r3, s13
 801e6c2:	eeb0 5b46 	vmov.f64	d5, d6
 801e6c6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e6ca:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e6ce:	18b2      	adds	r2, r6, r2
 801e6d0:	2a3e      	cmp	r2, #62	@ 0x3e
 801e6d2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e6d6:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e6da:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e6de:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e6e2:	d91b      	bls.n	801e71c <pow+0x30c>
 801e6e4:	2a00      	cmp	r2, #0
 801e6e6:	da0b      	bge.n	801e700 <pow+0x2f0>
 801e6e8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e6ec:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e6f0:	2800      	cmp	r0, #0
 801e6f2:	f43f aef8 	beq.w	801e4e6 <pow+0xd6>
 801e6f6:	eeb1 0b40 	vneg.f64	d0, d0
 801e6fa:	e6f4      	b.n	801e4e6 <pow+0xd6>
 801e6fc:	2000      	movs	r0, #0
 801e6fe:	e77e      	b.n	801e5fe <pow+0x1ee>
 801e700:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e704:	d909      	bls.n	801e71a <pow+0x30a>
 801e706:	2b00      	cmp	r3, #0
 801e708:	f6bf af64 	bge.w	801e5d4 <pow+0x1c4>
 801e70c:	b007      	add	sp, #28
 801e70e:	ecbd 8b0a 	vpop	{d8-d12}
 801e712:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e716:	f000 b8eb 	b.w	801e8f0 <__math_uflow>
 801e71a:	2600      	movs	r6, #0
 801e71c:	4936      	ldr	r1, [pc, #216]	@ (801e7f8 <pow+0x3e8>)
 801e71e:	ed91 4b02 	vldr	d4, [r1, #8]
 801e722:	ed91 3b00 	vldr	d3, [r1]
 801e726:	eeb0 7b44 	vmov.f64	d7, d4
 801e72a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e72e:	ee17 5a10 	vmov	r5, s14
 801e732:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e736:	ed91 4b04 	vldr	d4, [r1, #16]
 801e73a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e73e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e742:	ed91 4b06 	vldr	d4, [r1, #24]
 801e746:	18dc      	adds	r4, r3, r3
 801e748:	f104 030f 	add.w	r3, r4, #15
 801e74c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e750:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e754:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e758:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e75c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e760:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e764:	ed91 4b08 	vldr	d4, [r1, #32]
 801e768:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e76c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e770:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e774:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e778:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e77c:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e780:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e784:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e788:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e78c:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e790:	1940      	adds	r0, r0, r5
 801e792:	2700      	movs	r7, #0
 801e794:	eb17 020c 	adds.w	r2, r7, ip
 801e798:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e79c:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7a0:	2e00      	cmp	r6, #0
 801e7a2:	d175      	bne.n	801e890 <pow+0x480>
 801e7a4:	42bd      	cmp	r5, r7
 801e7a6:	db29      	blt.n	801e7fc <pow+0x3ec>
 801e7a8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e7ac:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e7b0:	4610      	mov	r0, r2
 801e7b2:	ec41 0b10 	vmov	d0, r0, r1
 801e7b6:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e7ba:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e7d8 <pow+0x3c8>
 801e7be:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e7c2:	b007      	add	sp, #28
 801e7c4:	ecbd 8b0a 	vpop	{d8-d12}
 801e7c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7cc:	f000 b8d0 	b.w	801e970 <__math_check_oflow>
 801e7d0:	00000000 	.word	0x00000000
 801e7d4:	43300000 	.word	0x43300000
 801e7d8:	00000000 	.word	0x00000000
 801e7dc:	7f000000 	.word	0x7f000000
 801e7e0:	3ff00000 	.word	0x3ff00000
 801e7e4:	fff00000 	.word	0xfff00000
 801e7e8:	ffe00000 	.word	0xffe00000
 801e7ec:	7fe00000 	.word	0x7fe00000
 801e7f0:	c0196aab 	.word	0xc0196aab
 801e7f4:	0801f5d0 	.word	0x0801f5d0
 801e7f8:	08020618 	.word	0x08020618
 801e7fc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e800:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e804:	4610      	mov	r0, r2
 801e806:	ec41 0b15 	vmov	d5, r0, r1
 801e80a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e80e:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e812:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e816:	eeb0 4bc7 	vabs.f64	d4, d7
 801e81a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e822:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e8a0 <pow+0x490>
 801e826:	d52a      	bpl.n	801e87e <pow+0x46e>
 801e828:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e82c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e834:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e838:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e83c:	bf58      	it	pl
 801e83e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e842:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e846:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e84a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e84e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e852:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e856:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e85a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e862:	d104      	bne.n	801e86e <pow+0x45e>
 801e864:	4632      	mov	r2, r6
 801e866:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e86a:	ec43 2b17 	vmov	d7, r2, r3
 801e86e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e872:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e876:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e87a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e87e:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e882:	b007      	add	sp, #28
 801e884:	ecbd 8b0a 	vpop	{d8-d12}
 801e888:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e88c:	f000 b867 	b.w	801e95e <__math_check_uflow>
 801e890:	ec43 2b10 	vmov	d0, r2, r3
 801e894:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e898:	e625      	b.n	801e4e6 <pow+0xd6>
 801e89a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e8a8 <pow+0x498>
 801e89e:	e622      	b.n	801e4e6 <pow+0xd6>
 801e8a0:	00000000 	.word	0x00000000
 801e8a4:	00100000 	.word	0x00100000
	...

0801e8b0 <with_errno>:
 801e8b0:	b510      	push	{r4, lr}
 801e8b2:	ed2d 8b02 	vpush	{d8}
 801e8b6:	eeb0 8b40 	vmov.f64	d8, d0
 801e8ba:	4604      	mov	r4, r0
 801e8bc:	f7fd fe28 	bl	801c510 <__errno>
 801e8c0:	eeb0 0b48 	vmov.f64	d0, d8
 801e8c4:	ecbd 8b02 	vpop	{d8}
 801e8c8:	6004      	str	r4, [r0, #0]
 801e8ca:	bd10      	pop	{r4, pc}

0801e8cc <xflow>:
 801e8cc:	b082      	sub	sp, #8
 801e8ce:	b158      	cbz	r0, 801e8e8 <xflow+0x1c>
 801e8d0:	eeb1 7b40 	vneg.f64	d7, d0
 801e8d4:	ed8d 7b00 	vstr	d7, [sp]
 801e8d8:	ed9d 7b00 	vldr	d7, [sp]
 801e8dc:	2022      	movs	r0, #34	@ 0x22
 801e8de:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e8e2:	b002      	add	sp, #8
 801e8e4:	f7ff bfe4 	b.w	801e8b0 <with_errno>
 801e8e8:	eeb0 7b40 	vmov.f64	d7, d0
 801e8ec:	e7f2      	b.n	801e8d4 <xflow+0x8>
	...

0801e8f0 <__math_uflow>:
 801e8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e8f8 <__math_uflow+0x8>
 801e8f4:	f7ff bfea 	b.w	801e8cc <xflow>
 801e8f8:	00000000 	.word	0x00000000
 801e8fc:	10000000 	.word	0x10000000

0801e900 <__math_oflow>:
 801e900:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e908 <__math_oflow+0x8>
 801e904:	f7ff bfe2 	b.w	801e8cc <xflow>
 801e908:	00000000 	.word	0x00000000
 801e90c:	70000000 	.word	0x70000000

0801e910 <__math_divzero>:
 801e910:	b082      	sub	sp, #8
 801e912:	2800      	cmp	r0, #0
 801e914:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e918:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e91c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e920:	ed8d 7b00 	vstr	d7, [sp]
 801e924:	ed9d 0b00 	vldr	d0, [sp]
 801e928:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e938 <__math_divzero+0x28>
 801e92c:	2022      	movs	r0, #34	@ 0x22
 801e92e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e932:	b002      	add	sp, #8
 801e934:	f7ff bfbc 	b.w	801e8b0 <with_errno>
	...

0801e940 <__math_invalid>:
 801e940:	eeb0 7b40 	vmov.f64	d7, d0
 801e944:	eeb4 7b47 	vcmp.f64	d7, d7
 801e948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e94c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e950:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e954:	d602      	bvs.n	801e95c <__math_invalid+0x1c>
 801e956:	2021      	movs	r0, #33	@ 0x21
 801e958:	f7ff bfaa 	b.w	801e8b0 <with_errno>
 801e95c:	4770      	bx	lr

0801e95e <__math_check_uflow>:
 801e95e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e966:	d102      	bne.n	801e96e <__math_check_uflow+0x10>
 801e968:	2022      	movs	r0, #34	@ 0x22
 801e96a:	f7ff bfa1 	b.w	801e8b0 <with_errno>
 801e96e:	4770      	bx	lr

0801e970 <__math_check_oflow>:
 801e970:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e990 <__math_check_oflow+0x20>
 801e974:	eeb0 7bc0 	vabs.f64	d7, d0
 801e978:	eeb4 7b46 	vcmp.f64	d7, d6
 801e97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e980:	dd02      	ble.n	801e988 <__math_check_oflow+0x18>
 801e982:	2022      	movs	r0, #34	@ 0x22
 801e984:	f7ff bf94 	b.w	801e8b0 <with_errno>
 801e988:	4770      	bx	lr
 801e98a:	bf00      	nop
 801e98c:	f3af 8000 	nop.w
 801e990:	ffffffff 	.word	0xffffffff
 801e994:	7fefffff 	.word	0x7fefffff

0801e998 <_init>:
 801e998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e99a:	bf00      	nop
 801e99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e99e:	bc08      	pop	{r3}
 801e9a0:	469e      	mov	lr, r3
 801e9a2:	4770      	bx	lr

0801e9a4 <_fini>:
 801e9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9a6:	bf00      	nop
 801e9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9aa:	bc08      	pop	{r3}
 801e9ac:	469e      	mov	lr, r3
 801e9ae:	4770      	bx	lr
