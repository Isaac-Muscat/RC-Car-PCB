
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001123c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  080114dc  080114dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080117f8  080117f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011800  08011800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011804  08011804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  08011808  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020fc  24000154  0801195c  00013154  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002250  0801195c  00013250  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013154  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e7be  00000000  00000000  00013182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000053ec  00000000  00000000  00041940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002388  00000000  00000000  00046d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bb8  00000000  00000000  000490b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e972  00000000  00000000  0004ac70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031d05  00000000  00000000  000895e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00183fdd  00000000  00000000  000bb2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023f2c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009f98  00000000  00000000  0023f308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  002492a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080114c4 	.word	0x080114c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	080114c4 	.word	0x080114c4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09a      	sub	sp, #104	@ 0x68
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 fb4f 	bl	8000d64 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fffd 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f833 	bl	8000734 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 f8ab 	bl	8000828 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 facf 	bl	8000c74 <MX_GPIO_Init>
  MX_MDMA_Init();
 80006d6:	f000 faad 	bl	8000c34 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fa5f 	bl	8000b9c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f00f fd01 	bl	80100e4 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 80006e2:	f000 f98f 	bl	8000a04 <MX_I2C2_Init>
  MX_TIM14_Init();
 80006e6:	f000 fa37 	bl	8000b58 <MX_TIM14_Init>
  MX_JPEG_Init();
 80006ea:	f000 f9cb 	bl	8000a84 <MX_JPEG_Init>
  MX_I2C1_Init();
 80006ee:	f000 f949 	bl	8000984 <MX_I2C1_Init>
  MX_SPI4_Init();
 80006f2:	f000 f9db 	bl	8000aac <MX_SPI4_Init>
  MX_ADC1_Init();
 80006f6:	f000 f8c9 	bl	800088c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(3000);

  // ------------------------------------------------------------ SETUP USB MESSAGING -- //
  uint8_t usb_msg[100] = {0};	// Reserve 100 bytes for USB Debug messages
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2264      	movs	r2, #100	@ 0x64
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f010 fa61 	bl	8010bc8 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf(usb_msg, "TEST\r\n");
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4909      	ldr	r1, [pc, #36]	@ (8000730 <main+0x74>)
 800070a:	4618      	mov	r0, r3
 800070c:	f010 fa3a 	bl	8010b84 <siprintf>
	  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fde4 	bl	80002e0 <strlen>
 8000718:	4602      	mov	r2, r0
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f00f fdb0 	bl	8010284 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000728:	f001 f85e 	bl	80017e8 <HAL_Delay>
  {
 800072c:	bf00      	nop
 800072e:	e7ea      	b.n	8000706 <main+0x4a>
 8000730:	080114dc 	.word	0x080114dc

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09c      	sub	sp, #112	@ 0x70
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073e:	224c      	movs	r2, #76	@ 0x4c
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f010 fa40 	bl	8010bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2220      	movs	r2, #32
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f010 fa3a 	bl	8010bc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000754:	2002      	movs	r0, #2
 8000756:	f006 ffd9 	bl	800770c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <SystemClock_Config+0xec>)
 8000760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000762:	4a2f      	ldr	r2, [pc, #188]	@ (8000820 <SystemClock_Config+0xec>)
 8000764:	f023 0301 	bic.w	r3, r3, #1
 8000768:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800076a:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <SystemClock_Config+0xec>)
 800076c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <SystemClock_Config+0xf0>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a2a      	ldr	r2, [pc, #168]	@ (8000824 <SystemClock_Config+0xf0>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <SystemClock_Config+0xf0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078c:	bf00      	nop
 800078e:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <SystemClock_Config+0xf0>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800079a:	d1f8      	bne.n	800078e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007b2:	2318      	movs	r3, #24
 80007b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80007ba:	2306      	movs	r3, #6
 80007bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c2:	230c      	movs	r3, #12
 80007c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 ffe4 	bl	80077a0 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007de:	f000 faed 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	233f      	movs	r3, #63	@ 0x3f
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007f2:	2340      	movs	r3, #64	@ 0x40
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f6:	2340      	movs	r3, #64	@ 0x40
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000800:	2340      	movs	r3, #64	@ 0x40
 8000802:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2102      	movs	r1, #2
 8000808:	4618      	mov	r0, r3
 800080a:	f007 fc23 	bl	8008054 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000814:	f000 fad2 	bl	8000dbc <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3770      	adds	r7, #112	@ 0x70
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	58000400 	.word	0x58000400
 8000824:	58024800 	.word	0x58024800

08000828 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b0b0      	sub	sp, #192	@ 0xc0
 800082c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	22c0      	movs	r2, #192	@ 0xc0
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f010 f9c7 	bl	8010bc8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 800083a:	f04f 0208 	mov.w	r2, #8
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 800084a:	230c      	movs	r3, #12
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000856:	2303      	movs	r3, #3
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800085a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000860:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000864:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 800086a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4618      	mov	r0, r3
 8000876:	f007 ff79 	bl	800876c <HAL_RCCEx_PeriphCLKConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000880:	f000 fa9c 	bl	8000dbc <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	37c0      	adds	r7, #192	@ 0xc0
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b0:	4b31      	ldr	r3, [pc, #196]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008b2:	4a32      	ldr	r2, [pc, #200]	@ (800097c <MX_ADC1_Init+0xf0>)
 80008b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d4:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008da:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008dc:	2201      	movs	r2, #1
 80008de:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e6:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_ADC1_Init+0xec>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_ADC1_Init+0xec>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000904:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_ADC1_Init+0xec>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_ADC1_Init+0xec>)
 800090e:	2201      	movs	r2, #1
 8000910:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000912:	4819      	ldr	r0, [pc, #100]	@ (8000978 <MX_ADC1_Init+0xec>)
 8000914:	f001 f956 	bl	8001bc4 <HAL_ADC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800091e:	f000 fa4d 	bl	8000dbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4812      	ldr	r0, [pc, #72]	@ (8000978 <MX_ADC1_Init+0xec>)
 800092e:	f001 ff0d 	bl	800274c <HAL_ADCEx_MultiModeConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000938:	f000 fa40 	bl	8000dbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800093c:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_ADC1_Init+0xf4>)
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000940:	2306      	movs	r3, #6
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000948:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800094c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800094e:	2304      	movs	r3, #4
 8000950:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	@ (8000978 <MX_ADC1_Init+0xec>)
 8000960:	f001 fad2 	bl	8001f08 <HAL_ADC_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800096a:	f000 fa27 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	@ 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000170 	.word	0x24000170
 800097c:	40022000 	.word	0x40022000
 8000980:	10c00010 	.word	0x10c00010

08000984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_I2C1_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <MX_I2C1_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_I2C1_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <MX_I2C1_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_I2C1_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009c0:	f002 fd2e 	bl	8003420 <HAL_I2C_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f000 f9f7 	bl	8000dbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009d2:	f003 fcca 	bl	800436a <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 f9ee 	bl	8000dbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009e4:	f003 fd0c 	bl	8004400 <HAL_I2CEx_ConfigDigitalFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 f9e5 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	240001d4 	.word	0x240001d4
 80009fc:	40005400 	.word	0x40005400
 8000a00:	00c0eaff 	.word	0x00c0eaff

08000a04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <MX_I2C2_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <MX_I2C2_Init+0x7c>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a3e:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a40:	f002 fcee 	bl	8003420 <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f000 f9b7 	bl	8000dbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a52:	f003 fc8a 	bl	800436a <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f000 f9ae 	bl	8000dbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a64:	f003 fccc 	bl	8004400 <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 f9a5 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	24000228 	.word	0x24000228
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	00c0eaff 	.word	0x00c0eaff

08000a84 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_JPEG_Init+0x20>)
 8000a8a:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <MX_JPEG_Init+0x24>)
 8000a8c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_JPEG_Init+0x20>)
 8000a90:	f003 fd02 	bl	8004498 <HAL_JPEG_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000a9a:	f000 f98f 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2400027c 	.word	0x2400027c
 8000aa8:	52003000 	.word	0x52003000

08000aac <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ab0:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000ab2:	4a28      	ldr	r2, [pc, #160]	@ (8000b54 <MX_SPI4_Init+0xa8>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ab6:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000ab8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000abc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000abe:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aca:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000ad8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000adc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b02:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_SPI4_Init+0xa4>)
 8000b3c:	f00a fb14 	bl	800b168 <HAL_SPI_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000b46:	f000 f939 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	240003ac 	.word	0x240003ac
 8000b54:	40013400 	.word	0x40013400

08000b58 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <MX_TIM14_Init+0x3c>)
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b98 <MX_TIM14_Init+0x40>)
 8000b60:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_TIM14_Init+0x3c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <MX_TIM14_Init+0x3c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_TIM14_Init+0x3c>)
 8000b70:	2205      	movs	r2, #5
 8000b72:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <MX_TIM14_Init+0x3c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_TIM14_Init+0x3c>)
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_TIM14_Init+0x3c>)
 8000b82:	f00a fc30 	bl	800b3e6 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b8c:	f000 f916 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	24000434 	.word	0x24000434
 8000b98:	40002000 	.word	0x40002000

08000b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <MX_USART1_UART_Init+0x94>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be4:	4811      	ldr	r0, [pc, #68]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000be6:	f00a fe4d 	bl	800b884 <HAL_UART_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bf0:	f000 f8e4 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bf8:	f00b fe55 	bl	800c8a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c02:	f000 f8db 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c06:	2100      	movs	r1, #0
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000c0a:	f00b fe8a 	bl	800c922 <HAL_UARTEx_SetRxFifoThreshold>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c14:	f000 f8d2 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000c1a:	f00b fe0b 	bl	800c834 <HAL_UARTEx_DisableFifoMode>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 f8ca 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24000480 	.word	0x24000480
 8000c30:	40011000 	.word	0x40011000

08000c34 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <MX_MDMA_Init+0x3c>)
 8000c3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c40:	4a0b      	ldr	r2, [pc, #44]	@ (8000c70 <MX_MDMA_Init+0x3c>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_MDMA_Init+0x3c>)
 8000c4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	207a      	movs	r0, #122	@ 0x7a
 8000c5e:	f001 ff2e 	bl	8002abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000c62:	207a      	movs	r0, #122	@ 0x7a
 8000c64:	f001 ff45 	bl	8002af2 <HAL_NVIC_EnableIRQ>

}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	58024400 	.word	0x58024400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c90:	4a31      	ldr	r2, [pc, #196]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cae:	4a2a      	ldr	r2, [pc, #168]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	4a13      	ldr	r2, [pc, #76]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_GPIO_Init+0xe4>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BTN_L_Pin */
  GPIO_InitStruct.Pin = BTN_L_Pin;
 8000d20:	2320      	movs	r3, #32
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	480a      	ldr	r0, [pc, #40]	@ (8000d5c <MX_GPIO_Init+0xe8>)
 8000d34:	f002 f9c4 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 8000d38:	2320      	movs	r3, #32
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_GPIO_Init+0xec>)
 8000d4c:	f002 f9b8 	bl	80030c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58020000 	.word	0x58020000
 8000d60:	58020800 	.word	0x58020800

08000d64 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d76:	f001 fed7 	bl	8002b28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d86:	231f      	movs	r3, #31
 8000d88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d8a:	2387      	movs	r3, #135	@ 0x87
 8000d8c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d92:	2300      	movs	r3, #0
 8000d94:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d96:	2301      	movs	r3, #1
 8000d98:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000da6:	463b      	mov	r3, r7
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fef5 	bl	8002b98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dae:	2004      	movs	r0, #4
 8000db0:	f001 fed2 	bl	8002b58 <HAL_MPU_Enable>

}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <Error_Handler+0x8>

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <HAL_MspInit+0x30>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd4:	4a08      	ldr	r2, [pc, #32]	@ (8000df8 <HAL_MspInit+0x30>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_MspInit+0x30>)
 8000de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	58024400 	.word	0x58024400

08000dfc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0bc      	sub	sp, #240	@ 0xf0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	22c0      	movs	r2, #192	@ 0xc0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f00f fed3 	bl	8010bc8 <memset>
  if(hadc->Instance==ADC1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a3a      	ldr	r2, [pc, #232]	@ (8000f10 <HAL_ADC_MspInit+0x114>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d16d      	bne.n	8000f08 <HAL_ADC_MspInit+0x10c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000e3c:	2380      	movs	r3, #128	@ 0x80
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 fc82 	bl	800876c <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000e6e:	f7ff ffa5 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000e74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e78:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e82:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_ADC_MspInit+0x118>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8000ecc:	2340      	movs	r3, #64	@ 0x40
 8000ece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <HAL_ADC_MspInit+0x11c>)
 8000ee6:	f002 f8eb 	bl	80030c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8000eea:	2310      	movs	r3, #16
 8000eec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <HAL_ADC_MspInit+0x120>)
 8000f04:	f002 f8dc 	bl	80030c0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f08:	bf00      	nop
 8000f0a:	37f0      	adds	r7, #240	@ 0xf0
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40022000 	.word	0x40022000
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020000 	.word	0x58020000
 8000f1c:	58020800 	.word	0x58020800

08000f20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	@ 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001030 <HAL_I2C_MspInit+0x110>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d12e      	bne.n	8000fa0 <HAL_I2C_MspInit+0x80>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	4a3a      	ldr	r2, [pc, #232]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f52:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f60:	23c0      	movs	r3, #192	@ 0xc0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f70:	2304      	movs	r3, #4
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	482f      	ldr	r0, [pc, #188]	@ (8001038 <HAL_I2C_MspInit+0x118>)
 8000f7c:	f002 f8a0 	bl	80030c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f86:	4a2b      	ldr	r2, [pc, #172]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000f88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f9e:	e043      	b.n	8001028 <HAL_I2C_MspInit+0x108>
  else if(hi2c->Instance==I2C2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a25      	ldr	r2, [pc, #148]	@ (800103c <HAL_I2C_MspInit+0x11c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d13e      	bne.n	8001028 <HAL_I2C_MspInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	4a20      	ldr	r2, [pc, #128]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fce:	2312      	movs	r3, #18
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4814      	ldr	r0, [pc, #80]	@ (8001038 <HAL_I2C_MspInit+0x118>)
 8000fe6:	f002 f86b 	bl	80030c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff0:	4a10      	ldr	r2, [pc, #64]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000ff2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ff6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <HAL_I2C_MspInit+0x114>)
 8000ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2021      	movs	r0, #33	@ 0x21
 800100e:	f001 fd56 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001012:	2021      	movs	r0, #33	@ 0x21
 8001014:	f001 fd6d 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2022      	movs	r0, #34	@ 0x22
 800101e:	f001 fd4e 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001022:	2022      	movs	r0, #34	@ 0x22
 8001024:	f001 fd65 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	@ 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40005400 	.word	0x40005400
 8001034:	58024400 	.word	0x58024400
 8001038:	58020400 	.word	0x58020400
 800103c:	40005800 	.word	0x40005800

08001040 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a55      	ldr	r2, [pc, #340]	@ (80011a4 <HAL_JPEG_MspInit+0x164>)
 800104e:	4293      	cmp	r3, r2
 8001050:	f040 80a3 	bne.w	800119a <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001054:	4b54      	ldr	r3, [pc, #336]	@ (80011a8 <HAL_JPEG_MspInit+0x168>)
 8001056:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800105a:	4a53      	ldr	r2, [pc, #332]	@ (80011a8 <HAL_JPEG_MspInit+0x168>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001064:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <HAL_JPEG_MspInit+0x168>)
 8001066:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001072:	4b4e      	ldr	r3, [pc, #312]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 8001074:	4a4e      	ldr	r2, [pc, #312]	@ (80011b0 <HAL_JPEG_MspInit+0x170>)
 8001076:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001078:	4b4c      	ldr	r3, [pc, #304]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 800107a:	2211      	movs	r2, #17
 800107c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800107e:	4b4b      	ldr	r3, [pc, #300]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001084:	4b49      	ldr	r3, [pc, #292]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 8001086:	2240      	movs	r2, #64	@ 0x40
 8001088:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800108a:	4b48      	ldr	r3, [pc, #288]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001090:	4b46      	ldr	r3, [pc, #280]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 8001092:	2202      	movs	r2, #2
 8001094:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001096:	4b45      	ldr	r3, [pc, #276]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 800109c:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010a2:	4b42      	ldr	r3, [pc, #264]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010a4:	2280      	movs	r2, #128	@ 0x80
 80010a6:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80010a8:	4b40      	ldr	r3, [pc, #256]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010b0:	4b3e      	ldr	r3, [pc, #248]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010b2:	2220      	movs	r2, #32
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80010b6:	4b3d      	ldr	r3, [pc, #244]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80010bc:	4b3b      	ldr	r3, [pc, #236]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80010c2:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010c8:	4b38      	ldr	r3, [pc, #224]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ce:	4837      	ldr	r0, [pc, #220]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010d0:	f004 fdca 	bl	8005c68 <HAL_MDMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 80010da:	f7ff fe6f 	bl	8000dbc <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	4832      	ldr	r0, [pc, #200]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010e4:	f004 fe0c 	bl	8005d00 <HAL_MDMA_ConfigPostRequestMask>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 80010ee:	f7ff fe65 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a2d      	ldr	r2, [pc, #180]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80010f8:	4a2c      	ldr	r2, [pc, #176]	@ (80011ac <HAL_JPEG_MspInit+0x16c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 80010fe:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001100:	4a2d      	ldr	r2, [pc, #180]	@ (80011b8 <HAL_JPEG_MspInit+0x178>)
 8001102:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001104:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001106:	2214      	movs	r2, #20
 8001108:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800110a:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001112:	2240      	movs	r2, #64	@ 0x40
 8001114:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001116:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001122:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001124:	2208      	movs	r2, #8
 8001126:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 800112a:	2220      	movs	r2, #32
 800112c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001136:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 800113c:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 800113e:	2204      	movs	r2, #4
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 800114a:	2200      	movs	r2, #0
 800114c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001156:	2200      	movs	r2, #0
 8001158:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 800115a:	4816      	ldr	r0, [pc, #88]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 800115c:	f004 fd84 	bl	8005c68 <HAL_MDMA_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001166:	f7ff fe29 	bl	8000dbc <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	4811      	ldr	r0, [pc, #68]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001170:	f004 fdc6 	bl	8005d00 <HAL_MDMA_ConfigPostRequestMask>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 800117a:	f7ff fe1f 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001182:	635a      	str	r2, [r3, #52]	@ 0x34
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_JPEG_MspInit+0x174>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2079      	movs	r0, #121	@ 0x79
 8001190:	f001 fc95 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001194:	2079      	movs	r0, #121	@ 0x79
 8001196:	f001 fcac 	bl	8002af2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	52003000 	.word	0x52003000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	240002d4 	.word	0x240002d4
 80011b0:	52000040 	.word	0x52000040
 80011b4:	24000340 	.word	0x24000340
 80011b8:	52000080 	.word	0x52000080

080011bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ba      	sub	sp, #232	@ 0xe8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	22c0      	movs	r2, #192	@ 0xc0
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00f fcf3 	bl	8010bc8 <memset>
  if(hspi->Instance==SPI4)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a26      	ldr	r2, [pc, #152]	@ (8001280 <HAL_SPI_MspInit+0xc4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d144      	bne.n	8001276 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80011ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4618      	mov	r0, r3
 8001202:	f007 fab3 	bl	800876c <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800120c:	f7ff fdd6 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001210:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <HAL_SPI_MspInit+0xc8>)
 8001212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001216:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <HAL_SPI_MspInit+0xc8>)
 8001218:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800121c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_SPI_MspInit+0xc8>)
 8001222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_SPI_MspInit+0xc8>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <HAL_SPI_MspInit+0xc8>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <HAL_SPI_MspInit+0xc8>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800124c:	2364      	movs	r3, #100	@ 0x64
 800124e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001264:	2305      	movs	r3, #5
 8001266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800126a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_SPI_MspInit+0xcc>)
 8001272:	f001 ff25 	bl	80030c0 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001276:	bf00      	nop
 8001278:	37e8      	adds	r7, #232	@ 0xe8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40013400 	.word	0x40013400
 8001284:	58024400 	.word	0x58024400
 8001288:	58021000 	.word	0x58021000

0800128c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_TIM_Base_MspInit+0x48>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d116      	bne.n	80012cc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_TIM_Base_MspInit+0x4c>)
 80012a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012a4:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <HAL_TIM_Base_MspInit+0x4c>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_TIM_Base_MspInit+0x4c>)
 80012b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	202d      	movs	r0, #45	@ 0x2d
 80012c2:	f001 fbfc 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80012c6:	202d      	movs	r0, #45	@ 0x2d
 80012c8:	f001 fc13 	bl	8002af2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40002000 	.word	0x40002000
 80012d8:	58024400 	.word	0x58024400

080012dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ba      	sub	sp, #232	@ 0xe8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	22c0      	movs	r2, #192	@ 0xc0
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00f fc63 	bl	8010bc8 <memset>
  if(huart->Instance==USART1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a27      	ldr	r2, [pc, #156]	@ (80013a4 <HAL_UART_MspInit+0xc8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d146      	bne.n	800139a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800130c:	f04f 0201 	mov.w	r2, #1
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4618      	mov	r0, r3
 8001324:	f007 fa22 	bl	800876c <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800132e:	f7ff fd45 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_UART_MspInit+0xcc>)
 8001334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <HAL_UART_MspInit+0xcc>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_UART_MspInit+0xcc>)
 8001344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_UART_MspInit+0xcc>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <HAL_UART_MspInit+0xcc>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_UART_MspInit+0xcc>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800136e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001388:	2304      	movs	r3, #4
 800138a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <HAL_UART_MspInit+0xd0>)
 8001396:	f001 fe93 	bl	80030c0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	37e8      	adds	r7, #232	@ 0xe8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40011000 	.word	0x40011000
 80013a8:	58024400 	.word	0x58024400
 80013ac:	58020400 	.word	0x58020400

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <NMI_Handler+0x4>

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <MemManage_Handler+0x4>

080013c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 f9cf 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <I2C2_EV_IRQHandler+0x10>)
 8001416:	f002 f89f 	bl	8003558 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24000228 	.word	0x24000228

08001424 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <I2C2_ER_IRQHandler+0x10>)
 800142a:	f002 f8af 	bl	800358c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	24000228 	.word	0x24000228

08001438 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800143e:	f00a f829 	bl	800b494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	24000434 	.word	0x24000434

0800144c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <OTG_FS_IRQHandler+0x10>)
 8001452:	f004 fffc 	bl	800644e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24001a04 	.word	0x24001a04

08001460 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <JPEG_IRQHandler+0x10>)
 8001466:	f003 f9bc 	bl	80047e2 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2400027c 	.word	0x2400027c

08001474 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001478:	4803      	ldr	r0, [pc, #12]	@ (8001488 <MDMA_IRQHandler+0x14>)
 800147a:	f004 fcbb 	bl	8005df4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 800147e:	4803      	ldr	r0, [pc, #12]	@ (800148c <MDMA_IRQHandler+0x18>)
 8001480:	f004 fcb8 	bl	8005df4 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	240002d4 	.word	0x240002d4
 800148c:	24000340 	.word	0x24000340

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f00f fb8a 	bl	8010bd8 <__errno>
 80014c4:	4603      	mov	r3, r0
 80014c6:	220c      	movs	r2, #12
 80014c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	24080000 	.word	0x24080000
 80014f0:	00000400 	.word	0x00000400
 80014f4:	24000518 	.word	0x24000518
 80014f8:	24002250 	.word	0x24002250

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001500:	4b43      	ldr	r3, [pc, #268]	@ (8001610 <SystemInit+0x114>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001506:	4a42      	ldr	r2, [pc, #264]	@ (8001610 <SystemInit+0x114>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001510:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <SystemInit+0x118>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	2b06      	cmp	r3, #6
 800151a:	d807      	bhi.n	800152c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800151c:	4b3d      	ldr	r3, [pc, #244]	@ (8001614 <SystemInit+0x118>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 030f 	bic.w	r3, r3, #15
 8001524:	4a3b      	ldr	r2, [pc, #236]	@ (8001614 <SystemInit+0x118>)
 8001526:	f043 0307 	orr.w	r3, r3, #7
 800152a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800152c:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <SystemInit+0x11c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a39      	ldr	r2, [pc, #228]	@ (8001618 <SystemInit+0x11c>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001538:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <SystemInit+0x11c>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800153e:	4b36      	ldr	r3, [pc, #216]	@ (8001618 <SystemInit+0x11c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4935      	ldr	r1, [pc, #212]	@ (8001618 <SystemInit+0x11c>)
 8001544:	4b35      	ldr	r3, [pc, #212]	@ (800161c <SystemInit+0x120>)
 8001546:	4013      	ands	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154a:	4b32      	ldr	r3, [pc, #200]	@ (8001614 <SystemInit+0x118>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001556:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <SystemInit+0x118>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 030f 	bic.w	r3, r3, #15
 800155e:	4a2d      	ldr	r2, [pc, #180]	@ (8001614 <SystemInit+0x118>)
 8001560:	f043 0307 	orr.w	r3, r3, #7
 8001564:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001566:	4b2c      	ldr	r3, [pc, #176]	@ (8001618 <SystemInit+0x11c>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <SystemInit+0x11c>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001572:	4b29      	ldr	r3, [pc, #164]	@ (8001618 <SystemInit+0x11c>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <SystemInit+0x11c>)
 800157a:	4a29      	ldr	r2, [pc, #164]	@ (8001620 <SystemInit+0x124>)
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800157e:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <SystemInit+0x11c>)
 8001580:	4a28      	ldr	r2, [pc, #160]	@ (8001624 <SystemInit+0x128>)
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001584:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <SystemInit+0x11c>)
 8001586:	4a28      	ldr	r2, [pc, #160]	@ (8001628 <SystemInit+0x12c>)
 8001588:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800158a:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <SystemInit+0x11c>)
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001590:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <SystemInit+0x11c>)
 8001592:	4a25      	ldr	r2, [pc, #148]	@ (8001628 <SystemInit+0x12c>)
 8001594:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <SystemInit+0x11c>)
 8001598:	2200      	movs	r2, #0
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800159c:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <SystemInit+0x11c>)
 800159e:	4a22      	ldr	r2, [pc, #136]	@ (8001628 <SystemInit+0x12c>)
 80015a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <SystemInit+0x11c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <SystemInit+0x11c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001618 <SystemInit+0x11c>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <SystemInit+0x11c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <SystemInit+0x130>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <SystemInit+0x134>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015c6:	d202      	bcs.n	80015ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <SystemInit+0x138>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <SystemInit+0x11c>)
 80015d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d113      	bne.n	8001604 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <SystemInit+0x11c>)
 80015de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <SystemInit+0x11c>)
 80015e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <SystemInit+0x13c>)
 80015ee:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015f2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <SystemInit+0x11c>)
 80015f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015fa:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <SystemInit+0x11c>)
 80015fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001600:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	52002000 	.word	0x52002000
 8001618:	58024400 	.word	0x58024400
 800161c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001620:	02020200 	.word	0x02020200
 8001624:	01ff0000 	.word	0x01ff0000
 8001628:	01010280 	.word	0x01010280
 800162c:	5c001000 	.word	0x5c001000
 8001630:	ffff0000 	.word	0xffff0000
 8001634:	51008108 	.word	0x51008108
 8001638:	52004000 	.word	0x52004000

0800163c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <ExitRun0Mode+0x2c>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a08      	ldr	r2, [pc, #32]	@ (8001668 <ExitRun0Mode+0x2c>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800164c:	bf00      	nop
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <ExitRun0Mode+0x2c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f9      	beq.n	800164e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	58024800 	.word	0x58024800

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80016a8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001670:	f7ff ffe4 	bl	800163c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001674:	f7ff ff42 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800167a:	490d      	ldr	r1, [pc, #52]	@ (80016b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001690:	4c0a      	ldr	r4, [pc, #40]	@ (80016bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169e:	f00f faa1 	bl	8010be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a2:	f7ff f80b 	bl	80006bc <main>
  bx  lr
 80016a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016b0:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 80016b4:	08011808 	.word	0x08011808
  ldr r2, =_sbss
 80016b8:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 80016bc:	24002250 	.word	0x24002250

080016c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC3_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ca:	2003      	movs	r0, #3
 80016cc:	f001 f9ec 	bl	8002aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016d0:	f006 fe76 	bl	80083c0 <HAL_RCC_GetSysClockFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <HAL_Init+0x68>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	4913      	ldr	r1, [pc, #76]	@ (8001730 <HAL_Init+0x6c>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <HAL_Init+0x68>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_Init+0x6c>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	4a0b      	ldr	r2, [pc, #44]	@ (8001734 <HAL_Init+0x70>)
 8001706:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001708:	4a0b      	ldr	r2, [pc, #44]	@ (8001738 <HAL_Init+0x74>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170e:	200f      	movs	r0, #15
 8001710:	f000 f814 	bl	800173c <HAL_InitTick>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e002      	b.n	8001724 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800171e:	f7ff fb53 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	58024400 	.word	0x58024400
 8001730:	0801152c 	.word	0x0801152c
 8001734:	24000004 	.word	0x24000004
 8001738:	24000000 	.word	0x24000000

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001744:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_InitTick+0x60>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e021      	b.n	8001794 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <HAL_InitTick+0x64>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_InitTick+0x60>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f001 f9d1 	bl	8002b0e <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f001 f99b 	bl	8002abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <HAL_InitTick+0x68>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2400000c 	.word	0x2400000c
 80017a0:	24000000 	.word	0x24000000
 80017a4:	24000008 	.word	0x24000008

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	2400000c 	.word	0x2400000c
 80017cc:	2400051c 	.word	0x2400051c

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2400051c 	.word	0x2400051c

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffde 	bl	80017d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2400000c 	.word	0x2400000c

08001830 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001834:	4b03      	ldr	r3, [pc, #12]	@ (8001844 <HAL_GetREVID+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0c1b      	lsrs	r3, r3, #16
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	5c001000 	.word	0x5c001000

08001848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	609a      	str	r2, [r3, #8]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <LL_ADC_SetChannelPreselection+0x24>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2201      	movs	r2, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	e015      	b.n	8001900 <LL_ADC_SetChannelPreselection+0x50>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80018ea:	2320      	movs	r3, #32
 80018ec:	e003      	b.n	80018f6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2201      	movs	r2, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	69d2      	ldr	r2, [r2, #28]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800190a:	bf00      	nop
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001916:	b480      	push	{r7}
 8001918:	b087      	sub	sp, #28
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3360      	adds	r3, #96	@ 0x60
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	430b      	orrs	r3, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	431a      	orrs	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	611a      	str	r2, [r3, #16]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3360      	adds	r3, #96	@ 0x60
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]
  }
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019be:	b480      	push	{r7}
 80019c0:	b087      	sub	sp, #28
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3330      	adds	r3, #48	@ 0x30
 80019ce:	461a      	mov	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	4413      	add	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	211f      	movs	r1, #31
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	401a      	ands	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0e9b      	lsrs	r3, r3, #26
 80019f6:	f003 011f 	and.w	r1, r3, #31
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	431a      	orrs	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b087      	sub	sp, #28
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3314      	adds	r3, #20
 8001a26:	461a      	mov	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	0e5b      	lsrs	r3, r3, #25
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	4413      	add	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	0d1b      	lsrs	r3, r3, #20
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	2107      	movs	r1, #7
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	0d1b      	lsrs	r3, r3, #20
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a84:	43db      	mvns	r3, r3
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0318 	and.w	r3, r3, #24
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a90:	40d9      	lsrs	r1, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	400b      	ands	r3, r1
 8001a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	000fffff 	.word	0x000fffff

08001ab4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6093      	str	r3, [r2, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	5fffffc0 	.word	0x5fffffc0

08001ad8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001aec:	d101      	bne.n	8001af2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	6fffffc0 	.word	0x6fffffc0

08001b28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <LL_ADC_IsEnabled+0x18>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LL_ADC_IsEnabled+0x1a>
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d101      	bne.n	8001b8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d101      	bne.n	8001bb4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e18f      	b.n	8001efe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d109      	bne.n	8001c00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff f905 	bl	8000dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff67 	bl	8001ad8 <LL_ADC_IsDeepPowerDownEnabled>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff4d 	bl	8001ab4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff82 	bl	8001b28 <LL_ADC_IsInternalRegulatorEnabled>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d114      	bne.n	8001c54 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff66 	bl	8001b00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c34:	4b87      	ldr	r3, [pc, #540]	@ (8001e54 <HAL_ADC_Init+0x290>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	4a87      	ldr	r2, [pc, #540]	@ (8001e58 <HAL_ADC_Init+0x294>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	099b      	lsrs	r3, r3, #6
 8001c42:	3301      	adds	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c46:	e002      	b.n	8001c4e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f9      	bne.n	8001c48 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff65 	bl	8001b28 <LL_ADC_IsInternalRegulatorEnabled>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c68:	f043 0210 	orr.w	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff76 	bl	8001b76 <LL_ADC_REG_IsConversionOngoing>
 8001c8a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 8129 	bne.w	8001eec <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f040 8125 	bne.w	8001eec <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001caa:	f043 0202 	orr.w	r2, r3, #2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff4a 	bl	8001b50 <LL_ADC_IsEnabled>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d136      	bne.n	8001d30 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a65      	ldr	r2, [pc, #404]	@ (8001e5c <HAL_ADC_Init+0x298>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d004      	beq.n	8001cd6 <HAL_ADC_Init+0x112>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a63      	ldr	r2, [pc, #396]	@ (8001e60 <HAL_ADC_Init+0x29c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_ADC_Init+0x130>
 8001cd6:	4861      	ldr	r0, [pc, #388]	@ (8001e5c <HAL_ADC_Init+0x298>)
 8001cd8:	f7ff ff3a 	bl	8001b50 <LL_ADC_IsEnabled>
 8001cdc:	4604      	mov	r4, r0
 8001cde:	4860      	ldr	r0, [pc, #384]	@ (8001e60 <HAL_ADC_Init+0x29c>)
 8001ce0:	f7ff ff36 	bl	8001b50 <LL_ADC_IsEnabled>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4323      	orrs	r3, r4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e008      	b.n	8001d06 <HAL_ADC_Init+0x142>
 8001cf4:	485b      	ldr	r0, [pc, #364]	@ (8001e64 <HAL_ADC_Init+0x2a0>)
 8001cf6:	f7ff ff2b 	bl	8001b50 <LL_ADC_IsEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d012      	beq.n	8001d30 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a53      	ldr	r2, [pc, #332]	@ (8001e5c <HAL_ADC_Init+0x298>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d004      	beq.n	8001d1e <HAL_ADC_Init+0x15a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a51      	ldr	r2, [pc, #324]	@ (8001e60 <HAL_ADC_Init+0x29c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x15e>
 8001d1e:	4a52      	ldr	r2, [pc, #328]	@ (8001e68 <HAL_ADC_Init+0x2a4>)
 8001d20:	e000      	b.n	8001d24 <HAL_ADC_Init+0x160>
 8001d22:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_ADC_Init+0x2a8>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f7ff fd8c 	bl	8001848 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d30:	f7ff fd7e 	bl	8001830 <HAL_GetREVID>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d914      	bls.n	8001d68 <HAL_ADC_Init+0x1a4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d110      	bne.n	8001d68 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7d5b      	ldrb	r3, [r3, #21]
 8001d4a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d50:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d56:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7f1b      	ldrb	r3, [r3, #28]
 8001d5c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d5e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d60:	f043 030c 	orr.w	r3, r3, #12
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e00d      	b.n	8001d84 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7d5b      	ldrb	r3, [r3, #21]
 8001d6c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d72:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d78:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7f1b      	ldrb	r3, [r3, #28]
 8001d7e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7f1b      	ldrb	r3, [r3, #28]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d106      	bne.n	8001d9a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	045b      	lsls	r3, r3, #17
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <HAL_ADC_Init+0x2ac>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	69b9      	ldr	r1, [r7, #24]
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fed1 	bl	8001b76 <LL_ADC_REG_IsConversionOngoing>
 8001dd4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fede 	bl	8001b9c <LL_ADC_INJ_IsConversionOngoing>
 8001de0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d15f      	bne.n	8001ea8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d15c      	bne.n	8001ea8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7d1b      	ldrb	r3, [r3, #20]
 8001df2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <HAL_ADC_Init+0x2b0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d130      	bne.n	8001e7c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <HAL_ADC_Init+0x2b4>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	0411      	lsls	r1, r2, #16
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e36:	4311      	orrs	r1, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e3c:	4311      	orrs	r1, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e42:	430a      	orrs	r2, r1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	611a      	str	r2, [r3, #16]
 8001e50:	e01c      	b.n	8001e8c <HAL_ADC_Init+0x2c8>
 8001e52:	bf00      	nop
 8001e54:	24000000 	.word	0x24000000
 8001e58:	053e2d63 	.word	0x053e2d63
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40022100 	.word	0x40022100
 8001e64:	58026000 	.word	0x58026000
 8001e68:	40022300 	.word	0x40022300
 8001e6c:	58026300 	.word	0x58026300
 8001e70:	fff0c003 	.word	0xfff0c003
 8001e74:	ffffbffc 	.word	0xffffbffc
 8001e78:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fb20 	bl	80024e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d10c      	bne.n	8001eca <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f023 010f 	bic.w	r1, r3, #15
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec8:	e007      	b.n	8001eda <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 020f 	bic.w	r2, r2, #15
 8001ed8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001eea:	e007      	b.n	8001efc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	@ 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}
 8001f06:	bf00      	nop

08001f08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b08d      	sub	sp, #52	@ 0x34
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a65      	ldr	r2, [pc, #404]	@ (80020b8 <HAL_ADC_ConfigChannel+0x1b0>)
 8001f22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x2a>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e2c7      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x5ba>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fe19 	bl	8001b76 <LL_ADC_REG_IsConversionOngoing>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 82ac 	bne.w	80024a4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db2c      	blt.n	8001fae <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d108      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x6a>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	e016      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x98>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	613b      	str	r3, [r7, #16]
  return result;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e003      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	69d1      	ldr	r1, [r2, #28]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	430b      	orrs	r3, r1
 8001fac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f7ff fcff 	bl	80019be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fdd6 	bl	8001b76 <LL_ADC_REG_IsConversionOngoing>
 8001fca:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fde3 	bl	8001b9c <LL_ADC_INJ_IsConversionOngoing>
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 80b8 	bne.w	8002150 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 80b4 	bne.w	8002150 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f7ff fd0e 	bl	8001a16 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ffa:	4b30      	ldr	r3, [pc, #192]	@ (80020bc <HAL_ADC_ConfigChannel+0x1b4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002006:	d10b      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x118>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	e01d      	b.n	800205c <HAL_ADC_ConfigChannel+0x154>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10b      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x13e>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	e00a      	b.n	800205c <HAL_ADC_ConfigChannel+0x154>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d02c      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f7ff fc4f 	bl	8001916 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6919      	ldr	r1, [r3, #16]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	7e5b      	ldrb	r3, [r3, #25]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d102      	bne.n	800208e <HAL_ADC_ConfigChannel+0x186>
 8002088:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800208c:	e000      	b.n	8002090 <HAL_ADC_ConfigChannel+0x188>
 800208e:	2300      	movs	r3, #0
 8002090:	461a      	mov	r2, r3
 8002092:	f7ff fc79 	bl	8001988 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6919      	ldr	r1, [r3, #16]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	7e1b      	ldrb	r3, [r3, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x1a4>
 80020a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020aa:	e000      	b.n	80020ae <HAL_ADC_ConfigChannel+0x1a6>
 80020ac:	2300      	movs	r3, #0
 80020ae:	461a      	mov	r2, r3
 80020b0:	f7ff fc51 	bl	8001956 <LL_ADC_SetDataRightShift>
 80020b4:	e04c      	b.n	8002150 <HAL_ADC_ConfigChannel+0x248>
 80020b6:	bf00      	nop
 80020b8:	47ff0000 	.word	0x47ff0000
 80020bc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	069b      	lsls	r3, r3, #26
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020e2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	069b      	lsls	r3, r3, #26
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d107      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002106:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800210e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	069b      	lsls	r3, r3, #26
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800212a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002132:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	069b      	lsls	r3, r3, #26
 800213c:	429a      	cmp	r2, r3
 800213e:	d107      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800214e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fcfb 	bl	8001b50 <LL_ADC_IsEnabled>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 81aa 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	f7ff fc7c 	bl	8001a6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a87      	ldr	r2, [pc, #540]	@ (8002398 <HAL_ADC_ConfigChannel+0x490>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f040 809a 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4984      	ldr	r1, [pc, #528]	@ (800239c <HAL_ADC_ConfigChannel+0x494>)
 800218a:	428b      	cmp	r3, r1
 800218c:	d147      	bne.n	800221e <HAL_ADC_ConfigChannel+0x316>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4983      	ldr	r1, [pc, #524]	@ (80023a0 <HAL_ADC_ConfigChannel+0x498>)
 8002194:	428b      	cmp	r3, r1
 8002196:	d040      	beq.n	800221a <HAL_ADC_ConfigChannel+0x312>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4981      	ldr	r1, [pc, #516]	@ (80023a4 <HAL_ADC_ConfigChannel+0x49c>)
 800219e:	428b      	cmp	r3, r1
 80021a0:	d039      	beq.n	8002216 <HAL_ADC_ConfigChannel+0x30e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4980      	ldr	r1, [pc, #512]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4a0>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d032      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x30a>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	497e      	ldr	r1, [pc, #504]	@ (80023ac <HAL_ADC_ConfigChannel+0x4a4>)
 80021b2:	428b      	cmp	r3, r1
 80021b4:	d02b      	beq.n	800220e <HAL_ADC_ConfigChannel+0x306>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	497d      	ldr	r1, [pc, #500]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4a8>)
 80021bc:	428b      	cmp	r3, r1
 80021be:	d024      	beq.n	800220a <HAL_ADC_ConfigChannel+0x302>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	497b      	ldr	r1, [pc, #492]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4ac>)
 80021c6:	428b      	cmp	r3, r1
 80021c8:	d01d      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x2fe>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	497a      	ldr	r1, [pc, #488]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4b0>)
 80021d0:	428b      	cmp	r3, r1
 80021d2:	d016      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x2fa>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4978      	ldr	r1, [pc, #480]	@ (80023bc <HAL_ADC_ConfigChannel+0x4b4>)
 80021da:	428b      	cmp	r3, r1
 80021dc:	d00f      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x2f6>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4977      	ldr	r1, [pc, #476]	@ (80023c0 <HAL_ADC_ConfigChannel+0x4b8>)
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d008      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x2f2>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4975      	ldr	r1, [pc, #468]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4bc>)
 80021ee:	428b      	cmp	r3, r1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x2ee>
 80021f2:	4b75      	ldr	r3, [pc, #468]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4c0>)
 80021f4:	e05a      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 80021f6:	2300      	movs	r3, #0
 80021f8:	e058      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 80021fa:	4b74      	ldr	r3, [pc, #464]	@ (80023cc <HAL_ADC_ConfigChannel+0x4c4>)
 80021fc:	e056      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 80021fe:	4b74      	ldr	r3, [pc, #464]	@ (80023d0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002200:	e054      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 8002202:	4b6e      	ldr	r3, [pc, #440]	@ (80023bc <HAL_ADC_ConfigChannel+0x4b4>)
 8002204:	e052      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 8002206:	4b6c      	ldr	r3, [pc, #432]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002208:	e050      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 800220a:	4b72      	ldr	r3, [pc, #456]	@ (80023d4 <HAL_ADC_ConfigChannel+0x4cc>)
 800220c:	e04e      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 800220e:	4b72      	ldr	r3, [pc, #456]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002210:	e04c      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 8002212:	4b72      	ldr	r3, [pc, #456]	@ (80023dc <HAL_ADC_ConfigChannel+0x4d4>)
 8002214:	e04a      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 8002216:	4b72      	ldr	r3, [pc, #456]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4d8>)
 8002218:	e048      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 800221a:	2301      	movs	r3, #1
 800221c:	e046      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4970      	ldr	r1, [pc, #448]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002224:	428b      	cmp	r3, r1
 8002226:	d140      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x3a2>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	495c      	ldr	r1, [pc, #368]	@ (80023a0 <HAL_ADC_ConfigChannel+0x498>)
 800222e:	428b      	cmp	r3, r1
 8002230:	d039      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0x39e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	495b      	ldr	r1, [pc, #364]	@ (80023a4 <HAL_ADC_ConfigChannel+0x49c>)
 8002238:	428b      	cmp	r3, r1
 800223a:	d032      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x39a>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4959      	ldr	r1, [pc, #356]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4a0>)
 8002242:	428b      	cmp	r3, r1
 8002244:	d02b      	beq.n	800229e <HAL_ADC_ConfigChannel+0x396>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4958      	ldr	r1, [pc, #352]	@ (80023ac <HAL_ADC_ConfigChannel+0x4a4>)
 800224c:	428b      	cmp	r3, r1
 800224e:	d024      	beq.n	800229a <HAL_ADC_ConfigChannel+0x392>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4956      	ldr	r1, [pc, #344]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4a8>)
 8002256:	428b      	cmp	r3, r1
 8002258:	d01d      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x38e>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4955      	ldr	r1, [pc, #340]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4ac>)
 8002260:	428b      	cmp	r3, r1
 8002262:	d016      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x38a>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4953      	ldr	r1, [pc, #332]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4b0>)
 800226a:	428b      	cmp	r3, r1
 800226c:	d00f      	beq.n	800228e <HAL_ADC_ConfigChannel+0x386>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4952      	ldr	r1, [pc, #328]	@ (80023bc <HAL_ADC_ConfigChannel+0x4b4>)
 8002274:	428b      	cmp	r3, r1
 8002276:	d008      	beq.n	800228a <HAL_ADC_ConfigChannel+0x382>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4951      	ldr	r1, [pc, #324]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4bc>)
 800227e:	428b      	cmp	r3, r1
 8002280:	d101      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x37e>
 8002282:	4b51      	ldr	r3, [pc, #324]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002284:	e012      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 8002286:	2300      	movs	r3, #0
 8002288:	e010      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 800228a:	4b51      	ldr	r3, [pc, #324]	@ (80023d0 <HAL_ADC_ConfigChannel+0x4c8>)
 800228c:	e00e      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 800228e:	4b4b      	ldr	r3, [pc, #300]	@ (80023bc <HAL_ADC_ConfigChannel+0x4b4>)
 8002290:	e00c      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 8002292:	4b49      	ldr	r3, [pc, #292]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002294:	e00a      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 8002296:	4b4f      	ldr	r3, [pc, #316]	@ (80023d4 <HAL_ADC_ConfigChannel+0x4cc>)
 8002298:	e008      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 800229a:	4b4f      	ldr	r3, [pc, #316]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4d0>)
 800229c:	e006      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 800229e:	4b4f      	ldr	r3, [pc, #316]	@ (80023dc <HAL_ADC_ConfigChannel+0x4d4>)
 80022a0:	e004      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 80022a2:	4b4f      	ldr	r3, [pc, #316]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4d8>)
 80022a4:	e002      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3a4>
 80022aa:	2300      	movs	r3, #0
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f7ff fafe 	bl	80018b0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f280 80fc 	bge.w	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a36      	ldr	r2, [pc, #216]	@ (800239c <HAL_ADC_ConfigChannel+0x494>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x3ca>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a45      	ldr	r2, [pc, #276]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4dc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x3ce>
 80022d2:	4b45      	ldr	r3, [pc, #276]	@ (80023e8 <HAL_ADC_ConfigChannel+0x4e0>)
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x3d0>
 80022d6:	4b45      	ldr	r3, [pc, #276]	@ (80023ec <HAL_ADC_ConfigChannel+0x4e4>)
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fadb 	bl	8001894 <LL_ADC_GetCommonPathInternalCh>
 80022de:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2d      	ldr	r2, [pc, #180]	@ (800239c <HAL_ADC_ConfigChannel+0x494>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0x3ec>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a3d      	ldr	r2, [pc, #244]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4dc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10e      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x40a>
 80022f4:	4829      	ldr	r0, [pc, #164]	@ (800239c <HAL_ADC_ConfigChannel+0x494>)
 80022f6:	f7ff fc2b 	bl	8001b50 <LL_ADC_IsEnabled>
 80022fa:	4604      	mov	r4, r0
 80022fc:	4839      	ldr	r0, [pc, #228]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4dc>)
 80022fe:	f7ff fc27 	bl	8001b50 <LL_ADC_IsEnabled>
 8002302:	4603      	mov	r3, r0
 8002304:	4323      	orrs	r3, r4
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	e008      	b.n	8002324 <HAL_ADC_ConfigChannel+0x41c>
 8002312:	4837      	ldr	r0, [pc, #220]	@ (80023f0 <HAL_ADC_ConfigChannel+0x4e8>)
 8002314:	f7ff fc1c 	bl	8001b50 <LL_ADC_IsEnabled>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80b3 	beq.w	8002490 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a31      	ldr	r2, [pc, #196]	@ (80023f4 <HAL_ADC_ConfigChannel+0x4ec>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d165      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x4f8>
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d160      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <HAL_ADC_ConfigChannel+0x4e8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	f040 80b6 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a13      	ldr	r2, [pc, #76]	@ (800239c <HAL_ADC_ConfigChannel+0x494>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d004      	beq.n	800235e <HAL_ADC_ConfigChannel+0x456>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a22      	ldr	r2, [pc, #136]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4dc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x45a>
 800235e:	4a22      	ldr	r2, [pc, #136]	@ (80023e8 <HAL_ADC_ConfigChannel+0x4e0>)
 8002360:	e000      	b.n	8002364 <HAL_ADC_ConfigChannel+0x45c>
 8002362:	4a22      	ldr	r2, [pc, #136]	@ (80023ec <HAL_ADC_ConfigChannel+0x4e4>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f7ff fa7e 	bl	800186e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002372:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_ADC_ConfigChannel+0x4f0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	4a20      	ldr	r2, [pc, #128]	@ (80023fc <HAL_ADC_ConfigChannel+0x4f4>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	3301      	adds	r3, #1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002386:	e002      	b.n	800238e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3b01      	subs	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f9      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002394:	e08f      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
 8002396:	bf00      	nop
 8002398:	47ff0000 	.word	0x47ff0000
 800239c:	40022000 	.word	0x40022000
 80023a0:	04300002 	.word	0x04300002
 80023a4:	08600004 	.word	0x08600004
 80023a8:	0c900008 	.word	0x0c900008
 80023ac:	10c00010 	.word	0x10c00010
 80023b0:	14f00020 	.word	0x14f00020
 80023b4:	2a000400 	.word	0x2a000400
 80023b8:	2e300800 	.word	0x2e300800
 80023bc:	32601000 	.word	0x32601000
 80023c0:	43210000 	.word	0x43210000
 80023c4:	4b840000 	.word	0x4b840000
 80023c8:	4fb80000 	.word	0x4fb80000
 80023cc:	47520000 	.word	0x47520000
 80023d0:	36902000 	.word	0x36902000
 80023d4:	25b00200 	.word	0x25b00200
 80023d8:	21800100 	.word	0x21800100
 80023dc:	1d500080 	.word	0x1d500080
 80023e0:	19200040 	.word	0x19200040
 80023e4:	40022100 	.word	0x40022100
 80023e8:	40022300 	.word	0x40022300
 80023ec:	58026300 	.word	0x58026300
 80023f0:	58026000 	.word	0x58026000
 80023f4:	cb840000 	.word	0xcb840000
 80023f8:	24000000 	.word	0x24000000
 80023fc:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a31      	ldr	r2, [pc, #196]	@ (80024cc <HAL_ADC_ConfigChannel+0x5c4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11e      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x540>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d119      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2d      	ldr	r2, [pc, #180]	@ (80024d0 <HAL_ADC_ConfigChannel+0x5c8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d14b      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2c      	ldr	r2, [pc, #176]	@ (80024d4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_ADC_ConfigChannel+0x52a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <HAL_ADC_ConfigChannel+0x5d0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x52e>
 8002432:	4a2a      	ldr	r2, [pc, #168]	@ (80024dc <HAL_ADC_ConfigChannel+0x5d4>)
 8002434:	e000      	b.n	8002438 <HAL_ADC_ConfigChannel+0x530>
 8002436:	4a2a      	ldr	r2, [pc, #168]	@ (80024e0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f7ff fa14 	bl	800186e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002446:	e036      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a25      	ldr	r2, [pc, #148]	@ (80024e4 <HAL_ADC_ConfigChannel+0x5dc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d131      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d12c      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d127      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1a      	ldr	r2, [pc, #104]	@ (80024d4 <HAL_ADC_ConfigChannel+0x5cc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_ADC_ConfigChannel+0x572>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a18      	ldr	r2, [pc, #96]	@ (80024d8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x576>
 800247a:	4a18      	ldr	r2, [pc, #96]	@ (80024dc <HAL_ADC_ConfigChannel+0x5d4>)
 800247c:	e000      	b.n	8002480 <HAL_ADC_ConfigChannel+0x578>
 800247e:	4a18      	ldr	r2, [pc, #96]	@ (80024e0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f7ff f9f0 	bl	800186e <LL_ADC_SetCommonPathInternalCh>
 800248e:	e012      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80024a2:	e008      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3734      	adds	r7, #52	@ 0x34
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	c7520000 	.word	0xc7520000
 80024d0:	58026000 	.word	0x58026000
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40022100 	.word	0x40022100
 80024dc:	40022300 	.word	0x40022300
 80024e0:	58026300 	.word	0x58026300
 80024e4:	cfb80000 	.word	0xcfb80000

080024e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a7a      	ldr	r2, [pc, #488]	@ (80026e0 <ADC_ConfigureBoostMode+0x1f8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <ADC_ConfigureBoostMode+0x1c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a79      	ldr	r2, [pc, #484]	@ (80026e4 <ADC_ConfigureBoostMode+0x1fc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d109      	bne.n	8002518 <ADC_ConfigureBoostMode+0x30>
 8002504:	4b78      	ldr	r3, [pc, #480]	@ (80026e8 <ADC_ConfigureBoostMode+0x200>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e008      	b.n	800252a <ADC_ConfigureBoostMode+0x42>
 8002518:	4b74      	ldr	r3, [pc, #464]	@ (80026ec <ADC_ConfigureBoostMode+0x204>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01c      	beq.n	8002568 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800252e:	f006 f8c1 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 8002532:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800253c:	d010      	beq.n	8002560 <ADC_ConfigureBoostMode+0x78>
 800253e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002542:	d873      	bhi.n	800262c <ADC_ConfigureBoostMode+0x144>
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002548:	d002      	beq.n	8002550 <ADC_ConfigureBoostMode+0x68>
 800254a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800254e:	d16d      	bne.n	800262c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	60fb      	str	r3, [r7, #12]
        break;
 800255e:	e068      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	60fb      	str	r3, [r7, #12]
        break;
 8002566:	e064      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002568:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	f007 fb06 	bl	8009b80 <HAL_RCCEx_GetPeriphCLKFreq>
 8002574:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800257e:	d051      	beq.n	8002624 <ADC_ConfigureBoostMode+0x13c>
 8002580:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002584:	d854      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 8002586:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800258a:	d047      	beq.n	800261c <ADC_ConfigureBoostMode+0x134>
 800258c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002590:	d84e      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 8002592:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002596:	d03d      	beq.n	8002614 <ADC_ConfigureBoostMode+0x12c>
 8002598:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800259c:	d848      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 800259e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025a2:	d033      	beq.n	800260c <ADC_ConfigureBoostMode+0x124>
 80025a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025a8:	d842      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 80025aa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025ae:	d029      	beq.n	8002604 <ADC_ConfigureBoostMode+0x11c>
 80025b0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025b4:	d83c      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 80025b6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80025ba:	d01a      	beq.n	80025f2 <ADC_ConfigureBoostMode+0x10a>
 80025bc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80025c0:	d836      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 80025c2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80025c6:	d014      	beq.n	80025f2 <ADC_ConfigureBoostMode+0x10a>
 80025c8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80025cc:	d830      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 80025ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025d2:	d00e      	beq.n	80025f2 <ADC_ConfigureBoostMode+0x10a>
 80025d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025d8:	d82a      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 80025da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80025de:	d008      	beq.n	80025f2 <ADC_ConfigureBoostMode+0x10a>
 80025e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80025e4:	d824      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x148>
 80025e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025ea:	d002      	beq.n	80025f2 <ADC_ConfigureBoostMode+0x10a>
 80025ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025f0:	d11e      	bne.n	8002630 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0c9b      	lsrs	r3, r3, #18
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	60fb      	str	r3, [r7, #12]
        break;
 8002602:	e016      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	60fb      	str	r3, [r7, #12]
        break;
 800260a:	e012      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	60fb      	str	r3, [r7, #12]
        break;
 8002612:	e00e      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	60fb      	str	r3, [r7, #12]
        break;
 800261a:	e00a      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	09db      	lsrs	r3, r3, #7
 8002620:	60fb      	str	r3, [r7, #12]
        break;
 8002622:	e006      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	60fb      	str	r3, [r7, #12]
        break;
 800262a:	e002      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
        break;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002630:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002632:	f7ff f8fd 	bl	8001830 <HAL_GetREVID>
 8002636:	4603      	mov	r3, r0
 8002638:	f241 0203 	movw	r2, #4099	@ 0x1003
 800263c:	4293      	cmp	r3, r2
 800263e:	d815      	bhi.n	800266c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a2b      	ldr	r2, [pc, #172]	@ (80026f0 <ADC_ConfigureBoostMode+0x208>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d908      	bls.n	800265a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002656:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002658:	e03e      	b.n	80026d8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002668:	609a      	str	r2, [r3, #8]
}
 800266a:	e035      	b.n	80026d8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4a1f      	ldr	r2, [pc, #124]	@ (80026f4 <ADC_ConfigureBoostMode+0x20c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d808      	bhi.n	800268c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002688:	609a      	str	r2, [r3, #8]
}
 800268a:	e025      	b.n	80026d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a1a      	ldr	r2, [pc, #104]	@ (80026f8 <ADC_ConfigureBoostMode+0x210>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d80a      	bhi.n	80026aa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a6:	609a      	str	r2, [r3, #8]
}
 80026a8:	e016      	b.n	80026d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a13      	ldr	r2, [pc, #76]	@ (80026fc <ADC_ConfigureBoostMode+0x214>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d80a      	bhi.n	80026c8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c4:	609a      	str	r2, [r3, #8]
}
 80026c6:	e007      	b.n	80026d8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40022100 	.word	0x40022100
 80026e8:	40022300 	.word	0x40022300
 80026ec:	58026300 	.word	0x58026300
 80026f0:	01312d00 	.word	0x01312d00
 80026f4:	005f5e10 	.word	0x005f5e10
 80026f8:	00bebc20 	.word	0x00bebc20
 80026fc:	017d7840 	.word	0x017d7840

08002700 <LL_ADC_IsEnabled>:
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <LL_ADC_IsEnabled+0x18>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_ADC_IsEnabled+0x1a>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_ADC_REG_IsConversionOngoing>:
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d101      	bne.n	800273e <LL_ADC_REG_IsConversionOngoing+0x18>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b09f      	sub	sp, #124	@ 0x7c
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002766:	2302      	movs	r3, #2
 8002768:	e0be      	b.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002776:	2300      	movs	r3, #0
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5c      	ldr	r2, [pc, #368]	@ (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d102      	bne.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002784:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	e001      	b.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e09d      	b.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ffb9 	bl	8002726 <LL_ADC_REG_IsConversionOngoing>
 80027b4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ffb3 	bl	8002726 <LL_ADC_REG_IsConversionOngoing>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d17f      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d17c      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a47      	ldr	r2, [pc, #284]	@ (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a46      	ldr	r2, [pc, #280]	@ (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80027e0:	4b45      	ldr	r3, [pc, #276]	@ (80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80027e2:	e000      	b.n	80027e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80027e4:	4b45      	ldr	r3, [pc, #276]	@ (80028fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80027e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d039      	beq.n	8002864 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80027f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002800:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3a      	ldr	r2, [pc, #232]	@ (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a38      	ldr	r2, [pc, #224]	@ (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10e      	bne.n	8002834 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002816:	4836      	ldr	r0, [pc, #216]	@ (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002818:	f7ff ff72 	bl	8002700 <LL_ADC_IsEnabled>
 800281c:	4604      	mov	r4, r0
 800281e:	4835      	ldr	r0, [pc, #212]	@ (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002820:	f7ff ff6e 	bl	8002700 <LL_ADC_IsEnabled>
 8002824:	4603      	mov	r3, r0
 8002826:	4323      	orrs	r3, r4
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e008      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002834:	4832      	ldr	r0, [pc, #200]	@ (8002900 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002836:	f7ff ff63 	bl	8002700 <LL_ADC_IsEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d047      	beq.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800284a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	4b2d      	ldr	r3, [pc, #180]	@ (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002850:	4013      	ands	r3, r2
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	6811      	ldr	r1, [r2, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6892      	ldr	r2, [r2, #8]
 800285a:	430a      	orrs	r2, r1
 800285c:	431a      	orrs	r2, r3
 800285e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002860:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002862:	e03a      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800286c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800286e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1e      	ldr	r2, [pc, #120]	@ (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d004      	beq.n	8002884 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10e      	bne.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002884:	481a      	ldr	r0, [pc, #104]	@ (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002886:	f7ff ff3b 	bl	8002700 <LL_ADC_IsEnabled>
 800288a:	4604      	mov	r4, r0
 800288c:	4819      	ldr	r0, [pc, #100]	@ (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800288e:	f7ff ff37 	bl	8002700 <LL_ADC_IsEnabled>
 8002892:	4603      	mov	r3, r0
 8002894:	4323      	orrs	r3, r4
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	e008      	b.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80028a2:	4817      	ldr	r0, [pc, #92]	@ (8002900 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80028a4:	f7ff ff2c 	bl	8002700 <LL_ADC_IsEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80028be:	4013      	ands	r3, r2
 80028c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028c4:	e009      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ca:	f043 0220 	orr.w	r2, r3, #32
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80028d8:	e000      	b.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80028e4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	377c      	adds	r7, #124	@ 0x7c
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd90      	pop	{r4, r7, pc}
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40022100 	.word	0x40022100
 80028f8:	40022300 	.word	0x40022300
 80028fc:	58026300 	.word	0x58026300
 8002900:	58026000 	.word	0x58026000
 8002904:	fffff0e0 	.word	0xfffff0e0

08002908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <__NVIC_SetPriorityGrouping+0x40>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	4313      	orrs	r3, r2
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <__NVIC_SetPriorityGrouping+0x40>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00
 800294c:	05fa0000 	.word	0x05fa0000

08002950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002954:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <__NVIC_GetPriorityGrouping+0x18>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f003 0307 	and.w	r3, r3, #7
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297a:	2b00      	cmp	r3, #0
 800297c:	db0b      	blt.n	8002996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4907      	ldr	r1, [pc, #28]	@ (80029a4 <__NVIC_EnableIRQ+0x38>)
 8002986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2001      	movs	r0, #1
 800298e:	fa00 f202 	lsl.w	r2, r0, r2
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	db0a      	blt.n	80029d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	490c      	ldr	r1, [pc, #48]	@ (80029f4 <__NVIC_SetPriority+0x4c>)
 80029c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	440b      	add	r3, r1
 80029cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d0:	e00a      	b.n	80029e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4908      	ldr	r1, [pc, #32]	@ (80029f8 <__NVIC_SetPriority+0x50>)
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	3b04      	subs	r3, #4
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	440b      	add	r3, r1
 80029e6:	761a      	strb	r2, [r3, #24]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000e100 	.word	0xe000e100
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	@ 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f1c3 0307 	rsb	r3, r3, #7
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf28      	it	cs
 8002a1a:	2304      	movcs	r3, #4
 8002a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d902      	bls.n	8002a2c <NVIC_EncodePriority+0x30>
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3b03      	subs	r3, #3
 8002a2a:	e000      	b.n	8002a2e <NVIC_EncodePriority+0x32>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	401a      	ands	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a44:	f04f 31ff 	mov.w	r1, #4294967295
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43d9      	mvns	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	4313      	orrs	r3, r2
         );
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	@ 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a74:	d301      	bcc.n	8002a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00f      	b.n	8002a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <SysTick_Config+0x40>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a82:	210f      	movs	r1, #15
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295
 8002a88:	f7ff ff8e 	bl	80029a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <SysTick_Config+0x40>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a92:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <SysTick_Config+0x40>)
 8002a94:	2207      	movs	r2, #7
 8002a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	e000e010 	.word	0xe000e010

08002aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ff29 	bl	8002908 <__NVIC_SetPriorityGrouping>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff40 	bl	8002950 <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff90 	bl	80029fc <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5f 	bl	80029a8 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff33 	bl	800296c <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ffa4 	bl	8002a64 <SysTick_Config>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002b2c:	f3bf 8f5f 	dmb	sy
}
 8002b30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b32:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <HAL_MPU_Disable+0x28>)
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	4a06      	ldr	r2, [pc, #24]	@ (8002b50 <HAL_MPU_Disable+0x28>)
 8002b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_MPU_Disable+0x2c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	605a      	str	r2, [r3, #4]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00
 8002b54:	e000ed90 	.word	0xe000ed90

08002b58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002b60:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <HAL_MPU_Enable+0x38>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_MPU_Enable+0x3c>)
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_MPU_Enable+0x3c>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b74:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002b76:	f3bf 8f4f 	dsb	sy
}
 8002b7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b7c:	f3bf 8f6f 	isb	sy
}
 8002b80:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000ed90 	.word	0xe000ed90
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	785a      	ldrb	r2, [r3, #1]
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
 8002ba6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002bb4:	4a17      	ldr	r2, [pc, #92]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7b1b      	ldrb	r3, [r3, #12]
 8002bc0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7adb      	ldrb	r3, [r3, #11]
 8002bc6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7a9b      	ldrb	r3, [r3, #10]
 8002bce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002bd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7b5b      	ldrb	r3, [r3, #13]
 8002bd6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002bd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7b9b      	ldrb	r3, [r3, #14]
 8002bde:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002be0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7bdb      	ldrb	r3, [r3, #15]
 8002be6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002be8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7a5b      	ldrb	r3, [r3, #9]
 8002bee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002bf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7a1b      	ldrb	r3, [r3, #8]
 8002bf6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002bf8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c00:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c02:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c04:	6113      	str	r3, [r2, #16]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed90 	.word	0xe000ed90

08002c18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e237      	b.n	800309a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d004      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2280      	movs	r2, #128	@ 0x80
 8002c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e22c      	b.n	800309a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5c      	ldr	r2, [pc, #368]	@ (8002db8 <HAL_DMA_Abort_IT+0x1a0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d04a      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dbc <HAL_DMA_Abort_IT+0x1a4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d045      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a59      	ldr	r2, [pc, #356]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1a8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d040      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a58      	ldr	r2, [pc, #352]	@ (8002dc4 <HAL_DMA_Abort_IT+0x1ac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d03b      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a56      	ldr	r2, [pc, #344]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1b0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d036      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a55      	ldr	r2, [pc, #340]	@ (8002dcc <HAL_DMA_Abort_IT+0x1b4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d031      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a53      	ldr	r2, [pc, #332]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1b8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02c      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a52      	ldr	r2, [pc, #328]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1bc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d027      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a50      	ldr	r2, [pc, #320]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1c0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d022      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a4f      	ldr	r2, [pc, #316]	@ (8002ddc <HAL_DMA_Abort_IT+0x1c4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d01d      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8002de0 <HAL_DMA_Abort_IT+0x1c8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d018      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4c      	ldr	r2, [pc, #304]	@ (8002de4 <HAL_DMA_Abort_IT+0x1cc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8002de8 <HAL_DMA_Abort_IT+0x1d0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a49      	ldr	r2, [pc, #292]	@ (8002dec <HAL_DMA_Abort_IT+0x1d4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a47      	ldr	r2, [pc, #284]	@ (8002df0 <HAL_DMA_Abort_IT+0x1d8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_DMA_Abort_IT+0x1dc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d101      	bne.n	8002ce4 <HAL_DMA_Abort_IT+0xcc>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_DMA_Abort_IT+0xce>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8086 	beq.w	8002df8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8002db8 <HAL_DMA_Abort_IT+0x1a0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04a      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2e      	ldr	r2, [pc, #184]	@ (8002dbc <HAL_DMA_Abort_IT+0x1a4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d045      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1a8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d040      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc4 <HAL_DMA_Abort_IT+0x1ac>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03b      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a29      	ldr	r2, [pc, #164]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1b0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d036      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a28      	ldr	r2, [pc, #160]	@ (8002dcc <HAL_DMA_Abort_IT+0x1b4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d031      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a26      	ldr	r2, [pc, #152]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1b8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1bc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d027      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a23      	ldr	r2, [pc, #140]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1c0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a22      	ldr	r2, [pc, #136]	@ (8002ddc <HAL_DMA_Abort_IT+0x1c4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01d      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a20      	ldr	r2, [pc, #128]	@ (8002de0 <HAL_DMA_Abort_IT+0x1c8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1f      	ldr	r2, [pc, #124]	@ (8002de4 <HAL_DMA_Abort_IT+0x1cc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <HAL_DMA_Abort_IT+0x1d0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dec <HAL_DMA_Abort_IT+0x1d4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1a      	ldr	r2, [pc, #104]	@ (8002df0 <HAL_DMA_Abort_IT+0x1d8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x17c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a19      	ldr	r2, [pc, #100]	@ (8002df4 <HAL_DMA_Abort_IT+0x1dc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d108      	bne.n	8002da6 <HAL_DMA_Abort_IT+0x18e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e178      	b.n	8003098 <HAL_DMA_Abort_IT+0x480>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e16f      	b.n	8003098 <HAL_DMA_Abort_IT+0x480>
 8002db8:	40020010 	.word	0x40020010
 8002dbc:	40020028 	.word	0x40020028
 8002dc0:	40020040 	.word	0x40020040
 8002dc4:	40020058 	.word	0x40020058
 8002dc8:	40020070 	.word	0x40020070
 8002dcc:	40020088 	.word	0x40020088
 8002dd0:	400200a0 	.word	0x400200a0
 8002dd4:	400200b8 	.word	0x400200b8
 8002dd8:	40020410 	.word	0x40020410
 8002ddc:	40020428 	.word	0x40020428
 8002de0:	40020440 	.word	0x40020440
 8002de4:	40020458 	.word	0x40020458
 8002de8:	40020470 	.word	0x40020470
 8002dec:	40020488 	.word	0x40020488
 8002df0:	400204a0 	.word	0x400204a0
 8002df4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 020e 	bic.w	r2, r2, #14
 8002e06:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6c      	ldr	r2, [pc, #432]	@ (8002fc0 <HAL_DMA_Abort_IT+0x3a8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d04a      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc4 <HAL_DMA_Abort_IT+0x3ac>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d045      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a69      	ldr	r2, [pc, #420]	@ (8002fc8 <HAL_DMA_Abort_IT+0x3b0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d040      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a68      	ldr	r2, [pc, #416]	@ (8002fcc <HAL_DMA_Abort_IT+0x3b4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d03b      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a66      	ldr	r2, [pc, #408]	@ (8002fd0 <HAL_DMA_Abort_IT+0x3b8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d036      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a65      	ldr	r2, [pc, #404]	@ (8002fd4 <HAL_DMA_Abort_IT+0x3bc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d031      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a63      	ldr	r2, [pc, #396]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3c0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02c      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a62      	ldr	r2, [pc, #392]	@ (8002fdc <HAL_DMA_Abort_IT+0x3c4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d027      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a60      	ldr	r2, [pc, #384]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3c8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d022      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3cc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d01d      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3d0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d018      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fec <HAL_DMA_Abort_IT+0x3d4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff0 <HAL_DMA_Abort_IT+0x3d8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00e      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a59      	ldr	r2, [pc, #356]	@ (8002ff4 <HAL_DMA_Abort_IT+0x3dc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a57      	ldr	r2, [pc, #348]	@ (8002ff8 <HAL_DMA_Abort_IT+0x3e0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x290>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a56      	ldr	r2, [pc, #344]	@ (8002ffc <HAL_DMA_Abort_IT+0x3e4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d108      	bne.n	8002eba <HAL_DMA_Abort_IT+0x2a2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e007      	b.n	8002eca <HAL_DMA_Abort_IT+0x2b2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc0 <HAL_DMA_Abort_IT+0x3a8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d072      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc4 <HAL_DMA_Abort_IT+0x3ac>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d06d      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a39      	ldr	r2, [pc, #228]	@ (8002fc8 <HAL_DMA_Abort_IT+0x3b0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d068      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a37      	ldr	r2, [pc, #220]	@ (8002fcc <HAL_DMA_Abort_IT+0x3b4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d063      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a36      	ldr	r2, [pc, #216]	@ (8002fd0 <HAL_DMA_Abort_IT+0x3b8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d05e      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a34      	ldr	r2, [pc, #208]	@ (8002fd4 <HAL_DMA_Abort_IT+0x3bc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d059      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3c0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d054      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a31      	ldr	r2, [pc, #196]	@ (8002fdc <HAL_DMA_Abort_IT+0x3c4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04f      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a30      	ldr	r2, [pc, #192]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3c8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d04a      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3cc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d045      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3d0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d040      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fec <HAL_DMA_Abort_IT+0x3d4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d03b      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff0 <HAL_DMA_Abort_IT+0x3d8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d036      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a28      	ldr	r2, [pc, #160]	@ (8002ff4 <HAL_DMA_Abort_IT+0x3dc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d031      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <HAL_DMA_Abort_IT+0x3e0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d02c      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_DMA_Abort_IT+0x3e4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d027      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a24      	ldr	r2, [pc, #144]	@ (8003000 <HAL_DMA_Abort_IT+0x3e8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d022      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <HAL_DMA_Abort_IT+0x3ec>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01d      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	@ (8003008 <HAL_DMA_Abort_IT+0x3f0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d018      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_DMA_Abort_IT+0x3f4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	@ (8003010 <HAL_DMA_Abort_IT+0x3f8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00e      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8003014 <HAL_DMA_Abort_IT+0x3fc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	@ (8003018 <HAL_DMA_Abort_IT+0x400>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_DMA_Abort_IT+0x3a2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	@ (800301c <HAL_DMA_Abort_IT+0x404>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d132      	bne.n	8003020 <HAL_DMA_Abort_IT+0x408>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e031      	b.n	8003022 <HAL_DMA_Abort_IT+0x40a>
 8002fbe:	bf00      	nop
 8002fc0:	40020010 	.word	0x40020010
 8002fc4:	40020028 	.word	0x40020028
 8002fc8:	40020040 	.word	0x40020040
 8002fcc:	40020058 	.word	0x40020058
 8002fd0:	40020070 	.word	0x40020070
 8002fd4:	40020088 	.word	0x40020088
 8002fd8:	400200a0 	.word	0x400200a0
 8002fdc:	400200b8 	.word	0x400200b8
 8002fe0:	40020410 	.word	0x40020410
 8002fe4:	40020428 	.word	0x40020428
 8002fe8:	40020440 	.word	0x40020440
 8002fec:	40020458 	.word	0x40020458
 8002ff0:	40020470 	.word	0x40020470
 8002ff4:	40020488 	.word	0x40020488
 8002ff8:	400204a0 	.word	0x400204a0
 8002ffc:	400204b8 	.word	0x400204b8
 8003000:	58025408 	.word	0x58025408
 8003004:	5802541c 	.word	0x5802541c
 8003008:	58025430 	.word	0x58025430
 800300c:	58025444 	.word	0x58025444
 8003010:	58025458 	.word	0x58025458
 8003014:	5802546c 	.word	0x5802546c
 8003018:	58025480 	.word	0x58025480
 800301c:	58025494 	.word	0x58025494
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d028      	beq.n	8003078 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003034:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2201      	movs	r2, #1
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003054:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800306c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003076:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop

080030a4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b2:	b2db      	uxtb	r3, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030ce:	4b89      	ldr	r3, [pc, #548]	@ (80032f4 <HAL_GPIO_Init+0x234>)
 80030d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030d2:	e194      	b.n	80033fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2101      	movs	r1, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8186 	beq.w	80033f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d005      	beq.n	8003104 <HAL_GPIO_Init+0x44>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d130      	bne.n	8003166 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800313a:	2201      	movs	r2, #1
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 0201 	and.w	r2, r3, #1
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b03      	cmp	r3, #3
 8003170:	d017      	beq.n	80031a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d123      	bne.n	80031f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3208      	adds	r2, #8
 80031b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	69b9      	ldr	r1, [r7, #24]
 80031f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0203 	and.w	r2, r3, #3
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80e0 	beq.w	80033f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003238:	4b2f      	ldr	r3, [pc, #188]	@ (80032f8 <HAL_GPIO_Init+0x238>)
 800323a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800323e:	4a2e      	ldr	r2, [pc, #184]	@ (80032f8 <HAL_GPIO_Init+0x238>)
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003248:	4b2b      	ldr	r3, [pc, #172]	@ (80032f8 <HAL_GPIO_Init+0x238>)
 800324a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003256:	4a29      	ldr	r2, [pc, #164]	@ (80032fc <HAL_GPIO_Init+0x23c>)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a20      	ldr	r2, [pc, #128]	@ (8003300 <HAL_GPIO_Init+0x240>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d052      	beq.n	8003328 <HAL_GPIO_Init+0x268>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1f      	ldr	r2, [pc, #124]	@ (8003304 <HAL_GPIO_Init+0x244>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_GPIO_Init+0x22e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_GPIO_Init+0x248>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02b      	beq.n	80032ea <HAL_GPIO_Init+0x22a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1d      	ldr	r2, [pc, #116]	@ (800330c <HAL_GPIO_Init+0x24c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d025      	beq.n	80032e6 <HAL_GPIO_Init+0x226>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <HAL_GPIO_Init+0x250>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01f      	beq.n	80032e2 <HAL_GPIO_Init+0x222>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <HAL_GPIO_Init+0x254>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d019      	beq.n	80032de <HAL_GPIO_Init+0x21e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <HAL_GPIO_Init+0x258>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0x21a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a19      	ldr	r2, [pc, #100]	@ (800331c <HAL_GPIO_Init+0x25c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00d      	beq.n	80032d6 <HAL_GPIO_Init+0x216>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_GPIO_Init+0x260>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x212>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <HAL_GPIO_Init+0x264>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_GPIO_Init+0x20e>
 80032ca:	2309      	movs	r3, #9
 80032cc:	e02d      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032ce:	230a      	movs	r3, #10
 80032d0:	e02b      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032d2:	2308      	movs	r3, #8
 80032d4:	e029      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032d6:	2307      	movs	r3, #7
 80032d8:	e027      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032da:	2306      	movs	r3, #6
 80032dc:	e025      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032de:	2305      	movs	r3, #5
 80032e0:	e023      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e021      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e01f      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e01d      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e01b      	b.n	800332a <HAL_GPIO_Init+0x26a>
 80032f2:	bf00      	nop
 80032f4:	58000080 	.word	0x58000080
 80032f8:	58024400 	.word	0x58024400
 80032fc:	58000400 	.word	0x58000400
 8003300:	58020000 	.word	0x58020000
 8003304:	58020400 	.word	0x58020400
 8003308:	58020800 	.word	0x58020800
 800330c:	58020c00 	.word	0x58020c00
 8003310:	58021000 	.word	0x58021000
 8003314:	58021400 	.word	0x58021400
 8003318:	58021800 	.word	0x58021800
 800331c:	58021c00 	.word	0x58021c00
 8003320:	58022000 	.word	0x58022000
 8003324:	58022400 	.word	0x58022400
 8003328:	2300      	movs	r3, #0
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	f002 0203 	and.w	r2, r2, #3
 8003330:	0092      	lsls	r2, r2, #2
 8003332:	4093      	lsls	r3, r2
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800333a:	4938      	ldr	r1, [pc, #224]	@ (800341c <HAL_GPIO_Init+0x35c>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800336e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800339c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	3301      	adds	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	f47f ae63 	bne.w	80030d4 <HAL_GPIO_Init+0x14>
  }
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	3724      	adds	r7, #36	@ 0x24
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	58000400 	.word	0x58000400

08003420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e08b      	b.n	800354a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fd6a 	bl	8000f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	@ 0x24
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	e006      	b.n	80034a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d108      	bne.n	80034c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	e007      	b.n	80034d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <HAL_I2C_Init+0x134>)
 80034de:	430b      	orrs	r3, r1
 80034e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69d9      	ldr	r1, [r3, #28]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	02008000 	.word	0x02008000

08003558 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
  }
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d010      	beq.n	80035d2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	09db      	lsrs	r3, r3, #7
 80035b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	0a9b      	lsrs	r3, r3, #10
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d010      	beq.n	8003600 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	09db      	lsrs	r3, r3, #7
 80035e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0208 	orr.w	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	0a5b      	lsrs	r3, r3, #9
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	09db      	lsrs	r3, r3, #7
 8003610:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	f043 0202 	orr.w	r2, r3, #2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800362c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 030b 	and.w	r3, r3, #11
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fcdb 	bl	8003ffc <I2C_ITError>
  }
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	70fb      	strb	r3, [r7, #3]
 8003682:	4613      	mov	r3, r2
 8003684:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <I2C_Slave_ISR_IT+0x24>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0ed      	b.n	80038ce <I2C_Slave_ISR_IT+0x200>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f9c1 	bl	8003a9c <I2C_ITSlaveCplt>
 800371a:	e0d3      	b.n	80038c4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d04d      	beq.n	80037c4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003730:	2b00      	cmp	r3, #0
 8003732:	d047      	beq.n	80037c4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d128      	bne.n	8003790 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b28      	cmp	r3, #40	@ 0x28
 8003748:	d108      	bne.n	800375c <I2C_Slave_ISR_IT+0x8e>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003750:	d104      	bne.n	800375c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003752:	6939      	ldr	r1, [r7, #16]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fbfb 	bl	8003f50 <I2C_ITListenCplt>
 800375a:	e032      	b.n	80037c2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b29      	cmp	r3, #41	@ 0x29
 8003766:	d10e      	bne.n	8003786 <I2C_Slave_ISR_IT+0xb8>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800376e:	d00a      	beq.n	8003786 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2210      	movs	r2, #16
 8003776:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fd56 	bl	800422a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f92d 	bl	80039de <I2C_ITSlaveSeqCplt>
 8003784:	e01d      	b.n	80037c2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2210      	movs	r2, #16
 800378c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800378e:	e096      	b.n	80038be <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2210      	movs	r2, #16
 8003796:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379c:	f043 0204 	orr.w	r2, r3, #4
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <I2C_Slave_ISR_IT+0xe6>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037b0:	f040 8085 	bne.w	80038be <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b8:	4619      	mov	r1, r3
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fc1e 	bl	8003ffc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80037c0:	e07d      	b.n	80038be <I2C_Slave_ISR_IT+0x1f0>
 80037c2:	e07c      	b.n	80038be <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d030      	beq.n	8003832 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02a      	beq.n	8003832 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d14f      	bne.n	80038c2 <I2C_Slave_ISR_IT+0x1f4>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003828:	d04b      	beq.n	80038c2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f8d7 	bl	80039de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003830:	e047      	b.n	80038c2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	08db      	lsrs	r3, r3, #3
 8003842:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800384a:	6939      	ldr	r1, [r7, #16]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f842 	bl	80038d6 <I2C_ITAddrCplt>
 8003852:	e037      	b.n	80038c4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d031      	beq.n	80038c4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003868:	2b00      	cmp	r3, #0
 800386a:	d02b      	beq.n	80038c4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d018      	beq.n	80038a8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80038a6:	e00d      	b.n	80038c4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ae:	d002      	beq.n	80038b6 <I2C_Slave_ISR_IT+0x1e8>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f891 	bl	80039de <I2C_ITSlaveSeqCplt>
 80038bc:	e002      	b.n	80038c4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80038c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038ec:	2b28      	cmp	r3, #40	@ 0x28
 80038ee:	d16a      	bne.n	80039c6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	0c1b      	lsrs	r3, r3, #16
 8003908:	b29b      	uxth	r3, r3
 800390a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800390e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	b29b      	uxth	r3, r3
 8003926:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800392a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d138      	bne.n	80039a6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003934:	897b      	ldrh	r3, [r7, #10]
 8003936:	09db      	lsrs	r3, r3, #7
 8003938:	b29a      	uxth	r2, r3
 800393a:	89bb      	ldrh	r3, [r7, #12]
 800393c:	4053      	eors	r3, r2
 800393e:	b29b      	uxth	r3, r3
 8003940:	f003 0306 	and.w	r3, r3, #6
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11c      	bne.n	8003982 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003948:	897b      	ldrh	r3, [r7, #10]
 800394a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	2b02      	cmp	r3, #2
 800395c:	d13b      	bne.n	80039d6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2208      	movs	r2, #8
 800396a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003974:	89ba      	ldrh	r2, [r7, #12]
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fe7b 	bl	8003676 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003980:	e029      	b.n	80039d6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003982:	893b      	ldrh	r3, [r7, #8]
 8003984:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fc8f 	bl	80042ae <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003998:	89ba      	ldrh	r2, [r7, #12]
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fe69 	bl	8003676 <HAL_I2C_AddrCallback>
}
 80039a4:	e017      	b.n	80039d6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fc7f 	bl	80042ae <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039b8:	89ba      	ldrh	r2, [r7, #12]
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fe59 	bl	8003676 <HAL_I2C_AddrCallback>
}
 80039c4:	e007      	b.n	80039d6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2208      	movs	r2, #8
 80039cc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	0b9b      	lsrs	r3, r3, #14
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e00d      	b.n	8003a30 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	0bdb      	lsrs	r3, r3, #15
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a2e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b29      	cmp	r3, #41	@ 0x29
 8003a3a:	d112      	bne.n	8003a62 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2228      	movs	r2, #40	@ 0x28
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2221      	movs	r2, #33	@ 0x21
 8003a48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fc2e 	bl	80042ae <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff fdf7 	bl	800364e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a60:	e017      	b.n	8003a92 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a6c:	d111      	bne.n	8003a92 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2228      	movs	r2, #40	@ 0x28
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2222      	movs	r2, #34	@ 0x22
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fc15 	bl	80042ae <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fde8 	bl	8003662 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003abe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ac8:	7afb      	ldrb	r3, [r7, #11]
 8003aca:	2b21      	cmp	r3, #33	@ 0x21
 8003acc:	d002      	beq.n	8003ad4 <I2C_ITSlaveCplt+0x38>
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	2b29      	cmp	r3, #41	@ 0x29
 8003ad2:	d108      	bne.n	8003ae6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ad4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fbe8 	bl	80042ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2221      	movs	r2, #33	@ 0x21
 8003ae2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ae4:	e019      	b.n	8003b1a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	2b22      	cmp	r3, #34	@ 0x22
 8003aea:	d002      	beq.n	8003af2 <I2C_ITSlaveCplt+0x56>
 8003aec:	7afb      	ldrb	r3, [r7, #11]
 8003aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003af0:	d108      	bne.n	8003b04 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003af2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fbd9 	bl	80042ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2222      	movs	r2, #34	@ 0x22
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b02:	e00a      	b.n	8003b1a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003b04:	7afb      	ldrb	r3, [r7, #11]
 8003b06:	2b28      	cmp	r3, #40	@ 0x28
 8003b08:	d107      	bne.n	8003b1a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003b0a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fbcd 	bl	80042ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b28:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b80      	ldr	r3, [pc, #512]	@ (8003d38 <I2C_ITSlaveCplt+0x29c>)
 8003b36:	400b      	ands	r3, r1
 8003b38:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fb75 	bl	800422a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	0b9b      	lsrs	r3, r3, #14
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d07a      	beq.n	8003c42 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b5a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8112 	beq.w	8003d8a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a73      	ldr	r2, [pc, #460]	@ (8003d3c <I2C_ITSlaveCplt+0x2a0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d059      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a71      	ldr	r2, [pc, #452]	@ (8003d40 <I2C_ITSlaveCplt+0x2a4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d053      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6f      	ldr	r2, [pc, #444]	@ (8003d44 <I2C_ITSlaveCplt+0x2a8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d04d      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6d      	ldr	r2, [pc, #436]	@ (8003d48 <I2C_ITSlaveCplt+0x2ac>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d047      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6b      	ldr	r2, [pc, #428]	@ (8003d4c <I2C_ITSlaveCplt+0x2b0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d041      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a69      	ldr	r2, [pc, #420]	@ (8003d50 <I2C_ITSlaveCplt+0x2b4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d03b      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a67      	ldr	r2, [pc, #412]	@ (8003d54 <I2C_ITSlaveCplt+0x2b8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d035      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a65      	ldr	r2, [pc, #404]	@ (8003d58 <I2C_ITSlaveCplt+0x2bc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02f      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a63      	ldr	r2, [pc, #396]	@ (8003d5c <I2C_ITSlaveCplt+0x2c0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d029      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a61      	ldr	r2, [pc, #388]	@ (8003d60 <I2C_ITSlaveCplt+0x2c4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d023      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a5f      	ldr	r2, [pc, #380]	@ (8003d64 <I2C_ITSlaveCplt+0x2c8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8003d68 <I2C_ITSlaveCplt+0x2cc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d017      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5b      	ldr	r2, [pc, #364]	@ (8003d6c <I2C_ITSlaveCplt+0x2d0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d011      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a59      	ldr	r2, [pc, #356]	@ (8003d70 <I2C_ITSlaveCplt+0x2d4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a57      	ldr	r2, [pc, #348]	@ (8003d74 <I2C_ITSlaveCplt+0x2d8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d005      	beq.n	8003c26 <I2C_ITSlaveCplt+0x18a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a55      	ldr	r2, [pc, #340]	@ (8003d78 <I2C_ITSlaveCplt+0x2dc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d105      	bne.n	8003c32 <I2C_ITSlaveCplt+0x196>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	e004      	b.n	8003c3c <I2C_ITSlaveCplt+0x1a0>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003c40:	e0a3      	b.n	8003d8a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	0bdb      	lsrs	r3, r3, #15
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 809d 	beq.w	8003d8a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8090 	beq.w	8003d8a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a32      	ldr	r2, [pc, #200]	@ (8003d3c <I2C_ITSlaveCplt+0x2a0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d059      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a30      	ldr	r2, [pc, #192]	@ (8003d40 <I2C_ITSlaveCplt+0x2a4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d053      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2e      	ldr	r2, [pc, #184]	@ (8003d44 <I2C_ITSlaveCplt+0x2a8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04d      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2c      	ldr	r2, [pc, #176]	@ (8003d48 <I2C_ITSlaveCplt+0x2ac>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d047      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d4c <I2C_ITSlaveCplt+0x2b0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d041      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a28      	ldr	r2, [pc, #160]	@ (8003d50 <I2C_ITSlaveCplt+0x2b4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d03b      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	@ (8003d54 <I2C_ITSlaveCplt+0x2b8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d035      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a24      	ldr	r2, [pc, #144]	@ (8003d58 <I2C_ITSlaveCplt+0x2bc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02f      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <I2C_ITSlaveCplt+0x2c0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d029      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <I2C_ITSlaveCplt+0x2c4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d023      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d64 <I2C_ITSlaveCplt+0x2c8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01d      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d68 <I2C_ITSlaveCplt+0x2cc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d017      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <I2C_ITSlaveCplt+0x2d0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d011      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	@ (8003d70 <I2C_ITSlaveCplt+0x2d4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00b      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a16      	ldr	r2, [pc, #88]	@ (8003d74 <I2C_ITSlaveCplt+0x2d8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d005      	beq.n	8003d2a <I2C_ITSlaveCplt+0x28e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a14      	ldr	r2, [pc, #80]	@ (8003d78 <I2C_ITSlaveCplt+0x2dc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d128      	bne.n	8003d7c <I2C_ITSlaveCplt+0x2e0>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	e027      	b.n	8003d86 <I2C_ITSlaveCplt+0x2ea>
 8003d36:	bf00      	nop
 8003d38:	fe00e800 	.word	0xfe00e800
 8003d3c:	40020010 	.word	0x40020010
 8003d40:	40020028 	.word	0x40020028
 8003d44:	40020040 	.word	0x40020040
 8003d48:	40020058 	.word	0x40020058
 8003d4c:	40020070 	.word	0x40020070
 8003d50:	40020088 	.word	0x40020088
 8003d54:	400200a0 	.word	0x400200a0
 8003d58:	400200b8 	.word	0x400200b8
 8003d5c:	40020410 	.word	0x40020410
 8003d60:	40020428 	.word	0x40020428
 8003d64:	40020440 	.word	0x40020440
 8003d68:	40020458 	.word	0x40020458
 8003d6c:	40020470 	.word	0x40020470
 8003d70:	40020488 	.word	0x40020488
 8003d74:	400204a0 	.word	0x400204a0
 8003d78:	400204b8 	.word	0x400204b8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d020      	beq.n	8003dd8 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00c      	beq.n	8003dd8 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d04a      	beq.n	8003e90 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d044      	beq.n	8003e90 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d128      	bne.n	8003e62 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b28      	cmp	r3, #40	@ 0x28
 8003e1a:	d108      	bne.n	8003e2e <I2C_ITSlaveCplt+0x392>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e22:	d104      	bne.n	8003e2e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e24:	6979      	ldr	r1, [r7, #20]
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f892 	bl	8003f50 <I2C_ITListenCplt>
 8003e2c:	e030      	b.n	8003e90 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b29      	cmp	r3, #41	@ 0x29
 8003e38:	d10e      	bne.n	8003e58 <I2C_ITSlaveCplt+0x3bc>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e40:	d00a      	beq.n	8003e58 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2210      	movs	r2, #16
 8003e48:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f9ed 	bl	800422a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fdc4 	bl	80039de <I2C_ITSlaveSeqCplt>
 8003e56:	e01b      	b.n	8003e90 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	61da      	str	r2, [r3, #28]
 8003e60:	e016      	b.n	8003e90 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2210      	movs	r2, #16
 8003e68:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f043 0204 	orr.w	r2, r3, #4
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <I2C_ITSlaveCplt+0x3e8>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e82:	d105      	bne.n	8003e90 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8b6 	bl	8003ffc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d010      	beq.n	8003ec8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8a5 	bl	8003ffc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b28      	cmp	r3, #40	@ 0x28
 8003ebc:	d141      	bne.n	8003f42 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ebe:	6979      	ldr	r1, [r7, #20]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f845 	bl	8003f50 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ec6:	e03c      	b.n	8003f42 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ed0:	d014      	beq.n	8003efc <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fd83 	bl	80039de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a1c      	ldr	r2, [pc, #112]	@ (8003f4c <I2C_ITSlaveCplt+0x4b0>)
 8003edc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fbcc 	bl	8003692 <HAL_I2C_ListenCpltCallback>
}
 8003efa:	e022      	b.n	8003f42 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b22      	cmp	r3, #34	@ 0x22
 8003f06:	d10e      	bne.n	8003f26 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fb9f 	bl	8003662 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f24:	e00d      	b.n	8003f42 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fb86 	bl	800364e <HAL_I2C_SlaveTxCpltCallback>
}
 8003f42:	bf00      	nop
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	ffff0000 	.word	0xffff0000

08003f50 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ff8 <I2C_ITListenCplt+0xa8>)
 8003f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d022      	beq.n	8003fce <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d012      	beq.n	8003fce <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fce:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f96b 	bl	80042ae <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2210      	movs	r2, #16
 8003fde:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fb52 	bl	8003692 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	ffff0000 	.word	0xffff0000

08003ffc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a6d      	ldr	r2, [pc, #436]	@ (80041d0 <I2C_ITError+0x1d4>)
 800401a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b28      	cmp	r3, #40	@ 0x28
 8004032:	d005      	beq.n	8004040 <I2C_ITError+0x44>
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b29      	cmp	r3, #41	@ 0x29
 8004038:	d002      	beq.n	8004040 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b2a      	cmp	r3, #42	@ 0x2a
 800403e:	d10b      	bne.n	8004058 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004040:	2103      	movs	r1, #3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f933 	bl	80042ae <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2228      	movs	r2, #40	@ 0x28
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a60      	ldr	r2, [pc, #384]	@ (80041d4 <I2C_ITError+0x1d8>)
 8004054:	635a      	str	r2, [r3, #52]	@ 0x34
 8004056:	e030      	b.n	80040ba <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004058:	f248 0103 	movw	r1, #32771	@ 0x8003
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f926 	bl	80042ae <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8e1 	bl	800422a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b60      	cmp	r3, #96	@ 0x60
 8004072:	d01f      	beq.n	80040b4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b20      	cmp	r3, #32
 8004088:	d114      	bne.n	80040b4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d109      	bne.n	80040ac <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2210      	movs	r2, #16
 800409e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a4:	f043 0204 	orr.w	r2, r3, #4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2220      	movs	r2, #32
 80040b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d039      	beq.n	800413c <I2C_ITError+0x140>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b11      	cmp	r3, #17
 80040cc:	d002      	beq.n	80040d4 <I2C_ITError+0xd8>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b21      	cmp	r3, #33	@ 0x21
 80040d2:	d133      	bne.n	800413c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040e2:	d107      	bne.n	80040f4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe ffd3 	bl	80030a4 <HAL_DMA_GetState>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b01      	cmp	r3, #1
 8004102:	d017      	beq.n	8004134 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	4a33      	ldr	r2, [pc, #204]	@ (80041d8 <I2C_ITError+0x1dc>)
 800410a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fd7d 	bl	8002c18 <HAL_DMA_Abort_IT>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d04d      	beq.n	80041c0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800412e:	4610      	mov	r0, r2
 8004130:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004132:	e045      	b.n	80041c0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f851 	bl	80041dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800413a:	e041      	b.n	80041c0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d039      	beq.n	80041b8 <I2C_ITError+0x1bc>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b12      	cmp	r3, #18
 8004148:	d002      	beq.n	8004150 <I2C_ITError+0x154>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b22      	cmp	r3, #34	@ 0x22
 800414e:	d133      	bne.n	80041b8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800415e:	d107      	bne.n	8004170 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800416e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe ff95 	bl	80030a4 <HAL_DMA_GetState>
 800417a:	4603      	mov	r3, r0
 800417c:	2b01      	cmp	r3, #1
 800417e:	d017      	beq.n	80041b0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	4a14      	ldr	r2, [pc, #80]	@ (80041d8 <I2C_ITError+0x1dc>)
 8004186:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fd3f 	bl	8002c18 <HAL_DMA_Abort_IT>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d011      	beq.n	80041c4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041aa:	4610      	mov	r0, r2
 80041ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041ae:	e009      	b.n	80041c4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f813 	bl	80041dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041b6:	e005      	b.n	80041c4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f80f 	bl	80041dc <I2C_TreatErrorCallback>
  }
}
 80041be:	e002      	b.n	80041c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041c0:	bf00      	nop
 80041c2:	e000      	b.n	80041c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041c4:	bf00      	nop
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	ffff0000 	.word	0xffff0000
 80041d4:	080036cf 	.word	0x080036cf
 80041d8:	08004273 	.word	0x08004273

080041dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b60      	cmp	r3, #96	@ 0x60
 80041ee:	d10e      	bne.n	800420e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fa57 	bl	80036ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800420c:	e009      	b.n	8004222 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fa42 	bl	80036a6 <HAL_I2C_ErrorCallback>
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d103      	bne.n	8004248 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2200      	movs	r2, #0
 8004246:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d007      	beq.n	8004266 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	619a      	str	r2, [r3, #24]
  }
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	2200      	movs	r2, #0
 800428e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	2200      	movs	r2, #0
 800429e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff ff9b 	bl	80041dc <I2C_TreatErrorCallback>
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	460b      	mov	r3, r1
 80042b8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80042be:	887b      	ldrh	r3, [r7, #2]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00f      	beq.n	80042e8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80042ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042dc:	2b28      	cmp	r3, #40	@ 0x28
 80042de:	d003      	beq.n	80042e8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80042e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80042e8:	887b      	ldrh	r3, [r7, #2]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00f      	beq.n	8004312 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80042f8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004306:	2b28      	cmp	r3, #40	@ 0x28
 8004308:	d003      	beq.n	8004312 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004310:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004312:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004316:	2b00      	cmp	r3, #0
 8004318:	da03      	bge.n	8004322 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	2b10      	cmp	r3, #16
 8004326:	d103      	bne.n	8004330 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800432e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	2b20      	cmp	r3, #32
 8004334:	d103      	bne.n	800433e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f043 0320 	orr.w	r3, r3, #32
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	2b40      	cmp	r3, #64	@ 0x40
 8004342:	d103      	bne.n	800434c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	43da      	mvns	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	400a      	ands	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b20      	cmp	r3, #32
 800437e:	d138      	bne.n	80043f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800438a:	2302      	movs	r3, #2
 800438c:	e032      	b.n	80043f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2224      	movs	r2, #36	@ 0x24
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
  }
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b20      	cmp	r3, #32
 8004414:	d139      	bne.n	800448a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004420:	2302      	movs	r3, #2
 8004422:	e033      	b.n	800448c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2224      	movs	r2, #36	@ 0x24
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004452:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	e000      	b.n	800448c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800448a:	2302      	movs	r3, #2
  }
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e070      	b.n	800458c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc fdbe 	bl	8001040 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800451a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a19      	ldr	r2, [pc, #100]	@ (8004594 <HAL_JPEG_Init+0xfc>)
 8004530:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a18      	ldr	r2, [pc, #96]	@ (8004598 <HAL_JPEG_Init+0x100>)
 8004536:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fc81 	bl	8004e4c <JPEG_Set_HuffEnc_Mem>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e018      	b.n	800458c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004568:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	0801171c 	.word	0x0801171c
 8004598:	0801175c 	.word	0x0801175c

0800459c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_JPEG_GetInfo+0x16>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e083      	b.n	80046be <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d103      	bne.n	80045cc <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2210      	movs	r2, #16
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e017      	b.n	80045fc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e00c      	b.n	80045fc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d103      	bne.n	80045f8 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2230      	movs	r2, #48	@ 0x30
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e001      	b.n	80045fc <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e060      	b.n	80046be <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	0c1b      	lsrs	r3, r3, #16
 8004604:	b29a      	uxth	r2, r3
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	b29a      	uxth	r2, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b10      	cmp	r3, #16
 800461e:	d003      	beq.n	8004628 <HAL_JPEG_GetInfo+0x8c>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b30      	cmp	r3, #48	@ 0x30
 8004626:	d140      	bne.n	80046aa <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d109      	bne.n	800466c <HAL_JPEG_GetInfo+0xd0>
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_JPEG_GetInfo+0xd0>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2202      	movs	r2, #2
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	e01d      	b.n	80046a8 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_JPEG_GetInfo+0xea>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <HAL_JPEG_GetInfo+0xea>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2200      	movs	r2, #0
 8004682:	605a      	str	r2, [r3, #4]
 8004684:	e010      	b.n	80046a8 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d109      	bne.n	80046a0 <HAL_JPEG_GetInfo+0x104>
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_JPEG_GetInfo+0x104>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2201      	movs	r2, #1
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	e003      	b.n	80046a8 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2200      	movs	r2, #0
 80046a4:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80046a6:	e003      	b.n	80046b0 <HAL_JPEG_GetInfo+0x114>
 80046a8:	e002      	b.n	80046b0 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2200      	movs	r2, #0
 80046ae:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f001 fa7b 	bl	8005bac <JPEG_GetQuality>
 80046b6:	4602      	mov	r2, r0
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d116      	bne.n	800470e <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d033      	beq.n	8004768 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004704:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54
 800470c:	e02c      	b.n	8004768 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b08      	cmp	r3, #8
 8004718:	d126      	bne.n	8004768 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f043 0306 	orr.w	r3, r3, #6
 8004736:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8004754:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	43da      	mvns	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	400a      	ands	r2, r1
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	3b03      	subs	r3, #3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d813      	bhi.n	8004820 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d103      	bne.n	800480c <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fda3 	bl	8005350 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800480a:	e00b      	b.n	8004824 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d105      	bne.n	8004824 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f001 f848 	bl	80058ae <JPEG_DMA_ContinueProcess>
      break;
 800481e:	e001      	b.n	8004824 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_JPEG_IRQHandler+0x44>
      break;
 8004824:	bf00      	nop
  }
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800482e:	b480      	push	{r7}
 8004830:	b08b      	sub	sp, #44	@ 0x2c
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	e020      	b.n	8004888 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	4413      	add	r3, r2
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8004850:	6a3a      	ldr	r2, [r7, #32]
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	4413      	add	r3, r2
 8004856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485a:	d90f      	bls.n	800487c <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e055      	b.n	800490c <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	440b      	add	r3, r1
 800486a:	3201      	adds	r2, #1
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]
      p++;
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	3301      	adds	r3, #1
 8004874:	623b      	str	r3, [r7, #32]
      i--;
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	3b01      	subs	r3, #1
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1ee      	bne.n	8004860 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3301      	adds	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	d9db      	bls.n	8004846 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	4413      	add	r3, r2
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
  p = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80048ac:	e027      	b.n	80048fe <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	601a      	str	r2, [r3, #0]
      p++;
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	3301      	adds	r3, #1
 80048be:	623b      	str	r3, [r7, #32]
      code++;
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	3301      	adds	r3, #1
 80048c4:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	4413      	add	r3, r2
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d0eb      	beq.n	80048ae <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b1f      	cmp	r3, #31
 80048da:	d901      	bls.n	80048e0 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e015      	b.n	800490c <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80048e0:	2201      	movs	r2, #1
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d301      	bcc.n	80048f2 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e00c      	b.n	800490c <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	61bb      	str	r3, [r7, #24]
    si++;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3301      	adds	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	4413      	add	r3, r2
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1dd      	bne.n	80048c6 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	372c      	adds	r7, #44	@ 0x2c
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800491e:	af00      	add	r7, sp, #0
 8004920:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004924:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8004928:	6018      	str	r0, [r3, #0]
 800492a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800492e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8004932:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004934:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004938:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	f107 020c 	add.w	r2, r7, #12
 8004946:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800494a:	f7ff ff70 	bl	800482e <JPEG_Bits_To_SizeCodes>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8004954:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800495c:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8004960:	e075      	b.n	8004a4e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8004968:	e067      	b.n	8004a3a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800496a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800496e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8004978:	4413      	add	r3, r2
 800497a:	3310      	adds	r3, #16
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8004982:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800498a:	23a0      	movs	r3, #160	@ 0xa0
 800498c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8004990:	e021      	b.n	80049d6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004992:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004996:	2bf0      	cmp	r3, #240	@ 0xf0
 8004998:	d103      	bne.n	80049a2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800499a:	23a1      	movs	r3, #161	@ 0xa1
 800499c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80049a0:	e019      	b.n	80049d6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80049a2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80049b0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80049bc:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	461a      	mov	r2, r3
 80049ca:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80049ce:	4413      	add	r3, r2
 80049d0:	3b01      	subs	r3, #1
 80049d2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80049d6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80049da:	2ba1      	cmp	r3, #161	@ 0xa1
 80049dc:	d901      	bls.n	80049e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80049de:	2301      	movs	r3, #1
 80049e0:	e035      	b.n	8004a4e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80049e2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80049e6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80049ea:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80049ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049f2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80049f6:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004a00:	3328      	adds	r3, #40	@ 0x28
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004a08:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004a0c:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8004a10:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8004a14:	4413      	add	r3, r2
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b2d9      	uxtb	r1, r3
 8004a1c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004a20:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004a2a:	4413      	add	r3, r2
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	701a      	strb	r2, [r3, #0]
      k++;
 8004a30:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8004a34:	3301      	adds	r3, #1
 8004a36:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8004a3a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004a3e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d38e      	bcc.n	800496a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004a64:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8004a68:	6018      	str	r0, [r3, #0]
 8004a6a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004a6e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8004a72:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004a74:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004a78:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8004a82:	f107 0208 	add.w	r2, r7, #8
 8004a86:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8004a8a:	f7ff fed0 	bl	800482e <JPEG_Bits_To_SizeCodes>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8004a94:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8004a9c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8004aa0:	e048      	b.n	8004b34 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8004aa8:	e03d      	b.n	8004b26 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8004aaa:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004aae:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8004ab8:	4413      	add	r3, r2
 8004aba:	3310      	adds	r3, #16
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004ac2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8004ac6:	2b0b      	cmp	r3, #11
 8004ac8:	d901      	bls.n	8004ace <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004aca:	2301      	movs	r3, #1
 8004acc:	e032      	b.n	8004b34 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004ace:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004ad2:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8004ad6:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8004ada:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ade:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004ae2:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8004aec:	3302      	adds	r3, #2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004af4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004af8:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8004afc:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8004b00:	4413      	add	r3, r2
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b2d9      	uxtb	r1, r3
 8004b08:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004b0c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8004b16:	4413      	add	r3, r2
 8004b18:	460a      	mov	r2, r1
 8004b1a:	701a      	strb	r2, [r3, #0]
      k++;
 8004b1c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8004b20:	3301      	adds	r3, #1
 8004b22:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8004b26:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8004b2a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d3bb      	bcc.n	8004aaa <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b09a      	sub	sp, #104	@ 0x68
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d106      	bne.n	8004b66 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8004b60:	3318      	adds	r3, #24
 8004b62:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b64:	e00f      	b.n	8004b86 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d106      	bne.n	8004b82 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b80:	e001      	b.n	8004b86 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e059      	b.n	8004c3a <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d055      	beq.n	8004c38 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004b8c:	f107 0314 	add.w	r3, r7, #20
 8004b90:	4619      	mov	r1, r3
 8004b92:	68b8      	ldr	r0, [r7, #8]
 8004b94:	f7ff ff60 	bl	8004a58 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8004b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004baa:	e046      	b.n	8004c3a <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8004bac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bae:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8004bb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bb2:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8004bb6:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004bb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bba:	3304      	adds	r3, #4
 8004bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8004bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bc0:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8004bc4:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004bc6:	230c      	movs	r3, #12
 8004bc8:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8004bca:	e032      	b.n	8004c32 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8004bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8004bd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bd4:	3b04      	subs	r3, #4
 8004bd6:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004bd8:	f107 0214 	add.w	r2, r7, #20
 8004bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bde:	4413      	add	r3, r2
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bea:	3302      	adds	r3, #2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	3368      	adds	r3, #104	@ 0x68
 8004bf0:	443b      	add	r3, r7
 8004bf2:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8004bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004c02:	f107 0214 	add.w	r2, r7, #20
 8004c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c08:	4413      	add	r3, r2
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004c12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c14:	3302      	adds	r3, #2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	3368      	adds	r3, #104	@ 0x68
 8004c1a:	443b      	add	r3, r7
 8004c1c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	4313      	orrs	r3, r2
 8004c24:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c30:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d8c9      	bhi.n	8004bcc <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3768      	adds	r7, #104	@ 0x68
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004c50:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004c54:	6018      	str	r0, [r3, #0]
 8004c56:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004c5a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8004c5e:	6019      	str	r1, [r3, #0]
 8004c60:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004c64:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8004c68:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004c6a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004c6e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8004c7e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d10c      	bne.n	8004ca2 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004c88:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004c8c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c98:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004c9c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8004ca0:	e01d      	b.n	8004cde <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004ca2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004ca6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8004cb2:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8004cb6:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d10c      	bne.n	8004cda <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004cc0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004cc4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8004cd0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004cd4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8004cd8:	e001      	b.n	8004cde <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0a8      	b.n	8004e30 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8004cde:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004ce2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80a0 	beq.w	8004e2e <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004cee:	f107 0214 	add.w	r2, r7, #20
 8004cf2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004cf6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	f7ff fe0b 	bl	8004918 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8004d08:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8004d10:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8004d14:	e08c      	b.n	8004e30 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004d16:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8004d1a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8004d24:	e00e      	b.n	8004d44 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8004d26:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d2a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8004d2e:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004d30:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d34:	3304      	adds	r3, #4
 8004d36:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8004d3a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8004d44:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d9ec      	bls.n	8004d26 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8004d4c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d50:	4a3a      	ldr	r2, [pc, #232]	@ (8004e3c <JPEG_Set_HuffAC_Mem+0x1f8>)
 8004d52:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004d54:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d58:	3304      	adds	r3, #4
 8004d5a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8004d5e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d62:	4a37      	ldr	r2, [pc, #220]	@ (8004e40 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8004d64:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004d66:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8004d70:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d74:	4a33      	ldr	r2, [pc, #204]	@ (8004e44 <JPEG_Set_HuffAC_Mem+0x200>)
 8004d76:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004d78:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8004d82:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004d86:	4a30      	ldr	r2, [pc, #192]	@ (8004e48 <JPEG_Set_HuffAC_Mem+0x204>)
 8004d88:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004d8a:	23a2      	movs	r3, #162	@ 0xa2
 8004d8c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8004d90:	e049      	b.n	8004e26 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8004d92:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004d96:	3b01      	subs	r3, #1
 8004d98:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8004d9c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8004da0:	3b04      	subs	r3, #4
 8004da2:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004da6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004daa:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8004dae:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004db2:	4413      	add	r3, r2
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004dbc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004dc0:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8004dc4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004dc8:	3328      	adds	r3, #40	@ 0x28
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8004dd8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004de2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004de6:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8004dea:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004df8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004dfc:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8004e00:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004e04:	3328      	adds	r3, #40	@ 0x28
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004e14:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8004e18:	041a      	lsls	r2, r3, #16
 8004e1a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8004e24:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004e26:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d8b1      	bhi.n	8004d92 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	0fd10fd0 	.word	0x0fd10fd0
 8004e40:	0fd30fd2 	.word	0x0fd30fd2
 8004e44:	0fd50fd4 	.word	0x0fd50fd4
 8004e48:	0fd70fd6 	.word	0x0fd70fd6

08004e4c <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f84d 	bl	8004ef4 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004e62:	461a      	mov	r2, r3
 8004e64:	491f      	ldr	r1, [pc, #124]	@ (8004ee4 <JPEG_Set_HuffEnc_Mem+0x98>)
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff feec 	bl	8004c44 <JPEG_Set_HuffAC_Mem>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	e030      	b.n	8004edc <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004e82:	461a      	mov	r2, r3
 8004e84:	4918      	ldr	r1, [pc, #96]	@ (8004ee8 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fedc 	bl	8004c44 <JPEG_Set_HuffAC_Mem>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	e020      	b.n	8004edc <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4911      	ldr	r1, [pc, #68]	@ (8004eec <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fe49 	bl	8004b3e <JPEG_Set_HuffDC_Mem>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	e010      	b.n	8004edc <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	490a      	ldr	r1, [pc, #40]	@ (8004ef0 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fe39 	bl	8004b3e <JPEG_Set_HuffDC_Mem>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	e000      	b.n	8004edc <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	08011574 	.word	0x08011574
 8004ee8:	08011628 	.word	0x08011628
 8004eec:	0801153c 	.word	0x0801153c
 8004ef0:	08011558 	.word	0x08011558

08004ef4 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b08b      	sub	sp, #44	@ 0x2c
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8004efc:	4b80      	ldr	r3, [pc, #512]	@ (8005100 <JPEG_Set_Huff_DHTMem+0x20c>)
 8004efe:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004f00:	4b80      	ldr	r3, [pc, #512]	@ (8005104 <JPEG_Set_Huff_DHTMem+0x210>)
 8004f02:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004f04:	4b80      	ldr	r3, [pc, #512]	@ (8005108 <JPEG_Set_Huff_DHTMem+0x214>)
 8004f06:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8004f08:	4b80      	ldr	r3, [pc, #512]	@ (800510c <JPEG_Set_Huff_DHTMem+0x218>)
 8004f0a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004f14:	330c      	adds	r3, #12
 8004f16:	623b      	str	r3, [r7, #32]
  index = 16;
 8004f18:	2310      	movs	r3, #16
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004f1c:	e01d      	b.n	8004f5a <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	3b01      	subs	r3, #1
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	5cd3      	ldrb	r3, [r2, r3]
 8004f26:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	3b02      	subs	r3, #2
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004f32:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	3b03      	subs	r3, #3
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004f3e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8004f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f42:	3a04      	subs	r2, #4
 8004f44:	6979      	ldr	r1, [r7, #20]
 8004f46:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004f48:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	601a      	str	r2, [r3, #0]
    address--;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	3b04      	subs	r3, #4
 8004f52:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	3b04      	subs	r3, #4
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d8de      	bhi.n	8004f1e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004f68:	3318      	adds	r3, #24
 8004f6a:	623b      	str	r3, [r7, #32]
  index = 12;
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004f70:	e021      	b.n	8004fb6 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	3b01      	subs	r3, #1
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4413      	add	r3, r2
 8004f7a:	7c1b      	ldrb	r3, [r3, #16]
 8004f7c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	3b02      	subs	r3, #2
 8004f82:	6979      	ldr	r1, [r7, #20]
 8004f84:	440b      	add	r3, r1
 8004f86:	7c1b      	ldrb	r3, [r3, #16]
 8004f88:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f8a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	3b03      	subs	r3, #3
 8004f90:	6979      	ldr	r1, [r7, #20]
 8004f92:	440b      	add	r3, r1
 8004f94:	7c1b      	ldrb	r3, [r3, #16]
 8004f96:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004f98:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9c:	3a04      	subs	r2, #4
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004fa4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	601a      	str	r2, [r3, #0]
    address--;
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	3b04      	subs	r3, #4
 8004fae:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	3b04      	subs	r3, #4
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d8da      	bhi.n	8004f72 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004fc4:	3328      	adds	r3, #40	@ 0x28
 8004fc6:	623b      	str	r3, [r7, #32]
  index = 16;
 8004fc8:	2310      	movs	r3, #16
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004fcc:	e01d      	b.n	800500a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	5cd3      	ldrb	r3, [r2, r3]
 8004fd6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	3b02      	subs	r3, #2
 8004fdc:	69f9      	ldr	r1, [r7, #28]
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004fe2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	3b03      	subs	r3, #3
 8004fe8:	69f9      	ldr	r1, [r7, #28]
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004fee:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff2:	3a04      	subs	r2, #4
 8004ff4:	69f9      	ldr	r1, [r7, #28]
 8004ff6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004ff8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	601a      	str	r2, [r3, #0]
    address--;
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	3b04      	subs	r3, #4
 8005002:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	3b04      	subs	r3, #4
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	2b03      	cmp	r3, #3
 800500e:	d8de      	bhi.n	8004fce <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005018:	33cc      	adds	r3, #204	@ 0xcc
 800501a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b3b      	ldr	r3, [pc, #236]	@ (8005110 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005022:	4013      	ands	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	3b04      	subs	r3, #4
 8005046:	623b      	str	r3, [r7, #32]
  index = 160;
 8005048:	23a0      	movs	r3, #160	@ 0xa0
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800504c:	e021      	b.n	8005092 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	3b01      	subs	r3, #1
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	7c1b      	ldrb	r3, [r3, #16]
 8005058:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	3b02      	subs	r3, #2
 800505e:	69f9      	ldr	r1, [r7, #28]
 8005060:	440b      	add	r3, r1
 8005062:	7c1b      	ldrb	r3, [r3, #16]
 8005064:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005066:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	3b03      	subs	r3, #3
 800506c:	69f9      	ldr	r1, [r7, #28]
 800506e:	440b      	add	r3, r1
 8005070:	7c1b      	ldrb	r3, [r3, #16]
 8005072:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005074:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8005076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005078:	3a04      	subs	r2, #4
 800507a:	69f9      	ldr	r1, [r7, #28]
 800507c:	440a      	add	r2, r1
 800507e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005080:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	601a      	str	r2, [r3, #0]
    address--;
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	3b04      	subs	r3, #4
 800508a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	3b04      	subs	r3, #4
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	2b03      	cmp	r3, #3
 8005096:	d8da      	bhi.n	800504e <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80050a0:	33cc      	adds	r3, #204	@ 0xcc
 80050a2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	061a      	lsls	r2, r3, #24
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  *address = value;
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80050ce:	33dc      	adds	r3, #220	@ 0xdc
 80050d0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <JPEG_Set_Huff_DHTMem+0x21c>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	7bdb      	ldrb	r3, [r3, #15]
 80050e0:	021a      	lsls	r2, r3, #8
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	7b92      	ldrb	r2, [r2, #14]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  *address = value;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	3b04      	subs	r3, #4
 80050f8:	623b      	str	r3, [r7, #32]
  index = 12;
 80050fa:	230c      	movs	r3, #12
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80050fe:	e027      	b.n	8005150 <JPEG_Set_Huff_DHTMem+0x25c>
 8005100:	08011574 	.word	0x08011574
 8005104:	08011628 	.word	0x08011628
 8005108:	0801153c 	.word	0x0801153c
 800510c:	08011558 	.word	0x08011558
 8005110:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	3301      	adds	r3, #1
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	5cd3      	ldrb	r3, [r2, r3]
 800511c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800511e:	6939      	ldr	r1, [r7, #16]
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	440b      	add	r3, r1
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005128:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	3b01      	subs	r3, #1
 800512e:	6939      	ldr	r1, [r7, #16]
 8005130:	5ccb      	ldrb	r3, [r1, r3]
 8005132:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005134:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005138:	3a02      	subs	r2, #2
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800513e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	601a      	str	r2, [r3, #0]
    address--;
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	3b04      	subs	r3, #4
 8005148:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	3b04      	subs	r3, #4
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	2b03      	cmp	r3, #3
 8005154:	d8de      	bhi.n	8005114 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800515e:	33dc      	adds	r3, #220	@ 0xdc
 8005160:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	7c5b      	ldrb	r3, [r3, #17]
 800516e:	061a      	lsls	r2, r3, #24
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	431a      	orrs	r2, r3
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	7c1b      	ldrb	r3, [r3, #16]
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800518c:	33e8      	adds	r3, #232	@ 0xe8
 800518e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b6d      	ldr	r3, [pc, #436]	@ (800534c <JPEG_Set_Huff_DHTMem+0x458>)
 8005196:	4013      	ands	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	7edb      	ldrb	r3, [r3, #27]
 800519e:	021a      	lsls	r2, r3, #8
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	7e92      	ldrb	r2, [r2, #26]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  *address = value;
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	3b04      	subs	r3, #4
 80051b6:	623b      	str	r3, [r7, #32]
  index = 8;
 80051b8:	2308      	movs	r3, #8
 80051ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80051bc:	e021      	b.n	8005202 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4413      	add	r3, r2
 80051c6:	7c1b      	ldrb	r3, [r3, #16]
 80051c8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80051ca:	6939      	ldr	r1, [r7, #16]
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	440b      	add	r3, r1
 80051d0:	3310      	adds	r3, #16
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80051d6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	3b01      	subs	r3, #1
 80051dc:	6939      	ldr	r1, [r7, #16]
 80051de:	440b      	add	r3, r1
 80051e0:	7c1b      	ldrb	r3, [r3, #16]
 80051e2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80051e4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	3a02      	subs	r2, #2
 80051ea:	6939      	ldr	r1, [r7, #16]
 80051ec:	440a      	add	r2, r1
 80051ee:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80051f0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	601a      	str	r2, [r3, #0]
    address--;
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	3b04      	subs	r3, #4
 80051fa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	3b04      	subs	r3, #4
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	2b03      	cmp	r3, #3
 8005206:	d8da      	bhi.n	80051be <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005210:	33e8      	adds	r3, #232	@ 0xe8
 8005212:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	061a      	lsls	r2, r3, #24
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	431a      	orrs	r2, r3
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800523e:	33f8      	adds	r3, #248	@ 0xf8
 8005240:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4b41      	ldr	r3, [pc, #260]	@ (800534c <JPEG_Set_Huff_DHTMem+0x458>)
 8005248:	4013      	ands	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	7bdb      	ldrb	r3, [r3, #15]
 8005250:	021a      	lsls	r2, r3, #8
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	7b92      	ldrb	r2, [r2, #14]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	3b04      	subs	r3, #4
 8005268:	623b      	str	r3, [r7, #32]
  index = 12;
 800526a:	230c      	movs	r3, #12
 800526c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800526e:	e01d      	b.n	80052ac <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	3301      	adds	r3, #1
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	5cd3      	ldrb	r3, [r2, r3]
 8005278:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800527a:	69b9      	ldr	r1, [r7, #24]
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	440b      	add	r3, r1
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005284:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	3b01      	subs	r3, #1
 800528a:	69b9      	ldr	r1, [r7, #24]
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005290:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8005292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005294:	3a02      	subs	r2, #2
 8005296:	69b9      	ldr	r1, [r7, #24]
 8005298:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800529a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	601a      	str	r2, [r3, #0]
    address--;
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	3b04      	subs	r3, #4
 80052a4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	3b04      	subs	r3, #4
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d8de      	bhi.n	8005270 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80052ba:	33f8      	adds	r3, #248	@ 0xf8
 80052bc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	7c5b      	ldrb	r3, [r3, #17]
 80052ca:	061a      	lsls	r2, r3, #24
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	7c1b      	ldrb	r3, [r3, #16]
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80052e8:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80052ec:	623b      	str	r3, [r7, #32]
  index = 160;
 80052ee:	23a0      	movs	r3, #160	@ 0xa0
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80052f2:	e021      	b.n	8005338 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4413      	add	r3, r2
 80052fc:	7c1b      	ldrb	r3, [r3, #16]
 80052fe:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005300:	69b9      	ldr	r1, [r7, #24]
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	440b      	add	r3, r1
 8005306:	3310      	adds	r3, #16
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800530c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	3b01      	subs	r3, #1
 8005312:	69b9      	ldr	r1, [r7, #24]
 8005314:	440b      	add	r3, r1
 8005316:	7c1b      	ldrb	r3, [r3, #16]
 8005318:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800531a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800531c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800531e:	3a02      	subs	r2, #2
 8005320:	69b9      	ldr	r1, [r7, #24]
 8005322:	440a      	add	r2, r1
 8005324:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005326:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	601a      	str	r2, [r3, #0]
    address--;
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	3b04      	subs	r3, #4
 8005330:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	3b04      	subs	r3, #4
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	2b03      	cmp	r3, #3
 800533c:	d8da      	bhi.n	80052f4 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	372c      	adds	r7, #44	@ 0x2c
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	ffff0000 	.word	0xffff0000

08005350 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d125      	bne.n	80053b0 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01e      	beq.n	80053b0 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff f90f 	bl	800459c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff f9f3 	bl	8004776 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053ae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d116      	bne.n	80053ea <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80053ca:	2108      	movs	r1, #8
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f988 	bl	80056e2 <JPEG_ReadInputData>
 80053d2:	e00a      	b.n	80053ea <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 80053e2:	2101      	movs	r1, #1
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f97c 	bl	80056e2 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d116      	bne.n	8005424 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8005404:	2108      	movs	r1, #8
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f864 	bl	80054d4 <JPEG_StoreOutputData>
 800540c:	e00a      	b.n	8005424 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800541c:	2101      	movs	r1, #1
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f858 	bl	80054d4 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800542a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800542e:	2b20      	cmp	r3, #32
 8005430:	d14b      	bne.n	80054ca <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b08      	cmp	r3, #8
 800544c:	d107      	bne.n	800545e <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69d9      	ldr	r1, [r3, #28]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	461a      	mov	r2, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff f9a2 	bl	80047ca <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005490:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d103      	bne.n	80054c0 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff f971 	bl	80047a0 <HAL_JPEG_DecodeCpltCallback>
 80054be:	e002      	b.n	80054c6 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff f963 	bl	800478c <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d34b      	bcc.n	8005588 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e031      	b.n	800555a <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	4413      	add	r3, r2
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	0a19      	lsrs	r1, r3, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	3301      	adds	r3, #1
 800551c:	4413      	add	r3, r2
 800551e:	b2ca      	uxtb	r2, r1
 8005520:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	0c19      	lsrs	r1, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	3302      	adds	r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	b2ca      	uxtb	r2, r1
 8005534:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	0e19      	lsrs	r1, r3, #24
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	3303      	adds	r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	b2ca      	uxtb	r2, r1
 8005548:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	3301      	adds	r3, #1
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d3c9      	bcc.n	80054f6 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	429a      	cmp	r2, r3
 800556c:	f040 80b5 	bne.w	80056da <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	461a      	mov	r2, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff f925 	bl	80047ca <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8005586:	e0a8      	b.n	80056da <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	429a      	cmp	r2, r3
 8005592:	f240 80a2 	bls.w	80056da <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	089b      	lsrs	r3, r3, #2
 80055a2:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e031      	b.n	800560e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69da      	ldr	r2, [r3, #28]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	4413      	add	r3, r2
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0a19      	lsrs	r1, r3, #8
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	3301      	adds	r3, #1
 80055d0:	4413      	add	r3, r2
 80055d2:	b2ca      	uxtb	r2, r1
 80055d4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	0c19      	lsrs	r1, r3, #16
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	3302      	adds	r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	b2ca      	uxtb	r2, r1
 80055e8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	0e19      	lsrs	r1, r3, #24
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	3303      	adds	r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	b2ca      	uxtb	r2, r1
 80055fc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	1d1a      	adds	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	3301      	adds	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	429a      	cmp	r2, r3
 8005614:	d3c9      	bcc.n	80055aa <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	429a      	cmp	r2, r3
 8005620:	d10b      	bne.n	800563a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69d9      	ldr	r1, [r3, #28]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	461a      	mov	r2, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff f8cc 	bl	80047ca <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005638:	e04f      	b.n	80056da <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564c:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e015      	b.n	8005680 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	fa22 f103 	lsr.w	r1, r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	4413      	add	r3, r2
 800566c:	b2ca      	uxtb	r2, r1
 800566e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	3301      	adds	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	429a      	cmp	r2, r3
 8005686:	d3e5      	bcc.n	8005654 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69d9      	ldr	r1, [r3, #28]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	461a      	mov	r2, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff f899 	bl	80047ca <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f1c3 0304 	rsb	r3, r3, #4
 80056a4:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e013      	b.n	80056d4 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	fa22 f103 	lsr.w	r1, r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	4413      	add	r3, r2
 80056c0:	b2ca      	uxtb	r2, r1
 80056c2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	3301      	adds	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d9e8      	bls.n	80056ac <JPEG_StoreOutputData+0x1d8>
}
 80056da:	bf00      	nop
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b088      	sub	sp, #32
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <JPEG_ReadInputData+0x1c>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80056fe:	2101      	movs	r1, #1
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fe ffe0 	bl	80046c6 <HAL_JPEG_Pause>
 8005706:	e028      	b.n	800575a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	429a      	cmp	r2, r3
 8005712:	d906      	bls.n	8005722 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e01b      	b.n	800575a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	429a      	cmp	r2, r3
 800572c:	d115      	bne.n	800575a <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff f83d 	bl	80047b4 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573e:	2b04      	cmp	r3, #4
 8005740:	d905      	bls.n	800574e <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	f023 0203 	bic.w	r2, r3, #3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 809f 	bne.w	80058a6 <JPEG_ReadInputData+0x1c4>
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 809b 	beq.w	80058a6 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d335      	bcc.n	80057ea <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	e02d      	b.n	80057e0 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	4413      	add	r3, r2
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057a4:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6999      	ldr	r1, [r3, #24]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3302      	adds	r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057b6:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3303      	adds	r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057cc:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	1d1a      	adds	r2, r3, #4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	3301      	adds	r3, #1
 80057de:	61bb      	str	r3, [r7, #24]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d3cd      	bcc.n	8005784 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 80057e8:	e05d      	b.n	80058a6 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d035      	beq.n	800585c <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80057f0:	2300      	movs	r3, #0
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	e02d      	b.n	8005852 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3301      	adds	r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005816:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6999      	ldr	r1, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3302      	adds	r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005828:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3303      	adds	r3, #3
 8005834:	4413      	add	r3, r2
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800583e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005840:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	3301      	adds	r3, #1
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	429a      	cmp	r2, r3
 8005858:	d3cd      	bcc.n	80057f6 <JPEG_ReadInputData+0x114>
}
 800585a:	e024      	b.n	80058a6 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8005860:	2300      	movs	r3, #0
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	e017      	b.n	8005896 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	4413      	add	r3, r2
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	3301      	adds	r3, #1
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	429a      	cmp	r2, r3
 800589c:	d3e3      	bcc.n	8005866 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80058a6:	bf00      	nop
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d125      	bne.n	800590e <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01e      	beq.n	800590e <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fe fe60 	bl	800459c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3304      	adds	r3, #4
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fe ff44 	bl	8004776 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800590c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d039      	beq.n	8005990 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005920:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0201 	bic.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d104      	bne.n	8005970 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fa1a 	bl	8005da4 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d105      	bne.n	800598a <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fa0e 	bl	8005da4 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8005988:	e002      	b.n	8005990 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f804 	bl	8005998 <JPEG_DMA_EndProcess>
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80059b0:	1ad2      	subs	r2, r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059be:	429a      	cmp	r2, r3
 80059c0:	d10a      	bne.n	80059d8 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69d9      	ldr	r1, [r3, #28]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	461a      	mov	r2, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe fefc 	bl	80047ca <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d134      	bne.n	8005a50 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69d9      	ldr	r1, [r3, #28]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	461a      	mov	r2, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fe fee6 	bl	80047ca <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a18:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d103      	bne.n	8005a48 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fe fead 	bl	80047a0 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8005a46:	e00c      	b.n	8005a62 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7fe fe9f 	bl	800478c <HAL_JPEG_EncodeCpltCallback>
}
 8005a4e:	e008      	b.n	8005a62 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f804 	bl	8005a6a <JPEG_DMA_PollResidualData>
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8005a72:	2310      	movs	r3, #16
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e04f      	b.n	8005b18 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d146      	bne.n	8005b12 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d03f      	beq.n	8005b12 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a98:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	4413      	add	r3, r2
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	0a19      	lsrs	r1, r3, #8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	b2ca      	uxtb	r2, r1
 8005abc:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	0c19      	lsrs	r1, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	3302      	adds	r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	b2ca      	uxtb	r2, r1
 8005ad0:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	0e19      	lsrs	r1, r3, #24
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69da      	ldr	r2, [r3, #28]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	3303      	adds	r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	b2ca      	uxtb	r2, r1
 8005ae4:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d10a      	bne.n	8005b12 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69d9      	ldr	r1, [r3, #28]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	461a      	mov	r2, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fe fe5f 	bl	80047ca <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1ac      	bne.n	8005a78 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b22:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <JPEG_DMA_PollResidualData+0xd2>
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d133      	bne.n	8005ba4 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69d9      	ldr	r1, [r3, #28]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fe fe33 	bl	80047ca <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6e:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b74:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d103      	bne.n	8005b9e <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fe fe02 	bl	80047a0 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8005b9c:	e002      	b.n	8005ba4 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fe fdf4 	bl	800478c <HAL_JPEG_EncodeCpltCallback>
}
 8005ba4:	bf00      	nop
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b08b      	sub	sp, #44	@ 0x2c
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3350      	adds	r3, #80	@ 0x50
 8005bbe:	61bb      	str	r3, [r7, #24]

  i = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005bc4:	e042      	b.n	8005c4c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e033      	b.n	8005c3a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d103      	bne.n	8005bee <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	3364      	adds	r3, #100	@ 0x64
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bec:	e022      	b.n	8005c34 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2264      	movs	r2, #100	@ 0x64
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005bfa:	6a38      	ldr	r0, [r7, #32]
 8005bfc:	69f9      	ldr	r1, [r7, #28]
 8005bfe:	4401      	add	r1, r0
 8005c00:	4818      	ldr	r0, [pc, #96]	@ (8005c64 <JPEG_GetQuality+0xb8>)
 8005c02:	5c41      	ldrb	r1, [r0, r1]
 8005c04:	440a      	add	r2, r1
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b64      	cmp	r3, #100	@ 0x64
 8005c12:	d807      	bhi.n	8005c24 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1e:	4413      	add	r3, r2
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c22:	e007      	b.n	8005c34 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8005c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c30:	4413      	add	r3, r2
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d9c8      	bls.n	8005bd2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	3304      	adds	r3, #4
 8005c44:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	2b3c      	cmp	r3, #60	@ 0x3c
 8005c50:	d9b9      	bls.n	8005bc6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	099b      	lsrs	r3, r3, #6
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	372c      	adds	r7, #44	@ 0x2c
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	080116dc 	.word	0x080116dc

08005c68 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c70:	f7fb fdae 	bl	80017d0 <HAL_GetTick>
 8005c74:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e03b      	b.n	8005cf8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005ca0:	e00f      	b.n	8005cc2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005ca2:	f7fb fd95 	bl	80017d0 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	d908      	bls.n	8005cc2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2240      	movs	r2, #64	@ 0x40
 8005cb4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2203      	movs	r2, #3
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e01a      	b.n	8005cf8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e8      	bne.n	8005ca2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f9e3 	bl	800609c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e03e      	b.n	8005d98 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e037      	b.n	8005d98 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d126      	bne.n	8005d8a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d11c      	bne.n	8005d84 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d108      	bne.n	8005d72 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005d6e:	611a      	str	r2, [r3, #16]
 8005d70:	e00d      	b.n	8005d8e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005d80:	611a      	str	r2, [r3, #16]
 8005d82:	e004      	b.n	8005d8e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	75fb      	strb	r3, [r7, #23]
 8005d88:	e001      	b.n	8005d8e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e017      	b.n	8005de6 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d004      	beq.n	8005dcc <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2280      	movs	r2, #128	@ 0x80
 8005dc6:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e00c      	b.n	8005de6 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e00:	4b91      	ldr	r3, [pc, #580]	@ (8006048 <HAL_MDMA_IRQHandler+0x254>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a91      	ldr	r2, [pc, #580]	@ (800604c <HAL_MDMA_IRQHandler+0x258>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	0a9b      	lsrs	r3, r3, #10
 8005e0c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	4b8e      	ldr	r3, [pc, #568]	@ (8006050 <HAL_MDMA_IRQHandler+0x25c>)
 8005e16:	4413      	add	r3, r2
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2201      	movs	r2, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005e26:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 812d 	beq.w	8006090 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d054      	beq.n	8005eee <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d04d      	beq.n	8005eee <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0202 	bic.w	r2, r2, #2
 8005e60:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e78:	f043 0201 	orr.w	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005e80:	e005      	b.n	8005e8e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e86:	f043 0202 	orr.w	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e9c:	f043 0204 	orr.w	r2, r3, #4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eb2:	f043 0208 	orr.w	r2, r3, #8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ec8:	f043 0210 	orr.w	r2, r3, #16
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2201      	movs	r2, #1
 8005eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d012      	beq.n	8005f22 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2210      	movs	r2, #16
 8005f10:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d012      	beq.n	8005f56 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0310 	and.w	r3, r3, #16
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2208      	movs	r2, #8
 8005f44:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2204      	movs	r2, #4
 8005f78:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d039      	beq.n	800600c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d032      	beq.n	800600c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8005fb4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d110      	bne.n	8005fe4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d05c      	beq.n	8006094 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
        }
        return;
 8005fe2:	e057      	b.n	8006094 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006010:	2b00      	cmp	r3, #0
 8006012:	d040      	beq.n	8006096 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2204      	movs	r2, #4
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	3301      	adds	r3, #1
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	429a      	cmp	r2, r3
 8006036:	d30d      	bcc.n	8006054 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f2      	bne.n	800602c <HAL_MDMA_IRQHandler+0x238>
 8006046:	e006      	b.n	8006056 <HAL_MDMA_IRQHandler+0x262>
 8006048:	24000000 	.word	0x24000000
 800604c:	1b4e81b5 	.word	0x1b4e81b5
 8006050:	adffffc0 	.word	0xadffffc0
        break;
 8006054:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d004      	beq.n	8006076 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2203      	movs	r2, #3
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006074:	e003      	b.n	800607e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
 800608e:	e002      	b.n	8006096 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8006090:	bf00      	nop
 8006092:	e000      	b.n	8006096 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8006094:	bf00      	nop
    }
  }
}
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68d9      	ldr	r1, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695a      	ldr	r2, [r3, #20]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80060c2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80060ce:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80060da:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e0:	3b01      	subs	r3, #1
 80060e2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80060e4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80060f0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80060f2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fc:	d107      	bne.n	800610e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800610c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800611a:	2b00      	cmp	r3, #0
 800611c:	da11      	bge.n	8006142 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695a      	ldr	r2, [r3, #20]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800612c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006132:	425b      	negs	r3, r3
 8006134:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	b292      	uxth	r2, r2
 800613e:	621a      	str	r2, [r3, #32]
 8006140:	e006      	b.n	8006150 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	b292      	uxth	r2, r2
 800614e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	da15      	bge.n	8006184 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8006166:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616c:	425b      	negs	r3, r3
 800616e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a19      	ldr	r1, [r3, #32]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	041a      	lsls	r2, r3, #16
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	621a      	str	r2, [r3, #32]
 8006182:	e009      	b.n	8006198 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6a19      	ldr	r1, [r3, #32]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618e:	041a      	lsls	r2, r3, #16
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a0:	d006      	beq.n	80061b0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ae:	e003      	b.n	80061b8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2200      	movs	r2, #0
 80061b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80061c0:	bf00      	nop
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e0fe      	b.n	80063dc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f00a f98e 	bl	8010514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2203      	movs	r2, #3
 80061fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f006 fd3e 	bl	800cc86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	7c1a      	ldrb	r2, [r3, #16]
 8006212:	f88d 2000 	strb.w	r2, [sp]
 8006216:	3304      	adds	r3, #4
 8006218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800621a:	f006 fc0f 	bl	800ca3c <USB_CoreInit>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0d5      	b.n	80063dc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f006 fd36 	bl	800cca8 <USB_SetCurrentMode>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e0c6      	b.n	80063dc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	e04a      	b.n	80062ea <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006254:	7bfa      	ldrb	r2, [r7, #15]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	3315      	adds	r3, #21
 8006264:	2201      	movs	r2, #1
 8006266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006268:	7bfa      	ldrb	r2, [r7, #15]
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	3314      	adds	r3, #20
 8006278:	7bfa      	ldrb	r2, [r7, #15]
 800627a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800627c:	7bfa      	ldrb	r2, [r7, #15]
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	b298      	uxth	r0, r3
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	332e      	adds	r3, #46	@ 0x2e
 8006290:	4602      	mov	r2, r0
 8006292:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006294:	7bfa      	ldrb	r2, [r7, #15]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3318      	adds	r3, #24
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062a8:	7bfa      	ldrb	r2, [r7, #15]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	331c      	adds	r3, #28
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062bc:	7bfa      	ldrb	r2, [r7, #15]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	3320      	adds	r3, #32
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	3324      	adds	r3, #36	@ 0x24
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	3301      	adds	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	791b      	ldrb	r3, [r3, #4]
 80062ee:	7bfa      	ldrb	r2, [r7, #15]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d3af      	bcc.n	8006254 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
 80062f8:	e044      	b.n	8006384 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062fa:	7bfa      	ldrb	r2, [r7, #15]
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006310:	7bfa      	ldrb	r2, [r7, #15]
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006322:	7bfa      	ldrb	r2, [r7, #15]
 8006324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006326:	7bfa      	ldrb	r2, [r7, #15]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800633c:	7bfa      	ldrb	r2, [r7, #15]
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006352:	7bfa      	ldrb	r2, [r7, #15]
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006368:	7bfa      	ldrb	r2, [r7, #15]
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4613      	mov	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	3301      	adds	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	791b      	ldrb	r3, [r3, #4]
 8006388:	7bfa      	ldrb	r2, [r7, #15]
 800638a:	429a      	cmp	r2, r3
 800638c:	d3b5      	bcc.n	80062fa <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	7c1a      	ldrb	r2, [r3, #16]
 8006396:	f88d 2000 	strb.w	r2, [sp]
 800639a:	3304      	adds	r3, #4
 800639c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800639e:	f006 fccf 	bl	800cd40 <USB_DevInit>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e013      	b.n	80063dc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	7b1b      	ldrb	r3, [r3, #12]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d102      	bne.n	80063d0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 f96e 	bl	80076ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f007 fd12 	bl	800ddfe <USB_DevDisconnect>

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_PCD_Start+0x1c>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e022      	b.n	8006446 <HAL_PCD_Start+0x62>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006418:	2b01      	cmp	r3, #1
 800641a:	d105      	bne.n	8006428 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f006 fc19 	bl	800cc64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f007 fcc0 	bl	800ddbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800644e:	b590      	push	{r4, r7, lr}
 8006450:	b08d      	sub	sp, #52	@ 0x34
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f007 fd7e 	bl	800df66 <USB_GetMode>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 84b9 	bne.w	8006de4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f007 fce2 	bl	800de40 <USB_ReadInterrupts>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 84af 	beq.w	8006de2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f007 fccf 	bl	800de40 <USB_ReadInterrupts>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d107      	bne.n	80064bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f002 0202 	and.w	r2, r2, #2
 80064ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f007 fcbd 	bl	800de40 <USB_ReadInterrupts>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d161      	bne.n	8006594 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0210 	bic.w	r2, r2, #16
 80064de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f003 020f 	and.w	r2, r3, #15
 80064ec:	4613      	mov	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	3304      	adds	r3, #4
 80064fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006506:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800650a:	d124      	bne.n	8006556 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006512:	4013      	ands	r3, r2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d035      	beq.n	8006584 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	091b      	lsrs	r3, r3, #4
 8006520:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006526:	b29b      	uxth	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	6a38      	ldr	r0, [r7, #32]
 800652c:	f007 faf4 	bl	800db18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	091b      	lsrs	r3, r3, #4
 8006538:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800653c:	441a      	add	r2, r3
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800654e:	441a      	add	r2, r3
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	615a      	str	r2, [r3, #20]
 8006554:	e016      	b.n	8006584 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800655c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006560:	d110      	bne.n	8006584 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006568:	2208      	movs	r2, #8
 800656a:	4619      	mov	r1, r3
 800656c:	6a38      	ldr	r0, [r7, #32]
 800656e:	f007 fad3 	bl	800db18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	091b      	lsrs	r3, r3, #4
 800657a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800657e:	441a      	add	r2, r3
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0210 	orr.w	r2, r2, #16
 8006592:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f007 fc51 	bl	800de40 <USB_ReadInterrupts>
 800659e:	4603      	mov	r3, r0
 80065a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80065a8:	f040 80a7 	bne.w	80066fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f007 fc56 	bl	800de66 <USB_ReadDevAllOutEpInterrupt>
 80065ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80065bc:	e099      	b.n	80066f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 808e 	beq.w	80066e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f007 fc7a 	bl	800dece <USB_ReadDevOutEPInterrupt>
 80065da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00c      	beq.n	8006600 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f2:	461a      	mov	r2, r3
 80065f4:	2301      	movs	r3, #1
 80065f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80065f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fed0 	bl	80073a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800660a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006616:	461a      	mov	r2, r3
 8006618:	2308      	movs	r3, #8
 800661a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800661c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 ffa6 	bl	8007570 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b00      	cmp	r3, #0
 800662c:	d008      	beq.n	8006640 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663a:	461a      	mov	r2, r3
 800663c:	2310      	movs	r3, #16
 800663e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d030      	beq.n	80066ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006652:	2b80      	cmp	r3, #128	@ 0x80
 8006654:	d109      	bne.n	800666a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006664:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006668:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800666a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666c:	4613      	mov	r3, r2
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4413      	add	r3, r2
 800667c:	3304      	adds	r3, #4
 800667e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	78db      	ldrb	r3, [r3, #3]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d108      	bne.n	800669a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2200      	movs	r2, #0
 800668c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f00a f863 	bl	8010760 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a6:	461a      	mov	r2, r3
 80066a8:	2302      	movs	r3, #2
 80066aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c2:	461a      	mov	r2, r3
 80066c4:	2320      	movs	r3, #32
 80066c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066de:	461a      	mov	r2, r3
 80066e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	3301      	adds	r3, #1
 80066ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f47f af62 	bne.w	80065be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f007 fb9e 	bl	800de40 <USB_ReadInterrupts>
 8006704:	4603      	mov	r3, r0
 8006706:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800670a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800670e:	f040 80db 	bne.w	80068c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f007 fbbf 	bl	800de9a <USB_ReadDevAllInEpInterrupt>
 800671c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006722:	e0cd      	b.n	80068c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 80c2 	beq.w	80068b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	4611      	mov	r1, r2
 800673a:	4618      	mov	r0, r3
 800673c:	f007 fbe5 	bl	800df0a <USB_ReadDevInEPInterrupt>
 8006740:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d057      	beq.n	80067fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	2201      	movs	r2, #1
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	43db      	mvns	r3, r3
 8006766:	69f9      	ldr	r1, [r7, #28]
 8006768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800676c:	4013      	ands	r3, r2
 800676e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677c:	461a      	mov	r2, r3
 800677e:	2301      	movs	r3, #1
 8006780:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	799b      	ldrb	r3, [r3, #6]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d132      	bne.n	80067f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678e:	4613      	mov	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	3320      	adds	r3, #32
 800679a:	6819      	ldr	r1, [r3, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4403      	add	r3, r0
 80067aa:	331c      	adds	r3, #28
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4419      	add	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b4:	4613      	mov	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4403      	add	r3, r0
 80067be:	3320      	adds	r3, #32
 80067c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d113      	bne.n	80067f0 <HAL_PCD_IRQHandler+0x3a2>
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067cc:	4613      	mov	r3, r2
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	3324      	adds	r3, #36	@ 0x24
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067e8:	461a      	mov	r2, r3
 80067ea:	2101      	movs	r1, #1
 80067ec:	f007 fbee 	bl	800dfcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f009 ff2d 	bl	8010656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006812:	461a      	mov	r2, r3
 8006814:	2308      	movs	r3, #8
 8006816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b00      	cmp	r3, #0
 8006820:	d008      	beq.n	8006834 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682e:	461a      	mov	r2, r3
 8006830:	2310      	movs	r3, #16
 8006832:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684a:	461a      	mov	r2, r3
 800684c:	2340      	movs	r3, #64	@ 0x40
 800684e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d023      	beq.n	80068a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800685a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800685c:	6a38      	ldr	r0, [r7, #32]
 800685e:	f006 fbcd 	bl	800cffc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006864:	4613      	mov	r3, r2
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	3310      	adds	r3, #16
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	3304      	adds	r3, #4
 8006874:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	78db      	ldrb	r3, [r3, #3]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d108      	bne.n	8006890 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2200      	movs	r2, #0
 8006882:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	b2db      	uxtb	r3, r3
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f009 ff7a 	bl	8010784 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689c:	461a      	mov	r2, r3
 800689e:	2302      	movs	r3, #2
 80068a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80068ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fcea 	bl	8007288 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	3301      	adds	r3, #1
 80068b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80068ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f47f af2e 	bne.w	8006724 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f007 fab7 	bl	800de40 <USB_ReadInterrupts>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068dc:	d122      	bne.n	8006924 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d108      	bne.n	800690e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006904:	2100      	movs	r1, #0
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fef4 	bl	80076f4 <HAL_PCDEx_LPM_Callback>
 800690c:	e002      	b.n	8006914 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f009 ff18 	bl	8010744 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f007 fa89 	bl	800de40 <USB_ReadInterrupts>
 800692e:	4603      	mov	r3, r0
 8006930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006938:	d112      	bne.n	8006960 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b01      	cmp	r3, #1
 8006948:	d102      	bne.n	8006950 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f009 fed4 	bl	80106f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800695e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f007 fa6b 	bl	800de40 <USB_ReadInterrupts>
 800696a:	4603      	mov	r3, r0
 800696c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006974:	d121      	bne.n	80069ba <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006984:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800698c:	2b00      	cmp	r3, #0
 800698e:	d111      	bne.n	80069b4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	089b      	lsrs	r3, r3, #2
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80069aa:	2101      	movs	r1, #1
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fea1 	bl	80076f4 <HAL_PCDEx_LPM_Callback>
 80069b2:	e002      	b.n	80069ba <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f009 fe9f 	bl	80106f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f007 fa3e 	bl	800de40 <USB_ReadInterrupts>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ce:	f040 80b7 	bne.w	8006b40 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2110      	movs	r1, #16
 80069ec:	4618      	mov	r0, r3
 80069ee:	f006 fb05 	bl	800cffc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069f2:	2300      	movs	r3, #0
 80069f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069f6:	e046      	b.n	8006a86 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80069f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a04:	461a      	mov	r2, r3
 8006a06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a0a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a82:	3301      	adds	r3, #1
 8006a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d3b2      	bcc.n	80069f8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aa0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006aa4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7bdb      	ldrb	r3, [r3, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006abe:	f043 030b 	orr.w	r3, r3, #11
 8006ac2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ad4:	f043 030b 	orr.w	r3, r3, #11
 8006ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ada:	e015      	b.n	8006b08 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aea:	4619      	mov	r1, r3
 8006aec:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006af0:	4313      	orrs	r3, r2
 8006af2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b02:	f043 030b 	orr.w	r3, r3, #11
 8006b06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f007 fa4e 	bl	800dfcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695a      	ldr	r2, [r3, #20]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f007 f97b 	bl	800de40 <USB_ReadInterrupts>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b54:	d123      	bne.n	8006b9e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f007 fa12 	bl	800df84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f006 fac2 	bl	800d0ee <USB_GetDevSpeed>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681c      	ldr	r4, [r3, #0]
 8006b76:	f001 fd9d 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 8006b7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b80:	461a      	mov	r2, r3
 8006b82:	4620      	mov	r0, r4
 8006b84:	f005 ffcc 	bl	800cb20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f009 fd8c 	bl	80106a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f007 f94c 	bl	800de40 <USB_ReadInterrupts>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d10a      	bne.n	8006bc8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f009 fd69 	bl	801068a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f002 0208 	and.w	r2, r2, #8
 8006bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f007 f937 	bl	800de40 <USB_ReadInterrupts>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd8:	2b80      	cmp	r3, #128	@ 0x80
 8006bda:	d123      	bne.n	8006c24 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006be8:	2301      	movs	r3, #1
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bec:	e014      	b.n	8006c18 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d105      	bne.n	8006c12 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fb0a 	bl	8007226 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	3301      	adds	r3, #1
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	791b      	ldrb	r3, [r3, #4]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d3e4      	bcc.n	8006bee <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f007 f909 	bl	800de40 <USB_ReadInterrupts>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c38:	d13c      	bne.n	8006cb4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c3e:	e02b      	b.n	8006c98 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c54:	4613      	mov	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	3318      	adds	r3, #24
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d115      	bne.n	8006c92 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006c66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da12      	bge.n	8006c92 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c70:	4613      	mov	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	3317      	adds	r3, #23
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 faca 	bl	8007226 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	3301      	adds	r3, #1
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d3cd      	bcc.n	8006c40 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f007 f8c1 	bl	800de40 <USB_ReadInterrupts>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cc8:	d156      	bne.n	8006d78 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cca:	2301      	movs	r3, #1
 8006ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cce:	e045      	b.n	8006d5c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d12e      	bne.n	8006d56 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006cf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da2b      	bge.n	8006d56 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	0c1a      	lsrs	r2, r3, #16
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006d08:	4053      	eors	r3, r2
 8006d0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d121      	bne.n	8006d56 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d16:	4613      	mov	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	440b      	add	r3, r1
 8006d20:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006d24:	2201      	movs	r2, #1
 8006d26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d52:	6053      	str	r3, [r2, #4]
            break;
 8006d54:	e008      	b.n	8006d68 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	3301      	adds	r3, #1
 8006d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	791b      	ldrb	r3, [r3, #4]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d3b3      	bcc.n	8006cd0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f007 f85f 	bl	800de40 <USB_ReadInterrupts>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8c:	d10a      	bne.n	8006da4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f009 fd0a 	bl	80107a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695a      	ldr	r2, [r3, #20]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f007 f849 	bl	800de40 <USB_ReadInterrupts>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d115      	bne.n	8006de4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f009 fcfa 	bl	80107c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]
 8006de0:	e000      	b.n	8006de4 <HAL_PCD_IRQHandler+0x996>
      return;
 8006de2:	bf00      	nop
    }
  }
}
 8006de4:	3734      	adds	r7, #52	@ 0x34
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd90      	pop	{r4, r7, pc}

08006dea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_PCD_SetAddress+0x1a>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e012      	b.n	8006e2a <HAL_PCD_SetAddress+0x40>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f006 ffa8 	bl	800dd70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4603      	mov	r3, r0
 8006e42:	70fb      	strb	r3, [r7, #3]
 8006e44:	460b      	mov	r3, r1
 8006e46:	803b      	strh	r3, [r7, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	da0f      	bge.n	8006e78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	f003 020f 	and.w	r2, r3, #15
 8006e5e:	4613      	mov	r3, r2
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	3310      	adds	r3, #16
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	705a      	strb	r2, [r3, #1]
 8006e76:	e00f      	b.n	8006e98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	f003 020f 	and.w	r2, r3, #15
 8006e7e:	4613      	mov	r3, r2
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3304      	adds	r3, #4
 8006e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006ea4:	883b      	ldrh	r3, [r7, #0]
 8006ea6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	78ba      	ldrb	r2, [r7, #2]
 8006eb2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ec6:	78bb      	ldrb	r3, [r7, #2]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d102      	bne.n	8006ed2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_PCD_EP_Open+0xae>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e00e      	b.n	8006efe <HAL_PCD_EP_Open+0xcc>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68f9      	ldr	r1, [r7, #12]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f006 f922 	bl	800d138 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006efc:	7afb      	ldrb	r3, [r7, #11]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da0f      	bge.n	8006f3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	f003 020f 	and.w	r2, r3, #15
 8006f20:	4613      	mov	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	3310      	adds	r3, #16
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3304      	adds	r3, #4
 8006f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	705a      	strb	r2, [r3, #1]
 8006f38:	e00f      	b.n	8006f5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	4413      	add	r3, r2
 8006f50:	3304      	adds	r3, #4
 8006f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_PCD_EP_Close+0x6e>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e00e      	b.n	8006f92 <HAL_PCD_EP_Close+0x8c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68f9      	ldr	r1, [r7, #12]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f006 f960 	bl	800d248 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b086      	sub	sp, #24
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fdc:	7afb      	ldrb	r3, [r7, #11]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	799b      	ldrb	r3, [r3, #6]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d102      	bne.n	8006ff6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	799b      	ldrb	r3, [r3, #6]
 8006ffe:	461a      	mov	r2, r3
 8007000:	6979      	ldr	r1, [r7, #20]
 8007002:	f006 f9fd 	bl	800d400 <USB_EPStartXfer>

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007032:	681b      	ldr	r3, [r3, #0]
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	460b      	mov	r3, r1
 800704e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	f003 020f 	and.w	r2, r3, #15
 8007056:	4613      	mov	r3, r2
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	3310      	adds	r3, #16
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	3304      	adds	r3, #4
 8007066:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2200      	movs	r2, #0
 8007078:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2201      	movs	r2, #1
 800707e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	b2da      	uxtb	r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	799b      	ldrb	r3, [r3, #6]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d102      	bne.n	800709a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	799b      	ldrb	r3, [r3, #6]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6979      	ldr	r1, [r7, #20]
 80070a6:	f006 f9ab 	bl	800d400 <USB_EPStartXfer>

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	f003 030f 	and.w	r3, r3, #15
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	7912      	ldrb	r2, [r2, #4]
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e04f      	b.n	8007172 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	da0f      	bge.n	80070fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	f003 020f 	and.w	r2, r3, #15
 80070e0:	4613      	mov	r3, r2
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	3310      	adds	r3, #16
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	3304      	adds	r3, #4
 80070f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	705a      	strb	r2, [r3, #1]
 80070f8:	e00d      	b.n	8007116 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070fa:	78fa      	ldrb	r2, [r7, #3]
 80070fc:	4613      	mov	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4413      	add	r3, r2
 800710c:	3304      	adds	r3, #4
 800710e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	b2da      	uxtb	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_PCD_EP_SetStall+0x82>
 8007132:	2302      	movs	r3, #2
 8007134:	e01d      	b.n	8007172 <HAL_PCD_EP_SetStall+0xbe>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	4618      	mov	r0, r3
 8007146:	f006 fd3f 	bl	800dbc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	2b00      	cmp	r3, #0
 8007152:	d109      	bne.n	8007168 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7999      	ldrb	r1, [r3, #6]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007162:	461a      	mov	r2, r3
 8007164:	f006 ff32 	bl	800dfcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	7912      	ldrb	r2, [r2, #4]
 8007190:	4293      	cmp	r3, r2
 8007192:	d901      	bls.n	8007198 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e042      	b.n	800721e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800719c:	2b00      	cmp	r3, #0
 800719e:	da0f      	bge.n	80071c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	f003 020f 	and.w	r2, r3, #15
 80071a6:	4613      	mov	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	3310      	adds	r3, #16
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	4413      	add	r3, r2
 80071b4:	3304      	adds	r3, #4
 80071b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	705a      	strb	r2, [r3, #1]
 80071be:	e00f      	b.n	80071e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	f003 020f 	and.w	r2, r3, #15
 80071c6:	4613      	mov	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4413      	add	r3, r2
 80071d6:	3304      	adds	r3, #4
 80071d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <HAL_PCD_EP_ClrStall+0x86>
 80071fc:	2302      	movs	r3, #2
 80071fe:	e00e      	b.n	800721e <HAL_PCD_EP_ClrStall+0xa4>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68f9      	ldr	r1, [r7, #12]
 800720e:	4618      	mov	r0, r3
 8007210:	f006 fd48 	bl	800dca4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007236:	2b00      	cmp	r3, #0
 8007238:	da0c      	bge.n	8007254 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	3310      	adds	r3, #16
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	3304      	adds	r3, #4
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e00c      	b.n	800726e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	f003 020f 	and.w	r2, r3, #15
 800725a:	4613      	mov	r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	3304      	adds	r3, #4
 800726c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68f9      	ldr	r1, [r7, #12]
 8007274:	4618      	mov	r0, r3
 8007276:	f006 fb67 	bl	800d948 <USB_EPStopXfer>
 800727a:	4603      	mov	r3, r0
 800727c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800727e:	7afb      	ldrb	r3, [r7, #11]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	@ 0x28
 800728c:	af02      	add	r7, sp, #8
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	4613      	mov	r3, r2
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	3310      	adds	r3, #16
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	3304      	adds	r3, #4
 80072ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	695a      	ldr	r2, [r3, #20]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d901      	bls.n	80072c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e06b      	b.n	8007398 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d902      	bls.n	80072dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	3303      	adds	r3, #3
 80072e0:	089b      	lsrs	r3, r3, #2
 80072e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072e4:	e02a      	b.n	800733c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d902      	bls.n	8007302 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	3303      	adds	r3, #3
 8007306:	089b      	lsrs	r3, r3, #2
 8007308:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68d9      	ldr	r1, [r3, #12]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	b2da      	uxtb	r2, r3
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4603      	mov	r3, r0
 800731e:	6978      	ldr	r0, [r7, #20]
 8007320:	f006 fbbc 	bl	800da9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	441a      	add	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	441a      	add	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	429a      	cmp	r2, r3
 8007350:	d809      	bhi.n	8007366 <PCD_WriteEmptyTxFifo+0xde>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800735a:	429a      	cmp	r2, r3
 800735c:	d203      	bcs.n	8007366 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1bf      	bne.n	80072e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	429a      	cmp	r2, r3
 8007370:	d811      	bhi.n	8007396 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	2201      	movs	r2, #1
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	43db      	mvns	r3, r3
 800738c:	6939      	ldr	r1, [r7, #16]
 800738e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007392:	4013      	ands	r3, r2
 8007394:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3720      	adds	r7, #32
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	333c      	adds	r3, #60	@ 0x3c
 80073b8:	3304      	adds	r3, #4
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	799b      	ldrb	r3, [r3, #6]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d17b      	bne.n	80074ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d015      	beq.n	800740c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	4a61      	ldr	r2, [pc, #388]	@ (8007568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	f240 80b9 	bls.w	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80b3 	beq.w	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007402:	461a      	mov	r2, r3
 8007404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007408:	6093      	str	r3, [r2, #8]
 800740a:	e0a7      	b.n	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d009      	beq.n	800742a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007422:	461a      	mov	r2, r3
 8007424:	2320      	movs	r3, #32
 8007426:	6093      	str	r3, [r2, #8]
 8007428:	e098      	b.n	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007430:	2b00      	cmp	r3, #0
 8007432:	f040 8093 	bne.w	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	4a4b      	ldr	r2, [pc, #300]	@ (8007568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d90f      	bls.n	800745e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007454:	461a      	mov	r2, r3
 8007456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800745a:	6093      	str	r3, [r2, #8]
 800745c:	e07e      	b.n	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	3304      	adds	r3, #4
 8007472:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a1a      	ldr	r2, [r3, #32]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	0159      	lsls	r1, r3, #5
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	440b      	add	r3, r1
 8007480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800748a:	1ad2      	subs	r2, r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d114      	bne.n	80074c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d109      	bne.n	80074b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074a8:	461a      	mov	r2, r3
 80074aa:	2101      	movs	r1, #1
 80074ac:	f006 fd8e 	bl	800dfcc <USB_EP0_OutStart>
 80074b0:	e006      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	441a      	add	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f009 f8aa 	bl	8010620 <HAL_PCD_DataOutStageCallback>
 80074cc:	e046      	b.n	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	4a26      	ldr	r2, [pc, #152]	@ (800756c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d124      	bne.n	8007520 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ec:	461a      	mov	r2, r3
 80074ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f2:	6093      	str	r3, [r2, #8]
 80074f4:	e032      	b.n	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750c:	461a      	mov	r2, r3
 800750e:	2320      	movs	r3, #32
 8007510:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f009 f881 	bl	8010620 <HAL_PCD_DataOutStageCallback>
 800751e:	e01d      	b.n	800755c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d114      	bne.n	8007550 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d108      	bne.n	8007550 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007548:	461a      	mov	r2, r3
 800754a:	2100      	movs	r1, #0
 800754c:	f006 fd3e 	bl	800dfcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f009 f862 	bl	8010620 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	4f54300a 	.word	0x4f54300a
 800756c:	4f54310a 	.word	0x4f54310a

08007570 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	333c      	adds	r3, #60	@ 0x3c
 8007588:	3304      	adds	r3, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a15      	ldr	r2, [pc, #84]	@ (80075f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d90e      	bls.n	80075c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d009      	beq.n	80075c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075bc:	461a      	mov	r2, r3
 80075be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f009 f819 	bl	80105fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4a0a      	ldr	r2, [pc, #40]	@ (80075f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d90c      	bls.n	80075ec <PCD_EP_OutSetupPacket_int+0x7c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	799b      	ldrb	r3, [r3, #6]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d108      	bne.n	80075ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075e4:	461a      	mov	r2, r3
 80075e6:	2101      	movs	r1, #1
 80075e8:	f006 fcf0 	bl	800dfcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	4f54300a 	.word	0x4f54300a

080075fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	70fb      	strb	r3, [r7, #3]
 8007608:	4613      	mov	r3, r2
 800760a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007612:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d107      	bne.n	800762a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800761a:	883b      	ldrh	r3, [r7, #0]
 800761c:	0419      	lsls	r1, r3, #16
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	430a      	orrs	r2, r1
 8007626:	629a      	str	r2, [r3, #40]	@ 0x28
 8007628:	e028      	b.n	800767c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007630:	0c1b      	lsrs	r3, r3, #16
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	4413      	add	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
 800763c:	e00d      	b.n	800765a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	3340      	adds	r3, #64	@ 0x40
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	0c1b      	lsrs	r3, r3, #16
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	4413      	add	r3, r2
 8007652:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	3301      	adds	r3, #1
 8007658:	73fb      	strb	r3, [r7, #15]
 800765a:	7bfa      	ldrb	r2, [r7, #15]
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	3b01      	subs	r3, #1
 8007660:	429a      	cmp	r2, r3
 8007662:	d3ec      	bcc.n	800763e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007664:	883b      	ldrh	r3, [r7, #0]
 8007666:	0418      	lsls	r0, r3, #16
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6819      	ldr	r1, [r3, #0]
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	3b01      	subs	r3, #1
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	4302      	orrs	r2, r0
 8007674:	3340      	adds	r3, #64	@ 0x40
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	887a      	ldrh	r2, [r7, #2]
 800769c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076da:	4b05      	ldr	r3, [pc, #20]	@ (80076f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	10000003 	.word	0x10000003

080076f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007714:	4b19      	ldr	r3, [pc, #100]	@ (800777c <HAL_PWREx_ConfigSupply+0x70>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b04      	cmp	r3, #4
 800771e:	d00a      	beq.n	8007736 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007720:	4b16      	ldr	r3, [pc, #88]	@ (800777c <HAL_PWREx_ConfigSupply+0x70>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	429a      	cmp	r2, r3
 800772c:	d001      	beq.n	8007732 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e01f      	b.n	8007772 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	e01d      	b.n	8007772 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007736:	4b11      	ldr	r3, [pc, #68]	@ (800777c <HAL_PWREx_ConfigSupply+0x70>)
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f023 0207 	bic.w	r2, r3, #7
 800773e:	490f      	ldr	r1, [pc, #60]	@ (800777c <HAL_PWREx_ConfigSupply+0x70>)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4313      	orrs	r3, r2
 8007744:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007746:	f7fa f843 	bl	80017d0 <HAL_GetTick>
 800774a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800774c:	e009      	b.n	8007762 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800774e:	f7fa f83f 	bl	80017d0 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800775c:	d901      	bls.n	8007762 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e007      	b.n	8007772 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007762:	4b06      	ldr	r3, [pc, #24]	@ (800777c <HAL_PWREx_ConfigSupply+0x70>)
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800776a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800776e:	d1ee      	bne.n	800774e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	58024800 	.word	0x58024800

08007780 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007784:	4b05      	ldr	r3, [pc, #20]	@ (800779c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	4a04      	ldr	r2, [pc, #16]	@ (800779c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800778a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800778e:	60d3      	str	r3, [r2, #12]
}
 8007790:	bf00      	nop
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	58024800 	.word	0x58024800

080077a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	@ 0x30
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f000 bc48 	b.w	8008044 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8088 	beq.w	80078d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077c2:	4b99      	ldr	r3, [pc, #612]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077cc:	4b96      	ldr	r3, [pc, #600]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80077d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d007      	beq.n	80077e8 <HAL_RCC_OscConfig+0x48>
 80077d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077da:	2b18      	cmp	r3, #24
 80077dc:	d111      	bne.n	8007802 <HAL_RCC_OscConfig+0x62>
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d10c      	bne.n	8007802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e8:	4b8f      	ldr	r3, [pc, #572]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d06d      	beq.n	80078d0 <HAL_RCC_OscConfig+0x130>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d169      	bne.n	80078d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f000 bc21 	b.w	8008044 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800780a:	d106      	bne.n	800781a <HAL_RCC_OscConfig+0x7a>
 800780c:	4b86      	ldr	r3, [pc, #536]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a85      	ldr	r2, [pc, #532]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	e02e      	b.n	8007878 <HAL_RCC_OscConfig+0xd8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10c      	bne.n	800783c <HAL_RCC_OscConfig+0x9c>
 8007822:	4b81      	ldr	r3, [pc, #516]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a80      	ldr	r2, [pc, #512]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	4b7e      	ldr	r3, [pc, #504]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a7d      	ldr	r2, [pc, #500]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	e01d      	b.n	8007878 <HAL_RCC_OscConfig+0xd8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007844:	d10c      	bne.n	8007860 <HAL_RCC_OscConfig+0xc0>
 8007846:	4b78      	ldr	r3, [pc, #480]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a77      	ldr	r2, [pc, #476]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 800784c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	4b75      	ldr	r3, [pc, #468]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a74      	ldr	r2, [pc, #464]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	e00b      	b.n	8007878 <HAL_RCC_OscConfig+0xd8>
 8007860:	4b71      	ldr	r3, [pc, #452]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a70      	ldr	r2, [pc, #448]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	4b6e      	ldr	r3, [pc, #440]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a6d      	ldr	r2, [pc, #436]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d013      	beq.n	80078a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7f9 ffa6 	bl	80017d0 <HAL_GetTick>
 8007884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007888:	f7f9 ffa2 	bl	80017d0 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b64      	cmp	r3, #100	@ 0x64
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e3d4      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800789a:	4b63      	ldr	r3, [pc, #396]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0xe8>
 80078a6:	e014      	b.n	80078d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7f9 ff92 	bl	80017d0 <HAL_GetTick>
 80078ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078b0:	f7f9 ff8e 	bl	80017d0 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b64      	cmp	r3, #100	@ 0x64
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e3c0      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078c2:	4b59      	ldr	r3, [pc, #356]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0x110>
 80078ce:	e000      	b.n	80078d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80ca 	beq.w	8007a74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e0:	4b51      	ldr	r3, [pc, #324]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80078ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <HAL_RCC_OscConfig+0x166>
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	2b18      	cmp	r3, #24
 80078fa:	d156      	bne.n	80079aa <HAL_RCC_OscConfig+0x20a>
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d151      	bne.n	80079aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007906:	4b48      	ldr	r3, [pc, #288]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0304 	and.w	r3, r3, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <HAL_RCC_OscConfig+0x17e>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e392      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800791e:	4b42      	ldr	r3, [pc, #264]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 0219 	bic.w	r2, r3, #25
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	493f      	ldr	r1, [pc, #252]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 800792c:	4313      	orrs	r3, r2
 800792e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007930:	f7f9 ff4e 	bl	80017d0 <HAL_GetTick>
 8007934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007938:	f7f9 ff4a 	bl	80017d0 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e37c      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800794a:	4b37      	ldr	r3, [pc, #220]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f0      	beq.n	8007938 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007956:	f7f9 ff6b 	bl	8001830 <HAL_GetREVID>
 800795a:	4603      	mov	r3, r0
 800795c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007960:	4293      	cmp	r3, r2
 8007962:	d817      	bhi.n	8007994 <HAL_RCC_OscConfig+0x1f4>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b40      	cmp	r3, #64	@ 0x40
 800796a:	d108      	bne.n	800797e <HAL_RCC_OscConfig+0x1de>
 800796c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007974:	4a2c      	ldr	r2, [pc, #176]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800797a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800797c:	e07a      	b.n	8007a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	031b      	lsls	r3, r3, #12
 800798c:	4926      	ldr	r1, [pc, #152]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 800798e:	4313      	orrs	r3, r2
 8007990:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007992:	e06f      	b.n	8007a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007994:	4b24      	ldr	r3, [pc, #144]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	061b      	lsls	r3, r3, #24
 80079a2:	4921      	ldr	r1, [pc, #132]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079a8:	e064      	b.n	8007a74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d047      	beq.n	8007a42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f023 0219 	bic.w	r2, r3, #25
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	491a      	ldr	r1, [pc, #104]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c4:	f7f9 ff04 	bl	80017d0 <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079cc:	f7f9 ff00 	bl	80017d0 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e332      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079de:	4b12      	ldr	r3, [pc, #72]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ea:	f7f9 ff21 	bl	8001830 <HAL_GetREVID>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d819      	bhi.n	8007a2c <HAL_RCC_OscConfig+0x28c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b40      	cmp	r3, #64	@ 0x40
 80079fe:	d108      	bne.n	8007a12 <HAL_RCC_OscConfig+0x272>
 8007a00:	4b09      	ldr	r3, [pc, #36]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007a08:	4a07      	ldr	r2, [pc, #28]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a0e:	6053      	str	r3, [r2, #4]
 8007a10:	e030      	b.n	8007a74 <HAL_RCC_OscConfig+0x2d4>
 8007a12:	4b05      	ldr	r3, [pc, #20]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	031b      	lsls	r3, r3, #12
 8007a20:	4901      	ldr	r1, [pc, #4]	@ (8007a28 <HAL_RCC_OscConfig+0x288>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	604b      	str	r3, [r1, #4]
 8007a26:	e025      	b.n	8007a74 <HAL_RCC_OscConfig+0x2d4>
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	4b9a      	ldr	r3, [pc, #616]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	061b      	lsls	r3, r3, #24
 8007a3a:	4997      	ldr	r1, [pc, #604]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	604b      	str	r3, [r1, #4]
 8007a40:	e018      	b.n	8007a74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a42:	4b95      	ldr	r3, [pc, #596]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a94      	ldr	r2, [pc, #592]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4e:	f7f9 febf 	bl	80017d0 <HAL_GetTick>
 8007a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a54:	e008      	b.n	8007a68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a56:	f7f9 febb 	bl	80017d0 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e2ed      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a68:	4b8b      	ldr	r3, [pc, #556]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f0      	bne.n	8007a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a9 	beq.w	8007bd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a82:	4b85      	ldr	r3, [pc, #532]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a8c:	4b82      	ldr	r3, [pc, #520]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d007      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x308>
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b18      	cmp	r3, #24
 8007a9c:	d13a      	bne.n	8007b14 <HAL_RCC_OscConfig+0x374>
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d135      	bne.n	8007b14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x320>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	2b80      	cmp	r3, #128	@ 0x80
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e2c1      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ac0:	f7f9 feb6 	bl	8001830 <HAL_GetREVID>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d817      	bhi.n	8007afe <HAL_RCC_OscConfig+0x35e>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d108      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x348>
 8007ad6:	4b70      	ldr	r3, [pc, #448]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007ade:	4a6e      	ldr	r2, [pc, #440]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007ae0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ae4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ae6:	e075      	b.n	8007bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	069b      	lsls	r3, r3, #26
 8007af6:	4968      	ldr	r1, [pc, #416]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007afc:	e06a      	b.n	8007bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007afe:	4b66      	ldr	r3, [pc, #408]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	061b      	lsls	r3, r3, #24
 8007b0c:	4962      	ldr	r1, [pc, #392]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b12:	e05f      	b.n	8007bd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d042      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a5d      	ldr	r2, [pc, #372]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7f9 fe52 	bl	80017d0 <HAL_GetTick>
 8007b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b30:	f7f9 fe4e 	bl	80017d0 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e280      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b42:	4b55      	ldr	r3, [pc, #340]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b4e:	f7f9 fe6f 	bl	8001830 <HAL_GetREVID>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d817      	bhi.n	8007b8c <HAL_RCC_OscConfig+0x3ec>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d108      	bne.n	8007b76 <HAL_RCC_OscConfig+0x3d6>
 8007b64:	4b4c      	ldr	r3, [pc, #304]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b72:	6053      	str	r3, [r2, #4]
 8007b74:	e02e      	b.n	8007bd4 <HAL_RCC_OscConfig+0x434>
 8007b76:	4b48      	ldr	r3, [pc, #288]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	069b      	lsls	r3, r3, #26
 8007b84:	4944      	ldr	r1, [pc, #272]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	604b      	str	r3, [r1, #4]
 8007b8a:	e023      	b.n	8007bd4 <HAL_RCC_OscConfig+0x434>
 8007b8c:	4b42      	ldr	r3, [pc, #264]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	061b      	lsls	r3, r3, #24
 8007b9a:	493f      	ldr	r1, [pc, #252]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60cb      	str	r3, [r1, #12]
 8007ba0:	e018      	b.n	8007bd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bae:	f7f9 fe0f 	bl	80017d0 <HAL_GetTick>
 8007bb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bb6:	f7f9 fe0b 	bl	80017d0 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e23d      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bc8:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f0      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d036      	beq.n	8007c4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d019      	beq.n	8007c1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be8:	4b2b      	ldr	r3, [pc, #172]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bec:	4a2a      	ldr	r2, [pc, #168]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007bee:	f043 0301 	orr.w	r3, r3, #1
 8007bf2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf4:	f7f9 fdec 	bl	80017d0 <HAL_GetTick>
 8007bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bfc:	f7f9 fde8 	bl	80017d0 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e21a      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c0e:	4b22      	ldr	r3, [pc, #136]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HAL_RCC_OscConfig+0x45c>
 8007c1a:	e018      	b.n	8007c4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c20:	4a1d      	ldr	r2, [pc, #116]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007c22:	f023 0301 	bic.w	r3, r3, #1
 8007c26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c28:	f7f9 fdd2 	bl	80017d0 <HAL_GetTick>
 8007c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c2e:	e008      	b.n	8007c42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c30:	f7f9 fdce 	bl	80017d0 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e200      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c42:	4b15      	ldr	r3, [pc, #84]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f0      	bne.n	8007c30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d039      	beq.n	8007cce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d01c      	beq.n	8007c9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a0c      	ldr	r2, [pc, #48]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c6e:	f7f9 fdaf 	bl	80017d0 <HAL_GetTick>
 8007c72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c74:	e008      	b.n	8007c88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c76:	f7f9 fdab 	bl	80017d0 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e1dd      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c88:	4b03      	ldr	r3, [pc, #12]	@ (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0f0      	beq.n	8007c76 <HAL_RCC_OscConfig+0x4d6>
 8007c94:	e01b      	b.n	8007cce <HAL_RCC_OscConfig+0x52e>
 8007c96:	bf00      	nop
 8007c98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c9c:	4b9b      	ldr	r3, [pc, #620]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a9a      	ldr	r2, [pc, #616]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ca6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ca8:	f7f9 fd92 	bl	80017d0 <HAL_GetTick>
 8007cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cb0:	f7f9 fd8e 	bl	80017d0 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e1c0      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cc2:	4b92      	ldr	r3, [pc, #584]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f0      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8081 	beq.w	8007dde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8007f10 <HAL_RCC_OscConfig+0x770>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a8b      	ldr	r2, [pc, #556]	@ (8007f10 <HAL_RCC_OscConfig+0x770>)
 8007ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ce8:	f7f9 fd72 	bl	80017d0 <HAL_GetTick>
 8007cec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cf0:	f7f9 fd6e 	bl	80017d0 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b64      	cmp	r3, #100	@ 0x64
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e1a0      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d02:	4b83      	ldr	r3, [pc, #524]	@ (8007f10 <HAL_RCC_OscConfig+0x770>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0f0      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d106      	bne.n	8007d24 <HAL_RCC_OscConfig+0x584>
 8007d16:	4b7d      	ldr	r3, [pc, #500]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d22:	e02d      	b.n	8007d80 <HAL_RCC_OscConfig+0x5e0>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10c      	bne.n	8007d46 <HAL_RCC_OscConfig+0x5a6>
 8007d2c:	4b77      	ldr	r3, [pc, #476]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d30:	4a76      	ldr	r2, [pc, #472]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d38:	4b74      	ldr	r3, [pc, #464]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d3c:	4a73      	ldr	r2, [pc, #460]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d3e:	f023 0304 	bic.w	r3, r3, #4
 8007d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d44:	e01c      	b.n	8007d80 <HAL_RCC_OscConfig+0x5e0>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b05      	cmp	r3, #5
 8007d4c:	d10c      	bne.n	8007d68 <HAL_RCC_OscConfig+0x5c8>
 8007d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d52:	4a6e      	ldr	r2, [pc, #440]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d54:	f043 0304 	orr.w	r3, r3, #4
 8007d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d66:	e00b      	b.n	8007d80 <HAL_RCC_OscConfig+0x5e0>
 8007d68:	4b68      	ldr	r3, [pc, #416]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6c:	4a67      	ldr	r2, [pc, #412]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d6e:	f023 0301 	bic.w	r3, r3, #1
 8007d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d74:	4b65      	ldr	r3, [pc, #404]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d78:	4a64      	ldr	r2, [pc, #400]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007d7a:	f023 0304 	bic.w	r3, r3, #4
 8007d7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d015      	beq.n	8007db4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d88:	f7f9 fd22 	bl	80017d0 <HAL_GetTick>
 8007d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d8e:	e00a      	b.n	8007da6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d90:	f7f9 fd1e 	bl	80017d0 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e14e      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007da6:	4b59      	ldr	r3, [pc, #356]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0ee      	beq.n	8007d90 <HAL_RCC_OscConfig+0x5f0>
 8007db2:	e014      	b.n	8007dde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db4:	f7f9 fd0c 	bl	80017d0 <HAL_GetTick>
 8007db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dba:	e00a      	b.n	8007dd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dbc:	f7f9 fd08 	bl	80017d0 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e138      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1ee      	bne.n	8007dbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 812d 	beq.w	8008042 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007de8:	4b48      	ldr	r3, [pc, #288]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007df0:	2b18      	cmp	r3, #24
 8007df2:	f000 80bd 	beq.w	8007f70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	f040 809e 	bne.w	8007f3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e00:	4b42      	ldr	r3, [pc, #264]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a41      	ldr	r2, [pc, #260]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0c:	f7f9 fce0 	bl	80017d0 <HAL_GetTick>
 8007e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e12:	e008      	b.n	8007e26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e14:	f7f9 fcdc 	bl	80017d0 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e10e      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e26:	4b39      	ldr	r3, [pc, #228]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e32:	4b36      	ldr	r3, [pc, #216]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e36:	4b37      	ldr	r3, [pc, #220]	@ (8007f14 <HAL_RCC_OscConfig+0x774>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e42:	0112      	lsls	r2, r2, #4
 8007e44:	430a      	orrs	r2, r1
 8007e46:	4931      	ldr	r1, [pc, #196]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e50:	3b01      	subs	r3, #1
 8007e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	025b      	lsls	r3, r3, #9
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	431a      	orrs	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e66:	3b01      	subs	r3, #1
 8007e68:	041b      	lsls	r3, r3, #16
 8007e6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e74:	3b01      	subs	r3, #1
 8007e76:	061b      	lsls	r3, r3, #24
 8007e78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e7c:	4923      	ldr	r1, [pc, #140]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007e82:	4b22      	ldr	r3, [pc, #136]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e86:	4a21      	ldr	r2, [pc, #132]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e92:	4b21      	ldr	r3, [pc, #132]	@ (8007f18 <HAL_RCC_OscConfig+0x778>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e9a:	00d2      	lsls	r2, r2, #3
 8007e9c:	491b      	ldr	r1, [pc, #108]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea6:	f023 020c 	bic.w	r2, r3, #12
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eae:	4917      	ldr	r1, [pc, #92]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007eb4:	4b15      	ldr	r3, [pc, #84]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb8:	f023 0202 	bic.w	r2, r3, #2
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec0:	4912      	ldr	r1, [pc, #72]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ec6:	4b11      	ldr	r3, [pc, #68]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eca:	4a10      	ldr	r2, [pc, #64]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ede:	4b0b      	ldr	r3, [pc, #44]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007eea:	4b08      	ldr	r3, [pc, #32]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eee:	4a07      	ldr	r2, [pc, #28]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ef0:	f043 0301 	orr.w	r3, r3, #1
 8007ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef6:	4b05      	ldr	r3, [pc, #20]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a04      	ldr	r2, [pc, #16]	@ (8007f0c <HAL_RCC_OscConfig+0x76c>)
 8007efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f02:	f7f9 fc65 	bl	80017d0 <HAL_GetTick>
 8007f06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f08:	e011      	b.n	8007f2e <HAL_RCC_OscConfig+0x78e>
 8007f0a:	bf00      	nop
 8007f0c:	58024400 	.word	0x58024400
 8007f10:	58024800 	.word	0x58024800
 8007f14:	fffffc0c 	.word	0xfffffc0c
 8007f18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f1c:	f7f9 fc58 	bl	80017d0 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e08a      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f2e:	4b47      	ldr	r3, [pc, #284]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0f0      	beq.n	8007f1c <HAL_RCC_OscConfig+0x77c>
 8007f3a:	e082      	b.n	8008042 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f3c:	4b43      	ldr	r3, [pc, #268]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a42      	ldr	r2, [pc, #264]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8007f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7f9 fc42 	bl	80017d0 <HAL_GetTick>
 8007f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f50:	f7f9 fc3e 	bl	80017d0 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e070      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f62:	4b3a      	ldr	r3, [pc, #232]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0x7b0>
 8007f6e:	e068      	b.n	8008042 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f70:	4b36      	ldr	r3, [pc, #216]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8007f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f76:	4b35      	ldr	r3, [pc, #212]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d031      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f003 0203 	and.w	r2, r3, #3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d12a      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	091b      	lsrs	r3, r3, #4
 8007f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d122      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d11a      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	0a5b      	lsrs	r3, r3, #9
 8007fb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d111      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d108      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	0e1b      	lsrs	r3, r3, #24
 8007fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d001      	beq.n	8007fec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e02b      	b.n	8008044 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007fec:	4b17      	ldr	r3, [pc, #92]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8007fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff0:	08db      	lsrs	r3, r3, #3
 8007ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ff6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d01f      	beq.n	8008042 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008002:	4b12      	ldr	r3, [pc, #72]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8008004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008006:	4a11      	ldr	r2, [pc, #68]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800800e:	f7f9 fbdf 	bl	80017d0 <HAL_GetTick>
 8008012:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008014:	bf00      	nop
 8008016:	f7f9 fbdb 	bl	80017d0 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	4293      	cmp	r3, r2
 8008020:	d0f9      	beq.n	8008016 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008022:	4b0a      	ldr	r3, [pc, #40]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8008024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008026:	4b0a      	ldr	r3, [pc, #40]	@ (8008050 <HAL_RCC_OscConfig+0x8b0>)
 8008028:	4013      	ands	r3, r2
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800802e:	00d2      	lsls	r2, r2, #3
 8008030:	4906      	ldr	r1, [pc, #24]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8008032:	4313      	orrs	r3, r2
 8008034:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008036:	4b05      	ldr	r3, [pc, #20]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	4a04      	ldr	r2, [pc, #16]	@ (800804c <HAL_RCC_OscConfig+0x8ac>)
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3730      	adds	r7, #48	@ 0x30
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	58024400 	.word	0x58024400
 8008050:	ffff0007 	.word	0xffff0007

08008054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e19c      	b.n	80083a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008068:	4b8a      	ldr	r3, [pc, #552]	@ (8008294 <HAL_RCC_ClockConfig+0x240>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 030f 	and.w	r3, r3, #15
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d910      	bls.n	8008098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008076:	4b87      	ldr	r3, [pc, #540]	@ (8008294 <HAL_RCC_ClockConfig+0x240>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f023 020f 	bic.w	r2, r3, #15
 800807e:	4985      	ldr	r1, [pc, #532]	@ (8008294 <HAL_RCC_ClockConfig+0x240>)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	4313      	orrs	r3, r2
 8008084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008086:	4b83      	ldr	r3, [pc, #524]	@ (8008294 <HAL_RCC_ClockConfig+0x240>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	d001      	beq.n	8008098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e184      	b.n	80083a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d010      	beq.n	80080c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691a      	ldr	r2, [r3, #16]
 80080a8:	4b7b      	ldr	r3, [pc, #492]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d908      	bls.n	80080c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080b4:	4b78      	ldr	r3, [pc, #480]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	4975      	ldr	r1, [pc, #468]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d010      	beq.n	80080f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	695a      	ldr	r2, [r3, #20]
 80080d6:	4b70      	ldr	r3, [pc, #448]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080de:	429a      	cmp	r2, r3
 80080e0:	d908      	bls.n	80080f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080e2:	4b6d      	ldr	r3, [pc, #436]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	496a      	ldr	r1, [pc, #424]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d010      	beq.n	8008122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699a      	ldr	r2, [r3, #24]
 8008104:	4b64      	ldr	r3, [pc, #400]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800810c:	429a      	cmp	r2, r3
 800810e:	d908      	bls.n	8008122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008110:	4b61      	ldr	r3, [pc, #388]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	495e      	ldr	r1, [pc, #376]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 800811e:	4313      	orrs	r3, r2
 8008120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d010      	beq.n	8008150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69da      	ldr	r2, [r3, #28]
 8008132:	4b59      	ldr	r3, [pc, #356]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800813a:	429a      	cmp	r2, r3
 800813c:	d908      	bls.n	8008150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800813e:	4b56      	ldr	r3, [pc, #344]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	4953      	ldr	r1, [pc, #332]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 800814c:	4313      	orrs	r3, r2
 800814e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d010      	beq.n	800817e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	4b4d      	ldr	r3, [pc, #308]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	f003 030f 	and.w	r3, r3, #15
 8008168:	429a      	cmp	r2, r3
 800816a:	d908      	bls.n	800817e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800816c:	4b4a      	ldr	r3, [pc, #296]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f023 020f 	bic.w	r2, r3, #15
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	4947      	ldr	r1, [pc, #284]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 800817a:	4313      	orrs	r3, r2
 800817c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d055      	beq.n	8008236 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800818a:	4b43      	ldr	r3, [pc, #268]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	4940      	ldr	r1, [pc, #256]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008198:	4313      	orrs	r3, r2
 800819a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d107      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081a4:	4b3c      	ldr	r3, [pc, #240]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d121      	bne.n	80081f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0f6      	b.n	80083a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d107      	bne.n	80081cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081bc:	4b36      	ldr	r3, [pc, #216]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d115      	bne.n	80081f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e0ea      	b.n	80083a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d107      	bne.n	80081e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081d4:	4b30      	ldr	r3, [pc, #192]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d109      	bne.n	80081f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0de      	b.n	80083a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081e4:	4b2c      	ldr	r3, [pc, #176]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e0d6      	b.n	80083a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081f4:	4b28      	ldr	r3, [pc, #160]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f023 0207 	bic.w	r2, r3, #7
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	4925      	ldr	r1, [pc, #148]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008202:	4313      	orrs	r3, r2
 8008204:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008206:	f7f9 fae3 	bl	80017d0 <HAL_GetTick>
 800820a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800820c:	e00a      	b.n	8008224 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800820e:	f7f9 fadf 	bl	80017d0 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800821c:	4293      	cmp	r3, r2
 800821e:	d901      	bls.n	8008224 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e0be      	b.n	80083a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008224:	4b1c      	ldr	r3, [pc, #112]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	429a      	cmp	r2, r3
 8008234:	d1eb      	bne.n	800820e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d010      	beq.n	8008264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	4b14      	ldr	r3, [pc, #80]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	f003 030f 	and.w	r3, r3, #15
 800824e:	429a      	cmp	r2, r3
 8008250:	d208      	bcs.n	8008264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008252:	4b11      	ldr	r3, [pc, #68]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f023 020f 	bic.w	r2, r3, #15
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	490e      	ldr	r1, [pc, #56]	@ (8008298 <HAL_RCC_ClockConfig+0x244>)
 8008260:	4313      	orrs	r3, r2
 8008262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008264:	4b0b      	ldr	r3, [pc, #44]	@ (8008294 <HAL_RCC_ClockConfig+0x240>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 030f 	and.w	r3, r3, #15
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d214      	bcs.n	800829c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008272:	4b08      	ldr	r3, [pc, #32]	@ (8008294 <HAL_RCC_ClockConfig+0x240>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f023 020f 	bic.w	r2, r3, #15
 800827a:	4906      	ldr	r1, [pc, #24]	@ (8008294 <HAL_RCC_ClockConfig+0x240>)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	4313      	orrs	r3, r2
 8008280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008282:	4b04      	ldr	r3, [pc, #16]	@ (8008294 <HAL_RCC_ClockConfig+0x240>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d005      	beq.n	800829c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e086      	b.n	80083a2 <HAL_RCC_ClockConfig+0x34e>
 8008294:	52002000 	.word	0x52002000
 8008298:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d010      	beq.n	80082ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	4b3f      	ldr	r3, [pc, #252]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d208      	bcs.n	80082ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082b8:	4b3c      	ldr	r3, [pc, #240]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	4939      	ldr	r1, [pc, #228]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d010      	beq.n	80082f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	695a      	ldr	r2, [r3, #20]
 80082da:	4b34      	ldr	r3, [pc, #208]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d208      	bcs.n	80082f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082e6:	4b31      	ldr	r3, [pc, #196]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	492e      	ldr	r1, [pc, #184]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d010      	beq.n	8008326 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699a      	ldr	r2, [r3, #24]
 8008308:	4b28      	ldr	r3, [pc, #160]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008310:	429a      	cmp	r2, r3
 8008312:	d208      	bcs.n	8008326 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008314:	4b25      	ldr	r3, [pc, #148]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	4922      	ldr	r1, [pc, #136]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 8008322:	4313      	orrs	r3, r2
 8008324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b00      	cmp	r3, #0
 8008330:	d010      	beq.n	8008354 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	4b1d      	ldr	r3, [pc, #116]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800833e:	429a      	cmp	r2, r3
 8008340:	d208      	bcs.n	8008354 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008342:	4b1a      	ldr	r3, [pc, #104]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	4917      	ldr	r1, [pc, #92]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 8008350:	4313      	orrs	r3, r2
 8008352:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008354:	f000 f834 	bl	80083c0 <HAL_RCC_GetSysClockFreq>
 8008358:	4602      	mov	r2, r0
 800835a:	4b14      	ldr	r3, [pc, #80]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	f003 030f 	and.w	r3, r3, #15
 8008364:	4912      	ldr	r1, [pc, #72]	@ (80083b0 <HAL_RCC_ClockConfig+0x35c>)
 8008366:	5ccb      	ldrb	r3, [r1, r3]
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	fa22 f303 	lsr.w	r3, r2, r3
 8008370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008372:	4b0e      	ldr	r3, [pc, #56]	@ (80083ac <HAL_RCC_ClockConfig+0x358>)
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	4a0d      	ldr	r2, [pc, #52]	@ (80083b0 <HAL_RCC_ClockConfig+0x35c>)
 800837c:	5cd3      	ldrb	r3, [r2, r3]
 800837e:	f003 031f 	and.w	r3, r3, #31
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	fa22 f303 	lsr.w	r3, r2, r3
 8008388:	4a0a      	ldr	r2, [pc, #40]	@ (80083b4 <HAL_RCC_ClockConfig+0x360>)
 800838a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800838c:	4a0a      	ldr	r2, [pc, #40]	@ (80083b8 <HAL_RCC_ClockConfig+0x364>)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008392:	4b0a      	ldr	r3, [pc, #40]	@ (80083bc <HAL_RCC_ClockConfig+0x368>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f7f9 f9d0 	bl	800173c <HAL_InitTick>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	58024400 	.word	0x58024400
 80083b0:	0801152c 	.word	0x0801152c
 80083b4:	24000004 	.word	0x24000004
 80083b8:	24000000 	.word	0x24000000
 80083bc:	24000008 	.word	0x24000008

080083c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b089      	sub	sp, #36	@ 0x24
 80083c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083c6:	4bb3      	ldr	r3, [pc, #716]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083ce:	2b18      	cmp	r3, #24
 80083d0:	f200 8155 	bhi.w	800867e <HAL_RCC_GetSysClockFreq+0x2be>
 80083d4:	a201      	add	r2, pc, #4	@ (adr r2, 80083dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80083d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083da:	bf00      	nop
 80083dc:	08008441 	.word	0x08008441
 80083e0:	0800867f 	.word	0x0800867f
 80083e4:	0800867f 	.word	0x0800867f
 80083e8:	0800867f 	.word	0x0800867f
 80083ec:	0800867f 	.word	0x0800867f
 80083f0:	0800867f 	.word	0x0800867f
 80083f4:	0800867f 	.word	0x0800867f
 80083f8:	0800867f 	.word	0x0800867f
 80083fc:	08008467 	.word	0x08008467
 8008400:	0800867f 	.word	0x0800867f
 8008404:	0800867f 	.word	0x0800867f
 8008408:	0800867f 	.word	0x0800867f
 800840c:	0800867f 	.word	0x0800867f
 8008410:	0800867f 	.word	0x0800867f
 8008414:	0800867f 	.word	0x0800867f
 8008418:	0800867f 	.word	0x0800867f
 800841c:	0800846d 	.word	0x0800846d
 8008420:	0800867f 	.word	0x0800867f
 8008424:	0800867f 	.word	0x0800867f
 8008428:	0800867f 	.word	0x0800867f
 800842c:	0800867f 	.word	0x0800867f
 8008430:	0800867f 	.word	0x0800867f
 8008434:	0800867f 	.word	0x0800867f
 8008438:	0800867f 	.word	0x0800867f
 800843c:	08008473 	.word	0x08008473
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008440:	4b94      	ldr	r3, [pc, #592]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800844c:	4b91      	ldr	r3, [pc, #580]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	08db      	lsrs	r3, r3, #3
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	4a90      	ldr	r2, [pc, #576]	@ (8008698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008458:	fa22 f303 	lsr.w	r3, r2, r3
 800845c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800845e:	e111      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008460:	4b8d      	ldr	r3, [pc, #564]	@ (8008698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008462:	61bb      	str	r3, [r7, #24]
      break;
 8008464:	e10e      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008466:	4b8d      	ldr	r3, [pc, #564]	@ (800869c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008468:	61bb      	str	r3, [r7, #24]
      break;
 800846a:	e10b      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800846c:	4b8c      	ldr	r3, [pc, #560]	@ (80086a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800846e:	61bb      	str	r3, [r7, #24]
      break;
 8008470:	e108      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008472:	4b88      	ldr	r3, [pc, #544]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800847c:	4b85      	ldr	r3, [pc, #532]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008480:	091b      	lsrs	r3, r3, #4
 8008482:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008486:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008488:	4b82      	ldr	r3, [pc, #520]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008492:	4b80      	ldr	r3, [pc, #512]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008496:	08db      	lsrs	r3, r3, #3
 8008498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 80e1 	beq.w	8008678 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	f000 8083 	beq.w	80085c4 <HAL_RCC_GetSysClockFreq+0x204>
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	f200 80a1 	bhi.w	8008608 <HAL_RCC_GetSysClockFreq+0x248>
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <HAL_RCC_GetSysClockFreq+0x114>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d056      	beq.n	8008580 <HAL_RCC_GetSysClockFreq+0x1c0>
 80084d2:	e099      	b.n	8008608 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0320 	and.w	r3, r3, #32
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d02d      	beq.n	800853c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084e0:	4b6c      	ldr	r3, [pc, #432]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	08db      	lsrs	r3, r3, #3
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	4a6b      	ldr	r2, [pc, #428]	@ (8008698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084ec:	fa22 f303 	lsr.w	r3, r2, r3
 80084f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850a:	4b62      	ldr	r3, [pc, #392]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800850c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851a:	ed97 6a02 	vldr	s12, [r7, #8]
 800851e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80086a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800852e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008536:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800853a:	e087      	b.n	800864c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008546:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80086a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800854a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800854e:	4b51      	ldr	r3, [pc, #324]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800855e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008562:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80086a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800856e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800857e:	e065      	b.n	800864c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80086ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800858e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008592:	4b40      	ldr	r3, [pc, #256]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80086a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085c2:	e043      	b.n	800864c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80086b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80085d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80085ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80086a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008606:	e021      	b.n	800864c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008612:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80086ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861a:	4b1e      	ldr	r3, [pc, #120]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862a:	ed97 6a02 	vldr	s12, [r7, #8]
 800862e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80086a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800863e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800864a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800864c:	4b11      	ldr	r3, [pc, #68]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800864e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008650:	0a5b      	lsrs	r3, r3, #9
 8008652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008656:	3301      	adds	r3, #1
 8008658:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008664:	edd7 6a07 	vldr	s13, [r7, #28]
 8008668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800866c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008670:	ee17 3a90 	vmov	r3, s15
 8008674:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008676:	e005      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	61bb      	str	r3, [r7, #24]
      break;
 800867c:	e002      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800867e:	4b07      	ldr	r3, [pc, #28]	@ (800869c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008680:	61bb      	str	r3, [r7, #24]
      break;
 8008682:	bf00      	nop
  }

  return sysclockfreq;
 8008684:	69bb      	ldr	r3, [r7, #24]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3724      	adds	r7, #36	@ 0x24
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	58024400 	.word	0x58024400
 8008698:	03d09000 	.word	0x03d09000
 800869c:	003d0900 	.word	0x003d0900
 80086a0:	017d7840 	.word	0x017d7840
 80086a4:	46000000 	.word	0x46000000
 80086a8:	4c742400 	.word	0x4c742400
 80086ac:	4a742400 	.word	0x4a742400
 80086b0:	4bbebc20 	.word	0x4bbebc20

080086b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80086ba:	f7ff fe81 	bl	80083c0 <HAL_RCC_GetSysClockFreq>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b10      	ldr	r3, [pc, #64]	@ (8008704 <HAL_RCC_GetHCLKFreq+0x50>)
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	0a1b      	lsrs	r3, r3, #8
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	490f      	ldr	r1, [pc, #60]	@ (8008708 <HAL_RCC_GetHCLKFreq+0x54>)
 80086cc:	5ccb      	ldrb	r3, [r1, r3]
 80086ce:	f003 031f 	and.w	r3, r3, #31
 80086d2:	fa22 f303 	lsr.w	r3, r2, r3
 80086d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008704 <HAL_RCC_GetHCLKFreq+0x50>)
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	f003 030f 	and.w	r3, r3, #15
 80086e0:	4a09      	ldr	r2, [pc, #36]	@ (8008708 <HAL_RCC_GetHCLKFreq+0x54>)
 80086e2:	5cd3      	ldrb	r3, [r2, r3]
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	fa22 f303 	lsr.w	r3, r2, r3
 80086ee:	4a07      	ldr	r2, [pc, #28]	@ (800870c <HAL_RCC_GetHCLKFreq+0x58>)
 80086f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086f2:	4a07      	ldr	r2, [pc, #28]	@ (8008710 <HAL_RCC_GetHCLKFreq+0x5c>)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086f8:	4b04      	ldr	r3, [pc, #16]	@ (800870c <HAL_RCC_GetHCLKFreq+0x58>)
 80086fa:	681b      	ldr	r3, [r3, #0]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	58024400 	.word	0x58024400
 8008708:	0801152c 	.word	0x0801152c
 800870c:	24000004 	.word	0x24000004
 8008710:	24000000 	.word	0x24000000

08008714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008718:	f7ff ffcc 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 800871c:	4602      	mov	r2, r0
 800871e:	4b06      	ldr	r3, [pc, #24]	@ (8008738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	091b      	lsrs	r3, r3, #4
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	4904      	ldr	r1, [pc, #16]	@ (800873c <HAL_RCC_GetPCLK1Freq+0x28>)
 800872a:	5ccb      	ldrb	r3, [r1, r3]
 800872c:	f003 031f 	and.w	r3, r3, #31
 8008730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008734:	4618      	mov	r0, r3
 8008736:	bd80      	pop	{r7, pc}
 8008738:	58024400 	.word	0x58024400
 800873c:	0801152c 	.word	0x0801152c

08008740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008744:	f7ff ffb6 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 8008748:	4602      	mov	r2, r0
 800874a:	4b06      	ldr	r3, [pc, #24]	@ (8008764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	f003 0307 	and.w	r3, r3, #7
 8008754:	4904      	ldr	r1, [pc, #16]	@ (8008768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008756:	5ccb      	ldrb	r3, [r1, r3]
 8008758:	f003 031f 	and.w	r3, r3, #31
 800875c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008760:	4618      	mov	r0, r3
 8008762:	bd80      	pop	{r7, pc}
 8008764:	58024400 	.word	0x58024400
 8008768:	0801152c 	.word	0x0801152c

0800876c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800876c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008770:	b0ca      	sub	sp, #296	@ 0x128
 8008772:	af00      	add	r7, sp, #0
 8008774:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800877e:	2300      	movs	r3, #0
 8008780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008790:	2500      	movs	r5, #0
 8008792:	ea54 0305 	orrs.w	r3, r4, r5
 8008796:	d049      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800879e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087a2:	d02f      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80087a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087a8:	d828      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087ae:	d01a      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80087b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087b4:	d822      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087be:	d007      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80087c0:	e01c      	b.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087c2:	4bb8      	ldr	r3, [pc, #736]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c6:	4ab7      	ldr	r2, [pc, #732]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087ce:	e01a      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d4:	3308      	adds	r3, #8
 80087d6:	2102      	movs	r1, #2
 80087d8:	4618      	mov	r0, r3
 80087da:	f002 fb61 	bl	800aea0 <RCCEx_PLL2_Config>
 80087de:	4603      	mov	r3, r0
 80087e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087e4:	e00f      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ea:	3328      	adds	r3, #40	@ 0x28
 80087ec:	2102      	movs	r1, #2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f002 fc08 	bl	800b004 <RCCEx_PLL3_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087fa:	e004      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008802:	e000      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10a      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800880e:	4ba5      	ldr	r3, [pc, #660]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008812:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800881a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800881c:	4aa1      	ldr	r2, [pc, #644]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800881e:	430b      	orrs	r3, r1
 8008820:	6513      	str	r3, [r2, #80]	@ 0x50
 8008822:	e003      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800882c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008838:	f04f 0900 	mov.w	r9, #0
 800883c:	ea58 0309 	orrs.w	r3, r8, r9
 8008840:	d047      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008848:	2b04      	cmp	r3, #4
 800884a:	d82a      	bhi.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800884c:	a201      	add	r2, pc, #4	@ (adr r2, 8008854 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008869 	.word	0x08008869
 8008858:	08008877 	.word	0x08008877
 800885c:	0800888d 	.word	0x0800888d
 8008860:	080088ab 	.word	0x080088ab
 8008864:	080088ab 	.word	0x080088ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008868:	4b8e      	ldr	r3, [pc, #568]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	4a8d      	ldr	r2, [pc, #564]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800886e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008874:	e01a      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887a:	3308      	adds	r3, #8
 800887c:	2100      	movs	r1, #0
 800887e:	4618      	mov	r0, r3
 8008880:	f002 fb0e 	bl	800aea0 <RCCEx_PLL2_Config>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800888a:	e00f      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800888c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008890:	3328      	adds	r3, #40	@ 0x28
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f002 fbb5 	bl	800b004 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088a0:	e004      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088a8:	e000      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80088aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088b4:	4b7b      	ldr	r3, [pc, #492]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b8:	f023 0107 	bic.w	r1, r3, #7
 80088bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088c2:	4a78      	ldr	r2, [pc, #480]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088c4:	430b      	orrs	r3, r1
 80088c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80088c8:	e003      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80088d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80088de:	f04f 0b00 	mov.w	fp, #0
 80088e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80088e6:	d04c      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f2:	d030      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80088f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f8:	d829      	bhi.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80088fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80088fc:	d02d      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80088fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008900:	d825      	bhi.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008902:	2b80      	cmp	r3, #128	@ 0x80
 8008904:	d018      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008906:	2b80      	cmp	r3, #128	@ 0x80
 8008908:	d821      	bhi.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800890e:	2b40      	cmp	r3, #64	@ 0x40
 8008910:	d007      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008912:	e01c      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008914:	4b63      	ldr	r3, [pc, #396]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008918:	4a62      	ldr	r2, [pc, #392]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800891a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800891e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008920:	e01c      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008926:	3308      	adds	r3, #8
 8008928:	2100      	movs	r1, #0
 800892a:	4618      	mov	r0, r3
 800892c:	f002 fab8 	bl	800aea0 <RCCEx_PLL2_Config>
 8008930:	4603      	mov	r3, r0
 8008932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008936:	e011      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893c:	3328      	adds	r3, #40	@ 0x28
 800893e:	2100      	movs	r1, #0
 8008940:	4618      	mov	r0, r3
 8008942:	f002 fb5f 	bl	800b004 <RCCEx_PLL3_Config>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800894c:	e006      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008954:	e002      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800895a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008964:	4b4f      	ldr	r3, [pc, #316]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008968:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800896c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008972:	4a4c      	ldr	r2, [pc, #304]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008974:	430b      	orrs	r3, r1
 8008976:	6513      	str	r3, [r2, #80]	@ 0x50
 8008978:	e003      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800897e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800898e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008992:	2300      	movs	r3, #0
 8008994:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008998:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800899c:	460b      	mov	r3, r1
 800899e:	4313      	orrs	r3, r2
 80089a0:	d053      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80089a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80089aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089ae:	d035      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80089b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089b4:	d82e      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089ba:	d031      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80089bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089c0:	d828      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c6:	d01a      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80089c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089cc:	d822      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80089d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089d6:	d007      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80089d8:	e01c      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089da:	4b32      	ldr	r3, [pc, #200]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	4a31      	ldr	r2, [pc, #196]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089e6:	e01c      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ec:	3308      	adds	r3, #8
 80089ee:	2100      	movs	r1, #0
 80089f0:	4618      	mov	r0, r3
 80089f2:	f002 fa55 	bl	800aea0 <RCCEx_PLL2_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80089fc:	e011      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a02:	3328      	adds	r3, #40	@ 0x28
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f002 fafc 	bl	800b004 <RCCEx_PLL3_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a12:	e006      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a1a:	e002      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a1c:	bf00      	nop
 8008a1e:	e000      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10b      	bne.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a40:	e003      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008a56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008a60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008a64:	460b      	mov	r3, r1
 8008a66:	4313      	orrs	r3, r2
 8008a68:	d056      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a76:	d038      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008a78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a7c:	d831      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a82:	d034      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008a84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a88:	d82b      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a8e:	d01d      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a94:	d825      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d006      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008a9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a9e:	d00a      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008aa0:	e01f      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008aa2:	bf00      	nop
 8008aa4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa8:	4ba2      	ldr	r3, [pc, #648]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aac:	4aa1      	ldr	r2, [pc, #644]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ab4:	e01c      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aba:	3308      	adds	r3, #8
 8008abc:	2100      	movs	r1, #0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f002 f9ee 	bl	800aea0 <RCCEx_PLL2_Config>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008aca:	e011      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad0:	3328      	adds	r3, #40	@ 0x28
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f002 fa95 	bl	800b004 <RCCEx_PLL3_Config>
 8008ada:	4603      	mov	r3, r0
 8008adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ae0:	e006      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ae8:	e002      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008aea:	bf00      	nop
 8008aec:	e000      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10b      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008af8:	4b8e      	ldr	r3, [pc, #568]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008afc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b08:	4a8a      	ldr	r2, [pc, #552]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b0e:	e003      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008b24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008b32:	460b      	mov	r3, r1
 8008b34:	4313      	orrs	r3, r2
 8008b36:	d03a      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b3e:	2b30      	cmp	r3, #48	@ 0x30
 8008b40:	d01f      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008b42:	2b30      	cmp	r3, #48	@ 0x30
 8008b44:	d819      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d00c      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d815      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d019      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008b52:	2b10      	cmp	r3, #16
 8008b54:	d111      	bne.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b56:	4b77      	ldr	r3, [pc, #476]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5a:	4a76      	ldr	r2, [pc, #472]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008b62:	e011      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b68:	3308      	adds	r3, #8
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f002 f997 	bl	800aea0 <RCCEx_PLL2_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008b78:	e006      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b80:	e002      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008b82:	bf00      	nop
 8008b84:	e000      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b90:	4b68      	ldr	r3, [pc, #416]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b9e:	4a65      	ldr	r2, [pc, #404]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ba4:	e003      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008bba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	d051      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bd8:	d035      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bde:	d82e      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008be0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008be4:	d031      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008be6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008bea:	d828      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf0:	d01a      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf6:	d822      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c00:	d007      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008c02:	e01c      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c04:	4b4b      	ldr	r3, [pc, #300]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c08:	4a4a      	ldr	r2, [pc, #296]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c10:	e01c      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c16:	3308      	adds	r3, #8
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f002 f940 	bl	800aea0 <RCCEx_PLL2_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c26:	e011      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2c:	3328      	adds	r3, #40	@ 0x28
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f002 f9e7 	bl	800b004 <RCCEx_PLL3_Config>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c3c:	e006      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c44:	e002      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008c46:	bf00      	nop
 8008c48:	e000      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008c54:	4b37      	ldr	r3, [pc, #220]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c62:	4a34      	ldr	r2, [pc, #208]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c64:	430b      	orrs	r3, r1
 8008c66:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c68:	e003      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c82:	2300      	movs	r3, #0
 8008c84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008c88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	d056      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c9c:	d033      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008c9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ca2:	d82c      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ca4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ca8:	d02f      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008cae:	d826      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cb4:	d02b      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008cb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cba:	d820      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc0:	d012      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc6:	d81a      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d022      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd0:	d115      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	2101      	movs	r1, #1
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f002 f8e0 	bl	800aea0 <RCCEx_PLL2_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ce6:	e015      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cec:	3328      	adds	r3, #40	@ 0x28
 8008cee:	2101      	movs	r1, #1
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 f987 	bl	800b004 <RCCEx_PLL3_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008cfc:	e00a      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d04:	e006      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d06:	bf00      	nop
 8008d08:	e004      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d0a:	bf00      	nop
 8008d0c:	e002      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d0e:	bf00      	nop
 8008d10:	e000      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10d      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d1c:	4b05      	ldr	r3, [pc, #20]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d2a:	4a02      	ldr	r2, [pc, #8]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d30:	e006      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008d32:	bf00      	nop
 8008d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d50:	2300      	movs	r3, #0
 8008d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	d055      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d6c:	d033      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d72:	d82c      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d78:	d02f      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d7e:	d826      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d84:	d02b      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008d86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d8a:	d820      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d90:	d012      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d96:	d81a      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d022      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008da0:	d115      	bne.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da6:	3308      	adds	r3, #8
 8008da8:	2101      	movs	r1, #1
 8008daa:	4618      	mov	r0, r3
 8008dac:	f002 f878 	bl	800aea0 <RCCEx_PLL2_Config>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008db6:	e015      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dbc:	3328      	adds	r3, #40	@ 0x28
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f002 f91f 	bl	800b004 <RCCEx_PLL3_Config>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008dcc:	e00a      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dd4:	e006      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dd6:	bf00      	nop
 8008dd8:	e004      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dda:	bf00      	nop
 8008ddc:	e002      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dde:	bf00      	nop
 8008de0:	e000      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10b      	bne.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008dec:	4ba3      	ldr	r3, [pc, #652]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008dfc:	4a9f      	ldr	r2, [pc, #636]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dfe:	430b      	orrs	r3, r1
 8008e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e02:	e003      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e26:	460b      	mov	r3, r1
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	d037      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e36:	d00e      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e3c:	d816      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d018      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e46:	d111      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e48:	4b8c      	ldr	r3, [pc, #560]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4c:	4a8b      	ldr	r2, [pc, #556]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e54:	e00f      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f002 f81e 	bl	800aea0 <RCCEx_PLL2_Config>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e6a:	e004      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e72:	e000      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8c:	4a7b      	ldr	r2, [pc, #492]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e92:	e003      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008eac:	2300      	movs	r3, #0
 8008eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008eb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	d039      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d81c      	bhi.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f09 	.word	0x08008f09
 8008ed0:	08008edd 	.word	0x08008edd
 8008ed4:	08008eeb 	.word	0x08008eeb
 8008ed8:	08008f09 	.word	0x08008f09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008edc:	4b67      	ldr	r3, [pc, #412]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	4a66      	ldr	r2, [pc, #408]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ee8:	e00f      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eee:	3308      	adds	r3, #8
 8008ef0:	2102      	movs	r1, #2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f001 ffd4 	bl	800aea0 <RCCEx_PLL2_Config>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008efe:	e004      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f06:	e000      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f12:	4b5a      	ldr	r3, [pc, #360]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f16:	f023 0103 	bic.w	r1, r3, #3
 8008f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f20:	4a56      	ldr	r2, [pc, #344]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f22:	430b      	orrs	r3, r1
 8008f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f26:	e003      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f40:	2300      	movs	r3, #0
 8008f42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f000 809f 	beq.w	8009090 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f52:	4b4b      	ldr	r3, [pc, #300]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a4a      	ldr	r2, [pc, #296]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f5e:	f7f8 fc37 	bl	80017d0 <HAL_GetTick>
 8008f62:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f66:	e00b      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f68:	f7f8 fc32 	bl	80017d0 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b64      	cmp	r3, #100	@ 0x64
 8008f76:	d903      	bls.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f7e:	e005      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f80:	4b3f      	ldr	r3, [pc, #252]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d0ed      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d179      	bne.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f94:	4b39      	ldr	r3, [pc, #228]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008fa0:	4053      	eors	r3, r2
 8008fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d015      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008faa:	4b34      	ldr	r3, [pc, #208]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fb2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fb6:	4b31      	ldr	r3, [pc, #196]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fba:	4a30      	ldr	r2, [pc, #192]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fc0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fcc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008fce:	4a2b      	ldr	r2, [pc, #172]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008fd4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fe2:	d118      	bne.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe4:	f7f8 fbf4 	bl	80017d0 <HAL_GetTick>
 8008fe8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fec:	e00d      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fee:	f7f8 fbef 	bl	80017d0 <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008ff8:	1ad2      	subs	r2, r2, r3
 8008ffa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d903      	bls.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009008:	e005      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800900a:	4b1c      	ldr	r3, [pc, #112]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800900c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0eb      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800901a:	2b00      	cmp	r3, #0
 800901c:	d129      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800901e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800902a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800902e:	d10e      	bne.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009030:	4b12      	ldr	r3, [pc, #72]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009040:	091a      	lsrs	r2, r3, #4
 8009042:	4b10      	ldr	r3, [pc, #64]	@ (8009084 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009044:	4013      	ands	r3, r2
 8009046:	4a0d      	ldr	r2, [pc, #52]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009048:	430b      	orrs	r3, r1
 800904a:	6113      	str	r3, [r2, #16]
 800904c:	e005      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800904e:	4b0b      	ldr	r3, [pc, #44]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	4a0a      	ldr	r2, [pc, #40]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009054:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009058:	6113      	str	r3, [r2, #16]
 800905a:	4b08      	ldr	r3, [pc, #32]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800905c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800906a:	4a04      	ldr	r2, [pc, #16]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800906c:	430b      	orrs	r3, r1
 800906e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009070:	e00e      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800907a:	e009      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800907c:	58024400 	.word	0x58024400
 8009080:	58024800 	.word	0x58024800
 8009084:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800908c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f002 0301 	and.w	r3, r2, #1
 800909c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090a0:	2300      	movs	r3, #0
 80090a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f000 8089 	beq.w	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090b8:	2b28      	cmp	r3, #40	@ 0x28
 80090ba:	d86b      	bhi.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	0800919d 	.word	0x0800919d
 80090c8:	08009195 	.word	0x08009195
 80090cc:	08009195 	.word	0x08009195
 80090d0:	08009195 	.word	0x08009195
 80090d4:	08009195 	.word	0x08009195
 80090d8:	08009195 	.word	0x08009195
 80090dc:	08009195 	.word	0x08009195
 80090e0:	08009195 	.word	0x08009195
 80090e4:	08009169 	.word	0x08009169
 80090e8:	08009195 	.word	0x08009195
 80090ec:	08009195 	.word	0x08009195
 80090f0:	08009195 	.word	0x08009195
 80090f4:	08009195 	.word	0x08009195
 80090f8:	08009195 	.word	0x08009195
 80090fc:	08009195 	.word	0x08009195
 8009100:	08009195 	.word	0x08009195
 8009104:	0800917f 	.word	0x0800917f
 8009108:	08009195 	.word	0x08009195
 800910c:	08009195 	.word	0x08009195
 8009110:	08009195 	.word	0x08009195
 8009114:	08009195 	.word	0x08009195
 8009118:	08009195 	.word	0x08009195
 800911c:	08009195 	.word	0x08009195
 8009120:	08009195 	.word	0x08009195
 8009124:	0800919d 	.word	0x0800919d
 8009128:	08009195 	.word	0x08009195
 800912c:	08009195 	.word	0x08009195
 8009130:	08009195 	.word	0x08009195
 8009134:	08009195 	.word	0x08009195
 8009138:	08009195 	.word	0x08009195
 800913c:	08009195 	.word	0x08009195
 8009140:	08009195 	.word	0x08009195
 8009144:	0800919d 	.word	0x0800919d
 8009148:	08009195 	.word	0x08009195
 800914c:	08009195 	.word	0x08009195
 8009150:	08009195 	.word	0x08009195
 8009154:	08009195 	.word	0x08009195
 8009158:	08009195 	.word	0x08009195
 800915c:	08009195 	.word	0x08009195
 8009160:	08009195 	.word	0x08009195
 8009164:	0800919d 	.word	0x0800919d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916c:	3308      	adds	r3, #8
 800916e:	2101      	movs	r1, #1
 8009170:	4618      	mov	r0, r3
 8009172:	f001 fe95 	bl	800aea0 <RCCEx_PLL2_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800917c:	e00f      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009182:	3328      	adds	r3, #40	@ 0x28
 8009184:	2101      	movs	r1, #1
 8009186:	4618      	mov	r0, r3
 8009188:	f001 ff3c 	bl	800b004 <RCCEx_PLL3_Config>
 800918c:	4603      	mov	r3, r0
 800918e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009192:	e004      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800919a:	e000      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800919c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10a      	bne.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80091a6:	4bbf      	ldr	r3, [pc, #764]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80091ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091b4:	4abb      	ldr	r2, [pc, #748]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091b6:	430b      	orrs	r3, r1
 80091b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80091ba:	e003      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f002 0302 	and.w	r3, r2, #2
 80091d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091d4:	2300      	movs	r3, #0
 80091d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80091da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80091de:	460b      	mov	r3, r1
 80091e0:	4313      	orrs	r3, r2
 80091e2:	d041      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d824      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80091ee:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009241 	.word	0x08009241
 80091f8:	0800920d 	.word	0x0800920d
 80091fc:	08009223 	.word	0x08009223
 8009200:	08009241 	.word	0x08009241
 8009204:	08009241 	.word	0x08009241
 8009208:	08009241 	.word	0x08009241
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800920c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009210:	3308      	adds	r3, #8
 8009212:	2101      	movs	r1, #1
 8009214:	4618      	mov	r0, r3
 8009216:	f001 fe43 	bl	800aea0 <RCCEx_PLL2_Config>
 800921a:	4603      	mov	r3, r0
 800921c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009220:	e00f      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009226:	3328      	adds	r3, #40	@ 0x28
 8009228:	2101      	movs	r1, #1
 800922a:	4618      	mov	r0, r3
 800922c:	f001 feea 	bl	800b004 <RCCEx_PLL3_Config>
 8009230:	4603      	mov	r3, r0
 8009232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009236:	e004      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800923e:	e000      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10a      	bne.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800924a:	4b96      	ldr	r3, [pc, #600]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800924c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924e:	f023 0107 	bic.w	r1, r3, #7
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009256:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009258:	4a92      	ldr	r2, [pc, #584]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800925a:	430b      	orrs	r3, r1
 800925c:	6553      	str	r3, [r2, #84]	@ 0x54
 800925e:	e003      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f002 0304 	and.w	r3, r2, #4
 8009274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009278:	2300      	movs	r3, #0
 800927a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800927e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009282:	460b      	mov	r3, r1
 8009284:	4313      	orrs	r3, r2
 8009286:	d044      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009290:	2b05      	cmp	r3, #5
 8009292:	d825      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009294:	a201      	add	r2, pc, #4	@ (adr r2, 800929c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092e9 	.word	0x080092e9
 80092a0:	080092b5 	.word	0x080092b5
 80092a4:	080092cb 	.word	0x080092cb
 80092a8:	080092e9 	.word	0x080092e9
 80092ac:	080092e9 	.word	0x080092e9
 80092b0:	080092e9 	.word	0x080092e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b8:	3308      	adds	r3, #8
 80092ba:	2101      	movs	r1, #1
 80092bc:	4618      	mov	r0, r3
 80092be:	f001 fdef 	bl	800aea0 <RCCEx_PLL2_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80092c8:	e00f      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ce:	3328      	adds	r3, #40	@ 0x28
 80092d0:	2101      	movs	r1, #1
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 fe96 	bl	800b004 <RCCEx_PLL3_Config>
 80092d8:	4603      	mov	r3, r0
 80092da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80092de:	e004      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092e6:	e000      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80092e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10b      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092f2:	4b6c      	ldr	r3, [pc, #432]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f6:	f023 0107 	bic.w	r1, r3, #7
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009302:	4a68      	ldr	r2, [pc, #416]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009304:	430b      	orrs	r3, r1
 8009306:	6593      	str	r3, [r2, #88]	@ 0x58
 8009308:	e003      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800930e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f002 0320 	and.w	r3, r2, #32
 800931e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009322:	2300      	movs	r3, #0
 8009324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800932c:	460b      	mov	r3, r1
 800932e:	4313      	orrs	r3, r2
 8009330:	d055      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800933a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800933e:	d033      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009344:	d82c      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800934a:	d02f      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800934c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009350:	d826      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009356:	d02b      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800935c:	d820      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800935e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009362:	d012      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009368:	d81a      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d022      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800936e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009372:	d115      	bne.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009378:	3308      	adds	r3, #8
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f001 fd8f 	bl	800aea0 <RCCEx_PLL2_Config>
 8009382:	4603      	mov	r3, r0
 8009384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009388:	e015      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800938a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800938e:	3328      	adds	r3, #40	@ 0x28
 8009390:	2102      	movs	r1, #2
 8009392:	4618      	mov	r0, r3
 8009394:	f001 fe36 	bl	800b004 <RCCEx_PLL3_Config>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800939e:	e00a      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093a6:	e006      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093a8:	bf00      	nop
 80093aa:	e004      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093ac:	bf00      	nop
 80093ae:	e002      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093b0:	bf00      	nop
 80093b2:	e000      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10b      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093be:	4b39      	ldr	r3, [pc, #228]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80093c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ce:	4a35      	ldr	r2, [pc, #212]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093d0:	430b      	orrs	r3, r1
 80093d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80093d4:	e003      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80093ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093ee:	2300      	movs	r3, #0
 80093f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80093f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4313      	orrs	r3, r2
 80093fc:	d058      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009406:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800940a:	d033      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800940c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009410:	d82c      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009416:	d02f      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800941c:	d826      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800941e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009422:	d02b      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009424:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009428:	d820      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800942a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800942e:	d012      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009434:	d81a      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d022      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800943a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800943e:	d115      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009444:	3308      	adds	r3, #8
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f001 fd29 	bl	800aea0 <RCCEx_PLL2_Config>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009454:	e015      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945a:	3328      	adds	r3, #40	@ 0x28
 800945c:	2102      	movs	r1, #2
 800945e:	4618      	mov	r0, r3
 8009460:	f001 fdd0 	bl	800b004 <RCCEx_PLL3_Config>
 8009464:	4603      	mov	r3, r0
 8009466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800946a:	e00a      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009472:	e006      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009474:	bf00      	nop
 8009476:	e004      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009478:	bf00      	nop
 800947a:	e002      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800947c:	bf00      	nop
 800947e:	e000      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10e      	bne.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800948a:	4b06      	ldr	r3, [pc, #24]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800948c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800948e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009496:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800949a:	4a02      	ldr	r2, [pc, #8]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800949c:	430b      	orrs	r3, r1
 800949e:	6593      	str	r3, [r2, #88]	@ 0x58
 80094a0:	e006      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80094a2:	bf00      	nop
 80094a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80094bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094c0:	2300      	movs	r3, #0
 80094c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80094ca:	460b      	mov	r3, r1
 80094cc:	4313      	orrs	r3, r2
 80094ce:	d055      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80094dc:	d033      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80094de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80094e2:	d82c      	bhi.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094e8:	d02f      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80094ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094ee:	d826      	bhi.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80094f4:	d02b      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80094f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80094fa:	d820      	bhi.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009500:	d012      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009506:	d81a      	bhi.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009508:	2b00      	cmp	r3, #0
 800950a:	d022      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800950c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009510:	d115      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009516:	3308      	adds	r3, #8
 8009518:	2100      	movs	r1, #0
 800951a:	4618      	mov	r0, r3
 800951c:	f001 fcc0 	bl	800aea0 <RCCEx_PLL2_Config>
 8009520:	4603      	mov	r3, r0
 8009522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009526:	e015      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952c:	3328      	adds	r3, #40	@ 0x28
 800952e:	2102      	movs	r1, #2
 8009530:	4618      	mov	r0, r3
 8009532:	f001 fd67 	bl	800b004 <RCCEx_PLL3_Config>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800953c:	e00a      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009544:	e006      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009546:	bf00      	nop
 8009548:	e004      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800954a:	bf00      	nop
 800954c:	e002      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10b      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800955c:	4ba1      	ldr	r3, [pc, #644]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800955e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009560:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800956c:	4a9d      	ldr	r2, [pc, #628]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800956e:	430b      	orrs	r3, r1
 8009570:	6593      	str	r3, [r2, #88]	@ 0x58
 8009572:	e003      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800957c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	f002 0308 	and.w	r3, r2, #8
 8009588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800958c:	2300      	movs	r3, #0
 800958e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009592:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009596:	460b      	mov	r3, r1
 8009598:	4313      	orrs	r3, r2
 800959a:	d01e      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800959c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095a8:	d10c      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ae:	3328      	adds	r3, #40	@ 0x28
 80095b0:	2102      	movs	r1, #2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 fd26 	bl	800b004 <RCCEx_PLL3_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80095c4:	4b87      	ldr	r3, [pc, #540]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095d4:	4a83      	ldr	r2, [pc, #524]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095d6:	430b      	orrs	r3, r1
 80095d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f002 0310 	and.w	r3, r2, #16
 80095e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095ea:	2300      	movs	r3, #0
 80095ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80095f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80095f4:	460b      	mov	r3, r1
 80095f6:	4313      	orrs	r3, r2
 80095f8:	d01e      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80095fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009606:	d10c      	bne.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800960c:	3328      	adds	r3, #40	@ 0x28
 800960e:	2102      	movs	r1, #2
 8009610:	4618      	mov	r0, r3
 8009612:	f001 fcf7 	bl	800b004 <RCCEx_PLL3_Config>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009622:	4b70      	ldr	r3, [pc, #448]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009626:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800962a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009632:	4a6c      	ldr	r2, [pc, #432]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009634:	430b      	orrs	r3, r1
 8009636:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009648:	2300      	movs	r3, #0
 800964a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800964e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009652:	460b      	mov	r3, r1
 8009654:	4313      	orrs	r3, r2
 8009656:	d03e      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009664:	d022      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800966a:	d81b      	bhi.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009674:	d00b      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009676:	e015      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967c:	3308      	adds	r3, #8
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f001 fc0d 	bl	800aea0 <RCCEx_PLL2_Config>
 8009686:	4603      	mov	r3, r0
 8009688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800968c:	e00f      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800968e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009692:	3328      	adds	r3, #40	@ 0x28
 8009694:	2102      	movs	r1, #2
 8009696:	4618      	mov	r0, r3
 8009698:	f001 fcb4 	bl	800b004 <RCCEx_PLL3_Config>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80096a2:	e004      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096aa:	e000      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80096ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096b6:	4b4b      	ldr	r3, [pc, #300]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80096be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80096c6:	4a47      	ldr	r2, [pc, #284]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096c8:	430b      	orrs	r3, r1
 80096ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80096cc:	e003      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80096e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096e4:	2300      	movs	r3, #0
 80096e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80096ec:	460b      	mov	r3, r1
 80096ee:	4313      	orrs	r3, r2
 80096f0:	d03b      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80096f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096fe:	d01f      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009700:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009704:	d818      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800970a:	d003      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800970c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009710:	d007      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009712:	e011      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009714:	4b33      	ldr	r3, [pc, #204]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009718:	4a32      	ldr	r2, [pc, #200]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800971a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800971e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009720:	e00f      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009726:	3328      	adds	r3, #40	@ 0x28
 8009728:	2101      	movs	r1, #1
 800972a:	4618      	mov	r0, r3
 800972c:	f001 fc6a 	bl	800b004 <RCCEx_PLL3_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009736:	e004      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800973e:	e000      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10b      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800974a:	4b26      	ldr	r3, [pc, #152]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800974c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800975a:	4a22      	ldr	r2, [pc, #136]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800975c:	430b      	orrs	r3, r1
 800975e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009760:	e003      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009776:	673b      	str	r3, [r7, #112]	@ 0x70
 8009778:	2300      	movs	r3, #0
 800977a:	677b      	str	r3, [r7, #116]	@ 0x74
 800977c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009780:	460b      	mov	r3, r1
 8009782:	4313      	orrs	r3, r2
 8009784:	d034      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800978a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800978c:	2b00      	cmp	r3, #0
 800978e:	d003      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009794:	d007      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009796:	e011      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009798:	4b12      	ldr	r3, [pc, #72]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800979a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979c:	4a11      	ldr	r2, [pc, #68]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800979e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80097a4:	e00e      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097aa:	3308      	adds	r3, #8
 80097ac:	2102      	movs	r1, #2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 fb76 	bl	800aea0 <RCCEx_PLL2_Config>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80097ba:	e003      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10d      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097da:	4a02      	ldr	r2, [pc, #8]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097dc:	430b      	orrs	r3, r1
 80097de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097e0:	e006      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80097e2:	bf00      	nop
 80097e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80097fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80097fe:	2300      	movs	r3, #0
 8009800:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009802:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009806:	460b      	mov	r3, r1
 8009808:	4313      	orrs	r3, r2
 800980a:	d00c      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800980c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009810:	3328      	adds	r3, #40	@ 0x28
 8009812:	2102      	movs	r1, #2
 8009814:	4618      	mov	r0, r3
 8009816:	f001 fbf5 	bl	800b004 <RCCEx_PLL3_Config>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009832:	663b      	str	r3, [r7, #96]	@ 0x60
 8009834:	2300      	movs	r3, #0
 8009836:	667b      	str	r3, [r7, #100]	@ 0x64
 8009838:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800983c:	460b      	mov	r3, r1
 800983e:	4313      	orrs	r3, r2
 8009840:	d038      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800984a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800984e:	d018      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009854:	d811      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800985a:	d014      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800985c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009860:	d80b      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d011      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800986a:	d106      	bne.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800986c:	4bc3      	ldr	r3, [pc, #780]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800986e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009870:	4ac2      	ldr	r2, [pc, #776]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009878:	e008      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009880:	e004      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009882:	bf00      	nop
 8009884:	e002      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009886:	bf00      	nop
 8009888:	e000      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800988a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800988c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10b      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009894:	4bb9      	ldr	r3, [pc, #740]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009898:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800989c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098a4:	4ab5      	ldr	r2, [pc, #724]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a6:	430b      	orrs	r3, r1
 80098a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80098aa:	e003      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80098c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098c2:	2300      	movs	r3, #0
 80098c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80098ca:	460b      	mov	r3, r1
 80098cc:	4313      	orrs	r3, r2
 80098ce:	d009      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098d0:	4baa      	ldr	r3, [pc, #680]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098de:	4aa7      	ldr	r2, [pc, #668]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098e0:	430b      	orrs	r3, r1
 80098e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80098f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80098f2:	2300      	movs	r3, #0
 80098f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80098f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80098fa:	460b      	mov	r3, r1
 80098fc:	4313      	orrs	r3, r2
 80098fe:	d00a      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009900:	4b9e      	ldr	r3, [pc, #632]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009910:	4a9a      	ldr	r2, [pc, #616]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009912:	430b      	orrs	r3, r1
 8009914:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009924:	2300      	movs	r3, #0
 8009926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009928:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800992c:	460b      	mov	r3, r1
 800992e:	4313      	orrs	r3, r2
 8009930:	d009      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009932:	4b92      	ldr	r3, [pc, #584]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009936:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009940:	4a8e      	ldr	r2, [pc, #568]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009942:	430b      	orrs	r3, r1
 8009944:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009952:	643b      	str	r3, [r7, #64]	@ 0x40
 8009954:	2300      	movs	r3, #0
 8009956:	647b      	str	r3, [r7, #68]	@ 0x44
 8009958:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800995c:	460b      	mov	r3, r1
 800995e:	4313      	orrs	r3, r2
 8009960:	d00e      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009962:	4b86      	ldr	r3, [pc, #536]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	4a85      	ldr	r2, [pc, #532]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009968:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800996c:	6113      	str	r3, [r2, #16]
 800996e:	4b83      	ldr	r3, [pc, #524]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009970:	6919      	ldr	r1, [r3, #16]
 8009972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009976:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800997a:	4a80      	ldr	r2, [pc, #512]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800997c:	430b      	orrs	r3, r1
 800997e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800998c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800998e:	2300      	movs	r3, #0
 8009990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009992:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009996:	460b      	mov	r3, r1
 8009998:	4313      	orrs	r3, r2
 800999a:	d009      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800999c:	4b77      	ldr	r3, [pc, #476]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800999e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099aa:	4a74      	ldr	r2, [pc, #464]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ac:	430b      	orrs	r3, r1
 80099ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80099b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80099bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80099be:	2300      	movs	r3, #0
 80099c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80099c6:	460b      	mov	r3, r1
 80099c8:	4313      	orrs	r3, r2
 80099ca:	d00a      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80099cc:	4b6b      	ldr	r3, [pc, #428]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80099d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099dc:	4a67      	ldr	r2, [pc, #412]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099de:	430b      	orrs	r3, r1
 80099e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	2100      	movs	r1, #0
 80099ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80099f8:	460b      	mov	r3, r1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	d011      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a02:	3308      	adds	r3, #8
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f001 fa4a 	bl	800aea0 <RCCEx_PLL2_Config>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	6239      	str	r1, [r7, #32]
 8009a2e:	f003 0302 	and.w	r3, r3, #2
 8009a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d011      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a42:	3308      	adds	r3, #8
 8009a44:	2101      	movs	r1, #1
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 fa2a 	bl	800aea0 <RCCEx_PLL2_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	61b9      	str	r1, [r7, #24]
 8009a6e:	f003 0304 	and.w	r3, r3, #4
 8009a72:	61fb      	str	r3, [r7, #28]
 8009a74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	d011      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a82:	3308      	adds	r3, #8
 8009a84:	2102      	movs	r1, #2
 8009a86:	4618      	mov	r0, r3
 8009a88:	f001 fa0a 	bl	800aea0 <RCCEx_PLL2_Config>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	2100      	movs	r1, #0
 8009aac:	6139      	str	r1, [r7, #16]
 8009aae:	f003 0308 	and.w	r3, r3, #8
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4313      	orrs	r3, r2
 8009abc:	d011      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac2:	3328      	adds	r3, #40	@ 0x28
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f001 fa9c 	bl	800b004 <RCCEx_PLL3_Config>
 8009acc:	4603      	mov	r3, r0
 8009ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	2100      	movs	r1, #0
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	f003 0310 	and.w	r3, r3, #16
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009af8:	460b      	mov	r3, r1
 8009afa:	4313      	orrs	r3, r2
 8009afc:	d011      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b02:	3328      	adds	r3, #40	@ 0x28
 8009b04:	2101      	movs	r1, #1
 8009b06:	4618      	mov	r0, r3
 8009b08:	f001 fa7c 	bl	800b004 <RCCEx_PLL3_Config>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6039      	str	r1, [r7, #0]
 8009b2e:	f003 0320 	and.w	r3, r3, #32
 8009b32:	607b      	str	r3, [r7, #4]
 8009b34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	d011      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b42:	3328      	adds	r3, #40	@ 0x28
 8009b44:	2102      	movs	r1, #2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 fa5c 	bl	800b004 <RCCEx_PLL3_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009b62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e000      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009b76:	46bd      	mov	sp, r7
 8009b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b7c:	58024400 	.word	0x58024400

08009b80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b090      	sub	sp, #64	@ 0x40
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b8e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009b92:	430b      	orrs	r3, r1
 8009b94:	f040 8094 	bne.w	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009b98:	4b9e      	ldr	r3, [pc, #632]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	f200 8087 	bhi.w	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009baa:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bc5 	.word	0x08009bc5
 8009bb4:	08009bed 	.word	0x08009bed
 8009bb8:	08009c15 	.word	0x08009c15
 8009bbc:	08009cb1 	.word	0x08009cb1
 8009bc0:	08009c3d 	.word	0x08009c3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bc4:	4b93      	ldr	r3, [pc, #588]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bd0:	d108      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 f810 	bl	800abfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009be0:	f000 bd45 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be8:	f000 bd41 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bec:	4b89      	ldr	r3, [pc, #548]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bf8:	d108      	bne.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bfa:	f107 0318 	add.w	r3, r7, #24
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 fd54 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c08:	f000 bd31 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c10:	f000 bd2d 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c14:	4b7f      	ldr	r3, [pc, #508]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c20:	d108      	bne.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c22:	f107 030c 	add.w	r3, r7, #12
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 fe94 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c30:	f000 bd1d 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c38:	f000 bd19 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c3c:	4b75      	ldr	r3, [pc, #468]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c44:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c46:	4b73      	ldr	r3, [pc, #460]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0304 	and.w	r3, r3, #4
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	d10c      	bne.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d109      	bne.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c58:	4b6e      	ldr	r3, [pc, #440]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	08db      	lsrs	r3, r3, #3
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	4a6d      	ldr	r2, [pc, #436]	@ (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c64:	fa22 f303 	lsr.w	r3, r2, r3
 8009c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c6a:	e01f      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c6c:	4b69      	ldr	r3, [pc, #420]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c78:	d106      	bne.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c80:	d102      	bne.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c82:	4b66      	ldr	r3, [pc, #408]	@ (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c86:	e011      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c88:	4b62      	ldr	r3, [pc, #392]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c94:	d106      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c9c:	d102      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c9e:	4b60      	ldr	r3, [pc, #384]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ca2:	e003      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ca8:	f000 bce1 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cac:	f000 bcdf 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cb0:	4b5c      	ldr	r3, [pc, #368]	@ (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb4:	f000 bcdb 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cbc:	f000 bcd7 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009cc8:	430b      	orrs	r3, r1
 8009cca:	f040 80ad 	bne.w	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009cce:	4b51      	ldr	r3, [pc, #324]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cd2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009cd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cde:	d056      	beq.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce6:	f200 8090 	bhi.w	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cee:	f000 8088 	beq.w	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cf6:	f200 8088 	bhi.w	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfc:	2b80      	cmp	r3, #128	@ 0x80
 8009cfe:	d032      	beq.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	2b80      	cmp	r3, #128	@ 0x80
 8009d04:	f200 8081 	bhi.w	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	2b40      	cmp	r3, #64	@ 0x40
 8009d12:	d014      	beq.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009d14:	e079      	b.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d16:	4b3f      	ldr	r3, [pc, #252]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d22:	d108      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 ff67 	bl	800abfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d32:	f000 bc9c 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d3a:	f000 bc98 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d3e:	4b35      	ldr	r3, [pc, #212]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d4a:	d108      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d4c:	f107 0318 	add.w	r3, r7, #24
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fcab 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d5a:	f000 bc88 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d62:	f000 bc84 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d66:	4b2b      	ldr	r3, [pc, #172]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d72:	d108      	bne.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 fdeb 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d82:	f000 bc74 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d8a:	f000 bc70 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d8e:	4b21      	ldr	r3, [pc, #132]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d98:	4b1e      	ldr	r3, [pc, #120]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0304 	and.w	r3, r3, #4
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d10c      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d109      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009daa:	4b1a      	ldr	r3, [pc, #104]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	08db      	lsrs	r3, r3, #3
 8009db0:	f003 0303 	and.w	r3, r3, #3
 8009db4:	4a18      	ldr	r2, [pc, #96]	@ (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009db6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dbc:	e01f      	b.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dbe:	4b15      	ldr	r3, [pc, #84]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dca:	d106      	bne.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dd2:	d102      	bne.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009dd4:	4b11      	ldr	r3, [pc, #68]	@ (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dd8:	e011      	b.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dda:	4b0e      	ldr	r3, [pc, #56]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009de6:	d106      	bne.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dee:	d102      	bne.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009df0:	4b0b      	ldr	r3, [pc, #44]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009df4:	e003      	b.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009dfa:	f000 bc38 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009dfe:	f000 bc36 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e02:	4b08      	ldr	r3, [pc, #32]	@ (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e06:	f000 bc32 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0e:	f000 bc2e 	b.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e12:	bf00      	nop
 8009e14:	58024400 	.word	0x58024400
 8009e18:	03d09000 	.word	0x03d09000
 8009e1c:	003d0900 	.word	0x003d0900
 8009e20:	017d7840 	.word	0x017d7840
 8009e24:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e2c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009e30:	430b      	orrs	r3, r1
 8009e32:	f040 809c 	bne.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009e36:	4b9e      	ldr	r3, [pc, #632]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e3a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009e3e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e46:	d054      	beq.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e4e:	f200 808b 	bhi.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e58:	f000 8083 	beq.w	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e62:	f200 8081 	bhi.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e6c:	d02f      	beq.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e74:	d878      	bhi.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d004      	beq.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e82:	d012      	beq.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009e84:	e070      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e86:	4b8a      	ldr	r3, [pc, #552]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e92:	d107      	bne.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 feaf 	bl	800abfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ea2:	e3e4      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea8:	e3e1      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eaa:	4b81      	ldr	r3, [pc, #516]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eb6:	d107      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eb8:	f107 0318 	add.w	r3, r7, #24
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 fbf5 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ec6:	e3d2      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ecc:	e3cf      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ece:	4b78      	ldr	r3, [pc, #480]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eda:	d107      	bne.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009edc:	f107 030c 	add.w	r3, r7, #12
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fd37 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eea:	e3c0      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef0:	e3bd      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ef2:	4b6f      	ldr	r3, [pc, #444]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ef6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009efa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009efc:	4b6c      	ldr	r3, [pc, #432]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d10c      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d109      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f0e:	4b68      	ldr	r3, [pc, #416]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	08db      	lsrs	r3, r3, #3
 8009f14:	f003 0303 	and.w	r3, r3, #3
 8009f18:	4a66      	ldr	r2, [pc, #408]	@ (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f20:	e01e      	b.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f22:	4b63      	ldr	r3, [pc, #396]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f2e:	d106      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f36:	d102      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f38:	4b5f      	ldr	r3, [pc, #380]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f3c:	e010      	b.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f3e:	4b5c      	ldr	r3, [pc, #368]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f4a:	d106      	bne.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f52:	d102      	bne.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f54:	4b59      	ldr	r3, [pc, #356]	@ (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f58:	e002      	b.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f5e:	e386      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f60:	e385      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f62:	4b57      	ldr	r3, [pc, #348]	@ (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f66:	e382      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6c:	e37f      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f72:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009f76:	430b      	orrs	r3, r1
 8009f78:	f040 80a7 	bne.w	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009f7c:	4b4c      	ldr	r3, [pc, #304]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f80:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009f84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f8c:	d055      	beq.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f94:	f200 8096 	bhi.w	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f9e:	f000 8084 	beq.w	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009fa8:	f200 808c 	bhi.w	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fb2:	d030      	beq.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fba:	f200 8083 	bhi.w	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d004      	beq.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fca:	d012      	beq.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009fcc:	e07a      	b.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fce:	4b38      	ldr	r3, [pc, #224]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fda:	d107      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 fe0b 	bl	800abfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fea:	e340      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff0:	e33d      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ff2:	4b2f      	ldr	r3, [pc, #188]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ffa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ffe:	d107      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a000:	f107 0318 	add.w	r3, r7, #24
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fb51 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a00e:	e32e      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a014:	e32b      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a016:	4b26      	ldr	r3, [pc, #152]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a01e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a022:	d107      	bne.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a024:	f107 030c 	add.w	r3, r7, #12
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fc93 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a032:	e31c      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a038:	e319      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a03a:	4b1d      	ldr	r3, [pc, #116]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a03c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a03e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a042:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a044:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d10c      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a052:	2b00      	cmp	r3, #0
 800a054:	d109      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a056:	4b16      	ldr	r3, [pc, #88]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	08db      	lsrs	r3, r3, #3
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	4a14      	ldr	r2, [pc, #80]	@ (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a062:	fa22 f303 	lsr.w	r3, r2, r3
 800a066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a068:	e01e      	b.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a06a:	4b11      	ldr	r3, [pc, #68]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a076:	d106      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a07e:	d102      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a080:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a084:	e010      	b.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a086:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a08e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a092:	d106      	bne.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a09a:	d102      	bne.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a09c:	4b07      	ldr	r3, [pc, #28]	@ (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0a0:	e002      	b.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0a6:	e2e2      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0a8:	e2e1      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0aa:	4b05      	ldr	r3, [pc, #20]	@ (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ae:	e2de      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0b0:	58024400 	.word	0x58024400
 800a0b4:	03d09000 	.word	0x03d09000
 800a0b8:	003d0900 	.word	0x003d0900
 800a0bc:	017d7840 	.word	0x017d7840
 800a0c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c8:	e2d1      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a0ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	f040 809c 	bne.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a0d8:	4b93      	ldr	r3, [pc, #588]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a0e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0e8:	d054      	beq.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0f0:	f200 808b 	bhi.w	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0fa:	f000 8083 	beq.w	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a104:	f200 8081 	bhi.w	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a10e:	d02f      	beq.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a116:	d878      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d004      	beq.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a124:	d012      	beq.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a126:	e070      	b.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a128:	4b7f      	ldr	r3, [pc, #508]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a130:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a134:	d107      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 fd5e 	bl	800abfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a144:	e293      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a14a:	e290      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a14c:	4b76      	ldr	r3, [pc, #472]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a154:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a158:	d107      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a15a:	f107 0318 	add.w	r3, r7, #24
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 faa4 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a168:	e281      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16e:	e27e      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a170:	4b6d      	ldr	r3, [pc, #436]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a17c:	d107      	bne.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17e:	f107 030c 	add.w	r3, r7, #12
 800a182:	4618      	mov	r0, r3
 800a184:	f000 fbe6 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a18c:	e26f      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a192:	e26c      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a194:	4b64      	ldr	r3, [pc, #400]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a198:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a19c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a19e:	4b62      	ldr	r3, [pc, #392]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d10c      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d109      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1b0:	4b5d      	ldr	r3, [pc, #372]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	08db      	lsrs	r3, r3, #3
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	4a5c      	ldr	r2, [pc, #368]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a1bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1c2:	e01e      	b.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1c4:	4b58      	ldr	r3, [pc, #352]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1d0:	d106      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1d8:	d102      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1da:	4b55      	ldr	r3, [pc, #340]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1de:	e010      	b.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1e0:	4b51      	ldr	r3, [pc, #324]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ec:	d106      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1f4:	d102      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1f6:	4b4f      	ldr	r3, [pc, #316]	@ (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1fa:	e002      	b.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a200:	e235      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a202:	e234      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a204:	4b4c      	ldr	r3, [pc, #304]	@ (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a208:	e231      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a20e:	e22e      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a214:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a218:	430b      	orrs	r3, r1
 800a21a:	f040 808f 	bne.w	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a21e:	4b42      	ldr	r3, [pc, #264]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a222:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a226:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a22e:	d06b      	beq.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a232:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a236:	d874      	bhi.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a23e:	d056      	beq.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a242:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a246:	d86c      	bhi.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a24e:	d03b      	beq.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a256:	d864      	bhi.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a25e:	d021      	beq.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a266:	d85c      	bhi.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d004      	beq.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a274:	d004      	beq.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a276:	e054      	b.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a278:	f7fe fa4c 	bl	8008714 <HAL_RCC_GetPCLK1Freq>
 800a27c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a27e:	e1f6      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a280:	4b29      	ldr	r3, [pc, #164]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a288:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a28c:	d107      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a28e:	f107 0318 	add.w	r3, r7, #24
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fa0a 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a29c:	e1e7      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a2:	e1e4      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2a4:	4b20      	ldr	r3, [pc, #128]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2b0:	d107      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b2:	f107 030c 	add.w	r3, r7, #12
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 fb4c 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c0:	e1d5      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c6:	e1d2      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2c8:	4b17      	ldr	r3, [pc, #92]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0304 	and.w	r3, r3, #4
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d109      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2d4:	4b14      	ldr	r3, [pc, #80]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	08db      	lsrs	r3, r3, #3
 800a2da:	f003 0303 	and.w	r3, r3, #3
 800a2de:	4a13      	ldr	r2, [pc, #76]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2e6:	e1c2      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ec:	e1bf      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a2ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2fa:	d102      	bne.n	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a2fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a300:	e1b5      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a306:	e1b2      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a308:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a310:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a314:	d102      	bne.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a316:	4b07      	ldr	r3, [pc, #28]	@ (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a31a:	e1a8      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a31c:	2300      	movs	r3, #0
 800a31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a320:	e1a5      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a326:	e1a2      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a328:	58024400 	.word	0x58024400
 800a32c:	03d09000 	.word	0x03d09000
 800a330:	003d0900 	.word	0x003d0900
 800a334:	017d7840 	.word	0x017d7840
 800a338:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a340:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a344:	430b      	orrs	r3, r1
 800a346:	d173      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a348:	4b9c      	ldr	r3, [pc, #624]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a34a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a34c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a350:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a358:	d02f      	beq.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a360:	d863      	bhi.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	2b00      	cmp	r3, #0
 800a366:	d004      	beq.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a36e:	d012      	beq.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a370:	e05b      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a372:	4b92      	ldr	r3, [pc, #584]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a37a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a37e:	d107      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a380:	f107 0318 	add.w	r3, r7, #24
 800a384:	4618      	mov	r0, r3
 800a386:	f000 f991 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38e:	e16e      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a394:	e16b      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a396:	4b89      	ldr	r3, [pc, #548]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a39e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a2:	d107      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3a4:	f107 030c 	add.w	r3, r7, #12
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fad3 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b2:	e15c      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b8:	e159      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3ba:	4b80      	ldr	r3, [pc, #512]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3c4:	4b7d      	ldr	r3, [pc, #500]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d10c      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d109      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3d6:	4b79      	ldr	r3, [pc, #484]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	08db      	lsrs	r3, r3, #3
 800a3dc:	f003 0303 	and.w	r3, r3, #3
 800a3e0:	4a77      	ldr	r2, [pc, #476]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e8:	e01e      	b.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3ea:	4b74      	ldr	r3, [pc, #464]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f6:	d106      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3fe:	d102      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a400:	4b70      	ldr	r3, [pc, #448]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a404:	e010      	b.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a406:	4b6d      	ldr	r3, [pc, #436]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a40e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a412:	d106      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a41a:	d102      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a41c:	4b6a      	ldr	r3, [pc, #424]	@ (800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a420:	e002      	b.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a426:	e122      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a428:	e121      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a42e:	e11e      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a434:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a438:	430b      	orrs	r3, r1
 800a43a:	d133      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a43c:	4b5f      	ldr	r3, [pc, #380]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a43e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a444:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d004      	beq.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a452:	d012      	beq.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a454:	e023      	b.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a456:	4b59      	ldr	r3, [pc, #356]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a45e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a462:	d107      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 fbc7 	bl	800abfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a472:	e0fc      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a478:	e0f9      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a47a:	4b50      	ldr	r3, [pc, #320]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a486:	d107      	bne.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a488:	f107 0318 	add.w	r3, r7, #24
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 f90d 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a496:	e0ea      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49c:	e0e7      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a2:	e0e4      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a4a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	f040 808d 	bne.w	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a4b2:	4b42      	ldr	r3, [pc, #264]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a4ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4c2:	d06b      	beq.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4ca:	d874      	bhi.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d2:	d056      	beq.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4da:	d86c      	bhi.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4e2:	d03b      	beq.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4ea:	d864      	bhi.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f2:	d021      	beq.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4fa:	d85c      	bhi.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d004      	beq.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a508:	d004      	beq.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a50a:	e054      	b.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a50c:	f000 f8b8 	bl	800a680 <HAL_RCCEx_GetD3PCLK1Freq>
 800a510:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a512:	e0ac      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a514:	4b29      	ldr	r3, [pc, #164]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a51c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a520:	d107      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a522:	f107 0318 	add.w	r3, r7, #24
 800a526:	4618      	mov	r0, r3
 800a528:	f000 f8c0 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a530:	e09d      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a536:	e09a      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a538:	4b20      	ldr	r3, [pc, #128]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a544:	d107      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a546:	f107 030c 	add.w	r3, r7, #12
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fa02 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a554:	e08b      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55a:	e088      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a55c:	4b17      	ldr	r3, [pc, #92]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b04      	cmp	r3, #4
 800a566:	d109      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a568:	4b14      	ldr	r3, [pc, #80]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	08db      	lsrs	r3, r3, #3
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	4a13      	ldr	r2, [pc, #76]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a574:	fa22 f303 	lsr.w	r3, r2, r3
 800a578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a57a:	e078      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a580:	e075      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a582:	4b0e      	ldr	r3, [pc, #56]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a58a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a58e:	d102      	bne.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a590:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a594:	e06b      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a59a:	e068      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a59c:	4b07      	ldr	r3, [pc, #28]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5a8:	d102      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a5aa:	4b07      	ldr	r3, [pc, #28]	@ (800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ae:	e05e      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b4:	e05b      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ba:	e058      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5bc:	58024400 	.word	0x58024400
 800a5c0:	03d09000 	.word	0x03d09000
 800a5c4:	003d0900 	.word	0x003d0900
 800a5c8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5d0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	d148      	bne.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a5d8:	4b27      	ldr	r3, [pc, #156]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5e8:	d02a      	beq.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5f0:	d838      	bhi.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d004      	beq.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5fe:	d00d      	beq.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a600:	e030      	b.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a602:	4b1d      	ldr	r3, [pc, #116]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a60a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a60e:	d102      	bne.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a610:	4b1a      	ldr	r3, [pc, #104]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a614:	e02b      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a61a:	e028      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61c:	4b16      	ldr	r3, [pc, #88]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a628:	d107      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a62a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 fae4 	bl	800abfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a638:	e019      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63e:	e016      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a640:	4b0d      	ldr	r3, [pc, #52]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a64c:	d107      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a64e:	f107 0318 	add.w	r3, r7, #24
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f82a 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a65c:	e007      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a662:	e004      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a668:	e001      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a670:	4618      	mov	r0, r3
 800a672:	3740      	adds	r7, #64	@ 0x40
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	58024400 	.word	0x58024400
 800a67c:	017d7840 	.word	0x017d7840

0800a680 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a684:	f7fe f816 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 800a688:	4602      	mov	r2, r0
 800a68a:	4b06      	ldr	r3, [pc, #24]	@ (800a6a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	091b      	lsrs	r3, r3, #4
 800a690:	f003 0307 	and.w	r3, r3, #7
 800a694:	4904      	ldr	r1, [pc, #16]	@ (800a6a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a696:	5ccb      	ldrb	r3, [r1, r3]
 800a698:	f003 031f 	and.w	r3, r3, #31
 800a69c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	58024400 	.word	0x58024400
 800a6a8:	0801152c 	.word	0x0801152c

0800a6ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b089      	sub	sp, #36	@ 0x24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6b4:	4ba1      	ldr	r3, [pc, #644]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b8:	f003 0303 	and.w	r3, r3, #3
 800a6bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a6be:	4b9f      	ldr	r3, [pc, #636]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c2:	0b1b      	lsrs	r3, r3, #12
 800a6c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a6c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a6ca:	4b9c      	ldr	r3, [pc, #624]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ce:	091b      	lsrs	r3, r3, #4
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a6d6:	4b99      	ldr	r3, [pc, #612]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6da:	08db      	lsrs	r3, r3, #3
 800a6dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	fb02 f303 	mul.w	r3, r2, r3
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 8111 	beq.w	800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	f000 8083 	beq.w	800a808 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	2b02      	cmp	r3, #2
 800a706:	f200 80a1 	bhi.w	800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d056      	beq.n	800a7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a716:	e099      	b.n	800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a718:	4b88      	ldr	r3, [pc, #544]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b00      	cmp	r3, #0
 800a722:	d02d      	beq.n	800a780 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a724:	4b85      	ldr	r3, [pc, #532]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	08db      	lsrs	r3, r3, #3
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	4a84      	ldr	r2, [pc, #528]	@ (800a940 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a730:	fa22 f303 	lsr.w	r3, r2, r3
 800a734:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	ee07 3a90 	vmov	s15, r3
 800a73c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	ee07 3a90 	vmov	s15, r3
 800a746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a74e:	4b7b      	ldr	r3, [pc, #492]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a762:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a77a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a77e:	e087      	b.n	800a890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	ee07 3a90 	vmov	s15, r3
 800a786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a948 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a792:	4b6a      	ldr	r3, [pc, #424]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a79a:	ee07 3a90 	vmov	s15, r3
 800a79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7c2:	e065      	b.n	800a890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d6:	4b59      	ldr	r3, [pc, #356]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a806:	e043      	b.n	800a890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a812:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a81a:	4b48      	ldr	r3, [pc, #288]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a822:	ee07 3a90 	vmov	s15, r3
 800a826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a82e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a83a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a84a:	e021      	b.n	800a890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	ee07 3a90 	vmov	s15, r3
 800a852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a856:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a85e:	4b37      	ldr	r3, [pc, #220]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a866:	ee07 3a90 	vmov	s15, r3
 800a86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a872:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a87e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a88a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a88e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a890:	4b2a      	ldr	r3, [pc, #168]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a894:	0a5b      	lsrs	r3, r3, #9
 800a896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b6:	ee17 2a90 	vmov	r2, s15
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a8be:	4b1f      	ldr	r3, [pc, #124]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c2:	0c1b      	lsrs	r3, r3, #16
 800a8c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8c8:	ee07 3a90 	vmov	s15, r3
 800a8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e4:	ee17 2a90 	vmov	r2, s15
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a8ec:	4b13      	ldr	r3, [pc, #76]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f0:	0e1b      	lsrs	r3, r3, #24
 800a8f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a902:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a906:	edd7 6a07 	vldr	s13, [r7, #28]
 800a90a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a90e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a912:	ee17 2a90 	vmov	r2, s15
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a91a:	e008      	b.n	800a92e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	609a      	str	r2, [r3, #8]
}
 800a92e:	bf00      	nop
 800a930:	3724      	adds	r7, #36	@ 0x24
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	58024400 	.word	0x58024400
 800a940:	03d09000 	.word	0x03d09000
 800a944:	46000000 	.word	0x46000000
 800a948:	4c742400 	.word	0x4c742400
 800a94c:	4a742400 	.word	0x4a742400
 800a950:	4bbebc20 	.word	0x4bbebc20

0800a954 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a954:	b480      	push	{r7}
 800a956:	b089      	sub	sp, #36	@ 0x24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a95c:	4ba1      	ldr	r3, [pc, #644]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a960:	f003 0303 	and.w	r3, r3, #3
 800a964:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a966:	4b9f      	ldr	r3, [pc, #636]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96a:	0d1b      	lsrs	r3, r3, #20
 800a96c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a970:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a972:	4b9c      	ldr	r3, [pc, #624]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a976:	0a1b      	lsrs	r3, r3, #8
 800a978:	f003 0301 	and.w	r3, r3, #1
 800a97c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a97e:	4b99      	ldr	r3, [pc, #612]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a982:	08db      	lsrs	r3, r3, #3
 800a984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	fb02 f303 	mul.w	r3, r2, r3
 800a98e:	ee07 3a90 	vmov	s15, r3
 800a992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 8111 	beq.w	800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	f000 8083 	beq.w	800aab0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	f200 80a1 	bhi.w	800aaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d056      	beq.n	800aa6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a9be:	e099      	b.n	800aaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9c0:	4b88      	ldr	r3, [pc, #544]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0320 	and.w	r3, r3, #32
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d02d      	beq.n	800aa28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9cc:	4b85      	ldr	r3, [pc, #532]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	08db      	lsrs	r3, r3, #3
 800a9d2:	f003 0303 	and.w	r3, r3, #3
 800a9d6:	4a84      	ldr	r2, [pc, #528]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	ee07 3a90 	vmov	s15, r3
 800a9e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f6:	4b7b      	ldr	r3, [pc, #492]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fe:	ee07 3a90 	vmov	s15, r3
 800aa02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa06:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800abec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa26:	e087      	b.n	800ab38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800abf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aa36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3a:	4b6a      	ldr	r3, [pc, #424]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800abec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa6a:	e065      	b.n	800ab38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7e:	4b59      	ldr	r3, [pc, #356]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800abec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaae:	e043      	b.n	800ab38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac2:	4b48      	ldr	r3, [pc, #288]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800abec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaf2:	e021      	b.n	800ab38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab06:	4b37      	ldr	r3, [pc, #220]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800abec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ab38:	4b2a      	ldr	r3, [pc, #168]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab3c:	0a5b      	lsrs	r3, r3, #9
 800ab3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab5e:	ee17 2a90 	vmov	r2, s15
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ab66:	4b1f      	ldr	r3, [pc, #124]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6a:	0c1b      	lsrs	r3, r3, #16
 800ab6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab70:	ee07 3a90 	vmov	s15, r3
 800ab74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab8c:	ee17 2a90 	vmov	r2, s15
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ab94:	4b13      	ldr	r3, [pc, #76]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab98:	0e1b      	lsrs	r3, r3, #24
 800ab9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab9e:	ee07 3a90 	vmov	s15, r3
 800aba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abae:	edd7 6a07 	vldr	s13, [r7, #28]
 800abb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abba:	ee17 2a90 	vmov	r2, s15
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800abc2:	e008      	b.n	800abd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	609a      	str	r2, [r3, #8]
}
 800abd6:	bf00      	nop
 800abd8:	3724      	adds	r7, #36	@ 0x24
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	58024400 	.word	0x58024400
 800abe8:	03d09000 	.word	0x03d09000
 800abec:	46000000 	.word	0x46000000
 800abf0:	4c742400 	.word	0x4c742400
 800abf4:	4a742400 	.word	0x4a742400
 800abf8:	4bbebc20 	.word	0x4bbebc20

0800abfc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b089      	sub	sp, #36	@ 0x24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac04:	4ba0      	ldr	r3, [pc, #640]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ac0e:	4b9e      	ldr	r3, [pc, #632]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac12:	091b      	lsrs	r3, r3, #4
 800ac14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ac1a:	4b9b      	ldr	r3, [pc, #620]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac24:	4b98      	ldr	r3, [pc, #608]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac28:	08db      	lsrs	r3, r3, #3
 800ac2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	fb02 f303 	mul.w	r3, r2, r3
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 8111 	beq.w	800ae6a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	f000 8083 	beq.w	800ad56 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	f200 80a1 	bhi.w	800ad9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d056      	beq.n	800ad12 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ac64:	e099      	b.n	800ad9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac66:	4b88      	ldr	r3, [pc, #544]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d02d      	beq.n	800acce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac72:	4b85      	ldr	r3, [pc, #532]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	08db      	lsrs	r3, r3, #3
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	4a83      	ldr	r2, [pc, #524]	@ (800ae8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ac7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	ee07 3a90 	vmov	s15, r3
 800ac94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9c:	4b7a      	ldr	r3, [pc, #488]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acac:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ae90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800accc:	e087      	b.n	800adde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	ee07 3a90 	vmov	s15, r3
 800acd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ae94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800acdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace0:	4b69      	ldr	r3, [pc, #420]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ace2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ae90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad10:	e065      	b.n	800adde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	ee07 3a90 	vmov	s15, r3
 800ad18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ae98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ad20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad24:	4b58      	ldr	r3, [pc, #352]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad34:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad38:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ae90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad54:	e043      	b.n	800adde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	ee07 3a90 	vmov	s15, r3
 800ad5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad60:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ae9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ad64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad68:	4b47      	ldr	r3, [pc, #284]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad70:	ee07 3a90 	vmov	s15, r3
 800ad74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad78:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad7c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ae90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad98:	e021      	b.n	800adde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	ee07 3a90 	vmov	s15, r3
 800ada0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ae94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ada8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adac:	4b36      	ldr	r3, [pc, #216]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb4:	ee07 3a90 	vmov	s15, r3
 800adb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adbc:	ed97 6a03 	vldr	s12, [r7, #12]
 800adc0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ae90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800adc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800add0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800addc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800adde:	4b2a      	ldr	r3, [pc, #168]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ade2:	0a5b      	lsrs	r3, r3, #9
 800ade4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ade8:	ee07 3a90 	vmov	s15, r3
 800adec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800adfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae04:	ee17 2a90 	vmov	r2, s15
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ae0c:	4b1e      	ldr	r3, [pc, #120]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae10:	0c1b      	lsrs	r3, r3, #16
 800ae12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae32:	ee17 2a90 	vmov	r2, s15
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ae3a:	4b13      	ldr	r3, [pc, #76]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3e:	0e1b      	lsrs	r3, r3, #24
 800ae40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae44:	ee07 3a90 	vmov	s15, r3
 800ae48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae60:	ee17 2a90 	vmov	r2, s15
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ae68:	e008      	b.n	800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	609a      	str	r2, [r3, #8]
}
 800ae7c:	bf00      	nop
 800ae7e:	3724      	adds	r7, #36	@ 0x24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	58024400 	.word	0x58024400
 800ae8c:	03d09000 	.word	0x03d09000
 800ae90:	46000000 	.word	0x46000000
 800ae94:	4c742400 	.word	0x4c742400
 800ae98:	4a742400 	.word	0x4a742400
 800ae9c:	4bbebc20 	.word	0x4bbebc20

0800aea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aeae:	4b53      	ldr	r3, [pc, #332]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800aeb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb2:	f003 0303 	and.w	r3, r3, #3
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d101      	bne.n	800aebe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e099      	b.n	800aff2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aebe:	4b4f      	ldr	r3, [pc, #316]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a4e      	ldr	r2, [pc, #312]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800aec4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeca:	f7f6 fc81 	bl	80017d0 <HAL_GetTick>
 800aece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aed0:	e008      	b.n	800aee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aed2:	f7f6 fc7d 	bl	80017d0 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d901      	bls.n	800aee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e086      	b.n	800aff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aee4:	4b45      	ldr	r3, [pc, #276]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1f0      	bne.n	800aed2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aef0:	4b42      	ldr	r3, [pc, #264]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800aef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	031b      	lsls	r3, r3, #12
 800aefe:	493f      	ldr	r1, [pc, #252]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af00:	4313      	orrs	r3, r2
 800af02:	628b      	str	r3, [r1, #40]	@ 0x28
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	3b01      	subs	r3, #1
 800af0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	3b01      	subs	r3, #1
 800af14:	025b      	lsls	r3, r3, #9
 800af16:	b29b      	uxth	r3, r3
 800af18:	431a      	orrs	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	3b01      	subs	r3, #1
 800af20:	041b      	lsls	r3, r3, #16
 800af22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af26:	431a      	orrs	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	061b      	lsls	r3, r3, #24
 800af30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af34:	4931      	ldr	r1, [pc, #196]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af36:	4313      	orrs	r3, r2
 800af38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af3a:	4b30      	ldr	r3, [pc, #192]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	492d      	ldr	r1, [pc, #180]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af4c:	4b2b      	ldr	r3, [pc, #172]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af50:	f023 0220 	bic.w	r2, r3, #32
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	4928      	ldr	r1, [pc, #160]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af5a:	4313      	orrs	r3, r2
 800af5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af5e:	4b27      	ldr	r3, [pc, #156]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af62:	4a26      	ldr	r2, [pc, #152]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af64:	f023 0310 	bic.w	r3, r3, #16
 800af68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af6a:	4b24      	ldr	r3, [pc, #144]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af6e:	4b24      	ldr	r3, [pc, #144]	@ (800b000 <RCCEx_PLL2_Config+0x160>)
 800af70:	4013      	ands	r3, r2
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	69d2      	ldr	r2, [r2, #28]
 800af76:	00d2      	lsls	r2, r2, #3
 800af78:	4920      	ldr	r1, [pc, #128]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af7a:	4313      	orrs	r3, r2
 800af7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af7e:	4b1f      	ldr	r3, [pc, #124]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af82:	4a1e      	ldr	r2, [pc, #120]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af84:	f043 0310 	orr.w	r3, r3, #16
 800af88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d106      	bne.n	800af9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af90:	4b1a      	ldr	r3, [pc, #104]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af94:	4a19      	ldr	r2, [pc, #100]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800af96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af9c:	e00f      	b.n	800afbe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d106      	bne.n	800afb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800afa4:	4b15      	ldr	r3, [pc, #84]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800afa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa8:	4a14      	ldr	r2, [pc, #80]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800afaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afb0:	e005      	b.n	800afbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800afb2:	4b12      	ldr	r3, [pc, #72]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800afb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb6:	4a11      	ldr	r2, [pc, #68]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800afb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800afbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800afbe:	4b0f      	ldr	r3, [pc, #60]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a0e      	ldr	r2, [pc, #56]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800afc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800afc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afca:	f7f6 fc01 	bl	80017d0 <HAL_GetTick>
 800afce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afd0:	e008      	b.n	800afe4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800afd2:	f7f6 fbfd 	bl	80017d0 <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d901      	bls.n	800afe4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e006      	b.n	800aff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afe4:	4b05      	ldr	r3, [pc, #20]	@ (800affc <RCCEx_PLL2_Config+0x15c>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d0f0      	beq.n	800afd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	58024400 	.word	0x58024400
 800b000:	ffff0007 	.word	0xffff0007

0800b004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b012:	4b53      	ldr	r3, [pc, #332]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d101      	bne.n	800b022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e099      	b.n	800b156 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b022:	4b4f      	ldr	r3, [pc, #316]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a4e      	ldr	r2, [pc, #312]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b02c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b02e:	f7f6 fbcf 	bl	80017d0 <HAL_GetTick>
 800b032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b034:	e008      	b.n	800b048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b036:	f7f6 fbcb 	bl	80017d0 <HAL_GetTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	2b02      	cmp	r3, #2
 800b042:	d901      	bls.n	800b048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e086      	b.n	800b156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b048:	4b45      	ldr	r3, [pc, #276]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1f0      	bne.n	800b036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b054:	4b42      	ldr	r3, [pc, #264]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b058:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	051b      	lsls	r3, r3, #20
 800b062:	493f      	ldr	r1, [pc, #252]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b064:	4313      	orrs	r3, r2
 800b066:	628b      	str	r3, [r1, #40]	@ 0x28
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	3b01      	subs	r3, #1
 800b06e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	3b01      	subs	r3, #1
 800b078:	025b      	lsls	r3, r3, #9
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	431a      	orrs	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	3b01      	subs	r3, #1
 800b084:	041b      	lsls	r3, r3, #16
 800b086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b08a:	431a      	orrs	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	3b01      	subs	r3, #1
 800b092:	061b      	lsls	r3, r3, #24
 800b094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b098:	4931      	ldr	r1, [pc, #196]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b09e:	4b30      	ldr	r3, [pc, #192]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	492d      	ldr	r1, [pc, #180]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b0b0:	4b2b      	ldr	r3, [pc, #172]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	4928      	ldr	r1, [pc, #160]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b0c2:	4b27      	ldr	r3, [pc, #156]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c6:	4a26      	ldr	r2, [pc, #152]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b0ce:	4b24      	ldr	r3, [pc, #144]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0d2:	4b24      	ldr	r3, [pc, #144]	@ (800b164 <RCCEx_PLL3_Config+0x160>)
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	69d2      	ldr	r2, [r2, #28]
 800b0da:	00d2      	lsls	r2, r2, #3
 800b0dc:	4920      	ldr	r1, [pc, #128]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b0e2:	4b1f      	ldr	r3, [pc, #124]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e6:	4a1e      	ldr	r2, [pc, #120]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d106      	bne.n	800b102 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f8:	4a19      	ldr	r2, [pc, #100]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b0fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b0fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b100:	e00f      	b.n	800b122 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d106      	bne.n	800b116 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b108:	4b15      	ldr	r3, [pc, #84]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10c:	4a14      	ldr	r2, [pc, #80]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b10e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b112:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b114:	e005      	b.n	800b122 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b116:	4b12      	ldr	r3, [pc, #72]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11a:	4a11      	ldr	r2, [pc, #68]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b11c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b120:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b122:	4b0f      	ldr	r3, [pc, #60]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a0e      	ldr	r2, [pc, #56]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b12c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b12e:	f7f6 fb4f 	bl	80017d0 <HAL_GetTick>
 800b132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b134:	e008      	b.n	800b148 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b136:	f7f6 fb4b 	bl	80017d0 <HAL_GetTick>
 800b13a:	4602      	mov	r2, r0
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	2b02      	cmp	r3, #2
 800b142:	d901      	bls.n	800b148 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e006      	b.n	800b156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b148:	4b05      	ldr	r3, [pc, #20]	@ (800b160 <RCCEx_PLL3_Config+0x15c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d0f0      	beq.n	800b136 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	58024400 	.word	0x58024400
 800b164:	ffff0007 	.word	0xffff0007

0800b168 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e10f      	b.n	800b39a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a87      	ldr	r2, [pc, #540]	@ (800b3a4 <HAL_SPI_Init+0x23c>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d00f      	beq.n	800b1aa <HAL_SPI_Init+0x42>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a86      	ldr	r2, [pc, #536]	@ (800b3a8 <HAL_SPI_Init+0x240>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d00a      	beq.n	800b1aa <HAL_SPI_Init+0x42>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a84      	ldr	r2, [pc, #528]	@ (800b3ac <HAL_SPI_Init+0x244>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d005      	beq.n	800b1aa <HAL_SPI_Init+0x42>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	2b0f      	cmp	r3, #15
 800b1a4:	d901      	bls.n	800b1aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e0f7      	b.n	800b39a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f900 	bl	800b3b0 <SPI_GetPacketSize>
 800b1b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a7b      	ldr	r2, [pc, #492]	@ (800b3a4 <HAL_SPI_Init+0x23c>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00c      	beq.n	800b1d6 <HAL_SPI_Init+0x6e>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a79      	ldr	r2, [pc, #484]	@ (800b3a8 <HAL_SPI_Init+0x240>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d007      	beq.n	800b1d6 <HAL_SPI_Init+0x6e>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a78      	ldr	r2, [pc, #480]	@ (800b3ac <HAL_SPI_Init+0x244>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d002      	beq.n	800b1d6 <HAL_SPI_Init+0x6e>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b08      	cmp	r3, #8
 800b1d4:	d811      	bhi.n	800b1fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1da:	4a72      	ldr	r2, [pc, #456]	@ (800b3a4 <HAL_SPI_Init+0x23c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d009      	beq.n	800b1f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a70      	ldr	r2, [pc, #448]	@ (800b3a8 <HAL_SPI_Init+0x240>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d004      	beq.n	800b1f4 <HAL_SPI_Init+0x8c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a6f      	ldr	r2, [pc, #444]	@ (800b3ac <HAL_SPI_Init+0x244>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d104      	bne.n	800b1fe <HAL_SPI_Init+0x96>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b10      	cmp	r3, #16
 800b1f8:	d901      	bls.n	800b1fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e0cd      	b.n	800b39a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7f5 ffd2 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2202      	movs	r2, #2
 800b21c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0201 	bic.w	r2, r2, #1
 800b22e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b23a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b244:	d119      	bne.n	800b27a <HAL_SPI_Init+0x112>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b24e:	d103      	bne.n	800b258 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b254:	2b00      	cmp	r3, #0
 800b256:	d008      	beq.n	800b26a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10c      	bne.n	800b27a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b264:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b268:	d107      	bne.n	800b27a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b278:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00f      	beq.n	800b2a6 <HAL_SPI_Init+0x13e>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	2b06      	cmp	r3, #6
 800b28c:	d90b      	bls.n	800b2a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	e007      	b.n	800b2b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b2b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	69da      	ldr	r2, [r3, #28]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	431a      	orrs	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2c8:	ea42 0103 	orr.w	r1, r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e0:	431a      	orrs	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	431a      	orrs	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	431a      	orrs	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b30a:	431a      	orrs	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	431a      	orrs	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b316:	ea42 0103 	orr.w	r1, r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	430a      	orrs	r2, r1
 800b324:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d113      	bne.n	800b356 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b340:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b354:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f022 0201 	bic.w	r2, r2, #1
 800b364:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	40013000 	.word	0x40013000
 800b3a8:	40003800 	.word	0x40003800
 800b3ac:	40003c00 	.word	0x40003c00

0800b3b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3bc:	095b      	lsrs	r3, r3, #5
 800b3be:	3301      	adds	r3, #1
 800b3c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	3307      	adds	r3, #7
 800b3ce:	08db      	lsrs	r3, r3, #3
 800b3d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e049      	b.n	800b48c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b00      	cmp	r3, #0
 800b402:	d106      	bne.n	800b412 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7f5 ff3d 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2202      	movs	r2, #2
 800b416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3304      	adds	r3, #4
 800b422:	4619      	mov	r1, r3
 800b424:	4610      	mov	r0, r2
 800b426:	f000 f96f 	bl	800b708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	f003 0302 	and.w	r3, r3, #2
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d020      	beq.n	800b4f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d01b      	beq.n	800b4f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f06f 0202 	mvn.w	r2, #2
 800b4c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	f003 0303 	and.w	r3, r3, #3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f8f3 	bl	800b6ca <HAL_TIM_IC_CaptureCallback>
 800b4e4:	e005      	b.n	800b4f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f8e5 	bl	800b6b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f8f6 	bl	800b6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f003 0304 	and.w	r3, r3, #4
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d020      	beq.n	800b544 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f003 0304 	and.w	r3, r3, #4
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d01b      	beq.n	800b544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f06f 0204 	mvn.w	r2, #4
 800b514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2202      	movs	r2, #2
 800b51a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f8cd 	bl	800b6ca <HAL_TIM_IC_CaptureCallback>
 800b530:	e005      	b.n	800b53e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f8bf 	bl	800b6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f8d0 	bl	800b6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	f003 0308 	and.w	r3, r3, #8
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d020      	beq.n	800b590 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f003 0308 	and.w	r3, r3, #8
 800b554:	2b00      	cmp	r3, #0
 800b556:	d01b      	beq.n	800b590 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f06f 0208 	mvn.w	r2, #8
 800b560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2204      	movs	r2, #4
 800b566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f8a7 	bl	800b6ca <HAL_TIM_IC_CaptureCallback>
 800b57c:	e005      	b.n	800b58a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f899 	bl	800b6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f8aa 	bl	800b6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	f003 0310 	and.w	r3, r3, #16
 800b596:	2b00      	cmp	r3, #0
 800b598:	d020      	beq.n	800b5dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f003 0310 	and.w	r3, r3, #16
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d01b      	beq.n	800b5dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f06f 0210 	mvn.w	r2, #16
 800b5ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2208      	movs	r2, #8
 800b5b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d003      	beq.n	800b5ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f881 	bl	800b6ca <HAL_TIM_IC_CaptureCallback>
 800b5c8:	e005      	b.n	800b5d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f873 	bl	800b6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f884 	bl	800b6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00c      	beq.n	800b600 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d007      	beq.n	800b600 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f06f 0201 	mvn.w	r2, #1
 800b5f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f851 	bl	800b6a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b606:	2b00      	cmp	r3, #0
 800b608:	d104      	bne.n	800b614 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00c      	beq.n	800b62e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d007      	beq.n	800b62e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f917 	bl	800b85c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00c      	beq.n	800b652 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d007      	beq.n	800b652 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f90f 	bl	800b870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00c      	beq.n	800b676 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b662:	2b00      	cmp	r3, #0
 800b664:	d007      	beq.n	800b676 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b66e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f83e 	bl	800b6f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f003 0320 	and.w	r3, r3, #32
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00c      	beq.n	800b69a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f003 0320 	and.w	r3, r3, #32
 800b686:	2b00      	cmp	r3, #0
 800b688:	d007      	beq.n	800b69a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f06f 0220 	mvn.w	r2, #32
 800b692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f8d7 	bl	800b848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b69a:	bf00      	nop
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b6aa:	bf00      	nop
 800b6ac:	370c      	adds	r7, #12
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b083      	sub	sp, #12
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6be:	bf00      	nop
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6e6:	bf00      	nop
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b083      	sub	sp, #12
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
	...

0800b708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a43      	ldr	r2, [pc, #268]	@ (800b828 <TIM_Base_SetConfig+0x120>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d013      	beq.n	800b748 <TIM_Base_SetConfig+0x40>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b726:	d00f      	beq.n	800b748 <TIM_Base_SetConfig+0x40>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a40      	ldr	r2, [pc, #256]	@ (800b82c <TIM_Base_SetConfig+0x124>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d00b      	beq.n	800b748 <TIM_Base_SetConfig+0x40>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a3f      	ldr	r2, [pc, #252]	@ (800b830 <TIM_Base_SetConfig+0x128>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d007      	beq.n	800b748 <TIM_Base_SetConfig+0x40>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a3e      	ldr	r2, [pc, #248]	@ (800b834 <TIM_Base_SetConfig+0x12c>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d003      	beq.n	800b748 <TIM_Base_SetConfig+0x40>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a3d      	ldr	r2, [pc, #244]	@ (800b838 <TIM_Base_SetConfig+0x130>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d108      	bne.n	800b75a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b74e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a32      	ldr	r2, [pc, #200]	@ (800b828 <TIM_Base_SetConfig+0x120>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d01f      	beq.n	800b7a2 <TIM_Base_SetConfig+0x9a>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b768:	d01b      	beq.n	800b7a2 <TIM_Base_SetConfig+0x9a>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a2f      	ldr	r2, [pc, #188]	@ (800b82c <TIM_Base_SetConfig+0x124>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d017      	beq.n	800b7a2 <TIM_Base_SetConfig+0x9a>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a2e      	ldr	r2, [pc, #184]	@ (800b830 <TIM_Base_SetConfig+0x128>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d013      	beq.n	800b7a2 <TIM_Base_SetConfig+0x9a>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a2d      	ldr	r2, [pc, #180]	@ (800b834 <TIM_Base_SetConfig+0x12c>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d00f      	beq.n	800b7a2 <TIM_Base_SetConfig+0x9a>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a2c      	ldr	r2, [pc, #176]	@ (800b838 <TIM_Base_SetConfig+0x130>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d00b      	beq.n	800b7a2 <TIM_Base_SetConfig+0x9a>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a2b      	ldr	r2, [pc, #172]	@ (800b83c <TIM_Base_SetConfig+0x134>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d007      	beq.n	800b7a2 <TIM_Base_SetConfig+0x9a>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a2a      	ldr	r2, [pc, #168]	@ (800b840 <TIM_Base_SetConfig+0x138>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d003      	beq.n	800b7a2 <TIM_Base_SetConfig+0x9a>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a29      	ldr	r2, [pc, #164]	@ (800b844 <TIM_Base_SetConfig+0x13c>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d108      	bne.n	800b7b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	689a      	ldr	r2, [r3, #8]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a14      	ldr	r2, [pc, #80]	@ (800b828 <TIM_Base_SetConfig+0x120>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00f      	beq.n	800b7fa <TIM_Base_SetConfig+0xf2>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a16      	ldr	r2, [pc, #88]	@ (800b838 <TIM_Base_SetConfig+0x130>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00b      	beq.n	800b7fa <TIM_Base_SetConfig+0xf2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a15      	ldr	r2, [pc, #84]	@ (800b83c <TIM_Base_SetConfig+0x134>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d007      	beq.n	800b7fa <TIM_Base_SetConfig+0xf2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a14      	ldr	r2, [pc, #80]	@ (800b840 <TIM_Base_SetConfig+0x138>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d003      	beq.n	800b7fa <TIM_Base_SetConfig+0xf2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a13      	ldr	r2, [pc, #76]	@ (800b844 <TIM_Base_SetConfig+0x13c>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d103      	bne.n	800b802 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	691a      	ldr	r2, [r3, #16]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f043 0204 	orr.w	r2, r3, #4
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	601a      	str	r2, [r3, #0]
}
 800b81a:	bf00      	nop
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	40010000 	.word	0x40010000
 800b82c:	40000400 	.word	0x40000400
 800b830:	40000800 	.word	0x40000800
 800b834:	40000c00 	.word	0x40000c00
 800b838:	40010400 	.word	0x40010400
 800b83c:	40014000 	.word	0x40014000
 800b840:	40014400 	.word	0x40014400
 800b844:	40014800 	.word	0x40014800

0800b848 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e042      	b.n	800b91c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d106      	bne.n	800b8ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7f5 fd17 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2224      	movs	r2, #36	@ 0x24
 800b8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 0201 	bic.w	r2, r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d002      	beq.n	800b8d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fd90 	bl	800c3f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f825 	bl	800b924 <UART_SetConfig>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d101      	bne.n	800b8e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e01b      	b.n	800b91c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b8f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689a      	ldr	r2, [r3, #8]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f042 0201 	orr.w	r2, r2, #1
 800b912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fe0f 	bl	800c538 <UART_CheckIdleState>
 800b91a:	4603      	mov	r3, r0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b928:	b092      	sub	sp, #72	@ 0x48
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	689a      	ldr	r2, [r3, #8]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	431a      	orrs	r2, r3
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	431a      	orrs	r2, r3
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	69db      	ldr	r3, [r3, #28]
 800b948:	4313      	orrs	r3, r2
 800b94a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	4bbe      	ldr	r3, [pc, #760]	@ (800bc4c <UART_SetConfig+0x328>)
 800b954:	4013      	ands	r3, r2
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	6812      	ldr	r2, [r2, #0]
 800b95a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b95c:	430b      	orrs	r3, r1
 800b95e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	68da      	ldr	r2, [r3, #12]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	430a      	orrs	r2, r1
 800b974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4ab3      	ldr	r2, [pc, #716]	@ (800bc50 <UART_SetConfig+0x32c>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d004      	beq.n	800b990 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b98c:	4313      	orrs	r3, r2
 800b98e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689a      	ldr	r2, [r3, #8]
 800b996:	4baf      	ldr	r3, [pc, #700]	@ (800bc54 <UART_SetConfig+0x330>)
 800b998:	4013      	ands	r3, r2
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	6812      	ldr	r2, [r2, #0]
 800b99e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9aa:	f023 010f 	bic.w	r1, r3, #15
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4aa6      	ldr	r2, [pc, #664]	@ (800bc58 <UART_SetConfig+0x334>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d177      	bne.n	800bab4 <UART_SetConfig+0x190>
 800b9c4:	4ba5      	ldr	r3, [pc, #660]	@ (800bc5c <UART_SetConfig+0x338>)
 800b9c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9cc:	2b28      	cmp	r3, #40	@ 0x28
 800b9ce:	d86d      	bhi.n	800baac <UART_SetConfig+0x188>
 800b9d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d8 <UART_SetConfig+0xb4>)
 800b9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d6:	bf00      	nop
 800b9d8:	0800ba7d 	.word	0x0800ba7d
 800b9dc:	0800baad 	.word	0x0800baad
 800b9e0:	0800baad 	.word	0x0800baad
 800b9e4:	0800baad 	.word	0x0800baad
 800b9e8:	0800baad 	.word	0x0800baad
 800b9ec:	0800baad 	.word	0x0800baad
 800b9f0:	0800baad 	.word	0x0800baad
 800b9f4:	0800baad 	.word	0x0800baad
 800b9f8:	0800ba85 	.word	0x0800ba85
 800b9fc:	0800baad 	.word	0x0800baad
 800ba00:	0800baad 	.word	0x0800baad
 800ba04:	0800baad 	.word	0x0800baad
 800ba08:	0800baad 	.word	0x0800baad
 800ba0c:	0800baad 	.word	0x0800baad
 800ba10:	0800baad 	.word	0x0800baad
 800ba14:	0800baad 	.word	0x0800baad
 800ba18:	0800ba8d 	.word	0x0800ba8d
 800ba1c:	0800baad 	.word	0x0800baad
 800ba20:	0800baad 	.word	0x0800baad
 800ba24:	0800baad 	.word	0x0800baad
 800ba28:	0800baad 	.word	0x0800baad
 800ba2c:	0800baad 	.word	0x0800baad
 800ba30:	0800baad 	.word	0x0800baad
 800ba34:	0800baad 	.word	0x0800baad
 800ba38:	0800ba95 	.word	0x0800ba95
 800ba3c:	0800baad 	.word	0x0800baad
 800ba40:	0800baad 	.word	0x0800baad
 800ba44:	0800baad 	.word	0x0800baad
 800ba48:	0800baad 	.word	0x0800baad
 800ba4c:	0800baad 	.word	0x0800baad
 800ba50:	0800baad 	.word	0x0800baad
 800ba54:	0800baad 	.word	0x0800baad
 800ba58:	0800ba9d 	.word	0x0800ba9d
 800ba5c:	0800baad 	.word	0x0800baad
 800ba60:	0800baad 	.word	0x0800baad
 800ba64:	0800baad 	.word	0x0800baad
 800ba68:	0800baad 	.word	0x0800baad
 800ba6c:	0800baad 	.word	0x0800baad
 800ba70:	0800baad 	.word	0x0800baad
 800ba74:	0800baad 	.word	0x0800baad
 800ba78:	0800baa5 	.word	0x0800baa5
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba82:	e222      	b.n	800beca <UART_SetConfig+0x5a6>
 800ba84:	2304      	movs	r3, #4
 800ba86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba8a:	e21e      	b.n	800beca <UART_SetConfig+0x5a6>
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba92:	e21a      	b.n	800beca <UART_SetConfig+0x5a6>
 800ba94:	2310      	movs	r3, #16
 800ba96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba9a:	e216      	b.n	800beca <UART_SetConfig+0x5a6>
 800ba9c:	2320      	movs	r3, #32
 800ba9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baa2:	e212      	b.n	800beca <UART_SetConfig+0x5a6>
 800baa4:	2340      	movs	r3, #64	@ 0x40
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baaa:	e20e      	b.n	800beca <UART_SetConfig+0x5a6>
 800baac:	2380      	movs	r3, #128	@ 0x80
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab2:	e20a      	b.n	800beca <UART_SetConfig+0x5a6>
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a69      	ldr	r2, [pc, #420]	@ (800bc60 <UART_SetConfig+0x33c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d130      	bne.n	800bb20 <UART_SetConfig+0x1fc>
 800babe:	4b67      	ldr	r3, [pc, #412]	@ (800bc5c <UART_SetConfig+0x338>)
 800bac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bac2:	f003 0307 	and.w	r3, r3, #7
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	d826      	bhi.n	800bb18 <UART_SetConfig+0x1f4>
 800baca:	a201      	add	r2, pc, #4	@ (adr r2, 800bad0 <UART_SetConfig+0x1ac>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bae9 	.word	0x0800bae9
 800bad4:	0800baf1 	.word	0x0800baf1
 800bad8:	0800baf9 	.word	0x0800baf9
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb09 	.word	0x0800bb09
 800bae4:	0800bb11 	.word	0x0800bb11
 800bae8:	2300      	movs	r3, #0
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baee:	e1ec      	b.n	800beca <UART_SetConfig+0x5a6>
 800baf0:	2304      	movs	r3, #4
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf6:	e1e8      	b.n	800beca <UART_SetConfig+0x5a6>
 800baf8:	2308      	movs	r3, #8
 800bafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bafe:	e1e4      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb00:	2310      	movs	r3, #16
 800bb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb06:	e1e0      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb08:	2320      	movs	r3, #32
 800bb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb0e:	e1dc      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb10:	2340      	movs	r3, #64	@ 0x40
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e1d8      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb18:	2380      	movs	r3, #128	@ 0x80
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e1d4      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a4f      	ldr	r2, [pc, #316]	@ (800bc64 <UART_SetConfig+0x340>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d130      	bne.n	800bb8c <UART_SetConfig+0x268>
 800bb2a:	4b4c      	ldr	r3, [pc, #304]	@ (800bc5c <UART_SetConfig+0x338>)
 800bb2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb2e:	f003 0307 	and.w	r3, r3, #7
 800bb32:	2b05      	cmp	r3, #5
 800bb34:	d826      	bhi.n	800bb84 <UART_SetConfig+0x260>
 800bb36:	a201      	add	r2, pc, #4	@ (adr r2, 800bb3c <UART_SetConfig+0x218>)
 800bb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3c:	0800bb55 	.word	0x0800bb55
 800bb40:	0800bb5d 	.word	0x0800bb5d
 800bb44:	0800bb65 	.word	0x0800bb65
 800bb48:	0800bb6d 	.word	0x0800bb6d
 800bb4c:	0800bb75 	.word	0x0800bb75
 800bb50:	0800bb7d 	.word	0x0800bb7d
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5a:	e1b6      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb5c:	2304      	movs	r3, #4
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb62:	e1b2      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb64:	2308      	movs	r3, #8
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6a:	e1ae      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb6c:	2310      	movs	r3, #16
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb72:	e1aa      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb74:	2320      	movs	r3, #32
 800bb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7a:	e1a6      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb7c:	2340      	movs	r3, #64	@ 0x40
 800bb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb82:	e1a2      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb84:	2380      	movs	r3, #128	@ 0x80
 800bb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8a:	e19e      	b.n	800beca <UART_SetConfig+0x5a6>
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a35      	ldr	r2, [pc, #212]	@ (800bc68 <UART_SetConfig+0x344>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d130      	bne.n	800bbf8 <UART_SetConfig+0x2d4>
 800bb96:	4b31      	ldr	r3, [pc, #196]	@ (800bc5c <UART_SetConfig+0x338>)
 800bb98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb9a:	f003 0307 	and.w	r3, r3, #7
 800bb9e:	2b05      	cmp	r3, #5
 800bba0:	d826      	bhi.n	800bbf0 <UART_SetConfig+0x2cc>
 800bba2:	a201      	add	r2, pc, #4	@ (adr r2, 800bba8 <UART_SetConfig+0x284>)
 800bba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba8:	0800bbc1 	.word	0x0800bbc1
 800bbac:	0800bbc9 	.word	0x0800bbc9
 800bbb0:	0800bbd1 	.word	0x0800bbd1
 800bbb4:	0800bbd9 	.word	0x0800bbd9
 800bbb8:	0800bbe1 	.word	0x0800bbe1
 800bbbc:	0800bbe9 	.word	0x0800bbe9
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc6:	e180      	b.n	800beca <UART_SetConfig+0x5a6>
 800bbc8:	2304      	movs	r3, #4
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbce:	e17c      	b.n	800beca <UART_SetConfig+0x5a6>
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd6:	e178      	b.n	800beca <UART_SetConfig+0x5a6>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbde:	e174      	b.n	800beca <UART_SetConfig+0x5a6>
 800bbe0:	2320      	movs	r3, #32
 800bbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe6:	e170      	b.n	800beca <UART_SetConfig+0x5a6>
 800bbe8:	2340      	movs	r3, #64	@ 0x40
 800bbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbee:	e16c      	b.n	800beca <UART_SetConfig+0x5a6>
 800bbf0:	2380      	movs	r3, #128	@ 0x80
 800bbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf6:	e168      	b.n	800beca <UART_SetConfig+0x5a6>
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a1b      	ldr	r2, [pc, #108]	@ (800bc6c <UART_SetConfig+0x348>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d142      	bne.n	800bc88 <UART_SetConfig+0x364>
 800bc02:	4b16      	ldr	r3, [pc, #88]	@ (800bc5c <UART_SetConfig+0x338>)
 800bc04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc06:	f003 0307 	and.w	r3, r3, #7
 800bc0a:	2b05      	cmp	r3, #5
 800bc0c:	d838      	bhi.n	800bc80 <UART_SetConfig+0x35c>
 800bc0e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc14 <UART_SetConfig+0x2f0>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bc2d 	.word	0x0800bc2d
 800bc18:	0800bc35 	.word	0x0800bc35
 800bc1c:	0800bc3d 	.word	0x0800bc3d
 800bc20:	0800bc45 	.word	0x0800bc45
 800bc24:	0800bc71 	.word	0x0800bc71
 800bc28:	0800bc79 	.word	0x0800bc79
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc32:	e14a      	b.n	800beca <UART_SetConfig+0x5a6>
 800bc34:	2304      	movs	r3, #4
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3a:	e146      	b.n	800beca <UART_SetConfig+0x5a6>
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc42:	e142      	b.n	800beca <UART_SetConfig+0x5a6>
 800bc44:	2310      	movs	r3, #16
 800bc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4a:	e13e      	b.n	800beca <UART_SetConfig+0x5a6>
 800bc4c:	cfff69f3 	.word	0xcfff69f3
 800bc50:	58000c00 	.word	0x58000c00
 800bc54:	11fff4ff 	.word	0x11fff4ff
 800bc58:	40011000 	.word	0x40011000
 800bc5c:	58024400 	.word	0x58024400
 800bc60:	40004400 	.word	0x40004400
 800bc64:	40004800 	.word	0x40004800
 800bc68:	40004c00 	.word	0x40004c00
 800bc6c:	40005000 	.word	0x40005000
 800bc70:	2320      	movs	r3, #32
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc76:	e128      	b.n	800beca <UART_SetConfig+0x5a6>
 800bc78:	2340      	movs	r3, #64	@ 0x40
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc7e:	e124      	b.n	800beca <UART_SetConfig+0x5a6>
 800bc80:	2380      	movs	r3, #128	@ 0x80
 800bc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc86:	e120      	b.n	800beca <UART_SetConfig+0x5a6>
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4acb      	ldr	r2, [pc, #812]	@ (800bfbc <UART_SetConfig+0x698>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d176      	bne.n	800bd80 <UART_SetConfig+0x45c>
 800bc92:	4bcb      	ldr	r3, [pc, #812]	@ (800bfc0 <UART_SetConfig+0x69c>)
 800bc94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc9a:	2b28      	cmp	r3, #40	@ 0x28
 800bc9c:	d86c      	bhi.n	800bd78 <UART_SetConfig+0x454>
 800bc9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bca4 <UART_SetConfig+0x380>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bd49 	.word	0x0800bd49
 800bca8:	0800bd79 	.word	0x0800bd79
 800bcac:	0800bd79 	.word	0x0800bd79
 800bcb0:	0800bd79 	.word	0x0800bd79
 800bcb4:	0800bd79 	.word	0x0800bd79
 800bcb8:	0800bd79 	.word	0x0800bd79
 800bcbc:	0800bd79 	.word	0x0800bd79
 800bcc0:	0800bd79 	.word	0x0800bd79
 800bcc4:	0800bd51 	.word	0x0800bd51
 800bcc8:	0800bd79 	.word	0x0800bd79
 800bccc:	0800bd79 	.word	0x0800bd79
 800bcd0:	0800bd79 	.word	0x0800bd79
 800bcd4:	0800bd79 	.word	0x0800bd79
 800bcd8:	0800bd79 	.word	0x0800bd79
 800bcdc:	0800bd79 	.word	0x0800bd79
 800bce0:	0800bd79 	.word	0x0800bd79
 800bce4:	0800bd59 	.word	0x0800bd59
 800bce8:	0800bd79 	.word	0x0800bd79
 800bcec:	0800bd79 	.word	0x0800bd79
 800bcf0:	0800bd79 	.word	0x0800bd79
 800bcf4:	0800bd79 	.word	0x0800bd79
 800bcf8:	0800bd79 	.word	0x0800bd79
 800bcfc:	0800bd79 	.word	0x0800bd79
 800bd00:	0800bd79 	.word	0x0800bd79
 800bd04:	0800bd61 	.word	0x0800bd61
 800bd08:	0800bd79 	.word	0x0800bd79
 800bd0c:	0800bd79 	.word	0x0800bd79
 800bd10:	0800bd79 	.word	0x0800bd79
 800bd14:	0800bd79 	.word	0x0800bd79
 800bd18:	0800bd79 	.word	0x0800bd79
 800bd1c:	0800bd79 	.word	0x0800bd79
 800bd20:	0800bd79 	.word	0x0800bd79
 800bd24:	0800bd69 	.word	0x0800bd69
 800bd28:	0800bd79 	.word	0x0800bd79
 800bd2c:	0800bd79 	.word	0x0800bd79
 800bd30:	0800bd79 	.word	0x0800bd79
 800bd34:	0800bd79 	.word	0x0800bd79
 800bd38:	0800bd79 	.word	0x0800bd79
 800bd3c:	0800bd79 	.word	0x0800bd79
 800bd40:	0800bd79 	.word	0x0800bd79
 800bd44:	0800bd71 	.word	0x0800bd71
 800bd48:	2301      	movs	r3, #1
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4e:	e0bc      	b.n	800beca <UART_SetConfig+0x5a6>
 800bd50:	2304      	movs	r3, #4
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd56:	e0b8      	b.n	800beca <UART_SetConfig+0x5a6>
 800bd58:	2308      	movs	r3, #8
 800bd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd5e:	e0b4      	b.n	800beca <UART_SetConfig+0x5a6>
 800bd60:	2310      	movs	r3, #16
 800bd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd66:	e0b0      	b.n	800beca <UART_SetConfig+0x5a6>
 800bd68:	2320      	movs	r3, #32
 800bd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd6e:	e0ac      	b.n	800beca <UART_SetConfig+0x5a6>
 800bd70:	2340      	movs	r3, #64	@ 0x40
 800bd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd76:	e0a8      	b.n	800beca <UART_SetConfig+0x5a6>
 800bd78:	2380      	movs	r3, #128	@ 0x80
 800bd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd7e:	e0a4      	b.n	800beca <UART_SetConfig+0x5a6>
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a8f      	ldr	r2, [pc, #572]	@ (800bfc4 <UART_SetConfig+0x6a0>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d130      	bne.n	800bdec <UART_SetConfig+0x4c8>
 800bd8a:	4b8d      	ldr	r3, [pc, #564]	@ (800bfc0 <UART_SetConfig+0x69c>)
 800bd8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd8e:	f003 0307 	and.w	r3, r3, #7
 800bd92:	2b05      	cmp	r3, #5
 800bd94:	d826      	bhi.n	800bde4 <UART_SetConfig+0x4c0>
 800bd96:	a201      	add	r2, pc, #4	@ (adr r2, 800bd9c <UART_SetConfig+0x478>)
 800bd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9c:	0800bdb5 	.word	0x0800bdb5
 800bda0:	0800bdbd 	.word	0x0800bdbd
 800bda4:	0800bdc5 	.word	0x0800bdc5
 800bda8:	0800bdcd 	.word	0x0800bdcd
 800bdac:	0800bdd5 	.word	0x0800bdd5
 800bdb0:	0800bddd 	.word	0x0800bddd
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdba:	e086      	b.n	800beca <UART_SetConfig+0x5a6>
 800bdbc:	2304      	movs	r3, #4
 800bdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdc2:	e082      	b.n	800beca <UART_SetConfig+0x5a6>
 800bdc4:	2308      	movs	r3, #8
 800bdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdca:	e07e      	b.n	800beca <UART_SetConfig+0x5a6>
 800bdcc:	2310      	movs	r3, #16
 800bdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdd2:	e07a      	b.n	800beca <UART_SetConfig+0x5a6>
 800bdd4:	2320      	movs	r3, #32
 800bdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdda:	e076      	b.n	800beca <UART_SetConfig+0x5a6>
 800bddc:	2340      	movs	r3, #64	@ 0x40
 800bdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bde2:	e072      	b.n	800beca <UART_SetConfig+0x5a6>
 800bde4:	2380      	movs	r3, #128	@ 0x80
 800bde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdea:	e06e      	b.n	800beca <UART_SetConfig+0x5a6>
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a75      	ldr	r2, [pc, #468]	@ (800bfc8 <UART_SetConfig+0x6a4>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d130      	bne.n	800be58 <UART_SetConfig+0x534>
 800bdf6:	4b72      	ldr	r3, [pc, #456]	@ (800bfc0 <UART_SetConfig+0x69c>)
 800bdf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdfa:	f003 0307 	and.w	r3, r3, #7
 800bdfe:	2b05      	cmp	r3, #5
 800be00:	d826      	bhi.n	800be50 <UART_SetConfig+0x52c>
 800be02:	a201      	add	r2, pc, #4	@ (adr r2, 800be08 <UART_SetConfig+0x4e4>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be21 	.word	0x0800be21
 800be0c:	0800be29 	.word	0x0800be29
 800be10:	0800be31 	.word	0x0800be31
 800be14:	0800be39 	.word	0x0800be39
 800be18:	0800be41 	.word	0x0800be41
 800be1c:	0800be49 	.word	0x0800be49
 800be20:	2300      	movs	r3, #0
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be26:	e050      	b.n	800beca <UART_SetConfig+0x5a6>
 800be28:	2304      	movs	r3, #4
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2e:	e04c      	b.n	800beca <UART_SetConfig+0x5a6>
 800be30:	2308      	movs	r3, #8
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be36:	e048      	b.n	800beca <UART_SetConfig+0x5a6>
 800be38:	2310      	movs	r3, #16
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3e:	e044      	b.n	800beca <UART_SetConfig+0x5a6>
 800be40:	2320      	movs	r3, #32
 800be42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be46:	e040      	b.n	800beca <UART_SetConfig+0x5a6>
 800be48:	2340      	movs	r3, #64	@ 0x40
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4e:	e03c      	b.n	800beca <UART_SetConfig+0x5a6>
 800be50:	2380      	movs	r3, #128	@ 0x80
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be56:	e038      	b.n	800beca <UART_SetConfig+0x5a6>
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a5b      	ldr	r2, [pc, #364]	@ (800bfcc <UART_SetConfig+0x6a8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d130      	bne.n	800bec4 <UART_SetConfig+0x5a0>
 800be62:	4b57      	ldr	r3, [pc, #348]	@ (800bfc0 <UART_SetConfig+0x69c>)
 800be64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be66:	f003 0307 	and.w	r3, r3, #7
 800be6a:	2b05      	cmp	r3, #5
 800be6c:	d826      	bhi.n	800bebc <UART_SetConfig+0x598>
 800be6e:	a201      	add	r2, pc, #4	@ (adr r2, 800be74 <UART_SetConfig+0x550>)
 800be70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be74:	0800be8d 	.word	0x0800be8d
 800be78:	0800be95 	.word	0x0800be95
 800be7c:	0800be9d 	.word	0x0800be9d
 800be80:	0800bea5 	.word	0x0800bea5
 800be84:	0800bead 	.word	0x0800bead
 800be88:	0800beb5 	.word	0x0800beb5
 800be8c:	2302      	movs	r3, #2
 800be8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be92:	e01a      	b.n	800beca <UART_SetConfig+0x5a6>
 800be94:	2304      	movs	r3, #4
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be9a:	e016      	b.n	800beca <UART_SetConfig+0x5a6>
 800be9c:	2308      	movs	r3, #8
 800be9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bea2:	e012      	b.n	800beca <UART_SetConfig+0x5a6>
 800bea4:	2310      	movs	r3, #16
 800bea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beaa:	e00e      	b.n	800beca <UART_SetConfig+0x5a6>
 800beac:	2320      	movs	r3, #32
 800beae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beb2:	e00a      	b.n	800beca <UART_SetConfig+0x5a6>
 800beb4:	2340      	movs	r3, #64	@ 0x40
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beba:	e006      	b.n	800beca <UART_SetConfig+0x5a6>
 800bebc:	2380      	movs	r3, #128	@ 0x80
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bec2:	e002      	b.n	800beca <UART_SetConfig+0x5a6>
 800bec4:	2380      	movs	r3, #128	@ 0x80
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a3f      	ldr	r2, [pc, #252]	@ (800bfcc <UART_SetConfig+0x6a8>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	f040 80f8 	bne.w	800c0c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bed6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800beda:	2b20      	cmp	r3, #32
 800bedc:	dc46      	bgt.n	800bf6c <UART_SetConfig+0x648>
 800bede:	2b02      	cmp	r3, #2
 800bee0:	f2c0 8082 	blt.w	800bfe8 <UART_SetConfig+0x6c4>
 800bee4:	3b02      	subs	r3, #2
 800bee6:	2b1e      	cmp	r3, #30
 800bee8:	d87e      	bhi.n	800bfe8 <UART_SetConfig+0x6c4>
 800beea:	a201      	add	r2, pc, #4	@ (adr r2, 800bef0 <UART_SetConfig+0x5cc>)
 800beec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef0:	0800bf73 	.word	0x0800bf73
 800bef4:	0800bfe9 	.word	0x0800bfe9
 800bef8:	0800bf7b 	.word	0x0800bf7b
 800befc:	0800bfe9 	.word	0x0800bfe9
 800bf00:	0800bfe9 	.word	0x0800bfe9
 800bf04:	0800bfe9 	.word	0x0800bfe9
 800bf08:	0800bf8b 	.word	0x0800bf8b
 800bf0c:	0800bfe9 	.word	0x0800bfe9
 800bf10:	0800bfe9 	.word	0x0800bfe9
 800bf14:	0800bfe9 	.word	0x0800bfe9
 800bf18:	0800bfe9 	.word	0x0800bfe9
 800bf1c:	0800bfe9 	.word	0x0800bfe9
 800bf20:	0800bfe9 	.word	0x0800bfe9
 800bf24:	0800bfe9 	.word	0x0800bfe9
 800bf28:	0800bf9b 	.word	0x0800bf9b
 800bf2c:	0800bfe9 	.word	0x0800bfe9
 800bf30:	0800bfe9 	.word	0x0800bfe9
 800bf34:	0800bfe9 	.word	0x0800bfe9
 800bf38:	0800bfe9 	.word	0x0800bfe9
 800bf3c:	0800bfe9 	.word	0x0800bfe9
 800bf40:	0800bfe9 	.word	0x0800bfe9
 800bf44:	0800bfe9 	.word	0x0800bfe9
 800bf48:	0800bfe9 	.word	0x0800bfe9
 800bf4c:	0800bfe9 	.word	0x0800bfe9
 800bf50:	0800bfe9 	.word	0x0800bfe9
 800bf54:	0800bfe9 	.word	0x0800bfe9
 800bf58:	0800bfe9 	.word	0x0800bfe9
 800bf5c:	0800bfe9 	.word	0x0800bfe9
 800bf60:	0800bfe9 	.word	0x0800bfe9
 800bf64:	0800bfe9 	.word	0x0800bfe9
 800bf68:	0800bfdb 	.word	0x0800bfdb
 800bf6c:	2b40      	cmp	r3, #64	@ 0x40
 800bf6e:	d037      	beq.n	800bfe0 <UART_SetConfig+0x6bc>
 800bf70:	e03a      	b.n	800bfe8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf72:	f7fe fb85 	bl	800a680 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf78:	e03c      	b.n	800bff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fe fb94 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf88:	e034      	b.n	800bff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf8a:	f107 0318 	add.w	r3, r7, #24
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe fce0 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf98:	e02c      	b.n	800bff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf9a:	4b09      	ldr	r3, [pc, #36]	@ (800bfc0 <UART_SetConfig+0x69c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0320 	and.w	r3, r3, #32
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d016      	beq.n	800bfd4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfa6:	4b06      	ldr	r3, [pc, #24]	@ (800bfc0 <UART_SetConfig+0x69c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	08db      	lsrs	r3, r3, #3
 800bfac:	f003 0303 	and.w	r3, r3, #3
 800bfb0:	4a07      	ldr	r2, [pc, #28]	@ (800bfd0 <UART_SetConfig+0x6ac>)
 800bfb2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bfb8:	e01c      	b.n	800bff4 <UART_SetConfig+0x6d0>
 800bfba:	bf00      	nop
 800bfbc:	40011400 	.word	0x40011400
 800bfc0:	58024400 	.word	0x58024400
 800bfc4:	40007800 	.word	0x40007800
 800bfc8:	40007c00 	.word	0x40007c00
 800bfcc:	58000c00 	.word	0x58000c00
 800bfd0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bfd4:	4b9d      	ldr	r3, [pc, #628]	@ (800c24c <UART_SetConfig+0x928>)
 800bfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfd8:	e00c      	b.n	800bff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bfda:	4b9d      	ldr	r3, [pc, #628]	@ (800c250 <UART_SetConfig+0x92c>)
 800bfdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfde:	e009      	b.n	800bff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfe6:	e005      	b.n	800bff4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bff2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 81de 	beq.w	800c3b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c000:	4a94      	ldr	r2, [pc, #592]	@ (800c254 <UART_SetConfig+0x930>)
 800c002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c006:	461a      	mov	r2, r3
 800c008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c00a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c00e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	4413      	add	r3, r2
 800c01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d305      	bcc.n	800c02c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c028:	429a      	cmp	r2, r3
 800c02a:	d903      	bls.n	800c034 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c032:	e1c1      	b.n	800c3b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c036:	2200      	movs	r2, #0
 800c038:	60bb      	str	r3, [r7, #8]
 800c03a:	60fa      	str	r2, [r7, #12]
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c040:	4a84      	ldr	r2, [pc, #528]	@ (800c254 <UART_SetConfig+0x930>)
 800c042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c046:	b29b      	uxth	r3, r3
 800c048:	2200      	movs	r2, #0
 800c04a:	603b      	str	r3, [r7, #0]
 800c04c:	607a      	str	r2, [r7, #4]
 800c04e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c056:	f7f4 f99b 	bl	8000390 <__aeabi_uldivmod>
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	4610      	mov	r0, r2
 800c060:	4619      	mov	r1, r3
 800c062:	f04f 0200 	mov.w	r2, #0
 800c066:	f04f 0300 	mov.w	r3, #0
 800c06a:	020b      	lsls	r3, r1, #8
 800c06c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c070:	0202      	lsls	r2, r0, #8
 800c072:	6979      	ldr	r1, [r7, #20]
 800c074:	6849      	ldr	r1, [r1, #4]
 800c076:	0849      	lsrs	r1, r1, #1
 800c078:	2000      	movs	r0, #0
 800c07a:	460c      	mov	r4, r1
 800c07c:	4605      	mov	r5, r0
 800c07e:	eb12 0804 	adds.w	r8, r2, r4
 800c082:	eb43 0905 	adc.w	r9, r3, r5
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	469a      	mov	sl, r3
 800c08e:	4693      	mov	fp, r2
 800c090:	4652      	mov	r2, sl
 800c092:	465b      	mov	r3, fp
 800c094:	4640      	mov	r0, r8
 800c096:	4649      	mov	r1, r9
 800c098:	f7f4 f97a 	bl	8000390 <__aeabi_uldivmod>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c0aa:	d308      	bcc.n	800c0be <UART_SetConfig+0x79a>
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0b2:	d204      	bcs.n	800c0be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ba:	60da      	str	r2, [r3, #12]
 800c0bc:	e17c      	b.n	800c3b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c0c4:	e178      	b.n	800c3b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	69db      	ldr	r3, [r3, #28]
 800c0ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0ce:	f040 80c5 	bne.w	800c25c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c0d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c0d6:	2b20      	cmp	r3, #32
 800c0d8:	dc48      	bgt.n	800c16c <UART_SetConfig+0x848>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	db7b      	blt.n	800c1d6 <UART_SetConfig+0x8b2>
 800c0de:	2b20      	cmp	r3, #32
 800c0e0:	d879      	bhi.n	800c1d6 <UART_SetConfig+0x8b2>
 800c0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0e8 <UART_SetConfig+0x7c4>)
 800c0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e8:	0800c173 	.word	0x0800c173
 800c0ec:	0800c17b 	.word	0x0800c17b
 800c0f0:	0800c1d7 	.word	0x0800c1d7
 800c0f4:	0800c1d7 	.word	0x0800c1d7
 800c0f8:	0800c183 	.word	0x0800c183
 800c0fc:	0800c1d7 	.word	0x0800c1d7
 800c100:	0800c1d7 	.word	0x0800c1d7
 800c104:	0800c1d7 	.word	0x0800c1d7
 800c108:	0800c193 	.word	0x0800c193
 800c10c:	0800c1d7 	.word	0x0800c1d7
 800c110:	0800c1d7 	.word	0x0800c1d7
 800c114:	0800c1d7 	.word	0x0800c1d7
 800c118:	0800c1d7 	.word	0x0800c1d7
 800c11c:	0800c1d7 	.word	0x0800c1d7
 800c120:	0800c1d7 	.word	0x0800c1d7
 800c124:	0800c1d7 	.word	0x0800c1d7
 800c128:	0800c1a3 	.word	0x0800c1a3
 800c12c:	0800c1d7 	.word	0x0800c1d7
 800c130:	0800c1d7 	.word	0x0800c1d7
 800c134:	0800c1d7 	.word	0x0800c1d7
 800c138:	0800c1d7 	.word	0x0800c1d7
 800c13c:	0800c1d7 	.word	0x0800c1d7
 800c140:	0800c1d7 	.word	0x0800c1d7
 800c144:	0800c1d7 	.word	0x0800c1d7
 800c148:	0800c1d7 	.word	0x0800c1d7
 800c14c:	0800c1d7 	.word	0x0800c1d7
 800c150:	0800c1d7 	.word	0x0800c1d7
 800c154:	0800c1d7 	.word	0x0800c1d7
 800c158:	0800c1d7 	.word	0x0800c1d7
 800c15c:	0800c1d7 	.word	0x0800c1d7
 800c160:	0800c1d7 	.word	0x0800c1d7
 800c164:	0800c1d7 	.word	0x0800c1d7
 800c168:	0800c1c9 	.word	0x0800c1c9
 800c16c:	2b40      	cmp	r3, #64	@ 0x40
 800c16e:	d02e      	beq.n	800c1ce <UART_SetConfig+0x8aa>
 800c170:	e031      	b.n	800c1d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c172:	f7fc facf 	bl	8008714 <HAL_RCC_GetPCLK1Freq>
 800c176:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c178:	e033      	b.n	800c1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c17a:	f7fc fae1 	bl	8008740 <HAL_RCC_GetPCLK2Freq>
 800c17e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c180:	e02f      	b.n	800c1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fa90 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c190:	e027      	b.n	800c1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c192:	f107 0318 	add.w	r3, r7, #24
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fbdc 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1a0:	e01f      	b.n	800c1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1a2:	4b2d      	ldr	r3, [pc, #180]	@ (800c258 <UART_SetConfig+0x934>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0320 	and.w	r3, r3, #32
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d009      	beq.n	800c1c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1ae:	4b2a      	ldr	r3, [pc, #168]	@ (800c258 <UART_SetConfig+0x934>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	08db      	lsrs	r3, r3, #3
 800c1b4:	f003 0303 	and.w	r3, r3, #3
 800c1b8:	4a24      	ldr	r2, [pc, #144]	@ (800c24c <UART_SetConfig+0x928>)
 800c1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1c0:	e00f      	b.n	800c1e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c1c2:	4b22      	ldr	r3, [pc, #136]	@ (800c24c <UART_SetConfig+0x928>)
 800c1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1c6:	e00c      	b.n	800c1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1c8:	4b21      	ldr	r3, [pc, #132]	@ (800c250 <UART_SetConfig+0x92c>)
 800c1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1cc:	e009      	b.n	800c1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1d4:	e005      	b.n	800c1e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c1e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 80e7 	beq.w	800c3b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ee:	4a19      	ldr	r2, [pc, #100]	@ (800c254 <UART_SetConfig+0x930>)
 800c1f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1fc:	005a      	lsls	r2, r3, #1
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	441a      	add	r2, r3
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c20e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c212:	2b0f      	cmp	r3, #15
 800c214:	d916      	bls.n	800c244 <UART_SetConfig+0x920>
 800c216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c21c:	d212      	bcs.n	800c244 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c220:	b29b      	uxth	r3, r3
 800c222:	f023 030f 	bic.w	r3, r3, #15
 800c226:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22a:	085b      	lsrs	r3, r3, #1
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	f003 0307 	and.w	r3, r3, #7
 800c232:	b29a      	uxth	r2, r3
 800c234:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c236:	4313      	orrs	r3, r2
 800c238:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c240:	60da      	str	r2, [r3, #12]
 800c242:	e0b9      	b.n	800c3b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c24a:	e0b5      	b.n	800c3b8 <UART_SetConfig+0xa94>
 800c24c:	03d09000 	.word	0x03d09000
 800c250:	003d0900 	.word	0x003d0900
 800c254:	0801179c 	.word	0x0801179c
 800c258:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c25c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c260:	2b20      	cmp	r3, #32
 800c262:	dc49      	bgt.n	800c2f8 <UART_SetConfig+0x9d4>
 800c264:	2b00      	cmp	r3, #0
 800c266:	db7c      	blt.n	800c362 <UART_SetConfig+0xa3e>
 800c268:	2b20      	cmp	r3, #32
 800c26a:	d87a      	bhi.n	800c362 <UART_SetConfig+0xa3e>
 800c26c:	a201      	add	r2, pc, #4	@ (adr r2, 800c274 <UART_SetConfig+0x950>)
 800c26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c272:	bf00      	nop
 800c274:	0800c2ff 	.word	0x0800c2ff
 800c278:	0800c307 	.word	0x0800c307
 800c27c:	0800c363 	.word	0x0800c363
 800c280:	0800c363 	.word	0x0800c363
 800c284:	0800c30f 	.word	0x0800c30f
 800c288:	0800c363 	.word	0x0800c363
 800c28c:	0800c363 	.word	0x0800c363
 800c290:	0800c363 	.word	0x0800c363
 800c294:	0800c31f 	.word	0x0800c31f
 800c298:	0800c363 	.word	0x0800c363
 800c29c:	0800c363 	.word	0x0800c363
 800c2a0:	0800c363 	.word	0x0800c363
 800c2a4:	0800c363 	.word	0x0800c363
 800c2a8:	0800c363 	.word	0x0800c363
 800c2ac:	0800c363 	.word	0x0800c363
 800c2b0:	0800c363 	.word	0x0800c363
 800c2b4:	0800c32f 	.word	0x0800c32f
 800c2b8:	0800c363 	.word	0x0800c363
 800c2bc:	0800c363 	.word	0x0800c363
 800c2c0:	0800c363 	.word	0x0800c363
 800c2c4:	0800c363 	.word	0x0800c363
 800c2c8:	0800c363 	.word	0x0800c363
 800c2cc:	0800c363 	.word	0x0800c363
 800c2d0:	0800c363 	.word	0x0800c363
 800c2d4:	0800c363 	.word	0x0800c363
 800c2d8:	0800c363 	.word	0x0800c363
 800c2dc:	0800c363 	.word	0x0800c363
 800c2e0:	0800c363 	.word	0x0800c363
 800c2e4:	0800c363 	.word	0x0800c363
 800c2e8:	0800c363 	.word	0x0800c363
 800c2ec:	0800c363 	.word	0x0800c363
 800c2f0:	0800c363 	.word	0x0800c363
 800c2f4:	0800c355 	.word	0x0800c355
 800c2f8:	2b40      	cmp	r3, #64	@ 0x40
 800c2fa:	d02e      	beq.n	800c35a <UART_SetConfig+0xa36>
 800c2fc:	e031      	b.n	800c362 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2fe:	f7fc fa09 	bl	8008714 <HAL_RCC_GetPCLK1Freq>
 800c302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c304:	e033      	b.n	800c36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c306:	f7fc fa1b 	bl	8008740 <HAL_RCC_GetPCLK2Freq>
 800c30a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c30c:	e02f      	b.n	800c36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c30e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c312:	4618      	mov	r0, r3
 800c314:	f7fe f9ca 	bl	800a6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c31c:	e027      	b.n	800c36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c31e:	f107 0318 	add.w	r3, r7, #24
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe fb16 	bl	800a954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c32c:	e01f      	b.n	800c36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c32e:	4b2d      	ldr	r3, [pc, #180]	@ (800c3e4 <UART_SetConfig+0xac0>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 0320 	and.w	r3, r3, #32
 800c336:	2b00      	cmp	r3, #0
 800c338:	d009      	beq.n	800c34e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c33a:	4b2a      	ldr	r3, [pc, #168]	@ (800c3e4 <UART_SetConfig+0xac0>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	08db      	lsrs	r3, r3, #3
 800c340:	f003 0303 	and.w	r3, r3, #3
 800c344:	4a28      	ldr	r2, [pc, #160]	@ (800c3e8 <UART_SetConfig+0xac4>)
 800c346:	fa22 f303 	lsr.w	r3, r2, r3
 800c34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c34c:	e00f      	b.n	800c36e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c34e:	4b26      	ldr	r3, [pc, #152]	@ (800c3e8 <UART_SetConfig+0xac4>)
 800c350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c352:	e00c      	b.n	800c36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c354:	4b25      	ldr	r3, [pc, #148]	@ (800c3ec <UART_SetConfig+0xac8>)
 800c356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c358:	e009      	b.n	800c36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c35a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c360:	e005      	b.n	800c36e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c362:	2300      	movs	r3, #0
 800c364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c36c:	bf00      	nop
    }

    if (pclk != 0U)
 800c36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c370:	2b00      	cmp	r3, #0
 800c372:	d021      	beq.n	800c3b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c378:	4a1d      	ldr	r2, [pc, #116]	@ (800c3f0 <UART_SetConfig+0xacc>)
 800c37a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c37e:	461a      	mov	r2, r3
 800c380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c382:	fbb3 f2f2 	udiv	r2, r3, r2
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	085b      	lsrs	r3, r3, #1
 800c38c:	441a      	add	r2, r3
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	fbb2 f3f3 	udiv	r3, r2, r3
 800c396:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39a:	2b0f      	cmp	r3, #15
 800c39c:	d909      	bls.n	800c3b2 <UART_SetConfig+0xa8e>
 800c39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3a4:	d205      	bcs.n	800c3b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	60da      	str	r2, [r3, #12]
 800c3b0:	e002      	b.n	800c3b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c3d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3748      	adds	r7, #72	@ 0x48
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3e2:	bf00      	nop
 800c3e4:	58024400 	.word	0x58024400
 800c3e8:	03d09000 	.word	0x03d09000
 800c3ec:	003d0900 	.word	0x003d0900
 800c3f0:	0801179c 	.word	0x0801179c

0800c3f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c400:	f003 0308 	and.w	r3, r3, #8
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00a      	beq.n	800c41e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	430a      	orrs	r2, r1
 800c41c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00a      	beq.n	800c440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	430a      	orrs	r2, r1
 800c43e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c444:	f003 0302 	and.w	r3, r3, #2
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00a      	beq.n	800c462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	430a      	orrs	r2, r1
 800c460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c466:	f003 0304 	and.w	r3, r3, #4
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00a      	beq.n	800c484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	430a      	orrs	r2, r1
 800c482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c488:	f003 0310 	and.w	r3, r3, #16
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00a      	beq.n	800c4a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	430a      	orrs	r2, r1
 800c4a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4aa:	f003 0320 	and.w	r3, r3, #32
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00a      	beq.n	800c4c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	430a      	orrs	r2, r1
 800c4c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01a      	beq.n	800c50a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4f2:	d10a      	bne.n	800c50a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	605a      	str	r2, [r3, #4]
  }
}
 800c52c:	bf00      	nop
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b098      	sub	sp, #96	@ 0x60
 800c53c:	af02      	add	r7, sp, #8
 800c53e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c548:	f7f5 f942 	bl	80017d0 <HAL_GetTick>
 800c54c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 0308 	and.w	r3, r3, #8
 800c558:	2b08      	cmp	r3, #8
 800c55a:	d12f      	bne.n	800c5bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c55c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c564:	2200      	movs	r2, #0
 800c566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f88e 	bl	800c68c <UART_WaitOnFlagUntilTimeout>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d022      	beq.n	800c5bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57e:	e853 3f00 	ldrex	r3, [r3]
 800c582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c58a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	461a      	mov	r2, r3
 800c592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c594:	647b      	str	r3, [r7, #68]	@ 0x44
 800c596:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c59a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c59c:	e841 2300 	strex	r3, r2, [r1]
 800c5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1e6      	bne.n	800c576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2220      	movs	r2, #32
 800c5ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	e063      	b.n	800c684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 0304 	and.w	r3, r3, #4
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	d149      	bne.n	800c65e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f857 	bl	800c68c <UART_WaitOnFlagUntilTimeout>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d03c      	beq.n	800c65e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	e853 3f00 	ldrex	r3, [r3]
 800c5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	461a      	mov	r2, r3
 800c600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c602:	633b      	str	r3, [r7, #48]	@ 0x30
 800c604:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c60a:	e841 2300 	strex	r3, r2, [r1]
 800c60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e6      	bne.n	800c5e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3308      	adds	r3, #8
 800c61c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	e853 3f00 	ldrex	r3, [r3]
 800c624:	60fb      	str	r3, [r7, #12]
   return(result);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f023 0301 	bic.w	r3, r3, #1
 800c62c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3308      	adds	r3, #8
 800c634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c636:	61fa      	str	r2, [r7, #28]
 800c638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63a:	69b9      	ldr	r1, [r7, #24]
 800c63c:	69fa      	ldr	r2, [r7, #28]
 800c63e:	e841 2300 	strex	r3, r2, [r1]
 800c642:	617b      	str	r3, [r7, #20]
   return(result);
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1e5      	bne.n	800c616 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2220      	movs	r2, #32
 800c64e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c65a:	2303      	movs	r3, #3
 800c65c:	e012      	b.n	800c684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2220      	movs	r2, #32
 800c662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2220      	movs	r2, #32
 800c66a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3758      	adds	r7, #88	@ 0x58
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	603b      	str	r3, [r7, #0]
 800c698:	4613      	mov	r3, r2
 800c69a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c69c:	e04f      	b.n	800c73e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a4:	d04b      	beq.n	800c73e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6a6:	f7f5 f893 	bl	80017d0 <HAL_GetTick>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	69ba      	ldr	r2, [r7, #24]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d302      	bcc.n	800c6bc <UART_WaitOnFlagUntilTimeout+0x30>
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e04e      	b.n	800c75e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 0304 	and.w	r3, r3, #4
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d037      	beq.n	800c73e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	2b80      	cmp	r3, #128	@ 0x80
 800c6d2:	d034      	beq.n	800c73e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b40      	cmp	r3, #64	@ 0x40
 800c6d8:	d031      	beq.n	800c73e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	f003 0308 	and.w	r3, r3, #8
 800c6e4:	2b08      	cmp	r3, #8
 800c6e6:	d110      	bne.n	800c70a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 f839 	bl	800c768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2208      	movs	r2, #8
 800c6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	e029      	b.n	800c75e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c718:	d111      	bne.n	800c73e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f000 f81f 	bl	800c768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2220      	movs	r2, #32
 800c72e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2200      	movs	r2, #0
 800c736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c73a:	2303      	movs	r3, #3
 800c73c:	e00f      	b.n	800c75e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	69da      	ldr	r2, [r3, #28]
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	4013      	ands	r3, r2
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	bf0c      	ite	eq
 800c74e:	2301      	moveq	r3, #1
 800c750:	2300      	movne	r3, #0
 800c752:	b2db      	uxtb	r3, r3
 800c754:	461a      	mov	r2, r3
 800c756:	79fb      	ldrb	r3, [r7, #7]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d0a0      	beq.n	800c69e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
	...

0800c768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c768:	b480      	push	{r7}
 800c76a:	b095      	sub	sp, #84	@ 0x54
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c778:	e853 3f00 	ldrex	r3, [r3]
 800c77c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	461a      	mov	r2, r3
 800c78c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c78e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c790:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c796:	e841 2300 	strex	r3, r2, [r1]
 800c79a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1e6      	bne.n	800c770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	e853 3f00 	ldrex	r3, [r3]
 800c7b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7b2:	69fa      	ldr	r2, [r7, #28]
 800c7b4:	4b1e      	ldr	r3, [pc, #120]	@ (800c830 <UART_EndRxTransfer+0xc8>)
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	3308      	adds	r3, #8
 800c7c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c7c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e5      	bne.n	800c7a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d118      	bne.n	800c810 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	e853 3f00 	ldrex	r3, [r3]
 800c7ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	f023 0310 	bic.w	r3, r3, #16
 800c7f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7fc:	61bb      	str	r3, [r7, #24]
 800c7fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c800:	6979      	ldr	r1, [r7, #20]
 800c802:	69ba      	ldr	r2, [r7, #24]
 800c804:	e841 2300 	strex	r3, r2, [r1]
 800c808:	613b      	str	r3, [r7, #16]
   return(result);
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e6      	bne.n	800c7de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2220      	movs	r2, #32
 800c814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c824:	bf00      	nop
 800c826:	3754      	adds	r7, #84	@ 0x54
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	effffffe 	.word	0xeffffffe

0800c834 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c842:	2b01      	cmp	r3, #1
 800c844:	d101      	bne.n	800c84a <HAL_UARTEx_DisableFifoMode+0x16>
 800c846:	2302      	movs	r3, #2
 800c848:	e027      	b.n	800c89a <HAL_UARTEx_DisableFifoMode+0x66>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2224      	movs	r2, #36	@ 0x24
 800c856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f022 0201 	bic.w	r2, r2, #1
 800c870:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c878:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2220      	movs	r2, #32
 800c88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d101      	bne.n	800c8be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8ba:	2302      	movs	r3, #2
 800c8bc:	e02d      	b.n	800c91a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2224      	movs	r2, #36	@ 0x24
 800c8ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f022 0201 	bic.w	r2, r2, #1
 800c8e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	683a      	ldr	r2, [r7, #0]
 800c8f6:	430a      	orrs	r2, r1
 800c8f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f850 	bl	800c9a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2220      	movs	r2, #32
 800c90c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c932:	2b01      	cmp	r3, #1
 800c934:	d101      	bne.n	800c93a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c936:	2302      	movs	r3, #2
 800c938:	e02d      	b.n	800c996 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2224      	movs	r2, #36	@ 0x24
 800c946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f022 0201 	bic.w	r2, r2, #1
 800c960:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	430a      	orrs	r2, r1
 800c974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f812 	bl	800c9a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2220      	movs	r2, #32
 800c988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
	...

0800c9a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d108      	bne.n	800c9c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9c0:	e031      	b.n	800ca26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9c2:	2310      	movs	r3, #16
 800c9c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9c6:	2310      	movs	r3, #16
 800c9c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	0e5b      	lsrs	r3, r3, #25
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	f003 0307 	and.w	r3, r3, #7
 800c9d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	0f5b      	lsrs	r3, r3, #29
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	f003 0307 	and.w	r3, r3, #7
 800c9e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9ea:	7bbb      	ldrb	r3, [r7, #14]
 800c9ec:	7b3a      	ldrb	r2, [r7, #12]
 800c9ee:	4911      	ldr	r1, [pc, #68]	@ (800ca34 <UARTEx_SetNbDataToProcess+0x94>)
 800c9f0:	5c8a      	ldrb	r2, [r1, r2]
 800c9f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9f6:	7b3a      	ldrb	r2, [r7, #12]
 800c9f8:	490f      	ldr	r1, [pc, #60]	@ (800ca38 <UARTEx_SetNbDataToProcess+0x98>)
 800c9fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
 800ca0a:	7b7a      	ldrb	r2, [r7, #13]
 800ca0c:	4909      	ldr	r1, [pc, #36]	@ (800ca34 <UARTEx_SetNbDataToProcess+0x94>)
 800ca0e:	5c8a      	ldrb	r2, [r1, r2]
 800ca10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca14:	7b7a      	ldrb	r2, [r7, #13]
 800ca16:	4908      	ldr	r1, [pc, #32]	@ (800ca38 <UARTEx_SetNbDataToProcess+0x98>)
 800ca18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ca26:	bf00      	nop
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	080117b4 	.word	0x080117b4
 800ca38:	080117bc 	.word	0x080117bc

0800ca3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	f107 001c 	add.w	r0, r7, #28
 800ca4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d121      	bne.n	800ca9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	68da      	ldr	r2, [r3, #12]
 800ca66:	4b2c      	ldr	r3, [pc, #176]	@ (800cb18 <USB_CoreInit+0xdc>)
 800ca68:	4013      	ands	r3, r2
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ca7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d105      	bne.n	800ca8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f001 fafa 	bl	800e088 <USB_CoreReset>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
 800ca98:	e01b      	b.n	800cad2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 faee 	bl	800e088 <USB_CoreReset>
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cab0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d106      	bne.n	800cac6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cabc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	639a      	str	r2, [r3, #56]	@ 0x38
 800cac4:	e005      	b.n	800cad2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cad2:	7fbb      	ldrb	r3, [r7, #30]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d116      	bne.n	800cb06 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cadc:	b29a      	uxth	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cae6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb1c <USB_CoreInit+0xe0>)
 800cae8:	4313      	orrs	r3, r2
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	f043 0206 	orr.w	r2, r3, #6
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	f043 0220 	orr.w	r2, r3, #32
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb12:	b004      	add	sp, #16
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	ffbdffbf 	.word	0xffbdffbf
 800cb1c:	03ee0000 	.word	0x03ee0000

0800cb20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b087      	sub	sp, #28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d165      	bne.n	800cc00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	4a41      	ldr	r2, [pc, #260]	@ (800cc3c <USB_SetTurnaroundTime+0x11c>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d906      	bls.n	800cb4a <USB_SetTurnaroundTime+0x2a>
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	4a40      	ldr	r2, [pc, #256]	@ (800cc40 <USB_SetTurnaroundTime+0x120>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d202      	bcs.n	800cb4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cb44:	230f      	movs	r3, #15
 800cb46:	617b      	str	r3, [r7, #20]
 800cb48:	e062      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	4a3c      	ldr	r2, [pc, #240]	@ (800cc40 <USB_SetTurnaroundTime+0x120>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d306      	bcc.n	800cb60 <USB_SetTurnaroundTime+0x40>
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	4a3b      	ldr	r2, [pc, #236]	@ (800cc44 <USB_SetTurnaroundTime+0x124>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d202      	bcs.n	800cb60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cb5a:	230e      	movs	r3, #14
 800cb5c:	617b      	str	r3, [r7, #20]
 800cb5e:	e057      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	4a38      	ldr	r2, [pc, #224]	@ (800cc44 <USB_SetTurnaroundTime+0x124>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d306      	bcc.n	800cb76 <USB_SetTurnaroundTime+0x56>
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	4a37      	ldr	r2, [pc, #220]	@ (800cc48 <USB_SetTurnaroundTime+0x128>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d202      	bcs.n	800cb76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cb70:	230d      	movs	r3, #13
 800cb72:	617b      	str	r3, [r7, #20]
 800cb74:	e04c      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	4a33      	ldr	r2, [pc, #204]	@ (800cc48 <USB_SetTurnaroundTime+0x128>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d306      	bcc.n	800cb8c <USB_SetTurnaroundTime+0x6c>
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	4a32      	ldr	r2, [pc, #200]	@ (800cc4c <USB_SetTurnaroundTime+0x12c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d802      	bhi.n	800cb8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cb86:	230c      	movs	r3, #12
 800cb88:	617b      	str	r3, [r7, #20]
 800cb8a:	e041      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	4a2f      	ldr	r2, [pc, #188]	@ (800cc4c <USB_SetTurnaroundTime+0x12c>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d906      	bls.n	800cba2 <USB_SetTurnaroundTime+0x82>
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	4a2e      	ldr	r2, [pc, #184]	@ (800cc50 <USB_SetTurnaroundTime+0x130>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d802      	bhi.n	800cba2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cb9c:	230b      	movs	r3, #11
 800cb9e:	617b      	str	r3, [r7, #20]
 800cba0:	e036      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	4a2a      	ldr	r2, [pc, #168]	@ (800cc50 <USB_SetTurnaroundTime+0x130>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d906      	bls.n	800cbb8 <USB_SetTurnaroundTime+0x98>
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	4a29      	ldr	r2, [pc, #164]	@ (800cc54 <USB_SetTurnaroundTime+0x134>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d802      	bhi.n	800cbb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cbb2:	230a      	movs	r3, #10
 800cbb4:	617b      	str	r3, [r7, #20]
 800cbb6:	e02b      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	4a26      	ldr	r2, [pc, #152]	@ (800cc54 <USB_SetTurnaroundTime+0x134>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d906      	bls.n	800cbce <USB_SetTurnaroundTime+0xae>
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	4a25      	ldr	r2, [pc, #148]	@ (800cc58 <USB_SetTurnaroundTime+0x138>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d202      	bcs.n	800cbce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cbc8:	2309      	movs	r3, #9
 800cbca:	617b      	str	r3, [r7, #20]
 800cbcc:	e020      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	4a21      	ldr	r2, [pc, #132]	@ (800cc58 <USB_SetTurnaroundTime+0x138>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d306      	bcc.n	800cbe4 <USB_SetTurnaroundTime+0xc4>
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	4a20      	ldr	r2, [pc, #128]	@ (800cc5c <USB_SetTurnaroundTime+0x13c>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d802      	bhi.n	800cbe4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cbde:	2308      	movs	r3, #8
 800cbe0:	617b      	str	r3, [r7, #20]
 800cbe2:	e015      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	4a1d      	ldr	r2, [pc, #116]	@ (800cc5c <USB_SetTurnaroundTime+0x13c>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d906      	bls.n	800cbfa <USB_SetTurnaroundTime+0xda>
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	4a1c      	ldr	r2, [pc, #112]	@ (800cc60 <USB_SetTurnaroundTime+0x140>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d202      	bcs.n	800cbfa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cbf4:	2307      	movs	r3, #7
 800cbf6:	617b      	str	r3, [r7, #20]
 800cbf8:	e00a      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cbfa:	2306      	movs	r3, #6
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	e007      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d102      	bne.n	800cc0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cc06:	2309      	movs	r3, #9
 800cc08:	617b      	str	r3, [r7, #20]
 800cc0a:	e001      	b.n	800cc10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cc0c:	2309      	movs	r3, #9
 800cc0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	029b      	lsls	r3, r3, #10
 800cc24:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800cc28:	431a      	orrs	r2, r3
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	371c      	adds	r7, #28
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	00d8acbf 	.word	0x00d8acbf
 800cc40:	00e4e1c0 	.word	0x00e4e1c0
 800cc44:	00f42400 	.word	0x00f42400
 800cc48:	01067380 	.word	0x01067380
 800cc4c:	011a499f 	.word	0x011a499f
 800cc50:	01312cff 	.word	0x01312cff
 800cc54:	014ca43f 	.word	0x014ca43f
 800cc58:	016e3600 	.word	0x016e3600
 800cc5c:	01a6ab1f 	.word	0x01a6ab1f
 800cc60:	01e84800 	.word	0x01e84800

0800cc64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f043 0201 	orr.w	r2, r3, #1
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	370c      	adds	r7, #12
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc86:	b480      	push	{r7}
 800cc88:	b083      	sub	sp, #12
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	f023 0201 	bic.w	r2, r3, #1
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ccc4:	78fb      	ldrb	r3, [r7, #3]
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d115      	bne.n	800ccf6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ccd6:	200a      	movs	r0, #10
 800ccd8:	f7f4 fd86 	bl	80017e8 <HAL_Delay>
      ms += 10U;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	330a      	adds	r3, #10
 800cce0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f001 f93f 	bl	800df66 <USB_GetMode>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d01e      	beq.n	800cd2c <USB_SetCurrentMode+0x84>
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2bc7      	cmp	r3, #199	@ 0xc7
 800ccf2:	d9f0      	bls.n	800ccd6 <USB_SetCurrentMode+0x2e>
 800ccf4:	e01a      	b.n	800cd2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ccf6:	78fb      	ldrb	r3, [r7, #3]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d115      	bne.n	800cd28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cd08:	200a      	movs	r0, #10
 800cd0a:	f7f4 fd6d 	bl	80017e8 <HAL_Delay>
      ms += 10U;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	330a      	adds	r3, #10
 800cd12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f001 f926 	bl	800df66 <USB_GetMode>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d005      	beq.n	800cd2c <USB_SetCurrentMode+0x84>
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2bc7      	cmp	r3, #199	@ 0xc7
 800cd24:	d9f0      	bls.n	800cd08 <USB_SetCurrentMode+0x60>
 800cd26:	e001      	b.n	800cd2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e005      	b.n	800cd38 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2bc8      	cmp	r3, #200	@ 0xc8
 800cd30:	d101      	bne.n	800cd36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e000      	b.n	800cd38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd40:	b084      	sub	sp, #16
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b086      	sub	sp, #24
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800cd4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	613b      	str	r3, [r7, #16]
 800cd5e:	e009      	b.n	800cd74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	3340      	adds	r3, #64	@ 0x40
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	3301      	adds	r3, #1
 800cd72:	613b      	str	r3, [r7, #16]
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	2b0e      	cmp	r3, #14
 800cd78:	d9f2      	bls.n	800cd60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cd7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d11c      	bne.n	800cdbc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cd90:	f043 0302 	orr.w	r3, r3, #2
 800cd94:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd9a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	e005      	b.n	800cdc8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cdce:	461a      	mov	r2, r3
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cdd4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d10d      	bne.n	800cdf8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d104      	bne.n	800cdee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cde4:	2100      	movs	r1, #0
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f968 	bl	800d0bc <USB_SetDevSpeed>
 800cdec:	e008      	b.n	800ce00 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cdee:	2101      	movs	r1, #1
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f963 	bl	800d0bc <USB_SetDevSpeed>
 800cdf6:	e003      	b.n	800ce00 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cdf8:	2103      	movs	r1, #3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f95e 	bl	800d0bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce00:	2110      	movs	r1, #16
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f8fa 	bl	800cffc <USB_FlushTxFifo>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 f924 	bl	800d060 <USB_FlushRxFifo>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce28:	461a      	mov	r2, r3
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce34:	461a      	mov	r2, r3
 800ce36:	2300      	movs	r3, #0
 800ce38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce40:	461a      	mov	r2, r3
 800ce42:	2300      	movs	r3, #0
 800ce44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce46:	2300      	movs	r3, #0
 800ce48:	613b      	str	r3, [r7, #16]
 800ce4a:	e043      	b.n	800ced4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	015a      	lsls	r2, r3, #5
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	4413      	add	r3, r2
 800ce54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce62:	d118      	bne.n	800ce96 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10a      	bne.n	800ce80 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	015a      	lsls	r2, r3, #5
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	4413      	add	r3, r2
 800ce72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce76:	461a      	mov	r2, r3
 800ce78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	e013      	b.n	800cea8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	e008      	b.n	800cea8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	015a      	lsls	r2, r3, #5
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cea2:	461a      	mov	r2, r3
 800cea4:	2300      	movs	r3, #0
 800cea6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	015a      	lsls	r2, r3, #5
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	4413      	add	r3, r2
 800ceb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	015a      	lsls	r2, r3, #5
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4413      	add	r3, r2
 800cec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cec6:	461a      	mov	r2, r3
 800cec8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cecc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	3301      	adds	r3, #1
 800ced2:	613b      	str	r3, [r7, #16]
 800ced4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ced8:	461a      	mov	r2, r3
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	4293      	cmp	r3, r2
 800cede:	d3b5      	bcc.n	800ce4c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cee0:	2300      	movs	r3, #0
 800cee2:	613b      	str	r3, [r7, #16]
 800cee4:	e043      	b.n	800cf6e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	015a      	lsls	r2, r3, #5
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	4413      	add	r3, r2
 800ceee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cefc:	d118      	bne.n	800cf30 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	015a      	lsls	r2, r3, #5
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf10:	461a      	mov	r2, r3
 800cf12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	e013      	b.n	800cf42 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	015a      	lsls	r2, r3, #5
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	4413      	add	r3, r2
 800cf22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf26:	461a      	mov	r2, r3
 800cf28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cf2c:	6013      	str	r3, [r2, #0]
 800cf2e:	e008      	b.n	800cf42 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	015a      	lsls	r2, r3, #5
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	2300      	movs	r3, #0
 800cf40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	015a      	lsls	r2, r3, #5
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	4413      	add	r3, r2
 800cf4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf4e:	461a      	mov	r2, r3
 800cf50:	2300      	movs	r3, #0
 800cf52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	015a      	lsls	r2, r3, #5
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf60:	461a      	mov	r2, r3
 800cf62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cf66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	613b      	str	r3, [r7, #16]
 800cf6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cf72:	461a      	mov	r2, r3
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d3b5      	bcc.n	800cee6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800cf9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cf9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d105      	bne.n	800cfb0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	699b      	ldr	r3, [r3, #24]
 800cfa8:	f043 0210 	orr.w	r2, r3, #16
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	699a      	ldr	r2, [r3, #24]
 800cfb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cff4 <USB_DevInit+0x2b4>)
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cfbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d005      	beq.n	800cfd0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	f043 0208 	orr.w	r2, r3, #8
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cfd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d105      	bne.n	800cfe4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	699a      	ldr	r2, [r3, #24]
 800cfdc:	4b06      	ldr	r3, [pc, #24]	@ (800cff8 <USB_DevInit+0x2b8>)
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cfe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3718      	adds	r7, #24
 800cfea:	46bd      	mov	sp, r7
 800cfec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cff0:	b004      	add	sp, #16
 800cff2:	4770      	bx	lr
 800cff4:	803c3800 	.word	0x803c3800
 800cff8:	40000004 	.word	0x40000004

0800cffc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d006:	2300      	movs	r3, #0
 800d008:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3301      	adds	r3, #1
 800d00e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d016:	d901      	bls.n	800d01c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d018:	2303      	movs	r3, #3
 800d01a:	e01b      	b.n	800d054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	2b00      	cmp	r3, #0
 800d022:	daf2      	bge.n	800d00a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d024:	2300      	movs	r3, #0
 800d026:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	019b      	lsls	r3, r3, #6
 800d02c:	f043 0220 	orr.w	r2, r3, #32
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3301      	adds	r3, #1
 800d038:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d040:	d901      	bls.n	800d046 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e006      	b.n	800d054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	f003 0320 	and.w	r3, r3, #32
 800d04e:	2b20      	cmp	r3, #32
 800d050:	d0f0      	beq.n	800d034 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3714      	adds	r7, #20
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d068:	2300      	movs	r3, #0
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	3301      	adds	r3, #1
 800d070:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d078:	d901      	bls.n	800d07e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d07a:	2303      	movs	r3, #3
 800d07c:	e018      	b.n	800d0b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	2b00      	cmp	r3, #0
 800d084:	daf2      	bge.n	800d06c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d086:	2300      	movs	r3, #0
 800d088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2210      	movs	r2, #16
 800d08e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3301      	adds	r3, #1
 800d094:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d09c:	d901      	bls.n	800d0a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e006      	b.n	800d0b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	f003 0310 	and.w	r3, r3, #16
 800d0aa:	2b10      	cmp	r3, #16
 800d0ac:	d0f0      	beq.n	800d090 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	78fb      	ldrb	r3, [r7, #3]
 800d0d6:	68f9      	ldr	r1, [r7, #12]
 800d0d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr

0800d0ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d0ee:	b480      	push	{r7}
 800d0f0:	b087      	sub	sp, #28
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f003 0306 	and.w	r3, r3, #6
 800d106:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d102      	bne.n	800d114 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d10e:	2300      	movs	r3, #0
 800d110:	75fb      	strb	r3, [r7, #23]
 800d112:	e00a      	b.n	800d12a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2b02      	cmp	r3, #2
 800d118:	d002      	beq.n	800d120 <USB_GetDevSpeed+0x32>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b06      	cmp	r3, #6
 800d11e:	d102      	bne.n	800d126 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d120:	2302      	movs	r3, #2
 800d122:	75fb      	strb	r3, [r7, #23]
 800d124:	e001      	b.n	800d12a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d126:	230f      	movs	r3, #15
 800d128:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	371c      	adds	r7, #28
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	785b      	ldrb	r3, [r3, #1]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d139      	bne.n	800d1c8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d15a:	69da      	ldr	r2, [r3, #28]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	f003 030f 	and.w	r3, r3, #15
 800d164:	2101      	movs	r1, #1
 800d166:	fa01 f303 	lsl.w	r3, r1, r3
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	68f9      	ldr	r1, [r7, #12]
 800d16e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d172:	4313      	orrs	r3, r2
 800d174:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	015a      	lsls	r2, r3, #5
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	4413      	add	r3, r2
 800d17e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d153      	bne.n	800d234 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	015a      	lsls	r2, r3, #5
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	4413      	add	r3, r2
 800d194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	791b      	ldrb	r3, [r3, #4]
 800d1a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d1a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	059b      	lsls	r3, r3, #22
 800d1ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d1b0:	431a      	orrs	r2, r3
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	0159      	lsls	r1, r3, #5
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	440b      	add	r3, r1
 800d1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4b20      	ldr	r3, [pc, #128]	@ (800d244 <USB_ActivateEndpoint+0x10c>)
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	600b      	str	r3, [r1, #0]
 800d1c6:	e035      	b.n	800d234 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1ce:	69da      	ldr	r2, [r3, #28]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	f003 030f 	and.w	r3, r3, #15
 800d1d8:	2101      	movs	r1, #1
 800d1da:	fa01 f303 	lsl.w	r3, r1, r3
 800d1de:	041b      	lsls	r3, r3, #16
 800d1e0:	68f9      	ldr	r1, [r7, #12]
 800d1e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d119      	bne.n	800d234 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	791b      	ldrb	r3, [r3, #4]
 800d21a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d21c:	430b      	orrs	r3, r1
 800d21e:	431a      	orrs	r2, r3
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	0159      	lsls	r1, r3, #5
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	440b      	add	r3, r1
 800d228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d22c:	4619      	mov	r1, r3
 800d22e:	4b05      	ldr	r3, [pc, #20]	@ (800d244 <USB_ActivateEndpoint+0x10c>)
 800d230:	4313      	orrs	r3, r2
 800d232:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	10008000 	.word	0x10008000

0800d248 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	785b      	ldrb	r3, [r3, #1]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d161      	bne.n	800d328 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	015a      	lsls	r2, r3, #5
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	4413      	add	r3, r2
 800d26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d27a:	d11f      	bne.n	800d2bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	015a      	lsls	r2, r3, #5
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	4413      	add	r3, r2
 800d284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	0151      	lsls	r1, r2, #5
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	440a      	add	r2, r1
 800d292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d296:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d29a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	015a      	lsls	r2, r3, #5
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	0151      	lsls	r1, r2, #5
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	440a      	add	r2, r1
 800d2b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d2b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d2ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	f003 030f 	and.w	r3, r3, #15
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	43db      	mvns	r3, r3
 800d2d6:	68f9      	ldr	r1, [r7, #12]
 800d2d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d2dc:	4013      	ands	r3, r2
 800d2de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2e6:	69da      	ldr	r2, [r3, #28]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	f003 030f 	and.w	r3, r3, #15
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	43db      	mvns	r3, r3
 800d2fa:	68f9      	ldr	r1, [r7, #12]
 800d2fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d300:	4013      	ands	r3, r2
 800d302:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	015a      	lsls	r2, r3, #5
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	0159      	lsls	r1, r3, #5
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	440b      	add	r3, r1
 800d31a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d31e:	4619      	mov	r1, r3
 800d320:	4b35      	ldr	r3, [pc, #212]	@ (800d3f8 <USB_DeactivateEndpoint+0x1b0>)
 800d322:	4013      	ands	r3, r2
 800d324:	600b      	str	r3, [r1, #0]
 800d326:	e060      	b.n	800d3ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d33a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d33e:	d11f      	bne.n	800d380 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	015a      	lsls	r2, r3, #5
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	4413      	add	r3, r2
 800d348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	0151      	lsls	r1, r2, #5
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	440a      	add	r2, r1
 800d356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d35a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d35e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4413      	add	r3, r2
 800d368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	0151      	lsls	r1, r2, #5
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	440a      	add	r2, r1
 800d376:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d37a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d37e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	f003 030f 	and.w	r3, r3, #15
 800d390:	2101      	movs	r1, #1
 800d392:	fa01 f303 	lsl.w	r3, r1, r3
 800d396:	041b      	lsls	r3, r3, #16
 800d398:	43db      	mvns	r3, r3
 800d39a:	68f9      	ldr	r1, [r7, #12]
 800d39c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3aa:	69da      	ldr	r2, [r3, #28]
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	f003 030f 	and.w	r3, r3, #15
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d3ba:	041b      	lsls	r3, r3, #16
 800d3bc:	43db      	mvns	r3, r3
 800d3be:	68f9      	ldr	r1, [r7, #12]
 800d3c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d3c4:	4013      	ands	r3, r2
 800d3c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	015a      	lsls	r2, r3, #5
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	0159      	lsls	r1, r3, #5
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	440b      	add	r3, r1
 800d3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4b05      	ldr	r3, [pc, #20]	@ (800d3fc <USB_DeactivateEndpoint+0x1b4>)
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	ec337800 	.word	0xec337800
 800d3fc:	eff37800 	.word	0xeff37800

0800d400 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08a      	sub	sp, #40	@ 0x28
 800d404:	af02      	add	r7, sp, #8
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	4613      	mov	r3, r2
 800d40c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	785b      	ldrb	r3, [r3, #1]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	f040 8185 	bne.w	800d72c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	691b      	ldr	r3, [r3, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d132      	bne.n	800d490 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	015a      	lsls	r2, r3, #5
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	4413      	add	r3, r2
 800d432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d436:	691a      	ldr	r2, [r3, #16]
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	0159      	lsls	r1, r3, #5
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	440b      	add	r3, r1
 800d440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d444:	4619      	mov	r1, r3
 800d446:	4ba7      	ldr	r3, [pc, #668]	@ (800d6e4 <USB_EPStartXfer+0x2e4>)
 800d448:	4013      	ands	r3, r2
 800d44a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	015a      	lsls	r2, r3, #5
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	4413      	add	r3, r2
 800d454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	0151      	lsls	r1, r2, #5
 800d45e:	69fa      	ldr	r2, [r7, #28]
 800d460:	440a      	add	r2, r1
 800d462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d466:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d46a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	015a      	lsls	r2, r3, #5
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	4413      	add	r3, r2
 800d474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d478:	691a      	ldr	r2, [r3, #16]
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	0159      	lsls	r1, r3, #5
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	440b      	add	r3, r1
 800d482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d486:	4619      	mov	r1, r3
 800d488:	4b97      	ldr	r3, [pc, #604]	@ (800d6e8 <USB_EPStartXfer+0x2e8>)
 800d48a:	4013      	ands	r3, r2
 800d48c:	610b      	str	r3, [r1, #16]
 800d48e:	e097      	b.n	800d5c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d49c:	691a      	ldr	r2, [r3, #16]
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	0159      	lsls	r1, r3, #5
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	440b      	add	r3, r1
 800d4a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	4b8e      	ldr	r3, [pc, #568]	@ (800d6e8 <USB_EPStartXfer+0x2e8>)
 800d4ae:	4013      	ands	r3, r2
 800d4b0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	015a      	lsls	r2, r3, #5
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4be:	691a      	ldr	r2, [r3, #16]
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	0159      	lsls	r1, r3, #5
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	440b      	add	r3, r1
 800d4c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	4b85      	ldr	r3, [pc, #532]	@ (800d6e4 <USB_EPStartXfer+0x2e4>)
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d11a      	bne.n	800d510 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	691a      	ldr	r2, [r3, #16]
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d903      	bls.n	800d4ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	689a      	ldr	r2, [r3, #8]
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	015a      	lsls	r2, r3, #5
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	0151      	lsls	r1, r2, #5
 800d500:	69fa      	ldr	r2, [r7, #28]
 800d502:	440a      	add	r2, r1
 800d504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d508:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d50c:	6113      	str	r3, [r2, #16]
 800d50e:	e044      	b.n	800d59a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	691a      	ldr	r2, [r3, #16]
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	4413      	add	r3, r2
 800d51a:	1e5a      	subs	r2, r3, #1
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	fbb2 f3f3 	udiv	r3, r2, r3
 800d524:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	015a      	lsls	r2, r3, #5
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	4413      	add	r3, r2
 800d52e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d532:	691a      	ldr	r2, [r3, #16]
 800d534:	8afb      	ldrh	r3, [r7, #22]
 800d536:	04d9      	lsls	r1, r3, #19
 800d538:	4b6c      	ldr	r3, [pc, #432]	@ (800d6ec <USB_EPStartXfer+0x2ec>)
 800d53a:	400b      	ands	r3, r1
 800d53c:	69b9      	ldr	r1, [r7, #24]
 800d53e:	0148      	lsls	r0, r1, #5
 800d540:	69f9      	ldr	r1, [r7, #28]
 800d542:	4401      	add	r1, r0
 800d544:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d548:	4313      	orrs	r3, r2
 800d54a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	791b      	ldrb	r3, [r3, #4]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d122      	bne.n	800d59a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	015a      	lsls	r2, r3, #5
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	4413      	add	r3, r2
 800d55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	69ba      	ldr	r2, [r7, #24]
 800d564:	0151      	lsls	r1, r2, #5
 800d566:	69fa      	ldr	r2, [r7, #28]
 800d568:	440a      	add	r2, r1
 800d56a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d56e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d572:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	015a      	lsls	r2, r3, #5
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	4413      	add	r3, r2
 800d57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d580:	691a      	ldr	r2, [r3, #16]
 800d582:	8afb      	ldrh	r3, [r7, #22]
 800d584:	075b      	lsls	r3, r3, #29
 800d586:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d58a:	69b9      	ldr	r1, [r7, #24]
 800d58c:	0148      	lsls	r0, r1, #5
 800d58e:	69f9      	ldr	r1, [r7, #28]
 800d590:	4401      	add	r1, r0
 800d592:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d596:	4313      	orrs	r3, r2
 800d598:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5a6:	691a      	ldr	r2, [r3, #16]
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5b0:	69b9      	ldr	r1, [r7, #24]
 800d5b2:	0148      	lsls	r0, r1, #5
 800d5b4:	69f9      	ldr	r1, [r7, #28]
 800d5b6:	4401      	add	r1, r0
 800d5b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d14b      	bne.n	800d65e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	69db      	ldr	r3, [r3, #28]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d009      	beq.n	800d5e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	015a      	lsls	r2, r3, #5
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5da:	461a      	mov	r2, r3
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	69db      	ldr	r3, [r3, #28]
 800d5e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	791b      	ldrb	r3, [r3, #4]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d128      	bne.n	800d63c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d110      	bne.n	800d61c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	015a      	lsls	r2, r3, #5
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	4413      	add	r3, r2
 800d602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	69ba      	ldr	r2, [r7, #24]
 800d60a:	0151      	lsls	r1, r2, #5
 800d60c:	69fa      	ldr	r2, [r7, #28]
 800d60e:	440a      	add	r2, r1
 800d610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d614:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d618:	6013      	str	r3, [r2, #0]
 800d61a:	e00f      	b.n	800d63c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	015a      	lsls	r2, r3, #5
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	4413      	add	r3, r2
 800d624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	0151      	lsls	r1, r2, #5
 800d62e:	69fa      	ldr	r2, [r7, #28]
 800d630:	440a      	add	r2, r1
 800d632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d63a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	015a      	lsls	r2, r3, #5
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	4413      	add	r3, r2
 800d644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	69ba      	ldr	r2, [r7, #24]
 800d64c:	0151      	lsls	r1, r2, #5
 800d64e:	69fa      	ldr	r2, [r7, #28]
 800d650:	440a      	add	r2, r1
 800d652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d656:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d65a:	6013      	str	r3, [r2, #0]
 800d65c:	e169      	b.n	800d932 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	015a      	lsls	r2, r3, #5
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	4413      	add	r3, r2
 800d666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	0151      	lsls	r1, r2, #5
 800d670:	69fa      	ldr	r2, [r7, #28]
 800d672:	440a      	add	r2, r1
 800d674:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d678:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d67c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	791b      	ldrb	r3, [r3, #4]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d015      	beq.n	800d6b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f000 8151 	beq.w	800d932 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	f003 030f 	and.w	r3, r3, #15
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	fa01 f303 	lsl.w	r3, r1, r3
 800d6a6:	69f9      	ldr	r1, [r7, #28]
 800d6a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	634b      	str	r3, [r1, #52]	@ 0x34
 800d6b0:	e13f      	b.n	800d932 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d116      	bne.n	800d6f0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	015a      	lsls	r2, r3, #5
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	69ba      	ldr	r2, [r7, #24]
 800d6d2:	0151      	lsls	r1, r2, #5
 800d6d4:	69fa      	ldr	r2, [r7, #28]
 800d6d6:	440a      	add	r2, r1
 800d6d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d6e0:	6013      	str	r3, [r2, #0]
 800d6e2:	e015      	b.n	800d710 <USB_EPStartXfer+0x310>
 800d6e4:	e007ffff 	.word	0xe007ffff
 800d6e8:	fff80000 	.word	0xfff80000
 800d6ec:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	015a      	lsls	r2, r3, #5
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	69ba      	ldr	r2, [r7, #24]
 800d700:	0151      	lsls	r1, r2, #5
 800d702:	69fa      	ldr	r2, [r7, #28]
 800d704:	440a      	add	r2, r1
 800d706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d70a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d70e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	68d9      	ldr	r1, [r3, #12]
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	781a      	ldrb	r2, [r3, #0]
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	b298      	uxth	r0, r3
 800d71e:	79fb      	ldrb	r3, [r7, #7]
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	4603      	mov	r3, r0
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f000 f9b9 	bl	800da9c <USB_WritePacket>
 800d72a:	e102      	b.n	800d932 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d738:	691a      	ldr	r2, [r3, #16]
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	0159      	lsls	r1, r3, #5
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	440b      	add	r3, r1
 800d742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d746:	4619      	mov	r1, r3
 800d748:	4b7c      	ldr	r3, [pc, #496]	@ (800d93c <USB_EPStartXfer+0x53c>)
 800d74a:	4013      	ands	r3, r2
 800d74c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	015a      	lsls	r2, r3, #5
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	4413      	add	r3, r2
 800d756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d75a:	691a      	ldr	r2, [r3, #16]
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	0159      	lsls	r1, r3, #5
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	440b      	add	r3, r1
 800d764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d768:	4619      	mov	r1, r3
 800d76a:	4b75      	ldr	r3, [pc, #468]	@ (800d940 <USB_EPStartXfer+0x540>)
 800d76c:	4013      	ands	r3, r2
 800d76e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d12f      	bne.n	800d7d6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	689a      	ldr	r2, [r3, #8]
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	689a      	ldr	r2, [r3, #8]
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	015a      	lsls	r2, r3, #5
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	4413      	add	r3, r2
 800d796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d79a:	691a      	ldr	r2, [r3, #16]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	6a1b      	ldr	r3, [r3, #32]
 800d7a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7a4:	69b9      	ldr	r1, [r7, #24]
 800d7a6:	0148      	lsls	r0, r1, #5
 800d7a8:	69f9      	ldr	r1, [r7, #28]
 800d7aa:	4401      	add	r1, r0
 800d7ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	015a      	lsls	r2, r3, #5
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	69ba      	ldr	r2, [r7, #24]
 800d7c4:	0151      	lsls	r1, r2, #5
 800d7c6:	69fa      	ldr	r2, [r7, #28]
 800d7c8:	440a      	add	r2, r1
 800d7ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d7ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d7d2:	6113      	str	r3, [r2, #16]
 800d7d4:	e05f      	b.n	800d896 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d123      	bne.n	800d826 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	015a      	lsls	r2, r3, #5
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7ea:	691a      	ldr	r2, [r3, #16]
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7f4:	69b9      	ldr	r1, [r7, #24]
 800d7f6:	0148      	lsls	r0, r1, #5
 800d7f8:	69f9      	ldr	r1, [r7, #28]
 800d7fa:	4401      	add	r1, r0
 800d7fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d800:	4313      	orrs	r3, r2
 800d802:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	015a      	lsls	r2, r3, #5
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	4413      	add	r3, r2
 800d80c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	69ba      	ldr	r2, [r7, #24]
 800d814:	0151      	lsls	r1, r2, #5
 800d816:	69fa      	ldr	r2, [r7, #28]
 800d818:	440a      	add	r2, r1
 800d81a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d81e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d822:	6113      	str	r3, [r2, #16]
 800d824:	e037      	b.n	800d896 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	691a      	ldr	r2, [r3, #16]
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	4413      	add	r3, r2
 800d830:	1e5a      	subs	r2, r3, #1
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	fbb2 f3f3 	udiv	r3, r2, r3
 800d83a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	8afa      	ldrh	r2, [r7, #22]
 800d842:	fb03 f202 	mul.w	r2, r3, r2
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	015a      	lsls	r2, r3, #5
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	4413      	add	r3, r2
 800d852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d856:	691a      	ldr	r2, [r3, #16]
 800d858:	8afb      	ldrh	r3, [r7, #22]
 800d85a:	04d9      	lsls	r1, r3, #19
 800d85c:	4b39      	ldr	r3, [pc, #228]	@ (800d944 <USB_EPStartXfer+0x544>)
 800d85e:	400b      	ands	r3, r1
 800d860:	69b9      	ldr	r1, [r7, #24]
 800d862:	0148      	lsls	r0, r1, #5
 800d864:	69f9      	ldr	r1, [r7, #28]
 800d866:	4401      	add	r1, r0
 800d868:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d86c:	4313      	orrs	r3, r2
 800d86e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	015a      	lsls	r2, r3, #5
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	4413      	add	r3, r2
 800d878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d87c:	691a      	ldr	r2, [r3, #16]
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	6a1b      	ldr	r3, [r3, #32]
 800d882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d886:	69b9      	ldr	r1, [r7, #24]
 800d888:	0148      	lsls	r0, r1, #5
 800d88a:	69f9      	ldr	r1, [r7, #28]
 800d88c:	4401      	add	r1, r0
 800d88e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d892:	4313      	orrs	r3, r2
 800d894:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d896:	79fb      	ldrb	r3, [r7, #7]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d10d      	bne.n	800d8b8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d009      	beq.n	800d8b8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	68d9      	ldr	r1, [r3, #12]
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	015a      	lsls	r2, r3, #5
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8b4:	460a      	mov	r2, r1
 800d8b6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	791b      	ldrb	r3, [r3, #4]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d128      	bne.n	800d912 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d110      	bne.n	800d8f2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	015a      	lsls	r2, r3, #5
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	69ba      	ldr	r2, [r7, #24]
 800d8e0:	0151      	lsls	r1, r2, #5
 800d8e2:	69fa      	ldr	r2, [r7, #28]
 800d8e4:	440a      	add	r2, r1
 800d8e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	e00f      	b.n	800d912 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	015a      	lsls	r2, r3, #5
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	0151      	lsls	r1, r2, #5
 800d904:	69fa      	ldr	r2, [r7, #28]
 800d906:	440a      	add	r2, r1
 800d908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d90c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d910:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	015a      	lsls	r2, r3, #5
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	4413      	add	r3, r2
 800d91a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	0151      	lsls	r1, r2, #5
 800d924:	69fa      	ldr	r2, [r7, #28]
 800d926:	440a      	add	r2, r1
 800d928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d92c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d930:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3720      	adds	r7, #32
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	fff80000 	.word	0xfff80000
 800d940:	e007ffff 	.word	0xe007ffff
 800d944:	1ff80000 	.word	0x1ff80000

0800d948 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d948:	b480      	push	{r7}
 800d94a:	b087      	sub	sp, #28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d952:	2300      	movs	r3, #0
 800d954:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	785b      	ldrb	r3, [r3, #1]
 800d962:	2b01      	cmp	r3, #1
 800d964:	d14a      	bne.n	800d9fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	015a      	lsls	r2, r3, #5
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	4413      	add	r3, r2
 800d970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d97a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d97e:	f040 8086 	bne.w	800da8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	015a      	lsls	r2, r3, #5
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	7812      	ldrb	r2, [r2, #0]
 800d996:	0151      	lsls	r1, r2, #5
 800d998:	693a      	ldr	r2, [r7, #16]
 800d99a:	440a      	add	r2, r1
 800d99c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d9a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d9a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	015a      	lsls	r2, r3, #5
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	7812      	ldrb	r2, [r2, #0]
 800d9ba:	0151      	lsls	r1, r2, #5
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	440a      	add	r2, r1
 800d9c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d9c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d9c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d902      	bls.n	800d9e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	75fb      	strb	r3, [r7, #23]
          break;
 800d9de:	e056      	b.n	800da8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	015a      	lsls	r2, r3, #5
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d9f8:	d0e7      	beq.n	800d9ca <USB_EPStopXfer+0x82>
 800d9fa:	e048      	b.n	800da8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	4413      	add	r3, r2
 800da06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800da10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800da14:	d13b      	bne.n	800da8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	015a      	lsls	r2, r3, #5
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	4413      	add	r3, r2
 800da20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	683a      	ldr	r2, [r7, #0]
 800da28:	7812      	ldrb	r2, [r2, #0]
 800da2a:	0151      	lsls	r1, r2, #5
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	440a      	add	r2, r1
 800da30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800da38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	015a      	lsls	r2, r3, #5
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	4413      	add	r3, r2
 800da44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	7812      	ldrb	r2, [r2, #0]
 800da4e:	0151      	lsls	r1, r2, #5
 800da50:	693a      	ldr	r2, [r7, #16]
 800da52:	440a      	add	r2, r1
 800da54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800da5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3301      	adds	r3, #1
 800da62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f242 7210 	movw	r2, #10000	@ 0x2710
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d902      	bls.n	800da74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	75fb      	strb	r3, [r7, #23]
          break;
 800da72:	e00c      	b.n	800da8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	015a      	lsls	r2, r3, #5
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	4413      	add	r3, r2
 800da7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800da88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800da8c:	d0e7      	beq.n	800da5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800da8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da90:	4618      	mov	r0, r3
 800da92:	371c      	adds	r7, #28
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b089      	sub	sp, #36	@ 0x24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	4611      	mov	r1, r2
 800daa8:	461a      	mov	r2, r3
 800daaa:	460b      	mov	r3, r1
 800daac:	71fb      	strb	r3, [r7, #7]
 800daae:	4613      	mov	r3, r2
 800dab0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800daba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d123      	bne.n	800db0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dac2:	88bb      	ldrh	r3, [r7, #4]
 800dac4:	3303      	adds	r3, #3
 800dac6:	089b      	lsrs	r3, r3, #2
 800dac8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800daca:	2300      	movs	r3, #0
 800dacc:	61bb      	str	r3, [r7, #24]
 800dace:	e018      	b.n	800db02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	031a      	lsls	r2, r3, #12
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	4413      	add	r3, r2
 800dad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dadc:	461a      	mov	r2, r3
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	3301      	adds	r3, #1
 800dae8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	3301      	adds	r3, #1
 800daee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	3301      	adds	r3, #1
 800daf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	3301      	adds	r3, #1
 800dafa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	3301      	adds	r3, #1
 800db00:	61bb      	str	r3, [r7, #24]
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	429a      	cmp	r2, r3
 800db08:	d3e2      	bcc.n	800dad0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3724      	adds	r7, #36	@ 0x24
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800db18:	b480      	push	{r7}
 800db1a:	b08b      	sub	sp, #44	@ 0x2c
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	4613      	mov	r3, r2
 800db24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800db2e:	88fb      	ldrh	r3, [r7, #6]
 800db30:	089b      	lsrs	r3, r3, #2
 800db32:	b29b      	uxth	r3, r3
 800db34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800db36:	88fb      	ldrh	r3, [r7, #6]
 800db38:	f003 0303 	and.w	r3, r3, #3
 800db3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800db3e:	2300      	movs	r3, #0
 800db40:	623b      	str	r3, [r7, #32]
 800db42:	e014      	b.n	800db6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4e:	601a      	str	r2, [r3, #0]
    pDest++;
 800db50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db52:	3301      	adds	r3, #1
 800db54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db58:	3301      	adds	r3, #1
 800db5a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5e:	3301      	adds	r3, #1
 800db60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db64:	3301      	adds	r3, #1
 800db66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800db68:	6a3b      	ldr	r3, [r7, #32]
 800db6a:	3301      	adds	r3, #1
 800db6c:	623b      	str	r3, [r7, #32]
 800db6e:	6a3a      	ldr	r2, [r7, #32]
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	429a      	cmp	r2, r3
 800db74:	d3e6      	bcc.n	800db44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800db76:	8bfb      	ldrh	r3, [r7, #30]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d01e      	beq.n	800dbba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800db7c:	2300      	movs	r3, #0
 800db7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db86:	461a      	mov	r2, r3
 800db88:	f107 0310 	add.w	r3, r7, #16
 800db8c:	6812      	ldr	r2, [r2, #0]
 800db8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800db90:	693a      	ldr	r2, [r7, #16]
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	b2db      	uxtb	r3, r3
 800db96:	00db      	lsls	r3, r3, #3
 800db98:	fa22 f303 	lsr.w	r3, r2, r3
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba0:	701a      	strb	r2, [r3, #0]
      i++;
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	3301      	adds	r3, #1
 800dba6:	623b      	str	r3, [r7, #32]
      pDest++;
 800dba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbaa:	3301      	adds	r3, #1
 800dbac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800dbae:	8bfb      	ldrh	r3, [r7, #30]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dbb4:	8bfb      	ldrh	r3, [r7, #30]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1ea      	bne.n	800db90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	372c      	adds	r7, #44	@ 0x2c
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	785b      	ldrb	r3, [r3, #1]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d12c      	bne.n	800dc3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	015a      	lsls	r2, r3, #5
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	4413      	add	r3, r2
 800dbec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	db12      	blt.n	800dc1c <USB_EPSetStall+0x54>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00f      	beq.n	800dc1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	015a      	lsls	r2, r3, #5
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	4413      	add	r3, r2
 800dc04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	0151      	lsls	r1, r2, #5
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	440a      	add	r2, r1
 800dc12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dc1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	015a      	lsls	r2, r3, #5
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	4413      	add	r3, r2
 800dc24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	0151      	lsls	r1, r2, #5
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	440a      	add	r2, r1
 800dc32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	e02b      	b.n	800dc96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	015a      	lsls	r2, r3, #5
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	4413      	add	r3, r2
 800dc46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	db12      	blt.n	800dc76 <USB_EPSetStall+0xae>
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00f      	beq.n	800dc76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	015a      	lsls	r2, r3, #5
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	0151      	lsls	r1, r2, #5
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	440a      	add	r2, r1
 800dc6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dc74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	015a      	lsls	r2, r3, #5
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	0151      	lsls	r1, r2, #5
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	440a      	add	r2, r1
 800dc8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dc94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3714      	adds	r7, #20
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	785b      	ldrb	r3, [r3, #1]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d128      	bne.n	800dd12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	015a      	lsls	r2, r3, #5
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	0151      	lsls	r1, r2, #5
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	440a      	add	r2, r1
 800dcd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dcde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	791b      	ldrb	r3, [r3, #4]
 800dce4:	2b03      	cmp	r3, #3
 800dce6:	d003      	beq.n	800dcf0 <USB_EPClearStall+0x4c>
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	791b      	ldrb	r3, [r3, #4]
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d138      	bne.n	800dd62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	015a      	lsls	r2, r3, #5
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	68ba      	ldr	r2, [r7, #8]
 800dd00:	0151      	lsls	r1, r2, #5
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	440a      	add	r2, r1
 800dd06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd0e:	6013      	str	r3, [r2, #0]
 800dd10:	e027      	b.n	800dd62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	015a      	lsls	r2, r3, #5
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	4413      	add	r3, r2
 800dd1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	68ba      	ldr	r2, [r7, #8]
 800dd22:	0151      	lsls	r1, r2, #5
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	440a      	add	r2, r1
 800dd28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dd30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	791b      	ldrb	r3, [r3, #4]
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	d003      	beq.n	800dd42 <USB_EPClearStall+0x9e>
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	791b      	ldrb	r3, [r3, #4]
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d10f      	bne.n	800dd62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	015a      	lsls	r2, r3, #5
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	4413      	add	r3, r2
 800dd4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	0151      	lsls	r1, r2, #5
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	440a      	add	r2, r1
 800dd58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd8e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800dd92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	78fb      	ldrb	r3, [r7, #3]
 800dd9e:	011b      	lsls	r3, r3, #4
 800dda0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800dda4:	68f9      	ldr	r1, [r7, #12]
 800dda6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3714      	adds	r7, #20
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ddd6:	f023 0303 	bic.w	r3, r3, #3
 800ddda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ddea:	f023 0302 	bic.w	r3, r3, #2
 800ddee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3714      	adds	r7, #20
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ddfe:	b480      	push	{r7}
 800de00:	b085      	sub	sp, #20
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800de18:	f023 0303 	bic.w	r3, r3, #3
 800de1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de2c:	f043 0302 	orr.w	r3, r3, #2
 800de30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800de32:	2300      	movs	r3, #0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	695b      	ldr	r3, [r3, #20]
 800de4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	4013      	ands	r3, r2
 800de56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800de58:	68fb      	ldr	r3, [r7, #12]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3714      	adds	r7, #20
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr

0800de66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800de66:	b480      	push	{r7}
 800de68:	b085      	sub	sp, #20
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de82:	69db      	ldr	r3, [r3, #28]
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	4013      	ands	r3, r2
 800de88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	0c1b      	lsrs	r3, r3, #16
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr

0800de9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800de9a:	b480      	push	{r7}
 800de9c:	b085      	sub	sp, #20
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deac:	699b      	ldr	r3, [r3, #24]
 800deae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deb6:	69db      	ldr	r3, [r3, #28]
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	4013      	ands	r3, r2
 800debc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	b29b      	uxth	r3, r3
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3714      	adds	r7, #20
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dece:	b480      	push	{r7}
 800ded0:	b085      	sub	sp, #20
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
 800ded6:	460b      	mov	r3, r1
 800ded8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dede:	78fb      	ldrb	r3, [r7, #3]
 800dee0:	015a      	lsls	r2, r3, #5
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	4413      	add	r3, r2
 800dee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deea:	689b      	ldr	r3, [r3, #8]
 800deec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	4013      	ands	r3, r2
 800defa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800defc:	68bb      	ldr	r3, [r7, #8]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800df0a:	b480      	push	{r7}
 800df0c:	b087      	sub	sp, #28
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	460b      	mov	r3, r1
 800df14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800df2e:	78fb      	ldrb	r3, [r7, #3]
 800df30:	f003 030f 	and.w	r3, r3, #15
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	fa22 f303 	lsr.w	r3, r2, r3
 800df3a:	01db      	lsls	r3, r3, #7
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	4313      	orrs	r3, r2
 800df42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800df44:	78fb      	ldrb	r3, [r7, #3]
 800df46:	015a      	lsls	r2, r3, #5
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	4413      	add	r3, r2
 800df4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	4013      	ands	r3, r2
 800df56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800df58:	68bb      	ldr	r3, [r7, #8]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	371c      	adds	r7, #28
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800df66:	b480      	push	{r7}
 800df68:	b083      	sub	sp, #12
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	f003 0301 	and.w	r3, r3, #1
}
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
	...

0800df84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df9e:	4619      	mov	r1, r3
 800dfa0:	4b09      	ldr	r3, [pc, #36]	@ (800dfc8 <USB_ActivateSetup+0x44>)
 800dfa2:	4013      	ands	r3, r2
 800dfa4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dfb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dfb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3714      	adds	r7, #20
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr
 800dfc8:	fffff800 	.word	0xfffff800

0800dfcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b087      	sub	sp, #28
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	333c      	adds	r3, #60	@ 0x3c
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	4a26      	ldr	r2, [pc, #152]	@ (800e084 <USB_EP0_OutStart+0xb8>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d90a      	bls.n	800e006 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dffc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e000:	d101      	bne.n	800e006 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	e037      	b.n	800e076 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e00c:	461a      	mov	r2, r3
 800e00e:	2300      	movs	r3, #0
 800e010:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e020:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e024:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e02c:	691b      	ldr	r3, [r3, #16]
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e034:	f043 0318 	orr.w	r3, r3, #24
 800e038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	697a      	ldr	r2, [r7, #20]
 800e044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e048:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e04c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e04e:	7afb      	ldrb	r3, [r7, #11]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d10f      	bne.n	800e074 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e05a:	461a      	mov	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e06e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e072:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	371c      	adds	r7, #28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	4f54300a 	.word	0x4f54300a

0800e088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e090:	2300      	movs	r3, #0
 800e092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	3301      	adds	r3, #1
 800e098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e0a0:	d901      	bls.n	800e0a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	e01b      	b.n	800e0de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	691b      	ldr	r3, [r3, #16]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	daf2      	bge.n	800e094 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	691b      	ldr	r3, [r3, #16]
 800e0b6:	f043 0201 	orr.w	r2, r3, #1
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e0ca:	d901      	bls.n	800e0d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e006      	b.n	800e0de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	f003 0301 	and.w	r3, r3, #1
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d0f0      	beq.n	800e0be <USB_CoreReset+0x36>

  return HAL_OK;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
	...

0800e0ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e0f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e0fc:	f002 fcfe 	bl	8010afc <USBD_static_malloc>
 800e100:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d109      	bne.n	800e11c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	32b0      	adds	r2, #176	@ 0xb0
 800e112:	2100      	movs	r1, #0
 800e114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e118:	2302      	movs	r3, #2
 800e11a:	e0d4      	b.n	800e2c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e11c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e120:	2100      	movs	r1, #0
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f002 fd50 	bl	8010bc8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	32b0      	adds	r2, #176	@ 0xb0
 800e132:	68f9      	ldr	r1, [r7, #12]
 800e134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	32b0      	adds	r2, #176	@ 0xb0
 800e142:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	7c1b      	ldrb	r3, [r3, #16]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d138      	bne.n	800e1c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e154:	4b5e      	ldr	r3, [pc, #376]	@ (800e2d0 <USBD_CDC_Init+0x1e4>)
 800e156:	7819      	ldrb	r1, [r3, #0]
 800e158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e15c:	2202      	movs	r2, #2
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f002 fba9 	bl	80108b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e164:	4b5a      	ldr	r3, [pc, #360]	@ (800e2d0 <USBD_CDC_Init+0x1e4>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	f003 020f 	and.w	r2, r3, #15
 800e16c:	6879      	ldr	r1, [r7, #4]
 800e16e:	4613      	mov	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	440b      	add	r3, r1
 800e178:	3324      	adds	r3, #36	@ 0x24
 800e17a:	2201      	movs	r2, #1
 800e17c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e17e:	4b55      	ldr	r3, [pc, #340]	@ (800e2d4 <USBD_CDC_Init+0x1e8>)
 800e180:	7819      	ldrb	r1, [r3, #0]
 800e182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e186:	2202      	movs	r2, #2
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f002 fb94 	bl	80108b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e18e:	4b51      	ldr	r3, [pc, #324]	@ (800e2d4 <USBD_CDC_Init+0x1e8>)
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	f003 020f 	and.w	r2, r3, #15
 800e196:	6879      	ldr	r1, [r7, #4]
 800e198:	4613      	mov	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4413      	add	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	440b      	add	r3, r1
 800e1a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e1aa:	4b4b      	ldr	r3, [pc, #300]	@ (800e2d8 <USBD_CDC_Init+0x1ec>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	f003 020f 	and.w	r2, r3, #15
 800e1b2:	6879      	ldr	r1, [r7, #4]
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	440b      	add	r3, r1
 800e1be:	3326      	adds	r3, #38	@ 0x26
 800e1c0:	2210      	movs	r2, #16
 800e1c2:	801a      	strh	r2, [r3, #0]
 800e1c4:	e035      	b.n	800e232 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e1c6:	4b42      	ldr	r3, [pc, #264]	@ (800e2d0 <USBD_CDC_Init+0x1e4>)
 800e1c8:	7819      	ldrb	r1, [r3, #0]
 800e1ca:	2340      	movs	r3, #64	@ 0x40
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f002 fb71 	bl	80108b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e1d4:	4b3e      	ldr	r3, [pc, #248]	@ (800e2d0 <USBD_CDC_Init+0x1e4>)
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	f003 020f 	and.w	r2, r3, #15
 800e1dc:	6879      	ldr	r1, [r7, #4]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	4413      	add	r3, r2
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	440b      	add	r3, r1
 800e1e8:	3324      	adds	r3, #36	@ 0x24
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e1ee:	4b39      	ldr	r3, [pc, #228]	@ (800e2d4 <USBD_CDC_Init+0x1e8>)
 800e1f0:	7819      	ldrb	r1, [r3, #0]
 800e1f2:	2340      	movs	r3, #64	@ 0x40
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f002 fb5d 	bl	80108b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e1fc:	4b35      	ldr	r3, [pc, #212]	@ (800e2d4 <USBD_CDC_Init+0x1e8>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	f003 020f 	and.w	r2, r3, #15
 800e204:	6879      	ldr	r1, [r7, #4]
 800e206:	4613      	mov	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	440b      	add	r3, r1
 800e210:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e214:	2201      	movs	r2, #1
 800e216:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e218:	4b2f      	ldr	r3, [pc, #188]	@ (800e2d8 <USBD_CDC_Init+0x1ec>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	f003 020f 	and.w	r2, r3, #15
 800e220:	6879      	ldr	r1, [r7, #4]
 800e222:	4613      	mov	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	440b      	add	r3, r1
 800e22c:	3326      	adds	r3, #38	@ 0x26
 800e22e:	2210      	movs	r2, #16
 800e230:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e232:	4b29      	ldr	r3, [pc, #164]	@ (800e2d8 <USBD_CDC_Init+0x1ec>)
 800e234:	7819      	ldrb	r1, [r3, #0]
 800e236:	2308      	movs	r3, #8
 800e238:	2203      	movs	r2, #3
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f002 fb3b 	bl	80108b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e240:	4b25      	ldr	r3, [pc, #148]	@ (800e2d8 <USBD_CDC_Init+0x1ec>)
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	f003 020f 	and.w	r2, r3, #15
 800e248:	6879      	ldr	r1, [r7, #4]
 800e24a:	4613      	mov	r3, r2
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	440b      	add	r3, r1
 800e254:	3324      	adds	r3, #36	@ 0x24
 800e256:	2201      	movs	r2, #1
 800e258:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	33b0      	adds	r3, #176	@ 0xb0
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4413      	add	r3, r2
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2200      	movs	r2, #0
 800e27a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d101      	bne.n	800e294 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e290:	2302      	movs	r3, #2
 800e292:	e018      	b.n	800e2c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	7c1b      	ldrb	r3, [r3, #16]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10a      	bne.n	800e2b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e29c:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d4 <USBD_CDC_Init+0x1e8>)
 800e29e:	7819      	ldrb	r1, [r3, #0]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e2a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f002 fbf2 	bl	8010a94 <USBD_LL_PrepareReceive>
 800e2b0:	e008      	b.n	800e2c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e2b2:	4b08      	ldr	r3, [pc, #32]	@ (800e2d4 <USBD_CDC_Init+0x1e8>)
 800e2b4:	7819      	ldrb	r1, [r3, #0]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e2bc:	2340      	movs	r3, #64	@ 0x40
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f002 fbe8 	bl	8010a94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	24000097 	.word	0x24000097
 800e2d4:	24000098 	.word	0x24000098
 800e2d8:	24000099 	.word	0x24000099

0800e2dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e2e8:	4b3a      	ldr	r3, [pc, #232]	@ (800e3d4 <USBD_CDC_DeInit+0xf8>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f002 fb07 	bl	8010902 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e2f4:	4b37      	ldr	r3, [pc, #220]	@ (800e3d4 <USBD_CDC_DeInit+0xf8>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	f003 020f 	and.w	r2, r3, #15
 800e2fc:	6879      	ldr	r1, [r7, #4]
 800e2fe:	4613      	mov	r3, r2
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	4413      	add	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	440b      	add	r3, r1
 800e308:	3324      	adds	r3, #36	@ 0x24
 800e30a:	2200      	movs	r2, #0
 800e30c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e30e:	4b32      	ldr	r3, [pc, #200]	@ (800e3d8 <USBD_CDC_DeInit+0xfc>)
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	4619      	mov	r1, r3
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f002 faf4 	bl	8010902 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e31a:	4b2f      	ldr	r3, [pc, #188]	@ (800e3d8 <USBD_CDC_DeInit+0xfc>)
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	f003 020f 	and.w	r2, r3, #15
 800e322:	6879      	ldr	r1, [r7, #4]
 800e324:	4613      	mov	r3, r2
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	4413      	add	r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	440b      	add	r3, r1
 800e32e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e332:	2200      	movs	r2, #0
 800e334:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e336:	4b29      	ldr	r3, [pc, #164]	@ (800e3dc <USBD_CDC_DeInit+0x100>)
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f002 fae0 	bl	8010902 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e342:	4b26      	ldr	r3, [pc, #152]	@ (800e3dc <USBD_CDC_DeInit+0x100>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	f003 020f 	and.w	r2, r3, #15
 800e34a:	6879      	ldr	r1, [r7, #4]
 800e34c:	4613      	mov	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	440b      	add	r3, r1
 800e356:	3324      	adds	r3, #36	@ 0x24
 800e358:	2200      	movs	r2, #0
 800e35a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e35c:	4b1f      	ldr	r3, [pc, #124]	@ (800e3dc <USBD_CDC_DeInit+0x100>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	f003 020f 	and.w	r2, r3, #15
 800e364:	6879      	ldr	r1, [r7, #4]
 800e366:	4613      	mov	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	440b      	add	r3, r1
 800e370:	3326      	adds	r3, #38	@ 0x26
 800e372:	2200      	movs	r2, #0
 800e374:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	32b0      	adds	r2, #176	@ 0xb0
 800e380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d01f      	beq.n	800e3c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	33b0      	adds	r3, #176	@ 0xb0
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	32b0      	adds	r2, #176	@ 0xb0
 800e3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f002 fbb4 	bl	8010b18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	32b0      	adds	r2, #176	@ 0xb0
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	24000097 	.word	0x24000097
 800e3d8:	24000098 	.word	0x24000098
 800e3dc:	24000099 	.word	0x24000099

0800e3e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	32b0      	adds	r2, #176	@ 0xb0
 800e3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e3fe:	2300      	movs	r3, #0
 800e400:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d101      	bne.n	800e410 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e40c:	2303      	movs	r3, #3
 800e40e:	e0bf      	b.n	800e590 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d050      	beq.n	800e4be <USBD_CDC_Setup+0xde>
 800e41c:	2b20      	cmp	r3, #32
 800e41e:	f040 80af 	bne.w	800e580 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	88db      	ldrh	r3, [r3, #6]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d03a      	beq.n	800e4a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	b25b      	sxtb	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	da1b      	bge.n	800e46c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	33b0      	adds	r3, #176	@ 0xb0
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4413      	add	r3, r2
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	683a      	ldr	r2, [r7, #0]
 800e448:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e44a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e44c:	683a      	ldr	r2, [r7, #0]
 800e44e:	88d2      	ldrh	r2, [r2, #6]
 800e450:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	88db      	ldrh	r3, [r3, #6]
 800e456:	2b07      	cmp	r3, #7
 800e458:	bf28      	it	cs
 800e45a:	2307      	movcs	r3, #7
 800e45c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	89fa      	ldrh	r2, [r7, #14]
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f001 fdbd 	bl	800ffe4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e46a:	e090      	b.n	800e58e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	785a      	ldrb	r2, [r3, #1]
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	88db      	ldrh	r3, [r3, #6]
 800e47a:	2b3f      	cmp	r3, #63	@ 0x3f
 800e47c:	d803      	bhi.n	800e486 <USBD_CDC_Setup+0xa6>
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	88db      	ldrh	r3, [r3, #6]
 800e482:	b2da      	uxtb	r2, r3
 800e484:	e000      	b.n	800e488 <USBD_CDC_Setup+0xa8>
 800e486:	2240      	movs	r2, #64	@ 0x40
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e48e:	6939      	ldr	r1, [r7, #16]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e496:	461a      	mov	r2, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 fdcf 	bl	801003c <USBD_CtlPrepareRx>
      break;
 800e49e:	e076      	b.n	800e58e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	33b0      	adds	r3, #176	@ 0xb0
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4413      	add	r3, r2
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	7850      	ldrb	r0, [r2, #1]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	4798      	blx	r3
      break;
 800e4bc:	e067      	b.n	800e58e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	785b      	ldrb	r3, [r3, #1]
 800e4c2:	2b0b      	cmp	r3, #11
 800e4c4:	d851      	bhi.n	800e56a <USBD_CDC_Setup+0x18a>
 800e4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4cc <USBD_CDC_Setup+0xec>)
 800e4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4cc:	0800e4fd 	.word	0x0800e4fd
 800e4d0:	0800e579 	.word	0x0800e579
 800e4d4:	0800e56b 	.word	0x0800e56b
 800e4d8:	0800e56b 	.word	0x0800e56b
 800e4dc:	0800e56b 	.word	0x0800e56b
 800e4e0:	0800e56b 	.word	0x0800e56b
 800e4e4:	0800e56b 	.word	0x0800e56b
 800e4e8:	0800e56b 	.word	0x0800e56b
 800e4ec:	0800e56b 	.word	0x0800e56b
 800e4f0:	0800e56b 	.word	0x0800e56b
 800e4f4:	0800e527 	.word	0x0800e527
 800e4f8:	0800e551 	.word	0x0800e551
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e502:	b2db      	uxtb	r3, r3
 800e504:	2b03      	cmp	r3, #3
 800e506:	d107      	bne.n	800e518 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e508:	f107 030a 	add.w	r3, r7, #10
 800e50c:	2202      	movs	r2, #2
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f001 fd67 	bl	800ffe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e516:	e032      	b.n	800e57e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f001 fce5 	bl	800feea <USBD_CtlError>
            ret = USBD_FAIL;
 800e520:	2303      	movs	r3, #3
 800e522:	75fb      	strb	r3, [r7, #23]
          break;
 800e524:	e02b      	b.n	800e57e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b03      	cmp	r3, #3
 800e530:	d107      	bne.n	800e542 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e532:	f107 030d 	add.w	r3, r7, #13
 800e536:	2201      	movs	r2, #1
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f001 fd52 	bl	800ffe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e540:	e01d      	b.n	800e57e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e542:	6839      	ldr	r1, [r7, #0]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f001 fcd0 	bl	800feea <USBD_CtlError>
            ret = USBD_FAIL;
 800e54a:	2303      	movs	r3, #3
 800e54c:	75fb      	strb	r3, [r7, #23]
          break;
 800e54e:	e016      	b.n	800e57e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b03      	cmp	r3, #3
 800e55a:	d00f      	beq.n	800e57c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e55c:	6839      	ldr	r1, [r7, #0]
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f001 fcc3 	bl	800feea <USBD_CtlError>
            ret = USBD_FAIL;
 800e564:	2303      	movs	r3, #3
 800e566:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e568:	e008      	b.n	800e57c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e56a:	6839      	ldr	r1, [r7, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f001 fcbc 	bl	800feea <USBD_CtlError>
          ret = USBD_FAIL;
 800e572:	2303      	movs	r3, #3
 800e574:	75fb      	strb	r3, [r7, #23]
          break;
 800e576:	e002      	b.n	800e57e <USBD_CDC_Setup+0x19e>
          break;
 800e578:	bf00      	nop
 800e57a:	e008      	b.n	800e58e <USBD_CDC_Setup+0x1ae>
          break;
 800e57c:	bf00      	nop
      }
      break;
 800e57e:	e006      	b.n	800e58e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f001 fcb1 	bl	800feea <USBD_CtlError>
      ret = USBD_FAIL;
 800e588:	2303      	movs	r3, #3
 800e58a:	75fb      	strb	r3, [r7, #23]
      break;
 800e58c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e590:	4618      	mov	r0, r3
 800e592:	3718      	adds	r7, #24
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	32b0      	adds	r2, #176	@ 0xb0
 800e5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d101      	bne.n	800e5c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e5be:	2303      	movs	r3, #3
 800e5c0:	e065      	b.n	800e68e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	32b0      	adds	r2, #176	@ 0xb0
 800e5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e5d2:	78fb      	ldrb	r3, [r7, #3]
 800e5d4:	f003 020f 	and.w	r2, r3, #15
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	4613      	mov	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4413      	add	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	440b      	add	r3, r1
 800e5e4:	3318      	adds	r3, #24
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d02f      	beq.n	800e64c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e5ec:	78fb      	ldrb	r3, [r7, #3]
 800e5ee:	f003 020f 	and.w	r2, r3, #15
 800e5f2:	6879      	ldr	r1, [r7, #4]
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	4413      	add	r3, r2
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	440b      	add	r3, r1
 800e5fe:	3318      	adds	r3, #24
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	78fb      	ldrb	r3, [r7, #3]
 800e604:	f003 010f 	and.w	r1, r3, #15
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	460b      	mov	r3, r1
 800e60c:	00db      	lsls	r3, r3, #3
 800e60e:	440b      	add	r3, r1
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	4403      	add	r3, r0
 800e614:	331c      	adds	r3, #28
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	fbb2 f1f3 	udiv	r1, r2, r3
 800e61c:	fb01 f303 	mul.w	r3, r1, r3
 800e620:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e622:	2b00      	cmp	r3, #0
 800e624:	d112      	bne.n	800e64c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e626:	78fb      	ldrb	r3, [r7, #3]
 800e628:	f003 020f 	and.w	r2, r3, #15
 800e62c:	6879      	ldr	r1, [r7, #4]
 800e62e:	4613      	mov	r3, r2
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	4413      	add	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	440b      	add	r3, r1
 800e638:	3318      	adds	r3, #24
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e63e:	78f9      	ldrb	r1, [r7, #3]
 800e640:	2300      	movs	r3, #0
 800e642:	2200      	movs	r2, #0
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f002 fa04 	bl	8010a52 <USBD_LL_Transmit>
 800e64a:	e01f      	b.n	800e68c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	2200      	movs	r2, #0
 800e650:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	33b0      	adds	r3, #176	@ 0xb0
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	4413      	add	r3, r2
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d010      	beq.n	800e68c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	33b0      	adds	r3, #176	@ 0xb0
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	691b      	ldr	r3, [r3, #16]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e688:	78fa      	ldrb	r2, [r7, #3]
 800e68a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b084      	sub	sp, #16
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	460b      	mov	r3, r1
 800e6a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	32b0      	adds	r2, #176	@ 0xb0
 800e6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	32b0      	adds	r2, #176	@ 0xb0
 800e6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d101      	bne.n	800e6c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	e01a      	b.n	800e6fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e6c8:	78fb      	ldrb	r3, [r7, #3]
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f002 fa02 	bl	8010ad6 <USBD_LL_GetRxDataSize>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	33b0      	adds	r3, #176	@ 0xb0
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	4413      	add	r3, r2
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3710      	adds	r7, #16
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e706:	b580      	push	{r7, lr}
 800e708:	b084      	sub	sp, #16
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	32b0      	adds	r2, #176	@ 0xb0
 800e718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e71c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d101      	bne.n	800e728 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e724:	2303      	movs	r3, #3
 800e726:	e024      	b.n	800e772 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	33b0      	adds	r3, #176	@ 0xb0
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d019      	beq.n	800e770 <USBD_CDC_EP0_RxReady+0x6a>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e742:	2bff      	cmp	r3, #255	@ 0xff
 800e744:	d014      	beq.n	800e770 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	33b0      	adds	r3, #176	@ 0xb0
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4413      	add	r3, r2
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e75e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e766:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	22ff      	movs	r2, #255	@ 0xff
 800e76c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
	...

0800e77c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b086      	sub	sp, #24
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e784:	2182      	movs	r1, #130	@ 0x82
 800e786:	4818      	ldr	r0, [pc, #96]	@ (800e7e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e788:	f000 fd4f 	bl	800f22a <USBD_GetEpDesc>
 800e78c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e78e:	2101      	movs	r1, #1
 800e790:	4815      	ldr	r0, [pc, #84]	@ (800e7e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e792:	f000 fd4a 	bl	800f22a <USBD_GetEpDesc>
 800e796:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e798:	2181      	movs	r1, #129	@ 0x81
 800e79a:	4813      	ldr	r0, [pc, #76]	@ (800e7e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e79c:	f000 fd45 	bl	800f22a <USBD_GetEpDesc>
 800e7a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d002      	beq.n	800e7ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	2210      	movs	r2, #16
 800e7ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d006      	beq.n	800e7c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e7bc:	711a      	strb	r2, [r3, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d006      	beq.n	800e7d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e7d0:	711a      	strb	r2, [r3, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2243      	movs	r2, #67	@ 0x43
 800e7da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e7dc:	4b02      	ldr	r3, [pc, #8]	@ (800e7e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	24000054 	.word	0x24000054

0800e7ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e7f4:	2182      	movs	r1, #130	@ 0x82
 800e7f6:	4818      	ldr	r0, [pc, #96]	@ (800e858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e7f8:	f000 fd17 	bl	800f22a <USBD_GetEpDesc>
 800e7fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e7fe:	2101      	movs	r1, #1
 800e800:	4815      	ldr	r0, [pc, #84]	@ (800e858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e802:	f000 fd12 	bl	800f22a <USBD_GetEpDesc>
 800e806:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e808:	2181      	movs	r1, #129	@ 0x81
 800e80a:	4813      	ldr	r0, [pc, #76]	@ (800e858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e80c:	f000 fd0d 	bl	800f22a <USBD_GetEpDesc>
 800e810:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d002      	beq.n	800e81e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	2210      	movs	r2, #16
 800e81c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d006      	beq.n	800e832 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	2200      	movs	r2, #0
 800e828:	711a      	strb	r2, [r3, #4]
 800e82a:	2200      	movs	r2, #0
 800e82c:	f042 0202 	orr.w	r2, r2, #2
 800e830:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d006      	beq.n	800e846 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	711a      	strb	r2, [r3, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	f042 0202 	orr.w	r2, r2, #2
 800e844:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2243      	movs	r2, #67	@ 0x43
 800e84a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e84c:	4b02      	ldr	r3, [pc, #8]	@ (800e858 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3718      	adds	r7, #24
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	24000054 	.word	0x24000054

0800e85c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e864:	2182      	movs	r1, #130	@ 0x82
 800e866:	4818      	ldr	r0, [pc, #96]	@ (800e8c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e868:	f000 fcdf 	bl	800f22a <USBD_GetEpDesc>
 800e86c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e86e:	2101      	movs	r1, #1
 800e870:	4815      	ldr	r0, [pc, #84]	@ (800e8c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e872:	f000 fcda 	bl	800f22a <USBD_GetEpDesc>
 800e876:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e878:	2181      	movs	r1, #129	@ 0x81
 800e87a:	4813      	ldr	r0, [pc, #76]	@ (800e8c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e87c:	f000 fcd5 	bl	800f22a <USBD_GetEpDesc>
 800e880:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d002      	beq.n	800e88e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	2210      	movs	r2, #16
 800e88c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d006      	beq.n	800e8a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	2200      	movs	r2, #0
 800e898:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e89c:	711a      	strb	r2, [r3, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d006      	beq.n	800e8b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e8b0:	711a      	strb	r2, [r3, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2243      	movs	r2, #67	@ 0x43
 800e8ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e8bc:	4b02      	ldr	r3, [pc, #8]	@ (800e8c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	24000054 	.word	0x24000054

0800e8cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	220a      	movs	r2, #10
 800e8d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e8da:	4b03      	ldr	r3, [pc, #12]	@ (800e8e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	24000010 	.word	0x24000010

0800e8ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d101      	bne.n	800e900 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e8fc:	2303      	movs	r3, #3
 800e8fe:	e009      	b.n	800e914 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	33b0      	adds	r3, #176	@ 0xb0
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	4413      	add	r3, r2
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e920:	b480      	push	{r7}
 800e922:	b087      	sub	sp, #28
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	32b0      	adds	r2, #176	@ 0xb0
 800e936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e93a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e942:	2303      	movs	r3, #3
 800e944:	e008      	b.n	800e958 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	371c      	adds	r7, #28
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	32b0      	adds	r2, #176	@ 0xb0
 800e978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e97c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d101      	bne.n	800e988 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e984:	2303      	movs	r3, #3
 800e986:	e004      	b.n	800e992 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e990:	2300      	movs	r3, #0
}
 800e992:	4618      	mov	r0, r3
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
	...

0800e9a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	32b0      	adds	r2, #176	@ 0xb0
 800e9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e9c2:	2303      	movs	r3, #3
 800e9c4:	e025      	b.n	800ea12 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d11f      	bne.n	800ea10 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e9d8:	4b10      	ldr	r3, [pc, #64]	@ (800ea1c <USBD_CDC_TransmitPacket+0x7c>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	f003 020f 	and.w	r2, r3, #15
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4413      	add	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4403      	add	r3, r0
 800e9f2:	3318      	adds	r3, #24
 800e9f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e9f6:	4b09      	ldr	r3, [pc, #36]	@ (800ea1c <USBD_CDC_TransmitPacket+0x7c>)
 800e9f8:	7819      	ldrb	r1, [r3, #0]
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f002 f823 	bl	8010a52 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ea10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	24000097 	.word	0x24000097

0800ea20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	32b0      	adds	r2, #176	@ 0xb0
 800ea32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	32b0      	adds	r2, #176	@ 0xb0
 800ea42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d101      	bne.n	800ea4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ea4a:	2303      	movs	r3, #3
 800ea4c:	e018      	b.n	800ea80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	7c1b      	ldrb	r3, [r3, #16]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d10a      	bne.n	800ea6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ea56:	4b0c      	ldr	r3, [pc, #48]	@ (800ea88 <USBD_CDC_ReceivePacket+0x68>)
 800ea58:	7819      	ldrb	r1, [r3, #0]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ea60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f002 f815 	bl	8010a94 <USBD_LL_PrepareReceive>
 800ea6a:	e008      	b.n	800ea7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ea6c:	4b06      	ldr	r3, [pc, #24]	@ (800ea88 <USBD_CDC_ReceivePacket+0x68>)
 800ea6e:	7819      	ldrb	r1, [r3, #0]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ea76:	2340      	movs	r3, #64	@ 0x40
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f002 f80b 	bl	8010a94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3710      	adds	r7, #16
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	24000098 	.word	0x24000098

0800ea8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b086      	sub	sp, #24
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	4613      	mov	r3, r2
 800ea98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d101      	bne.n	800eaa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eaa0:	2303      	movs	r3, #3
 800eaa2:	e01f      	b.n	800eae4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d003      	beq.n	800eaca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	68ba      	ldr	r2, [r7, #8]
 800eac6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2201      	movs	r2, #1
 800eace:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	79fa      	ldrb	r2, [r7, #7]
 800ead6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f001 fe81 	bl	80107e0 <USBD_LL_Init>
 800eade:	4603      	mov	r3, r0
 800eae0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eae2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3718      	adds	r7, #24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d101      	bne.n	800eb04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eb00:	2303      	movs	r3, #3
 800eb02:	e025      	b.n	800eb50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	683a      	ldr	r2, [r7, #0]
 800eb08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	32ae      	adds	r2, #174	@ 0xae
 800eb16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00f      	beq.n	800eb40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	32ae      	adds	r2, #174	@ 0xae
 800eb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb30:	f107 020e 	add.w	r2, r7, #14
 800eb34:	4610      	mov	r0, r2
 800eb36:	4798      	blx	r3
 800eb38:	4602      	mov	r2, r0
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800eb46:	1c5a      	adds	r2, r3, #1
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f001 fe8d 	bl	8010880 <USBD_LL_Start>
 800eb66:	4603      	mov	r3, r0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	370c      	adds	r7, #12
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr

0800eb86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
 800eb8e:	460b      	mov	r3, r1
 800eb90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d009      	beq.n	800ebb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	78fa      	ldrb	r2, [r7, #3]
 800ebaa:	4611      	mov	r1, r2
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	4798      	blx	r3
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ebb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3710      	adds	r7, #16
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b084      	sub	sp, #16
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	78fa      	ldrb	r2, [r7, #3]
 800ebd8:	4611      	mov	r1, r2
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	4798      	blx	r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d001      	beq.n	800ebe8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b084      	sub	sp, #16
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
 800ebfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ec02:	6839      	ldr	r1, [r7, #0]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f001 f936 	bl	800fe76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ec18:	461a      	mov	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ec26:	f003 031f 	and.w	r3, r3, #31
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d01a      	beq.n	800ec64 <USBD_LL_SetupStage+0x72>
 800ec2e:	2b02      	cmp	r3, #2
 800ec30:	d822      	bhi.n	800ec78 <USBD_LL_SetupStage+0x86>
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d002      	beq.n	800ec3c <USBD_LL_SetupStage+0x4a>
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d00a      	beq.n	800ec50 <USBD_LL_SetupStage+0x5e>
 800ec3a:	e01d      	b.n	800ec78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ec42:	4619      	mov	r1, r3
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 fb63 	bl	800f310 <USBD_StdDevReq>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	73fb      	strb	r3, [r7, #15]
      break;
 800ec4e:	e020      	b.n	800ec92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ec56:	4619      	mov	r1, r3
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f000 fbcb 	bl	800f3f4 <USBD_StdItfReq>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	73fb      	strb	r3, [r7, #15]
      break;
 800ec62:	e016      	b.n	800ec92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 fc2d 	bl	800f4cc <USBD_StdEPReq>
 800ec72:	4603      	mov	r3, r0
 800ec74:	73fb      	strb	r3, [r7, #15]
      break;
 800ec76:	e00c      	b.n	800ec92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ec7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	4619      	mov	r1, r3
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f001 fe5a 	bl	8010940 <USBD_LL_StallEP>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec90:	bf00      	nop
  }

  return ret;
 800ec92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b086      	sub	sp, #24
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	460b      	mov	r3, r1
 800eca6:	607a      	str	r2, [r7, #4]
 800eca8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ecae:	7afb      	ldrb	r3, [r7, #11]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d16e      	bne.n	800ed92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ecba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	f040 8098 	bne.w	800edf8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	689a      	ldr	r2, [r3, #8]
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d913      	bls.n	800ecfc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	689a      	ldr	r2, [r3, #8]
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	1ad2      	subs	r2, r2, r3
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	68da      	ldr	r2, [r3, #12]
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	4293      	cmp	r3, r2
 800ecec:	bf28      	it	cs
 800ecee:	4613      	movcs	r3, r2
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	6879      	ldr	r1, [r7, #4]
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f001 f9be 	bl	8010076 <USBD_CtlContinueRx>
 800ecfa:	e07d      	b.n	800edf8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ed02:	f003 031f 	and.w	r3, r3, #31
 800ed06:	2b02      	cmp	r3, #2
 800ed08:	d014      	beq.n	800ed34 <USBD_LL_DataOutStage+0x98>
 800ed0a:	2b02      	cmp	r3, #2
 800ed0c:	d81d      	bhi.n	800ed4a <USBD_LL_DataOutStage+0xae>
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d002      	beq.n	800ed18 <USBD_LL_DataOutStage+0x7c>
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d003      	beq.n	800ed1e <USBD_LL_DataOutStage+0x82>
 800ed16:	e018      	b.n	800ed4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	75bb      	strb	r3, [r7, #22]
            break;
 800ed1c:	e018      	b.n	800ed50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	4619      	mov	r1, r3
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f000 fa64 	bl	800f1f6 <USBD_CoreFindIF>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	75bb      	strb	r3, [r7, #22]
            break;
 800ed32:	e00d      	b.n	800ed50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f000 fa66 	bl	800f210 <USBD_CoreFindEP>
 800ed44:	4603      	mov	r3, r0
 800ed46:	75bb      	strb	r3, [r7, #22]
            break;
 800ed48:	e002      	b.n	800ed50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	75bb      	strb	r3, [r7, #22]
            break;
 800ed4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ed50:	7dbb      	ldrb	r3, [r7, #22]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d119      	bne.n	800ed8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	2b03      	cmp	r3, #3
 800ed60:	d113      	bne.n	800ed8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ed62:	7dba      	ldrb	r2, [r7, #22]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	32ae      	adds	r2, #174	@ 0xae
 800ed68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed6c:	691b      	ldr	r3, [r3, #16]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00b      	beq.n	800ed8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ed72:	7dba      	ldrb	r2, [r7, #22]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ed7a:	7dba      	ldrb	r2, [r7, #22]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	32ae      	adds	r2, #174	@ 0xae
 800ed80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed84:	691b      	ldr	r3, [r3, #16]
 800ed86:	68f8      	ldr	r0, [r7, #12]
 800ed88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f001 f984 	bl	8010098 <USBD_CtlSendStatus>
 800ed90:	e032      	b.n	800edf8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ed92:	7afb      	ldrb	r3, [r7, #11]
 800ed94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f000 fa37 	bl	800f210 <USBD_CoreFindEP>
 800eda2:	4603      	mov	r3, r0
 800eda4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eda6:	7dbb      	ldrb	r3, [r7, #22]
 800eda8:	2bff      	cmp	r3, #255	@ 0xff
 800edaa:	d025      	beq.n	800edf8 <USBD_LL_DataOutStage+0x15c>
 800edac:	7dbb      	ldrb	r3, [r7, #22]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d122      	bne.n	800edf8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b03      	cmp	r3, #3
 800edbc:	d117      	bne.n	800edee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800edbe:	7dba      	ldrb	r2, [r7, #22]
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	32ae      	adds	r2, #174	@ 0xae
 800edc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc8:	699b      	ldr	r3, [r3, #24]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d00f      	beq.n	800edee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800edce:	7dba      	ldrb	r2, [r7, #22]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800edd6:	7dba      	ldrb	r2, [r7, #22]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	32ae      	adds	r2, #174	@ 0xae
 800eddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	7afa      	ldrb	r2, [r7, #11]
 800ede4:	4611      	mov	r1, r2
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	4798      	blx	r3
 800edea:	4603      	mov	r3, r0
 800edec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800edee:	7dfb      	ldrb	r3, [r7, #23]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d001      	beq.n	800edf8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800edf4:	7dfb      	ldrb	r3, [r7, #23]
 800edf6:	e000      	b.n	800edfa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3718      	adds	r7, #24
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b086      	sub	sp, #24
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	60f8      	str	r0, [r7, #12]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	607a      	str	r2, [r7, #4]
 800ee0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ee10:	7afb      	ldrb	r3, [r7, #11]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d16f      	bne.n	800eef6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	3314      	adds	r3, #20
 800ee1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d15a      	bne.n	800eedc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	689a      	ldr	r2, [r3, #8]
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	68db      	ldr	r3, [r3, #12]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d914      	bls.n	800ee5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	689a      	ldr	r2, [r3, #8]
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	1ad2      	subs	r2, r2, r3
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	461a      	mov	r2, r3
 800ee46:	6879      	ldr	r1, [r7, #4]
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f001 f8e6 	bl	801001a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee4e:	2300      	movs	r3, #0
 800ee50:	2200      	movs	r2, #0
 800ee52:	2100      	movs	r1, #0
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f001 fe1d 	bl	8010a94 <USBD_LL_PrepareReceive>
 800ee5a:	e03f      	b.n	800eedc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	68da      	ldr	r2, [r3, #12]
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d11c      	bne.n	800eea2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	685a      	ldr	r2, [r3, #4]
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d316      	bcc.n	800eea2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	685a      	ldr	r2, [r3, #4]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d20f      	bcs.n	800eea2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee82:	2200      	movs	r2, #0
 800ee84:	2100      	movs	r1, #0
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f001 f8c7 	bl	801001a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee94:	2300      	movs	r3, #0
 800ee96:	2200      	movs	r2, #0
 800ee98:	2100      	movs	r1, #0
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f001 fdfa 	bl	8010a94 <USBD_LL_PrepareReceive>
 800eea0:	e01c      	b.n	800eedc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	2b03      	cmp	r3, #3
 800eeac:	d10f      	bne.n	800eece <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d009      	beq.n	800eece <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eece:	2180      	movs	r1, #128	@ 0x80
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f001 fd35 	bl	8010940 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f001 f8f1 	bl	80100be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d03a      	beq.n	800ef5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f7ff fe42 	bl	800eb70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2200      	movs	r2, #0
 800eef0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800eef4:	e032      	b.n	800ef5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800eef6:	7afb      	ldrb	r3, [r7, #11]
 800eef8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	4619      	mov	r1, r3
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f000 f985 	bl	800f210 <USBD_CoreFindEP>
 800ef06:	4603      	mov	r3, r0
 800ef08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef0a:	7dfb      	ldrb	r3, [r7, #23]
 800ef0c:	2bff      	cmp	r3, #255	@ 0xff
 800ef0e:	d025      	beq.n	800ef5c <USBD_LL_DataInStage+0x15a>
 800ef10:	7dfb      	ldrb	r3, [r7, #23]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d122      	bne.n	800ef5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	2b03      	cmp	r3, #3
 800ef20:	d11c      	bne.n	800ef5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ef22:	7dfa      	ldrb	r2, [r7, #23]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	32ae      	adds	r2, #174	@ 0xae
 800ef28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef2c:	695b      	ldr	r3, [r3, #20]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d014      	beq.n	800ef5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ef32:	7dfa      	ldrb	r2, [r7, #23]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ef3a:	7dfa      	ldrb	r2, [r7, #23]
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	32ae      	adds	r2, #174	@ 0xae
 800ef40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef44:	695b      	ldr	r3, [r3, #20]
 800ef46:	7afa      	ldrb	r2, [r7, #11]
 800ef48:	4611      	mov	r1, r2
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	4798      	blx	r3
 800ef4e:	4603      	mov	r3, r0
 800ef50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ef52:	7dbb      	ldrb	r3, [r7, #22]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d001      	beq.n	800ef5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ef58:	7dbb      	ldrb	r3, [r7, #22]
 800ef5a:	e000      	b.n	800ef5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ef5c:	2300      	movs	r3, #0
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3718      	adds	r7, #24
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b084      	sub	sp, #16
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2201      	movs	r2, #1
 800ef76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d014      	beq.n	800efcc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00e      	beq.n	800efcc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	6852      	ldr	r2, [r2, #4]
 800efba:	b2d2      	uxtb	r2, r2
 800efbc:	4611      	mov	r1, r2
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	4798      	blx	r3
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800efc8:	2303      	movs	r3, #3
 800efca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800efcc:	2340      	movs	r3, #64	@ 0x40
 800efce:	2200      	movs	r2, #0
 800efd0:	2100      	movs	r1, #0
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f001 fc6f 	bl	80108b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2201      	movs	r2, #1
 800efdc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2240      	movs	r2, #64	@ 0x40
 800efe4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800efe8:	2340      	movs	r3, #64	@ 0x40
 800efea:	2200      	movs	r2, #0
 800efec:	2180      	movs	r1, #128	@ 0x80
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f001 fc61 	bl	80108b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2240      	movs	r2, #64	@ 0x40
 800effe:	621a      	str	r2, [r3, #32]

  return ret;
 800f000:	7bfb      	ldrb	r3, [r7, #15]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f00a:	b480      	push	{r7}
 800f00c:	b083      	sub	sp, #12
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
 800f012:	460b      	mov	r3, r1
 800f014:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	78fa      	ldrb	r2, [r7, #3]
 800f01a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f01c:	2300      	movs	r3, #0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	370c      	adds	r7, #12
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr

0800f02a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f02a:	b480      	push	{r7}
 800f02c:	b083      	sub	sp, #12
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b04      	cmp	r3, #4
 800f03c:	d006      	beq.n	800f04c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f044:	b2da      	uxtb	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2204      	movs	r2, #4
 800f050:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f070:	b2db      	uxtb	r3, r3
 800f072:	2b04      	cmp	r3, #4
 800f074:	d106      	bne.n	800f084 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f07c:	b2da      	uxtb	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	370c      	adds	r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f092:	b580      	push	{r7, lr}
 800f094:	b082      	sub	sp, #8
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	2b03      	cmp	r3, #3
 800f0a4:	d110      	bne.n	800f0c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00b      	beq.n	800f0c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0b6:	69db      	ldr	r3, [r3, #28]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d005      	beq.n	800f0c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0c2:	69db      	ldr	r3, [r3, #28]
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b082      	sub	sp, #8
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	460b      	mov	r3, r1
 800f0dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	32ae      	adds	r2, #174	@ 0xae
 800f0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d101      	bne.n	800f0f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f0f0:	2303      	movs	r3, #3
 800f0f2:	e01c      	b.n	800f12e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	2b03      	cmp	r3, #3
 800f0fe:	d115      	bne.n	800f12c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	32ae      	adds	r2, #174	@ 0xae
 800f10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f10e:	6a1b      	ldr	r3, [r3, #32]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00b      	beq.n	800f12c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	32ae      	adds	r2, #174	@ 0xae
 800f11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f122:	6a1b      	ldr	r3, [r3, #32]
 800f124:	78fa      	ldrb	r2, [r7, #3]
 800f126:	4611      	mov	r1, r2
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b082      	sub	sp, #8
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
 800f13e:	460b      	mov	r3, r1
 800f140:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	32ae      	adds	r2, #174	@ 0xae
 800f14c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d101      	bne.n	800f158 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f154:	2303      	movs	r3, #3
 800f156:	e01c      	b.n	800f192 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b03      	cmp	r3, #3
 800f162:	d115      	bne.n	800f190 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	32ae      	adds	r2, #174	@ 0xae
 800f16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00b      	beq.n	800f190 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	32ae      	adds	r2, #174	@ 0xae
 800f182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f188:	78fa      	ldrb	r2, [r7, #3]
 800f18a:	4611      	mov	r1, r2
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}

0800f19a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b083      	sub	sp, #12
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00e      	beq.n	800f1ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	6852      	ldr	r2, [r2, #4]
 800f1da:	b2d2      	uxtb	r2, r2
 800f1dc:	4611      	mov	r1, r2
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	4798      	blx	r3
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f1e8:	2303      	movs	r3, #3
 800f1ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f1f6:	b480      	push	{r7}
 800f1f8:	b083      	sub	sp, #12
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
 800f1fe:	460b      	mov	r3, r1
 800f200:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f202:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f204:	4618      	mov	r0, r3
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	460b      	mov	r3, r1
 800f21a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f21c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f21e:	4618      	mov	r0, r3
 800f220:	370c      	adds	r7, #12
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b086      	sub	sp, #24
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	460b      	mov	r3, r1
 800f234:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	885b      	ldrh	r3, [r3, #2]
 800f246:	b29b      	uxth	r3, r3
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	7812      	ldrb	r2, [r2, #0]
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d91f      	bls.n	800f290 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f256:	e013      	b.n	800f280 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f258:	f107 030a 	add.w	r3, r7, #10
 800f25c:	4619      	mov	r1, r3
 800f25e:	6978      	ldr	r0, [r7, #20]
 800f260:	f000 f81b 	bl	800f29a <USBD_GetNextDesc>
 800f264:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	785b      	ldrb	r3, [r3, #1]
 800f26a:	2b05      	cmp	r3, #5
 800f26c:	d108      	bne.n	800f280 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	789b      	ldrb	r3, [r3, #2]
 800f276:	78fa      	ldrb	r2, [r7, #3]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d008      	beq.n	800f28e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f27c:	2300      	movs	r3, #0
 800f27e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	885b      	ldrh	r3, [r3, #2]
 800f284:	b29a      	uxth	r2, r3
 800f286:	897b      	ldrh	r3, [r7, #10]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d8e5      	bhi.n	800f258 <USBD_GetEpDesc+0x2e>
 800f28c:	e000      	b.n	800f290 <USBD_GetEpDesc+0x66>
          break;
 800f28e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f290:	693b      	ldr	r3, [r7, #16]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3718      	adds	r7, #24
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b085      	sub	sp, #20
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	68fa      	ldr	r2, [r7, #12]
 800f2ae:	7812      	ldrb	r2, [r2, #0]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3714      	adds	r7, #20
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f2d2:	b480      	push	{r7}
 800f2d4:	b087      	sub	sp, #28
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f2f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f2f4:	021b      	lsls	r3, r3, #8
 800f2f6:	b21a      	sxth	r2, r3
 800f2f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	b21b      	sxth	r3, r3
 800f300:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f302:	89fb      	ldrh	r3, [r7, #14]
}
 800f304:	4618      	mov	r0, r3
 800f306:	371c      	adds	r7, #28
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f31a:	2300      	movs	r3, #0
 800f31c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f326:	2b40      	cmp	r3, #64	@ 0x40
 800f328:	d005      	beq.n	800f336 <USBD_StdDevReq+0x26>
 800f32a:	2b40      	cmp	r3, #64	@ 0x40
 800f32c:	d857      	bhi.n	800f3de <USBD_StdDevReq+0xce>
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00f      	beq.n	800f352 <USBD_StdDevReq+0x42>
 800f332:	2b20      	cmp	r3, #32
 800f334:	d153      	bne.n	800f3de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	32ae      	adds	r2, #174	@ 0xae
 800f340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	4798      	blx	r3
 800f34c:	4603      	mov	r3, r0
 800f34e:	73fb      	strb	r3, [r7, #15]
      break;
 800f350:	e04a      	b.n	800f3e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	785b      	ldrb	r3, [r3, #1]
 800f356:	2b09      	cmp	r3, #9
 800f358:	d83b      	bhi.n	800f3d2 <USBD_StdDevReq+0xc2>
 800f35a:	a201      	add	r2, pc, #4	@ (adr r2, 800f360 <USBD_StdDevReq+0x50>)
 800f35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f360:	0800f3b5 	.word	0x0800f3b5
 800f364:	0800f3c9 	.word	0x0800f3c9
 800f368:	0800f3d3 	.word	0x0800f3d3
 800f36c:	0800f3bf 	.word	0x0800f3bf
 800f370:	0800f3d3 	.word	0x0800f3d3
 800f374:	0800f393 	.word	0x0800f393
 800f378:	0800f389 	.word	0x0800f389
 800f37c:	0800f3d3 	.word	0x0800f3d3
 800f380:	0800f3ab 	.word	0x0800f3ab
 800f384:	0800f39d 	.word	0x0800f39d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f388:	6839      	ldr	r1, [r7, #0]
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 fa3c 	bl	800f808 <USBD_GetDescriptor>
          break;
 800f390:	e024      	b.n	800f3dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 fbcb 	bl	800fb30 <USBD_SetAddress>
          break;
 800f39a:	e01f      	b.n	800f3dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 fc0a 	bl	800fbb8 <USBD_SetConfig>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	73fb      	strb	r3, [r7, #15]
          break;
 800f3a8:	e018      	b.n	800f3dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 fcad 	bl	800fd0c <USBD_GetConfig>
          break;
 800f3b2:	e013      	b.n	800f3dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f3b4:	6839      	ldr	r1, [r7, #0]
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 fcde 	bl	800fd78 <USBD_GetStatus>
          break;
 800f3bc:	e00e      	b.n	800f3dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f3be:	6839      	ldr	r1, [r7, #0]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 fd0d 	bl	800fde0 <USBD_SetFeature>
          break;
 800f3c6:	e009      	b.n	800f3dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f3c8:	6839      	ldr	r1, [r7, #0]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 fd31 	bl	800fe32 <USBD_ClrFeature>
          break;
 800f3d0:	e004      	b.n	800f3dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f3d2:	6839      	ldr	r1, [r7, #0]
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 fd88 	bl	800feea <USBD_CtlError>
          break;
 800f3da:	bf00      	nop
      }
      break;
 800f3dc:	e004      	b.n	800f3e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f3de:	6839      	ldr	r1, [r7, #0]
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fd82 	bl	800feea <USBD_CtlError>
      break;
 800f3e6:	bf00      	nop
  }

  return ret;
 800f3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop

0800f3f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3fe:	2300      	movs	r3, #0
 800f400:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f40a:	2b40      	cmp	r3, #64	@ 0x40
 800f40c:	d005      	beq.n	800f41a <USBD_StdItfReq+0x26>
 800f40e:	2b40      	cmp	r3, #64	@ 0x40
 800f410:	d852      	bhi.n	800f4b8 <USBD_StdItfReq+0xc4>
 800f412:	2b00      	cmp	r3, #0
 800f414:	d001      	beq.n	800f41a <USBD_StdItfReq+0x26>
 800f416:	2b20      	cmp	r3, #32
 800f418:	d14e      	bne.n	800f4b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f420:	b2db      	uxtb	r3, r3
 800f422:	3b01      	subs	r3, #1
 800f424:	2b02      	cmp	r3, #2
 800f426:	d840      	bhi.n	800f4aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	889b      	ldrh	r3, [r3, #4]
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d836      	bhi.n	800f4a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	889b      	ldrh	r3, [r3, #4]
 800f436:	b2db      	uxtb	r3, r3
 800f438:	4619      	mov	r1, r3
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7ff fedb 	bl	800f1f6 <USBD_CoreFindIF>
 800f440:	4603      	mov	r3, r0
 800f442:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f444:	7bbb      	ldrb	r3, [r7, #14]
 800f446:	2bff      	cmp	r3, #255	@ 0xff
 800f448:	d01d      	beq.n	800f486 <USBD_StdItfReq+0x92>
 800f44a:	7bbb      	ldrb	r3, [r7, #14]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d11a      	bne.n	800f486 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f450:	7bba      	ldrb	r2, [r7, #14]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	32ae      	adds	r2, #174	@ 0xae
 800f456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d00f      	beq.n	800f480 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f460:	7bba      	ldrb	r2, [r7, #14]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f468:	7bba      	ldrb	r2, [r7, #14]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	32ae      	adds	r2, #174	@ 0xae
 800f46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	6839      	ldr	r1, [r7, #0]
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	4798      	blx	r3
 800f47a:	4603      	mov	r3, r0
 800f47c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f47e:	e004      	b.n	800f48a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f480:	2303      	movs	r3, #3
 800f482:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f484:	e001      	b.n	800f48a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f486:	2303      	movs	r3, #3
 800f488:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	88db      	ldrh	r3, [r3, #6]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d110      	bne.n	800f4b4 <USBD_StdItfReq+0xc0>
 800f492:	7bfb      	ldrb	r3, [r7, #15]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10d      	bne.n	800f4b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 fdfd 	bl	8010098 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f49e:	e009      	b.n	800f4b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f4a0:	6839      	ldr	r1, [r7, #0]
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 fd21 	bl	800feea <USBD_CtlError>
          break;
 800f4a8:	e004      	b.n	800f4b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f4aa:	6839      	ldr	r1, [r7, #0]
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fd1c 	bl	800feea <USBD_CtlError>
          break;
 800f4b2:	e000      	b.n	800f4b6 <USBD_StdItfReq+0xc2>
          break;
 800f4b4:	bf00      	nop
      }
      break;
 800f4b6:	e004      	b.n	800f4c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f4b8:	6839      	ldr	r1, [r7, #0]
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fd15 	bl	800feea <USBD_CtlError>
      break;
 800f4c0:	bf00      	nop
  }

  return ret;
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	889b      	ldrh	r3, [r3, #4]
 800f4de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f4e8:	2b40      	cmp	r3, #64	@ 0x40
 800f4ea:	d007      	beq.n	800f4fc <USBD_StdEPReq+0x30>
 800f4ec:	2b40      	cmp	r3, #64	@ 0x40
 800f4ee:	f200 817f 	bhi.w	800f7f0 <USBD_StdEPReq+0x324>
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d02a      	beq.n	800f54c <USBD_StdEPReq+0x80>
 800f4f6:	2b20      	cmp	r3, #32
 800f4f8:	f040 817a 	bne.w	800f7f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f4fc:	7bbb      	ldrb	r3, [r7, #14]
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff fe85 	bl	800f210 <USBD_CoreFindEP>
 800f506:	4603      	mov	r3, r0
 800f508:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f50a:	7b7b      	ldrb	r3, [r7, #13]
 800f50c:	2bff      	cmp	r3, #255	@ 0xff
 800f50e:	f000 8174 	beq.w	800f7fa <USBD_StdEPReq+0x32e>
 800f512:	7b7b      	ldrb	r3, [r7, #13]
 800f514:	2b00      	cmp	r3, #0
 800f516:	f040 8170 	bne.w	800f7fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f51a:	7b7a      	ldrb	r2, [r7, #13]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f522:	7b7a      	ldrb	r2, [r7, #13]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	32ae      	adds	r2, #174	@ 0xae
 800f528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f000 8163 	beq.w	800f7fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f534:	7b7a      	ldrb	r2, [r7, #13]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	32ae      	adds	r2, #174	@ 0xae
 800f53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	6839      	ldr	r1, [r7, #0]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	4798      	blx	r3
 800f546:	4603      	mov	r3, r0
 800f548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f54a:	e156      	b.n	800f7fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	785b      	ldrb	r3, [r3, #1]
 800f550:	2b03      	cmp	r3, #3
 800f552:	d008      	beq.n	800f566 <USBD_StdEPReq+0x9a>
 800f554:	2b03      	cmp	r3, #3
 800f556:	f300 8145 	bgt.w	800f7e4 <USBD_StdEPReq+0x318>
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f000 809b 	beq.w	800f696 <USBD_StdEPReq+0x1ca>
 800f560:	2b01      	cmp	r3, #1
 800f562:	d03c      	beq.n	800f5de <USBD_StdEPReq+0x112>
 800f564:	e13e      	b.n	800f7e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	2b02      	cmp	r3, #2
 800f570:	d002      	beq.n	800f578 <USBD_StdEPReq+0xac>
 800f572:	2b03      	cmp	r3, #3
 800f574:	d016      	beq.n	800f5a4 <USBD_StdEPReq+0xd8>
 800f576:	e02c      	b.n	800f5d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f578:	7bbb      	ldrb	r3, [r7, #14]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00d      	beq.n	800f59a <USBD_StdEPReq+0xce>
 800f57e:	7bbb      	ldrb	r3, [r7, #14]
 800f580:	2b80      	cmp	r3, #128	@ 0x80
 800f582:	d00a      	beq.n	800f59a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f584:	7bbb      	ldrb	r3, [r7, #14]
 800f586:	4619      	mov	r1, r3
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f001 f9d9 	bl	8010940 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f58e:	2180      	movs	r1, #128	@ 0x80
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f001 f9d5 	bl	8010940 <USBD_LL_StallEP>
 800f596:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f598:	e020      	b.n	800f5dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f59a:	6839      	ldr	r1, [r7, #0]
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 fca4 	bl	800feea <USBD_CtlError>
              break;
 800f5a2:	e01b      	b.n	800f5dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	885b      	ldrh	r3, [r3, #2]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10e      	bne.n	800f5ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f5ac:	7bbb      	ldrb	r3, [r7, #14]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d00b      	beq.n	800f5ca <USBD_StdEPReq+0xfe>
 800f5b2:	7bbb      	ldrb	r3, [r7, #14]
 800f5b4:	2b80      	cmp	r3, #128	@ 0x80
 800f5b6:	d008      	beq.n	800f5ca <USBD_StdEPReq+0xfe>
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	88db      	ldrh	r3, [r3, #6]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d104      	bne.n	800f5ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5c0:	7bbb      	ldrb	r3, [r7, #14]
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f001 f9bb 	bl	8010940 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 fd64 	bl	8010098 <USBD_CtlSendStatus>

              break;
 800f5d0:	e004      	b.n	800f5dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f5d2:	6839      	ldr	r1, [r7, #0]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 fc88 	bl	800feea <USBD_CtlError>
              break;
 800f5da:	bf00      	nop
          }
          break;
 800f5dc:	e107      	b.n	800f7ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	2b02      	cmp	r3, #2
 800f5e8:	d002      	beq.n	800f5f0 <USBD_StdEPReq+0x124>
 800f5ea:	2b03      	cmp	r3, #3
 800f5ec:	d016      	beq.n	800f61c <USBD_StdEPReq+0x150>
 800f5ee:	e04b      	b.n	800f688 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5f0:	7bbb      	ldrb	r3, [r7, #14]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00d      	beq.n	800f612 <USBD_StdEPReq+0x146>
 800f5f6:	7bbb      	ldrb	r3, [r7, #14]
 800f5f8:	2b80      	cmp	r3, #128	@ 0x80
 800f5fa:	d00a      	beq.n	800f612 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5fc:	7bbb      	ldrb	r3, [r7, #14]
 800f5fe:	4619      	mov	r1, r3
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f001 f99d 	bl	8010940 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f606:	2180      	movs	r1, #128	@ 0x80
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f001 f999 	bl	8010940 <USBD_LL_StallEP>
 800f60e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f610:	e040      	b.n	800f694 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f612:	6839      	ldr	r1, [r7, #0]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 fc68 	bl	800feea <USBD_CtlError>
              break;
 800f61a:	e03b      	b.n	800f694 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	885b      	ldrh	r3, [r3, #2]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d136      	bne.n	800f692 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f624:	7bbb      	ldrb	r3, [r7, #14]
 800f626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d004      	beq.n	800f638 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f62e:	7bbb      	ldrb	r3, [r7, #14]
 800f630:	4619      	mov	r1, r3
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f001 f9a3 	bl	801097e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fd2d 	bl	8010098 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f63e:	7bbb      	ldrb	r3, [r7, #14]
 800f640:	4619      	mov	r1, r3
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7ff fde4 	bl	800f210 <USBD_CoreFindEP>
 800f648:	4603      	mov	r3, r0
 800f64a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f64c:	7b7b      	ldrb	r3, [r7, #13]
 800f64e:	2bff      	cmp	r3, #255	@ 0xff
 800f650:	d01f      	beq.n	800f692 <USBD_StdEPReq+0x1c6>
 800f652:	7b7b      	ldrb	r3, [r7, #13]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11c      	bne.n	800f692 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f658:	7b7a      	ldrb	r2, [r7, #13]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f660:	7b7a      	ldrb	r2, [r7, #13]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	32ae      	adds	r2, #174	@ 0xae
 800f666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f66a:	689b      	ldr	r3, [r3, #8]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d010      	beq.n	800f692 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f670:	7b7a      	ldrb	r2, [r7, #13]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	32ae      	adds	r2, #174	@ 0xae
 800f676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	4798      	blx	r3
 800f682:	4603      	mov	r3, r0
 800f684:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f686:	e004      	b.n	800f692 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f688:	6839      	ldr	r1, [r7, #0]
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 fc2d 	bl	800feea <USBD_CtlError>
              break;
 800f690:	e000      	b.n	800f694 <USBD_StdEPReq+0x1c8>
              break;
 800f692:	bf00      	nop
          }
          break;
 800f694:	e0ab      	b.n	800f7ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	d002      	beq.n	800f6a8 <USBD_StdEPReq+0x1dc>
 800f6a2:	2b03      	cmp	r3, #3
 800f6a4:	d032      	beq.n	800f70c <USBD_StdEPReq+0x240>
 800f6a6:	e097      	b.n	800f7d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6a8:	7bbb      	ldrb	r3, [r7, #14]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d007      	beq.n	800f6be <USBD_StdEPReq+0x1f2>
 800f6ae:	7bbb      	ldrb	r3, [r7, #14]
 800f6b0:	2b80      	cmp	r3, #128	@ 0x80
 800f6b2:	d004      	beq.n	800f6be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fc17 	bl	800feea <USBD_CtlError>
                break;
 800f6bc:	e091      	b.n	800f7e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f6be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	da0b      	bge.n	800f6de <USBD_StdEPReq+0x212>
 800f6c6:	7bbb      	ldrb	r3, [r7, #14]
 800f6c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	4413      	add	r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	3310      	adds	r3, #16
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	4413      	add	r3, r2
 800f6da:	3304      	adds	r3, #4
 800f6dc:	e00b      	b.n	800f6f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f6de:	7bbb      	ldrb	r3, [r7, #14]
 800f6e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f6e4:	4613      	mov	r3, r2
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4413      	add	r3, r2
 800f6ea:	009b      	lsls	r3, r3, #2
 800f6ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	3304      	adds	r3, #4
 800f6f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	2202      	movs	r2, #2
 800f702:	4619      	mov	r1, r3
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fc6d 	bl	800ffe4 <USBD_CtlSendData>
              break;
 800f70a:	e06a      	b.n	800f7e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f70c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f710:	2b00      	cmp	r3, #0
 800f712:	da11      	bge.n	800f738 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f714:	7bbb      	ldrb	r3, [r7, #14]
 800f716:	f003 020f 	and.w	r2, r3, #15
 800f71a:	6879      	ldr	r1, [r7, #4]
 800f71c:	4613      	mov	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	4413      	add	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	440b      	add	r3, r1
 800f726:	3324      	adds	r3, #36	@ 0x24
 800f728:	881b      	ldrh	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d117      	bne.n	800f75e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 fbda 	bl	800feea <USBD_CtlError>
                  break;
 800f736:	e054      	b.n	800f7e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f738:	7bbb      	ldrb	r3, [r7, #14]
 800f73a:	f003 020f 	and.w	r2, r3, #15
 800f73e:	6879      	ldr	r1, [r7, #4]
 800f740:	4613      	mov	r3, r2
 800f742:	009b      	lsls	r3, r3, #2
 800f744:	4413      	add	r3, r2
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	440b      	add	r3, r1
 800f74a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d104      	bne.n	800f75e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f754:	6839      	ldr	r1, [r7, #0]
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fbc7 	bl	800feea <USBD_CtlError>
                  break;
 800f75c:	e041      	b.n	800f7e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f75e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f762:	2b00      	cmp	r3, #0
 800f764:	da0b      	bge.n	800f77e <USBD_StdEPReq+0x2b2>
 800f766:	7bbb      	ldrb	r3, [r7, #14]
 800f768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f76c:	4613      	mov	r3, r2
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	4413      	add	r3, r2
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	3310      	adds	r3, #16
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	4413      	add	r3, r2
 800f77a:	3304      	adds	r3, #4
 800f77c:	e00b      	b.n	800f796 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f77e:	7bbb      	ldrb	r3, [r7, #14]
 800f780:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f784:	4613      	mov	r3, r2
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	4413      	add	r3, r2
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	4413      	add	r3, r2
 800f794:	3304      	adds	r3, #4
 800f796:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f798:	7bbb      	ldrb	r3, [r7, #14]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d002      	beq.n	800f7a4 <USBD_StdEPReq+0x2d8>
 800f79e:	7bbb      	ldrb	r3, [r7, #14]
 800f7a0:	2b80      	cmp	r3, #128	@ 0x80
 800f7a2:	d103      	bne.n	800f7ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	601a      	str	r2, [r3, #0]
 800f7aa:	e00e      	b.n	800f7ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f7ac:	7bbb      	ldrb	r3, [r7, #14]
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f001 f903 	bl	80109bc <USBD_LL_IsStallEP>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	e002      	b.n	800f7ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2202      	movs	r2, #2
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f000 fc07 	bl	800ffe4 <USBD_CtlSendData>
              break;
 800f7d6:	e004      	b.n	800f7e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f7d8:	6839      	ldr	r1, [r7, #0]
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f000 fb85 	bl	800feea <USBD_CtlError>
              break;
 800f7e0:	bf00      	nop
          }
          break;
 800f7e2:	e004      	b.n	800f7ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f7e4:	6839      	ldr	r1, [r7, #0]
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 fb7f 	bl	800feea <USBD_CtlError>
          break;
 800f7ec:	bf00      	nop
      }
      break;
 800f7ee:	e005      	b.n	800f7fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f7f0:	6839      	ldr	r1, [r7, #0]
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 fb79 	bl	800feea <USBD_CtlError>
      break;
 800f7f8:	e000      	b.n	800f7fc <USBD_StdEPReq+0x330>
      break;
 800f7fa:	bf00      	nop
  }

  return ret;
 800f7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
	...

0800f808 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f812:	2300      	movs	r3, #0
 800f814:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f816:	2300      	movs	r3, #0
 800f818:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f81a:	2300      	movs	r3, #0
 800f81c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	885b      	ldrh	r3, [r3, #2]
 800f822:	0a1b      	lsrs	r3, r3, #8
 800f824:	b29b      	uxth	r3, r3
 800f826:	3b01      	subs	r3, #1
 800f828:	2b0e      	cmp	r3, #14
 800f82a:	f200 8152 	bhi.w	800fad2 <USBD_GetDescriptor+0x2ca>
 800f82e:	a201      	add	r2, pc, #4	@ (adr r2, 800f834 <USBD_GetDescriptor+0x2c>)
 800f830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f834:	0800f8a5 	.word	0x0800f8a5
 800f838:	0800f8bd 	.word	0x0800f8bd
 800f83c:	0800f8fd 	.word	0x0800f8fd
 800f840:	0800fad3 	.word	0x0800fad3
 800f844:	0800fad3 	.word	0x0800fad3
 800f848:	0800fa73 	.word	0x0800fa73
 800f84c:	0800fa9f 	.word	0x0800fa9f
 800f850:	0800fad3 	.word	0x0800fad3
 800f854:	0800fad3 	.word	0x0800fad3
 800f858:	0800fad3 	.word	0x0800fad3
 800f85c:	0800fad3 	.word	0x0800fad3
 800f860:	0800fad3 	.word	0x0800fad3
 800f864:	0800fad3 	.word	0x0800fad3
 800f868:	0800fad3 	.word	0x0800fad3
 800f86c:	0800f871 	.word	0x0800f871
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f876:	69db      	ldr	r3, [r3, #28]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00b      	beq.n	800f894 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f882:	69db      	ldr	r3, [r3, #28]
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	7c12      	ldrb	r2, [r2, #16]
 800f888:	f107 0108 	add.w	r1, r7, #8
 800f88c:	4610      	mov	r0, r2
 800f88e:	4798      	blx	r3
 800f890:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f892:	e126      	b.n	800fae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 fb27 	bl	800feea <USBD_CtlError>
        err++;
 800f89c:	7afb      	ldrb	r3, [r7, #11]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	72fb      	strb	r3, [r7, #11]
      break;
 800f8a2:	e11e      	b.n	800fae2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	7c12      	ldrb	r2, [r2, #16]
 800f8b0:	f107 0108 	add.w	r1, r7, #8
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	4798      	blx	r3
 800f8b8:	60f8      	str	r0, [r7, #12]
      break;
 800f8ba:	e112      	b.n	800fae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	7c1b      	ldrb	r3, [r3, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10d      	bne.n	800f8e0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8cc:	f107 0208 	add.w	r2, r7, #8
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	4798      	blx	r3
 800f8d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	2202      	movs	r2, #2
 800f8dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f8de:	e100      	b.n	800fae2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8e8:	f107 0208 	add.w	r2, r7, #8
 800f8ec:	4610      	mov	r0, r2
 800f8ee:	4798      	blx	r3
 800f8f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	2202      	movs	r2, #2
 800f8f8:	701a      	strb	r2, [r3, #0]
      break;
 800f8fa:	e0f2      	b.n	800fae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	885b      	ldrh	r3, [r3, #2]
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b05      	cmp	r3, #5
 800f904:	f200 80ac 	bhi.w	800fa60 <USBD_GetDescriptor+0x258>
 800f908:	a201      	add	r2, pc, #4	@ (adr r2, 800f910 <USBD_GetDescriptor+0x108>)
 800f90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90e:	bf00      	nop
 800f910:	0800f929 	.word	0x0800f929
 800f914:	0800f95d 	.word	0x0800f95d
 800f918:	0800f991 	.word	0x0800f991
 800f91c:	0800f9c5 	.word	0x0800f9c5
 800f920:	0800f9f9 	.word	0x0800f9f9
 800f924:	0800fa2d 	.word	0x0800fa2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00b      	beq.n	800f94c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	7c12      	ldrb	r2, [r2, #16]
 800f940:	f107 0108 	add.w	r1, r7, #8
 800f944:	4610      	mov	r0, r2
 800f946:	4798      	blx	r3
 800f948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f94a:	e091      	b.n	800fa70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f94c:	6839      	ldr	r1, [r7, #0]
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 facb 	bl	800feea <USBD_CtlError>
            err++;
 800f954:	7afb      	ldrb	r3, [r7, #11]
 800f956:	3301      	adds	r3, #1
 800f958:	72fb      	strb	r3, [r7, #11]
          break;
 800f95a:	e089      	b.n	800fa70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d00b      	beq.n	800f980 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	7c12      	ldrb	r2, [r2, #16]
 800f974:	f107 0108 	add.w	r1, r7, #8
 800f978:	4610      	mov	r0, r2
 800f97a:	4798      	blx	r3
 800f97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f97e:	e077      	b.n	800fa70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f980:	6839      	ldr	r1, [r7, #0]
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 fab1 	bl	800feea <USBD_CtlError>
            err++;
 800f988:	7afb      	ldrb	r3, [r7, #11]
 800f98a:	3301      	adds	r3, #1
 800f98c:	72fb      	strb	r3, [r7, #11]
          break;
 800f98e:	e06f      	b.n	800fa70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00b      	beq.n	800f9b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	7c12      	ldrb	r2, [r2, #16]
 800f9a8:	f107 0108 	add.w	r1, r7, #8
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	4798      	blx	r3
 800f9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9b2:	e05d      	b.n	800fa70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f9b4:	6839      	ldr	r1, [r7, #0]
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fa97 	bl	800feea <USBD_CtlError>
            err++;
 800f9bc:	7afb      	ldrb	r3, [r7, #11]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f9c2:	e055      	b.n	800fa70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00b      	beq.n	800f9e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9d6:	691b      	ldr	r3, [r3, #16]
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	7c12      	ldrb	r2, [r2, #16]
 800f9dc:	f107 0108 	add.w	r1, r7, #8
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	4798      	blx	r3
 800f9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9e6:	e043      	b.n	800fa70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f9e8:	6839      	ldr	r1, [r7, #0]
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 fa7d 	bl	800feea <USBD_CtlError>
            err++;
 800f9f0:	7afb      	ldrb	r3, [r7, #11]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f9f6:	e03b      	b.n	800fa70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9fe:	695b      	ldr	r3, [r3, #20]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00b      	beq.n	800fa1c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa0a:	695b      	ldr	r3, [r3, #20]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	7c12      	ldrb	r2, [r2, #16]
 800fa10:	f107 0108 	add.w	r1, r7, #8
 800fa14:	4610      	mov	r0, r2
 800fa16:	4798      	blx	r3
 800fa18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa1a:	e029      	b.n	800fa70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa1c:	6839      	ldr	r1, [r7, #0]
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f000 fa63 	bl	800feea <USBD_CtlError>
            err++;
 800fa24:	7afb      	ldrb	r3, [r7, #11]
 800fa26:	3301      	adds	r3, #1
 800fa28:	72fb      	strb	r3, [r7, #11]
          break;
 800fa2a:	e021      	b.n	800fa70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00b      	beq.n	800fa50 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa3e:	699b      	ldr	r3, [r3, #24]
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	7c12      	ldrb	r2, [r2, #16]
 800fa44:	f107 0108 	add.w	r1, r7, #8
 800fa48:	4610      	mov	r0, r2
 800fa4a:	4798      	blx	r3
 800fa4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa4e:	e00f      	b.n	800fa70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 fa49 	bl	800feea <USBD_CtlError>
            err++;
 800fa58:	7afb      	ldrb	r3, [r7, #11]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	72fb      	strb	r3, [r7, #11]
          break;
 800fa5e:	e007      	b.n	800fa70 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 fa41 	bl	800feea <USBD_CtlError>
          err++;
 800fa68:	7afb      	ldrb	r3, [r7, #11]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fa6e:	bf00      	nop
      }
      break;
 800fa70:	e037      	b.n	800fae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	7c1b      	ldrb	r3, [r3, #16]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d109      	bne.n	800fa8e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa82:	f107 0208 	add.w	r2, r7, #8
 800fa86:	4610      	mov	r0, r2
 800fa88:	4798      	blx	r3
 800fa8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa8c:	e029      	b.n	800fae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fa8e:	6839      	ldr	r1, [r7, #0]
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 fa2a 	bl	800feea <USBD_CtlError>
        err++;
 800fa96:	7afb      	ldrb	r3, [r7, #11]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	72fb      	strb	r3, [r7, #11]
      break;
 800fa9c:	e021      	b.n	800fae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	7c1b      	ldrb	r3, [r3, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d10d      	bne.n	800fac2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faae:	f107 0208 	add.w	r2, r7, #8
 800fab2:	4610      	mov	r0, r2
 800fab4:	4798      	blx	r3
 800fab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	3301      	adds	r3, #1
 800fabc:	2207      	movs	r2, #7
 800fabe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fac0:	e00f      	b.n	800fae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fac2:	6839      	ldr	r1, [r7, #0]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 fa10 	bl	800feea <USBD_CtlError>
        err++;
 800faca:	7afb      	ldrb	r3, [r7, #11]
 800facc:	3301      	adds	r3, #1
 800face:	72fb      	strb	r3, [r7, #11]
      break;
 800fad0:	e007      	b.n	800fae2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fad2:	6839      	ldr	r1, [r7, #0]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fa08 	bl	800feea <USBD_CtlError>
      err++;
 800fada:	7afb      	ldrb	r3, [r7, #11]
 800fadc:	3301      	adds	r3, #1
 800fade:	72fb      	strb	r3, [r7, #11]
      break;
 800fae0:	bf00      	nop
  }

  if (err != 0U)
 800fae2:	7afb      	ldrb	r3, [r7, #11]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d11e      	bne.n	800fb26 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	88db      	ldrh	r3, [r3, #6]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d016      	beq.n	800fb1e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800faf0:	893b      	ldrh	r3, [r7, #8]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00e      	beq.n	800fb14 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	88da      	ldrh	r2, [r3, #6]
 800fafa:	893b      	ldrh	r3, [r7, #8]
 800fafc:	4293      	cmp	r3, r2
 800fafe:	bf28      	it	cs
 800fb00:	4613      	movcs	r3, r2
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fb06:	893b      	ldrh	r3, [r7, #8]
 800fb08:	461a      	mov	r2, r3
 800fb0a:	68f9      	ldr	r1, [r7, #12]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f000 fa69 	bl	800ffe4 <USBD_CtlSendData>
 800fb12:	e009      	b.n	800fb28 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f9e7 	bl	800feea <USBD_CtlError>
 800fb1c:	e004      	b.n	800fb28 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 faba 	bl	8010098 <USBD_CtlSendStatus>
 800fb24:	e000      	b.n	800fb28 <USBD_GetDescriptor+0x320>
    return;
 800fb26:	bf00      	nop
  }
}
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop

0800fb30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	889b      	ldrh	r3, [r3, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d131      	bne.n	800fba6 <USBD_SetAddress+0x76>
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	88db      	ldrh	r3, [r3, #6]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d12d      	bne.n	800fba6 <USBD_SetAddress+0x76>
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	885b      	ldrh	r3, [r3, #2]
 800fb4e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb50:	d829      	bhi.n	800fba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	885b      	ldrh	r3, [r3, #2]
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b03      	cmp	r3, #3
 800fb68:	d104      	bne.n	800fb74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fb6a:	6839      	ldr	r1, [r7, #0]
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 f9bc 	bl	800feea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb72:	e01d      	b.n	800fbb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	7bfa      	ldrb	r2, [r7, #15]
 800fb78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fb7c:	7bfb      	ldrb	r3, [r7, #15]
 800fb7e:	4619      	mov	r1, r3
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 ff47 	bl	8010a14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fa86 	bl	8010098 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d004      	beq.n	800fb9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2202      	movs	r2, #2
 800fb96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb9a:	e009      	b.n	800fbb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fba4:	e004      	b.n	800fbb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fba6:	6839      	ldr	r1, [r7, #0]
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 f99e 	bl	800feea <USBD_CtlError>
  }
}
 800fbae:	bf00      	nop
 800fbb0:	bf00      	nop
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	885b      	ldrh	r3, [r3, #2]
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	4b4e      	ldr	r3, [pc, #312]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fbce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fbd0:	4b4d      	ldr	r3, [pc, #308]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d905      	bls.n	800fbe4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fbd8:	6839      	ldr	r1, [r7, #0]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 f985 	bl	800feea <USBD_CtlError>
    return USBD_FAIL;
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	e08c      	b.n	800fcfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b02      	cmp	r3, #2
 800fbee:	d002      	beq.n	800fbf6 <USBD_SetConfig+0x3e>
 800fbf0:	2b03      	cmp	r3, #3
 800fbf2:	d029      	beq.n	800fc48 <USBD_SetConfig+0x90>
 800fbf4:	e075      	b.n	800fce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fbf6:	4b44      	ldr	r3, [pc, #272]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d020      	beq.n	800fc40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fbfe:	4b42      	ldr	r3, [pc, #264]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc08:	4b3f      	ldr	r3, [pc, #252]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7fe ffb9 	bl	800eb86 <USBD_SetClassConfig>
 800fc14:	4603      	mov	r3, r0
 800fc16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d008      	beq.n	800fc30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fc1e:	6839      	ldr	r1, [r7, #0]
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f962 	bl	800feea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2202      	movs	r2, #2
 800fc2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc2e:	e065      	b.n	800fcfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fa31 	bl	8010098 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2203      	movs	r2, #3
 800fc3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fc3e:	e05d      	b.n	800fcfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 fa29 	bl	8010098 <USBD_CtlSendStatus>
      break;
 800fc46:	e059      	b.n	800fcfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fc48:	4b2f      	ldr	r3, [pc, #188]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d112      	bne.n	800fc76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2202      	movs	r2, #2
 800fc54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fc58:	4b2b      	ldr	r3, [pc, #172]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc62:	4b29      	ldr	r3, [pc, #164]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7fe ffa8 	bl	800ebbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fa12 	bl	8010098 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc74:	e042      	b.n	800fcfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fc76:	4b24      	ldr	r3, [pc, #144]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d02a      	beq.n	800fcda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f7fe ff96 	bl	800ebbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fc92:	4b1d      	ldr	r3, [pc, #116]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	461a      	mov	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc9c:	4b1a      	ldr	r3, [pc, #104]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	4619      	mov	r1, r3
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7fe ff6f 	bl	800eb86 <USBD_SetClassConfig>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fcac:	7bfb      	ldrb	r3, [r7, #15]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00f      	beq.n	800fcd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fcb2:	6839      	ldr	r1, [r7, #0]
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 f918 	bl	800feea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f7fe ff7b 	bl	800ebbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2202      	movs	r2, #2
 800fccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fcd0:	e014      	b.n	800fcfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 f9e0 	bl	8010098 <USBD_CtlSendStatus>
      break;
 800fcd8:	e010      	b.n	800fcfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 f9dc 	bl	8010098 <USBD_CtlSendStatus>
      break;
 800fce0:	e00c      	b.n	800fcfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fce2:	6839      	ldr	r1, [r7, #0]
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 f900 	bl	800feea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fcea:	4b07      	ldr	r3, [pc, #28]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7fe ff64 	bl	800ebbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fcf6:	2303      	movs	r3, #3
 800fcf8:	73fb      	strb	r3, [r7, #15]
      break;
 800fcfa:	bf00      	nop
  }

  return ret;
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	24000520 	.word	0x24000520

0800fd0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	88db      	ldrh	r3, [r3, #6]
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	d004      	beq.n	800fd28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 f8e2 	bl	800feea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fd26:	e023      	b.n	800fd70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	2b02      	cmp	r3, #2
 800fd32:	dc02      	bgt.n	800fd3a <USBD_GetConfig+0x2e>
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	dc03      	bgt.n	800fd40 <USBD_GetConfig+0x34>
 800fd38:	e015      	b.n	800fd66 <USBD_GetConfig+0x5a>
 800fd3a:	2b03      	cmp	r3, #3
 800fd3c:	d00b      	beq.n	800fd56 <USBD_GetConfig+0x4a>
 800fd3e:	e012      	b.n	800fd66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	3308      	adds	r3, #8
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f000 f948 	bl	800ffe4 <USBD_CtlSendData>
        break;
 800fd54:	e00c      	b.n	800fd70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	3304      	adds	r3, #4
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f940 	bl	800ffe4 <USBD_CtlSendData>
        break;
 800fd64:	e004      	b.n	800fd70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fd66:	6839      	ldr	r1, [r7, #0]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f8be 	bl	800feea <USBD_CtlError>
        break;
 800fd6e:	bf00      	nop
}
 800fd70:	bf00      	nop
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d81e      	bhi.n	800fdce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	88db      	ldrh	r3, [r3, #6]
 800fd94:	2b02      	cmp	r3, #2
 800fd96:	d004      	beq.n	800fda2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fd98:	6839      	ldr	r1, [r7, #0]
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f8a5 	bl	800feea <USBD_CtlError>
        break;
 800fda0:	e01a      	b.n	800fdd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2201      	movs	r2, #1
 800fda6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d005      	beq.n	800fdbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	f043 0202 	orr.w	r2, r3, #2
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	330c      	adds	r3, #12
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 f90c 	bl	800ffe4 <USBD_CtlSendData>
      break;
 800fdcc:	e004      	b.n	800fdd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 f88a 	bl	800feea <USBD_CtlError>
      break;
 800fdd6:	bf00      	nop
  }
}
 800fdd8:	bf00      	nop
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	885b      	ldrh	r3, [r3, #2]
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d107      	bne.n	800fe02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 f94c 	bl	8010098 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fe00:	e013      	b.n	800fe2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	885b      	ldrh	r3, [r3, #2]
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	d10b      	bne.n	800fe22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	889b      	ldrh	r3, [r3, #4]
 800fe0e:	0a1b      	lsrs	r3, r3, #8
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 f93c 	bl	8010098 <USBD_CtlSendStatus>
}
 800fe20:	e003      	b.n	800fe2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f860 	bl	800feea <USBD_CtlError>
}
 800fe2a:	bf00      	nop
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b082      	sub	sp, #8
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	3b01      	subs	r3, #1
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d80b      	bhi.n	800fe62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	885b      	ldrh	r3, [r3, #2]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d10c      	bne.n	800fe6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 f91c 	bl	8010098 <USBD_CtlSendStatus>
      }
      break;
 800fe60:	e004      	b.n	800fe6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fe62:	6839      	ldr	r1, [r7, #0]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f840 	bl	800feea <USBD_CtlError>
      break;
 800fe6a:	e000      	b.n	800fe6e <USBD_ClrFeature+0x3c>
      break;
 800fe6c:	bf00      	nop
  }
}
 800fe6e:	bf00      	nop
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b084      	sub	sp, #16
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	781a      	ldrb	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	781a      	ldrb	r2, [r3, #0]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f7ff fa16 	bl	800f2d2 <SWAPBYTE>
 800fea6:	4603      	mov	r3, r0
 800fea8:	461a      	mov	r2, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	3301      	adds	r3, #1
 800feb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	3301      	adds	r3, #1
 800feb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f7ff fa09 	bl	800f2d2 <SWAPBYTE>
 800fec0:	4603      	mov	r3, r0
 800fec2:	461a      	mov	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	3301      	adds	r3, #1
 800fecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	3301      	adds	r3, #1
 800fed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f7ff f9fc 	bl	800f2d2 <SWAPBYTE>
 800feda:	4603      	mov	r3, r0
 800fedc:	461a      	mov	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	80da      	strh	r2, [r3, #6]
}
 800fee2:	bf00      	nop
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b082      	sub	sp, #8
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fef4:	2180      	movs	r1, #128	@ 0x80
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 fd22 	bl	8010940 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fefc:	2100      	movs	r1, #0
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fd1e 	bl	8010940 <USBD_LL_StallEP>
}
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d042      	beq.n	800ffa8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ff26:	6938      	ldr	r0, [r7, #16]
 800ff28:	f000 f842 	bl	800ffb0 <USBD_GetLen>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	3301      	adds	r3, #1
 800ff30:	005b      	lsls	r3, r3, #1
 800ff32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff36:	d808      	bhi.n	800ff4a <USBD_GetString+0x3e>
 800ff38:	6938      	ldr	r0, [r7, #16]
 800ff3a:	f000 f839 	bl	800ffb0 <USBD_GetLen>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	3301      	adds	r3, #1
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	005b      	lsls	r3, r3, #1
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	e001      	b.n	800ff4e <USBD_GetString+0x42>
 800ff4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ff52:	7dfb      	ldrb	r3, [r7, #23]
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	4413      	add	r3, r2
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	7812      	ldrb	r2, [r2, #0]
 800ff5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ff5e:	7dfb      	ldrb	r3, [r7, #23]
 800ff60:	3301      	adds	r3, #1
 800ff62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ff64:	7dfb      	ldrb	r3, [r7, #23]
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	4413      	add	r3, r2
 800ff6a:	2203      	movs	r2, #3
 800ff6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ff6e:	7dfb      	ldrb	r3, [r7, #23]
 800ff70:	3301      	adds	r3, #1
 800ff72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ff74:	e013      	b.n	800ff9e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ff76:	7dfb      	ldrb	r3, [r7, #23]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	693a      	ldr	r2, [r7, #16]
 800ff7e:	7812      	ldrb	r2, [r2, #0]
 800ff80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	3301      	adds	r3, #1
 800ff86:	613b      	str	r3, [r7, #16]
    idx++;
 800ff88:	7dfb      	ldrb	r3, [r7, #23]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ff8e:	7dfb      	ldrb	r3, [r7, #23]
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	4413      	add	r3, r2
 800ff94:	2200      	movs	r2, #0
 800ff96:	701a      	strb	r2, [r3, #0]
    idx++;
 800ff98:	7dfb      	ldrb	r3, [r7, #23]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1e7      	bne.n	800ff76 <USBD_GetString+0x6a>
 800ffa6:	e000      	b.n	800ffaa <USBD_GetString+0x9e>
    return;
 800ffa8:	bf00      	nop
  }
}
 800ffaa:	3718      	adds	r7, #24
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ffc0:	e005      	b.n	800ffce <USBD_GetLen+0x1e>
  {
    len++;
 800ffc2:	7bfb      	ldrb	r3, [r7, #15]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	3301      	adds	r3, #1
 800ffcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d1f5      	bne.n	800ffc2 <USBD_GetLen+0x12>
  }

  return len;
 800ffd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3714      	adds	r7, #20
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2202      	movs	r2, #2
 800fff4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	2100      	movs	r1, #0
 801000a:	68f8      	ldr	r0, [r7, #12]
 801000c:	f000 fd21 	bl	8010a52 <USBD_LL_Transmit>

  return USBD_OK;
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801001a:	b580      	push	{r7, lr}
 801001c:	b084      	sub	sp, #16
 801001e:	af00      	add	r7, sp, #0
 8010020:	60f8      	str	r0, [r7, #12]
 8010022:	60b9      	str	r1, [r7, #8]
 8010024:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	68ba      	ldr	r2, [r7, #8]
 801002a:	2100      	movs	r1, #0
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f000 fd10 	bl	8010a52 <USBD_LL_Transmit>

  return USBD_OK;
 8010032:	2300      	movs	r3, #0
}
 8010034:	4618      	mov	r0, r3
 8010036:	3710      	adds	r7, #16
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2203      	movs	r2, #3
 801004c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	2100      	movs	r1, #0
 8010066:	68f8      	ldr	r0, [r7, #12]
 8010068:	f000 fd14 	bl	8010a94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010076:	b580      	push	{r7, lr}
 8010078:	b084      	sub	sp, #16
 801007a:	af00      	add	r7, sp, #0
 801007c:	60f8      	str	r0, [r7, #12]
 801007e:	60b9      	str	r1, [r7, #8]
 8010080:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	68ba      	ldr	r2, [r7, #8]
 8010086:	2100      	movs	r1, #0
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f000 fd03 	bl	8010a94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801008e:	2300      	movs	r3, #0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2204      	movs	r2, #4
 80100a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80100a8:	2300      	movs	r3, #0
 80100aa:	2200      	movs	r2, #0
 80100ac:	2100      	movs	r1, #0
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 fccf 	bl	8010a52 <USBD_LL_Transmit>

  return USBD_OK;
 80100b4:	2300      	movs	r3, #0
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}

080100be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80100be:	b580      	push	{r7, lr}
 80100c0:	b082      	sub	sp, #8
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2205      	movs	r2, #5
 80100ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100ce:	2300      	movs	r3, #0
 80100d0:	2200      	movs	r2, #0
 80100d2:	2100      	movs	r1, #0
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 fcdd 	bl	8010a94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80100da:	2300      	movs	r3, #0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80100e8:	2200      	movs	r2, #0
 80100ea:	4918      	ldr	r1, [pc, #96]	@ (801014c <MX_USB_DEVICE_Init+0x68>)
 80100ec:	4818      	ldr	r0, [pc, #96]	@ (8010150 <MX_USB_DEVICE_Init+0x6c>)
 80100ee:	f7fe fccd 	bl	800ea8c <USBD_Init>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d001      	beq.n	80100fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80100f8:	f7f0 fe60 	bl	8000dbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80100fc:	4915      	ldr	r1, [pc, #84]	@ (8010154 <MX_USB_DEVICE_Init+0x70>)
 80100fe:	4814      	ldr	r0, [pc, #80]	@ (8010150 <MX_USB_DEVICE_Init+0x6c>)
 8010100:	f7fe fcf4 	bl	800eaec <USBD_RegisterClass>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801010a:	f7f0 fe57 	bl	8000dbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801010e:	4912      	ldr	r1, [pc, #72]	@ (8010158 <MX_USB_DEVICE_Init+0x74>)
 8010110:	480f      	ldr	r0, [pc, #60]	@ (8010150 <MX_USB_DEVICE_Init+0x6c>)
 8010112:	f7fe fbeb 	bl	800e8ec <USBD_CDC_RegisterInterface>
 8010116:	4603      	mov	r3, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d001      	beq.n	8010120 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801011c:	f7f0 fe4e 	bl	8000dbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010120:	480b      	ldr	r0, [pc, #44]	@ (8010150 <MX_USB_DEVICE_Init+0x6c>)
 8010122:	f7fe fd19 	bl	800eb58 <USBD_Start>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d001      	beq.n	8010130 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801012c:	f7f0 fe46 	bl	8000dbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010130:	f7f7 fb26 	bl	8007780 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8010134:	4b06      	ldr	r3, [pc, #24]	@ (8010150 <MX_USB_DEVICE_Init+0x6c>)
 8010136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801013a:	4a05      	ldr	r2, [pc, #20]	@ (8010150 <MX_USB_DEVICE_Init+0x6c>)
 801013c:	33b0      	adds	r3, #176	@ 0xb0
 801013e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010142:	4a06      	ldr	r2, [pc, #24]	@ (801015c <MX_USB_DEVICE_Init+0x78>)
 8010144:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010146:	bf00      	nop
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	240000b0 	.word	0x240000b0
 8010150:	24000524 	.word	0x24000524
 8010154:	2400001c 	.word	0x2400001c
 8010158:	2400009c 	.word	0x2400009c
 801015c:	24000800 	.word	0x24000800

08010160 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010164:	2200      	movs	r2, #0
 8010166:	4905      	ldr	r1, [pc, #20]	@ (801017c <CDC_Init_FS+0x1c>)
 8010168:	4805      	ldr	r0, [pc, #20]	@ (8010180 <CDC_Init_FS+0x20>)
 801016a:	f7fe fbd9 	bl	800e920 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801016e:	4905      	ldr	r1, [pc, #20]	@ (8010184 <CDC_Init_FS+0x24>)
 8010170:	4803      	ldr	r0, [pc, #12]	@ (8010180 <CDC_Init_FS+0x20>)
 8010172:	f7fe fbf7 	bl	800e964 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010176:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010178:	4618      	mov	r0, r3
 801017a:	bd80      	pop	{r7, pc}
 801017c:	24001004 	.word	0x24001004
 8010180:	24000524 	.word	0x24000524
 8010184:	24000804 	.word	0x24000804

08010188 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010188:	b480      	push	{r7}
 801018a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801018c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801018e:	4618      	mov	r0, r3
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	4603      	mov	r3, r0
 80101a0:	6039      	str	r1, [r7, #0]
 80101a2:	71fb      	strb	r3, [r7, #7]
 80101a4:	4613      	mov	r3, r2
 80101a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80101a8:	79fb      	ldrb	r3, [r7, #7]
 80101aa:	2b23      	cmp	r3, #35	@ 0x23
 80101ac:	d84a      	bhi.n	8010244 <CDC_Control_FS+0xac>
 80101ae:	a201      	add	r2, pc, #4	@ (adr r2, 80101b4 <CDC_Control_FS+0x1c>)
 80101b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b4:	08010245 	.word	0x08010245
 80101b8:	08010245 	.word	0x08010245
 80101bc:	08010245 	.word	0x08010245
 80101c0:	08010245 	.word	0x08010245
 80101c4:	08010245 	.word	0x08010245
 80101c8:	08010245 	.word	0x08010245
 80101cc:	08010245 	.word	0x08010245
 80101d0:	08010245 	.word	0x08010245
 80101d4:	08010245 	.word	0x08010245
 80101d8:	08010245 	.word	0x08010245
 80101dc:	08010245 	.word	0x08010245
 80101e0:	08010245 	.word	0x08010245
 80101e4:	08010245 	.word	0x08010245
 80101e8:	08010245 	.word	0x08010245
 80101ec:	08010245 	.word	0x08010245
 80101f0:	08010245 	.word	0x08010245
 80101f4:	08010245 	.word	0x08010245
 80101f8:	08010245 	.word	0x08010245
 80101fc:	08010245 	.word	0x08010245
 8010200:	08010245 	.word	0x08010245
 8010204:	08010245 	.word	0x08010245
 8010208:	08010245 	.word	0x08010245
 801020c:	08010245 	.word	0x08010245
 8010210:	08010245 	.word	0x08010245
 8010214:	08010245 	.word	0x08010245
 8010218:	08010245 	.word	0x08010245
 801021c:	08010245 	.word	0x08010245
 8010220:	08010245 	.word	0x08010245
 8010224:	08010245 	.word	0x08010245
 8010228:	08010245 	.word	0x08010245
 801022c:	08010245 	.word	0x08010245
 8010230:	08010245 	.word	0x08010245
 8010234:	08010245 	.word	0x08010245
 8010238:	08010245 	.word	0x08010245
 801023c:	08010245 	.word	0x08010245
 8010240:	08010245 	.word	0x08010245
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010244:	bf00      	nop
  }

  return (USBD_OK);
 8010246:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010248:	4618      	mov	r0, r3
 801024a:	370c      	adds	r7, #12
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801025e:	6879      	ldr	r1, [r7, #4]
 8010260:	4806      	ldr	r0, [pc, #24]	@ (801027c <CDC_Receive_FS+0x28>)
 8010262:	f7fe fb7f 	bl	800e964 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010266:	4805      	ldr	r0, [pc, #20]	@ (801027c <CDC_Receive_FS+0x28>)
 8010268:	f7fe fbda 	bl	800ea20 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 801026c:	4b04      	ldr	r3, [pc, #16]	@ (8010280 <CDC_Receive_FS+0x2c>)
 801026e:	2201      	movs	r2, #1
 8010270:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8010272:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010274:	4618      	mov	r0, r3
 8010276:	3708      	adds	r7, #8
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	24000524 	.word	0x24000524
 8010280:	24000514 	.word	0x24000514

08010284 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010290:	2300      	movs	r3, #0
 8010292:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010294:	4b0d      	ldr	r3, [pc, #52]	@ (80102cc <CDC_Transmit_FS+0x48>)
 8010296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801029a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d001      	beq.n	80102aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80102a6:	2301      	movs	r3, #1
 80102a8:	e00b      	b.n	80102c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80102aa:	887b      	ldrh	r3, [r7, #2]
 80102ac:	461a      	mov	r2, r3
 80102ae:	6879      	ldr	r1, [r7, #4]
 80102b0:	4806      	ldr	r0, [pc, #24]	@ (80102cc <CDC_Transmit_FS+0x48>)
 80102b2:	f7fe fb35 	bl	800e920 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80102b6:	4805      	ldr	r0, [pc, #20]	@ (80102cc <CDC_Transmit_FS+0x48>)
 80102b8:	f7fe fb72 	bl	800e9a0 <USBD_CDC_TransmitPacket>
 80102bc:	4603      	mov	r3, r0
 80102be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80102c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	24000524 	.word	0x24000524

080102d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b087      	sub	sp, #28
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	4613      	mov	r3, r2
 80102dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80102de:	2300      	movs	r3, #0
 80102e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80102e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	371c      	adds	r7, #28
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
	...

080102f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	6039      	str	r1, [r7, #0]
 80102fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	2212      	movs	r2, #18
 8010304:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010306:	4b03      	ldr	r3, [pc, #12]	@ (8010314 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010308:	4618      	mov	r0, r3
 801030a:	370c      	adds	r7, #12
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr
 8010314:	240000d0 	.word	0x240000d0

08010318 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010318:	b480      	push	{r7}
 801031a:	b083      	sub	sp, #12
 801031c:	af00      	add	r7, sp, #0
 801031e:	4603      	mov	r3, r0
 8010320:	6039      	str	r1, [r7, #0]
 8010322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2204      	movs	r2, #4
 8010328:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801032a:	4b03      	ldr	r3, [pc, #12]	@ (8010338 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801032c:	4618      	mov	r0, r3
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr
 8010338:	240000e4 	.word	0x240000e4

0801033c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	4603      	mov	r3, r0
 8010344:	6039      	str	r1, [r7, #0]
 8010346:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010348:	79fb      	ldrb	r3, [r7, #7]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d105      	bne.n	801035a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801034e:	683a      	ldr	r2, [r7, #0]
 8010350:	4907      	ldr	r1, [pc, #28]	@ (8010370 <USBD_FS_ProductStrDescriptor+0x34>)
 8010352:	4808      	ldr	r0, [pc, #32]	@ (8010374 <USBD_FS_ProductStrDescriptor+0x38>)
 8010354:	f7ff fdda 	bl	800ff0c <USBD_GetString>
 8010358:	e004      	b.n	8010364 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801035a:	683a      	ldr	r2, [r7, #0]
 801035c:	4904      	ldr	r1, [pc, #16]	@ (8010370 <USBD_FS_ProductStrDescriptor+0x34>)
 801035e:	4805      	ldr	r0, [pc, #20]	@ (8010374 <USBD_FS_ProductStrDescriptor+0x38>)
 8010360:	f7ff fdd4 	bl	800ff0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010364:	4b02      	ldr	r3, [pc, #8]	@ (8010370 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010366:	4618      	mov	r0, r3
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	24001804 	.word	0x24001804
 8010374:	080114e4 	.word	0x080114e4

08010378 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	4603      	mov	r3, r0
 8010380:	6039      	str	r1, [r7, #0]
 8010382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010384:	683a      	ldr	r2, [r7, #0]
 8010386:	4904      	ldr	r1, [pc, #16]	@ (8010398 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010388:	4804      	ldr	r0, [pc, #16]	@ (801039c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801038a:	f7ff fdbf 	bl	800ff0c <USBD_GetString>
  return USBD_StrDesc;
 801038e:	4b02      	ldr	r3, [pc, #8]	@ (8010398 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010390:	4618      	mov	r0, r3
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	24001804 	.word	0x24001804
 801039c:	080114fc 	.word	0x080114fc

080103a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	4603      	mov	r3, r0
 80103a8:	6039      	str	r1, [r7, #0]
 80103aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	221a      	movs	r2, #26
 80103b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80103b2:	f000 f843 	bl	801043c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80103b6:	4b02      	ldr	r3, [pc, #8]	@ (80103c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	240000e8 	.word	0x240000e8

080103c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	4603      	mov	r3, r0
 80103cc:	6039      	str	r1, [r7, #0]
 80103ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80103d0:	79fb      	ldrb	r3, [r7, #7]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d105      	bne.n	80103e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103d6:	683a      	ldr	r2, [r7, #0]
 80103d8:	4907      	ldr	r1, [pc, #28]	@ (80103f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80103da:	4808      	ldr	r0, [pc, #32]	@ (80103fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80103dc:	f7ff fd96 	bl	800ff0c <USBD_GetString>
 80103e0:	e004      	b.n	80103ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103e2:	683a      	ldr	r2, [r7, #0]
 80103e4:	4904      	ldr	r1, [pc, #16]	@ (80103f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80103e6:	4805      	ldr	r0, [pc, #20]	@ (80103fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80103e8:	f7ff fd90 	bl	800ff0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80103ec:	4b02      	ldr	r3, [pc, #8]	@ (80103f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	24001804 	.word	0x24001804
 80103fc:	08011510 	.word	0x08011510

08010400 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	4603      	mov	r3, r0
 8010408:	6039      	str	r1, [r7, #0]
 801040a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801040c:	79fb      	ldrb	r3, [r7, #7]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d105      	bne.n	801041e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	4907      	ldr	r1, [pc, #28]	@ (8010434 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010416:	4808      	ldr	r0, [pc, #32]	@ (8010438 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010418:	f7ff fd78 	bl	800ff0c <USBD_GetString>
 801041c:	e004      	b.n	8010428 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801041e:	683a      	ldr	r2, [r7, #0]
 8010420:	4904      	ldr	r1, [pc, #16]	@ (8010434 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010422:	4805      	ldr	r0, [pc, #20]	@ (8010438 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010424:	f7ff fd72 	bl	800ff0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010428:	4b02      	ldr	r3, [pc, #8]	@ (8010434 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801042a:	4618      	mov	r0, r3
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	24001804 	.word	0x24001804
 8010438:	0801151c 	.word	0x0801151c

0801043c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010442:	4b0f      	ldr	r3, [pc, #60]	@ (8010480 <Get_SerialNum+0x44>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010448:	4b0e      	ldr	r3, [pc, #56]	@ (8010484 <Get_SerialNum+0x48>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801044e:	4b0e      	ldr	r3, [pc, #56]	@ (8010488 <Get_SerialNum+0x4c>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010454:	68fa      	ldr	r2, [r7, #12]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4413      	add	r3, r2
 801045a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d009      	beq.n	8010476 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010462:	2208      	movs	r2, #8
 8010464:	4909      	ldr	r1, [pc, #36]	@ (801048c <Get_SerialNum+0x50>)
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f000 f814 	bl	8010494 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801046c:	2204      	movs	r2, #4
 801046e:	4908      	ldr	r1, [pc, #32]	@ (8010490 <Get_SerialNum+0x54>)
 8010470:	68b8      	ldr	r0, [r7, #8]
 8010472:	f000 f80f 	bl	8010494 <IntToUnicode>
  }
}
 8010476:	bf00      	nop
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	1ff1e800 	.word	0x1ff1e800
 8010484:	1ff1e804 	.word	0x1ff1e804
 8010488:	1ff1e808 	.word	0x1ff1e808
 801048c:	240000ea 	.word	0x240000ea
 8010490:	240000fa 	.word	0x240000fa

08010494 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010494:	b480      	push	{r7}
 8010496:	b087      	sub	sp, #28
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	4613      	mov	r3, r2
 80104a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80104a6:	2300      	movs	r3, #0
 80104a8:	75fb      	strb	r3, [r7, #23]
 80104aa:	e027      	b.n	80104fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	0f1b      	lsrs	r3, r3, #28
 80104b0:	2b09      	cmp	r3, #9
 80104b2:	d80b      	bhi.n	80104cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	0f1b      	lsrs	r3, r3, #28
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	7dfb      	ldrb	r3, [r7, #23]
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4619      	mov	r1, r3
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	440b      	add	r3, r1
 80104c4:	3230      	adds	r2, #48	@ 0x30
 80104c6:	b2d2      	uxtb	r2, r2
 80104c8:	701a      	strb	r2, [r3, #0]
 80104ca:	e00a      	b.n	80104e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	0f1b      	lsrs	r3, r3, #28
 80104d0:	b2da      	uxtb	r2, r3
 80104d2:	7dfb      	ldrb	r3, [r7, #23]
 80104d4:	005b      	lsls	r3, r3, #1
 80104d6:	4619      	mov	r1, r3
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	440b      	add	r3, r1
 80104dc:	3237      	adds	r2, #55	@ 0x37
 80104de:	b2d2      	uxtb	r2, r2
 80104e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	011b      	lsls	r3, r3, #4
 80104e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80104e8:	7dfb      	ldrb	r3, [r7, #23]
 80104ea:	005b      	lsls	r3, r3, #1
 80104ec:	3301      	adds	r3, #1
 80104ee:	68ba      	ldr	r2, [r7, #8]
 80104f0:	4413      	add	r3, r2
 80104f2:	2200      	movs	r2, #0
 80104f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80104f6:	7dfb      	ldrb	r3, [r7, #23]
 80104f8:	3301      	adds	r3, #1
 80104fa:	75fb      	strb	r3, [r7, #23]
 80104fc:	7dfa      	ldrb	r2, [r7, #23]
 80104fe:	79fb      	ldrb	r3, [r7, #7]
 8010500:	429a      	cmp	r2, r3
 8010502:	d3d3      	bcc.n	80104ac <IntToUnicode+0x18>
  }
}
 8010504:	bf00      	nop
 8010506:	bf00      	nop
 8010508:	371c      	adds	r7, #28
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr
	...

08010514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b0ba      	sub	sp, #232	@ 0xe8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801051c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010520:	2200      	movs	r2, #0
 8010522:	601a      	str	r2, [r3, #0]
 8010524:	605a      	str	r2, [r3, #4]
 8010526:	609a      	str	r2, [r3, #8]
 8010528:	60da      	str	r2, [r3, #12]
 801052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801052c:	f107 0310 	add.w	r3, r7, #16
 8010530:	22c0      	movs	r2, #192	@ 0xc0
 8010532:	2100      	movs	r1, #0
 8010534:	4618      	mov	r0, r3
 8010536:	f000 fb47 	bl	8010bc8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4a2c      	ldr	r2, [pc, #176]	@ (80105f0 <HAL_PCD_MspInit+0xdc>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d151      	bne.n	80105e8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010544:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010548:	f04f 0300 	mov.w	r3, #0
 801054c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8010550:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010558:	f107 0310 	add.w	r3, r7, #16
 801055c:	4618      	mov	r0, r3
 801055e:	f7f8 f905 	bl	800876c <HAL_RCCEx_PeriphCLKConfig>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8010568:	f7f0 fc28 	bl	8000dbc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801056c:	f7f7 f908 	bl	8007780 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010570:	4b20      	ldr	r3, [pc, #128]	@ (80105f4 <HAL_PCD_MspInit+0xe0>)
 8010572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010576:	4a1f      	ldr	r2, [pc, #124]	@ (80105f4 <HAL_PCD_MspInit+0xe0>)
 8010578:	f043 0301 	orr.w	r3, r3, #1
 801057c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010580:	4b1c      	ldr	r3, [pc, #112]	@ (80105f4 <HAL_PCD_MspInit+0xe0>)
 8010582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010586:	f003 0301 	and.w	r3, r3, #1
 801058a:	60fb      	str	r3, [r7, #12]
 801058c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801058e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010596:	2302      	movs	r3, #2
 8010598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801059c:	2300      	movs	r3, #0
 801059e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105a2:	2300      	movs	r3, #0
 80105a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80105a8:	230a      	movs	r3, #10
 80105aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80105b2:	4619      	mov	r1, r3
 80105b4:	4810      	ldr	r0, [pc, #64]	@ (80105f8 <HAL_PCD_MspInit+0xe4>)
 80105b6:	f7f2 fd83 	bl	80030c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105ba:	4b0e      	ldr	r3, [pc, #56]	@ (80105f4 <HAL_PCD_MspInit+0xe0>)
 80105bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80105c0:	4a0c      	ldr	r2, [pc, #48]	@ (80105f4 <HAL_PCD_MspInit+0xe0>)
 80105c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80105c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80105ca:	4b0a      	ldr	r3, [pc, #40]	@ (80105f4 <HAL_PCD_MspInit+0xe0>)
 80105cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80105d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80105d4:	60bb      	str	r3, [r7, #8]
 80105d6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80105d8:	2200      	movs	r2, #0
 80105da:	2100      	movs	r1, #0
 80105dc:	2065      	movs	r0, #101	@ 0x65
 80105de:	f7f2 fa6e 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80105e2:	2065      	movs	r0, #101	@ 0x65
 80105e4:	f7f2 fa85 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80105e8:	bf00      	nop
 80105ea:	37e8      	adds	r7, #232	@ 0xe8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	40080000 	.word	0x40080000
 80105f4:	58024400 	.word	0x58024400
 80105f8:	58020000 	.word	0x58020000

080105fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010610:	4619      	mov	r1, r3
 8010612:	4610      	mov	r0, r2
 8010614:	f7fe faed 	bl	800ebf2 <USBD_LL_SetupStage>
}
 8010618:	bf00      	nop
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	460b      	mov	r3, r1
 801062a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010632:	78fa      	ldrb	r2, [r7, #3]
 8010634:	6879      	ldr	r1, [r7, #4]
 8010636:	4613      	mov	r3, r2
 8010638:	00db      	lsls	r3, r3, #3
 801063a:	4413      	add	r3, r2
 801063c:	009b      	lsls	r3, r3, #2
 801063e:	440b      	add	r3, r1
 8010640:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	78fb      	ldrb	r3, [r7, #3]
 8010648:	4619      	mov	r1, r3
 801064a:	f7fe fb27 	bl	800ec9c <USBD_LL_DataOutStage>
}
 801064e:	bf00      	nop
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b082      	sub	sp, #8
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
 801065e:	460b      	mov	r3, r1
 8010660:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010668:	78fa      	ldrb	r2, [r7, #3]
 801066a:	6879      	ldr	r1, [r7, #4]
 801066c:	4613      	mov	r3, r2
 801066e:	00db      	lsls	r3, r3, #3
 8010670:	4413      	add	r3, r2
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	440b      	add	r3, r1
 8010676:	3320      	adds	r3, #32
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	78fb      	ldrb	r3, [r7, #3]
 801067c:	4619      	mov	r1, r3
 801067e:	f7fe fbc0 	bl	800ee02 <USBD_LL_DataInStage>
}
 8010682:	bf00      	nop
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801068a:	b580      	push	{r7, lr}
 801068c:	b082      	sub	sp, #8
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010698:	4618      	mov	r0, r3
 801069a:	f7fe fcfa 	bl	800f092 <USBD_LL_SOF>
}
 801069e:	bf00      	nop
 80106a0:	3708      	adds	r7, #8
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b084      	sub	sp, #16
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80106ae:	2301      	movs	r3, #1
 80106b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	79db      	ldrb	r3, [r3, #7]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d102      	bne.n	80106c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80106ba:	2300      	movs	r3, #0
 80106bc:	73fb      	strb	r3, [r7, #15]
 80106be:	e008      	b.n	80106d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	79db      	ldrb	r3, [r3, #7]
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	d102      	bne.n	80106ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80106c8:	2301      	movs	r3, #1
 80106ca:	73fb      	strb	r3, [r7, #15]
 80106cc:	e001      	b.n	80106d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80106ce:	f7f0 fb75 	bl	8000dbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80106d8:	7bfa      	ldrb	r2, [r7, #15]
 80106da:	4611      	mov	r1, r2
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fe fc94 	bl	800f00a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fe fc3c 	bl	800ef66 <USBD_LL_Reset>
}
 80106ee:	bf00      	nop
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
	...

080106f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010706:	4618      	mov	r0, r3
 8010708:	f7fe fc8f 	bl	800f02a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	6812      	ldr	r2, [r2, #0]
 801071a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801071e:	f043 0301 	orr.w	r3, r3, #1
 8010722:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	7adb      	ldrb	r3, [r3, #11]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d005      	beq.n	8010738 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801072c:	4b04      	ldr	r3, [pc, #16]	@ (8010740 <HAL_PCD_SuspendCallback+0x48>)
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	4a03      	ldr	r2, [pc, #12]	@ (8010740 <HAL_PCD_SuspendCallback+0x48>)
 8010732:	f043 0306 	orr.w	r3, r3, #6
 8010736:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010738:	bf00      	nop
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}
 8010740:	e000ed00 	.word	0xe000ed00

08010744 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010752:	4618      	mov	r0, r3
 8010754:	f7fe fc85 	bl	800f062 <USBD_LL_Resume>
}
 8010758:	bf00      	nop
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010772:	78fa      	ldrb	r2, [r7, #3]
 8010774:	4611      	mov	r1, r2
 8010776:	4618      	mov	r0, r3
 8010778:	f7fe fcdd 	bl	800f136 <USBD_LL_IsoOUTIncomplete>
}
 801077c:	bf00      	nop
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010796:	78fa      	ldrb	r2, [r7, #3]
 8010798:	4611      	mov	r1, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f7fe fc99 	bl	800f0d2 <USBD_LL_IsoINIncomplete>
}
 80107a0:	bf00      	nop
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fe fcef 	bl	800f19a <USBD_LL_DevConnected>
}
 80107bc:	bf00      	nop
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fe fcec 	bl	800f1b0 <USBD_LL_DevDisconnected>
}
 80107d8:	bf00      	nop
 80107da:	3708      	adds	r7, #8
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d13e      	bne.n	801086e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80107f0:	4a21      	ldr	r2, [pc, #132]	@ (8010878 <USBD_LL_Init+0x98>)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	4a1f      	ldr	r2, [pc, #124]	@ (8010878 <USBD_LL_Init+0x98>)
 80107fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010800:	4b1d      	ldr	r3, [pc, #116]	@ (8010878 <USBD_LL_Init+0x98>)
 8010802:	4a1e      	ldr	r2, [pc, #120]	@ (801087c <USBD_LL_Init+0x9c>)
 8010804:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010806:	4b1c      	ldr	r3, [pc, #112]	@ (8010878 <USBD_LL_Init+0x98>)
 8010808:	2209      	movs	r2, #9
 801080a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801080c:	4b1a      	ldr	r3, [pc, #104]	@ (8010878 <USBD_LL_Init+0x98>)
 801080e:	2202      	movs	r2, #2
 8010810:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010812:	4b19      	ldr	r3, [pc, #100]	@ (8010878 <USBD_LL_Init+0x98>)
 8010814:	2200      	movs	r2, #0
 8010816:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010818:	4b17      	ldr	r3, [pc, #92]	@ (8010878 <USBD_LL_Init+0x98>)
 801081a:	2202      	movs	r2, #2
 801081c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801081e:	4b16      	ldr	r3, [pc, #88]	@ (8010878 <USBD_LL_Init+0x98>)
 8010820:	2200      	movs	r2, #0
 8010822:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010824:	4b14      	ldr	r3, [pc, #80]	@ (8010878 <USBD_LL_Init+0x98>)
 8010826:	2200      	movs	r2, #0
 8010828:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801082a:	4b13      	ldr	r3, [pc, #76]	@ (8010878 <USBD_LL_Init+0x98>)
 801082c:	2200      	movs	r2, #0
 801082e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010830:	4b11      	ldr	r3, [pc, #68]	@ (8010878 <USBD_LL_Init+0x98>)
 8010832:	2200      	movs	r2, #0
 8010834:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010836:	4b10      	ldr	r3, [pc, #64]	@ (8010878 <USBD_LL_Init+0x98>)
 8010838:	2200      	movs	r2, #0
 801083a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801083c:	4b0e      	ldr	r3, [pc, #56]	@ (8010878 <USBD_LL_Init+0x98>)
 801083e:	2200      	movs	r2, #0
 8010840:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010842:	480d      	ldr	r0, [pc, #52]	@ (8010878 <USBD_LL_Init+0x98>)
 8010844:	f7f5 fcc2 	bl	80061cc <HAL_PCD_Init>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d001      	beq.n	8010852 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801084e:	f7f0 fab5 	bl	8000dbc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010852:	2180      	movs	r1, #128	@ 0x80
 8010854:	4808      	ldr	r0, [pc, #32]	@ (8010878 <USBD_LL_Init+0x98>)
 8010856:	f7f6 ff18 	bl	800768a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801085a:	2240      	movs	r2, #64	@ 0x40
 801085c:	2100      	movs	r1, #0
 801085e:	4806      	ldr	r0, [pc, #24]	@ (8010878 <USBD_LL_Init+0x98>)
 8010860:	f7f6 fecc 	bl	80075fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010864:	2280      	movs	r2, #128	@ 0x80
 8010866:	2101      	movs	r1, #1
 8010868:	4803      	ldr	r0, [pc, #12]	@ (8010878 <USBD_LL_Init+0x98>)
 801086a:	f7f6 fec7 	bl	80075fc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	24001a04 	.word	0x24001a04
 801087c:	40080000 	.word	0x40080000

08010880 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010888:	2300      	movs	r3, #0
 801088a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801088c:	2300      	movs	r3, #0
 801088e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010896:	4618      	mov	r0, r3
 8010898:	f7f5 fda4 	bl	80063e4 <HAL_PCD_Start>
 801089c:	4603      	mov	r3, r0
 801089e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f000 f942 	bl	8010b2c <USBD_Get_USB_Status>
 80108a8:	4603      	mov	r3, r0
 80108aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3710      	adds	r7, #16
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}

080108b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80108b6:	b580      	push	{r7, lr}
 80108b8:	b084      	sub	sp, #16
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
 80108be:	4608      	mov	r0, r1
 80108c0:	4611      	mov	r1, r2
 80108c2:	461a      	mov	r2, r3
 80108c4:	4603      	mov	r3, r0
 80108c6:	70fb      	strb	r3, [r7, #3]
 80108c8:	460b      	mov	r3, r1
 80108ca:	70bb      	strb	r3, [r7, #2]
 80108cc:	4613      	mov	r3, r2
 80108ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108d0:	2300      	movs	r3, #0
 80108d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108d4:	2300      	movs	r3, #0
 80108d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108de:	78bb      	ldrb	r3, [r7, #2]
 80108e0:	883a      	ldrh	r2, [r7, #0]
 80108e2:	78f9      	ldrb	r1, [r7, #3]
 80108e4:	f7f6 faa5 	bl	8006e32 <HAL_PCD_EP_Open>
 80108e8:	4603      	mov	r3, r0
 80108ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108ec:	7bfb      	ldrb	r3, [r7, #15]
 80108ee:	4618      	mov	r0, r3
 80108f0:	f000 f91c 	bl	8010b2c <USBD_Get_USB_Status>
 80108f4:	4603      	mov	r3, r0
 80108f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010902:	b580      	push	{r7, lr}
 8010904:	b084      	sub	sp, #16
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	460b      	mov	r3, r1
 801090c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801090e:	2300      	movs	r3, #0
 8010910:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010912:	2300      	movs	r3, #0
 8010914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801091c:	78fa      	ldrb	r2, [r7, #3]
 801091e:	4611      	mov	r1, r2
 8010920:	4618      	mov	r0, r3
 8010922:	f7f6 faf0 	bl	8006f06 <HAL_PCD_EP_Close>
 8010926:	4603      	mov	r3, r0
 8010928:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801092a:	7bfb      	ldrb	r3, [r7, #15]
 801092c:	4618      	mov	r0, r3
 801092e:	f000 f8fd 	bl	8010b2c <USBD_Get_USB_Status>
 8010932:	4603      	mov	r3, r0
 8010934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010936:	7bbb      	ldrb	r3, [r7, #14]
}
 8010938:	4618      	mov	r0, r3
 801093a:	3710      	adds	r7, #16
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801094c:	2300      	movs	r3, #0
 801094e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010950:	2300      	movs	r3, #0
 8010952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801095a:	78fa      	ldrb	r2, [r7, #3]
 801095c:	4611      	mov	r1, r2
 801095e:	4618      	mov	r0, r3
 8010960:	f7f6 fba8 	bl	80070b4 <HAL_PCD_EP_SetStall>
 8010964:	4603      	mov	r3, r0
 8010966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010968:	7bfb      	ldrb	r3, [r7, #15]
 801096a:	4618      	mov	r0, r3
 801096c:	f000 f8de 	bl	8010b2c <USBD_Get_USB_Status>
 8010970:	4603      	mov	r3, r0
 8010972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010974:	7bbb      	ldrb	r3, [r7, #14]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801097e:	b580      	push	{r7, lr}
 8010980:	b084      	sub	sp, #16
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	460b      	mov	r3, r1
 8010988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801098a:	2300      	movs	r3, #0
 801098c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010998:	78fa      	ldrb	r2, [r7, #3]
 801099a:	4611      	mov	r1, r2
 801099c:	4618      	mov	r0, r3
 801099e:	f7f6 fbec 	bl	800717a <HAL_PCD_EP_ClrStall>
 80109a2:	4603      	mov	r3, r0
 80109a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	4618      	mov	r0, r3
 80109aa:	f000 f8bf 	bl	8010b2c <USBD_Get_USB_Status>
 80109ae:	4603      	mov	r3, r0
 80109b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3710      	adds	r7, #16
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109bc:	b480      	push	{r7}
 80109be:	b085      	sub	sp, #20
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	460b      	mov	r3, r1
 80109c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80109d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	da0b      	bge.n	80109f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80109d8:	78fb      	ldrb	r3, [r7, #3]
 80109da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109de:	68f9      	ldr	r1, [r7, #12]
 80109e0:	4613      	mov	r3, r2
 80109e2:	00db      	lsls	r3, r3, #3
 80109e4:	4413      	add	r3, r2
 80109e6:	009b      	lsls	r3, r3, #2
 80109e8:	440b      	add	r3, r1
 80109ea:	3316      	adds	r3, #22
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	e00b      	b.n	8010a08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80109f0:	78fb      	ldrb	r3, [r7, #3]
 80109f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109f6:	68f9      	ldr	r1, [r7, #12]
 80109f8:	4613      	mov	r3, r2
 80109fa:	00db      	lsls	r3, r3, #3
 80109fc:	4413      	add	r3, r2
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	440b      	add	r3, r1
 8010a02:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010a06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3714      	adds	r7, #20
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a20:	2300      	movs	r3, #0
 8010a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a24:	2300      	movs	r3, #0
 8010a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a2e:	78fa      	ldrb	r2, [r7, #3]
 8010a30:	4611      	mov	r1, r2
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7f6 f9d9 	bl	8006dea <HAL_PCD_SetAddress>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a3c:	7bfb      	ldrb	r3, [r7, #15]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f000 f874 	bl	8010b2c <USBD_Get_USB_Status>
 8010a44:	4603      	mov	r3, r0
 8010a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3710      	adds	r7, #16
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b086      	sub	sp, #24
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	60f8      	str	r0, [r7, #12]
 8010a5a:	607a      	str	r2, [r7, #4]
 8010a5c:	603b      	str	r3, [r7, #0]
 8010a5e:	460b      	mov	r3, r1
 8010a60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a62:	2300      	movs	r3, #0
 8010a64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a66:	2300      	movs	r3, #0
 8010a68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a70:	7af9      	ldrb	r1, [r7, #11]
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	f7f6 fae3 	bl	8007040 <HAL_PCD_EP_Transmit>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a7e:	7dfb      	ldrb	r3, [r7, #23]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f000 f853 	bl	8010b2c <USBD_Get_USB_Status>
 8010a86:	4603      	mov	r3, r0
 8010a88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010a8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3718      	adds	r7, #24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b086      	sub	sp, #24
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	607a      	str	r2, [r7, #4]
 8010a9e:	603b      	str	r3, [r7, #0]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010ab2:	7af9      	ldrb	r1, [r7, #11]
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	687a      	ldr	r2, [r7, #4]
 8010ab8:	f7f6 fa6f 	bl	8006f9a <HAL_PCD_EP_Receive>
 8010abc:	4603      	mov	r3, r0
 8010abe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ac0:	7dfb      	ldrb	r3, [r7, #23]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f000 f832 	bl	8010b2c <USBD_Get_USB_Status>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010acc:	7dbb      	ldrb	r3, [r7, #22]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3718      	adds	r7, #24
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b082      	sub	sp, #8
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
 8010ade:	460b      	mov	r3, r1
 8010ae0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ae8:	78fa      	ldrb	r2, [r7, #3]
 8010aea:	4611      	mov	r1, r2
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7f6 fa8f 	bl	8007010 <HAL_PCD_EP_GetRxCount>
 8010af2:	4603      	mov	r3, r0
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010b04:	4b03      	ldr	r3, [pc, #12]	@ (8010b14 <USBD_static_malloc+0x18>)
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	24001ee8 	.word	0x24001ee8

08010b18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010b20:	bf00      	nop
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	4603      	mov	r3, r0
 8010b34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b36:	2300      	movs	r3, #0
 8010b38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010b3a:	79fb      	ldrb	r3, [r7, #7]
 8010b3c:	2b03      	cmp	r3, #3
 8010b3e:	d817      	bhi.n	8010b70 <USBD_Get_USB_Status+0x44>
 8010b40:	a201      	add	r2, pc, #4	@ (adr r2, 8010b48 <USBD_Get_USB_Status+0x1c>)
 8010b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b46:	bf00      	nop
 8010b48:	08010b59 	.word	0x08010b59
 8010b4c:	08010b5f 	.word	0x08010b5f
 8010b50:	08010b65 	.word	0x08010b65
 8010b54:	08010b6b 	.word	0x08010b6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b5c:	e00b      	b.n	8010b76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	73fb      	strb	r3, [r7, #15]
    break;
 8010b62:	e008      	b.n	8010b76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b64:	2301      	movs	r3, #1
 8010b66:	73fb      	strb	r3, [r7, #15]
    break;
 8010b68:	e005      	b.n	8010b76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b6a:	2303      	movs	r3, #3
 8010b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8010b6e:	e002      	b.n	8010b76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010b70:	2303      	movs	r3, #3
 8010b72:	73fb      	strb	r3, [r7, #15]
    break;
 8010b74:	bf00      	nop
  }
  return usb_status;
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3714      	adds	r7, #20
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr

08010b84 <siprintf>:
 8010b84:	b40e      	push	{r1, r2, r3}
 8010b86:	b510      	push	{r4, lr}
 8010b88:	b09d      	sub	sp, #116	@ 0x74
 8010b8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010b8c:	9002      	str	r0, [sp, #8]
 8010b8e:	9006      	str	r0, [sp, #24]
 8010b90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010b94:	480a      	ldr	r0, [pc, #40]	@ (8010bc0 <siprintf+0x3c>)
 8010b96:	9107      	str	r1, [sp, #28]
 8010b98:	9104      	str	r1, [sp, #16]
 8010b9a:	490a      	ldr	r1, [pc, #40]	@ (8010bc4 <siprintf+0x40>)
 8010b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ba0:	9105      	str	r1, [sp, #20]
 8010ba2:	2400      	movs	r4, #0
 8010ba4:	a902      	add	r1, sp, #8
 8010ba6:	6800      	ldr	r0, [r0, #0]
 8010ba8:	9301      	str	r3, [sp, #4]
 8010baa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010bac:	f000 f994 	bl	8010ed8 <_svfiprintf_r>
 8010bb0:	9b02      	ldr	r3, [sp, #8]
 8010bb2:	701c      	strb	r4, [r3, #0]
 8010bb4:	b01d      	add	sp, #116	@ 0x74
 8010bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bba:	b003      	add	sp, #12
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	24000104 	.word	0x24000104
 8010bc4:	ffff0208 	.word	0xffff0208

08010bc8 <memset>:
 8010bc8:	4402      	add	r2, r0
 8010bca:	4603      	mov	r3, r0
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d100      	bne.n	8010bd2 <memset+0xa>
 8010bd0:	4770      	bx	lr
 8010bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8010bd6:	e7f9      	b.n	8010bcc <memset+0x4>

08010bd8 <__errno>:
 8010bd8:	4b01      	ldr	r3, [pc, #4]	@ (8010be0 <__errno+0x8>)
 8010bda:	6818      	ldr	r0, [r3, #0]
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop
 8010be0:	24000104 	.word	0x24000104

08010be4 <__libc_init_array>:
 8010be4:	b570      	push	{r4, r5, r6, lr}
 8010be6:	4d0d      	ldr	r5, [pc, #52]	@ (8010c1c <__libc_init_array+0x38>)
 8010be8:	4c0d      	ldr	r4, [pc, #52]	@ (8010c20 <__libc_init_array+0x3c>)
 8010bea:	1b64      	subs	r4, r4, r5
 8010bec:	10a4      	asrs	r4, r4, #2
 8010bee:	2600      	movs	r6, #0
 8010bf0:	42a6      	cmp	r6, r4
 8010bf2:	d109      	bne.n	8010c08 <__libc_init_array+0x24>
 8010bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8010c24 <__libc_init_array+0x40>)
 8010bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8010c28 <__libc_init_array+0x44>)
 8010bf8:	f000 fc64 	bl	80114c4 <_init>
 8010bfc:	1b64      	subs	r4, r4, r5
 8010bfe:	10a4      	asrs	r4, r4, #2
 8010c00:	2600      	movs	r6, #0
 8010c02:	42a6      	cmp	r6, r4
 8010c04:	d105      	bne.n	8010c12 <__libc_init_array+0x2e>
 8010c06:	bd70      	pop	{r4, r5, r6, pc}
 8010c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c0c:	4798      	blx	r3
 8010c0e:	3601      	adds	r6, #1
 8010c10:	e7ee      	b.n	8010bf0 <__libc_init_array+0xc>
 8010c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c16:	4798      	blx	r3
 8010c18:	3601      	adds	r6, #1
 8010c1a:	e7f2      	b.n	8010c02 <__libc_init_array+0x1e>
 8010c1c:	08011800 	.word	0x08011800
 8010c20:	08011800 	.word	0x08011800
 8010c24:	08011800 	.word	0x08011800
 8010c28:	08011804 	.word	0x08011804

08010c2c <__retarget_lock_acquire_recursive>:
 8010c2c:	4770      	bx	lr

08010c2e <__retarget_lock_release_recursive>:
 8010c2e:	4770      	bx	lr

08010c30 <_free_r>:
 8010c30:	b538      	push	{r3, r4, r5, lr}
 8010c32:	4605      	mov	r5, r0
 8010c34:	2900      	cmp	r1, #0
 8010c36:	d041      	beq.n	8010cbc <_free_r+0x8c>
 8010c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c3c:	1f0c      	subs	r4, r1, #4
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	bfb8      	it	lt
 8010c42:	18e4      	addlt	r4, r4, r3
 8010c44:	f000 f8e0 	bl	8010e08 <__malloc_lock>
 8010c48:	4a1d      	ldr	r2, [pc, #116]	@ (8010cc0 <_free_r+0x90>)
 8010c4a:	6813      	ldr	r3, [r2, #0]
 8010c4c:	b933      	cbnz	r3, 8010c5c <_free_r+0x2c>
 8010c4e:	6063      	str	r3, [r4, #4]
 8010c50:	6014      	str	r4, [r2, #0]
 8010c52:	4628      	mov	r0, r5
 8010c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c58:	f000 b8dc 	b.w	8010e14 <__malloc_unlock>
 8010c5c:	42a3      	cmp	r3, r4
 8010c5e:	d908      	bls.n	8010c72 <_free_r+0x42>
 8010c60:	6820      	ldr	r0, [r4, #0]
 8010c62:	1821      	adds	r1, r4, r0
 8010c64:	428b      	cmp	r3, r1
 8010c66:	bf01      	itttt	eq
 8010c68:	6819      	ldreq	r1, [r3, #0]
 8010c6a:	685b      	ldreq	r3, [r3, #4]
 8010c6c:	1809      	addeq	r1, r1, r0
 8010c6e:	6021      	streq	r1, [r4, #0]
 8010c70:	e7ed      	b.n	8010c4e <_free_r+0x1e>
 8010c72:	461a      	mov	r2, r3
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	b10b      	cbz	r3, 8010c7c <_free_r+0x4c>
 8010c78:	42a3      	cmp	r3, r4
 8010c7a:	d9fa      	bls.n	8010c72 <_free_r+0x42>
 8010c7c:	6811      	ldr	r1, [r2, #0]
 8010c7e:	1850      	adds	r0, r2, r1
 8010c80:	42a0      	cmp	r0, r4
 8010c82:	d10b      	bne.n	8010c9c <_free_r+0x6c>
 8010c84:	6820      	ldr	r0, [r4, #0]
 8010c86:	4401      	add	r1, r0
 8010c88:	1850      	adds	r0, r2, r1
 8010c8a:	4283      	cmp	r3, r0
 8010c8c:	6011      	str	r1, [r2, #0]
 8010c8e:	d1e0      	bne.n	8010c52 <_free_r+0x22>
 8010c90:	6818      	ldr	r0, [r3, #0]
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	6053      	str	r3, [r2, #4]
 8010c96:	4408      	add	r0, r1
 8010c98:	6010      	str	r0, [r2, #0]
 8010c9a:	e7da      	b.n	8010c52 <_free_r+0x22>
 8010c9c:	d902      	bls.n	8010ca4 <_free_r+0x74>
 8010c9e:	230c      	movs	r3, #12
 8010ca0:	602b      	str	r3, [r5, #0]
 8010ca2:	e7d6      	b.n	8010c52 <_free_r+0x22>
 8010ca4:	6820      	ldr	r0, [r4, #0]
 8010ca6:	1821      	adds	r1, r4, r0
 8010ca8:	428b      	cmp	r3, r1
 8010caa:	bf04      	itt	eq
 8010cac:	6819      	ldreq	r1, [r3, #0]
 8010cae:	685b      	ldreq	r3, [r3, #4]
 8010cb0:	6063      	str	r3, [r4, #4]
 8010cb2:	bf04      	itt	eq
 8010cb4:	1809      	addeq	r1, r1, r0
 8010cb6:	6021      	streq	r1, [r4, #0]
 8010cb8:	6054      	str	r4, [r2, #4]
 8010cba:	e7ca      	b.n	8010c52 <_free_r+0x22>
 8010cbc:	bd38      	pop	{r3, r4, r5, pc}
 8010cbe:	bf00      	nop
 8010cc0:	2400224c 	.word	0x2400224c

08010cc4 <sbrk_aligned>:
 8010cc4:	b570      	push	{r4, r5, r6, lr}
 8010cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8010d04 <sbrk_aligned+0x40>)
 8010cc8:	460c      	mov	r4, r1
 8010cca:	6831      	ldr	r1, [r6, #0]
 8010ccc:	4605      	mov	r5, r0
 8010cce:	b911      	cbnz	r1, 8010cd6 <sbrk_aligned+0x12>
 8010cd0:	f000 fba4 	bl	801141c <_sbrk_r>
 8010cd4:	6030      	str	r0, [r6, #0]
 8010cd6:	4621      	mov	r1, r4
 8010cd8:	4628      	mov	r0, r5
 8010cda:	f000 fb9f 	bl	801141c <_sbrk_r>
 8010cde:	1c43      	adds	r3, r0, #1
 8010ce0:	d103      	bne.n	8010cea <sbrk_aligned+0x26>
 8010ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	bd70      	pop	{r4, r5, r6, pc}
 8010cea:	1cc4      	adds	r4, r0, #3
 8010cec:	f024 0403 	bic.w	r4, r4, #3
 8010cf0:	42a0      	cmp	r0, r4
 8010cf2:	d0f8      	beq.n	8010ce6 <sbrk_aligned+0x22>
 8010cf4:	1a21      	subs	r1, r4, r0
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	f000 fb90 	bl	801141c <_sbrk_r>
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	d1f2      	bne.n	8010ce6 <sbrk_aligned+0x22>
 8010d00:	e7ef      	b.n	8010ce2 <sbrk_aligned+0x1e>
 8010d02:	bf00      	nop
 8010d04:	24002248 	.word	0x24002248

08010d08 <_malloc_r>:
 8010d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d0c:	1ccd      	adds	r5, r1, #3
 8010d0e:	f025 0503 	bic.w	r5, r5, #3
 8010d12:	3508      	adds	r5, #8
 8010d14:	2d0c      	cmp	r5, #12
 8010d16:	bf38      	it	cc
 8010d18:	250c      	movcc	r5, #12
 8010d1a:	2d00      	cmp	r5, #0
 8010d1c:	4606      	mov	r6, r0
 8010d1e:	db01      	blt.n	8010d24 <_malloc_r+0x1c>
 8010d20:	42a9      	cmp	r1, r5
 8010d22:	d904      	bls.n	8010d2e <_malloc_r+0x26>
 8010d24:	230c      	movs	r3, #12
 8010d26:	6033      	str	r3, [r6, #0]
 8010d28:	2000      	movs	r0, #0
 8010d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010e04 <_malloc_r+0xfc>
 8010d32:	f000 f869 	bl	8010e08 <__malloc_lock>
 8010d36:	f8d8 3000 	ldr.w	r3, [r8]
 8010d3a:	461c      	mov	r4, r3
 8010d3c:	bb44      	cbnz	r4, 8010d90 <_malloc_r+0x88>
 8010d3e:	4629      	mov	r1, r5
 8010d40:	4630      	mov	r0, r6
 8010d42:	f7ff ffbf 	bl	8010cc4 <sbrk_aligned>
 8010d46:	1c43      	adds	r3, r0, #1
 8010d48:	4604      	mov	r4, r0
 8010d4a:	d158      	bne.n	8010dfe <_malloc_r+0xf6>
 8010d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8010d50:	4627      	mov	r7, r4
 8010d52:	2f00      	cmp	r7, #0
 8010d54:	d143      	bne.n	8010dde <_malloc_r+0xd6>
 8010d56:	2c00      	cmp	r4, #0
 8010d58:	d04b      	beq.n	8010df2 <_malloc_r+0xea>
 8010d5a:	6823      	ldr	r3, [r4, #0]
 8010d5c:	4639      	mov	r1, r7
 8010d5e:	4630      	mov	r0, r6
 8010d60:	eb04 0903 	add.w	r9, r4, r3
 8010d64:	f000 fb5a 	bl	801141c <_sbrk_r>
 8010d68:	4581      	cmp	r9, r0
 8010d6a:	d142      	bne.n	8010df2 <_malloc_r+0xea>
 8010d6c:	6821      	ldr	r1, [r4, #0]
 8010d6e:	1a6d      	subs	r5, r5, r1
 8010d70:	4629      	mov	r1, r5
 8010d72:	4630      	mov	r0, r6
 8010d74:	f7ff ffa6 	bl	8010cc4 <sbrk_aligned>
 8010d78:	3001      	adds	r0, #1
 8010d7a:	d03a      	beq.n	8010df2 <_malloc_r+0xea>
 8010d7c:	6823      	ldr	r3, [r4, #0]
 8010d7e:	442b      	add	r3, r5
 8010d80:	6023      	str	r3, [r4, #0]
 8010d82:	f8d8 3000 	ldr.w	r3, [r8]
 8010d86:	685a      	ldr	r2, [r3, #4]
 8010d88:	bb62      	cbnz	r2, 8010de4 <_malloc_r+0xdc>
 8010d8a:	f8c8 7000 	str.w	r7, [r8]
 8010d8e:	e00f      	b.n	8010db0 <_malloc_r+0xa8>
 8010d90:	6822      	ldr	r2, [r4, #0]
 8010d92:	1b52      	subs	r2, r2, r5
 8010d94:	d420      	bmi.n	8010dd8 <_malloc_r+0xd0>
 8010d96:	2a0b      	cmp	r2, #11
 8010d98:	d917      	bls.n	8010dca <_malloc_r+0xc2>
 8010d9a:	1961      	adds	r1, r4, r5
 8010d9c:	42a3      	cmp	r3, r4
 8010d9e:	6025      	str	r5, [r4, #0]
 8010da0:	bf18      	it	ne
 8010da2:	6059      	strne	r1, [r3, #4]
 8010da4:	6863      	ldr	r3, [r4, #4]
 8010da6:	bf08      	it	eq
 8010da8:	f8c8 1000 	streq.w	r1, [r8]
 8010dac:	5162      	str	r2, [r4, r5]
 8010dae:	604b      	str	r3, [r1, #4]
 8010db0:	4630      	mov	r0, r6
 8010db2:	f000 f82f 	bl	8010e14 <__malloc_unlock>
 8010db6:	f104 000b 	add.w	r0, r4, #11
 8010dba:	1d23      	adds	r3, r4, #4
 8010dbc:	f020 0007 	bic.w	r0, r0, #7
 8010dc0:	1ac2      	subs	r2, r0, r3
 8010dc2:	bf1c      	itt	ne
 8010dc4:	1a1b      	subne	r3, r3, r0
 8010dc6:	50a3      	strne	r3, [r4, r2]
 8010dc8:	e7af      	b.n	8010d2a <_malloc_r+0x22>
 8010dca:	6862      	ldr	r2, [r4, #4]
 8010dcc:	42a3      	cmp	r3, r4
 8010dce:	bf0c      	ite	eq
 8010dd0:	f8c8 2000 	streq.w	r2, [r8]
 8010dd4:	605a      	strne	r2, [r3, #4]
 8010dd6:	e7eb      	b.n	8010db0 <_malloc_r+0xa8>
 8010dd8:	4623      	mov	r3, r4
 8010dda:	6864      	ldr	r4, [r4, #4]
 8010ddc:	e7ae      	b.n	8010d3c <_malloc_r+0x34>
 8010dde:	463c      	mov	r4, r7
 8010de0:	687f      	ldr	r7, [r7, #4]
 8010de2:	e7b6      	b.n	8010d52 <_malloc_r+0x4a>
 8010de4:	461a      	mov	r2, r3
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	42a3      	cmp	r3, r4
 8010dea:	d1fb      	bne.n	8010de4 <_malloc_r+0xdc>
 8010dec:	2300      	movs	r3, #0
 8010dee:	6053      	str	r3, [r2, #4]
 8010df0:	e7de      	b.n	8010db0 <_malloc_r+0xa8>
 8010df2:	230c      	movs	r3, #12
 8010df4:	6033      	str	r3, [r6, #0]
 8010df6:	4630      	mov	r0, r6
 8010df8:	f000 f80c 	bl	8010e14 <__malloc_unlock>
 8010dfc:	e794      	b.n	8010d28 <_malloc_r+0x20>
 8010dfe:	6005      	str	r5, [r0, #0]
 8010e00:	e7d6      	b.n	8010db0 <_malloc_r+0xa8>
 8010e02:	bf00      	nop
 8010e04:	2400224c 	.word	0x2400224c

08010e08 <__malloc_lock>:
 8010e08:	4801      	ldr	r0, [pc, #4]	@ (8010e10 <__malloc_lock+0x8>)
 8010e0a:	f7ff bf0f 	b.w	8010c2c <__retarget_lock_acquire_recursive>
 8010e0e:	bf00      	nop
 8010e10:	24002244 	.word	0x24002244

08010e14 <__malloc_unlock>:
 8010e14:	4801      	ldr	r0, [pc, #4]	@ (8010e1c <__malloc_unlock+0x8>)
 8010e16:	f7ff bf0a 	b.w	8010c2e <__retarget_lock_release_recursive>
 8010e1a:	bf00      	nop
 8010e1c:	24002244 	.word	0x24002244

08010e20 <__ssputs_r>:
 8010e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e24:	688e      	ldr	r6, [r1, #8]
 8010e26:	461f      	mov	r7, r3
 8010e28:	42be      	cmp	r6, r7
 8010e2a:	680b      	ldr	r3, [r1, #0]
 8010e2c:	4682      	mov	sl, r0
 8010e2e:	460c      	mov	r4, r1
 8010e30:	4690      	mov	r8, r2
 8010e32:	d82d      	bhi.n	8010e90 <__ssputs_r+0x70>
 8010e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010e3c:	d026      	beq.n	8010e8c <__ssputs_r+0x6c>
 8010e3e:	6965      	ldr	r5, [r4, #20]
 8010e40:	6909      	ldr	r1, [r1, #16]
 8010e42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e46:	eba3 0901 	sub.w	r9, r3, r1
 8010e4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e4e:	1c7b      	adds	r3, r7, #1
 8010e50:	444b      	add	r3, r9
 8010e52:	106d      	asrs	r5, r5, #1
 8010e54:	429d      	cmp	r5, r3
 8010e56:	bf38      	it	cc
 8010e58:	461d      	movcc	r5, r3
 8010e5a:	0553      	lsls	r3, r2, #21
 8010e5c:	d527      	bpl.n	8010eae <__ssputs_r+0x8e>
 8010e5e:	4629      	mov	r1, r5
 8010e60:	f7ff ff52 	bl	8010d08 <_malloc_r>
 8010e64:	4606      	mov	r6, r0
 8010e66:	b360      	cbz	r0, 8010ec2 <__ssputs_r+0xa2>
 8010e68:	6921      	ldr	r1, [r4, #16]
 8010e6a:	464a      	mov	r2, r9
 8010e6c:	f000 fae6 	bl	801143c <memcpy>
 8010e70:	89a3      	ldrh	r3, [r4, #12]
 8010e72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e7a:	81a3      	strh	r3, [r4, #12]
 8010e7c:	6126      	str	r6, [r4, #16]
 8010e7e:	6165      	str	r5, [r4, #20]
 8010e80:	444e      	add	r6, r9
 8010e82:	eba5 0509 	sub.w	r5, r5, r9
 8010e86:	6026      	str	r6, [r4, #0]
 8010e88:	60a5      	str	r5, [r4, #8]
 8010e8a:	463e      	mov	r6, r7
 8010e8c:	42be      	cmp	r6, r7
 8010e8e:	d900      	bls.n	8010e92 <__ssputs_r+0x72>
 8010e90:	463e      	mov	r6, r7
 8010e92:	6820      	ldr	r0, [r4, #0]
 8010e94:	4632      	mov	r2, r6
 8010e96:	4641      	mov	r1, r8
 8010e98:	f000 faa6 	bl	80113e8 <memmove>
 8010e9c:	68a3      	ldr	r3, [r4, #8]
 8010e9e:	1b9b      	subs	r3, r3, r6
 8010ea0:	60a3      	str	r3, [r4, #8]
 8010ea2:	6823      	ldr	r3, [r4, #0]
 8010ea4:	4433      	add	r3, r6
 8010ea6:	6023      	str	r3, [r4, #0]
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eae:	462a      	mov	r2, r5
 8010eb0:	f000 fad2 	bl	8011458 <_realloc_r>
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	d1e0      	bne.n	8010e7c <__ssputs_r+0x5c>
 8010eba:	6921      	ldr	r1, [r4, #16]
 8010ebc:	4650      	mov	r0, sl
 8010ebe:	f7ff feb7 	bl	8010c30 <_free_r>
 8010ec2:	230c      	movs	r3, #12
 8010ec4:	f8ca 3000 	str.w	r3, [sl]
 8010ec8:	89a3      	ldrh	r3, [r4, #12]
 8010eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ece:	81a3      	strh	r3, [r4, #12]
 8010ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed4:	e7e9      	b.n	8010eaa <__ssputs_r+0x8a>
	...

08010ed8 <_svfiprintf_r>:
 8010ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010edc:	4698      	mov	r8, r3
 8010ede:	898b      	ldrh	r3, [r1, #12]
 8010ee0:	061b      	lsls	r3, r3, #24
 8010ee2:	b09d      	sub	sp, #116	@ 0x74
 8010ee4:	4607      	mov	r7, r0
 8010ee6:	460d      	mov	r5, r1
 8010ee8:	4614      	mov	r4, r2
 8010eea:	d510      	bpl.n	8010f0e <_svfiprintf_r+0x36>
 8010eec:	690b      	ldr	r3, [r1, #16]
 8010eee:	b973      	cbnz	r3, 8010f0e <_svfiprintf_r+0x36>
 8010ef0:	2140      	movs	r1, #64	@ 0x40
 8010ef2:	f7ff ff09 	bl	8010d08 <_malloc_r>
 8010ef6:	6028      	str	r0, [r5, #0]
 8010ef8:	6128      	str	r0, [r5, #16]
 8010efa:	b930      	cbnz	r0, 8010f0a <_svfiprintf_r+0x32>
 8010efc:	230c      	movs	r3, #12
 8010efe:	603b      	str	r3, [r7, #0]
 8010f00:	f04f 30ff 	mov.w	r0, #4294967295
 8010f04:	b01d      	add	sp, #116	@ 0x74
 8010f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f0a:	2340      	movs	r3, #64	@ 0x40
 8010f0c:	616b      	str	r3, [r5, #20]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f12:	2320      	movs	r3, #32
 8010f14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f1c:	2330      	movs	r3, #48	@ 0x30
 8010f1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80110bc <_svfiprintf_r+0x1e4>
 8010f22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f26:	f04f 0901 	mov.w	r9, #1
 8010f2a:	4623      	mov	r3, r4
 8010f2c:	469a      	mov	sl, r3
 8010f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f32:	b10a      	cbz	r2, 8010f38 <_svfiprintf_r+0x60>
 8010f34:	2a25      	cmp	r2, #37	@ 0x25
 8010f36:	d1f9      	bne.n	8010f2c <_svfiprintf_r+0x54>
 8010f38:	ebba 0b04 	subs.w	fp, sl, r4
 8010f3c:	d00b      	beq.n	8010f56 <_svfiprintf_r+0x7e>
 8010f3e:	465b      	mov	r3, fp
 8010f40:	4622      	mov	r2, r4
 8010f42:	4629      	mov	r1, r5
 8010f44:	4638      	mov	r0, r7
 8010f46:	f7ff ff6b 	bl	8010e20 <__ssputs_r>
 8010f4a:	3001      	adds	r0, #1
 8010f4c:	f000 80a7 	beq.w	801109e <_svfiprintf_r+0x1c6>
 8010f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f52:	445a      	add	r2, fp
 8010f54:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f56:	f89a 3000 	ldrb.w	r3, [sl]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	f000 809f 	beq.w	801109e <_svfiprintf_r+0x1c6>
 8010f60:	2300      	movs	r3, #0
 8010f62:	f04f 32ff 	mov.w	r2, #4294967295
 8010f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f6a:	f10a 0a01 	add.w	sl, sl, #1
 8010f6e:	9304      	str	r3, [sp, #16]
 8010f70:	9307      	str	r3, [sp, #28]
 8010f72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f76:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f78:	4654      	mov	r4, sl
 8010f7a:	2205      	movs	r2, #5
 8010f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f80:	484e      	ldr	r0, [pc, #312]	@ (80110bc <_svfiprintf_r+0x1e4>)
 8010f82:	f7ef f9b5 	bl	80002f0 <memchr>
 8010f86:	9a04      	ldr	r2, [sp, #16]
 8010f88:	b9d8      	cbnz	r0, 8010fc2 <_svfiprintf_r+0xea>
 8010f8a:	06d0      	lsls	r0, r2, #27
 8010f8c:	bf44      	itt	mi
 8010f8e:	2320      	movmi	r3, #32
 8010f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f94:	0711      	lsls	r1, r2, #28
 8010f96:	bf44      	itt	mi
 8010f98:	232b      	movmi	r3, #43	@ 0x2b
 8010f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8010fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fa4:	d015      	beq.n	8010fd2 <_svfiprintf_r+0xfa>
 8010fa6:	9a07      	ldr	r2, [sp, #28]
 8010fa8:	4654      	mov	r4, sl
 8010faa:	2000      	movs	r0, #0
 8010fac:	f04f 0c0a 	mov.w	ip, #10
 8010fb0:	4621      	mov	r1, r4
 8010fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fb6:	3b30      	subs	r3, #48	@ 0x30
 8010fb8:	2b09      	cmp	r3, #9
 8010fba:	d94b      	bls.n	8011054 <_svfiprintf_r+0x17c>
 8010fbc:	b1b0      	cbz	r0, 8010fec <_svfiprintf_r+0x114>
 8010fbe:	9207      	str	r2, [sp, #28]
 8010fc0:	e014      	b.n	8010fec <_svfiprintf_r+0x114>
 8010fc2:	eba0 0308 	sub.w	r3, r0, r8
 8010fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	9304      	str	r3, [sp, #16]
 8010fce:	46a2      	mov	sl, r4
 8010fd0:	e7d2      	b.n	8010f78 <_svfiprintf_r+0xa0>
 8010fd2:	9b03      	ldr	r3, [sp, #12]
 8010fd4:	1d19      	adds	r1, r3, #4
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	9103      	str	r1, [sp, #12]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	bfbb      	ittet	lt
 8010fde:	425b      	neglt	r3, r3
 8010fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8010fe4:	9307      	strge	r3, [sp, #28]
 8010fe6:	9307      	strlt	r3, [sp, #28]
 8010fe8:	bfb8      	it	lt
 8010fea:	9204      	strlt	r2, [sp, #16]
 8010fec:	7823      	ldrb	r3, [r4, #0]
 8010fee:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ff0:	d10a      	bne.n	8011008 <_svfiprintf_r+0x130>
 8010ff2:	7863      	ldrb	r3, [r4, #1]
 8010ff4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ff6:	d132      	bne.n	801105e <_svfiprintf_r+0x186>
 8010ff8:	9b03      	ldr	r3, [sp, #12]
 8010ffa:	1d1a      	adds	r2, r3, #4
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	9203      	str	r2, [sp, #12]
 8011000:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011004:	3402      	adds	r4, #2
 8011006:	9305      	str	r3, [sp, #20]
 8011008:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80110cc <_svfiprintf_r+0x1f4>
 801100c:	7821      	ldrb	r1, [r4, #0]
 801100e:	2203      	movs	r2, #3
 8011010:	4650      	mov	r0, sl
 8011012:	f7ef f96d 	bl	80002f0 <memchr>
 8011016:	b138      	cbz	r0, 8011028 <_svfiprintf_r+0x150>
 8011018:	9b04      	ldr	r3, [sp, #16]
 801101a:	eba0 000a 	sub.w	r0, r0, sl
 801101e:	2240      	movs	r2, #64	@ 0x40
 8011020:	4082      	lsls	r2, r0
 8011022:	4313      	orrs	r3, r2
 8011024:	3401      	adds	r4, #1
 8011026:	9304      	str	r3, [sp, #16]
 8011028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801102c:	4824      	ldr	r0, [pc, #144]	@ (80110c0 <_svfiprintf_r+0x1e8>)
 801102e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011032:	2206      	movs	r2, #6
 8011034:	f7ef f95c 	bl	80002f0 <memchr>
 8011038:	2800      	cmp	r0, #0
 801103a:	d036      	beq.n	80110aa <_svfiprintf_r+0x1d2>
 801103c:	4b21      	ldr	r3, [pc, #132]	@ (80110c4 <_svfiprintf_r+0x1ec>)
 801103e:	bb1b      	cbnz	r3, 8011088 <_svfiprintf_r+0x1b0>
 8011040:	9b03      	ldr	r3, [sp, #12]
 8011042:	3307      	adds	r3, #7
 8011044:	f023 0307 	bic.w	r3, r3, #7
 8011048:	3308      	adds	r3, #8
 801104a:	9303      	str	r3, [sp, #12]
 801104c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801104e:	4433      	add	r3, r6
 8011050:	9309      	str	r3, [sp, #36]	@ 0x24
 8011052:	e76a      	b.n	8010f2a <_svfiprintf_r+0x52>
 8011054:	fb0c 3202 	mla	r2, ip, r2, r3
 8011058:	460c      	mov	r4, r1
 801105a:	2001      	movs	r0, #1
 801105c:	e7a8      	b.n	8010fb0 <_svfiprintf_r+0xd8>
 801105e:	2300      	movs	r3, #0
 8011060:	3401      	adds	r4, #1
 8011062:	9305      	str	r3, [sp, #20]
 8011064:	4619      	mov	r1, r3
 8011066:	f04f 0c0a 	mov.w	ip, #10
 801106a:	4620      	mov	r0, r4
 801106c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011070:	3a30      	subs	r2, #48	@ 0x30
 8011072:	2a09      	cmp	r2, #9
 8011074:	d903      	bls.n	801107e <_svfiprintf_r+0x1a6>
 8011076:	2b00      	cmp	r3, #0
 8011078:	d0c6      	beq.n	8011008 <_svfiprintf_r+0x130>
 801107a:	9105      	str	r1, [sp, #20]
 801107c:	e7c4      	b.n	8011008 <_svfiprintf_r+0x130>
 801107e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011082:	4604      	mov	r4, r0
 8011084:	2301      	movs	r3, #1
 8011086:	e7f0      	b.n	801106a <_svfiprintf_r+0x192>
 8011088:	ab03      	add	r3, sp, #12
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	462a      	mov	r2, r5
 801108e:	4b0e      	ldr	r3, [pc, #56]	@ (80110c8 <_svfiprintf_r+0x1f0>)
 8011090:	a904      	add	r1, sp, #16
 8011092:	4638      	mov	r0, r7
 8011094:	f3af 8000 	nop.w
 8011098:	1c42      	adds	r2, r0, #1
 801109a:	4606      	mov	r6, r0
 801109c:	d1d6      	bne.n	801104c <_svfiprintf_r+0x174>
 801109e:	89ab      	ldrh	r3, [r5, #12]
 80110a0:	065b      	lsls	r3, r3, #25
 80110a2:	f53f af2d 	bmi.w	8010f00 <_svfiprintf_r+0x28>
 80110a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80110a8:	e72c      	b.n	8010f04 <_svfiprintf_r+0x2c>
 80110aa:	ab03      	add	r3, sp, #12
 80110ac:	9300      	str	r3, [sp, #0]
 80110ae:	462a      	mov	r2, r5
 80110b0:	4b05      	ldr	r3, [pc, #20]	@ (80110c8 <_svfiprintf_r+0x1f0>)
 80110b2:	a904      	add	r1, sp, #16
 80110b4:	4638      	mov	r0, r7
 80110b6:	f000 f879 	bl	80111ac <_printf_i>
 80110ba:	e7ed      	b.n	8011098 <_svfiprintf_r+0x1c0>
 80110bc:	080117c4 	.word	0x080117c4
 80110c0:	080117ce 	.word	0x080117ce
 80110c4:	00000000 	.word	0x00000000
 80110c8:	08010e21 	.word	0x08010e21
 80110cc:	080117ca 	.word	0x080117ca

080110d0 <_printf_common>:
 80110d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110d4:	4616      	mov	r6, r2
 80110d6:	4698      	mov	r8, r3
 80110d8:	688a      	ldr	r2, [r1, #8]
 80110da:	690b      	ldr	r3, [r1, #16]
 80110dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80110e0:	4293      	cmp	r3, r2
 80110e2:	bfb8      	it	lt
 80110e4:	4613      	movlt	r3, r2
 80110e6:	6033      	str	r3, [r6, #0]
 80110e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80110ec:	4607      	mov	r7, r0
 80110ee:	460c      	mov	r4, r1
 80110f0:	b10a      	cbz	r2, 80110f6 <_printf_common+0x26>
 80110f2:	3301      	adds	r3, #1
 80110f4:	6033      	str	r3, [r6, #0]
 80110f6:	6823      	ldr	r3, [r4, #0]
 80110f8:	0699      	lsls	r1, r3, #26
 80110fa:	bf42      	ittt	mi
 80110fc:	6833      	ldrmi	r3, [r6, #0]
 80110fe:	3302      	addmi	r3, #2
 8011100:	6033      	strmi	r3, [r6, #0]
 8011102:	6825      	ldr	r5, [r4, #0]
 8011104:	f015 0506 	ands.w	r5, r5, #6
 8011108:	d106      	bne.n	8011118 <_printf_common+0x48>
 801110a:	f104 0a19 	add.w	sl, r4, #25
 801110e:	68e3      	ldr	r3, [r4, #12]
 8011110:	6832      	ldr	r2, [r6, #0]
 8011112:	1a9b      	subs	r3, r3, r2
 8011114:	42ab      	cmp	r3, r5
 8011116:	dc26      	bgt.n	8011166 <_printf_common+0x96>
 8011118:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801111c:	6822      	ldr	r2, [r4, #0]
 801111e:	3b00      	subs	r3, #0
 8011120:	bf18      	it	ne
 8011122:	2301      	movne	r3, #1
 8011124:	0692      	lsls	r2, r2, #26
 8011126:	d42b      	bmi.n	8011180 <_printf_common+0xb0>
 8011128:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801112c:	4641      	mov	r1, r8
 801112e:	4638      	mov	r0, r7
 8011130:	47c8      	blx	r9
 8011132:	3001      	adds	r0, #1
 8011134:	d01e      	beq.n	8011174 <_printf_common+0xa4>
 8011136:	6823      	ldr	r3, [r4, #0]
 8011138:	6922      	ldr	r2, [r4, #16]
 801113a:	f003 0306 	and.w	r3, r3, #6
 801113e:	2b04      	cmp	r3, #4
 8011140:	bf02      	ittt	eq
 8011142:	68e5      	ldreq	r5, [r4, #12]
 8011144:	6833      	ldreq	r3, [r6, #0]
 8011146:	1aed      	subeq	r5, r5, r3
 8011148:	68a3      	ldr	r3, [r4, #8]
 801114a:	bf0c      	ite	eq
 801114c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011150:	2500      	movne	r5, #0
 8011152:	4293      	cmp	r3, r2
 8011154:	bfc4      	itt	gt
 8011156:	1a9b      	subgt	r3, r3, r2
 8011158:	18ed      	addgt	r5, r5, r3
 801115a:	2600      	movs	r6, #0
 801115c:	341a      	adds	r4, #26
 801115e:	42b5      	cmp	r5, r6
 8011160:	d11a      	bne.n	8011198 <_printf_common+0xc8>
 8011162:	2000      	movs	r0, #0
 8011164:	e008      	b.n	8011178 <_printf_common+0xa8>
 8011166:	2301      	movs	r3, #1
 8011168:	4652      	mov	r2, sl
 801116a:	4641      	mov	r1, r8
 801116c:	4638      	mov	r0, r7
 801116e:	47c8      	blx	r9
 8011170:	3001      	adds	r0, #1
 8011172:	d103      	bne.n	801117c <_printf_common+0xac>
 8011174:	f04f 30ff 	mov.w	r0, #4294967295
 8011178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801117c:	3501      	adds	r5, #1
 801117e:	e7c6      	b.n	801110e <_printf_common+0x3e>
 8011180:	18e1      	adds	r1, r4, r3
 8011182:	1c5a      	adds	r2, r3, #1
 8011184:	2030      	movs	r0, #48	@ 0x30
 8011186:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801118a:	4422      	add	r2, r4
 801118c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011190:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011194:	3302      	adds	r3, #2
 8011196:	e7c7      	b.n	8011128 <_printf_common+0x58>
 8011198:	2301      	movs	r3, #1
 801119a:	4622      	mov	r2, r4
 801119c:	4641      	mov	r1, r8
 801119e:	4638      	mov	r0, r7
 80111a0:	47c8      	blx	r9
 80111a2:	3001      	adds	r0, #1
 80111a4:	d0e6      	beq.n	8011174 <_printf_common+0xa4>
 80111a6:	3601      	adds	r6, #1
 80111a8:	e7d9      	b.n	801115e <_printf_common+0x8e>
	...

080111ac <_printf_i>:
 80111ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80111b0:	7e0f      	ldrb	r7, [r1, #24]
 80111b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80111b4:	2f78      	cmp	r7, #120	@ 0x78
 80111b6:	4691      	mov	r9, r2
 80111b8:	4680      	mov	r8, r0
 80111ba:	460c      	mov	r4, r1
 80111bc:	469a      	mov	sl, r3
 80111be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80111c2:	d807      	bhi.n	80111d4 <_printf_i+0x28>
 80111c4:	2f62      	cmp	r7, #98	@ 0x62
 80111c6:	d80a      	bhi.n	80111de <_printf_i+0x32>
 80111c8:	2f00      	cmp	r7, #0
 80111ca:	f000 80d1 	beq.w	8011370 <_printf_i+0x1c4>
 80111ce:	2f58      	cmp	r7, #88	@ 0x58
 80111d0:	f000 80b8 	beq.w	8011344 <_printf_i+0x198>
 80111d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80111d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80111dc:	e03a      	b.n	8011254 <_printf_i+0xa8>
 80111de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80111e2:	2b15      	cmp	r3, #21
 80111e4:	d8f6      	bhi.n	80111d4 <_printf_i+0x28>
 80111e6:	a101      	add	r1, pc, #4	@ (adr r1, 80111ec <_printf_i+0x40>)
 80111e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111ec:	08011245 	.word	0x08011245
 80111f0:	08011259 	.word	0x08011259
 80111f4:	080111d5 	.word	0x080111d5
 80111f8:	080111d5 	.word	0x080111d5
 80111fc:	080111d5 	.word	0x080111d5
 8011200:	080111d5 	.word	0x080111d5
 8011204:	08011259 	.word	0x08011259
 8011208:	080111d5 	.word	0x080111d5
 801120c:	080111d5 	.word	0x080111d5
 8011210:	080111d5 	.word	0x080111d5
 8011214:	080111d5 	.word	0x080111d5
 8011218:	08011357 	.word	0x08011357
 801121c:	08011283 	.word	0x08011283
 8011220:	08011311 	.word	0x08011311
 8011224:	080111d5 	.word	0x080111d5
 8011228:	080111d5 	.word	0x080111d5
 801122c:	08011379 	.word	0x08011379
 8011230:	080111d5 	.word	0x080111d5
 8011234:	08011283 	.word	0x08011283
 8011238:	080111d5 	.word	0x080111d5
 801123c:	080111d5 	.word	0x080111d5
 8011240:	08011319 	.word	0x08011319
 8011244:	6833      	ldr	r3, [r6, #0]
 8011246:	1d1a      	adds	r2, r3, #4
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	6032      	str	r2, [r6, #0]
 801124c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011250:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011254:	2301      	movs	r3, #1
 8011256:	e09c      	b.n	8011392 <_printf_i+0x1e6>
 8011258:	6833      	ldr	r3, [r6, #0]
 801125a:	6820      	ldr	r0, [r4, #0]
 801125c:	1d19      	adds	r1, r3, #4
 801125e:	6031      	str	r1, [r6, #0]
 8011260:	0606      	lsls	r6, r0, #24
 8011262:	d501      	bpl.n	8011268 <_printf_i+0xbc>
 8011264:	681d      	ldr	r5, [r3, #0]
 8011266:	e003      	b.n	8011270 <_printf_i+0xc4>
 8011268:	0645      	lsls	r5, r0, #25
 801126a:	d5fb      	bpl.n	8011264 <_printf_i+0xb8>
 801126c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011270:	2d00      	cmp	r5, #0
 8011272:	da03      	bge.n	801127c <_printf_i+0xd0>
 8011274:	232d      	movs	r3, #45	@ 0x2d
 8011276:	426d      	negs	r5, r5
 8011278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801127c:	4858      	ldr	r0, [pc, #352]	@ (80113e0 <_printf_i+0x234>)
 801127e:	230a      	movs	r3, #10
 8011280:	e011      	b.n	80112a6 <_printf_i+0xfa>
 8011282:	6821      	ldr	r1, [r4, #0]
 8011284:	6833      	ldr	r3, [r6, #0]
 8011286:	0608      	lsls	r0, r1, #24
 8011288:	f853 5b04 	ldr.w	r5, [r3], #4
 801128c:	d402      	bmi.n	8011294 <_printf_i+0xe8>
 801128e:	0649      	lsls	r1, r1, #25
 8011290:	bf48      	it	mi
 8011292:	b2ad      	uxthmi	r5, r5
 8011294:	2f6f      	cmp	r7, #111	@ 0x6f
 8011296:	4852      	ldr	r0, [pc, #328]	@ (80113e0 <_printf_i+0x234>)
 8011298:	6033      	str	r3, [r6, #0]
 801129a:	bf14      	ite	ne
 801129c:	230a      	movne	r3, #10
 801129e:	2308      	moveq	r3, #8
 80112a0:	2100      	movs	r1, #0
 80112a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80112a6:	6866      	ldr	r6, [r4, #4]
 80112a8:	60a6      	str	r6, [r4, #8]
 80112aa:	2e00      	cmp	r6, #0
 80112ac:	db05      	blt.n	80112ba <_printf_i+0x10e>
 80112ae:	6821      	ldr	r1, [r4, #0]
 80112b0:	432e      	orrs	r6, r5
 80112b2:	f021 0104 	bic.w	r1, r1, #4
 80112b6:	6021      	str	r1, [r4, #0]
 80112b8:	d04b      	beq.n	8011352 <_printf_i+0x1a6>
 80112ba:	4616      	mov	r6, r2
 80112bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80112c0:	fb03 5711 	mls	r7, r3, r1, r5
 80112c4:	5dc7      	ldrb	r7, [r0, r7]
 80112c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80112ca:	462f      	mov	r7, r5
 80112cc:	42bb      	cmp	r3, r7
 80112ce:	460d      	mov	r5, r1
 80112d0:	d9f4      	bls.n	80112bc <_printf_i+0x110>
 80112d2:	2b08      	cmp	r3, #8
 80112d4:	d10b      	bne.n	80112ee <_printf_i+0x142>
 80112d6:	6823      	ldr	r3, [r4, #0]
 80112d8:	07df      	lsls	r7, r3, #31
 80112da:	d508      	bpl.n	80112ee <_printf_i+0x142>
 80112dc:	6923      	ldr	r3, [r4, #16]
 80112de:	6861      	ldr	r1, [r4, #4]
 80112e0:	4299      	cmp	r1, r3
 80112e2:	bfde      	ittt	le
 80112e4:	2330      	movle	r3, #48	@ 0x30
 80112e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80112ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80112ee:	1b92      	subs	r2, r2, r6
 80112f0:	6122      	str	r2, [r4, #16]
 80112f2:	f8cd a000 	str.w	sl, [sp]
 80112f6:	464b      	mov	r3, r9
 80112f8:	aa03      	add	r2, sp, #12
 80112fa:	4621      	mov	r1, r4
 80112fc:	4640      	mov	r0, r8
 80112fe:	f7ff fee7 	bl	80110d0 <_printf_common>
 8011302:	3001      	adds	r0, #1
 8011304:	d14a      	bne.n	801139c <_printf_i+0x1f0>
 8011306:	f04f 30ff 	mov.w	r0, #4294967295
 801130a:	b004      	add	sp, #16
 801130c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011310:	6823      	ldr	r3, [r4, #0]
 8011312:	f043 0320 	orr.w	r3, r3, #32
 8011316:	6023      	str	r3, [r4, #0]
 8011318:	4832      	ldr	r0, [pc, #200]	@ (80113e4 <_printf_i+0x238>)
 801131a:	2778      	movs	r7, #120	@ 0x78
 801131c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011320:	6823      	ldr	r3, [r4, #0]
 8011322:	6831      	ldr	r1, [r6, #0]
 8011324:	061f      	lsls	r7, r3, #24
 8011326:	f851 5b04 	ldr.w	r5, [r1], #4
 801132a:	d402      	bmi.n	8011332 <_printf_i+0x186>
 801132c:	065f      	lsls	r7, r3, #25
 801132e:	bf48      	it	mi
 8011330:	b2ad      	uxthmi	r5, r5
 8011332:	6031      	str	r1, [r6, #0]
 8011334:	07d9      	lsls	r1, r3, #31
 8011336:	bf44      	itt	mi
 8011338:	f043 0320 	orrmi.w	r3, r3, #32
 801133c:	6023      	strmi	r3, [r4, #0]
 801133e:	b11d      	cbz	r5, 8011348 <_printf_i+0x19c>
 8011340:	2310      	movs	r3, #16
 8011342:	e7ad      	b.n	80112a0 <_printf_i+0xf4>
 8011344:	4826      	ldr	r0, [pc, #152]	@ (80113e0 <_printf_i+0x234>)
 8011346:	e7e9      	b.n	801131c <_printf_i+0x170>
 8011348:	6823      	ldr	r3, [r4, #0]
 801134a:	f023 0320 	bic.w	r3, r3, #32
 801134e:	6023      	str	r3, [r4, #0]
 8011350:	e7f6      	b.n	8011340 <_printf_i+0x194>
 8011352:	4616      	mov	r6, r2
 8011354:	e7bd      	b.n	80112d2 <_printf_i+0x126>
 8011356:	6833      	ldr	r3, [r6, #0]
 8011358:	6825      	ldr	r5, [r4, #0]
 801135a:	6961      	ldr	r1, [r4, #20]
 801135c:	1d18      	adds	r0, r3, #4
 801135e:	6030      	str	r0, [r6, #0]
 8011360:	062e      	lsls	r6, r5, #24
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	d501      	bpl.n	801136a <_printf_i+0x1be>
 8011366:	6019      	str	r1, [r3, #0]
 8011368:	e002      	b.n	8011370 <_printf_i+0x1c4>
 801136a:	0668      	lsls	r0, r5, #25
 801136c:	d5fb      	bpl.n	8011366 <_printf_i+0x1ba>
 801136e:	8019      	strh	r1, [r3, #0]
 8011370:	2300      	movs	r3, #0
 8011372:	6123      	str	r3, [r4, #16]
 8011374:	4616      	mov	r6, r2
 8011376:	e7bc      	b.n	80112f2 <_printf_i+0x146>
 8011378:	6833      	ldr	r3, [r6, #0]
 801137a:	1d1a      	adds	r2, r3, #4
 801137c:	6032      	str	r2, [r6, #0]
 801137e:	681e      	ldr	r6, [r3, #0]
 8011380:	6862      	ldr	r2, [r4, #4]
 8011382:	2100      	movs	r1, #0
 8011384:	4630      	mov	r0, r6
 8011386:	f7ee ffb3 	bl	80002f0 <memchr>
 801138a:	b108      	cbz	r0, 8011390 <_printf_i+0x1e4>
 801138c:	1b80      	subs	r0, r0, r6
 801138e:	6060      	str	r0, [r4, #4]
 8011390:	6863      	ldr	r3, [r4, #4]
 8011392:	6123      	str	r3, [r4, #16]
 8011394:	2300      	movs	r3, #0
 8011396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801139a:	e7aa      	b.n	80112f2 <_printf_i+0x146>
 801139c:	6923      	ldr	r3, [r4, #16]
 801139e:	4632      	mov	r2, r6
 80113a0:	4649      	mov	r1, r9
 80113a2:	4640      	mov	r0, r8
 80113a4:	47d0      	blx	sl
 80113a6:	3001      	adds	r0, #1
 80113a8:	d0ad      	beq.n	8011306 <_printf_i+0x15a>
 80113aa:	6823      	ldr	r3, [r4, #0]
 80113ac:	079b      	lsls	r3, r3, #30
 80113ae:	d413      	bmi.n	80113d8 <_printf_i+0x22c>
 80113b0:	68e0      	ldr	r0, [r4, #12]
 80113b2:	9b03      	ldr	r3, [sp, #12]
 80113b4:	4298      	cmp	r0, r3
 80113b6:	bfb8      	it	lt
 80113b8:	4618      	movlt	r0, r3
 80113ba:	e7a6      	b.n	801130a <_printf_i+0x15e>
 80113bc:	2301      	movs	r3, #1
 80113be:	4632      	mov	r2, r6
 80113c0:	4649      	mov	r1, r9
 80113c2:	4640      	mov	r0, r8
 80113c4:	47d0      	blx	sl
 80113c6:	3001      	adds	r0, #1
 80113c8:	d09d      	beq.n	8011306 <_printf_i+0x15a>
 80113ca:	3501      	adds	r5, #1
 80113cc:	68e3      	ldr	r3, [r4, #12]
 80113ce:	9903      	ldr	r1, [sp, #12]
 80113d0:	1a5b      	subs	r3, r3, r1
 80113d2:	42ab      	cmp	r3, r5
 80113d4:	dcf2      	bgt.n	80113bc <_printf_i+0x210>
 80113d6:	e7eb      	b.n	80113b0 <_printf_i+0x204>
 80113d8:	2500      	movs	r5, #0
 80113da:	f104 0619 	add.w	r6, r4, #25
 80113de:	e7f5      	b.n	80113cc <_printf_i+0x220>
 80113e0:	080117d5 	.word	0x080117d5
 80113e4:	080117e6 	.word	0x080117e6

080113e8 <memmove>:
 80113e8:	4288      	cmp	r0, r1
 80113ea:	b510      	push	{r4, lr}
 80113ec:	eb01 0402 	add.w	r4, r1, r2
 80113f0:	d902      	bls.n	80113f8 <memmove+0x10>
 80113f2:	4284      	cmp	r4, r0
 80113f4:	4623      	mov	r3, r4
 80113f6:	d807      	bhi.n	8011408 <memmove+0x20>
 80113f8:	1e43      	subs	r3, r0, #1
 80113fa:	42a1      	cmp	r1, r4
 80113fc:	d008      	beq.n	8011410 <memmove+0x28>
 80113fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011406:	e7f8      	b.n	80113fa <memmove+0x12>
 8011408:	4402      	add	r2, r0
 801140a:	4601      	mov	r1, r0
 801140c:	428a      	cmp	r2, r1
 801140e:	d100      	bne.n	8011412 <memmove+0x2a>
 8011410:	bd10      	pop	{r4, pc}
 8011412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801141a:	e7f7      	b.n	801140c <memmove+0x24>

0801141c <_sbrk_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	4d06      	ldr	r5, [pc, #24]	@ (8011438 <_sbrk_r+0x1c>)
 8011420:	2300      	movs	r3, #0
 8011422:	4604      	mov	r4, r0
 8011424:	4608      	mov	r0, r1
 8011426:	602b      	str	r3, [r5, #0]
 8011428:	f7f0 f832 	bl	8001490 <_sbrk>
 801142c:	1c43      	adds	r3, r0, #1
 801142e:	d102      	bne.n	8011436 <_sbrk_r+0x1a>
 8011430:	682b      	ldr	r3, [r5, #0]
 8011432:	b103      	cbz	r3, 8011436 <_sbrk_r+0x1a>
 8011434:	6023      	str	r3, [r4, #0]
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	24002240 	.word	0x24002240

0801143c <memcpy>:
 801143c:	440a      	add	r2, r1
 801143e:	4291      	cmp	r1, r2
 8011440:	f100 33ff 	add.w	r3, r0, #4294967295
 8011444:	d100      	bne.n	8011448 <memcpy+0xc>
 8011446:	4770      	bx	lr
 8011448:	b510      	push	{r4, lr}
 801144a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801144e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011452:	4291      	cmp	r1, r2
 8011454:	d1f9      	bne.n	801144a <memcpy+0xe>
 8011456:	bd10      	pop	{r4, pc}

08011458 <_realloc_r>:
 8011458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801145c:	4607      	mov	r7, r0
 801145e:	4614      	mov	r4, r2
 8011460:	460d      	mov	r5, r1
 8011462:	b921      	cbnz	r1, 801146e <_realloc_r+0x16>
 8011464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011468:	4611      	mov	r1, r2
 801146a:	f7ff bc4d 	b.w	8010d08 <_malloc_r>
 801146e:	b92a      	cbnz	r2, 801147c <_realloc_r+0x24>
 8011470:	f7ff fbde 	bl	8010c30 <_free_r>
 8011474:	4625      	mov	r5, r4
 8011476:	4628      	mov	r0, r5
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147c:	f000 f81a 	bl	80114b4 <_malloc_usable_size_r>
 8011480:	4284      	cmp	r4, r0
 8011482:	4606      	mov	r6, r0
 8011484:	d802      	bhi.n	801148c <_realloc_r+0x34>
 8011486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801148a:	d8f4      	bhi.n	8011476 <_realloc_r+0x1e>
 801148c:	4621      	mov	r1, r4
 801148e:	4638      	mov	r0, r7
 8011490:	f7ff fc3a 	bl	8010d08 <_malloc_r>
 8011494:	4680      	mov	r8, r0
 8011496:	b908      	cbnz	r0, 801149c <_realloc_r+0x44>
 8011498:	4645      	mov	r5, r8
 801149a:	e7ec      	b.n	8011476 <_realloc_r+0x1e>
 801149c:	42b4      	cmp	r4, r6
 801149e:	4622      	mov	r2, r4
 80114a0:	4629      	mov	r1, r5
 80114a2:	bf28      	it	cs
 80114a4:	4632      	movcs	r2, r6
 80114a6:	f7ff ffc9 	bl	801143c <memcpy>
 80114aa:	4629      	mov	r1, r5
 80114ac:	4638      	mov	r0, r7
 80114ae:	f7ff fbbf 	bl	8010c30 <_free_r>
 80114b2:	e7f1      	b.n	8011498 <_realloc_r+0x40>

080114b4 <_malloc_usable_size_r>:
 80114b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114b8:	1f18      	subs	r0, r3, #4
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	bfbc      	itt	lt
 80114be:	580b      	ldrlt	r3, [r1, r0]
 80114c0:	18c0      	addlt	r0, r0, r3
 80114c2:	4770      	bx	lr

080114c4 <_init>:
 80114c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114c6:	bf00      	nop
 80114c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114ca:	bc08      	pop	{r3}
 80114cc:	469e      	mov	lr, r3
 80114ce:	4770      	bx	lr

080114d0 <_fini>:
 80114d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114d2:	bf00      	nop
 80114d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114d6:	bc08      	pop	{r3}
 80114d8:	469e      	mov	lr, r3
 80114da:	4770      	bx	lr
