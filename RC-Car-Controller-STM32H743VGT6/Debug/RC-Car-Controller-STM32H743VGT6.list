
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001879c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08018a3c  08018a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019098  08019098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080190a0  080190a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080190a4  080190a4  0001a0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000368  24000000  080190a8  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00032dd4  24000368  08019410  0001b368  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2403313c  08019410  0001c13c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b368  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c881  00000000  00000000  0001b396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005321  00000000  00000000  00047c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f38  00000000  00000000  0004cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001834  00000000  00000000  0004ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dbca  00000000  00000000  000506a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d67c  00000000  00000000  0008e26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178797  00000000  00000000  000bb8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00234081  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008ab4  00000000  00000000  002340c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  0023cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000368 	.word	0x24000368
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018a24 	.word	0x08018a24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400036c 	.word	0x2400036c
 80002dc:	08018a24 	.word	0x08018a24

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	@ 0x30
 80006c0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80006c2:	f001 f8cd 	bl	8001860 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c6:	f002 f8f1 	bl	80028ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ca:	f000 fb5b 	bl	8000d84 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006ce:	f000 fbd3 	bl	8000e78 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d2:	f000 fe53 	bl	800137c <MX_GPIO_Init>
	MX_MDMA_Init();
 80006d6:	f000 fe31 	bl	800133c <MX_MDMA_Init>
	MX_DMA_Init();
 80006da:	f000 fddf 	bl	800129c <MX_DMA_Init>
	MX_USART1_UART_Init();
 80006de:	f000 fd8b 	bl	80011f8 <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 80006e2:	f016 ffa5 	bl	8017630 <MX_USB_DEVICE_Init>
	MX_JPEG_Init();
 80006e6:	f000 fd1d 	bl	8001124 <MX_JPEG_Init>
	MX_I2C1_Init();
 80006ea:	f000 fc9b 	bl	8001024 <MX_I2C1_Init>
	MX_SPI4_Init();
 80006ee:	f000 fd2d 	bl	800114c <MX_SPI4_Init>
	MX_ADC1_Init();
 80006f2:	f000 fc0b 	bl	8000f0c <MX_ADC1_Init>
	MX_I2C2_Init();
 80006f6:	f000 fcd5 	bl	80010a4 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	49a3      	ldr	r1, [pc, #652]	@ (800098c <main+0x2d0>)
 80006fe:	48a4      	ldr	r0, [pc, #656]	@ (8000990 <main+0x2d4>)
 8000700:	f002 fd52 	bl	80031a8 <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	uint8_t init_result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	76fb      	strb	r3, [r7, #27]

	hssd1.i2c_handle = &hi2c2;
 8000708:	4ba2      	ldr	r3, [pc, #648]	@ (8000994 <main+0x2d8>)
 800070a:	4aa3      	ldr	r2, [pc, #652]	@ (8000998 <main+0x2dc>)
 800070c:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800070e:	4ba1      	ldr	r3, [pc, #644]	@ (8000994 <main+0x2d8>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000714:	4b9f      	ldr	r3, [pc, #636]	@ (8000994 <main+0x2d8>)
 8000716:	4aa1      	ldr	r2, [pc, #644]	@ (800099c <main+0x2e0>)
 8000718:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd1);
 800071a:	489e      	ldr	r0, [pc, #632]	@ (8000994 <main+0x2d8>)
 800071c:	f001 fe7c 	bl	8002418 <SSD1306_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	76fb      	strb	r3, [r7, #27]
	if (init_result) {
 8000724:	7efb      	ldrb	r3, [r7, #27]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d013      	beq.n	8000752 <main+0x96>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800072a:	7efb      	ldrb	r3, [r7, #27]
 800072c:	461a      	mov	r2, r3
 800072e:	499c      	ldr	r1, [pc, #624]	@ (80009a0 <main+0x2e4>)
 8000730:	489c      	ldr	r0, [pc, #624]	@ (80009a4 <main+0x2e8>)
 8000732:	f017 fcd7 	bl	80180e4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000736:	489b      	ldr	r0, [pc, #620]	@ (80009a4 <main+0x2e8>)
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	4898      	ldr	r0, [pc, #608]	@ (80009a4 <main+0x2e8>)
 8000742:	f017 f84f 	bl	80177e4 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f002 f941 	bl	80029d0 <HAL_Delay>
		while (1) {
 800074e:	bf00      	nop
 8000750:	e7eb      	b.n	800072a <main+0x6e>
		}
	}

	hssd2.i2c_handle = &hi2c1;
 8000752:	4b95      	ldr	r3, [pc, #596]	@ (80009a8 <main+0x2ec>)
 8000754:	4a95      	ldr	r2, [pc, #596]	@ (80009ac <main+0x2f0>)
 8000756:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 8000758:	4b93      	ldr	r3, [pc, #588]	@ (80009a8 <main+0x2ec>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 800075e:	4b92      	ldr	r3, [pc, #584]	@ (80009a8 <main+0x2ec>)
 8000760:	4a93      	ldr	r2, [pc, #588]	@ (80009b0 <main+0x2f4>)
 8000762:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd2);
 8000764:	4890      	ldr	r0, [pc, #576]	@ (80009a8 <main+0x2ec>)
 8000766:	f001 fe57 	bl	8002418 <SSD1306_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	76fb      	strb	r3, [r7, #27]
	if (init_result) {
 800076e:	7efb      	ldrb	r3, [r7, #27]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0xe0>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 8000774:	7efb      	ldrb	r3, [r7, #27]
 8000776:	461a      	mov	r2, r3
 8000778:	498e      	ldr	r1, [pc, #568]	@ (80009b4 <main+0x2f8>)
 800077a:	488a      	ldr	r0, [pc, #552]	@ (80009a4 <main+0x2e8>)
 800077c:	f017 fcb2 	bl	80180e4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000780:	4888      	ldr	r0, [pc, #544]	@ (80009a4 <main+0x2e8>)
 8000782:	f7ff fdad 	bl	80002e0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	4886      	ldr	r0, [pc, #536]	@ (80009a4 <main+0x2e8>)
 800078c:	f017 f82a 	bl	80177e4 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f002 f91c 	bl	80029d0 <HAL_Delay>
		while (1) {
 8000798:	bf00      	nop
 800079a:	e7eb      	b.n	8000774 <main+0xb8>
		}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 800079c:	4b86      	ldr	r3, [pc, #536]	@ (80009b8 <main+0x2fc>)
 800079e:	4a87      	ldr	r2, [pc, #540]	@ (80009bc <main+0x300>)
 80007a0:	601a      	str	r2, [r3, #0]
	hst7789.spi_ready = 1;
 80007a2:	4b85      	ldr	r3, [pc, #532]	@ (80009b8 <main+0x2fc>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007a8:	4b83      	ldr	r3, [pc, #524]	@ (80009b8 <main+0x2fc>)
 80007aa:	4a85      	ldr	r2, [pc, #532]	@ (80009c0 <main+0x304>)
 80007ac:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007ae:	4b82      	ldr	r3, [pc, #520]	@ (80009b8 <main+0x2fc>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 80007b4:	4b80      	ldr	r3, [pc, #512]	@ (80009b8 <main+0x2fc>)
 80007b6:	4a83      	ldr	r2, [pc, #524]	@ (80009c4 <main+0x308>)
 80007b8:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 80007ba:	487f      	ldr	r0, [pc, #508]	@ (80009b8 <main+0x2fc>)
 80007bc:	f001 ff5c 	bl	8002678 <ST7789_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	76fb      	strb	r3, [r7, #27]
	if (init_result) {
 80007c4:	7efb      	ldrb	r3, [r7, #27]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d013      	beq.n	80007f2 <main+0x136>
		while (1) {
			sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007ca:	7efb      	ldrb	r3, [r7, #27]
 80007cc:	461a      	mov	r2, r3
 80007ce:	497e      	ldr	r1, [pc, #504]	@ (80009c8 <main+0x30c>)
 80007d0:	4874      	ldr	r0, [pc, #464]	@ (80009a4 <main+0x2e8>)
 80007d2:	f017 fc87 	bl	80180e4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007d6:	4873      	ldr	r0, [pc, #460]	@ (80009a4 <main+0x2e8>)
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	4619      	mov	r1, r3
 80007e0:	4870      	ldr	r0, [pc, #448]	@ (80009a4 <main+0x2e8>)
 80007e2:	f016 ffff 	bl	80177e4 <CDC_Transmit_FS>
			HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ea:	f002 f8f1 	bl	80029d0 <HAL_Delay>
		while (1) {
 80007ee:	bf00      	nop
 80007f0:	e7eb      	b.n	80007ca <main+0x10e>
		}
	}

	// Clear the screen
	ST7789_Clear(&hst7789, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	4870      	ldr	r0, [pc, #448]	@ (80009b8 <main+0x2fc>)
 80007f6:	f001 ffe8 	bl	80027ca <ST7789_Clear>
	ST7789_Update(&hst7789, 0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	486e      	ldr	r0, [pc, #440]	@ (80009b8 <main+0x2fc>)
 80007fe:	f001 fff7 	bl	80027f0 <ST7789_Update>
	HAL_Delay(50);
 8000802:	2032      	movs	r0, #50	@ 0x32
 8000804:	f002 f8e4 	bl	80029d0 <HAL_Delay>
	ST7789_Update(&hst7789, 1);
 8000808:	2101      	movs	r1, #1
 800080a:	486b      	ldr	r0, [pc, #428]	@ (80009b8 <main+0x2fc>)
 800080c:	f001 fff0 	bl	80027f0 <ST7789_Update>

	// ------------------------------------------------------------ SETUP JPEG DECODE -- //
	// override the header
	// DO NOT MODIFY THE JPEG_RAW BUF BELOW BYTE 526
	memcpy(jpeg_raw1, jpeg_header, JPEG_HEADERSIZE);
 8000810:	4a6e      	ldr	r2, [pc, #440]	@ (80009cc <main+0x310>)
 8000812:	4b6f      	ldr	r3, [pc, #444]	@ (80009d0 <main+0x314>)
 8000814:	4610      	mov	r0, r2
 8000816:	4619      	mov	r1, r3
 8000818:	f240 230e 	movw	r3, #526	@ 0x20e
 800081c:	461a      	mov	r2, r3
 800081e:	f017 fcb7 	bl	8018190 <memcpy>
	memcpy(jpeg_raw2, jpeg_header, JPEG_HEADERSIZE);
 8000822:	4a6c      	ldr	r2, [pc, #432]	@ (80009d4 <main+0x318>)
 8000824:	4b6a      	ldr	r3, [pc, #424]	@ (80009d0 <main+0x314>)
 8000826:	4610      	mov	r0, r2
 8000828:	4619      	mov	r1, r3
 800082a:	f240 230e 	movw	r3, #526	@ 0x20e
 800082e:	461a      	mov	r2, r3
 8000830:	f017 fcae 	bl	8018190 <memcpy>

	// ------------------------------------------------------------ SETUP UART -- //
	// TODO: Move this into a class
	// TODO: Register a callback instead of using the legacy one

	uint8_t col = 0xF0;
 8000834:	23f0      	movs	r3, #240	@ 0xf0
 8000836:	76bb      	strb	r3, [r7, #26]
	uint8_t screen_portion = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	767b      	strb	r3, [r7, #25]
	uint8_t fill_byte = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	763b      	strb	r3, [r7, #24]

	uint32_t old_t = HAL_GetTick();
 8000840:	f002 f8ba 	bl	80029b8 <HAL_GetTick>
 8000844:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t debug_live = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	75fb      	strb	r3, [r7, #23]

	sprintf(ssd_msg, " JPEG X");
 800084a:	4963      	ldr	r1, [pc, #396]	@ (80009d8 <main+0x31c>)
 800084c:	4863      	ldr	r0, [pc, #396]	@ (80009dc <main+0x320>)
 800084e:	f017 fc49 	bl	80180e4 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8000852:	4862      	ldr	r0, [pc, #392]	@ (80009dc <main+0x320>)
 8000854:	f7ff fd44 	bl	80002e0 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	485f      	ldr	r0, [pc, #380]	@ (80009dc <main+0x320>)
 8000860:	f000 ffd8 	bl	8001814 <WriteDebug>
//			  //HAL_UART_Transmit(&huart1, usb_msg, strlen(usb_msg), 1000);
//		  }
//	}

	// Begin a UART capture
	uart_rx_packetState = 2;
 8000864:	4b5e      	ldr	r3, [pc, #376]	@ (80009e0 <main+0x324>)
 8000866:	2202      	movs	r2, #2
 8000868:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uart_rxDMA_buffer, UART_BUFFERSIZE);
 800086a:	2243      	movs	r2, #67	@ 0x43
 800086c:	495d      	ldr	r1, [pc, #372]	@ (80009e4 <main+0x328>)
 800086e:	485e      	ldr	r0, [pc, #376]	@ (80009e8 <main+0x32c>)
 8000870:	f011 fc7a 	bl	8012168 <HAL_UART_Receive_DMA>

		/* USER CODE BEGIN 3 */

		// If there's a packet, process it
		// If the packet is good, push it to the screen
		if (uart_rx_packetState == 0) {
 8000874:	4b5a      	ldr	r3, [pc, #360]	@ (80009e0 <main+0x324>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	f040 80ed 	bne.w	8000a58 <main+0x39c>
			uint16_t rx_byte = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	82bb      	strh	r3, [r7, #20]
			rx_byte += uart_rx_packetFullBuffer[1];
 8000882:	4b5a      	ldr	r3, [pc, #360]	@ (80009ec <main+0x330>)
 8000884:	785b      	ldrb	r3, [r3, #1]
 8000886:	461a      	mov	r2, r3
 8000888:	8abb      	ldrh	r3, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	82bb      	strh	r3, [r7, #20]
			rx_byte *= 256;
 800088e:	8abb      	ldrh	r3, [r7, #20]
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	82bb      	strh	r3, [r7, #20]
			rx_byte += uart_rx_packetFullBuffer[2];
 8000894:	4b55      	ldr	r3, [pc, #340]	@ (80009ec <main+0x330>)
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	461a      	mov	r2, r3
 800089a:	8abb      	ldrh	r3, [r7, #20]
 800089c:	4413      	add	r3, r2
 800089e:	82bb      	strh	r3, [r7, #20]

			if (rx_byte <= JPEG_WIDTH*JPEG_HEIGHT/64 + 1) {
 80008a0:	8abb      	ldrh	r3, [r7, #20]
 80008a2:	2be2      	cmp	r3, #226	@ 0xe2
 80008a4:	f200 80d8 	bhi.w	8000a58 <main+0x39c>
//						SSD1306_DrawString(&hssd1, ssd_msg, 2);
//					}
//					SSD1306_Update(&hssd1);
//				}

				if (rx_byte > uart_rx_lastPacketNum + 1) {
 80008a8:	8aba      	ldrh	r2, [r7, #20]
 80008aa:	4b51      	ldr	r3, [pc, #324]	@ (80009f0 <main+0x334>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dd0e      	ble.n	80008d2 <main+0x216>
					uart_rx_skippedPackets += (rx_byte - uart_rx_lastPacketNum) - 1;
 80008b4:	8abb      	ldrh	r3, [r7, #20]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b4d      	ldr	r3, [pc, #308]	@ (80009f0 <main+0x334>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b4c      	ldr	r3, [pc, #304]	@ (80009f4 <main+0x338>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	3b01      	subs	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b49      	ldr	r3, [pc, #292]	@ (80009f4 <main+0x338>)
 80008d0:	701a      	strb	r2, [r3, #0]
				}

				// Data was fully sent
				if (rx_byte < uart_rx_lastPacketNum) {
 80008d2:	4b47      	ldr	r3, [pc, #284]	@ (80009f0 <main+0x334>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	8aba      	ldrh	r2, [r7, #20]
 80008d8:	429a      	cmp	r2, r3
 80008da:	f080 809c 	bcs.w	8000a16 <main+0x35a>
					// Data good, process
					if (uart_rx_skippedPackets == 0 && jpeg_state == 0) {
 80008de:	4b45      	ldr	r3, [pc, #276]	@ (80009f4 <main+0x338>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8094 	bne.w	8000a10 <main+0x354>
 80008e8:	4b43      	ldr	r3, [pc, #268]	@ (80009f8 <main+0x33c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	f040 808f 	bne.w	8000a10 <main+0x354>
						// Start the jpeg decode
						jpeg_size = uart_rx_lastPacketNum*64 + JPEG_HEADERSIZE;
 80008f2:	4b3f      	ldr	r3, [pc, #252]	@ (80009f0 <main+0x334>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	019b      	lsls	r3, r3, #6
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b3e      	ldr	r3, [pc, #248]	@ (80009fc <main+0x340>)
 8000902:	801a      	strh	r2, [r3, #0]
						HAL_StatusTypeDef ret;
						if (jpeg_currentraw)
 8000904:	4b3e      	ldr	r3, [pc, #248]	@ (8000a00 <main+0x344>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d00e      	beq.n	800092a <main+0x26e>
							ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw1, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 800090c:	4b3b      	ldr	r3, [pc, #236]	@ (80009fc <main+0x340>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	f44f 5361 	mov.w	r3, #14400	@ 0x3840
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	4b3a      	ldr	r3, [pc, #232]	@ (8000a04 <main+0x348>)
 800091a:	492c      	ldr	r1, [pc, #176]	@ (80009cc <main+0x310>)
 800091c:	483a      	ldr	r0, [pc, #232]	@ (8000a08 <main+0x34c>)
 800091e:	f009 faca 	bl	8009eb6 <HAL_JPEG_Decode_DMA>
 8000922:	4603      	mov	r3, r0
 8000924:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000928:	e00d      	b.n	8000946 <main+0x28a>
						else {
							ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw2, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 800092a:	4b34      	ldr	r3, [pc, #208]	@ (80009fc <main+0x340>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	f44f 5361 	mov.w	r3, #14400	@ 0x3840
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	4b33      	ldr	r3, [pc, #204]	@ (8000a04 <main+0x348>)
 8000938:	4926      	ldr	r1, [pc, #152]	@ (80009d4 <main+0x318>)
 800093a:	4833      	ldr	r0, [pc, #204]	@ (8000a08 <main+0x34c>)
 800093c:	f009 fabb 	bl	8009eb6 <HAL_JPEG_Decode_DMA>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
						}
						jpeg_currentraw = !jpeg_currentraw;
 8000946:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <main+0x344>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	bf0c      	ite	eq
 800094e:	2301      	moveq	r3, #1
 8000950:	2300      	movne	r3, #0
 8000952:	b2db      	uxtb	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	4b2a      	ldr	r3, [pc, #168]	@ (8000a00 <main+0x344>)
 8000958:	701a      	strb	r2, [r3, #0]

						if (ret) {
 800095a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800095e:	2b00      	cmp	r3, #0
 8000960:	d010      	beq.n	8000984 <main+0x2c8>
							sprintf(ssd_msg, " JPEG FAIL %d", ret);
 8000962:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000966:	461a      	mov	r2, r3
 8000968:	4928      	ldr	r1, [pc, #160]	@ (8000a0c <main+0x350>)
 800096a:	481c      	ldr	r0, [pc, #112]	@ (80009dc <main+0x320>)
 800096c:	f017 fbba 	bl	80180e4 <siprintf>
							WriteDebug(ssd_msg, strlen(ssd_msg));
 8000970:	481a      	ldr	r0, [pc, #104]	@ (80009dc <main+0x320>)
 8000972:	f7ff fcb5 	bl	80002e0 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4619      	mov	r1, r3
 800097c:	4817      	ldr	r0, [pc, #92]	@ (80009dc <main+0x320>)
 800097e:	f000 ff49 	bl	8001814 <WriteDebug>
					if (uart_rx_skippedPackets == 0 && jpeg_state == 0) {
 8000982:	e048      	b.n	8000a16 <main+0x35a>
						} else {
							jpeg_state = 1;
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <main+0x33c>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
					if (uart_rx_skippedPackets == 0 && jpeg_state == 0) {
 800098a:	e044      	b.n	8000a16 <main+0x35a>
 800098c:	24026a38 	.word	0x24026a38
 8000990:	24000384 	.word	0x24000384
 8000994:	24000934 	.word	0x24000934
 8000998:	240004b4 	.word	0x240004b4
 800099c:	2400095c 	.word	0x2400095c
 80009a0:	08018a3c 	.word	0x08018a3c
 80009a4:	240011c0 	.word	0x240011c0
 80009a8:	24000948 	.word	0x24000948
 80009ac:	24000460 	.word	0x24000460
 80009b0:	24000d5c 	.word	0x24000d5c
 80009b4:	08018a58 	.word	0x08018a58
 80009b8:	24001224 	.word	0x24001224
 80009bc:	24000728 	.word	0x24000728
 80009c0:	58021000 	.word	0x58021000
 80009c4:	24001238 	.word	0x24001238
 80009c8:	08018a74 	.word	0x08018a74
 80009cc:	24026b3c 	.word	0x24026b3c
 80009d0:	24000004 	.word	0x24000004
 80009d4:	2402a37c 	.word	0x2402a37c
 80009d8:	08018a90 	.word	0x08018a90
 80009dc:	2400115c 	.word	0x2400115c
 80009e0:	24026b37 	.word	0x24026b37
 80009e4:	24026a6c 	.word	0x24026a6c
 80009e8:	24000828 	.word	0x24000828
 80009ec:	24026af4 	.word	0x24026af4
 80009f0:	24026b38 	.word	0x24026b38
 80009f4:	24026b3a 	.word	0x24026b3a
 80009f8:	240313fe 	.word	0x240313fe
 80009fc:	240313fc 	.word	0x240313fc
 8000a00:	24026b3b 	.word	0x24026b3b
 8000a04:	2402dbbc 	.word	0x2402dbbc
 8000a08:	240005f8 	.word	0x240005f8
 8000a0c:	08018a98 	.word	0x08018a98
						}
					} else {
						// Packets skipped
						uart_rx_skippedPackets = 0;
 8000a10:	4ba2      	ldr	r3, [pc, #648]	@ (8000c9c <main+0x5e0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
					}
				}
				// flag the packet as processed
				uart_rx_lastPacketNum = rx_byte;
 8000a16:	4aa2      	ldr	r2, [pc, #648]	@ (8000ca0 <main+0x5e4>)
 8000a18:	8abb      	ldrh	r3, [r7, #20]
 8000a1a:	8013      	strh	r3, [r2, #0]
				uart_rx_packetState = 2;
 8000a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8000ca4 <main+0x5e8>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	701a      	strb	r2, [r3, #0]

				// fill in the received data
				//memcpy(hst7789.vram + rx_byte * 64, uart_rx_packetFullBuffer + 3, 64);
				if (jpeg_currentraw)
 8000a22:	4ba1      	ldr	r3, [pc, #644]	@ (8000ca8 <main+0x5ec>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00b      	beq.n	8000a42 <main+0x386>
					memcpy(jpeg_raw1 + JPEG_HEADERSIZE + rx_byte * 64, uart_rx_packetFullBuffer + 3, 64);
 8000a2a:	8abb      	ldrh	r3, [r7, #20]
 8000a2c:	019b      	lsls	r3, r3, #6
 8000a2e:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8000a32:	4a9e      	ldr	r2, [pc, #632]	@ (8000cac <main+0x5f0>)
 8000a34:	4413      	add	r3, r2
 8000a36:	499e      	ldr	r1, [pc, #632]	@ (8000cb0 <main+0x5f4>)
 8000a38:	2240      	movs	r2, #64	@ 0x40
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f017 fba8 	bl	8018190 <memcpy>
 8000a40:	e00a      	b.n	8000a58 <main+0x39c>
				else {
					memcpy(jpeg_raw2 + JPEG_HEADERSIZE + rx_byte * 64, uart_rx_packetFullBuffer + 3, 64);
 8000a42:	8abb      	ldrh	r3, [r7, #20]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8000a4a:	4a9a      	ldr	r2, [pc, #616]	@ (8000cb4 <main+0x5f8>)
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4998      	ldr	r1, [pc, #608]	@ (8000cb0 <main+0x5f4>)
 8000a50:	2240      	movs	r2, #64	@ 0x40
 8000a52:	4618      	mov	r0, r3
 8000a54:	f017 fb9c 	bl	8018190 <memcpy>
				}
			}
		}

		// If the JPEG is decoded, process it
		if (jpeg_state == 2) {
 8000a58:	4b97      	ldr	r3, [pc, #604]	@ (8000cb8 <main+0x5fc>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	f47f af09 	bne.w	8000874 <main+0x1b8>
			// Loop through every mcu block
			for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	843b      	strh	r3, [r7, #32]
 8000a66:	e141      	b.n	8000cec <main+0x630>
				uint16_t mcu_idx = current_mcu_y*JPEG_MCU_WIDTH + mcu_x;
 8000a68:	4b94      	ldr	r3, [pc, #592]	@ (8000cbc <main+0x600>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	8c3b      	ldrh	r3, [r7, #32]
 8000a76:	4413      	add	r3, r2
 8000a78:	81fb      	strh	r3, [r7, #14]

				for (uint16_t y = 0; y < 8; y++) {
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	83fb      	strh	r3, [r7, #30]
 8000a7e:	e12e      	b.n	8000cde <main+0x622>
					for (uint16_t x = 0; x < 8; x++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	83bb      	strh	r3, [r7, #28]
 8000a84:	e124      	b.n	8000cd0 <main+0x614>
						// Bounds check
						if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 8000a86:	8c3b      	ldrh	r3, [r7, #32]
 8000a88:	00da      	lsls	r2, r3, #3
 8000a8a:	8bbb      	ldrh	r3, [r7, #28]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a90:	f300 80ff 	bgt.w	8000c92 <main+0x5d6>
						// COLOR FORMAT
						// |RRRRR GGG|GGG BBBBB|
						// TODO: stop transmitting overscan to save bandwidth

						uint32_t pix_x = (mcu_x*8 + x)*2;
 8000a94:	8c3b      	ldrh	r3, [r7, #32]
 8000a96:	00da      	lsls	r2, r3, #3
 8000a98:	8bbb      	ldrh	r3, [r7, #28]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
						if (pix_x >= LCD_WIDTH-1) continue;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	2bee      	cmp	r3, #238	@ 0xee
 8000aa4:	f200 80f7 	bhi.w	8000c96 <main+0x5da>
						pix_x = LCD_WIDTH - pix_x - 1;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8000aae:	60bb      	str	r3, [r7, #8]
						uint32_t pix_y = (current_mcu_y*8 + y)*3;
 8000ab0:	4b82      	ldr	r3, [pc, #520]	@ (8000cbc <main+0x600>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	00da      	lsls	r2, r3, #3
 8000ab6:	8bfb      	ldrh	r3, [r7, #30]
 8000ab8:	441a      	add	r2, r3
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	607b      	str	r3, [r7, #4]
						if (pix_y >= LCD_HEIGHT-2) continue;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8000ac8:	f080 80fe 	bcs.w	8000cc8 <main+0x60c>

						uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	8bfb      	ldrh	r3, [r7, #30]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	00da      	lsls	r2, r3, #3
 8000ad6:	8bbb      	ldrh	r3, [r7, #28]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a79      	ldr	r2, [pc, #484]	@ (8000cc0 <main+0x604>)
 8000adc:	5cd3      	ldrb	r3, [r2, r3]
 8000ade:	70fb      	strb	r3, [r7, #3]
						uint8_t msb = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 8000ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ae4:	f023 0307 	bic.w	r3, r3, #7
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	095b      	lsrs	r3, r3, #5
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	70bb      	strb	r3, [r7, #2]
						uint8_t lsb = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	b25a      	sxtb	r2, r3
 8000b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	f023 031f 	bic.w	r3, r3, #31
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	707b      	strb	r3, [r7, #1]

						hst7789.vram[ pix_y    * LCD_WIDTH*2 +  pix_x    * 2    ] = msb;
 8000b14:	4b6b      	ldr	r3, [pc, #428]	@ (8000cc4 <main+0x608>)
 8000b16:	6919      	ldr	r1, [r3, #16]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	1a9b      	subs	r3, r3, r2
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	461a      	mov	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4413      	add	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	440b      	add	r3, r1
 8000b2c:	78ba      	ldrb	r2, [r7, #2]
 8000b2e:	701a      	strb	r2, [r3, #0]
						hst7789.vram[ pix_y    * LCD_WIDTH*2 +  pix_x    * 2 + 1] = lsb;
 8000b30:	4b64      	ldr	r3, [pc, #400]	@ (8000cc4 <main+0x608>)
 8000b32:	6919      	ldr	r1, [r3, #16]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4613      	mov	r3, r2
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4413      	add	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	3301      	adds	r3, #1
 8000b48:	440b      	add	r3, r1
 8000b4a:	787a      	ldrb	r2, [r7, #1]
 8000b4c:	701a      	strb	r2, [r3, #0]
						hst7789.vram[ pix_y    * LCD_WIDTH*2 + (pix_x+1) * 2    ] = msb;
 8000b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc4 <main+0x608>)
 8000b50:	6919      	ldr	r1, [r3, #16]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4613      	mov	r3, r2
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	4413      	add	r3, r2
 8000b62:	3301      	adds	r3, #1
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	440b      	add	r3, r1
 8000b68:	78ba      	ldrb	r2, [r7, #2]
 8000b6a:	701a      	strb	r2, [r3, #0]
						hst7789.vram[ pix_y    * LCD_WIDTH*2 + (pix_x+1) * 2 + 1] = lsb;
 8000b6c:	4b55      	ldr	r3, [pc, #340]	@ (8000cc4 <main+0x608>)
 8000b6e:	6919      	ldr	r1, [r3, #16]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	1a9b      	subs	r3, r3, r2
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4413      	add	r3, r2
 8000b80:	3301      	adds	r3, #1
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	3301      	adds	r3, #1
 8000b86:	440b      	add	r3, r1
 8000b88:	787a      	ldrb	r2, [r7, #1]
 8000b8a:	701a      	strb	r2, [r3, #0]
						hst7789.vram[(pix_y+1) * LCD_WIDTH*2 +  pix_x    * 2    ] = msb;
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc4 <main+0x608>)
 8000b8e:	6919      	ldr	r1, [r3, #16]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	4613      	mov	r3, r2
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	1a9b      	subs	r3, r3, r2
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	78ba      	ldrb	r2, [r7, #2]
 8000ba8:	701a      	strb	r2, [r3, #0]
						hst7789.vram[(pix_y+1) * LCD_WIDTH*2 +  pix_x    * 2 + 1] = lsb;
 8000baa:	4b46      	ldr	r3, [pc, #280]	@ (8000cc4 <main+0x608>)
 8000bac:	6919      	ldr	r1, [r3, #16]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	011b      	lsls	r3, r3, #4
 8000bb6:	1a9b      	subs	r3, r3, r2
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	440b      	add	r3, r1
 8000bc6:	787a      	ldrb	r2, [r7, #1]
 8000bc8:	701a      	strb	r2, [r3, #0]
						hst7789.vram[(pix_y+1) * LCD_WIDTH*2 + (pix_x+1) * 2    ] = msb;
 8000bca:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc4 <main+0x608>)
 8000bcc:	6919      	ldr	r1, [r3, #16]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4413      	add	r3, r2
 8000be0:	3301      	adds	r3, #1
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	440b      	add	r3, r1
 8000be6:	78ba      	ldrb	r2, [r7, #2]
 8000be8:	701a      	strb	r2, [r3, #0]
						hst7789.vram[(pix_y+1) * LCD_WIDTH*2 + (pix_x+1) * 2 + 1] = lsb;
 8000bea:	4b36      	ldr	r3, [pc, #216]	@ (8000cc4 <main+0x608>)
 8000bec:	6919      	ldr	r1, [r3, #16]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	011b      	lsls	r3, r3, #4
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4413      	add	r3, r2
 8000c00:	3301      	adds	r3, #1
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	3301      	adds	r3, #1
 8000c06:	440b      	add	r3, r1
 8000c08:	787a      	ldrb	r2, [r7, #1]
 8000c0a:	701a      	strb	r2, [r3, #0]
						hst7789.vram[(pix_y+2) * LCD_WIDTH*2 +  pix_x    * 2    ] = msb;
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <main+0x608>)
 8000c0e:	6919      	ldr	r1, [r3, #16]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4613      	mov	r3, r2
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	440b      	add	r3, r1
 8000c28:	78ba      	ldrb	r2, [r7, #2]
 8000c2a:	701a      	strb	r2, [r3, #0]
						hst7789.vram[(pix_y+2) * LCD_WIDTH*2 +  pix_x    * 2 + 1] = lsb;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <main+0x608>)
 8000c2e:	6919      	ldr	r1, [r3, #16]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	1a9b      	subs	r3, r3, r2
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4413      	add	r3, r2
 8000c40:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	3301      	adds	r3, #1
 8000c48:	440b      	add	r3, r1
 8000c4a:	787a      	ldrb	r2, [r7, #1]
 8000c4c:	701a      	strb	r2, [r3, #0]
						hst7789.vram[(pix_y+2) * LCD_WIDTH*2 + (pix_x+1) * 2    ] = msb;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <main+0x608>)
 8000c50:	6919      	ldr	r1, [r3, #16]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	4413      	add	r3, r2
 8000c62:	f203 13e1 	addw	r3, r3, #481	@ 0x1e1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	440b      	add	r3, r1
 8000c6a:	78ba      	ldrb	r2, [r7, #2]
 8000c6c:	701a      	strb	r2, [r3, #0]
						hst7789.vram[(pix_y+2) * LCD_WIDTH*2 + (pix_x+1) * 2 + 1] = lsb;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <main+0x608>)
 8000c70:	6919      	ldr	r1, [r3, #16]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	4413      	add	r3, r2
 8000c82:	f203 13e1 	addw	r3, r3, #481	@ 0x1e1
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	3301      	adds	r3, #1
 8000c8a:	440b      	add	r3, r1
 8000c8c:	787a      	ldrb	r2, [r7, #1]
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e01b      	b.n	8000cca <main+0x60e>
						if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 8000c92:	bf00      	nop
 8000c94:	e019      	b.n	8000cca <main+0x60e>
						if (pix_x >= LCD_WIDTH-1) continue;
 8000c96:	bf00      	nop
 8000c98:	e017      	b.n	8000cca <main+0x60e>
 8000c9a:	bf00      	nop
 8000c9c:	24026b3a 	.word	0x24026b3a
 8000ca0:	24026b38 	.word	0x24026b38
 8000ca4:	24026b37 	.word	0x24026b37
 8000ca8:	24026b3b 	.word	0x24026b3b
 8000cac:	24026b3c 	.word	0x24026b3c
 8000cb0:	24026af7 	.word	0x24026af7
 8000cb4:	2402a37c 	.word	0x2402a37c
 8000cb8:	240313fe 	.word	0x240313fe
 8000cbc:	240313ff 	.word	0x240313ff
 8000cc0:	2402dbbc 	.word	0x2402dbbc
 8000cc4:	24001224 	.word	0x24001224
						if (pix_y >= LCD_HEIGHT-2) continue;
 8000cc8:	bf00      	nop
					for (uint16_t x = 0; x < 8; x++) {
 8000cca:	8bbb      	ldrh	r3, [r7, #28]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	83bb      	strh	r3, [r7, #28]
 8000cd0:	8bbb      	ldrh	r3, [r7, #28]
 8000cd2:	2b07      	cmp	r3, #7
 8000cd4:	f67f aed7 	bls.w	8000a86 <main+0x3ca>
				for (uint16_t y = 0; y < 8; y++) {
 8000cd8:	8bfb      	ldrh	r3, [r7, #30]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	83fb      	strh	r3, [r7, #30]
 8000cde:	8bfb      	ldrh	r3, [r7, #30]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	f67f aecd 	bls.w	8000a80 <main+0x3c4>
			for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 8000ce6:	8c3b      	ldrh	r3, [r7, #32]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	843b      	strh	r3, [r7, #32]
 8000cec:	8c3b      	ldrh	r3, [r7, #32]
 8000cee:	2b0e      	cmp	r3, #14
 8000cf0:	f67f aeba 	bls.w	8000a68 <main+0x3ac>
				}
			}



			current_mcu_y++;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <main+0x6b4>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <main+0x6b4>)
 8000cfe:	701a      	strb	r2, [r3, #0]

			if (current_mcu_y == 5) {
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <main+0x6b4>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b05      	cmp	r3, #5
 8000d06:	d103      	bne.n	8000d10 <main+0x654>
				ST7789_Update(&hst7789, 0);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	481a      	ldr	r0, [pc, #104]	@ (8000d74 <main+0x6b8>)
 8000d0c:	f001 fd70 	bl	80027f0 <ST7789_Update>
			}
			if (current_mcu_y == 10) {
 8000d10:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <main+0x6b4>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b0a      	cmp	r3, #10
 8000d16:	d103      	bne.n	8000d20 <main+0x664>
				ST7789_Update(&hst7789, 1);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4816      	ldr	r0, [pc, #88]	@ (8000d74 <main+0x6b8>)
 8000d1c:	f001 fd68 	bl	80027f0 <ST7789_Update>
			}

			if (current_mcu_y >= JPEG_MCU_HEIGHT) {
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <main+0x6b4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b0e      	cmp	r3, #14
 8000d26:	f67f ada5 	bls.w	8000874 <main+0x1b8>
				ST7789_Update(&hst7789, 2);
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <main+0x6b8>)
 8000d2e:	f001 fd5f 	bl	80027f0 <ST7789_Update>
				current_mcu_y = 0;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <main+0x6b4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
				// Flag JPEG as idle
				jpeg_state = 0;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <main+0x6bc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]

				// log time
				uint32_t delta_t = HAL_GetTick() - old_t;
 8000d3e:	f001 fe3b 	bl	80029b8 <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	613b      	str	r3, [r7, #16]
				sprintf(ssd_msg, " MS: %d", delta_t);
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	490b      	ldr	r1, [pc, #44]	@ (8000d7c <main+0x6c0>)
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <main+0x6c4>)
 8000d50:	f017 f9c8 	bl	80180e4 <siprintf>
				WriteDebug(ssd_msg, strlen(ssd_msg));
 8000d54:	480a      	ldr	r0, [pc, #40]	@ (8000d80 <main+0x6c4>)
 8000d56:	f7ff fac3 	bl	80002e0 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <main+0x6c4>)
 8000d62:	f000 fd57 	bl	8001814 <WriteDebug>
				old_t = HAL_GetTick();
 8000d66:	f001 fe27 	bl	80029b8 <HAL_GetTick>
 8000d6a:	6278      	str	r0, [r7, #36]	@ 0x24
		if (uart_rx_packetState == 0) {
 8000d6c:	e582      	b.n	8000874 <main+0x1b8>
 8000d6e:	bf00      	nop
 8000d70:	240313ff 	.word	0x240313ff
 8000d74:	24001224 	.word	0x24001224
 8000d78:	240313fe 	.word	0x240313fe
 8000d7c:	08018aa8 	.word	0x08018aa8
 8000d80:	2400115c 	.word	0x2400115c

08000d84 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b09c      	sub	sp, #112	@ 0x70
 8000d88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	224c      	movs	r2, #76	@ 0x4c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f017 f9c8 	bl	8018128 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f017 f9c2 	bl	8018128 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000da4:	2002      	movs	r0, #2
 8000da6:	f00c fc27 	bl	800d5f8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b30      	ldr	r3, [pc, #192]	@ (8000e70 <SystemClock_Config+0xec>)
 8000db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db2:	4a2f      	ldr	r2, [pc, #188]	@ (8000e70 <SystemClock_Config+0xec>)
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <SystemClock_Config+0xec>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <SystemClock_Config+0xf0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <SystemClock_Config+0xf0>)
 8000dca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <SystemClock_Config+0xf0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ddc:	bf00      	nop
 8000dde:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <SystemClock_Config+0xf0>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dea:	d1f8      	bne.n	8000dde <SystemClock_Config+0x5a>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 8000e02:	2318      	movs	r3, #24
 8000e04:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e12:	230c      	movs	r3, #12
 8000e14:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00c fc32 	bl	800d68c <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000e2e:	f000 fd43 	bl	80018b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e32:	233f      	movs	r3, #63	@ 0x3f
 8000e34:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e42:	2340      	movs	r3, #64	@ 0x40
 8000e44:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e46:	2340      	movs	r3, #64	@ 0x40
 8000e48:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e50:	2340      	movs	r3, #64	@ 0x40
 8000e52:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f00d f871 	bl	800df40 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8000e64:	f000 fd28 	bl	80018b8 <Error_Handler>
	}
}
 8000e68:	bf00      	nop
 8000e6a:	3770      	adds	r7, #112	@ 0x70
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58000400 	.word	0x58000400
 8000e74:	58024800 	.word	0x58024800

08000e78 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0b0      	sub	sp, #192	@ 0xc0
 8000e7c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	22c0      	movs	r2, #192	@ 0xc0
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f017 f94f 	bl	8018128 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C2
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f08 <PeriphCommonClock_Config+0x90>)
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e9c7 2300 	strd	r2, r3, [r7]
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI4;
	PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000e94:	2310      	movs	r3, #16
 8000e96:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000e98:	2380      	movs	r3, #128	@ 0x80
 8000e9a:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 20;
 8000e9c:	2314      	movs	r3, #20
 8000e9e:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	637b      	str	r3, [r7, #52]	@ 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ec8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000ece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed2:	643b      	str	r3, [r7, #64]	@ 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000edc:	667b      	str	r3, [r7, #100]	@ 0x64
	PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00d fbb2 	bl	800e658 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <PeriphCommonClock_Config+0x86>
	{
		Error_Handler();
 8000efa:	f000 fcdd 	bl	80018b8 <Error_Handler>
	}
}
 8000efe:	bf00      	nop
 8000f00:	37c0      	adds	r7, #192	@ 0xc0
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	00082008 	.word	0x00082008

08000f0c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	@ 0x28
 8000f10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000f30:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f32:	4a39      	ldr	r2, [pc, #228]	@ (8001018 <MX_ADC1_Init+0x10c>)
 8000f34:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000f36:	4b37      	ldr	r3, [pc, #220]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f38:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000f3c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000f3e:	4b35      	ldr	r3, [pc, #212]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f44:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f4a:	4b32      	ldr	r3, [pc, #200]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f50:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f56:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 2;
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f5e:	2202      	movs	r2, #2
 8000f60:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f62:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f68:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f6e:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f76:	2203      	movs	r2, #3
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f7a:	4b26      	ldr	r3, [pc, #152]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Oversampling.Ratio = 1;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f94:	481f      	ldr	r0, [pc, #124]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000f96:	f001 ff65 	bl	8002e64 <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8000fa0:	f000 fc8a 	bl	80018b8 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4819      	ldr	r0, [pc, #100]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000fb0:	f002 ff12 	bl	8003dd8 <HAL_ADCEx_MultiModeConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 8000fba:	f000 fc7d 	bl	80018b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <MX_ADC1_Init+0x110>)
 8000fc0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fca:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000fce:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000fe2:	f002 f9b9 	bl	8003358 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xe4>
	{
		Error_Handler();
 8000fec:	f000 fc64 	bl	80018b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_ADC1_Init+0x114>)
 8000ff2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_ADC1_Init+0x108>)
 8000ffe:	f002 f9ab 	bl	8003358 <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x100>
	{
		Error_Handler();
 8001008:	f000 fc56 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	@ 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	24000384 	.word	0x24000384
 8001018:	40022000 	.word	0x40022000
 800101c:	0c900008 	.word	0x0c900008
 8001020:	10c00010 	.word	0x10c00010

08001024 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <MX_I2C1_Init+0x74>)
 800102a:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <MX_I2C1_Init+0x78>)
 800102c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00401959;
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <MX_I2C1_Init+0x74>)
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <MX_I2C1_Init+0x7c>)
 8001032:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_I2C1_Init+0x74>)
 800103c:	2201      	movs	r2, #1
 800103e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_I2C1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_I2C1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105e:	480e      	ldr	r0, [pc, #56]	@ (8001098 <MX_I2C1_Init+0x74>)
 8001060:	f006 f940 	bl	80072e4 <HAL_I2C_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800106a:	f000 fc25 	bl	80018b8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106e:	2100      	movs	r1, #0
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <MX_I2C1_Init+0x74>)
 8001072:	f008 fd71 	bl	8009b58 <HAL_I2CEx_ConfigAnalogFilter>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 800107c:	f000 fc1c 	bl	80018b8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_I2C1_Init+0x74>)
 8001084:	f008 fdb3 	bl	8009bee <HAL_I2CEx_ConfigDigitalFilter>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800108e:	f000 fc13 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	24000460 	.word	0x24000460
 800109c:	40005400 	.word	0x40005400
 80010a0:	00401959 	.word	0x00401959

080010a4 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010aa:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <MX_I2C2_Init+0x78>)
 80010ac:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00401959;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <MX_I2C2_Init+0x7c>)
 80010b2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010bc:	2201      	movs	r2, #1
 80010be:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010de:	480e      	ldr	r0, [pc, #56]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010e0:	f006 f900 	bl	80072e4 <HAL_I2C_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80010ea:	f000 fbe5 	bl	80018b8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4809      	ldr	r0, [pc, #36]	@ (8001118 <MX_I2C2_Init+0x74>)
 80010f2:	f008 fd31 	bl	8009b58 <HAL_I2CEx_ConfigAnalogFilter>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80010fc:	f000 fbdc 	bl	80018b8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001100:	2100      	movs	r1, #0
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_I2C2_Init+0x74>)
 8001104:	f008 fd73 	bl	8009bee <HAL_I2CEx_ConfigDigitalFilter>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 800110e:	f000 fbd3 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	240004b4 	.word	0x240004b4
 800111c:	40005800 	.word	0x40005800
 8001120:	00401959 	.word	0x00401959

08001124 <MX_JPEG_Init>:
 * @brief JPEG Initialization Function
 * @param None
 * @retval None
 */
static void MX_JPEG_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	/* USER CODE END JPEG_Init 0 */

	/* USER CODE BEGIN JPEG_Init 1 */

	/* USER CODE END JPEG_Init 1 */
	hjpeg.Instance = JPEG;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_JPEG_Init+0x20>)
 800112a:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <MX_JPEG_Init+0x24>)
 800112c:	601a      	str	r2, [r3, #0]
	if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_JPEG_Init+0x20>)
 8001130:	f008 fdaa 	bl	8009c88 <HAL_JPEG_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_JPEG_Init+0x1a>
	{
		Error_Handler();
 800113a:	f000 fbbd 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN JPEG_Init 2 */

	/* USER CODE END JPEG_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	240005f8 	.word	0x240005f8
 8001148:	52003000 	.word	0x52003000

0800114c <MX_SPI4_Init>:
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8001150:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 8001152:	4a28      	ldr	r2, [pc, #160]	@ (80011f4 <MX_SPI4_Init+0xa8>)
 8001154:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 8001158:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800115c:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800115e:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 8001160:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001164:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001166:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 8001168:	2207      	movs	r2, #7
 800116a:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116c:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001172:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001178:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 800117a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800117e:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 0x0;
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011ac:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	645a      	str	r2, [r3, #68]	@ 0x44
	hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_SPI4_Init+0xa4>)
 80011de:	f00f ff39 	bl	8011054 <HAL_SPI_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_SPI4_Init+0xa0>
	{
		Error_Handler();
 80011e8:	f000 fb66 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	24000728 	.word	0x24000728
 80011f4:	40013400 	.word	0x40013400

080011f8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 80011fe:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <MX_USART1_UART_Init+0x9c>)
 8001200:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 111111;
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 8001204:	4a24      	ldr	r2, [pc, #144]	@ (8001298 <MX_USART1_UART_Init+0xa0>)
 8001206:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001208:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001214:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 800121c:	220c      	movs	r2, #12
 800121e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001226:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 800123a:	2220      	movs	r2, #32
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28
	huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 8001240:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001244:	641a      	str	r2, [r3, #64]	@ 0x40
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 8001248:	f010 feaf 	bl	8011faa <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x5e>
	{
		Error_Handler();
 8001252:	f000 fb31 	bl	80018b8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 800125a:	f012 fdca 	bl	8013df2 <HAL_UARTEx_SetTxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART1_UART_Init+0x70>
	{
		Error_Handler();
 8001264:	f000 fb28 	bl	80018b8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001268:	2100      	movs	r1, #0
 800126a:	4809      	ldr	r0, [pc, #36]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 800126c:	f012 fdff 	bl	8013e6e <HAL_UARTEx_SetRxFifoThreshold>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART1_UART_Init+0x82>
	{
		Error_Handler();
 8001276:	f000 fb1f 	bl	80018b8 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_USART1_UART_Init+0x98>)
 800127c:	f012 fd7e 	bl	8013d7c <HAL_UARTEx_EnableFifoMode>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART1_UART_Init+0x92>
	{
		Error_Handler();
 8001286:	f000 fb17 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	24000828 	.word	0x24000828
 8001294:	40011000 	.word	0x40011000
 8001298:	0001b207 	.word	0x0001b207

0800129c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012a2:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <MX_DMA_Init+0x9c>)
 80012a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012a8:	4a23      	ldr	r2, [pc, #140]	@ (8001338 <MX_DMA_Init+0x9c>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012b2:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <MX_DMA_Init+0x9c>)
 80012b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <MX_DMA_Init+0x9c>)
 80012c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <MX_DMA_Init+0x9c>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_DMA_Init+0x9c>)
 80012d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	200b      	movs	r0, #11
 80012e4:	f002 ff31 	bl	800414a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012e8:	200b      	movs	r0, #11
 80012ea:	f002 ff48 	bl	800417e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	200c      	movs	r0, #12
 80012f4:	f002 ff29 	bl	800414a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012f8:	200c      	movs	r0, #12
 80012fa:	f002 ff40 	bl	800417e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	200d      	movs	r0, #13
 8001304:	f002 ff21 	bl	800414a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001308:	200d      	movs	r0, #13
 800130a:	f002 ff38 	bl	800417e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	200e      	movs	r0, #14
 8001314:	f002 ff19 	bl	800414a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001318:	200e      	movs	r0, #14
 800131a:	f002 ff30 	bl	800417e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2038      	movs	r0, #56	@ 0x38
 8001324:	f002 ff11 	bl	800414a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001328:	2038      	movs	r0, #56	@ 0x38
 800132a:	f002 ff28 	bl	800417e <HAL_NVIC_EnableIRQ>

}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	58024400 	.word	0x58024400

0800133c <MX_MDMA_Init>:

/**
 * Enable MDMA controller clock
 */
static void MX_MDMA_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

	/* MDMA controller clock enable */
	__HAL_RCC_MDMA_CLK_ENABLE();
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <MX_MDMA_Init+0x3c>)
 8001344:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <MX_MDMA_Init+0x3c>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <MX_MDMA_Init+0x3c>)
 8001354:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
	/* Local variables */

	/* MDMA interrupt initialization */
	/* MDMA_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	207a      	movs	r0, #122	@ 0x7a
 8001366:	f002 fef0 	bl	800414a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800136a:	207a      	movs	r0, #122	@ 0x7a
 800136c:	f002 ff07 	bl	800417e <HAL_NVIC_EnableIRQ>

}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400

0800137c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001392:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <MX_GPIO_Init+0x134>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001398:	4a45      	ldr	r2, [pc, #276]	@ (80014b0 <MX_GPIO_Init+0x134>)
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a2:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013b0:	4b3f      	ldr	r3, [pc, #252]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	4a3e      	ldr	r2, [pc, #248]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c0:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d4:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f2:	4a2f      	ldr	r2, [pc, #188]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fc:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <MX_GPIO_Init+0x134>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001410:	4a27      	ldr	r2, [pc, #156]	@ (80014b0 <MX_GPIO_Init+0x134>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141a:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <MX_GPIO_Init+0x134>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	4821      	ldr	r0, [pc, #132]	@ (80014b4 <MX_GPIO_Init+0x138>)
 800142e:	f005 ff3f 	bl	80072b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001438:	481f      	ldr	r0, [pc, #124]	@ (80014b8 <MX_GPIO_Init+0x13c>)
 800143a:	f005 ff39 	bl	80072b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI4_DC_Pin */
	GPIO_InitStruct.Pin = SPI4_DC_Pin;
 800143e:	2320      	movs	r3, #32
 8001440:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4817      	ldr	r0, [pc, #92]	@ (80014b4 <MX_GPIO_Init+0x138>)
 8001456:	f005 fd7b 	bl	8006f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_L_Pin */
	GPIO_InitStruct.Pin = BTN_L_Pin;
 800145a:	2320      	movs	r3, #32
 800145c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4813      	ldr	r0, [pc, #76]	@ (80014bc <MX_GPIO_Init+0x140>)
 800146e:	f005 fd6f 	bl	8006f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_R_Pin */
	GPIO_InitStruct.Pin = BTN_R_Pin;
 8001472:	2320      	movs	r3, #32
 8001474:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <MX_GPIO_Init+0x13c>)
 8001486:	f005 fd63 	bl	8006f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI4_RST_Pin */
	GPIO_InitStruct.Pin = SPI4_RST_Pin;
 800148a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_GPIO_Init+0x13c>)
 80014a4:	f005 fd54 	bl	8006f50 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	@ 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58021000 	.word	0x58021000
 80014b8:	58020800 	.word	0x58020800
 80014bc:	58020000 	.word	0x58020000

080014c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint16_t old_head = uart_rxDMA_readHead;
 80014c8:	4b3a      	ldr	r3, [pc, #232]	@ (80015b4 <HAL_UART_RxCpltCallback+0xf4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	827b      	strh	r3, [r7, #18]

	// Find the delimeter
	uint8_t found_delim = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
	for (uint16_t circular_ptr = 0; circular_ptr < UART_BUFFERSIZE; circular_ptr++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	82bb      	strh	r3, [r7, #20]
 80014d6:	e020      	b.n	800151a <HAL_UART_RxCpltCallback+0x5a>
		uint16_t packet_ptr = (circular_ptr + uart_rxDMA_readHead) % UART_BUFFERSIZE;
 80014d8:	8abb      	ldrh	r3, [r7, #20]
 80014da:	4a36      	ldr	r2, [pc, #216]	@ (80015b4 <HAL_UART_RxCpltCallback+0xf4>)
 80014dc:	7812      	ldrb	r2, [r2, #0]
 80014de:	1899      	adds	r1, r3, r2
 80014e0:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <HAL_UART_RxCpltCallback+0xf8>)
 80014e2:	fb83 2301 	smull	r2, r3, r3, r1
 80014e6:	105a      	asrs	r2, r3, #1
 80014e8:	17cb      	asrs	r3, r1, #31
 80014ea:	1ad2      	subs	r2, r2, r3
 80014ec:	4613      	mov	r3, r2
 80014ee:	015b      	lsls	r3, r3, #5
 80014f0:	4413      	add	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	1aca      	subs	r2, r1, r3
 80014f8:	4613      	mov	r3, r2
 80014fa:	823b      	strh	r3, [r7, #16]
		if (uart_rxDMA_buffer[packet_ptr] == 0b10101010) {
 80014fc:	8a3b      	ldrh	r3, [r7, #16]
 80014fe:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <HAL_UART_RxCpltCallback+0xfc>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	2baa      	cmp	r3, #170	@ 0xaa
 8001504:	d106      	bne.n	8001514 <HAL_UART_RxCpltCallback+0x54>
			found_delim = 1;					// Update flag
 8001506:	2301      	movs	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
			uart_rxDMA_readHead = packet_ptr;	// Move the readHead
 800150a:	8a3b      	ldrh	r3, [r7, #16]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <HAL_UART_RxCpltCallback+0xf4>)
 8001510:	701a      	strb	r2, [r3, #0]
			break;
 8001512:	e005      	b.n	8001520 <HAL_UART_RxCpltCallback+0x60>
	for (uint16_t circular_ptr = 0; circular_ptr < UART_BUFFERSIZE; circular_ptr++) {
 8001514:	8abb      	ldrh	r3, [r7, #20]
 8001516:	3301      	adds	r3, #1
 8001518:	82bb      	strh	r3, [r7, #20]
 800151a:	8abb      	ldrh	r3, [r7, #20]
 800151c:	2b42      	cmp	r3, #66	@ 0x42
 800151e:	d9db      	bls.n	80014d8 <HAL_UART_RxCpltCallback+0x18>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) {
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <HAL_UART_RxCpltCallback+0x6e>
		uart_rx_packetState = 1;	// Flag as malformed
 8001526:	4b26      	ldr	r3, [pc, #152]	@ (80015c0 <HAL_UART_RxCpltCallback+0x100>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
		return;
 800152c:	e03e      	b.n	80015ac <HAL_UART_RxCpltCallback+0xec>
	}

	// Copy the partial packet contents into the completed packet buffer
	memcpy(uart_rx_packetFullBuffer, uart_rx_packetPartBuffer, UART_BUFFERSIZE);
 800152e:	4a25      	ldr	r2, [pc, #148]	@ (80015c4 <HAL_UART_RxCpltCallback+0x104>)
 8001530:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <HAL_UART_RxCpltCallback+0x108>)
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	2343      	movs	r3, #67	@ 0x43
 8001538:	461a      	mov	r2, r3
 800153a:	f016 fe29 	bl	8018190 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(uart_rx_packetPartBuffer, uart_rxDMA_buffer + uart_rxDMA_readHead, UART_BUFFERSIZE - uart_rxDMA_readHead);
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_UART_RxCpltCallback+0xf4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <HAL_UART_RxCpltCallback+0xfc>)
 8001546:	4413      	add	r3, r2
 8001548:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <HAL_UART_RxCpltCallback+0xf4>)
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	f1c2 0243 	rsb	r2, r2, #67	@ 0x43
 8001550:	4619      	mov	r1, r3
 8001552:	481d      	ldr	r0, [pc, #116]	@ (80015c8 <HAL_UART_RxCpltCallback+0x108>)
 8001554:	f016 fe1c 	bl	8018190 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	if (old_head < uart_rxDMA_readHead) {
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_UART_RxCpltCallback+0xf4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	8a7b      	ldrh	r3, [r7, #18]
 8001560:	4293      	cmp	r3, r2
 8001562:	d203      	bcs.n	800156c <HAL_UART_RxCpltCallback+0xac>
		uart_rx_packetState = 1;	// Flag as malformed
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_UART_RxCpltCallback+0x100>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
		return;
 800156a:	e01f      	b.n	80015ac <HAL_UART_RxCpltCallback+0xec>
	}

	uint16_t head_slip = old_head - uart_rxDMA_readHead;	// How many bytes were dropped
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_UART_RxCpltCallback+0xf4>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	8a7b      	ldrh	r3, [r7, #18]
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	81fb      	strh	r3, [r7, #14]
	memset(uart_rx_packetFullBuffer + (UART_BUFFERSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8001578:	8a7b      	ldrh	r3, [r7, #18]
 800157a:	f1c3 0343 	rsb	r3, r3, #67	@ 0x43
 800157e:	461a      	mov	r2, r3
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <HAL_UART_RxCpltCallback+0x104>)
 8001582:	4413      	add	r3, r2
 8001584:	89fa      	ldrh	r2, [r7, #14]
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f016 fdcd 	bl	8018128 <memset>
	memcpy(uart_rx_packetFullBuffer + (UART_BUFFERSIZE - old_head) + head_slip, uart_rxDMA_buffer, uart_rxDMA_readHead); // Fill in missing bytes
 800158e:	89fa      	ldrh	r2, [r7, #14]
 8001590:	8a7b      	ldrh	r3, [r7, #18]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	3343      	adds	r3, #67	@ 0x43
 8001596:	4a0b      	ldr	r2, [pc, #44]	@ (80015c4 <HAL_UART_RxCpltCallback+0x104>)
 8001598:	4413      	add	r3, r2
 800159a:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <HAL_UART_RxCpltCallback+0xf4>)
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	4907      	ldr	r1, [pc, #28]	@ (80015bc <HAL_UART_RxCpltCallback+0xfc>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f016 fdf5 	bl	8018190 <memcpy>
	// What this looks like in memory:
	// B0 B1 B2 B3 B4 XX XX B7
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// Packet is ready
	uart_rx_packetState = 0;
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_UART_RxCpltCallback+0x100>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	24026aaf 	.word	0x24026aaf
 80015b8:	07a44c6b 	.word	0x07a44c6b
 80015bc:	24026a6c 	.word	0x24026a6c
 80015c0:	24026b37 	.word	0x24026b37
 80015c4:	24026af4 	.word	0x24026af4
 80015c8:	24026ab0 	.word	0x24026ab0

080015cc <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT %d", hjpeg->OutDataLength);
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	701a      	strb	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	240313fe 	.word	0x240313fe

080015ec <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 80015f4:	4909      	ldr	r1, [pc, #36]	@ (800161c <HAL_JPEG_ErrorCallback+0x30>)
 80015f6:	480a      	ldr	r0, [pc, #40]	@ (8001620 <HAL_JPEG_ErrorCallback+0x34>)
 80015f8:	f016 fd74 	bl	80180e4 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 80015fc:	4808      	ldr	r0, [pc, #32]	@ (8001620 <HAL_JPEG_ErrorCallback+0x34>)
 80015fe:	f7fe fe6f 	bl	80002e0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_JPEG_ErrorCallback+0x34>)
 800160a:	f000 f903 	bl	8001814 <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 2;
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_JPEG_ErrorCallback+0x38>)
 8001610:	2202      	movs	r2, #2
 8001612:	701a      	strb	r2, [r3, #0]
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08018ab0 	.word	0x08018ab0
 8001620:	2400115c 	.word	0x2400115c
 8001624:	240313fe 	.word	0x240313fe

08001628 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
//	sprintf(ssd_msg, " JPEG D %d", OutDataLength);
//	WriteDebug(ssd_msg, strlen(ssd_msg));
	//HAL_JPEG_Abort(hjpeg);
	jpeg_state = 2;
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <HAL_JPEG_DataReadyCallback+0x20>)
 8001636:	2202      	movs	r2, #2
 8001638:	701a      	strb	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	240313fe 	.word	0x240313fe

0800164c <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 8001654:	4803      	ldr	r0, [pc, #12]	@ (8001664 <HAL_SPI_TxCpltCallback+0x18>)
 8001656:	f001 f91c 	bl	8002892 <ST7789_DMATransmitCplt>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24001224 	.word	0x24001224

08001668 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	//adc_average[0] = 0;
	//adc_average[1] = 0;
	uint16_t adc_newavg[2] = {0, 0};
 8001670:	2300      	movs	r3, #0
 8001672:	81bb      	strh	r3, [r7, #12]
 8001674:	2300      	movs	r3, #0
 8001676:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e01f      	b.n	80016be <HAL_ADC_ConvCpltCallback+0x56>
		// Accumulate the samples
		// Have to pre-divide so the result fits in a uint16
		adc_newavg[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	bfb8      	it	lt
 8001688:	425b      	neglt	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	0053      	lsls	r3, r2, #1
 800168e:	3318      	adds	r3, #24
 8001690:	443b      	add	r3, r7
 8001692:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8001696:	4858      	ldr	r0, [pc, #352]	@ (80017f8 <HAL_ADC_ConvCpltCallback+0x190>)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800169e:	4857      	ldr	r0, [pc, #348]	@ (80017fc <HAL_ADC_ConvCpltCallback+0x194>)
 80016a0:	fba0 0303 	umull	r0, r3, r0, r3
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	440b      	add	r3, r1
 80016aa:	b299      	uxth	r1, r3
 80016ac:	0053      	lsls	r3, r2, #1
 80016ae:	3318      	adds	r3, #24
 80016b0:	443b      	add	r3, r7
 80016b2:	460a      	mov	r2, r1
 80016b4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (int i = 0; i < 20; i++) {
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b13      	cmp	r3, #19
 80016c2:	dddc      	ble.n	800167e <HAL_ADC_ConvCpltCallback+0x16>
	}

	for (int i = 0; i < 2; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	e081      	b.n	80017ce <HAL_ADC_ConvCpltCallback+0x166>
		// Interpolate for smoother control
		adc_average[i] *= 0.4;
 80016ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001800 <HAL_ADC_ConvCpltCallback+0x198>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016da:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 80017e8 <HAL_ADC_ConvCpltCallback+0x180>
 80016de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	b299      	uxth	r1, r3
 80016ec:	4a44      	ldr	r2, [pc, #272]	@ (8001800 <HAL_ADC_ConvCpltCallback+0x198>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_average[i] += adc_newavg[i]*0.6;
 80016f4:	4a42      	ldr	r2, [pc, #264]	@ (8001800 <HAL_ADC_ConvCpltCallback+0x198>)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	3318      	adds	r3, #24
 800170a:	443b      	add	r3, r7
 800170c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001718:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 80017f0 <HAL_ADC_ConvCpltCallback+0x188>
 800171c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001720:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001724:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001728:	ee17 3a90 	vmov	r3, s15
 800172c:	b299      	uxth	r1, r3
 800172e:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <HAL_ADC_ConvCpltCallback+0x198>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 8001736:	4a32      	ldr	r2, [pc, #200]	@ (8001800 <HAL_ADC_ConvCpltCallback+0x198>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173e:	b21b      	sxth	r3, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	b29b      	uxth	r3, r3
 8001744:	0bdb      	lsrs	r3, r3, #15
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4619      	mov	r1, r3
 800174a:	4a2e      	ldr	r2, [pc, #184]	@ (8001804 <HAL_ADC_ConvCpltCallback+0x19c>)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	460a      	mov	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 8001754:	4a2a      	ldr	r2, [pc, #168]	@ (8001800 <HAL_ADC_ConvCpltCallback+0x198>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175c:	09db      	lsrs	r3, r3, #7
 800175e:	b29b      	uxth	r3, r3
 8001760:	b2d9      	uxtb	r1, r3
 8001762:	4a29      	ldr	r2, [pc, #164]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4413      	add	r3, r2
 8001768:	460a      	mov	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 800176c:	4a25      	ldr	r2, [pc, #148]	@ (8001804 <HAL_ADC_ConvCpltCallback+0x19c>)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00a      	beq.n	800178e <HAL_ADC_ConvCpltCallback+0x126>
 8001778:	4a23      	ldr	r2, [pc, #140]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	43db      	mvns	r3, r3
 8001782:	b2d9      	uxtb	r1, r3
 8001784:	4a20      	ldr	r2, [pc, #128]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4413      	add	r3, r2
 800178a:	460a      	mov	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 800178e:	4a1e      	ldr	r2, [pc, #120]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4413      	add	r3, r2
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d204      	bcs.n	80017a8 <HAL_ADC_ConvCpltCallback+0x140>
			slider_magnitude[i] = 0;
 800179e:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4413      	add	r3, r2
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 80017a8:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80017ba:	429a      	cmp	r2, r3
 80017bc:	dd04      	ble.n	80017c8 <HAL_ADC_ConvCpltCallback+0x160>
			slider_magnitude[i] = 0xFF;
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4413      	add	r3, r2
 80017c4:	22ff      	movs	r2, #255	@ 0xff
 80017c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	3301      	adds	r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	f77f af7a 	ble.w	80016ca <HAL_ADC_ConvCpltCallback+0x62>

	}
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	f3af 8000 	nop.w
 80017e8:	9999999a 	.word	0x9999999a
 80017ec:	3fd99999 	.word	0x3fd99999
 80017f0:	33333333 	.word	0x33333333
 80017f4:	3fe33333 	.word	0x3fe33333
 80017f8:	24026a38 	.word	0x24026a38
 80017fc:	cccccccd 	.word	0xcccccccd
 8001800:	24026a60 	.word	0x24026a60
 8001804:	24026a68 	.word	0x24026a68
 8001808:	24026a64 	.word	0x24026a64
 800180c:	24000000 	.word	0x24000000
 8001810:	24000001 	.word	0x24000001

08001814 <WriteDebug>:
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
	}
}

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 8001820:	480d      	ldr	r0, [pc, #52]	@ (8001858 <WriteDebug+0x44>)
 8001822:	f000 fe43 	bl	80024ac <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8001826:	480d      	ldr	r0, [pc, #52]	@ (800185c <WriteDebug+0x48>)
 8001828:	f000 fe40 	bl	80024ac <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	461a      	mov	r2, r3
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4809      	ldr	r0, [pc, #36]	@ (8001858 <WriteDebug+0x44>)
 8001834:	f000 feb8 	bl	80025a8 <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	461a      	mov	r2, r3
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4807      	ldr	r0, [pc, #28]	@ (800185c <WriteDebug+0x48>)
 8001840:	f000 feb2 	bl	80025a8 <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 8001844:	4804      	ldr	r0, [pc, #16]	@ (8001858 <WriteDebug+0x44>)
 8001846:	f000 fe45 	bl	80024d4 <SSD1306_Update>
	SSD1306_Update(&hssd2);
 800184a:	4804      	ldr	r0, [pc, #16]	@ (800185c <WriteDebug+0x48>)
 800184c:	f000 fe42 	bl	80024d4 <SSD1306_Update>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	24000934 	.word	0x24000934
 800185c:	24000948 	.word	0x24000948

08001860 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001872:	f002 fc9f 	bl	80041b4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800187a:	2300      	movs	r3, #0
 800187c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001882:	231f      	movs	r3, #31
 8001884:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8001886:	2387      	movs	r3, #135	@ 0x87
 8001888:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800188a:	2300      	movs	r3, #0
 800188c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800188e:	2300      	movs	r3, #0
 8001890:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001896:	2301      	movs	r3, #1
 8001898:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018a2:	463b      	mov	r3, r7
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 fcbd 	bl	8004224 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018aa:	2004      	movs	r0, #4
 80018ac:	f002 fc9a 	bl	80041e4 <HAL_MPU_Enable>

}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
}
 80018be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <Error_Handler+0x8>

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_MspInit+0x30>)
 80018cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018d0:	4a08      	ldr	r2, [pc, #32]	@ (80018f4 <HAL_MspInit+0x30>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_MspInit+0x30>)
 80018dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	58024400 	.word	0x58024400

080018f8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3e      	ldr	r2, [pc, #248]	@ (8001a10 <HAL_ADC_MspInit+0x118>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d175      	bne.n	8001a06 <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800191a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 800191c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001920:	4a3c      	ldr	r2, [pc, #240]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 8001922:	f043 0320 	orr.w	r3, r3, #32
 8001926:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800192a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 800192c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193e:	4a35      	ldr	r2, [pc, #212]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001948:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001966:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <HAL_ADC_MspInit+0x11c>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8001974:	2340      	movs	r3, #64	@ 0x40
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001978:	2303      	movs	r3, #3
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4824      	ldr	r0, [pc, #144]	@ (8001a18 <HAL_ADC_MspInit+0x120>)
 8001988:	f005 fae2 	bl	8006f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 800198c:	2310      	movs	r3, #16
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001990:	2303      	movs	r3, #3
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	481f      	ldr	r0, [pc, #124]	@ (8001a1c <HAL_ADC_MspInit+0x124>)
 80019a0:	f005 fad6 	bl	8006f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <HAL_ADC_MspInit+0x12c>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019ac:	2209      	movs	r2, #9
 80019ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019bc:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c4:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80019dc:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ea:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019ec:	f002 fc5a 	bl	80042a4 <HAL_DMA_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80019f6:	f7ff ff5f 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 80019fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a00:	4a07      	ldr	r2, [pc, #28]	@ (8001a20 <HAL_ADC_MspInit+0x128>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	@ 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40022000 	.word	0x40022000
 8001a14:	58024400 	.word	0x58024400
 8001a18:	58020000 	.word	0x58020000
 8001a1c:	58020800 	.word	0x58020800
 8001a20:	240003e8 	.word	0x240003e8
 8001a24:	40020058 	.word	0x40020058

08001a28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	@ 0x30
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a73      	ldr	r2, [pc, #460]	@ (8001c14 <HAL_I2C_MspInit+0x1ec>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d16d      	bne.n	8001b26 <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	4b73      	ldr	r3, [pc, #460]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a50:	4a71      	ldr	r2, [pc, #452]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a68:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6e:	2312      	movs	r3, #18
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4865      	ldr	r0, [pc, #404]	@ (8001c1c <HAL_I2C_MspInit+0x1f4>)
 8001a86:	f005 fa63 	bl	8006f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a8a:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a90:	4a61      	ldr	r2, [pc, #388]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001a92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8001c24 <HAL_I2C_MspInit+0x1fc>)
 8001aac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001aae:	4b5c      	ldr	r3, [pc, #368]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001ab0:	2222      	movs	r2, #34	@ 0x22
 8001ab2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001ab6:	2240      	movs	r2, #64	@ 0x40
 8001ab8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aba:	4b59      	ldr	r3, [pc, #356]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac0:	4b57      	ldr	r3, [pc, #348]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ac6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac8:	4b55      	ldr	r3, [pc, #340]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ace:	4b54      	ldr	r3, [pc, #336]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001ad4:	4b52      	ldr	r3, [pc, #328]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ada:	4b51      	ldr	r3, [pc, #324]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001adc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ae0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001ae8:	484d      	ldr	r0, [pc, #308]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001aea:	f002 fbdb 	bl	80042a4 <HAL_DMA_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001af4:	f7ff fee0 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a49      	ldr	r2, [pc, #292]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001afc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001afe:	4a48      	ldr	r2, [pc, #288]	@ (8001c20 <HAL_I2C_MspInit+0x1f8>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	201f      	movs	r0, #31
 8001b0a:	f002 fb1e 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b0e:	201f      	movs	r0, #31
 8001b10:	f002 fb35 	bl	800417e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2020      	movs	r0, #32
 8001b1a:	f002 fb16 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b1e:	2020      	movs	r0, #32
 8001b20:	f002 fb2d 	bl	800417e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b24:	e071      	b.n	8001c0a <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c28 <HAL_I2C_MspInit+0x200>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d16c      	bne.n	8001c0a <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	4a38      	ldr	r2, [pc, #224]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b40:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b54:	2312      	movs	r3, #18
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b60:	2304      	movs	r3, #4
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	482c      	ldr	r0, [pc, #176]	@ (8001c1c <HAL_I2C_MspInit+0x1f4>)
 8001b6c:	f005 f9f0 	bl	8006f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b70:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b76:	4a28      	ldr	r2, [pc, #160]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_I2C_MspInit+0x1f0>)
 8001b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001b90:	4a27      	ldr	r2, [pc, #156]	@ (8001c30 <HAL_I2C_MspInit+0x208>)
 8001b92:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001b96:	2224      	movs	r2, #36	@ 0x24
 8001b98:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001b9c:	2240      	movs	r2, #64	@ 0x40
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001ba8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bac:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001bc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bc6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001bce:	4817      	ldr	r0, [pc, #92]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001bd0:	f002 fb68 	bl	80042a4 <HAL_DMA_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8001bda:	f7ff fe6d 	bl	80018b8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001be2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001be4:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <HAL_I2C_MspInit+0x204>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	2021      	movs	r0, #33	@ 0x21
 8001bf0:	f002 faab 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001bf4:	2021      	movs	r0, #33	@ 0x21
 8001bf6:	f002 fac2 	bl	800417e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2022      	movs	r0, #34	@ 0x22
 8001c00:	f002 faa3 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001c04:	2022      	movs	r0, #34	@ 0x22
 8001c06:	f002 faba 	bl	800417e <HAL_NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3730      	adds	r7, #48	@ 0x30
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40005400 	.word	0x40005400
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58020400 	.word	0x58020400
 8001c20:	24000508 	.word	0x24000508
 8001c24:	40020040 	.word	0x40020040
 8001c28:	40005800 	.word	0x40005800
 8001c2c:	24000580 	.word	0x24000580
 8001c30:	40020028 	.word	0x40020028

08001c34 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a55      	ldr	r2, [pc, #340]	@ (8001d98 <HAL_JPEG_MspInit+0x164>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	f040 80a3 	bne.w	8001d8e <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001c48:	4b54      	ldr	r3, [pc, #336]	@ (8001d9c <HAL_JPEG_MspInit+0x168>)
 8001c4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c4e:	4a53      	ldr	r2, [pc, #332]	@ (8001d9c <HAL_JPEG_MspInit+0x168>)
 8001c50:	f043 0320 	orr.w	r3, r3, #32
 8001c54:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001c58:	4b50      	ldr	r3, [pc, #320]	@ (8001d9c <HAL_JPEG_MspInit+0x168>)
 8001c5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001c66:	4b4e      	ldr	r3, [pc, #312]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c68:	4a4e      	ldr	r2, [pc, #312]	@ (8001da4 <HAL_JPEG_MspInit+0x170>)
 8001c6a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c6e:	2211      	movs	r2, #17
 8001c70:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001c72:	4b4b      	ldr	r3, [pc, #300]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001c78:	4b49      	ldr	r3, [pc, #292]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c7a:	2240      	movs	r2, #64	@ 0x40
 8001c7c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001c7e:	4b48      	ldr	r3, [pc, #288]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001c84:	4b46      	ldr	r3, [pc, #280]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c86:	2202      	movs	r2, #2
 8001c88:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001c8a:	4b45      	ldr	r3, [pc, #276]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001c90:	4b43      	ldr	r3, [pc, #268]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001c96:	4b42      	ldr	r3, [pc, #264]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c98:	2280      	movs	r2, #128	@ 0x80
 8001c9a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001c9c:	4b40      	ldr	r3, [pc, #256]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001c9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001caa:	4b3d      	ldr	r3, [pc, #244]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001cbc:	4b38      	ldr	r3, [pc, #224]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001cc2:	4837      	ldr	r0, [pc, #220]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001cc4:	f009 fe56 	bl	800b974 <HAL_MDMA_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001cce:	f7ff fdf3 	bl	80018b8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4832      	ldr	r0, [pc, #200]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001cd8:	f009 fe98 	bl	800ba0c <HAL_MDMA_ConfigPostRequestMask>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001ce2:	f7ff fde9 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a2d      	ldr	r2, [pc, #180]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001cea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cec:	4a2c      	ldr	r2, [pc, #176]	@ (8001da0 <HAL_JPEG_MspInit+0x16c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001dac <HAL_JPEG_MspInit+0x178>)
 8001cf6:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001cfa:	2214      	movs	r2, #20
 8001cfc:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001d04:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d06:	2240      	movs	r2, #64	@ 0x40
 8001d08:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001d0a:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001d10:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001d16:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d18:	2208      	movs	r2, #8
 8001d1a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001d1c:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d1e:	2220      	movs	r2, #32
 8001d20:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001d22:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001d28:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d32:	2204      	movs	r2, #4
 8001d34:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001d48:	4b17      	ldr	r3, [pc, #92]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001d4e:	4816      	ldr	r0, [pc, #88]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d50:	f009 fe10 	bl	800b974 <HAL_MDMA_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001d5a:	f7ff fdad 	bl	80018b8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	4811      	ldr	r0, [pc, #68]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d64:	f009 fe52 	bl	800ba0c <HAL_MDMA_ConfigPostRequestMask>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001d6e:	f7ff fda3 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d78:	4a0b      	ldr	r2, [pc, #44]	@ (8001da8 <HAL_JPEG_MspInit+0x174>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2079      	movs	r0, #121	@ 0x79
 8001d84:	f002 f9e1 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001d88:	2079      	movs	r0, #121	@ 0x79
 8001d8a:	f002 f9f8 	bl	800417e <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	52003000 	.word	0x52003000
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	24000650 	.word	0x24000650
 8001da4:	52000040 	.word	0x52000040
 8001da8:	240006bc 	.word	0x240006bc
 8001dac:	52000080 	.word	0x52000080

08001db0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec4 <HAL_SPI_MspInit+0x114>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d173      	bne.n	8001eba <HAL_SPI_MspInit+0x10a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_SPI_MspInit+0x118>)
 8001dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec8 <HAL_SPI_MspInit+0x118>)
 8001dda:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001de2:	4b39      	ldr	r3, [pc, #228]	@ (8001ec8 <HAL_SPI_MspInit+0x118>)
 8001de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df0:	4b35      	ldr	r3, [pc, #212]	@ (8001ec8 <HAL_SPI_MspInit+0x118>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df6:	4a34      	ldr	r2, [pc, #208]	@ (8001ec8 <HAL_SPI_MspInit+0x118>)
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e00:	4b31      	ldr	r3, [pc, #196]	@ (8001ec8 <HAL_SPI_MspInit+0x118>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001e0e:	2344      	movs	r3, #68	@ 0x44
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4828      	ldr	r0, [pc, #160]	@ (8001ecc <HAL_SPI_MspInit+0x11c>)
 8001e2a:	f005 f891 	bl	8006f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e2e:	2310      	movs	r3, #16
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4820      	ldr	r0, [pc, #128]	@ (8001ecc <HAL_SPI_MspInit+0x11c>)
 8001e4a:	f005 f881 	bl	8006f50 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e50:	4a20      	ldr	r2, [pc, #128]	@ (8001ed4 <HAL_SPI_MspInit+0x124>)
 8001e52:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001e54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e56:	2254      	movs	r2, #84	@ 0x54
 8001e58:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e5c:	2240      	movs	r2, #64	@ 0x40
 8001e5e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e74:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e82:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e86:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001e8e:	4810      	ldr	r0, [pc, #64]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001e90:	f002 fa08 	bl	80042a4 <HAL_DMA_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8001e9a:	f7ff fd0d 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001ea2:	679a      	str	r2, [r3, #120]	@ 0x78
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <HAL_SPI_MspInit+0x120>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2054      	movs	r0, #84	@ 0x54
 8001eb0:	f002 f94b 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001eb4:	2054      	movs	r0, #84	@ 0x54
 8001eb6:	f002 f962 	bl	800417e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40013400 	.word	0x40013400
 8001ec8:	58024400 	.word	0x58024400
 8001ecc:	58021000 	.word	0x58021000
 8001ed0:	240007b0 	.word	0x240007b0
 8001ed4:	40020010 	.word	0x40020010

08001ed8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0ba      	sub	sp, #232	@ 0xe8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	22c0      	movs	r2, #192	@ 0xc0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f016 f915 	bl	8018128 <memset>
  if(huart->Instance==USART1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a43      	ldr	r2, [pc, #268]	@ (8002010 <HAL_UART_MspInit+0x138>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d17e      	bne.n	8002006 <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f08:	f04f 0201 	mov.w	r2, #1
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f00c fb9a 	bl	800e658 <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f2a:	f7ff fcc5 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f2e:	4b39      	ldr	r3, [pc, #228]	@ (8002014 <HAL_UART_MspInit+0x13c>)
 8001f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f34:	4a37      	ldr	r2, [pc, #220]	@ (8002014 <HAL_UART_MspInit+0x13c>)
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f3e:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <HAL_UART_MspInit+0x13c>)
 8001f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4c:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <HAL_UART_MspInit+0x13c>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f52:	4a30      	ldr	r2, [pc, #192]	@ (8002014 <HAL_UART_MspInit+0x13c>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_UART_MspInit+0x13c>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f6a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001f84:	2304      	movs	r3, #4
 8001f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4821      	ldr	r0, [pc, #132]	@ (8002018 <HAL_UART_MspInit+0x140>)
 8001f92:	f004 ffdd 	bl	8006f50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8001f96:	4b21      	ldr	r3, [pc, #132]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <HAL_UART_MspInit+0x148>)
 8001f9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001f9e:	2229      	movs	r2, #41	@ 0x29
 8001fa0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fae:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fca:	4b14      	ldr	r3, [pc, #80]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fcc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001fd0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fd8:	4810      	ldr	r0, [pc, #64]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fda:	f002 f963 	bl	80042a4 <HAL_DMA_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001fe4:	f7ff fc68 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0c      	ldr	r2, [pc, #48]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001fec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <HAL_UART_MspInit+0x144>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2025      	movs	r0, #37	@ 0x25
 8001ffc:	f002 f8a5 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002000:	2025      	movs	r0, #37	@ 0x25
 8002002:	f002 f8bc 	bl	800417e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002006:	bf00      	nop
 8002008:	37e8      	adds	r7, #232	@ 0xe8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40011000 	.word	0x40011000
 8002014:	58024400 	.word	0x58024400
 8002018:	58020400 	.word	0x58020400
 800201c:	240008bc 	.word	0x240008bc
 8002020:	40020410 	.word	0x40020410

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <NMI_Handler+0x4>

0800202c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <MemManage_Handler+0x4>

0800203c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <UsageFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207a:	f000 fc89 	bl	8002990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <DMA1_Stream0_IRQHandler+0x10>)
 800208a:	f003 fc35 	bl	80058f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	240007b0 	.word	0x240007b0

08002098 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <DMA1_Stream1_IRQHandler+0x10>)
 800209e:	f003 fc2b 	bl	80058f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	24000580 	.word	0x24000580

080020ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <DMA1_Stream2_IRQHandler+0x10>)
 80020b2:	f003 fc21 	bl	80058f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	24000508 	.word	0x24000508

080020c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <DMA1_Stream3_IRQHandler+0x10>)
 80020c6:	f003 fc17 	bl	80058f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	240003e8 	.word	0x240003e8

080020d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <I2C1_EV_IRQHandler+0x10>)
 80020da:	f005 fbcb 	bl	8007874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	24000460 	.word	0x24000460

080020e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <I2C1_ER_IRQHandler+0x10>)
 80020ee:	f005 fbdb 	bl	80078a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	24000460 	.word	0x24000460

080020fc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <I2C2_EV_IRQHandler+0x10>)
 8002102:	f005 fbb7 	bl	8007874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	240004b4 	.word	0x240004b4

08002110 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <I2C2_ER_IRQHandler+0x10>)
 8002116:	f005 fbc7 	bl	80078a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	240004b4 	.word	0x240004b4

08002124 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <USART1_IRQHandler+0x10>)
 800212a:	f010 f869 	bl	8012200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	24000828 	.word	0x24000828

08002138 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <DMA2_Stream0_IRQHandler+0x10>)
 800213e:	f003 fbdb 	bl	80058f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	240008bc 	.word	0x240008bc

0800214c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002150:	4802      	ldr	r0, [pc, #8]	@ (800215c <SPI4_IRQHandler+0x10>)
 8002152:	f00f fbd3 	bl	80118fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	24000728 	.word	0x24000728

08002160 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <OTG_FS_IRQHandler+0x10>)
 8002166:	f00a f8e8 	bl	800c33a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	240328f0 	.word	0x240328f0

08002174 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <JPEG_IRQHandler+0x10>)
 800217a:	f007 ff77 	bl	800a06c <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	240005f8 	.word	0x240005f8

08002188 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800218c:	4803      	ldr	r0, [pc, #12]	@ (800219c <MDMA_IRQHandler+0x14>)
 800218e:	f009 fd37 	bl	800bc00 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002192:	4803      	ldr	r0, [pc, #12]	@ (80021a0 <MDMA_IRQHandler+0x18>)
 8002194:	f009 fd34 	bl	800bc00 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	24000650 	.word	0x24000650
 80021a0:	240006bc 	.word	0x240006bc

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f015 ffb0 	bl	8018138 <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	24080000 	.word	0x24080000
 8002204:	00000400 	.word	0x00000400
 8002208:	24031404 	.word	0x24031404
 800220c:	24033140 	.word	0x24033140

08002210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002214:	4b43      	ldr	r3, [pc, #268]	@ (8002324 <SystemInit+0x114>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	4a42      	ldr	r2, [pc, #264]	@ (8002324 <SystemInit+0x114>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002224:	4b40      	ldr	r3, [pc, #256]	@ (8002328 <SystemInit+0x118>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	2b06      	cmp	r3, #6
 800222e:	d807      	bhi.n	8002240 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002230:	4b3d      	ldr	r3, [pc, #244]	@ (8002328 <SystemInit+0x118>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 030f 	bic.w	r3, r3, #15
 8002238:	4a3b      	ldr	r2, [pc, #236]	@ (8002328 <SystemInit+0x118>)
 800223a:	f043 0307 	orr.w	r3, r3, #7
 800223e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <SystemInit+0x11c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a39      	ldr	r2, [pc, #228]	@ (800232c <SystemInit+0x11c>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800224c:	4b37      	ldr	r3, [pc, #220]	@ (800232c <SystemInit+0x11c>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002252:	4b36      	ldr	r3, [pc, #216]	@ (800232c <SystemInit+0x11c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4935      	ldr	r1, [pc, #212]	@ (800232c <SystemInit+0x11c>)
 8002258:	4b35      	ldr	r3, [pc, #212]	@ (8002330 <SystemInit+0x120>)
 800225a:	4013      	ands	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800225e:	4b32      	ldr	r3, [pc, #200]	@ (8002328 <SystemInit+0x118>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800226a:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <SystemInit+0x118>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 030f 	bic.w	r3, r3, #15
 8002272:	4a2d      	ldr	r2, [pc, #180]	@ (8002328 <SystemInit+0x118>)
 8002274:	f043 0307 	orr.w	r3, r3, #7
 8002278:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800227a:	4b2c      	ldr	r3, [pc, #176]	@ (800232c <SystemInit+0x11c>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002280:	4b2a      	ldr	r3, [pc, #168]	@ (800232c <SystemInit+0x11c>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002286:	4b29      	ldr	r3, [pc, #164]	@ (800232c <SystemInit+0x11c>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800228c:	4b27      	ldr	r3, [pc, #156]	@ (800232c <SystemInit+0x11c>)
 800228e:	4a29      	ldr	r2, [pc, #164]	@ (8002334 <SystemInit+0x124>)
 8002290:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002292:	4b26      	ldr	r3, [pc, #152]	@ (800232c <SystemInit+0x11c>)
 8002294:	4a28      	ldr	r2, [pc, #160]	@ (8002338 <SystemInit+0x128>)
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002298:	4b24      	ldr	r3, [pc, #144]	@ (800232c <SystemInit+0x11c>)
 800229a:	4a28      	ldr	r2, [pc, #160]	@ (800233c <SystemInit+0x12c>)
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <SystemInit+0x11c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022a4:	4b21      	ldr	r3, [pc, #132]	@ (800232c <SystemInit+0x11c>)
 80022a6:	4a25      	ldr	r2, [pc, #148]	@ (800233c <SystemInit+0x12c>)
 80022a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <SystemInit+0x11c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022b0:	4b1e      	ldr	r3, [pc, #120]	@ (800232c <SystemInit+0x11c>)
 80022b2:	4a22      	ldr	r2, [pc, #136]	@ (800233c <SystemInit+0x12c>)
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <SystemInit+0x11c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <SystemInit+0x11c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1a      	ldr	r2, [pc, #104]	@ (800232c <SystemInit+0x11c>)
 80022c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022c8:	4b18      	ldr	r3, [pc, #96]	@ (800232c <SystemInit+0x11c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <SystemInit+0x130>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <SystemInit+0x134>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022da:	d202      	bcs.n	80022e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <SystemInit+0x138>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80022e2:	4b12      	ldr	r3, [pc, #72]	@ (800232c <SystemInit+0x11c>)
 80022e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d113      	bne.n	8002318 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <SystemInit+0x11c>)
 80022f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022f6:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <SystemInit+0x11c>)
 80022f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <SystemInit+0x13c>)
 8002302:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002306:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <SystemInit+0x11c>)
 800230a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800230e:	4a07      	ldr	r2, [pc, #28]	@ (800232c <SystemInit+0x11c>)
 8002310:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002314:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00
 8002328:	52002000 	.word	0x52002000
 800232c:	58024400 	.word	0x58024400
 8002330:	eaf6ed7f 	.word	0xeaf6ed7f
 8002334:	02020200 	.word	0x02020200
 8002338:	01ff0000 	.word	0x01ff0000
 800233c:	01010280 	.word	0x01010280
 8002340:	5c001000 	.word	0x5c001000
 8002344:	ffff0000 	.word	0xffff0000
 8002348:	51008108 	.word	0x51008108
 800234c:	52004000 	.word	0x52004000

08002350 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <ExitRun0Mode+0x2c>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a08      	ldr	r2, [pc, #32]	@ (800237c <ExitRun0Mode+0x2c>)
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002360:	bf00      	nop
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <ExitRun0Mode+0x2c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f9      	beq.n	8002362 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	58024800 	.word	0x58024800

08002380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002380:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80023bc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002384:	f7ff ffe4 	bl	8002350 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002388:	f7ff ff42 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800238c:	480c      	ldr	r0, [pc, #48]	@ (80023c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800238e:	490d      	ldr	r1, [pc, #52]	@ (80023c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023a4:	4c0a      	ldr	r4, [pc, #40]	@ (80023d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b2:	f015 fec7 	bl	8018144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b6:	f7fe f981 	bl	80006bc <main>
  bx  lr
 80023ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023c4:	24000368 	.word	0x24000368
  ldr r2, =_sidata
 80023c8:	080190a8 	.word	0x080190a8
  ldr r2, =_sbss
 80023cc:	24000368 	.word	0x24000368
  ldr r4, =_ebss
 80023d0:	2403313c 	.word	0x2403313c

080023d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC3_IRQHandler>

080023d6 <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af02      	add	r7, sp, #8
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 80023e2:	2380      	movs	r3, #128	@ 0x80
 80023e4:	733b      	strb	r3, [r7, #12]
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	791b      	ldrb	r3, [r3, #4]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	b299      	uxth	r1, r3
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	2364      	movs	r3, #100	@ 0x64
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2302      	movs	r3, #2
 8002400:	f005 f80c 	bl	800741c <HAL_I2C_Master_Transmit>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <SSD1306_SendCommand+0x38>
		return ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8002430:	2312      	movs	r3, #18
 8002432:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002434:	2301      	movs	r3, #1
 8002436:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002438:	e02c      	b.n	8002494 <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 800243a:	897b      	ldrh	r3, [r7, #10]
 800243c:	4a1a      	ldr	r2, [pc, #104]	@ (80024a8 <SSD1306_Init+0x90>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	3301      	adds	r3, #1
 8002446:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002448:	897b      	ldrh	r3, [r7, #10]
 800244a:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <SSD1306_Init+0x90>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ffc0 	bl	80023d6 <SSD1306_SendCommand>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <SSD1306_Init+0x4a>
 800245c:	897b      	ldrh	r3, [r7, #10]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e01e      	b.n	80024a0 <SSD1306_Init+0x88>
	        cmd_idx++;
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	3301      	adds	r3, #1
 8002466:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8002468:	e00f      	b.n	800248a <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 800246a:	897b      	ldrh	r3, [r7, #10]
 800246c:	4a0e      	ldr	r2, [pc, #56]	@ (80024a8 <SSD1306_Init+0x90>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffaf 	bl	80023d6 <SSD1306_SendCommand>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <SSD1306_Init+0x6c>
 800247e:	897b      	ldrh	r3, [r7, #10]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e00d      	b.n	80024a0 <SSD1306_Init+0x88>
	            cmd_idx++;
 8002484:	897b      	ldrh	r3, [r7, #10]
 8002486:	3301      	adds	r3, #1
 8002488:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 800248a:	89bb      	ldrh	r3, [r7, #12]
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	81ba      	strh	r2, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ea      	bne.n	800246a <SSD1306_Init+0x52>
	while (n_commands--) {
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	81fa      	strh	r2, [r7, #14]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1cd      	bne.n	800243a <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	08018b1c 	.word	0x08018b1c

080024ac <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f015 fe2f 	bl	8018128 <memset>
	return 0;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2240      	movs	r2, #64	@ 0x40
 80024e2:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	b299      	uxth	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	f240 4301 	movw	r3, #1025	@ 0x401
 80024f8:	f005 f8a8 	bl	800764c <HAL_I2C_Master_Transmit_DMA>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d109      	bne.n	800252e <SSD1306_DrawChar+0x26>
		hssd->str_cursor = (hssd->str_cursor/128)*128;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8a1b      	ldrh	r3, [r3, #16]
 800251e:	09db      	lsrs	r3, r3, #7
 8002520:	b29b      	uxth	r3, r3
 8002522:	01db      	lsls	r3, r3, #7
 8002524:	b29a      	uxth	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	821a      	strh	r2, [r3, #16]
		return SUCCESS;
 800252a:	2300      	movs	r3, #0
 800252c:	e036      	b.n	800259c <SSD1306_DrawChar+0x94>
	}
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	2b1f      	cmp	r3, #31
 8002532:	d902      	bls.n	800253a <SSD1306_DrawChar+0x32>
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	2b7e      	cmp	r3, #126	@ 0x7e
 8002538:	d901      	bls.n	800253e <SSD1306_DrawChar+0x36>
 800253a:	2301      	movs	r3, #1
 800253c:	e02e      	b.n	800259c <SSD1306_DrawChar+0x94>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	3b20      	subs	r3, #32
 8002542:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	2b60      	cmp	r3, #96	@ 0x60
 8002548:	d906      	bls.n	8002558 <SSD1306_DrawChar+0x50>
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	2b7a      	cmp	r3, #122	@ 0x7a
 800254e:	d803      	bhi.n	8002558 <SSD1306_DrawChar+0x50>
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3b20      	subs	r3, #32
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	e005      	b.n	8002564 <SSD1306_DrawChar+0x5c>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	2b7a      	cmp	r3, #122	@ 0x7a
 800255c:	d902      	bls.n	8002564 <SSD1306_DrawChar+0x5c>
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	3b1a      	subs	r3, #26
 8002562:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4a0e      	ldr	r2, [pc, #56]	@ (80025a4 <SSD1306_DrawChar+0x9c>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	8a12      	ldrh	r2, [r2, #16]
 8002576:	1898      	adds	r0, r3, r2
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	3301      	adds	r3, #1
 800257e:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <SSD1306_DrawChar+0x9c>)
 8002580:	4413      	add	r3, r2
 8002582:	7bba      	ldrb	r2, [r7, #14]
 8002584:	4619      	mov	r1, r3
 8002586:	f015 fe03 	bl	8018190 <memcpy>
	hssd->str_cursor += len;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8a1a      	ldrh	r2, [r3, #16]
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	b29b      	uxth	r3, r3
 8002592:	4413      	add	r3, r2
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	08018b50 	.word	0x08018b50

080025a8 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]
 80025ba:	e013      	b.n	80025e4 <SSD1306_DrawString+0x3c>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff ff9e 	bl	8002508 <SSD1306_DrawChar>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <SSD1306_DrawString+0x36>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8a1b      	ldrh	r3, [r3, #16]
 80025d6:	3306      	adds	r3, #6
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	3301      	adds	r3, #1
 80025e2:	75fb      	strb	r3, [r7, #23]
 80025e4:	7dfa      	ldrb	r2, [r7, #23]
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d3e7      	bcc.n	80025bc <SSD1306_DrawString+0x14>
	}

	return SUCCESS;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6898      	ldr	r0, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	899b      	ldrh	r3, [r3, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	4619      	mov	r1, r3
 800260e:	f004 fe4f 	bl	80072b0 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	1cf9      	adds	r1, r7, #3
 8002618:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800261c:	2201      	movs	r2, #1
 800261e:	f00e fe3d 	bl	801129c <HAL_SPI_Transmit>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <ST7789_SendByte_Command+0x36>
		return ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6898      	ldr	r0, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	899b      	ldrh	r3, [r3, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	4619      	mov	r1, r3
 800264e:	f004 fe2f 	bl	80072b0 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	1cf9      	adds	r1, r7, #3
 8002658:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800265c:	2201      	movs	r2, #1
 800265e:	f00e fe1d 	bl	801129c <HAL_SPI_Transmit>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <ST7789_SendByte_Data+0x36>
		return ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 8002680:	2300      	movs	r3, #0
 8002682:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f107 0109 	add.w	r1, r7, #9
 800268c:	2201      	movs	r2, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f00e fff2 	bl	8011678 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 8002694:	200a      	movs	r0, #10
 8002696:	f000 f99b 	bl	80029d0 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 800269a:	2313      	movs	r3, #19
 800269c:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 80026a2:	e02c      	b.n	80026fe <ST7789_Init+0x86>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <ST7789_Init+0x9c>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 80026ac:	897b      	ldrh	r3, [r7, #10]
 80026ae:	3301      	adds	r3, #1
 80026b0:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80026b2:	897b      	ldrh	r3, [r7, #10]
 80026b4:	4a17      	ldr	r2, [pc, #92]	@ (8002714 <ST7789_Init+0x9c>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ff9b 	bl	80025f6 <ST7789_SendByte_Command>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <ST7789_Init+0x54>
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e01e      	b.n	800270a <ST7789_Init+0x92>
	    cmd_idx++;
 80026cc:	897b      	ldrh	r3, [r7, #10]
 80026ce:	3301      	adds	r3, #1
 80026d0:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 80026d2:	e00f      	b.n	80026f4 <ST7789_Init+0x7c>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80026d4:	897b      	ldrh	r3, [r7, #10]
 80026d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002714 <ST7789_Init+0x9c>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	4619      	mov	r1, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ffaa 	bl	8002636 <ST7789_SendByte_Data>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <ST7789_Init+0x76>
 80026e8:	897b      	ldrh	r3, [r7, #10]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e00d      	b.n	800270a <ST7789_Init+0x92>
				cmd_idx++;
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	3301      	adds	r3, #1
 80026f2:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 80026f4:	89bb      	ldrh	r3, [r7, #12]
 80026f6:	1e5a      	subs	r2, r3, #1
 80026f8:	81ba      	strh	r2, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1ea      	bne.n	80026d4 <ST7789_Init+0x5c>
	while (n_commands--) {
 80026fe:	89fb      	ldrh	r3, [r7, #14]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	81fa      	strh	r2, [r7, #14]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1cd      	bne.n	80026a4 <ST7789_Init+0x2c>
	    }
	}
	return SUCCESS;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	08018d78 	.word	0x08018d78

08002718 <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4603      	mov	r3, r0
 8002728:	817b      	strh	r3, [r7, #10]
 800272a:	460b      	mov	r3, r1
 800272c:	813b      	strh	r3, [r7, #8]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 8002732:	212a      	movs	r1, #42	@ 0x2a
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f7ff ff5e 	bl	80025f6 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 800273a:	897b      	ldrh	r3, [r7, #10]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	b29b      	uxth	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff ff76 	bl	8002636 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 800274a:	897b      	ldrh	r3, [r7, #10]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	4619      	mov	r1, r3
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff ff70 	bl	8002636 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	3b01      	subs	r3, #1
 800275a:	121b      	asrs	r3, r3, #8
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff ff68 	bl	8002636 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ff60 	bl	8002636 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 8002776:	212b      	movs	r1, #43	@ 0x2b
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ff3c 	bl	80025f6 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 800277e:	893b      	ldrh	r3, [r7, #8]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	b29b      	uxth	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff ff54 	bl	8002636 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 800278e:	893b      	ldrh	r3, [r7, #8]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff ff4e 	bl	8002636 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 800279a:	8b3b      	ldrh	r3, [r7, #24]
 800279c:	3b01      	subs	r3, #1
 800279e:	121b      	asrs	r3, r3, #8
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	4619      	mov	r1, r3
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f7ff ff46 	bl	8002636 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 80027aa:	8b3b      	ldrh	r3, [r7, #24]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	4619      	mov	r1, r3
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff ff3e 	bl	8002636 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 80027ba:	212c      	movs	r1, #44	@ 0x2c
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff ff1a 	bl	80025f6 <ST7789_SendByte_Command>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789, uint8_t col) {
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
	// fill VRAM with white
	memset(hst7789->vram, col, LCD_WIDTH*LCD_HEIGHT*2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	78f9      	ldrb	r1, [r7, #3]
 80027dc:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 80027e0:	4618      	mov	r0, r3
 80027e2:	f015 fca1 	bl	8018128 <memset>
	return SUCCESS;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <ST7789_Update>:

uint8_t ST7789_Update(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
	// Flag busy
	hst7789->spi_ready = 0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	0152      	lsls	r2, r2, #5
 800280a:	1ad2      	subs	r2, r2, r3
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	4413      	add	r3, r2
 8002810:	b29a      	uxth	r2, r3
 8002812:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	23f0      	movs	r3, #240	@ 0xf0
 800281a:	2100      	movs	r1, #0
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff7b 	bl	8002718 <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6898      	ldr	r0, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	899b      	ldrh	r3, [r3, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	4619      	mov	r1, r3
 800282e:	f004 fd3f 	bl	80072b0 <HAL_GPIO_WritePin>


	if (screen_section != 2) {
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d013      	beq.n	8002860 <ST7789_Update+0x70>
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8002846:	fb01 f202 	mul.w	r2, r1, r2
 800284a:	4413      	add	r3, r2
 800284c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002850:	4619      	mov	r1, r3
 8002852:	f00e ff11 	bl	8011678 <HAL_SPI_Transmit_DMA>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <ST7789_Update+0x98>
			return ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e014      	b.n	800288a <ST7789_Update+0x9a>
	} else {
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0x8340))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800286e:	fb01 f202 	mul.w	r2, r1, r2
 8002872:	4413      	add	r3, r2
 8002874:	f248 3240 	movw	r2, #33600	@ 0x8340
 8002878:	4619      	mov	r1, r3
 800287a:	f00e fefd 	bl	8011678 <HAL_SPI_Transmit_DMA>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <ST7789_Update+0x98>
			return ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <ST7789_Update+0x9a>
	}
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <ST7789_DMATransmitCplt>:

void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	hst7789->spi_ready = 1;	// Flag ready
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	711a      	strb	r2, [r3, #4]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b2:	2003      	movs	r0, #3
 80028b4:	f001 fc3e 	bl	8004134 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028b8:	f00b fcf8 	bl	800e2ac <HAL_RCC_GetSysClockFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_Init+0x68>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	4913      	ldr	r1, [pc, #76]	@ (8002918 <HAL_Init+0x6c>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <HAL_Init+0x68>)
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	4a0e      	ldr	r2, [pc, #56]	@ (8002918 <HAL_Init+0x6c>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ec:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <HAL_Init+0x70>)
 80028ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <HAL_Init+0x74>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028f6:	200f      	movs	r0, #15
 80028f8:	f000 f814 	bl	8002924 <HAL_InitTick>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e002      	b.n	800290c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002906:	f7fe ffdd 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	58024400 	.word	0x58024400
 8002918:	08018b0c 	.word	0x08018b0c
 800291c:	24000218 	.word	0x24000218
 8002920:	24000214 	.word	0x24000214

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800292c:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <HAL_InitTick+0x60>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e021      	b.n	800297c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <HAL_InitTick+0x64>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <HAL_InitTick+0x60>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fc23 	bl	800419a <HAL_SYSTICK_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e00e      	b.n	800297c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d80a      	bhi.n	800297a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f001 fbed 	bl	800414a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002970:	4a06      	ldr	r2, [pc, #24]	@ (800298c <HAL_InitTick+0x68>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	24000220 	.word	0x24000220
 8002988:	24000214 	.word	0x24000214
 800298c:	2400021c 	.word	0x2400021c

08002990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_IncTick+0x20>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_IncTick+0x24>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <HAL_IncTick+0x24>)
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	24000220 	.word	0x24000220
 80029b4:	24031408 	.word	0x24031408

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_GetTick+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	24031408 	.word	0x24031408

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff ffee 	bl	80029b8 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_Delay+0x44>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	24000220 	.word	0x24000220

08002a18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_GetREVID+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0c1b      	lsrs	r3, r3, #16
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	5c001000 	.word	0x5c001000

08002a30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <LL_ADC_SetChannelPreselection+0x24>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	0e9b      	lsrs	r3, r3, #26
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	e015      	b.n	8002ae8 <LL_ADC_SetChannelPreselection+0x50>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e003      	b.n	8002ade <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	69d2      	ldr	r2, [r2, #28]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3360      	adds	r3, #96	@ 0x60
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	611a      	str	r2, [r3, #16]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3360      	adds	r3, #96	@ 0x60
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	601a      	str	r2, [r3, #0]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3330      	adds	r3, #48	@ 0x30
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	4413      	add	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	211f      	movs	r1, #31
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	0e9b      	lsrs	r3, r3, #26
 8002c04:	f003 011f 	and.w	r1, r3, #31
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	431a      	orrs	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c18:	bf00      	nop
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60da      	str	r2, [r3, #12]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b087      	sub	sp, #28
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3314      	adds	r3, #20
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	0e5b      	lsrs	r3, r3, #25
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	4413      	add	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	0d1b      	lsrs	r3, r3, #20
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2107      	movs	r1, #7
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	401a      	ands	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	0d1b      	lsrs	r3, r3, #20
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0318 	and.w	r3, r3, #24
 8002cc2:	4908      	ldr	r1, [pc, #32]	@ (8002ce4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cc4:	40d9      	lsrs	r1, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	400b      	ands	r3, r1
 8002cca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	000fffff 	.word	0x000fffff

08002ce8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6093      	str	r3, [r2, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	5fffffc0 	.word	0x5fffffc0

08002d28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	6fffffc0 	.word	0x6fffffc0

08002d78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <LL_ADC_Enable+0x24>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	7fffffc0 	.word	0x7fffffc0

08002dc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <LL_ADC_IsEnabled+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_ADC_IsEnabled+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <LL_ADC_REG_StartConversion+0x24>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	7fffffc0 	.word	0x7fffffc0

08002e18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d101      	bne.n	8002e56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b089      	sub	sp, #36	@ 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e18f      	b.n	800319e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7fe fd33 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff3f 	bl	8002d28 <LL_ADC_IsDeepPowerDownEnabled>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff25 	bl	8002d04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff5a 	bl	8002d78 <LL_ADC_IsInternalRegulatorEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d114      	bne.n	8002ef4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff3e 	bl	8002d50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed4:	4b87      	ldr	r3, [pc, #540]	@ (80030f4 <HAL_ADC_Init+0x290>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	4a87      	ldr	r2, [pc, #540]	@ (80030f8 <HAL_ADC_Init+0x294>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ee6:	e002      	b.n	8002eee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f9      	bne.n	8002ee8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff3d 	bl	8002d78 <LL_ADC_IsInternalRegulatorEnabled>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10d      	bne.n	8002f20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f08:	f043 0210 	orr.w	r2, r3, #16
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff77 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 8002f2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8129 	bne.w	800318c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8125 	bne.w	800318c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff36 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d136      	bne.n	8002fd0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a65      	ldr	r2, [pc, #404]	@ (80030fc <HAL_ADC_Init+0x298>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_ADC_Init+0x112>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a63      	ldr	r2, [pc, #396]	@ (8003100 <HAL_ADC_Init+0x29c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10e      	bne.n	8002f94 <HAL_ADC_Init+0x130>
 8002f76:	4861      	ldr	r0, [pc, #388]	@ (80030fc <HAL_ADC_Init+0x298>)
 8002f78:	f7ff ff26 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	4860      	ldr	r0, [pc, #384]	@ (8003100 <HAL_ADC_Init+0x29c>)
 8002f80:	f7ff ff22 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4323      	orrs	r3, r4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e008      	b.n	8002fa6 <HAL_ADC_Init+0x142>
 8002f94:	485b      	ldr	r0, [pc, #364]	@ (8003104 <HAL_ADC_Init+0x2a0>)
 8002f96:	f7ff ff17 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a53      	ldr	r2, [pc, #332]	@ (80030fc <HAL_ADC_Init+0x298>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_Init+0x15a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a51      	ldr	r2, [pc, #324]	@ (8003100 <HAL_ADC_Init+0x29c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_Init+0x15e>
 8002fbe:	4a52      	ldr	r2, [pc, #328]	@ (8003108 <HAL_ADC_Init+0x2a4>)
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADC_Init+0x160>
 8002fc2:	4a52      	ldr	r2, [pc, #328]	@ (800310c <HAL_ADC_Init+0x2a8>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7ff fd30 	bl	8002a30 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002fd0:	f7ff fd22 	bl	8002a18 <HAL_GetREVID>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d914      	bls.n	8003008 <HAL_ADC_Init+0x1a4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d110      	bne.n	8003008 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7d5b      	ldrb	r3, [r3, #21]
 8002fea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ff0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ff6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7f1b      	ldrb	r3, [r3, #28]
 8002ffc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ffe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003000:	f043 030c 	orr.w	r3, r3, #12
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e00d      	b.n	8003024 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7d5b      	ldrb	r3, [r3, #21]
 800300c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003012:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003018:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7f1b      	ldrb	r3, [r3, #28]
 800301e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7f1b      	ldrb	r3, [r3, #28]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d106      	bne.n	800303a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	3b01      	subs	r3, #1
 8003032:	045b      	lsls	r3, r3, #17
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4b2c      	ldr	r3, [pc, #176]	@ (8003110 <HAL_ADC_Init+0x2ac>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	69b9      	ldr	r1, [r7, #24]
 8003066:	430b      	orrs	r3, r1
 8003068:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fed2 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 8003074:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fedf 	bl	8002e3e <LL_ADC_INJ_IsConversionOngoing>
 8003080:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d15f      	bne.n	8003148 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d15c      	bne.n	8003148 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7d1b      	ldrb	r3, [r3, #20]
 8003092:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003114 <HAL_ADC_Init+0x2b0>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	69b9      	ldr	r1, [r7, #24]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d130      	bne.n	800311c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	4b14      	ldr	r3, [pc, #80]	@ (8003118 <HAL_ADC_Init+0x2b4>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030ce:	3a01      	subs	r2, #1
 80030d0:	0411      	lsls	r1, r2, #16
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030d6:	4311      	orrs	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80030dc:	4311      	orrs	r1, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030e2:	430a      	orrs	r2, r1
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	611a      	str	r2, [r3, #16]
 80030f0:	e01c      	b.n	800312c <HAL_ADC_Init+0x2c8>
 80030f2:	bf00      	nop
 80030f4:	24000214 	.word	0x24000214
 80030f8:	053e2d63 	.word	0x053e2d63
 80030fc:	40022000 	.word	0x40022000
 8003100:	40022100 	.word	0x40022100
 8003104:	58026000 	.word	0x58026000
 8003108:	40022300 	.word	0x40022300
 800310c:	58026300 	.word	0x58026300
 8003110:	fff0c003 	.word	0xfff0c003
 8003114:	ffffbffc 	.word	0xffffbffc
 8003118:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fd16 	bl	8003b74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10c      	bne.n	800316a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f023 010f 	bic.w	r1, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
 8003168:	e007      	b.n	800317a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 020f 	bic.w	r2, r2, #15
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
 800318a:	e007      	b.n	800319c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003190:	f043 0210 	orr.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800319c:	7ffb      	ldrb	r3, [r7, #31]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3724      	adds	r7, #36	@ 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop

080031a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a55      	ldr	r2, [pc, #340]	@ (8003310 <HAL_ADC_Start_DMA+0x168>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_Start_DMA+0x20>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a54      	ldr	r2, [pc, #336]	@ (8003314 <HAL_ADC_Start_DMA+0x16c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_Start_DMA+0x24>
 80031c8:	4b53      	ldr	r3, [pc, #332]	@ (8003318 <HAL_ADC_Start_DMA+0x170>)
 80031ca:	e000      	b.n	80031ce <HAL_ADC_Start_DMA+0x26>
 80031cc:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_ADC_Start_DMA+0x174>)
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fd8a 	bl	8002ce8 <LL_ADC_GetMultimode>
 80031d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fe1c 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 808c 	bne.w	8003300 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x4e>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e087      	b.n	8003306 <HAL_ADC_Start_DMA+0x15e>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b05      	cmp	r3, #5
 8003208:	d002      	beq.n	8003210 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b09      	cmp	r3, #9
 800320e:	d170      	bne.n	80032f2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fb91 	bl	8003938 <ADC_Enable>
 8003216:	4603      	mov	r3, r0
 8003218:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d163      	bne.n	80032e8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003224:	4b3e      	ldr	r3, [pc, #248]	@ (8003320 <HAL_ADC_Start_DMA+0x178>)
 8003226:	4013      	ands	r3, r2
 8003228:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a37      	ldr	r2, [pc, #220]	@ (8003314 <HAL_ADC_Start_DMA+0x16c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d002      	beq.n	8003240 <HAL_ADC_Start_DMA+0x98>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	e000      	b.n	8003242 <HAL_ADC_Start_DMA+0x9a>
 8003240:	4b33      	ldr	r3, [pc, #204]	@ (8003310 <HAL_ADC_Start_DMA+0x168>)
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	4293      	cmp	r3, r2
 8003248:	d002      	beq.n	8003250 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f023 0206 	bic.w	r2, r3, #6
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	659a      	str	r2, [r3, #88]	@ 0x58
 8003274:	e002      	b.n	800327c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003280:	4a28      	ldr	r2, [pc, #160]	@ (8003324 <HAL_ADC_Start_DMA+0x17c>)
 8003282:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003288:	4a27      	ldr	r2, [pc, #156]	@ (8003328 <HAL_ADC_Start_DMA+0x180>)
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003290:	4a26      	ldr	r2, [pc, #152]	@ (800332c <HAL_ADC_Start_DMA+0x184>)
 8003292:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	221c      	movs	r2, #28
 800329a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0210 	orr.w	r2, r2, #16
 80032b2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7ff fcb0 	bl	8002c24 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3340      	adds	r3, #64	@ 0x40
 80032ce:	4619      	mov	r1, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f001 fb42 	bl	800495c <HAL_DMA_Start_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fd85 	bl	8002df0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032e6:	e00d      	b.n	8003304 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80032f0:	e008      	b.n	8003304 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80032fe:	e001      	b.n	8003304 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003300:	2302      	movs	r3, #2
 8003302:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40022000 	.word	0x40022000
 8003314:	40022100 	.word	0x40022100
 8003318:	40022300 	.word	0x40022300
 800331c:	58026300 	.word	0x58026300
 8003320:	fffff0fe 	.word	0xfffff0fe
 8003324:	08003a4d 	.word	0x08003a4d
 8003328:	08003b25 	.word	0x08003b25
 800332c:	08003b41 	.word	0x08003b41

08003330 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b08d      	sub	sp, #52	@ 0x34
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a65      	ldr	r2, [pc, #404]	@ (8003508 <HAL_ADC_ConfigChannel+0x1b0>)
 8003372:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x2a>
 800337e:	2302      	movs	r3, #2
 8003380:	e2c7      	b.n	8003912 <HAL_ADC_ConfigChannel+0x5ba>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fd42 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 82ac 	bne.w	80038f4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db2c      	blt.n	80033fe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d108      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x6a>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	e016      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x98>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	613b      	str	r3, [r7, #16]
  return result;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e003      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	2201      	movs	r2, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	69d1      	ldr	r1, [r2, #28]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	430b      	orrs	r3, r1
 80033fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	f7ff fbde 	bl	8002bcc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fcff 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 800341a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fd0c 	bl	8002e3e <LL_ADC_INJ_IsConversionOngoing>
 8003426:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 80b8 	bne.w	80035a0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 80b4 	bne.w	80035a0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	461a      	mov	r2, r3
 8003446:	f7ff fc00 	bl	8002c4a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800344a:	4b30      	ldr	r3, [pc, #192]	@ (800350c <HAL_ADC_ConfigChannel+0x1b4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003456:	d10b      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x118>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	e01d      	b.n	80034ac <HAL_ADC_ConfigChannel+0x154>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x13e>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	e00a      	b.n	80034ac <HAL_ADC_ConfigChannel+0x154>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d02c      	beq.n	8003510 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6919      	ldr	r1, [r3, #16]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f7ff fb1b 	bl	8002afe <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6919      	ldr	r1, [r3, #16]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	7e5b      	ldrb	r3, [r3, #25]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d102      	bne.n	80034de <HAL_ADC_ConfigChannel+0x186>
 80034d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80034dc:	e000      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x188>
 80034de:	2300      	movs	r3, #0
 80034e0:	461a      	mov	r2, r3
 80034e2:	f7ff fb45 	bl	8002b70 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6919      	ldr	r1, [r3, #16]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	7e1b      	ldrb	r3, [r3, #24]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x1a4>
 80034f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034fa:	e000      	b.n	80034fe <HAL_ADC_ConfigChannel+0x1a6>
 80034fc:	2300      	movs	r3, #0
 80034fe:	461a      	mov	r2, r3
 8003500:	f7ff fb1d 	bl	8002b3e <LL_ADC_SetDataRightShift>
 8003504:	e04c      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x248>
 8003506:	bf00      	nop
 8003508:	47ff0000 	.word	0x47ff0000
 800350c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	069b      	lsls	r3, r3, #26
 8003520:	429a      	cmp	r2, r3
 8003522:	d107      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003532:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800353a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	069b      	lsls	r3, r3, #26
 8003544:	429a      	cmp	r2, r3
 8003546:	d107      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003556:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800355e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	069b      	lsls	r3, r3, #26
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800357a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	069b      	lsls	r3, r3, #26
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800359e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fc0f 	bl	8002dc8 <LL_ADC_IsEnabled>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 81aa 	bne.w	8003906 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	461a      	mov	r2, r3
 80035c0:	f7ff fb6e 	bl	8002ca0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a87      	ldr	r2, [pc, #540]	@ (80037e8 <HAL_ADC_ConfigChannel+0x490>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f040 809a 	bne.w	8003704 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4984      	ldr	r1, [pc, #528]	@ (80037ec <HAL_ADC_ConfigChannel+0x494>)
 80035da:	428b      	cmp	r3, r1
 80035dc:	d147      	bne.n	800366e <HAL_ADC_ConfigChannel+0x316>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4983      	ldr	r1, [pc, #524]	@ (80037f0 <HAL_ADC_ConfigChannel+0x498>)
 80035e4:	428b      	cmp	r3, r1
 80035e6:	d040      	beq.n	800366a <HAL_ADC_ConfigChannel+0x312>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4981      	ldr	r1, [pc, #516]	@ (80037f4 <HAL_ADC_ConfigChannel+0x49c>)
 80035ee:	428b      	cmp	r3, r1
 80035f0:	d039      	beq.n	8003666 <HAL_ADC_ConfigChannel+0x30e>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4980      	ldr	r1, [pc, #512]	@ (80037f8 <HAL_ADC_ConfigChannel+0x4a0>)
 80035f8:	428b      	cmp	r3, r1
 80035fa:	d032      	beq.n	8003662 <HAL_ADC_ConfigChannel+0x30a>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	497e      	ldr	r1, [pc, #504]	@ (80037fc <HAL_ADC_ConfigChannel+0x4a4>)
 8003602:	428b      	cmp	r3, r1
 8003604:	d02b      	beq.n	800365e <HAL_ADC_ConfigChannel+0x306>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	497d      	ldr	r1, [pc, #500]	@ (8003800 <HAL_ADC_ConfigChannel+0x4a8>)
 800360c:	428b      	cmp	r3, r1
 800360e:	d024      	beq.n	800365a <HAL_ADC_ConfigChannel+0x302>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	497b      	ldr	r1, [pc, #492]	@ (8003804 <HAL_ADC_ConfigChannel+0x4ac>)
 8003616:	428b      	cmp	r3, r1
 8003618:	d01d      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x2fe>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	497a      	ldr	r1, [pc, #488]	@ (8003808 <HAL_ADC_ConfigChannel+0x4b0>)
 8003620:	428b      	cmp	r3, r1
 8003622:	d016      	beq.n	8003652 <HAL_ADC_ConfigChannel+0x2fa>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4978      	ldr	r1, [pc, #480]	@ (800380c <HAL_ADC_ConfigChannel+0x4b4>)
 800362a:	428b      	cmp	r3, r1
 800362c:	d00f      	beq.n	800364e <HAL_ADC_ConfigChannel+0x2f6>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4977      	ldr	r1, [pc, #476]	@ (8003810 <HAL_ADC_ConfigChannel+0x4b8>)
 8003634:	428b      	cmp	r3, r1
 8003636:	d008      	beq.n	800364a <HAL_ADC_ConfigChannel+0x2f2>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4975      	ldr	r1, [pc, #468]	@ (8003814 <HAL_ADC_ConfigChannel+0x4bc>)
 800363e:	428b      	cmp	r3, r1
 8003640:	d101      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x2ee>
 8003642:	4b75      	ldr	r3, [pc, #468]	@ (8003818 <HAL_ADC_ConfigChannel+0x4c0>)
 8003644:	e05a      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 8003646:	2300      	movs	r3, #0
 8003648:	e058      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 800364a:	4b74      	ldr	r3, [pc, #464]	@ (800381c <HAL_ADC_ConfigChannel+0x4c4>)
 800364c:	e056      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 800364e:	4b74      	ldr	r3, [pc, #464]	@ (8003820 <HAL_ADC_ConfigChannel+0x4c8>)
 8003650:	e054      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 8003652:	4b6e      	ldr	r3, [pc, #440]	@ (800380c <HAL_ADC_ConfigChannel+0x4b4>)
 8003654:	e052      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 8003656:	4b6c      	ldr	r3, [pc, #432]	@ (8003808 <HAL_ADC_ConfigChannel+0x4b0>)
 8003658:	e050      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 800365a:	4b72      	ldr	r3, [pc, #456]	@ (8003824 <HAL_ADC_ConfigChannel+0x4cc>)
 800365c:	e04e      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 800365e:	4b72      	ldr	r3, [pc, #456]	@ (8003828 <HAL_ADC_ConfigChannel+0x4d0>)
 8003660:	e04c      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 8003662:	4b72      	ldr	r3, [pc, #456]	@ (800382c <HAL_ADC_ConfigChannel+0x4d4>)
 8003664:	e04a      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 8003666:	4b72      	ldr	r3, [pc, #456]	@ (8003830 <HAL_ADC_ConfigChannel+0x4d8>)
 8003668:	e048      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 800366a:	2301      	movs	r3, #1
 800366c:	e046      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4970      	ldr	r1, [pc, #448]	@ (8003834 <HAL_ADC_ConfigChannel+0x4dc>)
 8003674:	428b      	cmp	r3, r1
 8003676:	d140      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x3a2>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	495c      	ldr	r1, [pc, #368]	@ (80037f0 <HAL_ADC_ConfigChannel+0x498>)
 800367e:	428b      	cmp	r3, r1
 8003680:	d039      	beq.n	80036f6 <HAL_ADC_ConfigChannel+0x39e>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	495b      	ldr	r1, [pc, #364]	@ (80037f4 <HAL_ADC_ConfigChannel+0x49c>)
 8003688:	428b      	cmp	r3, r1
 800368a:	d032      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x39a>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4959      	ldr	r1, [pc, #356]	@ (80037f8 <HAL_ADC_ConfigChannel+0x4a0>)
 8003692:	428b      	cmp	r3, r1
 8003694:	d02b      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x396>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4958      	ldr	r1, [pc, #352]	@ (80037fc <HAL_ADC_ConfigChannel+0x4a4>)
 800369c:	428b      	cmp	r3, r1
 800369e:	d024      	beq.n	80036ea <HAL_ADC_ConfigChannel+0x392>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4956      	ldr	r1, [pc, #344]	@ (8003800 <HAL_ADC_ConfigChannel+0x4a8>)
 80036a6:	428b      	cmp	r3, r1
 80036a8:	d01d      	beq.n	80036e6 <HAL_ADC_ConfigChannel+0x38e>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4955      	ldr	r1, [pc, #340]	@ (8003804 <HAL_ADC_ConfigChannel+0x4ac>)
 80036b0:	428b      	cmp	r3, r1
 80036b2:	d016      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x38a>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4953      	ldr	r1, [pc, #332]	@ (8003808 <HAL_ADC_ConfigChannel+0x4b0>)
 80036ba:	428b      	cmp	r3, r1
 80036bc:	d00f      	beq.n	80036de <HAL_ADC_ConfigChannel+0x386>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4952      	ldr	r1, [pc, #328]	@ (800380c <HAL_ADC_ConfigChannel+0x4b4>)
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d008      	beq.n	80036da <HAL_ADC_ConfigChannel+0x382>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4951      	ldr	r1, [pc, #324]	@ (8003814 <HAL_ADC_ConfigChannel+0x4bc>)
 80036ce:	428b      	cmp	r3, r1
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x37e>
 80036d2:	4b51      	ldr	r3, [pc, #324]	@ (8003818 <HAL_ADC_ConfigChannel+0x4c0>)
 80036d4:	e012      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036d6:	2300      	movs	r3, #0
 80036d8:	e010      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036da:	4b51      	ldr	r3, [pc, #324]	@ (8003820 <HAL_ADC_ConfigChannel+0x4c8>)
 80036dc:	e00e      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036de:	4b4b      	ldr	r3, [pc, #300]	@ (800380c <HAL_ADC_ConfigChannel+0x4b4>)
 80036e0:	e00c      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036e2:	4b49      	ldr	r3, [pc, #292]	@ (8003808 <HAL_ADC_ConfigChannel+0x4b0>)
 80036e4:	e00a      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003824 <HAL_ADC_ConfigChannel+0x4cc>)
 80036e8:	e008      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003828 <HAL_ADC_ConfigChannel+0x4d0>)
 80036ec:	e006      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036ee:	4b4f      	ldr	r3, [pc, #316]	@ (800382c <HAL_ADC_ConfigChannel+0x4d4>)
 80036f0:	e004      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003830 <HAL_ADC_ConfigChannel+0x4d8>)
 80036f4:	e002      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3a4>
 80036fa:	2300      	movs	r3, #0
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f7ff f9ca 	bl	8002a98 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f280 80fc 	bge.w	8003906 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a36      	ldr	r2, [pc, #216]	@ (80037ec <HAL_ADC_ConfigChannel+0x494>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_ADC_ConfigChannel+0x3ca>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a45      	ldr	r2, [pc, #276]	@ (8003834 <HAL_ADC_ConfigChannel+0x4dc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x3ce>
 8003722:	4b45      	ldr	r3, [pc, #276]	@ (8003838 <HAL_ADC_ConfigChannel+0x4e0>)
 8003724:	e000      	b.n	8003728 <HAL_ADC_ConfigChannel+0x3d0>
 8003726:	4b45      	ldr	r3, [pc, #276]	@ (800383c <HAL_ADC_ConfigChannel+0x4e4>)
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff f9a7 	bl	8002a7c <LL_ADC_GetCommonPathInternalCh>
 800372e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2d      	ldr	r2, [pc, #180]	@ (80037ec <HAL_ADC_ConfigChannel+0x494>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d004      	beq.n	8003744 <HAL_ADC_ConfigChannel+0x3ec>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a3d      	ldr	r2, [pc, #244]	@ (8003834 <HAL_ADC_ConfigChannel+0x4dc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10e      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x40a>
 8003744:	4829      	ldr	r0, [pc, #164]	@ (80037ec <HAL_ADC_ConfigChannel+0x494>)
 8003746:	f7ff fb3f 	bl	8002dc8 <LL_ADC_IsEnabled>
 800374a:	4604      	mov	r4, r0
 800374c:	4839      	ldr	r0, [pc, #228]	@ (8003834 <HAL_ADC_ConfigChannel+0x4dc>)
 800374e:	f7ff fb3b 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003752:	4603      	mov	r3, r0
 8003754:	4323      	orrs	r3, r4
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e008      	b.n	8003774 <HAL_ADC_ConfigChannel+0x41c>
 8003762:	4837      	ldr	r0, [pc, #220]	@ (8003840 <HAL_ADC_ConfigChannel+0x4e8>)
 8003764:	f7ff fb30 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80b3 	beq.w	80038e0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a31      	ldr	r2, [pc, #196]	@ (8003844 <HAL_ADC_ConfigChannel+0x4ec>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d165      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x4f8>
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d160      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2b      	ldr	r2, [pc, #172]	@ (8003840 <HAL_ADC_ConfigChannel+0x4e8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	f040 80b6 	bne.w	8003906 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a13      	ldr	r2, [pc, #76]	@ (80037ec <HAL_ADC_ConfigChannel+0x494>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_ADC_ConfigChannel+0x456>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a22      	ldr	r2, [pc, #136]	@ (8003834 <HAL_ADC_ConfigChannel+0x4dc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x45a>
 80037ae:	4a22      	ldr	r2, [pc, #136]	@ (8003838 <HAL_ADC_ConfigChannel+0x4e0>)
 80037b0:	e000      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x45c>
 80037b2:	4a22      	ldr	r2, [pc, #136]	@ (800383c <HAL_ADC_ConfigChannel+0x4e4>)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f7ff f94a 	bl	8002a56 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037c2:	4b21      	ldr	r3, [pc, #132]	@ (8003848 <HAL_ADC_ConfigChannel+0x4f0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	4a20      	ldr	r2, [pc, #128]	@ (800384c <HAL_ADC_ConfigChannel+0x4f4>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	3301      	adds	r3, #1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80037d6:	e002      	b.n	80037de <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3b01      	subs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f9      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e4:	e08f      	b.n	8003906 <HAL_ADC_ConfigChannel+0x5ae>
 80037e6:	bf00      	nop
 80037e8:	47ff0000 	.word	0x47ff0000
 80037ec:	40022000 	.word	0x40022000
 80037f0:	04300002 	.word	0x04300002
 80037f4:	08600004 	.word	0x08600004
 80037f8:	0c900008 	.word	0x0c900008
 80037fc:	10c00010 	.word	0x10c00010
 8003800:	14f00020 	.word	0x14f00020
 8003804:	2a000400 	.word	0x2a000400
 8003808:	2e300800 	.word	0x2e300800
 800380c:	32601000 	.word	0x32601000
 8003810:	43210000 	.word	0x43210000
 8003814:	4b840000 	.word	0x4b840000
 8003818:	4fb80000 	.word	0x4fb80000
 800381c:	47520000 	.word	0x47520000
 8003820:	36902000 	.word	0x36902000
 8003824:	25b00200 	.word	0x25b00200
 8003828:	21800100 	.word	0x21800100
 800382c:	1d500080 	.word	0x1d500080
 8003830:	19200040 	.word	0x19200040
 8003834:	40022100 	.word	0x40022100
 8003838:	40022300 	.word	0x40022300
 800383c:	58026300 	.word	0x58026300
 8003840:	58026000 	.word	0x58026000
 8003844:	cb840000 	.word	0xcb840000
 8003848:	24000214 	.word	0x24000214
 800384c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a31      	ldr	r2, [pc, #196]	@ (800391c <HAL_ADC_ConfigChannel+0x5c4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d11e      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x540>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d119      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2d      	ldr	r2, [pc, #180]	@ (8003920 <HAL_ADC_ConfigChannel+0x5c8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d14b      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2c      	ldr	r2, [pc, #176]	@ (8003924 <HAL_ADC_ConfigChannel+0x5cc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_ADC_ConfigChannel+0x52a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2a      	ldr	r2, [pc, #168]	@ (8003928 <HAL_ADC_ConfigChannel+0x5d0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x52e>
 8003882:	4a2a      	ldr	r2, [pc, #168]	@ (800392c <HAL_ADC_ConfigChannel+0x5d4>)
 8003884:	e000      	b.n	8003888 <HAL_ADC_ConfigChannel+0x530>
 8003886:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <HAL_ADC_ConfigChannel+0x5d8>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7ff f8e0 	bl	8002a56 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003896:	e036      	b.n	8003906 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a25      	ldr	r2, [pc, #148]	@ (8003934 <HAL_ADC_ConfigChannel+0x5dc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d131      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x5ae>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d12c      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <HAL_ADC_ConfigChannel+0x5c8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d127      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003924 <HAL_ADC_ConfigChannel+0x5cc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_ADC_ConfigChannel+0x572>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a18      	ldr	r2, [pc, #96]	@ (8003928 <HAL_ADC_ConfigChannel+0x5d0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x576>
 80038ca:	4a18      	ldr	r2, [pc, #96]	@ (800392c <HAL_ADC_ConfigChannel+0x5d4>)
 80038cc:	e000      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x578>
 80038ce:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <HAL_ADC_ConfigChannel+0x5d8>)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7ff f8bc 	bl	8002a56 <LL_ADC_SetCommonPathInternalCh>
 80038de:	e012      	b.n	8003906 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80038f2:	e008      	b.n	8003906 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f8:	f043 0220 	orr.w	r2, r3, #32
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800390e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003912:	4618      	mov	r0, r3
 8003914:	3734      	adds	r7, #52	@ 0x34
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}
 800391a:	bf00      	nop
 800391c:	c7520000 	.word	0xc7520000
 8003920:	58026000 	.word	0x58026000
 8003924:	40022000 	.word	0x40022000
 8003928:	40022100 	.word	0x40022100
 800392c:	40022300 	.word	0x40022300
 8003930:	58026300 	.word	0x58026300
 8003934:	cfb80000 	.word	0xcfb80000

08003938 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fa3f 	bl	8002dc8 <LL_ADC_IsEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d16e      	bne.n	8003a2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <ADC_Enable+0x100>)
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003962:	f043 0210 	orr.w	r2, r3, #16
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e05a      	b.n	8003a30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fa0e 	bl	8002da0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003984:	f7ff f818 	bl	80029b8 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2b      	ldr	r2, [pc, #172]	@ (8003a3c <ADC_Enable+0x104>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <ADC_Enable+0x66>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a29      	ldr	r2, [pc, #164]	@ (8003a40 <ADC_Enable+0x108>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <ADC_Enable+0x6a>
 800399e:	4b29      	ldr	r3, [pc, #164]	@ (8003a44 <ADC_Enable+0x10c>)
 80039a0:	e000      	b.n	80039a4 <ADC_Enable+0x6c>
 80039a2:	4b29      	ldr	r3, [pc, #164]	@ (8003a48 <ADC_Enable+0x110>)
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff f99f 	bl	8002ce8 <LL_ADC_GetMultimode>
 80039aa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a23      	ldr	r2, [pc, #140]	@ (8003a40 <ADC_Enable+0x108>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d002      	beq.n	80039bc <ADC_Enable+0x84>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	e000      	b.n	80039be <ADC_Enable+0x86>
 80039bc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a3c <ADC_Enable+0x104>)
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02c      	beq.n	8003a20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d130      	bne.n	8003a2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039cc:	e028      	b.n	8003a20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff f9f8 	bl	8002dc8 <LL_ADC_IsEnabled>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff f9dc 	bl	8002da0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039e8:	f7fe ffe6 	bl	80029b8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d914      	bls.n	8003a20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d00d      	beq.n	8003a20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	f043 0210 	orr.w	r2, r3, #16
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a14:	f043 0201 	orr.w	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e007      	b.n	8003a30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d1cf      	bne.n	80039ce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	8000003f 	.word	0x8000003f
 8003a3c:	40022000 	.word	0x40022000
 8003a40:	40022100 	.word	0x40022100
 8003a44:	40022300 	.word	0x40022300
 8003a48:	58026300 	.word	0x58026300

08003a4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d14b      	bne.n	8003afe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d021      	beq.n	8003ac4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff f88e 	bl	8002ba6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d032      	beq.n	8003af6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d12b      	bne.n	8003af6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11f      	bne.n	8003af6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ac2:	e018      	b.n	8003af6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d111      	bne.n	8003af6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7fd fdb6 	bl	8001668 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003afc:	e00e      	b.n	8003b1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff fc1a 	bl	8003344 <HAL_ADC_ErrorCallback>
}
 8003b10:	e004      	b.n	8003b1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff fbfc 	bl	8003330 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7ff fbec 	bl	8003344 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a7a      	ldr	r2, [pc, #488]	@ (8003d6c <ADC_ConfigureBoostMode+0x1f8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <ADC_ConfigureBoostMode+0x1c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a79      	ldr	r2, [pc, #484]	@ (8003d70 <ADC_ConfigureBoostMode+0x1fc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d109      	bne.n	8003ba4 <ADC_ConfigureBoostMode+0x30>
 8003b90:	4b78      	ldr	r3, [pc, #480]	@ (8003d74 <ADC_ConfigureBoostMode+0x200>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <ADC_ConfigureBoostMode+0x42>
 8003ba4:	4b74      	ldr	r3, [pc, #464]	@ (8003d78 <ADC_ConfigureBoostMode+0x204>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01c      	beq.n	8003bf4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003bba:	f00a fcf1 	bl	800e5a0 <HAL_RCC_GetHCLKFreq>
 8003bbe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bc8:	d010      	beq.n	8003bec <ADC_ConfigureBoostMode+0x78>
 8003bca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bce:	d873      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x144>
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd4:	d002      	beq.n	8003bdc <ADC_ConfigureBoostMode+0x68>
 8003bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bda:	d16d      	bne.n	8003cb8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	60fb      	str	r3, [r7, #12]
        break;
 8003bea:	e068      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	60fb      	str	r3, [r7, #12]
        break;
 8003bf2:	e064      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bf4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003bf8:	f04f 0100 	mov.w	r1, #0
 8003bfc:	f00b ff36 	bl	800fa6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003c00:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003c0a:	d051      	beq.n	8003cb0 <ADC_ConfigureBoostMode+0x13c>
 8003c0c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003c10:	d854      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c12:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003c16:	d047      	beq.n	8003ca8 <ADC_ConfigureBoostMode+0x134>
 8003c18:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003c1c:	d84e      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c1e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003c22:	d03d      	beq.n	8003ca0 <ADC_ConfigureBoostMode+0x12c>
 8003c24:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003c28:	d848      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c2e:	d033      	beq.n	8003c98 <ADC_ConfigureBoostMode+0x124>
 8003c30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c34:	d842      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c36:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003c3a:	d029      	beq.n	8003c90 <ADC_ConfigureBoostMode+0x11c>
 8003c3c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003c40:	d83c      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c42:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003c46:	d01a      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c48:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003c4c:	d836      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c4e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003c52:	d014      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c54:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003c58:	d830      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c5e:	d00e      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c64:	d82a      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c66:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c6a:	d008      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c6c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c70:	d824      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c76:	d002      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c7c:	d11e      	bne.n	8003cbc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
        break;
 8003c8e:	e016      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
        break;
 8003c96:	e012      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	60fb      	str	r3, [r7, #12]
        break;
 8003c9e:	e00e      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	60fb      	str	r3, [r7, #12]
        break;
 8003ca6:	e00a      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
        break;
 8003cae:	e006      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	60fb      	str	r3, [r7, #12]
        break;
 8003cb6:	e002      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
        break;
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003cbc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003cbe:	f7fe feab 	bl	8002a18 <HAL_GetREVID>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d815      	bhi.n	8003cf8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a2b      	ldr	r2, [pc, #172]	@ (8003d7c <ADC_ConfigureBoostMode+0x208>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d908      	bls.n	8003ce6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ce4:	e03e      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cf4:	609a      	str	r2, [r3, #8]
}
 8003cf6:	e035      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	@ (8003d80 <ADC_ConfigureBoostMode+0x20c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d808      	bhi.n	8003d18 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	e025      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d84 <ADC_ConfigureBoostMode+0x210>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d80a      	bhi.n	8003d36 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	e016      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a13      	ldr	r2, [pc, #76]	@ (8003d88 <ADC_ConfigureBoostMode+0x214>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d80a      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d50:	609a      	str	r2, [r3, #8]
}
 8003d52:	e007      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40022000 	.word	0x40022000
 8003d70:	40022100 	.word	0x40022100
 8003d74:	40022300 	.word	0x40022300
 8003d78:	58026300 	.word	0x58026300
 8003d7c:	01312d00 	.word	0x01312d00
 8003d80:	005f5e10 	.word	0x005f5e10
 8003d84:	00bebc20 	.word	0x00bebc20
 8003d88:	017d7840 	.word	0x017d7840

08003d8c <LL_ADC_IsEnabled>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <LL_ADC_IsEnabled+0x18>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <LL_ADC_IsEnabled+0x1a>
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d101      	bne.n	8003dca <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b09f      	sub	sp, #124	@ 0x7c
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e0be      	b.n	8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d102      	bne.n	8003e16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e10:	4b5b      	ldr	r3, [pc, #364]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	e001      	b.n	8003e1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e24:	f043 0220 	orr.w	r2, r3, #32
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e09d      	b.n	8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff ffb9 	bl	8003db2 <LL_ADC_REG_IsConversionOngoing>
 8003e40:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ffb3 	bl	8003db2 <LL_ADC_REG_IsConversionOngoing>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d17f      	bne.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d17c      	bne.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a47      	ldr	r2, [pc, #284]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a46      	ldr	r2, [pc, #280]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003e6c:	4b45      	ldr	r3, [pc, #276]	@ (8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e6e:	e000      	b.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003e70:	4b45      	ldr	r3, [pc, #276]	@ (8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e72:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d039      	beq.n	8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e8c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a3a      	ldr	r2, [pc, #232]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a38      	ldr	r2, [pc, #224]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003ea2:	4836      	ldr	r0, [pc, #216]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ea4:	f7ff ff72 	bl	8003d8c <LL_ADC_IsEnabled>
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	4835      	ldr	r0, [pc, #212]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003eac:	f7ff ff6e 	bl	8003d8c <LL_ADC_IsEnabled>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4323      	orrs	r3, r4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e008      	b.n	8003ed2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ec0:	4832      	ldr	r0, [pc, #200]	@ (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ec2:	f7ff ff63 	bl	8003d8c <LL_ADC_IsEnabled>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d047      	beq.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	4b2d      	ldr	r3, [pc, #180]	@ (8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	6892      	ldr	r2, [r2, #8]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eec:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eee:	e03a      	b.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003efa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1e      	ldr	r2, [pc, #120]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d10e      	bne.n	8003f2e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003f10:	481a      	ldr	r0, [pc, #104]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f12:	f7ff ff3b 	bl	8003d8c <LL_ADC_IsEnabled>
 8003f16:	4604      	mov	r4, r0
 8003f18:	4819      	ldr	r0, [pc, #100]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f1a:	f7ff ff37 	bl	8003d8c <LL_ADC_IsEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4323      	orrs	r3, r4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	e008      	b.n	8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003f2e:	4817      	ldr	r0, [pc, #92]	@ (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f30:	f7ff ff2c 	bl	8003d8c <LL_ADC_IsEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	4b11      	ldr	r3, [pc, #68]	@ (8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f4e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f50:	e009      	b.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003f64:	e000      	b.n	8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f66:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f70:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	377c      	adds	r7, #124	@ 0x7c
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd90      	pop	{r4, r7, pc}
 8003f7c:	40022000 	.word	0x40022000
 8003f80:	40022100 	.word	0x40022100
 8003f84:	40022300 	.word	0x40022300
 8003f88:	58026300 	.word	0x58026300
 8003f8c:	58026000 	.word	0x58026000
 8003f90:	fffff0e0 	.word	0xfffff0e0

08003f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fc2:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	60d3      	str	r3, [r2, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00
 8003fd8:	05fa0000 	.word	0x05fa0000

08003fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe0:	4b04      	ldr	r3, [pc, #16]	@ (8003ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	f003 0307 	and.w	r3, r3, #7
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004006:	2b00      	cmp	r3, #0
 8004008:	db0b      	blt.n	8004022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	f003 021f 	and.w	r2, r3, #31
 8004010:	4907      	ldr	r1, [pc, #28]	@ (8004030 <__NVIC_EnableIRQ+0x38>)
 8004012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2001      	movs	r0, #1
 800401a:	fa00 f202 	lsl.w	r2, r0, r2
 800401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e100 	.word	0xe000e100

08004034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	db0a      	blt.n	800405e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	490c      	ldr	r1, [pc, #48]	@ (8004080 <__NVIC_SetPriority+0x4c>)
 800404e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004052:	0112      	lsls	r2, r2, #4
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	440b      	add	r3, r1
 8004058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800405c:	e00a      	b.n	8004074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4908      	ldr	r1, [pc, #32]	@ (8004084 <__NVIC_SetPriority+0x50>)
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	3b04      	subs	r3, #4
 800406c:	0112      	lsls	r2, r2, #4
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	440b      	add	r3, r1
 8004072:	761a      	strb	r2, [r3, #24]
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000e100 	.word	0xe000e100
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	@ 0x24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f1c3 0307 	rsb	r3, r3, #7
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	bf28      	it	cs
 80040a6:	2304      	movcs	r3, #4
 80040a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3304      	adds	r3, #4
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d902      	bls.n	80040b8 <NVIC_EncodePriority+0x30>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3b03      	subs	r3, #3
 80040b6:	e000      	b.n	80040ba <NVIC_EncodePriority+0x32>
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040bc:	f04f 32ff 	mov.w	r2, #4294967295
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43da      	mvns	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	401a      	ands	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d0:	f04f 31ff 	mov.w	r1, #4294967295
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	43d9      	mvns	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	4313      	orrs	r3, r2
         );
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3724      	adds	r7, #36	@ 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004100:	d301      	bcc.n	8004106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004102:	2301      	movs	r3, #1
 8004104:	e00f      	b.n	8004126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004106:	4a0a      	ldr	r2, [pc, #40]	@ (8004130 <SysTick_Config+0x40>)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3b01      	subs	r3, #1
 800410c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800410e:	210f      	movs	r1, #15
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	f7ff ff8e 	bl	8004034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004118:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <SysTick_Config+0x40>)
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800411e:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <SysTick_Config+0x40>)
 8004120:	2207      	movs	r2, #7
 8004122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	e000e010 	.word	0xe000e010

08004134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff ff29 	bl	8003f94 <__NVIC_SetPriorityGrouping>
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004158:	f7ff ff40 	bl	8003fdc <__NVIC_GetPriorityGrouping>
 800415c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	6978      	ldr	r0, [r7, #20]
 8004164:	f7ff ff90 	bl	8004088 <NVIC_EncodePriority>
 8004168:	4602      	mov	r2, r0
 800416a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff5f 	bl	8004034 <__NVIC_SetPriority>
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	4603      	mov	r3, r0
 8004186:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff33 	bl	8003ff8 <__NVIC_EnableIRQ>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff ffa4 	bl	80040f0 <SysTick_Config>
 80041a8:	4603      	mov	r3, r0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80041b8:	f3bf 8f5f 	dmb	sy
}
 80041bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80041be:	4b07      	ldr	r3, [pc, #28]	@ (80041dc <HAL_MPU_Disable+0x28>)
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	4a06      	ldr	r2, [pc, #24]	@ (80041dc <HAL_MPU_Disable+0x28>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80041ca:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_MPU_Disable+0x2c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	605a      	str	r2, [r3, #4]
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000ed00 	.word	0xe000ed00
 80041e0:	e000ed90 	.word	0xe000ed90

080041e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80041ec:	4a0b      	ldr	r2, [pc, #44]	@ (800421c <HAL_MPU_Enable+0x38>)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80041f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004220 <HAL_MPU_Enable+0x3c>)
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	4a09      	ldr	r2, [pc, #36]	@ (8004220 <HAL_MPU_Enable+0x3c>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004200:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004202:	f3bf 8f4f 	dsb	sy
}
 8004206:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004208:	f3bf 8f6f 	isb	sy
}
 800420c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000ed90 	.word	0xe000ed90
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	785a      	ldrb	r2, [r3, #1]
 8004230:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <HAL_MPU_ConfigRegion+0x7c>)
 8004232:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004234:	4b1a      	ldr	r3, [pc, #104]	@ (80042a0 <HAL_MPU_ConfigRegion+0x7c>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	4a19      	ldr	r2, [pc, #100]	@ (80042a0 <HAL_MPU_ConfigRegion+0x7c>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004240:	4a17      	ldr	r2, [pc, #92]	@ (80042a0 <HAL_MPU_ConfigRegion+0x7c>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7b1b      	ldrb	r3, [r3, #12]
 800424c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7adb      	ldrb	r3, [r3, #11]
 8004252:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004254:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	7a9b      	ldrb	r3, [r3, #10]
 800425a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800425c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7b5b      	ldrb	r3, [r3, #13]
 8004262:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004264:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7b9b      	ldrb	r3, [r3, #14]
 800426a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800426c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7bdb      	ldrb	r3, [r3, #15]
 8004272:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004274:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7a5b      	ldrb	r3, [r3, #9]
 800427a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800427c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	7a1b      	ldrb	r3, [r3, #8]
 8004282:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004284:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800428c:	4a04      	ldr	r2, [pc, #16]	@ (80042a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800428e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004290:	6113      	str	r3, [r2, #16]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000ed90 	.word	0xe000ed90

080042a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80042ac:	f7fe fb84 	bl	80029b8 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e316      	b.n	80048ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a66      	ldr	r2, [pc, #408]	@ (800445c <HAL_DMA_Init+0x1b8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d04a      	beq.n	800435c <HAL_DMA_Init+0xb8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a65      	ldr	r2, [pc, #404]	@ (8004460 <HAL_DMA_Init+0x1bc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d045      	beq.n	800435c <HAL_DMA_Init+0xb8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a63      	ldr	r2, [pc, #396]	@ (8004464 <HAL_DMA_Init+0x1c0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d040      	beq.n	800435c <HAL_DMA_Init+0xb8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a62      	ldr	r2, [pc, #392]	@ (8004468 <HAL_DMA_Init+0x1c4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d03b      	beq.n	800435c <HAL_DMA_Init+0xb8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a60      	ldr	r2, [pc, #384]	@ (800446c <HAL_DMA_Init+0x1c8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d036      	beq.n	800435c <HAL_DMA_Init+0xb8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004470 <HAL_DMA_Init+0x1cc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d031      	beq.n	800435c <HAL_DMA_Init+0xb8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004474 <HAL_DMA_Init+0x1d0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d02c      	beq.n	800435c <HAL_DMA_Init+0xb8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a5c      	ldr	r2, [pc, #368]	@ (8004478 <HAL_DMA_Init+0x1d4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d027      	beq.n	800435c <HAL_DMA_Init+0xb8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a5a      	ldr	r2, [pc, #360]	@ (800447c <HAL_DMA_Init+0x1d8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d022      	beq.n	800435c <HAL_DMA_Init+0xb8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a59      	ldr	r2, [pc, #356]	@ (8004480 <HAL_DMA_Init+0x1dc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d01d      	beq.n	800435c <HAL_DMA_Init+0xb8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a57      	ldr	r2, [pc, #348]	@ (8004484 <HAL_DMA_Init+0x1e0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d018      	beq.n	800435c <HAL_DMA_Init+0xb8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a56      	ldr	r2, [pc, #344]	@ (8004488 <HAL_DMA_Init+0x1e4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <HAL_DMA_Init+0xb8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a54      	ldr	r2, [pc, #336]	@ (800448c <HAL_DMA_Init+0x1e8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00e      	beq.n	800435c <HAL_DMA_Init+0xb8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a53      	ldr	r2, [pc, #332]	@ (8004490 <HAL_DMA_Init+0x1ec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_DMA_Init+0xb8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a51      	ldr	r2, [pc, #324]	@ (8004494 <HAL_DMA_Init+0x1f0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_DMA_Init+0xb8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a50      	ldr	r2, [pc, #320]	@ (8004498 <HAL_DMA_Init+0x1f4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d101      	bne.n	8004360 <HAL_DMA_Init+0xbc>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <HAL_DMA_Init+0xbe>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 813b 	beq.w	80045de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a37      	ldr	r2, [pc, #220]	@ (800445c <HAL_DMA_Init+0x1b8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d04a      	beq.n	8004418 <HAL_DMA_Init+0x174>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a36      	ldr	r2, [pc, #216]	@ (8004460 <HAL_DMA_Init+0x1bc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d045      	beq.n	8004418 <HAL_DMA_Init+0x174>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a34      	ldr	r2, [pc, #208]	@ (8004464 <HAL_DMA_Init+0x1c0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d040      	beq.n	8004418 <HAL_DMA_Init+0x174>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a33      	ldr	r2, [pc, #204]	@ (8004468 <HAL_DMA_Init+0x1c4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d03b      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a31      	ldr	r2, [pc, #196]	@ (800446c <HAL_DMA_Init+0x1c8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d036      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a30      	ldr	r2, [pc, #192]	@ (8004470 <HAL_DMA_Init+0x1cc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d031      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004474 <HAL_DMA_Init+0x1d0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02c      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004478 <HAL_DMA_Init+0x1d4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d027      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2b      	ldr	r2, [pc, #172]	@ (800447c <HAL_DMA_Init+0x1d8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d022      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004480 <HAL_DMA_Init+0x1dc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d01d      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a28      	ldr	r2, [pc, #160]	@ (8004484 <HAL_DMA_Init+0x1e0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d018      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a27      	ldr	r2, [pc, #156]	@ (8004488 <HAL_DMA_Init+0x1e4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a25      	ldr	r2, [pc, #148]	@ (800448c <HAL_DMA_Init+0x1e8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <HAL_DMA_Init+0x174>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a24      	ldr	r2, [pc, #144]	@ (8004490 <HAL_DMA_Init+0x1ec>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_DMA_Init+0x174>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a22      	ldr	r2, [pc, #136]	@ (8004494 <HAL_DMA_Init+0x1f0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_DMA_Init+0x174>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a21      	ldr	r2, [pc, #132]	@ (8004498 <HAL_DMA_Init+0x1f4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d108      	bne.n	800442a <HAL_DMA_Init+0x186>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e007      	b.n	800443a <HAL_DMA_Init+0x196>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800443a:	e02f      	b.n	800449c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800443c:	f7fe fabc 	bl	80029b8 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b05      	cmp	r3, #5
 8004448:	d928      	bls.n	800449c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2203      	movs	r2, #3
 8004454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e246      	b.n	80048ea <HAL_DMA_Init+0x646>
 800445c:	40020010 	.word	0x40020010
 8004460:	40020028 	.word	0x40020028
 8004464:	40020040 	.word	0x40020040
 8004468:	40020058 	.word	0x40020058
 800446c:	40020070 	.word	0x40020070
 8004470:	40020088 	.word	0x40020088
 8004474:	400200a0 	.word	0x400200a0
 8004478:	400200b8 	.word	0x400200b8
 800447c:	40020410 	.word	0x40020410
 8004480:	40020428 	.word	0x40020428
 8004484:	40020440 	.word	0x40020440
 8004488:	40020458 	.word	0x40020458
 800448c:	40020470 	.word	0x40020470
 8004490:	40020488 	.word	0x40020488
 8004494:	400204a0 	.word	0x400204a0
 8004498:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1c8      	bne.n	800443c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4b83      	ldr	r3, [pc, #524]	@ (80046c4 <HAL_DMA_Init+0x420>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80044c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d107      	bne.n	8004500 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	4313      	orrs	r3, r2
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004500:	4b71      	ldr	r3, [pc, #452]	@ (80046c8 <HAL_DMA_Init+0x424>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b71      	ldr	r3, [pc, #452]	@ (80046cc <HAL_DMA_Init+0x428>)
 8004506:	4013      	ands	r3, r2
 8004508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800450c:	d328      	bcc.n	8004560 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b28      	cmp	r3, #40	@ 0x28
 8004514:	d903      	bls.n	800451e <HAL_DMA_Init+0x27a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b2e      	cmp	r3, #46	@ 0x2e
 800451c:	d917      	bls.n	800454e <HAL_DMA_Init+0x2aa>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b3e      	cmp	r3, #62	@ 0x3e
 8004524:	d903      	bls.n	800452e <HAL_DMA_Init+0x28a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b42      	cmp	r3, #66	@ 0x42
 800452c:	d90f      	bls.n	800454e <HAL_DMA_Init+0x2aa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b46      	cmp	r3, #70	@ 0x46
 8004534:	d903      	bls.n	800453e <HAL_DMA_Init+0x29a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b48      	cmp	r3, #72	@ 0x48
 800453c:	d907      	bls.n	800454e <HAL_DMA_Init+0x2aa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b4e      	cmp	r3, #78	@ 0x4e
 8004544:	d905      	bls.n	8004552 <HAL_DMA_Init+0x2ae>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b52      	cmp	r3, #82	@ 0x52
 800454c:	d801      	bhi.n	8004552 <HAL_DMA_Init+0x2ae>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_DMA_Init+0x2b0>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800455e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	2b04      	cmp	r3, #4
 8004588:	d117      	bne.n	80045ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00e      	beq.n	80045ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f002 fb4d 	bl	8006c3c <DMA_CheckFifoParam>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2240      	movs	r2, #64	@ 0x40
 80045ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e197      	b.n	80048ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f002 fa88 	bl	8006ad8 <DMA_CalcBaseAndBitshift>
 80045c8:	4603      	mov	r3, r0
 80045ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	223f      	movs	r2, #63	@ 0x3f
 80045d6:	409a      	lsls	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	e0cd      	b.n	800477a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3b      	ldr	r2, [pc, #236]	@ (80046d0 <HAL_DMA_Init+0x42c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d022      	beq.n	800462e <HAL_DMA_Init+0x38a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a39      	ldr	r2, [pc, #228]	@ (80046d4 <HAL_DMA_Init+0x430>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01d      	beq.n	800462e <HAL_DMA_Init+0x38a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <HAL_DMA_Init+0x434>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d018      	beq.n	800462e <HAL_DMA_Init+0x38a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a36      	ldr	r2, [pc, #216]	@ (80046dc <HAL_DMA_Init+0x438>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_DMA_Init+0x38a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a35      	ldr	r2, [pc, #212]	@ (80046e0 <HAL_DMA_Init+0x43c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_DMA_Init+0x38a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a33      	ldr	r2, [pc, #204]	@ (80046e4 <HAL_DMA_Init+0x440>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_DMA_Init+0x38a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a32      	ldr	r2, [pc, #200]	@ (80046e8 <HAL_DMA_Init+0x444>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_DMA_Init+0x38a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a30      	ldr	r2, [pc, #192]	@ (80046ec <HAL_DMA_Init+0x448>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d101      	bne.n	8004632 <HAL_DMA_Init+0x38e>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_DMA_Init+0x390>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8097 	beq.w	8004768 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a24      	ldr	r2, [pc, #144]	@ (80046d0 <HAL_DMA_Init+0x42c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d021      	beq.n	8004688 <HAL_DMA_Init+0x3e4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a22      	ldr	r2, [pc, #136]	@ (80046d4 <HAL_DMA_Init+0x430>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01c      	beq.n	8004688 <HAL_DMA_Init+0x3e4>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a21      	ldr	r2, [pc, #132]	@ (80046d8 <HAL_DMA_Init+0x434>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d017      	beq.n	8004688 <HAL_DMA_Init+0x3e4>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <HAL_DMA_Init+0x438>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d012      	beq.n	8004688 <HAL_DMA_Init+0x3e4>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_DMA_Init+0x43c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00d      	beq.n	8004688 <HAL_DMA_Init+0x3e4>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <HAL_DMA_Init+0x440>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d008      	beq.n	8004688 <HAL_DMA_Init+0x3e4>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <HAL_DMA_Init+0x444>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <HAL_DMA_Init+0x3e4>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <HAL_DMA_Init+0x448>)
 8004686:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4b13      	ldr	r3, [pc, #76]	@ (80046f0 <HAL_DMA_Init+0x44c>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d021      	beq.n	80046f4 <HAL_DMA_Init+0x450>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b80      	cmp	r3, #128	@ 0x80
 80046b6:	d102      	bne.n	80046be <HAL_DMA_Init+0x41a>
 80046b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046bc:	e01b      	b.n	80046f6 <HAL_DMA_Init+0x452>
 80046be:	2300      	movs	r3, #0
 80046c0:	e019      	b.n	80046f6 <HAL_DMA_Init+0x452>
 80046c2:	bf00      	nop
 80046c4:	fe10803f 	.word	0xfe10803f
 80046c8:	5c001000 	.word	0x5c001000
 80046cc:	ffff0000 	.word	0xffff0000
 80046d0:	58025408 	.word	0x58025408
 80046d4:	5802541c 	.word	0x5802541c
 80046d8:	58025430 	.word	0x58025430
 80046dc:	58025444 	.word	0x58025444
 80046e0:	58025458 	.word	0x58025458
 80046e4:	5802546c 	.word	0x5802546c
 80046e8:	58025480 	.word	0x58025480
 80046ec:	58025494 	.word	0x58025494
 80046f0:	fffe000f 	.word	0xfffe000f
 80046f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68d2      	ldr	r2, [r2, #12]
 80046fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800470c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800471c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004724:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	4b6e      	ldr	r3, [pc, #440]	@ (80048f4 <HAL_DMA_Init+0x650>)
 800473c:	4413      	add	r3, r2
 800473e:	4a6e      	ldr	r2, [pc, #440]	@ (80048f8 <HAL_DMA_Init+0x654>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	009a      	lsls	r2, r3, #2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f002 f9c3 	bl	8006ad8 <DMA_CalcBaseAndBitshift>
 8004752:	4603      	mov	r3, r0
 8004754:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	2201      	movs	r2, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	e008      	b.n	800477a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2240      	movs	r2, #64	@ 0x40
 800476c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2203      	movs	r2, #3
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0b7      	b.n	80048ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a5f      	ldr	r2, [pc, #380]	@ (80048fc <HAL_DMA_Init+0x658>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d072      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a5d      	ldr	r2, [pc, #372]	@ (8004900 <HAL_DMA_Init+0x65c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d06d      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5c      	ldr	r2, [pc, #368]	@ (8004904 <HAL_DMA_Init+0x660>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d068      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5a      	ldr	r2, [pc, #360]	@ (8004908 <HAL_DMA_Init+0x664>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d063      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a59      	ldr	r2, [pc, #356]	@ (800490c <HAL_DMA_Init+0x668>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d05e      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a57      	ldr	r2, [pc, #348]	@ (8004910 <HAL_DMA_Init+0x66c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d059      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a56      	ldr	r2, [pc, #344]	@ (8004914 <HAL_DMA_Init+0x670>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d054      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a54      	ldr	r2, [pc, #336]	@ (8004918 <HAL_DMA_Init+0x674>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d04f      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a53      	ldr	r2, [pc, #332]	@ (800491c <HAL_DMA_Init+0x678>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d04a      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a51      	ldr	r2, [pc, #324]	@ (8004920 <HAL_DMA_Init+0x67c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d045      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a50      	ldr	r2, [pc, #320]	@ (8004924 <HAL_DMA_Init+0x680>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d040      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a4e      	ldr	r2, [pc, #312]	@ (8004928 <HAL_DMA_Init+0x684>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d03b      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a4d      	ldr	r2, [pc, #308]	@ (800492c <HAL_DMA_Init+0x688>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d036      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a4b      	ldr	r2, [pc, #300]	@ (8004930 <HAL_DMA_Init+0x68c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d031      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a4a      	ldr	r2, [pc, #296]	@ (8004934 <HAL_DMA_Init+0x690>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d02c      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a48      	ldr	r2, [pc, #288]	@ (8004938 <HAL_DMA_Init+0x694>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d027      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a47      	ldr	r2, [pc, #284]	@ (800493c <HAL_DMA_Init+0x698>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d022      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a45      	ldr	r2, [pc, #276]	@ (8004940 <HAL_DMA_Init+0x69c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01d      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a44      	ldr	r2, [pc, #272]	@ (8004944 <HAL_DMA_Init+0x6a0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d018      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a42      	ldr	r2, [pc, #264]	@ (8004948 <HAL_DMA_Init+0x6a4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a41      	ldr	r2, [pc, #260]	@ (800494c <HAL_DMA_Init+0x6a8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00e      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a3f      	ldr	r2, [pc, #252]	@ (8004950 <HAL_DMA_Init+0x6ac>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3e      	ldr	r2, [pc, #248]	@ (8004954 <HAL_DMA_Init+0x6b0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_DMA_Init+0x5c6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3c      	ldr	r2, [pc, #240]	@ (8004958 <HAL_DMA_Init+0x6b4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_DMA_Init+0x5ca>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_DMA_Init+0x5cc>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d032      	beq.n	80048da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f002 fa5d 	bl	8006d34 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b80      	cmp	r3, #128	@ 0x80
 8004880:	d102      	bne.n	8004888 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800489c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d010      	beq.n	80048c8 <HAL_DMA_Init+0x624>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d80c      	bhi.n	80048c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f002 fada 	bl	8006e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	e008      	b.n	80048da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	a7fdabf8 	.word	0xa7fdabf8
 80048f8:	cccccccd 	.word	0xcccccccd
 80048fc:	40020010 	.word	0x40020010
 8004900:	40020028 	.word	0x40020028
 8004904:	40020040 	.word	0x40020040
 8004908:	40020058 	.word	0x40020058
 800490c:	40020070 	.word	0x40020070
 8004910:	40020088 	.word	0x40020088
 8004914:	400200a0 	.word	0x400200a0
 8004918:	400200b8 	.word	0x400200b8
 800491c:	40020410 	.word	0x40020410
 8004920:	40020428 	.word	0x40020428
 8004924:	40020440 	.word	0x40020440
 8004928:	40020458 	.word	0x40020458
 800492c:	40020470 	.word	0x40020470
 8004930:	40020488 	.word	0x40020488
 8004934:	400204a0 	.word	0x400204a0
 8004938:	400204b8 	.word	0x400204b8
 800493c:	58025408 	.word	0x58025408
 8004940:	5802541c 	.word	0x5802541c
 8004944:	58025430 	.word	0x58025430
 8004948:	58025444 	.word	0x58025444
 800494c:	58025458 	.word	0x58025458
 8004950:	5802546c 	.word	0x5802546c
 8004954:	58025480 	.word	0x58025480
 8004958:	58025494 	.word	0x58025494

0800495c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e226      	b.n	8004dc6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_DMA_Start_IT+0x2a>
 8004982:	2302      	movs	r3, #2
 8004984:	e21f      	b.n	8004dc6 <HAL_DMA_Start_IT+0x46a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	f040 820a 	bne.w	8004db0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a68      	ldr	r2, [pc, #416]	@ (8004b50 <HAL_DMA_Start_IT+0x1f4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d04a      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a66      	ldr	r2, [pc, #408]	@ (8004b54 <HAL_DMA_Start_IT+0x1f8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d045      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a65      	ldr	r2, [pc, #404]	@ (8004b58 <HAL_DMA_Start_IT+0x1fc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d040      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a63      	ldr	r2, [pc, #396]	@ (8004b5c <HAL_DMA_Start_IT+0x200>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d03b      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a62      	ldr	r2, [pc, #392]	@ (8004b60 <HAL_DMA_Start_IT+0x204>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d036      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a60      	ldr	r2, [pc, #384]	@ (8004b64 <HAL_DMA_Start_IT+0x208>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d031      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004b68 <HAL_DMA_Start_IT+0x20c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d02c      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b6c <HAL_DMA_Start_IT+0x210>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d027      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004b70 <HAL_DMA_Start_IT+0x214>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a5a      	ldr	r2, [pc, #360]	@ (8004b74 <HAL_DMA_Start_IT+0x218>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01d      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a59      	ldr	r2, [pc, #356]	@ (8004b78 <HAL_DMA_Start_IT+0x21c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d018      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a57      	ldr	r2, [pc, #348]	@ (8004b7c <HAL_DMA_Start_IT+0x220>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a56      	ldr	r2, [pc, #344]	@ (8004b80 <HAL_DMA_Start_IT+0x224>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00e      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a54      	ldr	r2, [pc, #336]	@ (8004b84 <HAL_DMA_Start_IT+0x228>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a53      	ldr	r2, [pc, #332]	@ (8004b88 <HAL_DMA_Start_IT+0x22c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_DMA_Start_IT+0xee>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a51      	ldr	r2, [pc, #324]	@ (8004b8c <HAL_DMA_Start_IT+0x230>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d108      	bne.n	8004a5c <HAL_DMA_Start_IT+0x100>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e007      	b.n	8004a6c <HAL_DMA_Start_IT+0x110>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f001 fe84 	bl	8006780 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a34      	ldr	r2, [pc, #208]	@ (8004b50 <HAL_DMA_Start_IT+0x1f4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d04a      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a33      	ldr	r2, [pc, #204]	@ (8004b54 <HAL_DMA_Start_IT+0x1f8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d045      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a31      	ldr	r2, [pc, #196]	@ (8004b58 <HAL_DMA_Start_IT+0x1fc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d040      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a30      	ldr	r2, [pc, #192]	@ (8004b5c <HAL_DMA_Start_IT+0x200>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d03b      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b60 <HAL_DMA_Start_IT+0x204>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d036      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2d      	ldr	r2, [pc, #180]	@ (8004b64 <HAL_DMA_Start_IT+0x208>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d031      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b68 <HAL_DMA_Start_IT+0x20c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d02c      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b6c <HAL_DMA_Start_IT+0x210>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d027      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a28      	ldr	r2, [pc, #160]	@ (8004b70 <HAL_DMA_Start_IT+0x214>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d022      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a27      	ldr	r2, [pc, #156]	@ (8004b74 <HAL_DMA_Start_IT+0x218>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01d      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a25      	ldr	r2, [pc, #148]	@ (8004b78 <HAL_DMA_Start_IT+0x21c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d018      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a24      	ldr	r2, [pc, #144]	@ (8004b7c <HAL_DMA_Start_IT+0x220>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a22      	ldr	r2, [pc, #136]	@ (8004b80 <HAL_DMA_Start_IT+0x224>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a21      	ldr	r2, [pc, #132]	@ (8004b84 <HAL_DMA_Start_IT+0x228>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1f      	ldr	r2, [pc, #124]	@ (8004b88 <HAL_DMA_Start_IT+0x22c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_DMA_Start_IT+0x1bc>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1e      	ldr	r2, [pc, #120]	@ (8004b8c <HAL_DMA_Start_IT+0x230>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <HAL_DMA_Start_IT+0x1c0>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <HAL_DMA_Start_IT+0x1c2>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d036      	beq.n	8004b90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 021e 	bic.w	r2, r3, #30
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0216 	orr.w	r2, r2, #22
 8004b34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d03e      	beq.n	8004bbc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0208 	orr.w	r2, r2, #8
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e035      	b.n	8004bbc <HAL_DMA_Start_IT+0x260>
 8004b50:	40020010 	.word	0x40020010
 8004b54:	40020028 	.word	0x40020028
 8004b58:	40020040 	.word	0x40020040
 8004b5c:	40020058 	.word	0x40020058
 8004b60:	40020070 	.word	0x40020070
 8004b64:	40020088 	.word	0x40020088
 8004b68:	400200a0 	.word	0x400200a0
 8004b6c:	400200b8 	.word	0x400200b8
 8004b70:	40020410 	.word	0x40020410
 8004b74:	40020428 	.word	0x40020428
 8004b78:	40020440 	.word	0x40020440
 8004b7c:	40020458 	.word	0x40020458
 8004b80:	40020470 	.word	0x40020470
 8004b84:	40020488 	.word	0x40020488
 8004b88:	400204a0 	.word	0x400204a0
 8004b8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 020e 	bic.w	r2, r3, #14
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 020a 	orr.w	r2, r2, #10
 8004ba2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0204 	orr.w	r2, r2, #4
 8004bba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a83      	ldr	r2, [pc, #524]	@ (8004dd0 <HAL_DMA_Start_IT+0x474>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d072      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a82      	ldr	r2, [pc, #520]	@ (8004dd4 <HAL_DMA_Start_IT+0x478>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d06d      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a80      	ldr	r2, [pc, #512]	@ (8004dd8 <HAL_DMA_Start_IT+0x47c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d068      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a7f      	ldr	r2, [pc, #508]	@ (8004ddc <HAL_DMA_Start_IT+0x480>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d063      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a7d      	ldr	r2, [pc, #500]	@ (8004de0 <HAL_DMA_Start_IT+0x484>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d05e      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8004de4 <HAL_DMA_Start_IT+0x488>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d059      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a7a      	ldr	r2, [pc, #488]	@ (8004de8 <HAL_DMA_Start_IT+0x48c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d054      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a79      	ldr	r2, [pc, #484]	@ (8004dec <HAL_DMA_Start_IT+0x490>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d04f      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a77      	ldr	r2, [pc, #476]	@ (8004df0 <HAL_DMA_Start_IT+0x494>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d04a      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a76      	ldr	r2, [pc, #472]	@ (8004df4 <HAL_DMA_Start_IT+0x498>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d045      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a74      	ldr	r2, [pc, #464]	@ (8004df8 <HAL_DMA_Start_IT+0x49c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d040      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a73      	ldr	r2, [pc, #460]	@ (8004dfc <HAL_DMA_Start_IT+0x4a0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d03b      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a71      	ldr	r2, [pc, #452]	@ (8004e00 <HAL_DMA_Start_IT+0x4a4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d036      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a70      	ldr	r2, [pc, #448]	@ (8004e04 <HAL_DMA_Start_IT+0x4a8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d031      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e08 <HAL_DMA_Start_IT+0x4ac>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d02c      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6d      	ldr	r2, [pc, #436]	@ (8004e0c <HAL_DMA_Start_IT+0x4b0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d027      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a6b      	ldr	r2, [pc, #428]	@ (8004e10 <HAL_DMA_Start_IT+0x4b4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a6a      	ldr	r2, [pc, #424]	@ (8004e14 <HAL_DMA_Start_IT+0x4b8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01d      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a68      	ldr	r2, [pc, #416]	@ (8004e18 <HAL_DMA_Start_IT+0x4bc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a67      	ldr	r2, [pc, #412]	@ (8004e1c <HAL_DMA_Start_IT+0x4c0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a65      	ldr	r2, [pc, #404]	@ (8004e20 <HAL_DMA_Start_IT+0x4c4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a64      	ldr	r2, [pc, #400]	@ (8004e24 <HAL_DMA_Start_IT+0x4c8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a62      	ldr	r2, [pc, #392]	@ (8004e28 <HAL_DMA_Start_IT+0x4cc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_Start_IT+0x350>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a61      	ldr	r2, [pc, #388]	@ (8004e2c <HAL_DMA_Start_IT+0x4d0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_DMA_Start_IT+0x354>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_DMA_Start_IT+0x356>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d01a      	beq.n	8004cec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a37      	ldr	r2, [pc, #220]	@ (8004dd0 <HAL_DMA_Start_IT+0x474>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d04a      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a36      	ldr	r2, [pc, #216]	@ (8004dd4 <HAL_DMA_Start_IT+0x478>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d045      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a34      	ldr	r2, [pc, #208]	@ (8004dd8 <HAL_DMA_Start_IT+0x47c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d040      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a33      	ldr	r2, [pc, #204]	@ (8004ddc <HAL_DMA_Start_IT+0x480>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d03b      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a31      	ldr	r2, [pc, #196]	@ (8004de0 <HAL_DMA_Start_IT+0x484>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d036      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a30      	ldr	r2, [pc, #192]	@ (8004de4 <HAL_DMA_Start_IT+0x488>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d031      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004de8 <HAL_DMA_Start_IT+0x48c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02c      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2d      	ldr	r2, [pc, #180]	@ (8004dec <HAL_DMA_Start_IT+0x490>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d027      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2b      	ldr	r2, [pc, #172]	@ (8004df0 <HAL_DMA_Start_IT+0x494>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004df4 <HAL_DMA_Start_IT+0x498>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01d      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a28      	ldr	r2, [pc, #160]	@ (8004df8 <HAL_DMA_Start_IT+0x49c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a27      	ldr	r2, [pc, #156]	@ (8004dfc <HAL_DMA_Start_IT+0x4a0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a25      	ldr	r2, [pc, #148]	@ (8004e00 <HAL_DMA_Start_IT+0x4a4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a24      	ldr	r2, [pc, #144]	@ (8004e04 <HAL_DMA_Start_IT+0x4a8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <HAL_DMA_Start_IT+0x4ac>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_DMA_Start_IT+0x430>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a21      	ldr	r2, [pc, #132]	@ (8004e0c <HAL_DMA_Start_IT+0x4b0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <HAL_DMA_Start_IT+0x442>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e012      	b.n	8004dc4 <HAL_DMA_Start_IT+0x468>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e009      	b.n	8004dc4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004db6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40020010 	.word	0x40020010
 8004dd4:	40020028 	.word	0x40020028
 8004dd8:	40020040 	.word	0x40020040
 8004ddc:	40020058 	.word	0x40020058
 8004de0:	40020070 	.word	0x40020070
 8004de4:	40020088 	.word	0x40020088
 8004de8:	400200a0 	.word	0x400200a0
 8004dec:	400200b8 	.word	0x400200b8
 8004df0:	40020410 	.word	0x40020410
 8004df4:	40020428 	.word	0x40020428
 8004df8:	40020440 	.word	0x40020440
 8004dfc:	40020458 	.word	0x40020458
 8004e00:	40020470 	.word	0x40020470
 8004e04:	40020488 	.word	0x40020488
 8004e08:	400204a0 	.word	0x400204a0
 8004e0c:	400204b8 	.word	0x400204b8
 8004e10:	58025408 	.word	0x58025408
 8004e14:	5802541c 	.word	0x5802541c
 8004e18:	58025430 	.word	0x58025430
 8004e1c:	58025444 	.word	0x58025444
 8004e20:	58025458 	.word	0x58025458
 8004e24:	5802546c 	.word	0x5802546c
 8004e28:	58025480 	.word	0x58025480
 8004e2c:	58025494 	.word	0x58025494

08004e30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e38:	f7fd fdbe 	bl	80029b8 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e2dc      	b.n	8005402 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d008      	beq.n	8004e66 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2280      	movs	r2, #128	@ 0x80
 8004e58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e2cd      	b.n	8005402 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a76      	ldr	r2, [pc, #472]	@ (8005044 <HAL_DMA_Abort+0x214>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d04a      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a74      	ldr	r2, [pc, #464]	@ (8005048 <HAL_DMA_Abort+0x218>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d045      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a73      	ldr	r2, [pc, #460]	@ (800504c <HAL_DMA_Abort+0x21c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d040      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a71      	ldr	r2, [pc, #452]	@ (8005050 <HAL_DMA_Abort+0x220>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d03b      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a70      	ldr	r2, [pc, #448]	@ (8005054 <HAL_DMA_Abort+0x224>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d036      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005058 <HAL_DMA_Abort+0x228>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d031      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6d      	ldr	r2, [pc, #436]	@ (800505c <HAL_DMA_Abort+0x22c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d02c      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005060 <HAL_DMA_Abort+0x230>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d027      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6a      	ldr	r2, [pc, #424]	@ (8005064 <HAL_DMA_Abort+0x234>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d022      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a68      	ldr	r2, [pc, #416]	@ (8005068 <HAL_DMA_Abort+0x238>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01d      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a67      	ldr	r2, [pc, #412]	@ (800506c <HAL_DMA_Abort+0x23c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d018      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a65      	ldr	r2, [pc, #404]	@ (8005070 <HAL_DMA_Abort+0x240>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a64      	ldr	r2, [pc, #400]	@ (8005074 <HAL_DMA_Abort+0x244>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a62      	ldr	r2, [pc, #392]	@ (8005078 <HAL_DMA_Abort+0x248>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a61      	ldr	r2, [pc, #388]	@ (800507c <HAL_DMA_Abort+0x24c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_DMA_Abort+0xd6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5f      	ldr	r2, [pc, #380]	@ (8005080 <HAL_DMA_Abort+0x250>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <HAL_DMA_Abort+0xda>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_DMA_Abort+0xdc>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 021e 	bic.w	r2, r2, #30
 8004f1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e00a      	b.n	8004f4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 020e 	bic.w	r2, r2, #14
 8004f46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3c      	ldr	r2, [pc, #240]	@ (8005044 <HAL_DMA_Abort+0x214>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d072      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3a      	ldr	r2, [pc, #232]	@ (8005048 <HAL_DMA_Abort+0x218>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d06d      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a39      	ldr	r2, [pc, #228]	@ (800504c <HAL_DMA_Abort+0x21c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d068      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a37      	ldr	r2, [pc, #220]	@ (8005050 <HAL_DMA_Abort+0x220>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d063      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a36      	ldr	r2, [pc, #216]	@ (8005054 <HAL_DMA_Abort+0x224>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d05e      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a34      	ldr	r2, [pc, #208]	@ (8005058 <HAL_DMA_Abort+0x228>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d059      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a33      	ldr	r2, [pc, #204]	@ (800505c <HAL_DMA_Abort+0x22c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d054      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a31      	ldr	r2, [pc, #196]	@ (8005060 <HAL_DMA_Abort+0x230>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d04f      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a30      	ldr	r2, [pc, #192]	@ (8005064 <HAL_DMA_Abort+0x234>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d04a      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a2e      	ldr	r2, [pc, #184]	@ (8005068 <HAL_DMA_Abort+0x238>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d045      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800506c <HAL_DMA_Abort+0x23c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d040      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005070 <HAL_DMA_Abort+0x240>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d03b      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2a      	ldr	r2, [pc, #168]	@ (8005074 <HAL_DMA_Abort+0x244>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d036      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a28      	ldr	r2, [pc, #160]	@ (8005078 <HAL_DMA_Abort+0x248>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d031      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a27      	ldr	r2, [pc, #156]	@ (800507c <HAL_DMA_Abort+0x24c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d02c      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a25      	ldr	r2, [pc, #148]	@ (8005080 <HAL_DMA_Abort+0x250>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d027      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a24      	ldr	r2, [pc, #144]	@ (8005084 <HAL_DMA_Abort+0x254>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d022      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a22      	ldr	r2, [pc, #136]	@ (8005088 <HAL_DMA_Abort+0x258>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01d      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a21      	ldr	r2, [pc, #132]	@ (800508c <HAL_DMA_Abort+0x25c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d018      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1f      	ldr	r2, [pc, #124]	@ (8005090 <HAL_DMA_Abort+0x260>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1e      	ldr	r2, [pc, #120]	@ (8005094 <HAL_DMA_Abort+0x264>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_DMA_Abort+0x268>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1b      	ldr	r2, [pc, #108]	@ (800509c <HAL_DMA_Abort+0x26c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_DMA_Abort+0x20e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a19      	ldr	r2, [pc, #100]	@ (80050a0 <HAL_DMA_Abort+0x270>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d132      	bne.n	80050a4 <HAL_DMA_Abort+0x274>
 800503e:	2301      	movs	r3, #1
 8005040:	e031      	b.n	80050a6 <HAL_DMA_Abort+0x276>
 8005042:	bf00      	nop
 8005044:	40020010 	.word	0x40020010
 8005048:	40020028 	.word	0x40020028
 800504c:	40020040 	.word	0x40020040
 8005050:	40020058 	.word	0x40020058
 8005054:	40020070 	.word	0x40020070
 8005058:	40020088 	.word	0x40020088
 800505c:	400200a0 	.word	0x400200a0
 8005060:	400200b8 	.word	0x400200b8
 8005064:	40020410 	.word	0x40020410
 8005068:	40020428 	.word	0x40020428
 800506c:	40020440 	.word	0x40020440
 8005070:	40020458 	.word	0x40020458
 8005074:	40020470 	.word	0x40020470
 8005078:	40020488 	.word	0x40020488
 800507c:	400204a0 	.word	0x400204a0
 8005080:	400204b8 	.word	0x400204b8
 8005084:	58025408 	.word	0x58025408
 8005088:	5802541c 	.word	0x5802541c
 800508c:	58025430 	.word	0x58025430
 8005090:	58025444 	.word	0x58025444
 8005094:	58025458 	.word	0x58025458
 8005098:	5802546c 	.word	0x5802546c
 800509c:	58025480 	.word	0x58025480
 80050a0:	58025494 	.word	0x58025494
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6d      	ldr	r2, [pc, #436]	@ (8005274 <HAL_DMA_Abort+0x444>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d04a      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a6b      	ldr	r2, [pc, #428]	@ (8005278 <HAL_DMA_Abort+0x448>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d045      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a6a      	ldr	r2, [pc, #424]	@ (800527c <HAL_DMA_Abort+0x44c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d040      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a68      	ldr	r2, [pc, #416]	@ (8005280 <HAL_DMA_Abort+0x450>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d03b      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a67      	ldr	r2, [pc, #412]	@ (8005284 <HAL_DMA_Abort+0x454>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d036      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a65      	ldr	r2, [pc, #404]	@ (8005288 <HAL_DMA_Abort+0x458>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d031      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a64      	ldr	r2, [pc, #400]	@ (800528c <HAL_DMA_Abort+0x45c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d02c      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a62      	ldr	r2, [pc, #392]	@ (8005290 <HAL_DMA_Abort+0x460>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d027      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a61      	ldr	r2, [pc, #388]	@ (8005294 <HAL_DMA_Abort+0x464>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d022      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a5f      	ldr	r2, [pc, #380]	@ (8005298 <HAL_DMA_Abort+0x468>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01d      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a5e      	ldr	r2, [pc, #376]	@ (800529c <HAL_DMA_Abort+0x46c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d018      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a5c      	ldr	r2, [pc, #368]	@ (80052a0 <HAL_DMA_Abort+0x470>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a5b      	ldr	r2, [pc, #364]	@ (80052a4 <HAL_DMA_Abort+0x474>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00e      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a59      	ldr	r2, [pc, #356]	@ (80052a8 <HAL_DMA_Abort+0x478>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d009      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a58      	ldr	r2, [pc, #352]	@ (80052ac <HAL_DMA_Abort+0x47c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_DMA_Abort+0x32a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a56      	ldr	r2, [pc, #344]	@ (80052b0 <HAL_DMA_Abort+0x480>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d108      	bne.n	800516c <HAL_DMA_Abort+0x33c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e007      	b.n	800517c <HAL_DMA_Abort+0x34c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800517c:	e013      	b.n	80051a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800517e:	f7fd fc1b 	bl	80029b8 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b05      	cmp	r3, #5
 800518a:	d90c      	bls.n	80051a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2203      	movs	r2, #3
 8005196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e12d      	b.n	8005402 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e5      	bne.n	800517e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005274 <HAL_DMA_Abort+0x444>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d04a      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005278 <HAL_DMA_Abort+0x448>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d045      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2c      	ldr	r2, [pc, #176]	@ (800527c <HAL_DMA_Abort+0x44c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d040      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005280 <HAL_DMA_Abort+0x450>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d03b      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a29      	ldr	r2, [pc, #164]	@ (8005284 <HAL_DMA_Abort+0x454>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d036      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a27      	ldr	r2, [pc, #156]	@ (8005288 <HAL_DMA_Abort+0x458>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d031      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a26      	ldr	r2, [pc, #152]	@ (800528c <HAL_DMA_Abort+0x45c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d02c      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a24      	ldr	r2, [pc, #144]	@ (8005290 <HAL_DMA_Abort+0x460>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d027      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a23      	ldr	r2, [pc, #140]	@ (8005294 <HAL_DMA_Abort+0x464>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d022      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a21      	ldr	r2, [pc, #132]	@ (8005298 <HAL_DMA_Abort+0x468>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a20      	ldr	r2, [pc, #128]	@ (800529c <HAL_DMA_Abort+0x46c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d018      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1e      	ldr	r2, [pc, #120]	@ (80052a0 <HAL_DMA_Abort+0x470>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1d      	ldr	r2, [pc, #116]	@ (80052a4 <HAL_DMA_Abort+0x474>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <HAL_DMA_Abort+0x478>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1a      	ldr	r2, [pc, #104]	@ (80052ac <HAL_DMA_Abort+0x47c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_DMA_Abort+0x422>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a18      	ldr	r2, [pc, #96]	@ (80052b0 <HAL_DMA_Abort+0x480>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d101      	bne.n	8005256 <HAL_DMA_Abort+0x426>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_DMA_Abort+0x428>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02b      	beq.n	80052b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005260:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	223f      	movs	r2, #63	@ 0x3f
 800526c:	409a      	lsls	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	609a      	str	r2, [r3, #8]
 8005272:	e02a      	b.n	80052ca <HAL_DMA_Abort+0x49a>
 8005274:	40020010 	.word	0x40020010
 8005278:	40020028 	.word	0x40020028
 800527c:	40020040 	.word	0x40020040
 8005280:	40020058 	.word	0x40020058
 8005284:	40020070 	.word	0x40020070
 8005288:	40020088 	.word	0x40020088
 800528c:	400200a0 	.word	0x400200a0
 8005290:	400200b8 	.word	0x400200b8
 8005294:	40020410 	.word	0x40020410
 8005298:	40020428 	.word	0x40020428
 800529c:	40020440 	.word	0x40020440
 80052a0:	40020458 	.word	0x40020458
 80052a4:	40020470 	.word	0x40020470
 80052a8:	40020488 	.word	0x40020488
 80052ac:	400204a0 	.word	0x400204a0
 80052b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2201      	movs	r2, #1
 80052c4:	409a      	lsls	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a4f      	ldr	r2, [pc, #316]	@ (800540c <HAL_DMA_Abort+0x5dc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d072      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a4d      	ldr	r2, [pc, #308]	@ (8005410 <HAL_DMA_Abort+0x5e0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d06d      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005414 <HAL_DMA_Abort+0x5e4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d068      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005418 <HAL_DMA_Abort+0x5e8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d063      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a49      	ldr	r2, [pc, #292]	@ (800541c <HAL_DMA_Abort+0x5ec>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d05e      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a47      	ldr	r2, [pc, #284]	@ (8005420 <HAL_DMA_Abort+0x5f0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d059      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a46      	ldr	r2, [pc, #280]	@ (8005424 <HAL_DMA_Abort+0x5f4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d054      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a44      	ldr	r2, [pc, #272]	@ (8005428 <HAL_DMA_Abort+0x5f8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d04f      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a43      	ldr	r2, [pc, #268]	@ (800542c <HAL_DMA_Abort+0x5fc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d04a      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a41      	ldr	r2, [pc, #260]	@ (8005430 <HAL_DMA_Abort+0x600>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d045      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a40      	ldr	r2, [pc, #256]	@ (8005434 <HAL_DMA_Abort+0x604>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d040      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a3e      	ldr	r2, [pc, #248]	@ (8005438 <HAL_DMA_Abort+0x608>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d03b      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a3d      	ldr	r2, [pc, #244]	@ (800543c <HAL_DMA_Abort+0x60c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d036      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a3b      	ldr	r2, [pc, #236]	@ (8005440 <HAL_DMA_Abort+0x610>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d031      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a3a      	ldr	r2, [pc, #232]	@ (8005444 <HAL_DMA_Abort+0x614>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d02c      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a38      	ldr	r2, [pc, #224]	@ (8005448 <HAL_DMA_Abort+0x618>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d027      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a37      	ldr	r2, [pc, #220]	@ (800544c <HAL_DMA_Abort+0x61c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d022      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a35      	ldr	r2, [pc, #212]	@ (8005450 <HAL_DMA_Abort+0x620>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01d      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a34      	ldr	r2, [pc, #208]	@ (8005454 <HAL_DMA_Abort+0x624>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d018      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a32      	ldr	r2, [pc, #200]	@ (8005458 <HAL_DMA_Abort+0x628>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a31      	ldr	r2, [pc, #196]	@ (800545c <HAL_DMA_Abort+0x62c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2f      	ldr	r2, [pc, #188]	@ (8005460 <HAL_DMA_Abort+0x630>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005464 <HAL_DMA_Abort+0x634>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_DMA_Abort+0x58a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <HAL_DMA_Abort+0x638>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d101      	bne.n	80053be <HAL_DMA_Abort+0x58e>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <HAL_DMA_Abort+0x590>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d015      	beq.n	80053f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40020010 	.word	0x40020010
 8005410:	40020028 	.word	0x40020028
 8005414:	40020040 	.word	0x40020040
 8005418:	40020058 	.word	0x40020058
 800541c:	40020070 	.word	0x40020070
 8005420:	40020088 	.word	0x40020088
 8005424:	400200a0 	.word	0x400200a0
 8005428:	400200b8 	.word	0x400200b8
 800542c:	40020410 	.word	0x40020410
 8005430:	40020428 	.word	0x40020428
 8005434:	40020440 	.word	0x40020440
 8005438:	40020458 	.word	0x40020458
 800543c:	40020470 	.word	0x40020470
 8005440:	40020488 	.word	0x40020488
 8005444:	400204a0 	.word	0x400204a0
 8005448:	400204b8 	.word	0x400204b8
 800544c:	58025408 	.word	0x58025408
 8005450:	5802541c 	.word	0x5802541c
 8005454:	58025430 	.word	0x58025430
 8005458:	58025444 	.word	0x58025444
 800545c:	58025458 	.word	0x58025458
 8005460:	5802546c 	.word	0x5802546c
 8005464:	58025480 	.word	0x58025480
 8005468:	58025494 	.word	0x58025494

0800546c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e237      	b.n	80058ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d004      	beq.n	8005494 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2280      	movs	r2, #128	@ 0x80
 800548e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e22c      	b.n	80058ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a5c      	ldr	r2, [pc, #368]	@ (800560c <HAL_DMA_Abort_IT+0x1a0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d04a      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5b      	ldr	r2, [pc, #364]	@ (8005610 <HAL_DMA_Abort_IT+0x1a4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d045      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a59      	ldr	r2, [pc, #356]	@ (8005614 <HAL_DMA_Abort_IT+0x1a8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d040      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a58      	ldr	r2, [pc, #352]	@ (8005618 <HAL_DMA_Abort_IT+0x1ac>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d03b      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a56      	ldr	r2, [pc, #344]	@ (800561c <HAL_DMA_Abort_IT+0x1b0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d036      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a55      	ldr	r2, [pc, #340]	@ (8005620 <HAL_DMA_Abort_IT+0x1b4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d031      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a53      	ldr	r2, [pc, #332]	@ (8005624 <HAL_DMA_Abort_IT+0x1b8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02c      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a52      	ldr	r2, [pc, #328]	@ (8005628 <HAL_DMA_Abort_IT+0x1bc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d027      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a50      	ldr	r2, [pc, #320]	@ (800562c <HAL_DMA_Abort_IT+0x1c0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d022      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a4f      	ldr	r2, [pc, #316]	@ (8005630 <HAL_DMA_Abort_IT+0x1c4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d01d      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a4d      	ldr	r2, [pc, #308]	@ (8005634 <HAL_DMA_Abort_IT+0x1c8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d018      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a4c      	ldr	r2, [pc, #304]	@ (8005638 <HAL_DMA_Abort_IT+0x1cc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a4a      	ldr	r2, [pc, #296]	@ (800563c <HAL_DMA_Abort_IT+0x1d0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00e      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a49      	ldr	r2, [pc, #292]	@ (8005640 <HAL_DMA_Abort_IT+0x1d4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d009      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a47      	ldr	r2, [pc, #284]	@ (8005644 <HAL_DMA_Abort_IT+0x1d8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a46      	ldr	r2, [pc, #280]	@ (8005648 <HAL_DMA_Abort_IT+0x1dc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d101      	bne.n	8005538 <HAL_DMA_Abort_IT+0xcc>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <HAL_DMA_Abort_IT+0xce>
 8005538:	2300      	movs	r3, #0
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 8086 	beq.w	800564c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2204      	movs	r2, #4
 8005544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2f      	ldr	r2, [pc, #188]	@ (800560c <HAL_DMA_Abort_IT+0x1a0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d04a      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2e      	ldr	r2, [pc, #184]	@ (8005610 <HAL_DMA_Abort_IT+0x1a4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d045      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2c      	ldr	r2, [pc, #176]	@ (8005614 <HAL_DMA_Abort_IT+0x1a8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d040      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2b      	ldr	r2, [pc, #172]	@ (8005618 <HAL_DMA_Abort_IT+0x1ac>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d03b      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a29      	ldr	r2, [pc, #164]	@ (800561c <HAL_DMA_Abort_IT+0x1b0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d036      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a28      	ldr	r2, [pc, #160]	@ (8005620 <HAL_DMA_Abort_IT+0x1b4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d031      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a26      	ldr	r2, [pc, #152]	@ (8005624 <HAL_DMA_Abort_IT+0x1b8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02c      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a25      	ldr	r2, [pc, #148]	@ (8005628 <HAL_DMA_Abort_IT+0x1bc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d027      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a23      	ldr	r2, [pc, #140]	@ (800562c <HAL_DMA_Abort_IT+0x1c0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a22      	ldr	r2, [pc, #136]	@ (8005630 <HAL_DMA_Abort_IT+0x1c4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a20      	ldr	r2, [pc, #128]	@ (8005634 <HAL_DMA_Abort_IT+0x1c8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005638 <HAL_DMA_Abort_IT+0x1cc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <HAL_DMA_Abort_IT+0x1d0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <HAL_DMA_Abort_IT+0x1d4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005644 <HAL_DMA_Abort_IT+0x1d8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x17c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a19      	ldr	r2, [pc, #100]	@ (8005648 <HAL_DMA_Abort_IT+0x1dc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d108      	bne.n	80055fa <HAL_DMA_Abort_IT+0x18e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e178      	b.n	80058ec <HAL_DMA_Abort_IT+0x480>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e16f      	b.n	80058ec <HAL_DMA_Abort_IT+0x480>
 800560c:	40020010 	.word	0x40020010
 8005610:	40020028 	.word	0x40020028
 8005614:	40020040 	.word	0x40020040
 8005618:	40020058 	.word	0x40020058
 800561c:	40020070 	.word	0x40020070
 8005620:	40020088 	.word	0x40020088
 8005624:	400200a0 	.word	0x400200a0
 8005628:	400200b8 	.word	0x400200b8
 800562c:	40020410 	.word	0x40020410
 8005630:	40020428 	.word	0x40020428
 8005634:	40020440 	.word	0x40020440
 8005638:	40020458 	.word	0x40020458
 800563c:	40020470 	.word	0x40020470
 8005640:	40020488 	.word	0x40020488
 8005644:	400204a0 	.word	0x400204a0
 8005648:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 020e 	bic.w	r2, r2, #14
 800565a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6c      	ldr	r2, [pc, #432]	@ (8005814 <HAL_DMA_Abort_IT+0x3a8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d04a      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6b      	ldr	r2, [pc, #428]	@ (8005818 <HAL_DMA_Abort_IT+0x3ac>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d045      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a69      	ldr	r2, [pc, #420]	@ (800581c <HAL_DMA_Abort_IT+0x3b0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d040      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a68      	ldr	r2, [pc, #416]	@ (8005820 <HAL_DMA_Abort_IT+0x3b4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d03b      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a66      	ldr	r2, [pc, #408]	@ (8005824 <HAL_DMA_Abort_IT+0x3b8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d036      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a65      	ldr	r2, [pc, #404]	@ (8005828 <HAL_DMA_Abort_IT+0x3bc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d031      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a63      	ldr	r2, [pc, #396]	@ (800582c <HAL_DMA_Abort_IT+0x3c0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02c      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a62      	ldr	r2, [pc, #392]	@ (8005830 <HAL_DMA_Abort_IT+0x3c4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d027      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a60      	ldr	r2, [pc, #384]	@ (8005834 <HAL_DMA_Abort_IT+0x3c8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d022      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005838 <HAL_DMA_Abort_IT+0x3cc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d01d      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a5d      	ldr	r2, [pc, #372]	@ (800583c <HAL_DMA_Abort_IT+0x3d0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d018      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005840 <HAL_DMA_Abort_IT+0x3d4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d013      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005844 <HAL_DMA_Abort_IT+0x3d8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00e      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a59      	ldr	r2, [pc, #356]	@ (8005848 <HAL_DMA_Abort_IT+0x3dc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d009      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a57      	ldr	r2, [pc, #348]	@ (800584c <HAL_DMA_Abort_IT+0x3e0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_DMA_Abort_IT+0x290>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a56      	ldr	r2, [pc, #344]	@ (8005850 <HAL_DMA_Abort_IT+0x3e4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d108      	bne.n	800570e <HAL_DMA_Abort_IT+0x2a2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e007      	b.n	800571e <HAL_DMA_Abort_IT+0x2b2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a3c      	ldr	r2, [pc, #240]	@ (8005814 <HAL_DMA_Abort_IT+0x3a8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d072      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3a      	ldr	r2, [pc, #232]	@ (8005818 <HAL_DMA_Abort_IT+0x3ac>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d06d      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a39      	ldr	r2, [pc, #228]	@ (800581c <HAL_DMA_Abort_IT+0x3b0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d068      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a37      	ldr	r2, [pc, #220]	@ (8005820 <HAL_DMA_Abort_IT+0x3b4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d063      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a36      	ldr	r2, [pc, #216]	@ (8005824 <HAL_DMA_Abort_IT+0x3b8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d05e      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a34      	ldr	r2, [pc, #208]	@ (8005828 <HAL_DMA_Abort_IT+0x3bc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d059      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a33      	ldr	r2, [pc, #204]	@ (800582c <HAL_DMA_Abort_IT+0x3c0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d054      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a31      	ldr	r2, [pc, #196]	@ (8005830 <HAL_DMA_Abort_IT+0x3c4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d04f      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a30      	ldr	r2, [pc, #192]	@ (8005834 <HAL_DMA_Abort_IT+0x3c8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d04a      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2e      	ldr	r2, [pc, #184]	@ (8005838 <HAL_DMA_Abort_IT+0x3cc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d045      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2d      	ldr	r2, [pc, #180]	@ (800583c <HAL_DMA_Abort_IT+0x3d0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d040      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2b      	ldr	r2, [pc, #172]	@ (8005840 <HAL_DMA_Abort_IT+0x3d4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d03b      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2a      	ldr	r2, [pc, #168]	@ (8005844 <HAL_DMA_Abort_IT+0x3d8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d036      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a28      	ldr	r2, [pc, #160]	@ (8005848 <HAL_DMA_Abort_IT+0x3dc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d031      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a27      	ldr	r2, [pc, #156]	@ (800584c <HAL_DMA_Abort_IT+0x3e0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d02c      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a25      	ldr	r2, [pc, #148]	@ (8005850 <HAL_DMA_Abort_IT+0x3e4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d027      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a24      	ldr	r2, [pc, #144]	@ (8005854 <HAL_DMA_Abort_IT+0x3e8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a22      	ldr	r2, [pc, #136]	@ (8005858 <HAL_DMA_Abort_IT+0x3ec>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d01d      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a21      	ldr	r2, [pc, #132]	@ (800585c <HAL_DMA_Abort_IT+0x3f0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005860 <HAL_DMA_Abort_IT+0x3f4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005864 <HAL_DMA_Abort_IT+0x3f8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005868 <HAL_DMA_Abort_IT+0x3fc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	@ (800586c <HAL_DMA_Abort_IT+0x400>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_DMA_Abort_IT+0x3a2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <HAL_DMA_Abort_IT+0x404>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d132      	bne.n	8005874 <HAL_DMA_Abort_IT+0x408>
 800580e:	2301      	movs	r3, #1
 8005810:	e031      	b.n	8005876 <HAL_DMA_Abort_IT+0x40a>
 8005812:	bf00      	nop
 8005814:	40020010 	.word	0x40020010
 8005818:	40020028 	.word	0x40020028
 800581c:	40020040 	.word	0x40020040
 8005820:	40020058 	.word	0x40020058
 8005824:	40020070 	.word	0x40020070
 8005828:	40020088 	.word	0x40020088
 800582c:	400200a0 	.word	0x400200a0
 8005830:	400200b8 	.word	0x400200b8
 8005834:	40020410 	.word	0x40020410
 8005838:	40020428 	.word	0x40020428
 800583c:	40020440 	.word	0x40020440
 8005840:	40020458 	.word	0x40020458
 8005844:	40020470 	.word	0x40020470
 8005848:	40020488 	.word	0x40020488
 800584c:	400204a0 	.word	0x400204a0
 8005850:	400204b8 	.word	0x400204b8
 8005854:	58025408 	.word	0x58025408
 8005858:	5802541c 	.word	0x5802541c
 800585c:	58025430 	.word	0x58025430
 8005860:	58025444 	.word	0x58025444
 8005864:	58025458 	.word	0x58025458
 8005868:	5802546c 	.word	0x5802546c
 800586c:	58025480 	.word	0x58025480
 8005870:	58025494 	.word	0x58025494
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d028      	beq.n	80058cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005888:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2201      	movs	r2, #1
 800589a:	409a      	lsls	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80058a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00c      	beq.n	80058cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop

080058f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	@ 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005904:	4b67      	ldr	r3, [pc, #412]	@ (8005aa4 <HAL_DMA_IRQHandler+0x1ac>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a67      	ldr	r2, [pc, #412]	@ (8005aa8 <HAL_DMA_IRQHandler+0x1b0>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	0a9b      	lsrs	r3, r3, #10
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005916:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a5f      	ldr	r2, [pc, #380]	@ (8005aac <HAL_DMA_IRQHandler+0x1b4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d04a      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a5d      	ldr	r2, [pc, #372]	@ (8005ab0 <HAL_DMA_IRQHandler+0x1b8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d045      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a5c      	ldr	r2, [pc, #368]	@ (8005ab4 <HAL_DMA_IRQHandler+0x1bc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d040      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a5a      	ldr	r2, [pc, #360]	@ (8005ab8 <HAL_DMA_IRQHandler+0x1c0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d03b      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a59      	ldr	r2, [pc, #356]	@ (8005abc <HAL_DMA_IRQHandler+0x1c4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d036      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a57      	ldr	r2, [pc, #348]	@ (8005ac0 <HAL_DMA_IRQHandler+0x1c8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d031      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a56      	ldr	r2, [pc, #344]	@ (8005ac4 <HAL_DMA_IRQHandler+0x1cc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d02c      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a54      	ldr	r2, [pc, #336]	@ (8005ac8 <HAL_DMA_IRQHandler+0x1d0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d027      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a53      	ldr	r2, [pc, #332]	@ (8005acc <HAL_DMA_IRQHandler+0x1d4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a51      	ldr	r2, [pc, #324]	@ (8005ad0 <HAL_DMA_IRQHandler+0x1d8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01d      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a50      	ldr	r2, [pc, #320]	@ (8005ad4 <HAL_DMA_IRQHandler+0x1dc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a4e      	ldr	r2, [pc, #312]	@ (8005ad8 <HAL_DMA_IRQHandler+0x1e0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a4d      	ldr	r2, [pc, #308]	@ (8005adc <HAL_DMA_IRQHandler+0x1e4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ae0 <HAL_DMA_IRQHandler+0x1e8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a4a      	ldr	r2, [pc, #296]	@ (8005ae4 <HAL_DMA_IRQHandler+0x1ec>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_DMA_IRQHandler+0xd2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a48      	ldr	r2, [pc, #288]	@ (8005ae8 <HAL_DMA_IRQHandler+0x1f0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d101      	bne.n	80059ce <HAL_DMA_IRQHandler+0xd6>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <HAL_DMA_IRQHandler+0xd8>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 842b 	beq.w	800622c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2208      	movs	r2, #8
 80059e0:	409a      	lsls	r2, r3
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80a2 	beq.w	8005b30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2e      	ldr	r2, [pc, #184]	@ (8005aac <HAL_DMA_IRQHandler+0x1b4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d04a      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab0 <HAL_DMA_IRQHandler+0x1b8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d045      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab4 <HAL_DMA_IRQHandler+0x1bc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d040      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab8 <HAL_DMA_IRQHandler+0x1c0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d03b      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a28      	ldr	r2, [pc, #160]	@ (8005abc <HAL_DMA_IRQHandler+0x1c4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d036      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a27      	ldr	r2, [pc, #156]	@ (8005ac0 <HAL_DMA_IRQHandler+0x1c8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d031      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a25      	ldr	r2, [pc, #148]	@ (8005ac4 <HAL_DMA_IRQHandler+0x1cc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02c      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a24      	ldr	r2, [pc, #144]	@ (8005ac8 <HAL_DMA_IRQHandler+0x1d0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d027      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a22      	ldr	r2, [pc, #136]	@ (8005acc <HAL_DMA_IRQHandler+0x1d4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d022      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a21      	ldr	r2, [pc, #132]	@ (8005ad0 <HAL_DMA_IRQHandler+0x1d8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d01d      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad4 <HAL_DMA_IRQHandler+0x1dc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d018      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad8 <HAL_DMA_IRQHandler+0x1e0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <HAL_DMA_IRQHandler+0x1e4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <HAL_DMA_IRQHandler+0x1e8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	@ (8005ae4 <HAL_DMA_IRQHandler+0x1ec>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x194>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a18      	ldr	r2, [pc, #96]	@ (8005ae8 <HAL_DMA_IRQHandler+0x1f0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d12f      	bne.n	8005aec <HAL_DMA_IRQHandler+0x1f4>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf14      	ite	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	2300      	moveq	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	e02e      	b.n	8005b00 <HAL_DMA_IRQHandler+0x208>
 8005aa2:	bf00      	nop
 8005aa4:	24000214 	.word	0x24000214
 8005aa8:	1b4e81b5 	.word	0x1b4e81b5
 8005aac:	40020010 	.word	0x40020010
 8005ab0:	40020028 	.word	0x40020028
 8005ab4:	40020040 	.word	0x40020040
 8005ab8:	40020058 	.word	0x40020058
 8005abc:	40020070 	.word	0x40020070
 8005ac0:	40020088 	.word	0x40020088
 8005ac4:	400200a0 	.word	0x400200a0
 8005ac8:	400200b8 	.word	0x400200b8
 8005acc:	40020410 	.word	0x40020410
 8005ad0:	40020428 	.word	0x40020428
 8005ad4:	40020440 	.word	0x40020440
 8005ad8:	40020458 	.word	0x40020458
 8005adc:	40020470 	.word	0x40020470
 8005ae0:	40020488 	.word	0x40020488
 8005ae4:	400204a0 	.word	0x400204a0
 8005ae8:	400204b8 	.word	0x400204b8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d015      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0204 	bic.w	r2, r2, #4
 8005b12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b28:	f043 0201 	orr.w	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d06e      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a69      	ldr	r2, [pc, #420]	@ (8005cf0 <HAL_DMA_IRQHandler+0x3f8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d04a      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a67      	ldr	r2, [pc, #412]	@ (8005cf4 <HAL_DMA_IRQHandler+0x3fc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d045      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a66      	ldr	r2, [pc, #408]	@ (8005cf8 <HAL_DMA_IRQHandler+0x400>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d040      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a64      	ldr	r2, [pc, #400]	@ (8005cfc <HAL_DMA_IRQHandler+0x404>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d03b      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a63      	ldr	r2, [pc, #396]	@ (8005d00 <HAL_DMA_IRQHandler+0x408>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d036      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a61      	ldr	r2, [pc, #388]	@ (8005d04 <HAL_DMA_IRQHandler+0x40c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d031      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a60      	ldr	r2, [pc, #384]	@ (8005d08 <HAL_DMA_IRQHandler+0x410>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d02c      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a5e      	ldr	r2, [pc, #376]	@ (8005d0c <HAL_DMA_IRQHandler+0x414>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d027      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a5d      	ldr	r2, [pc, #372]	@ (8005d10 <HAL_DMA_IRQHandler+0x418>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d022      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a5b      	ldr	r2, [pc, #364]	@ (8005d14 <HAL_DMA_IRQHandler+0x41c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01d      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a5a      	ldr	r2, [pc, #360]	@ (8005d18 <HAL_DMA_IRQHandler+0x420>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d018      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a58      	ldr	r2, [pc, #352]	@ (8005d1c <HAL_DMA_IRQHandler+0x424>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a57      	ldr	r2, [pc, #348]	@ (8005d20 <HAL_DMA_IRQHandler+0x428>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00e      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a55      	ldr	r2, [pc, #340]	@ (8005d24 <HAL_DMA_IRQHandler+0x42c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d009      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a54      	ldr	r2, [pc, #336]	@ (8005d28 <HAL_DMA_IRQHandler+0x430>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x2ee>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a52      	ldr	r2, [pc, #328]	@ (8005d2c <HAL_DMA_IRQHandler+0x434>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10a      	bne.n	8005bfc <HAL_DMA_IRQHandler+0x304>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e003      	b.n	8005c04 <HAL_DMA_IRQHandler+0x30c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	2201      	movs	r2, #1
 8005c12:	409a      	lsls	r2, r3
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1c:	f043 0202 	orr.w	r2, r3, #2
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 808f 	beq.w	8005d58 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf0 <HAL_DMA_IRQHandler+0x3f8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d04a      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf4 <HAL_DMA_IRQHandler+0x3fc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d045      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a29      	ldr	r2, [pc, #164]	@ (8005cf8 <HAL_DMA_IRQHandler+0x400>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d040      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a27      	ldr	r2, [pc, #156]	@ (8005cfc <HAL_DMA_IRQHandler+0x404>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d03b      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a26      	ldr	r2, [pc, #152]	@ (8005d00 <HAL_DMA_IRQHandler+0x408>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d036      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a24      	ldr	r2, [pc, #144]	@ (8005d04 <HAL_DMA_IRQHandler+0x40c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d031      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a23      	ldr	r2, [pc, #140]	@ (8005d08 <HAL_DMA_IRQHandler+0x410>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d02c      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a21      	ldr	r2, [pc, #132]	@ (8005d0c <HAL_DMA_IRQHandler+0x414>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d027      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a20      	ldr	r2, [pc, #128]	@ (8005d10 <HAL_DMA_IRQHandler+0x418>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1e      	ldr	r2, [pc, #120]	@ (8005d14 <HAL_DMA_IRQHandler+0x41c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01d      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d18 <HAL_DMA_IRQHandler+0x420>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d018      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1b      	ldr	r2, [pc, #108]	@ (8005d1c <HAL_DMA_IRQHandler+0x424>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d20 <HAL_DMA_IRQHandler+0x428>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	@ (8005d24 <HAL_DMA_IRQHandler+0x42c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <HAL_DMA_IRQHandler+0x430>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <HAL_DMA_IRQHandler+0x3e2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a15      	ldr	r2, [pc, #84]	@ (8005d2c <HAL_DMA_IRQHandler+0x434>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d12a      	bne.n	8005d30 <HAL_DMA_IRQHandler+0x438>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	e023      	b.n	8005d38 <HAL_DMA_IRQHandler+0x440>
 8005cf0:	40020010 	.word	0x40020010
 8005cf4:	40020028 	.word	0x40020028
 8005cf8:	40020040 	.word	0x40020040
 8005cfc:	40020058 	.word	0x40020058
 8005d00:	40020070 	.word	0x40020070
 8005d04:	40020088 	.word	0x40020088
 8005d08:	400200a0 	.word	0x400200a0
 8005d0c:	400200b8 	.word	0x400200b8
 8005d10:	40020410 	.word	0x40020410
 8005d14:	40020428 	.word	0x40020428
 8005d18:	40020440 	.word	0x40020440
 8005d1c:	40020458 	.word	0x40020458
 8005d20:	40020470 	.word	0x40020470
 8005d24:	40020488 	.word	0x40020488
 8005d28:	400204a0 	.word	0x400204a0
 8005d2c:	400204b8 	.word	0x400204b8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00d      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	2204      	movs	r2, #4
 8005d46:	409a      	lsls	r2, r3
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d50:	f043 0204 	orr.w	r2, r3, #4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	2210      	movs	r2, #16
 8005d62:	409a      	lsls	r2, r3
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80a6 	beq.w	8005eba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a85      	ldr	r2, [pc, #532]	@ (8005f88 <HAL_DMA_IRQHandler+0x690>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d04a      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a83      	ldr	r2, [pc, #524]	@ (8005f8c <HAL_DMA_IRQHandler+0x694>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d045      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a82      	ldr	r2, [pc, #520]	@ (8005f90 <HAL_DMA_IRQHandler+0x698>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d040      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a80      	ldr	r2, [pc, #512]	@ (8005f94 <HAL_DMA_IRQHandler+0x69c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d03b      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7f      	ldr	r2, [pc, #508]	@ (8005f98 <HAL_DMA_IRQHandler+0x6a0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d036      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a7d      	ldr	r2, [pc, #500]	@ (8005f9c <HAL_DMA_IRQHandler+0x6a4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d031      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a7c      	ldr	r2, [pc, #496]	@ (8005fa0 <HAL_DMA_IRQHandler+0x6a8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d02c      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a7a      	ldr	r2, [pc, #488]	@ (8005fa4 <HAL_DMA_IRQHandler+0x6ac>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d027      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a79      	ldr	r2, [pc, #484]	@ (8005fa8 <HAL_DMA_IRQHandler+0x6b0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a77      	ldr	r2, [pc, #476]	@ (8005fac <HAL_DMA_IRQHandler+0x6b4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01d      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a76      	ldr	r2, [pc, #472]	@ (8005fb0 <HAL_DMA_IRQHandler+0x6b8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d018      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a74      	ldr	r2, [pc, #464]	@ (8005fb4 <HAL_DMA_IRQHandler+0x6bc>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a73      	ldr	r2, [pc, #460]	@ (8005fb8 <HAL_DMA_IRQHandler+0x6c0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a71      	ldr	r2, [pc, #452]	@ (8005fbc <HAL_DMA_IRQHandler+0x6c4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a70      	ldr	r2, [pc, #448]	@ (8005fc0 <HAL_DMA_IRQHandler+0x6c8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x516>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc4 <HAL_DMA_IRQHandler+0x6cc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10a      	bne.n	8005e24 <HAL_DMA_IRQHandler+0x52c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bf14      	ite	ne
 8005e1c:	2301      	movne	r3, #1
 8005e1e:	2300      	moveq	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	e009      	b.n	8005e38 <HAL_DMA_IRQHandler+0x540>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bf14      	ite	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	2300      	moveq	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d03e      	beq.n	8005eba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2210      	movs	r2, #16
 8005e46:	409a      	lsls	r2, r3
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d018      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d108      	bne.n	8005e7a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d024      	beq.n	8005eba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
 8005e78:	e01f      	b.n	8005eba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01b      	beq.n	8005eba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
 8005e8a:	e016      	b.n	8005eba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0208 	bic.w	r2, r2, #8
 8005ea8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8110 	beq.w	80060f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <HAL_DMA_IRQHandler+0x690>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d04a      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2b      	ldr	r2, [pc, #172]	@ (8005f8c <HAL_DMA_IRQHandler+0x694>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d045      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a29      	ldr	r2, [pc, #164]	@ (8005f90 <HAL_DMA_IRQHandler+0x698>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d040      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a28      	ldr	r2, [pc, #160]	@ (8005f94 <HAL_DMA_IRQHandler+0x69c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d03b      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a26      	ldr	r2, [pc, #152]	@ (8005f98 <HAL_DMA_IRQHandler+0x6a0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d036      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a25      	ldr	r2, [pc, #148]	@ (8005f9c <HAL_DMA_IRQHandler+0x6a4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d031      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a23      	ldr	r2, [pc, #140]	@ (8005fa0 <HAL_DMA_IRQHandler+0x6a8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d02c      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a22      	ldr	r2, [pc, #136]	@ (8005fa4 <HAL_DMA_IRQHandler+0x6ac>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d027      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a20      	ldr	r2, [pc, #128]	@ (8005fa8 <HAL_DMA_IRQHandler+0x6b0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d022      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fac <HAL_DMA_IRQHandler+0x6b4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d01d      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb0 <HAL_DMA_IRQHandler+0x6b8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d018      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb4 <HAL_DMA_IRQHandler+0x6bc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb8 <HAL_DMA_IRQHandler+0x6c0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00e      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a19      	ldr	r2, [pc, #100]	@ (8005fbc <HAL_DMA_IRQHandler+0x6c4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d009      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a17      	ldr	r2, [pc, #92]	@ (8005fc0 <HAL_DMA_IRQHandler+0x6c8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x678>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a16      	ldr	r2, [pc, #88]	@ (8005fc4 <HAL_DMA_IRQHandler+0x6cc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d12b      	bne.n	8005fc8 <HAL_DMA_IRQHandler+0x6d0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf14      	ite	ne
 8005f7e:	2301      	movne	r3, #1
 8005f80:	2300      	moveq	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	e02a      	b.n	8005fdc <HAL_DMA_IRQHandler+0x6e4>
 8005f86:	bf00      	nop
 8005f88:	40020010 	.word	0x40020010
 8005f8c:	40020028 	.word	0x40020028
 8005f90:	40020040 	.word	0x40020040
 8005f94:	40020058 	.word	0x40020058
 8005f98:	40020070 	.word	0x40020070
 8005f9c:	40020088 	.word	0x40020088
 8005fa0:	400200a0 	.word	0x400200a0
 8005fa4:	400200b8 	.word	0x400200b8
 8005fa8:	40020410 	.word	0x40020410
 8005fac:	40020428 	.word	0x40020428
 8005fb0:	40020440 	.word	0x40020440
 8005fb4:	40020458 	.word	0x40020458
 8005fb8:	40020470 	.word	0x40020470
 8005fbc:	40020488 	.word	0x40020488
 8005fc0:	400204a0 	.word	0x400204a0
 8005fc4:	400204b8 	.word	0x400204b8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8087 	beq.w	80060f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2220      	movs	r2, #32
 8005fec:	409a      	lsls	r2, r3
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d139      	bne.n	8006072 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0216 	bic.w	r2, r2, #22
 800600c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800601c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <HAL_DMA_IRQHandler+0x736>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0208 	bic.w	r2, r2, #8
 800603c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	223f      	movs	r2, #63	@ 0x3f
 8006048:	409a      	lsls	r2, r3
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 834a 	beq.w	80066fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
          }
          return;
 8006070:	e344      	b.n	80066fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d018      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	2b00      	cmp	r3, #0
 8006094:	d02c      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
 800609e:	e027      	b.n	80060f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d023      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	4798      	blx	r3
 80060b0:	e01e      	b.n	80060f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10f      	bne.n	80060e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0210 	bic.w	r2, r2, #16
 80060ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8306 	beq.w	8006706 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8088 	beq.w	8006218 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2204      	movs	r2, #4
 800610c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a7a      	ldr	r2, [pc, #488]	@ (8006300 <HAL_DMA_IRQHandler+0xa08>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d04a      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a79      	ldr	r2, [pc, #484]	@ (8006304 <HAL_DMA_IRQHandler+0xa0c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d045      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a77      	ldr	r2, [pc, #476]	@ (8006308 <HAL_DMA_IRQHandler+0xa10>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d040      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a76      	ldr	r2, [pc, #472]	@ (800630c <HAL_DMA_IRQHandler+0xa14>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d03b      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a74      	ldr	r2, [pc, #464]	@ (8006310 <HAL_DMA_IRQHandler+0xa18>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d036      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a73      	ldr	r2, [pc, #460]	@ (8006314 <HAL_DMA_IRQHandler+0xa1c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d031      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a71      	ldr	r2, [pc, #452]	@ (8006318 <HAL_DMA_IRQHandler+0xa20>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d02c      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a70      	ldr	r2, [pc, #448]	@ (800631c <HAL_DMA_IRQHandler+0xa24>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d027      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a6e      	ldr	r2, [pc, #440]	@ (8006320 <HAL_DMA_IRQHandler+0xa28>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d022      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a6d      	ldr	r2, [pc, #436]	@ (8006324 <HAL_DMA_IRQHandler+0xa2c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d01d      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a6b      	ldr	r2, [pc, #428]	@ (8006328 <HAL_DMA_IRQHandler+0xa30>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d018      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6a      	ldr	r2, [pc, #424]	@ (800632c <HAL_DMA_IRQHandler+0xa34>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a68      	ldr	r2, [pc, #416]	@ (8006330 <HAL_DMA_IRQHandler+0xa38>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a67      	ldr	r2, [pc, #412]	@ (8006334 <HAL_DMA_IRQHandler+0xa3c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d009      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a65      	ldr	r2, [pc, #404]	@ (8006338 <HAL_DMA_IRQHandler+0xa40>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x8b8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a64      	ldr	r2, [pc, #400]	@ (800633c <HAL_DMA_IRQHandler+0xa44>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <HAL_DMA_IRQHandler+0x8ca>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e007      	b.n	80061d2 <HAL_DMA_IRQHandler+0x8da>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061da:	429a      	cmp	r2, r3
 80061dc:	d307      	bcc.n	80061ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f2      	bne.n	80061d2 <HAL_DMA_IRQHandler+0x8da>
 80061ec:	e000      	b.n	80061f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80061ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2203      	movs	r2, #3
 8006202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006206:	e003      	b.n	8006210 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8272 	beq.w	8006706 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
 800622a:	e26c      	b.n	8006706 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a43      	ldr	r2, [pc, #268]	@ (8006340 <HAL_DMA_IRQHandler+0xa48>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d022      	beq.n	800627c <HAL_DMA_IRQHandler+0x984>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a42      	ldr	r2, [pc, #264]	@ (8006344 <HAL_DMA_IRQHandler+0xa4c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d01d      	beq.n	800627c <HAL_DMA_IRQHandler+0x984>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a40      	ldr	r2, [pc, #256]	@ (8006348 <HAL_DMA_IRQHandler+0xa50>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d018      	beq.n	800627c <HAL_DMA_IRQHandler+0x984>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a3f      	ldr	r2, [pc, #252]	@ (800634c <HAL_DMA_IRQHandler+0xa54>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <HAL_DMA_IRQHandler+0x984>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a3d      	ldr	r2, [pc, #244]	@ (8006350 <HAL_DMA_IRQHandler+0xa58>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00e      	beq.n	800627c <HAL_DMA_IRQHandler+0x984>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a3c      	ldr	r2, [pc, #240]	@ (8006354 <HAL_DMA_IRQHandler+0xa5c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d009      	beq.n	800627c <HAL_DMA_IRQHandler+0x984>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a3a      	ldr	r2, [pc, #232]	@ (8006358 <HAL_DMA_IRQHandler+0xa60>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_DMA_IRQHandler+0x984>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a39      	ldr	r2, [pc, #228]	@ (800635c <HAL_DMA_IRQHandler+0xa64>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d101      	bne.n	8006280 <HAL_DMA_IRQHandler+0x988>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <HAL_DMA_IRQHandler+0x98a>
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 823f 	beq.w	8006706 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2204      	movs	r2, #4
 800629a:	409a      	lsls	r2, r3
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80cd 	beq.w	8006440 <HAL_DMA_IRQHandler+0xb48>
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80c7 	beq.w	8006440 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b6:	f003 031f 	and.w	r3, r3, #31
 80062ba:	2204      	movs	r2, #4
 80062bc:	409a      	lsls	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d049      	beq.n	8006360 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8210 	beq.w	8006700 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e8:	e20a      	b.n	8006700 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8206 	beq.w	8006700 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062fc:	e200      	b.n	8006700 <HAL_DMA_IRQHandler+0xe08>
 80062fe:	bf00      	nop
 8006300:	40020010 	.word	0x40020010
 8006304:	40020028 	.word	0x40020028
 8006308:	40020040 	.word	0x40020040
 800630c:	40020058 	.word	0x40020058
 8006310:	40020070 	.word	0x40020070
 8006314:	40020088 	.word	0x40020088
 8006318:	400200a0 	.word	0x400200a0
 800631c:	400200b8 	.word	0x400200b8
 8006320:	40020410 	.word	0x40020410
 8006324:	40020428 	.word	0x40020428
 8006328:	40020440 	.word	0x40020440
 800632c:	40020458 	.word	0x40020458
 8006330:	40020470 	.word	0x40020470
 8006334:	40020488 	.word	0x40020488
 8006338:	400204a0 	.word	0x400204a0
 800633c:	400204b8 	.word	0x400204b8
 8006340:	58025408 	.word	0x58025408
 8006344:	5802541c 	.word	0x5802541c
 8006348:	58025430 	.word	0x58025430
 800634c:	58025444 	.word	0x58025444
 8006350:	58025458 	.word	0x58025458
 8006354:	5802546c 	.word	0x5802546c
 8006358:	58025480 	.word	0x58025480
 800635c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d160      	bne.n	800642c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a7f      	ldr	r2, [pc, #508]	@ (800656c <HAL_DMA_IRQHandler+0xc74>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d04a      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a7d      	ldr	r2, [pc, #500]	@ (8006570 <HAL_DMA_IRQHandler+0xc78>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d045      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a7c      	ldr	r2, [pc, #496]	@ (8006574 <HAL_DMA_IRQHandler+0xc7c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d040      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a7a      	ldr	r2, [pc, #488]	@ (8006578 <HAL_DMA_IRQHandler+0xc80>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d03b      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a79      	ldr	r2, [pc, #484]	@ (800657c <HAL_DMA_IRQHandler+0xc84>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d036      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a77      	ldr	r2, [pc, #476]	@ (8006580 <HAL_DMA_IRQHandler+0xc88>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d031      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a76      	ldr	r2, [pc, #472]	@ (8006584 <HAL_DMA_IRQHandler+0xc8c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d02c      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a74      	ldr	r2, [pc, #464]	@ (8006588 <HAL_DMA_IRQHandler+0xc90>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d027      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a73      	ldr	r2, [pc, #460]	@ (800658c <HAL_DMA_IRQHandler+0xc94>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d022      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a71      	ldr	r2, [pc, #452]	@ (8006590 <HAL_DMA_IRQHandler+0xc98>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01d      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a70      	ldr	r2, [pc, #448]	@ (8006594 <HAL_DMA_IRQHandler+0xc9c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d018      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006598 <HAL_DMA_IRQHandler+0xca0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a6d      	ldr	r2, [pc, #436]	@ (800659c <HAL_DMA_IRQHandler+0xca4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00e      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a6b      	ldr	r2, [pc, #428]	@ (80065a0 <HAL_DMA_IRQHandler+0xca8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d009      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6a      	ldr	r2, [pc, #424]	@ (80065a4 <HAL_DMA_IRQHandler+0xcac>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d004      	beq.n	800640a <HAL_DMA_IRQHandler+0xb12>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a68      	ldr	r2, [pc, #416]	@ (80065a8 <HAL_DMA_IRQHandler+0xcb0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d108      	bne.n	800641c <HAL_DMA_IRQHandler+0xb24>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0208 	bic.w	r2, r2, #8
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e007      	b.n	800642c <HAL_DMA_IRQHandler+0xb34>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0204 	bic.w	r2, r2, #4
 800642a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8165 	beq.w	8006700 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800643e:	e15f      	b.n	8006700 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	2202      	movs	r2, #2
 800644a:	409a      	lsls	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80c5 	beq.w	80065e0 <HAL_DMA_IRQHandler+0xce8>
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80bf 	beq.w	80065e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2202      	movs	r2, #2
 800646c:	409a      	lsls	r2, r3
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d018      	beq.n	80064ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 813a 	beq.w	8006704 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006498:	e134      	b.n	8006704 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8130 	beq.w	8006704 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ac:	e12a      	b.n	8006704 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 8089 	bne.w	80065cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a2b      	ldr	r2, [pc, #172]	@ (800656c <HAL_DMA_IRQHandler+0xc74>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d04a      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a29      	ldr	r2, [pc, #164]	@ (8006570 <HAL_DMA_IRQHandler+0xc78>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d045      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a28      	ldr	r2, [pc, #160]	@ (8006574 <HAL_DMA_IRQHandler+0xc7c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d040      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a26      	ldr	r2, [pc, #152]	@ (8006578 <HAL_DMA_IRQHandler+0xc80>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d03b      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a25      	ldr	r2, [pc, #148]	@ (800657c <HAL_DMA_IRQHandler+0xc84>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d036      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a23      	ldr	r2, [pc, #140]	@ (8006580 <HAL_DMA_IRQHandler+0xc88>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d031      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a22      	ldr	r2, [pc, #136]	@ (8006584 <HAL_DMA_IRQHandler+0xc8c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d02c      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a20      	ldr	r2, [pc, #128]	@ (8006588 <HAL_DMA_IRQHandler+0xc90>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d027      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1f      	ldr	r2, [pc, #124]	@ (800658c <HAL_DMA_IRQHandler+0xc94>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d022      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1d      	ldr	r2, [pc, #116]	@ (8006590 <HAL_DMA_IRQHandler+0xc98>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01d      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1c      	ldr	r2, [pc, #112]	@ (8006594 <HAL_DMA_IRQHandler+0xc9c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d018      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1a      	ldr	r2, [pc, #104]	@ (8006598 <HAL_DMA_IRQHandler+0xca0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a19      	ldr	r2, [pc, #100]	@ (800659c <HAL_DMA_IRQHandler+0xca4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00e      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <HAL_DMA_IRQHandler+0xca8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a16      	ldr	r2, [pc, #88]	@ (80065a4 <HAL_DMA_IRQHandler+0xcac>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_DMA_IRQHandler+0xc62>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a14      	ldr	r2, [pc, #80]	@ (80065a8 <HAL_DMA_IRQHandler+0xcb0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d128      	bne.n	80065ac <HAL_DMA_IRQHandler+0xcb4>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0214 	bic.w	r2, r2, #20
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e027      	b.n	80065bc <HAL_DMA_IRQHandler+0xcc4>
 800656c:	40020010 	.word	0x40020010
 8006570:	40020028 	.word	0x40020028
 8006574:	40020040 	.word	0x40020040
 8006578:	40020058 	.word	0x40020058
 800657c:	40020070 	.word	0x40020070
 8006580:	40020088 	.word	0x40020088
 8006584:	400200a0 	.word	0x400200a0
 8006588:	400200b8 	.word	0x400200b8
 800658c:	40020410 	.word	0x40020410
 8006590:	40020428 	.word	0x40020428
 8006594:	40020440 	.word	0x40020440
 8006598:	40020458 	.word	0x40020458
 800659c:	40020470 	.word	0x40020470
 80065a0:	40020488 	.word	0x40020488
 80065a4:	400204a0 	.word	0x400204a0
 80065a8:	400204b8 	.word	0x400204b8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 020a 	bic.w	r2, r2, #10
 80065ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8097 	beq.w	8006704 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065de:	e091      	b.n	8006704 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2208      	movs	r2, #8
 80065ea:	409a      	lsls	r2, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8088 	beq.w	8006706 <HAL_DMA_IRQHandler+0xe0e>
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8082 	beq.w	8006706 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a41      	ldr	r2, [pc, #260]	@ (800670c <HAL_DMA_IRQHandler+0xe14>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d04a      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3f      	ldr	r2, [pc, #252]	@ (8006710 <HAL_DMA_IRQHandler+0xe18>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d045      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a3e      	ldr	r2, [pc, #248]	@ (8006714 <HAL_DMA_IRQHandler+0xe1c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d040      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a3c      	ldr	r2, [pc, #240]	@ (8006718 <HAL_DMA_IRQHandler+0xe20>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d03b      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3b      	ldr	r2, [pc, #236]	@ (800671c <HAL_DMA_IRQHandler+0xe24>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d036      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a39      	ldr	r2, [pc, #228]	@ (8006720 <HAL_DMA_IRQHandler+0xe28>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d031      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a38      	ldr	r2, [pc, #224]	@ (8006724 <HAL_DMA_IRQHandler+0xe2c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d02c      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a36      	ldr	r2, [pc, #216]	@ (8006728 <HAL_DMA_IRQHandler+0xe30>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d027      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a35      	ldr	r2, [pc, #212]	@ (800672c <HAL_DMA_IRQHandler+0xe34>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d022      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a33      	ldr	r2, [pc, #204]	@ (8006730 <HAL_DMA_IRQHandler+0xe38>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01d      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a32      	ldr	r2, [pc, #200]	@ (8006734 <HAL_DMA_IRQHandler+0xe3c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d018      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a30      	ldr	r2, [pc, #192]	@ (8006738 <HAL_DMA_IRQHandler+0xe40>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d013      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2f      	ldr	r2, [pc, #188]	@ (800673c <HAL_DMA_IRQHandler+0xe44>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00e      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2d      	ldr	r2, [pc, #180]	@ (8006740 <HAL_DMA_IRQHandler+0xe48>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a2c      	ldr	r2, [pc, #176]	@ (8006744 <HAL_DMA_IRQHandler+0xe4c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d004      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xdaa>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a2a      	ldr	r2, [pc, #168]	@ (8006748 <HAL_DMA_IRQHandler+0xe50>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d108      	bne.n	80066b4 <HAL_DMA_IRQHandler+0xdbc>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 021c 	bic.w	r2, r2, #28
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e007      	b.n	80066c4 <HAL_DMA_IRQHandler+0xdcc>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 020e 	bic.w	r2, r2, #14
 80066c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	2201      	movs	r2, #1
 80066ce:	409a      	lsls	r2, r3
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
 80066fa:	e004      	b.n	8006706 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80066fc:	bf00      	nop
 80066fe:	e002      	b.n	8006706 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006700:	bf00      	nop
 8006702:	e000      	b.n	8006706 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006704:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006706:	3728      	adds	r7, #40	@ 0x28
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40020010 	.word	0x40020010
 8006710:	40020028 	.word	0x40020028
 8006714:	40020040 	.word	0x40020040
 8006718:	40020058 	.word	0x40020058
 800671c:	40020070 	.word	0x40020070
 8006720:	40020088 	.word	0x40020088
 8006724:	400200a0 	.word	0x400200a0
 8006728:	400200b8 	.word	0x400200b8
 800672c:	40020410 	.word	0x40020410
 8006730:	40020428 	.word	0x40020428
 8006734:	40020440 	.word	0x40020440
 8006738:	40020458 	.word	0x40020458
 800673c:	40020470 	.word	0x40020470
 8006740:	40020488 	.word	0x40020488
 8006744:	400204a0 	.word	0x400204a0
 8006748:	400204b8 	.word	0x400204b8

0800674c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800675a:	b2db      	uxtb	r3, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006792:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006798:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a7f      	ldr	r2, [pc, #508]	@ (800699c <DMA_SetConfig+0x21c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d072      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a7d      	ldr	r2, [pc, #500]	@ (80069a0 <DMA_SetConfig+0x220>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d06d      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a7c      	ldr	r2, [pc, #496]	@ (80069a4 <DMA_SetConfig+0x224>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d068      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a7a      	ldr	r2, [pc, #488]	@ (80069a8 <DMA_SetConfig+0x228>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d063      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a79      	ldr	r2, [pc, #484]	@ (80069ac <DMA_SetConfig+0x22c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d05e      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a77      	ldr	r2, [pc, #476]	@ (80069b0 <DMA_SetConfig+0x230>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d059      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a76      	ldr	r2, [pc, #472]	@ (80069b4 <DMA_SetConfig+0x234>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d054      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a74      	ldr	r2, [pc, #464]	@ (80069b8 <DMA_SetConfig+0x238>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d04f      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a73      	ldr	r2, [pc, #460]	@ (80069bc <DMA_SetConfig+0x23c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d04a      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a71      	ldr	r2, [pc, #452]	@ (80069c0 <DMA_SetConfig+0x240>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d045      	beq.n	800688a <DMA_SetConfig+0x10a>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a70      	ldr	r2, [pc, #448]	@ (80069c4 <DMA_SetConfig+0x244>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d040      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a6e      	ldr	r2, [pc, #440]	@ (80069c8 <DMA_SetConfig+0x248>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d03b      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a6d      	ldr	r2, [pc, #436]	@ (80069cc <DMA_SetConfig+0x24c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d036      	beq.n	800688a <DMA_SetConfig+0x10a>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a6b      	ldr	r2, [pc, #428]	@ (80069d0 <DMA_SetConfig+0x250>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d031      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a6a      	ldr	r2, [pc, #424]	@ (80069d4 <DMA_SetConfig+0x254>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d02c      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a68      	ldr	r2, [pc, #416]	@ (80069d8 <DMA_SetConfig+0x258>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d027      	beq.n	800688a <DMA_SetConfig+0x10a>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a67      	ldr	r2, [pc, #412]	@ (80069dc <DMA_SetConfig+0x25c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a65      	ldr	r2, [pc, #404]	@ (80069e0 <DMA_SetConfig+0x260>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <DMA_SetConfig+0x10a>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a64      	ldr	r2, [pc, #400]	@ (80069e4 <DMA_SetConfig+0x264>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a62      	ldr	r2, [pc, #392]	@ (80069e8 <DMA_SetConfig+0x268>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a61      	ldr	r2, [pc, #388]	@ (80069ec <DMA_SetConfig+0x26c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <DMA_SetConfig+0x10a>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a5f      	ldr	r2, [pc, #380]	@ (80069f0 <DMA_SetConfig+0x270>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a5e      	ldr	r2, [pc, #376]	@ (80069f4 <DMA_SetConfig+0x274>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <DMA_SetConfig+0x10a>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a5c      	ldr	r2, [pc, #368]	@ (80069f8 <DMA_SetConfig+0x278>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d101      	bne.n	800688e <DMA_SetConfig+0x10e>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <DMA_SetConfig+0x110>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00d      	beq.n	80068b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800689c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80068ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a39      	ldr	r2, [pc, #228]	@ (800699c <DMA_SetConfig+0x21c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d04a      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a38      	ldr	r2, [pc, #224]	@ (80069a0 <DMA_SetConfig+0x220>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d045      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a36      	ldr	r2, [pc, #216]	@ (80069a4 <DMA_SetConfig+0x224>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d040      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a35      	ldr	r2, [pc, #212]	@ (80069a8 <DMA_SetConfig+0x228>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d03b      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a33      	ldr	r2, [pc, #204]	@ (80069ac <DMA_SetConfig+0x22c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d036      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a32      	ldr	r2, [pc, #200]	@ (80069b0 <DMA_SetConfig+0x230>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d031      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a30      	ldr	r2, [pc, #192]	@ (80069b4 <DMA_SetConfig+0x234>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d02c      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2f      	ldr	r2, [pc, #188]	@ (80069b8 <DMA_SetConfig+0x238>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d027      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2d      	ldr	r2, [pc, #180]	@ (80069bc <DMA_SetConfig+0x23c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d022      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a2c      	ldr	r2, [pc, #176]	@ (80069c0 <DMA_SetConfig+0x240>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d01d      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2a      	ldr	r2, [pc, #168]	@ (80069c4 <DMA_SetConfig+0x244>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d018      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a29      	ldr	r2, [pc, #164]	@ (80069c8 <DMA_SetConfig+0x248>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d013      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a27      	ldr	r2, [pc, #156]	@ (80069cc <DMA_SetConfig+0x24c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00e      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a26      	ldr	r2, [pc, #152]	@ (80069d0 <DMA_SetConfig+0x250>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d009      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a24      	ldr	r2, [pc, #144]	@ (80069d4 <DMA_SetConfig+0x254>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d004      	beq.n	8006950 <DMA_SetConfig+0x1d0>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a23      	ldr	r2, [pc, #140]	@ (80069d8 <DMA_SetConfig+0x258>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d101      	bne.n	8006954 <DMA_SetConfig+0x1d4>
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <DMA_SetConfig+0x1d6>
 8006954:	2300      	movs	r3, #0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d059      	beq.n	8006a0e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	223f      	movs	r2, #63	@ 0x3f
 8006964:	409a      	lsls	r2, r3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006978:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b40      	cmp	r3, #64	@ 0x40
 8006988:	d138      	bne.n	80069fc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800699a:	e086      	b.n	8006aaa <DMA_SetConfig+0x32a>
 800699c:	40020010 	.word	0x40020010
 80069a0:	40020028 	.word	0x40020028
 80069a4:	40020040 	.word	0x40020040
 80069a8:	40020058 	.word	0x40020058
 80069ac:	40020070 	.word	0x40020070
 80069b0:	40020088 	.word	0x40020088
 80069b4:	400200a0 	.word	0x400200a0
 80069b8:	400200b8 	.word	0x400200b8
 80069bc:	40020410 	.word	0x40020410
 80069c0:	40020428 	.word	0x40020428
 80069c4:	40020440 	.word	0x40020440
 80069c8:	40020458 	.word	0x40020458
 80069cc:	40020470 	.word	0x40020470
 80069d0:	40020488 	.word	0x40020488
 80069d4:	400204a0 	.word	0x400204a0
 80069d8:	400204b8 	.word	0x400204b8
 80069dc:	58025408 	.word	0x58025408
 80069e0:	5802541c 	.word	0x5802541c
 80069e4:	58025430 	.word	0x58025430
 80069e8:	58025444 	.word	0x58025444
 80069ec:	58025458 	.word	0x58025458
 80069f0:	5802546c 	.word	0x5802546c
 80069f4:	58025480 	.word	0x58025480
 80069f8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	60da      	str	r2, [r3, #12]
}
 8006a0c:	e04d      	b.n	8006aaa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a29      	ldr	r2, [pc, #164]	@ (8006ab8 <DMA_SetConfig+0x338>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d022      	beq.n	8006a5e <DMA_SetConfig+0x2de>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a27      	ldr	r2, [pc, #156]	@ (8006abc <DMA_SetConfig+0x33c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d01d      	beq.n	8006a5e <DMA_SetConfig+0x2de>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a26      	ldr	r2, [pc, #152]	@ (8006ac0 <DMA_SetConfig+0x340>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d018      	beq.n	8006a5e <DMA_SetConfig+0x2de>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a24      	ldr	r2, [pc, #144]	@ (8006ac4 <DMA_SetConfig+0x344>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <DMA_SetConfig+0x2de>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a23      	ldr	r2, [pc, #140]	@ (8006ac8 <DMA_SetConfig+0x348>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00e      	beq.n	8006a5e <DMA_SetConfig+0x2de>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a21      	ldr	r2, [pc, #132]	@ (8006acc <DMA_SetConfig+0x34c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d009      	beq.n	8006a5e <DMA_SetConfig+0x2de>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a20      	ldr	r2, [pc, #128]	@ (8006ad0 <DMA_SetConfig+0x350>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d004      	beq.n	8006a5e <DMA_SetConfig+0x2de>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad4 <DMA_SetConfig+0x354>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d101      	bne.n	8006a62 <DMA_SetConfig+0x2e2>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <DMA_SetConfig+0x2e4>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d020      	beq.n	8006aaa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	2201      	movs	r2, #1
 8006a72:	409a      	lsls	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b40      	cmp	r3, #64	@ 0x40
 8006a86:	d108      	bne.n	8006a9a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	60da      	str	r2, [r3, #12]
}
 8006a98:	e007      	b.n	8006aaa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	60da      	str	r2, [r3, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	58025408 	.word	0x58025408
 8006abc:	5802541c 	.word	0x5802541c
 8006ac0:	58025430 	.word	0x58025430
 8006ac4:	58025444 	.word	0x58025444
 8006ac8:	58025458 	.word	0x58025458
 8006acc:	5802546c 	.word	0x5802546c
 8006ad0:	58025480 	.word	0x58025480
 8006ad4:	58025494 	.word	0x58025494

08006ad8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a42      	ldr	r2, [pc, #264]	@ (8006bf0 <DMA_CalcBaseAndBitshift+0x118>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d04a      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a41      	ldr	r2, [pc, #260]	@ (8006bf4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d045      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a3f      	ldr	r2, [pc, #252]	@ (8006bf8 <DMA_CalcBaseAndBitshift+0x120>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d040      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a3e      	ldr	r2, [pc, #248]	@ (8006bfc <DMA_CalcBaseAndBitshift+0x124>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d03b      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8006c00 <DMA_CalcBaseAndBitshift+0x128>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d036      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a3b      	ldr	r2, [pc, #236]	@ (8006c04 <DMA_CalcBaseAndBitshift+0x12c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d031      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a39      	ldr	r2, [pc, #228]	@ (8006c08 <DMA_CalcBaseAndBitshift+0x130>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02c      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a38      	ldr	r2, [pc, #224]	@ (8006c0c <DMA_CalcBaseAndBitshift+0x134>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d027      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a36      	ldr	r2, [pc, #216]	@ (8006c10 <DMA_CalcBaseAndBitshift+0x138>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a35      	ldr	r2, [pc, #212]	@ (8006c14 <DMA_CalcBaseAndBitshift+0x13c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01d      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a33      	ldr	r2, [pc, #204]	@ (8006c18 <DMA_CalcBaseAndBitshift+0x140>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a32      	ldr	r2, [pc, #200]	@ (8006c1c <DMA_CalcBaseAndBitshift+0x144>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a30      	ldr	r2, [pc, #192]	@ (8006c20 <DMA_CalcBaseAndBitshift+0x148>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a2f      	ldr	r2, [pc, #188]	@ (8006c24 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a2d      	ldr	r2, [pc, #180]	@ (8006c28 <DMA_CalcBaseAndBitshift+0x150>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <DMA_CalcBaseAndBitshift+0xa8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8006c2c <DMA_CalcBaseAndBitshift+0x154>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <DMA_CalcBaseAndBitshift+0xac>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <DMA_CalcBaseAndBitshift+0xae>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d024      	beq.n	8006bd4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	3b10      	subs	r3, #16
 8006b92:	4a27      	ldr	r2, [pc, #156]	@ (8006c30 <DMA_CalcBaseAndBitshift+0x158>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	091b      	lsrs	r3, r3, #4
 8006b9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	4a24      	ldr	r2, [pc, #144]	@ (8006c34 <DMA_CalcBaseAndBitshift+0x15c>)
 8006ba4:	5cd3      	ldrb	r3, [r2, r3]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d908      	bls.n	8006bc4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c38 <DMA_CalcBaseAndBitshift+0x160>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	1d1a      	adds	r2, r3, #4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006bc2:	e00d      	b.n	8006be0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4b1b      	ldr	r3, [pc, #108]	@ (8006c38 <DMA_CalcBaseAndBitshift+0x160>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bd2:	e005      	b.n	8006be0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40020010 	.word	0x40020010
 8006bf4:	40020028 	.word	0x40020028
 8006bf8:	40020040 	.word	0x40020040
 8006bfc:	40020058 	.word	0x40020058
 8006c00:	40020070 	.word	0x40020070
 8006c04:	40020088 	.word	0x40020088
 8006c08:	400200a0 	.word	0x400200a0
 8006c0c:	400200b8 	.word	0x400200b8
 8006c10:	40020410 	.word	0x40020410
 8006c14:	40020428 	.word	0x40020428
 8006c18:	40020440 	.word	0x40020440
 8006c1c:	40020458 	.word	0x40020458
 8006c20:	40020470 	.word	0x40020470
 8006c24:	40020488 	.word	0x40020488
 8006c28:	400204a0 	.word	0x400204a0
 8006c2c:	400204b8 	.word	0x400204b8
 8006c30:	aaaaaaab 	.word	0xaaaaaaab
 8006c34:	08018dd4 	.word	0x08018dd4
 8006c38:	fffffc00 	.word	0xfffffc00

08006c3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d120      	bne.n	8006c92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d858      	bhi.n	8006d0a <DMA_CheckFifoParam+0xce>
 8006c58:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <DMA_CheckFifoParam+0x24>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c83 	.word	0x08006c83
 8006c68:	08006c71 	.word	0x08006c71
 8006c6c:	08006d0b 	.word	0x08006d0b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d048      	beq.n	8006d0e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c80:	e045      	b.n	8006d0e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c8a:	d142      	bne.n	8006d12 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c90:	e03f      	b.n	8006d12 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c9a:	d123      	bne.n	8006ce4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d838      	bhi.n	8006d16 <DMA_CheckFifoParam+0xda>
 8006ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <DMA_CheckFifoParam+0x70>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cc3 	.word	0x08006cc3
 8006cb4:	08006cbd 	.word	0x08006cbd
 8006cb8:	08006cd5 	.word	0x08006cd5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
        break;
 8006cc0:	e030      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d025      	beq.n	8006d1a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cd2:	e022      	b.n	8006d1a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006cdc:	d11f      	bne.n	8006d1e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ce2:	e01c      	b.n	8006d1e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d902      	bls.n	8006cf2 <DMA_CheckFifoParam+0xb6>
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d003      	beq.n	8006cf8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006cf0:	e018      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	73fb      	strb	r3, [r7, #15]
        break;
 8006cf6:	e015      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00e      	beq.n	8006d22 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
    break;
 8006d08:	e00b      	b.n	8006d22 <DMA_CheckFifoParam+0xe6>
        break;
 8006d0a:	bf00      	nop
 8006d0c:	e00a      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>
        break;
 8006d0e:	bf00      	nop
 8006d10:	e008      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>
        break;
 8006d12:	bf00      	nop
 8006d14:	e006      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>
        break;
 8006d16:	bf00      	nop
 8006d18:	e004      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>
        break;
 8006d1a:	bf00      	nop
 8006d1c:	e002      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>
        break;
 8006d1e:	bf00      	nop
 8006d20:	e000      	b.n	8006d24 <DMA_CheckFifoParam+0xe8>
    break;
 8006d22:	bf00      	nop
    }
  }

  return status;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop

08006d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a38      	ldr	r2, [pc, #224]	@ (8006e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d022      	beq.n	8006d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a36      	ldr	r2, [pc, #216]	@ (8006e2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01d      	beq.n	8006d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a35      	ldr	r2, [pc, #212]	@ (8006e30 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a33      	ldr	r2, [pc, #204]	@ (8006e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a32      	ldr	r2, [pc, #200]	@ (8006e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a30      	ldr	r2, [pc, #192]	@ (8006e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a2f      	ldr	r2, [pc, #188]	@ (8006e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d101      	bne.n	8006d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01a      	beq.n	8006dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	3b08      	subs	r3, #8
 8006da4:	4a28      	ldr	r2, [pc, #160]	@ (8006e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	091b      	lsrs	r3, r3, #4
 8006dac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4b26      	ldr	r3, [pc, #152]	@ (8006e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	461a      	mov	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a24      	ldr	r2, [pc, #144]	@ (8006e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006dc0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2201      	movs	r2, #1
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006dd0:	e024      	b.n	8006e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	3b10      	subs	r3, #16
 8006dda:	4a1e      	ldr	r2, [pc, #120]	@ (8006e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	091b      	lsrs	r3, r3, #4
 8006de2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d806      	bhi.n	8006dfa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4a1b      	ldr	r2, [pc, #108]	@ (8006e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d902      	bls.n	8006dfa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3308      	adds	r3, #8
 8006df8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4b18      	ldr	r3, [pc, #96]	@ (8006e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a16      	ldr	r2, [pc, #88]	@ (8006e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006e0c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	2201      	movs	r2, #1
 8006e16:	409a      	lsls	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	58025408 	.word	0x58025408
 8006e2c:	5802541c 	.word	0x5802541c
 8006e30:	58025430 	.word	0x58025430
 8006e34:	58025444 	.word	0x58025444
 8006e38:	58025458 	.word	0x58025458
 8006e3c:	5802546c 	.word	0x5802546c
 8006e40:	58025480 	.word	0x58025480
 8006e44:	58025494 	.word	0x58025494
 8006e48:	cccccccd 	.word	0xcccccccd
 8006e4c:	16009600 	.word	0x16009600
 8006e50:	58025880 	.word	0x58025880
 8006e54:	aaaaaaab 	.word	0xaaaaaaab
 8006e58:	400204b8 	.word	0x400204b8
 8006e5c:	4002040f 	.word	0x4002040f
 8006e60:	10008200 	.word	0x10008200
 8006e64:	40020880 	.word	0x40020880

08006e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04a      	beq.n	8006f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d847      	bhi.n	8006f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a25      	ldr	r2, [pc, #148]	@ (8006f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d022      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a24      	ldr	r2, [pc, #144]	@ (8006f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d01d      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a22      	ldr	r2, [pc, #136]	@ (8006f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d018      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a21      	ldr	r2, [pc, #132]	@ (8006f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d013      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00e      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1e      	ldr	r2, [pc, #120]	@ (8006f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d009      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1b      	ldr	r2, [pc, #108]	@ (8006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d101      	bne.n	8006ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4b17      	ldr	r3, [pc, #92]	@ (8006f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ef0:	671a      	str	r2, [r3, #112]	@ 0x70
 8006ef2:	e009      	b.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4b14      	ldr	r3, [pc, #80]	@ (8006f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	461a      	mov	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a11      	ldr	r2, [pc, #68]	@ (8006f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006f06:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	58025408 	.word	0x58025408
 8006f24:	5802541c 	.word	0x5802541c
 8006f28:	58025430 	.word	0x58025430
 8006f2c:	58025444 	.word	0x58025444
 8006f30:	58025458 	.word	0x58025458
 8006f34:	5802546c 	.word	0x5802546c
 8006f38:	58025480 	.word	0x58025480
 8006f3c:	58025494 	.word	0x58025494
 8006f40:	1600963f 	.word	0x1600963f
 8006f44:	58025940 	.word	0x58025940
 8006f48:	1000823f 	.word	0x1000823f
 8006f4c:	40020940 	.word	0x40020940

08006f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b089      	sub	sp, #36	@ 0x24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f5e:	4b89      	ldr	r3, [pc, #548]	@ (8007184 <HAL_GPIO_Init+0x234>)
 8006f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f62:	e194      	b.n	800728e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	2101      	movs	r1, #1
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	4013      	ands	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8186 	beq.w	8007288 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d005      	beq.n	8006f94 <HAL_GPIO_Init+0x44>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d130      	bne.n	8006ff6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006fca:	2201      	movs	r2, #1
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	f003 0201 	and.w	r2, r3, #1
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d017      	beq.n	8007032 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	2203      	movs	r2, #3
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	43db      	mvns	r3, r3
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	4013      	ands	r3, r2
 8007018:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	fa02 f303 	lsl.w	r3, r2, r3
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	4313      	orrs	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d123      	bne.n	8007086 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	08da      	lsrs	r2, r3, #3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3208      	adds	r2, #8
 8007046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	220f      	movs	r2, #15
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43db      	mvns	r3, r3
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	4013      	ands	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4313      	orrs	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	08da      	lsrs	r2, r3, #3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3208      	adds	r2, #8
 8007080:	69b9      	ldr	r1, [r7, #24]
 8007082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	2203      	movs	r2, #3
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	43db      	mvns	r3, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f003 0203 	and.w	r2, r3, #3
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	fa02 f303 	lsl.w	r3, r2, r3
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80e0 	beq.w	8007288 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070c8:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <HAL_GPIO_Init+0x238>)
 80070ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070ce:	4a2e      	ldr	r2, [pc, #184]	@ (8007188 <HAL_GPIO_Init+0x238>)
 80070d0:	f043 0302 	orr.w	r3, r3, #2
 80070d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80070d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007188 <HAL_GPIO_Init+0x238>)
 80070da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070e6:	4a29      	ldr	r2, [pc, #164]	@ (800718c <HAL_GPIO_Init+0x23c>)
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	089b      	lsrs	r3, r3, #2
 80070ec:	3302      	adds	r3, #2
 80070ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	220f      	movs	r2, #15
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43db      	mvns	r3, r3
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	4013      	ands	r3, r2
 8007108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a20      	ldr	r2, [pc, #128]	@ (8007190 <HAL_GPIO_Init+0x240>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d052      	beq.n	80071b8 <HAL_GPIO_Init+0x268>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a1f      	ldr	r2, [pc, #124]	@ (8007194 <HAL_GPIO_Init+0x244>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d031      	beq.n	800717e <HAL_GPIO_Init+0x22e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a1e      	ldr	r2, [pc, #120]	@ (8007198 <HAL_GPIO_Init+0x248>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d02b      	beq.n	800717a <HAL_GPIO_Init+0x22a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a1d      	ldr	r2, [pc, #116]	@ (800719c <HAL_GPIO_Init+0x24c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d025      	beq.n	8007176 <HAL_GPIO_Init+0x226>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a1c      	ldr	r2, [pc, #112]	@ (80071a0 <HAL_GPIO_Init+0x250>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01f      	beq.n	8007172 <HAL_GPIO_Init+0x222>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a1b      	ldr	r2, [pc, #108]	@ (80071a4 <HAL_GPIO_Init+0x254>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d019      	beq.n	800716e <HAL_GPIO_Init+0x21e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a1a      	ldr	r2, [pc, #104]	@ (80071a8 <HAL_GPIO_Init+0x258>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <HAL_GPIO_Init+0x21a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a19      	ldr	r2, [pc, #100]	@ (80071ac <HAL_GPIO_Init+0x25c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00d      	beq.n	8007166 <HAL_GPIO_Init+0x216>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a18      	ldr	r2, [pc, #96]	@ (80071b0 <HAL_GPIO_Init+0x260>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d007      	beq.n	8007162 <HAL_GPIO_Init+0x212>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a17      	ldr	r2, [pc, #92]	@ (80071b4 <HAL_GPIO_Init+0x264>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d101      	bne.n	800715e <HAL_GPIO_Init+0x20e>
 800715a:	2309      	movs	r3, #9
 800715c:	e02d      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 800715e:	230a      	movs	r3, #10
 8007160:	e02b      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 8007162:	2308      	movs	r3, #8
 8007164:	e029      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 8007166:	2307      	movs	r3, #7
 8007168:	e027      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 800716a:	2306      	movs	r3, #6
 800716c:	e025      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 800716e:	2305      	movs	r3, #5
 8007170:	e023      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 8007172:	2304      	movs	r3, #4
 8007174:	e021      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 8007176:	2303      	movs	r3, #3
 8007178:	e01f      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 800717a:	2302      	movs	r3, #2
 800717c:	e01d      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 800717e:	2301      	movs	r3, #1
 8007180:	e01b      	b.n	80071ba <HAL_GPIO_Init+0x26a>
 8007182:	bf00      	nop
 8007184:	58000080 	.word	0x58000080
 8007188:	58024400 	.word	0x58024400
 800718c:	58000400 	.word	0x58000400
 8007190:	58020000 	.word	0x58020000
 8007194:	58020400 	.word	0x58020400
 8007198:	58020800 	.word	0x58020800
 800719c:	58020c00 	.word	0x58020c00
 80071a0:	58021000 	.word	0x58021000
 80071a4:	58021400 	.word	0x58021400
 80071a8:	58021800 	.word	0x58021800
 80071ac:	58021c00 	.word	0x58021c00
 80071b0:	58022000 	.word	0x58022000
 80071b4:	58022400 	.word	0x58022400
 80071b8:	2300      	movs	r3, #0
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	f002 0203 	and.w	r2, r2, #3
 80071c0:	0092      	lsls	r2, r2, #2
 80071c2:	4093      	lsls	r3, r2
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071ca:	4938      	ldr	r1, [pc, #224]	@ (80072ac <HAL_GPIO_Init+0x35c>)
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	089b      	lsrs	r3, r3, #2
 80071d0:	3302      	adds	r3, #2
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	43db      	mvns	r3, r3
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4013      	ands	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80071fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	43db      	mvns	r3, r3
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	4013      	ands	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800722c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	43db      	mvns	r3, r3
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	4013      	ands	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	43db      	mvns	r3, r3
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	4013      	ands	r3, r2
 800726c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	3301      	adds	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	f47f ae63 	bne.w	8006f64 <HAL_GPIO_Init+0x14>
  }
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	3724      	adds	r7, #36	@ 0x24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	58000400 	.word	0x58000400

080072b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	807b      	strh	r3, [r7, #2]
 80072bc:	4613      	mov	r3, r2
 80072be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072c0:	787b      	ldrb	r3, [r7, #1]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072c6:	887a      	ldrh	r2, [r7, #2]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80072cc:	e003      	b.n	80072d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80072ce:	887b      	ldrh	r3, [r7, #2]
 80072d0:	041a      	lsls	r2, r3, #16
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	619a      	str	r2, [r3, #24]
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e08b      	b.n	800740e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d106      	bne.n	8007310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7fa fb8c 	bl	8001a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2224      	movs	r2, #36	@ 0x24
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0201 	bic.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d107      	bne.n	800735e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800735a:	609a      	str	r2, [r3, #8]
 800735c:	e006      	b.n	800736c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800736a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d108      	bne.n	8007386 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007382:	605a      	str	r2, [r3, #4]
 8007384:	e007      	b.n	8007396 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007394:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6859      	ldr	r1, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007418 <HAL_I2C_Init+0x134>)
 80073a2:	430b      	orrs	r3, r1
 80073a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	69d9      	ldr	r1, [r3, #28]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a1a      	ldr	r2, [r3, #32]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0201 	orr.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	02008000 	.word	0x02008000

0800741c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af02      	add	r7, sp, #8
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	461a      	mov	r2, r3
 8007428:	460b      	mov	r3, r1
 800742a:	817b      	strh	r3, [r7, #10]
 800742c:	4613      	mov	r3, r2
 800742e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b20      	cmp	r3, #32
 800743a:	f040 80fd 	bne.w	8007638 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_I2C_Master_Transmit+0x30>
 8007448:	2302      	movs	r3, #2
 800744a:	e0f6      	b.n	800763a <HAL_I2C_Master_Transmit+0x21e>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007454:	f7fb fab0 	bl	80029b8 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	2319      	movs	r3, #25
 8007460:	2201      	movs	r2, #1
 8007462:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f002 f89e 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e0e1      	b.n	800763a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2221      	movs	r2, #33	@ 0x21
 800747a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2210      	movs	r2, #16
 8007482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	893a      	ldrh	r2, [r7, #8]
 8007496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2bff      	cmp	r3, #255	@ 0xff
 80074a6:	d906      	bls.n	80074b6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	22ff      	movs	r2, #255	@ 0xff
 80074ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80074ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e007      	b.n	80074c6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80074c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d024      	beq.n	8007518 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007502:	b2db      	uxtb	r3, r3
 8007504:	3301      	adds	r3, #1
 8007506:	b2da      	uxtb	r2, r3
 8007508:	8979      	ldrh	r1, [r7, #10]
 800750a:	4b4e      	ldr	r3, [pc, #312]	@ (8007644 <HAL_I2C_Master_Transmit+0x228>)
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f002 fa0d 	bl	8009930 <I2C_TransferConfig>
 8007516:	e066      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800751c:	b2da      	uxtb	r2, r3
 800751e:	8979      	ldrh	r1, [r7, #10]
 8007520:	4b48      	ldr	r3, [pc, #288]	@ (8007644 <HAL_I2C_Master_Transmit+0x228>)
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f002 fa02 	bl	8009930 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800752c:	e05b      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	6a39      	ldr	r1, [r7, #32]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f002 f891 	bl	800965a <I2C_WaitOnTXISFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e07b      	b.n	800763a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d034      	beq.n	80075e6 <HAL_I2C_Master_Transmit+0x1ca>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007580:	2b00      	cmp	r3, #0
 8007582:	d130      	bne.n	80075e6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	2200      	movs	r2, #0
 800758c:	2180      	movs	r1, #128	@ 0x80
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f002 f80a 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e04d      	b.n	800763a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2bff      	cmp	r3, #255	@ 0xff
 80075a6:	d90e      	bls.n	80075c6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	22ff      	movs	r2, #255	@ 0xff
 80075ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	8979      	ldrh	r1, [r7, #10]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f002 f9b6 	bl	8009930 <I2C_TransferConfig>
 80075c4:	e00f      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	8979      	ldrh	r1, [r7, #10]
 80075d8:	2300      	movs	r3, #0
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f002 f9a5 	bl	8009930 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d19e      	bne.n	800752e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	6a39      	ldr	r1, [r7, #32]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f002 f877 	bl	80096e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e01a      	b.n	800763a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2220      	movs	r2, #32
 800760a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6859      	ldr	r1, [r3, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b0c      	ldr	r3, [pc, #48]	@ (8007648 <HAL_I2C_Master_Transmit+0x22c>)
 8007618:	400b      	ands	r3, r1
 800761a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	e000      	b.n	800763a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007638:	2302      	movs	r3, #2
  }
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	80002000 	.word	0x80002000
 8007648:	fe00e800 	.word	0xfe00e800

0800764c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	461a      	mov	r2, r3
 8007658:	460b      	mov	r3, r1
 800765a:	817b      	strh	r3, [r7, #10]
 800765c:	4613      	mov	r3, r2
 800765e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b20      	cmp	r3, #32
 800766e:	f040 80ef 	bne.w	8007850 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800767c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007680:	d101      	bne.n	8007686 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007682:	2302      	movs	r3, #2
 8007684:	e0e5      	b.n	8007852 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007690:	2302      	movs	r3, #2
 8007692:	e0de      	b.n	8007852 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2221      	movs	r2, #33	@ 0x21
 80076a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2210      	movs	r2, #16
 80076a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	893a      	ldrh	r2, [r7, #8]
 80076bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4a66      	ldr	r2, [pc, #408]	@ (800785c <HAL_I2C_Master_Transmit_DMA+0x210>)
 80076c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a66      	ldr	r2, [pc, #408]	@ (8007860 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80076c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2bff      	cmp	r3, #255	@ 0xff
 80076d2:	d906      	bls.n	80076e2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	22ff      	movs	r2, #255	@ 0xff
 80076d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80076da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	e007      	b.n	80076f2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80076ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076f0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01a      	beq.n	8007730 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007714:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007734:	2b00      	cmp	r3, #0
 8007736:	d074      	beq.n	8007822 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773c:	2b00      	cmp	r3, #0
 800773e:	d022      	beq.n	8007786 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007744:	4a47      	ldr	r2, [pc, #284]	@ (8007864 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8007746:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774c:	4a46      	ldr	r2, [pc, #280]	@ (8007868 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800774e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	2200      	movs	r2, #0
 8007756:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	2200      	movs	r2, #0
 800775e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007768:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007770:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007776:	f7fd f8f1 	bl	800495c <HAL_DMA_Start_IT>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d13a      	bne.n	80077fa <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007784:	e013      	b.n	80077ae <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e051      	b.n	8007852 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	3301      	adds	r3, #1
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	8979      	ldrh	r1, [r7, #10]
 80077ba:	4b2c      	ldr	r3, [pc, #176]	@ (800786c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f002 f8b5 	bl	8009930 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80077e0:	2110      	movs	r1, #16
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f002 f8d6 	bl	8009994 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e028      	b.n	800784c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780e:	f043 0210 	orr.w	r2, r3, #16
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e017      	b.n	8007852 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4a12      	ldr	r2, [pc, #72]	@ (8007870 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007826:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	8979      	ldrh	r1, [r7, #10]
 800782e:	4b0f      	ldr	r3, [pc, #60]	@ (800786c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f002 f87a 	bl	8009930 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007844:	2101      	movs	r1, #1
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f002 f8a4 	bl	8009994 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	ffff0000 	.word	0xffff0000
 8007860:	08007eab 	.word	0x08007eab
 8007864:	08009263 	.word	0x08009263
 8007868:	080092f9 	.word	0x080092f9
 800786c:	80002000 	.word	0x80002000
 8007870:	08007a3b 	.word	0x08007a3b

08007874 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	4798      	blx	r3
  }
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	0a1b      	lsrs	r3, r3, #8
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d010      	beq.n	80078ee <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	09db      	lsrs	r3, r3, #7
 80078d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078dc:	f043 0201 	orr.w	r2, r3, #1
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078ec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	0a9b      	lsrs	r3, r3, #10
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d010      	beq.n	800791c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	09db      	lsrs	r3, r3, #7
 80078fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790a:	f043 0208 	orr.w	r2, r3, #8
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800791a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	0a5b      	lsrs	r3, r3, #9
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d010      	beq.n	800794a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	09db      	lsrs	r3, r3, #7
 800792c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007938:	f043 0202 	orr.w	r2, r3, #2
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007948:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800794e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f003 030b 	and.w	r3, r3, #11
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800795a:	68f9      	ldr	r1, [r7, #12]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 fb45 	bl	8008fec <I2C_ITError>
  }
}
 8007962:	bf00      	nop
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
 80079c6:	4613      	mov	r3, r2
 80079c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b088      	sub	sp, #32
 8007a3e:	af02      	add	r7, sp, #8
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <I2C_Master_ISR_IT+0x1e>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e120      	b.n	8007c9a <I2C_Master_ISR_IT+0x260>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	091b      	lsrs	r3, r3, #4
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d013      	beq.n	8007a94 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	091b      	lsrs	r3, r3, #4
 8007a70:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00d      	beq.n	8007a94 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2210      	movs	r2, #16
 8007a7e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a84:	f043 0204 	orr.w	r2, r3, #4
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f001 fbc4 	bl	800921a <I2C_Flush_TXDR>
 8007a92:	e0ed      	b.n	8007c70 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	089b      	lsrs	r3, r3, #2
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d023      	beq.n	8007ae8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	089b      	lsrs	r3, r3, #2
 8007aa4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01d      	beq.n	8007ae8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f023 0304 	bic.w	r3, r3, #4
 8007ab2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ae6:	e0c3      	b.n	8007c70 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	099b      	lsrs	r3, r3, #6
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d12a      	bne.n	8007b4a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d024      	beq.n	8007b4a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01e      	beq.n	8007b4a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80ac 	beq.w	8007c70 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1c:	781a      	ldrb	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8007b48:	e092      	b.n	8007c70 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	09db      	lsrs	r3, r3, #7
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d05d      	beq.n	8007c12 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	099b      	lsrs	r3, r3, #6
 8007b5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d057      	beq.n	8007c12 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d040      	beq.n	8007bee <I2C_Master_ISR_IT+0x1b4>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d13c      	bne.n	8007bee <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b80:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2bff      	cmp	r3, #255	@ 0xff
 8007b8a:	d90e      	bls.n	8007baa <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	22ff      	movs	r2, #255	@ 0xff
 8007b90:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	8a79      	ldrh	r1, [r7, #18]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f001 fec4 	bl	8009930 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ba8:	e032      	b.n	8007c10 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007bbc:	d00b      	beq.n	8007bd6 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bc2:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007bc8:	8a79      	ldrh	r1, [r7, #18]
 8007bca:	2000      	movs	r0, #0
 8007bcc:	9000      	str	r0, [sp, #0]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f001 feae 	bl	8009930 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bd4:	e01c      	b.n	8007c10 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	8a79      	ldrh	r1, [r7, #18]
 8007bde:	2300      	movs	r3, #0
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f001 fea2 	bl	8009930 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bec:	e010      	b.n	8007c10 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bfc:	d003      	beq.n	8007c06 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 fdde 	bl	80087c0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c04:	e034      	b.n	8007c70 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007c06:	2140      	movs	r1, #64	@ 0x40
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f001 f9ef 	bl	8008fec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c0e:	e02f      	b.n	8007c70 <I2C_Master_ISR_IT+0x236>
 8007c10:	e02e      	b.n	8007c70 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	099b      	lsrs	r3, r3, #6
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d028      	beq.n	8007c70 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	099b      	lsrs	r3, r3, #6
 8007c22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d022      	beq.n	8007c70 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d119      	bne.n	8007c68 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c42:	d015      	beq.n	8007c70 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007c4c:	d108      	bne.n	8007c60 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c5c:	605a      	str	r2, [r3, #4]
 8007c5e:	e007      	b.n	8007c70 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fdad 	bl	80087c0 <I2C_ITMasterSeqCplt>
 8007c66:	e003      	b.n	8007c70 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007c68:	2140      	movs	r1, #64	@ 0x40
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f001 f9be 	bl	8008fec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	095b      	lsrs	r3, r3, #5
 8007c80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007c88:	6979      	ldr	r1, [r7, #20]
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fe34 	bl	80088f8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <I2C_Slave_ISR_IT+0x24>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e0ed      	b.n	8007ea2 <I2C_Slave_ISR_IT+0x200>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	095b      	lsrs	r3, r3, #5
 8007cde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007ce6:	6939      	ldr	r1, [r7, #16]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fecf 	bl	8008a8c <I2C_ITSlaveCplt>
 8007cee:	e0d3      	b.n	8007e98 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	091b      	lsrs	r3, r3, #4
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d04d      	beq.n	8007d98 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	091b      	lsrs	r3, r3, #4
 8007d00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d047      	beq.n	8007d98 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d128      	bne.n	8007d64 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b28      	cmp	r3, #40	@ 0x28
 8007d1c:	d108      	bne.n	8007d30 <I2C_Slave_ISR_IT+0x8e>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d24:	d104      	bne.n	8007d30 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007d26:	6939      	ldr	r1, [r7, #16]
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f001 f909 	bl	8008f40 <I2C_ITListenCplt>
 8007d2e:	e032      	b.n	8007d96 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b29      	cmp	r3, #41	@ 0x29
 8007d3a:	d10e      	bne.n	8007d5a <I2C_Slave_ISR_IT+0xb8>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d42:	d00a      	beq.n	8007d5a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2210      	movs	r2, #16
 8007d4a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f001 fa64 	bl	800921a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fd71 	bl	800883a <I2C_ITSlaveSeqCplt>
 8007d58:	e01d      	b.n	8007d96 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2210      	movs	r2, #16
 8007d60:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007d62:	e096      	b.n	8007e92 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2210      	movs	r2, #16
 8007d6a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d70:	f043 0204 	orr.w	r2, r3, #4
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <I2C_Slave_ISR_IT+0xe6>
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d84:	f040 8085 	bne.w	8007e92 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f001 f92c 	bl	8008fec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007d94:	e07d      	b.n	8007e92 <I2C_Slave_ISR_IT+0x1f0>
 8007d96:	e07c      	b.n	8007e92 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	089b      	lsrs	r3, r3, #2
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d030      	beq.n	8007e06 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	089b      	lsrs	r3, r3, #2
 8007da8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02a      	beq.n	8007e06 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d018      	beq.n	8007dec <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d14f      	bne.n	8007e96 <I2C_Slave_ISR_IT+0x1f4>
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007dfc:	d04b      	beq.n	8007e96 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fd1b 	bl	800883a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007e04:	e047      	b.n	8007e96 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	08db      	lsrs	r3, r3, #3
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	08db      	lsrs	r3, r3, #3
 8007e16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007e1e:	6939      	ldr	r1, [r7, #16]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fc49 	bl	80086b8 <I2C_ITAddrCplt>
 8007e26:	e037      	b.n	8007e98 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d031      	beq.n	8007e98 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d02b      	beq.n	8007e98 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d018      	beq.n	8007e7c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	3b01      	subs	r3, #1
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e72:	3b01      	subs	r3, #1
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007e7a:	e00d      	b.n	8007e98 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e82:	d002      	beq.n	8007e8a <I2C_Slave_ISR_IT+0x1e8>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fcd5 	bl	800883a <I2C_ITSlaveSeqCplt>
 8007e90:	e002      	b.n	8007e98 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8007e92:	bf00      	nop
 8007e94:	e000      	b.n	8007e98 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007e96:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b088      	sub	sp, #32
 8007eae:	af02      	add	r7, sp, #8
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <I2C_Master_ISR_DMA+0x1a>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e0e1      	b.n	8008088 <I2C_Master_ISR_DMA+0x1de>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	091b      	lsrs	r3, r3, #4
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d017      	beq.n	8007f08 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	091b      	lsrs	r3, r3, #4
 8007edc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d011      	beq.n	8007f08 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2210      	movs	r2, #16
 8007eea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef0:	f043 0204 	orr.w	r2, r3, #4
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007ef8:	2120      	movs	r1, #32
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f001 fd4a 	bl	8009994 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f001 f98a 	bl	800921a <I2C_Flush_TXDR>
 8007f06:	e0ba      	b.n	800807e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	09db      	lsrs	r3, r3, #7
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d072      	beq.n	8007ffa <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	099b      	lsrs	r3, r3, #6
 8007f18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d06c      	beq.n	8007ffa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f2e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d04e      	beq.n	8007fd8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f46:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	2bff      	cmp	r3, #255	@ 0xff
 8007f50:	d906      	bls.n	8007f60 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	22ff      	movs	r2, #255	@ 0xff
 8007f56:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	e010      	b.n	8007f82 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f72:	d003      	beq.n	8007f7c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	e002      	b.n	8007f82 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f80:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	8a79      	ldrh	r1, [r7, #18]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f001 fccd 	bl	8009930 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b22      	cmp	r3, #34	@ 0x22
 8007fb2:	d108      	bne.n	8007fc6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fc2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007fc4:	e05b      	b.n	800807e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fd4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007fd6:	e052      	b.n	800807e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fe6:	d003      	beq.n	8007ff0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fbe9 	bl	80087c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007fee:	e046      	b.n	800807e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ff0:	2140      	movs	r1, #64	@ 0x40
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fffa 	bl	8008fec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007ff8:	e041      	b.n	800807e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	099b      	lsrs	r3, r3, #6
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d029      	beq.n	800805a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	099b      	lsrs	r3, r3, #6
 800800a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800800e:	2b00      	cmp	r3, #0
 8008010:	d023      	beq.n	800805a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d119      	bne.n	8008050 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008026:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800802a:	d027      	beq.n	800807c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008034:	d108      	bne.n	8008048 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008044:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008046:	e019      	b.n	800807c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 fbb9 	bl	80087c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800804e:	e015      	b.n	800807c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008050:	2140      	movs	r1, #64	@ 0x40
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 ffca 	bl	8008fec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008058:	e010      	b.n	800807c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	095b      	lsrs	r3, r3, #5
 800806a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fc3f 	bl	80088f8 <I2C_ITMasterCplt>
 800807a:	e000      	b.n	800807e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800807c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800809c:	4b92      	ldr	r3, [pc, #584]	@ (80082e8 <I2C_Mem_ISR_DMA+0x258>)
 800809e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d101      	bne.n	80080ae <I2C_Mem_ISR_DMA+0x1e>
 80080aa:	2302      	movs	r3, #2
 80080ac:	e118      	b.n	80082e0 <I2C_Mem_ISR_DMA+0x250>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	091b      	lsrs	r3, r3, #4
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d017      	beq.n	80080f2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	091b      	lsrs	r3, r3, #4
 80080c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d011      	beq.n	80080f2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2210      	movs	r2, #16
 80080d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080da:	f043 0204 	orr.w	r2, r3, #4
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80080e2:	2120      	movs	r1, #32
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f001 fc55 	bl	8009994 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f001 f895 	bl	800921a <I2C_Flush_TXDR>
 80080f0:	e0f1      	b.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	085b      	lsrs	r3, r3, #1
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00f      	beq.n	800811e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	085b      	lsrs	r3, r3, #1
 8008102:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008106:	2b00      	cmp	r3, #0
 8008108:	d009      	beq.n	800811e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008112:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f04f 32ff 	mov.w	r2, #4294967295
 800811a:	651a      	str	r2, [r3, #80]	@ 0x50
 800811c:	e0db      	b.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	09db      	lsrs	r3, r3, #7
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d060      	beq.n	80081ec <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	099b      	lsrs	r3, r3, #6
 800812e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008132:	2b00      	cmp	r3, #0
 8008134:	d05a      	beq.n	80081ec <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008136:	2101      	movs	r1, #1
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f001 fcaf 	bl	8009a9c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800813e:	2110      	movs	r1, #16
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f001 fc27 	bl	8009994 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800814a:	b29b      	uxth	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d048      	beq.n	80081e2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2bff      	cmp	r3, #255	@ 0xff
 8008158:	d910      	bls.n	800817c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	22ff      	movs	r2, #255	@ 0xff
 800815e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008164:	b299      	uxth	r1, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800816a:	b2da      	uxtb	r2, r3
 800816c:	2300      	movs	r3, #0
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f001 fbdb 	bl	8009930 <I2C_TransferConfig>
 800817a:	e011      	b.n	80081a0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800818a:	b299      	uxth	r1, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008190:	b2da      	uxtb	r2, r3
 8008192:	2300      	movs	r3, #0
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f001 fbc8 	bl	8009930 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b22      	cmp	r3, #34	@ 0x22
 80081bc:	d108      	bne.n	80081d0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80081ce:	e082      	b.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80081e0:	e079      	b.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80081e2:	2140      	movs	r1, #64	@ 0x40
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 ff01 	bl	8008fec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80081ea:	e074      	b.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	099b      	lsrs	r3, r3, #6
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d05e      	beq.n	80082b6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	099b      	lsrs	r3, r3, #6
 80081fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008200:	2b00      	cmp	r3, #0
 8008202:	d058      	beq.n	80082b6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008204:	2101      	movs	r1, #1
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f001 fc48 	bl	8009a9c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800820c:	2110      	movs	r1, #16
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f001 fbc0 	bl	8009994 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b22      	cmp	r3, #34	@ 0x22
 800821e:	d101      	bne.n	8008224 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8008220:	4b32      	ldr	r3, [pc, #200]	@ (80082ec <I2C_Mem_ISR_DMA+0x25c>)
 8008222:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008228:	b29b      	uxth	r3, r3
 800822a:	2bff      	cmp	r3, #255	@ 0xff
 800822c:	d910      	bls.n	8008250 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	22ff      	movs	r2, #255	@ 0xff
 8008232:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008238:	b299      	uxth	r1, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800823e:	b2da      	uxtb	r2, r3
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f001 fb71 	bl	8009930 <I2C_TransferConfig>
 800824e:	e011      	b.n	8008274 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825e:	b299      	uxth	r1, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008264:	b2da      	uxtb	r2, r3
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f001 fb5e 	bl	8009930 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b22      	cmp	r3, #34	@ 0x22
 8008290:	d108      	bne.n	80082a4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082a0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80082a2:	e018      	b.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082b2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80082b4:	e00f      	b.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d009      	beq.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	095b      	lsrs	r3, r3, #5
 80082c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 fb11 	bl	80088f8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	80002000 	.word	0x80002000
 80082ec:	80002400 	.word	0x80002400

080082f0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008300:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <I2C_Slave_ISR_DMA+0x24>
 8008310:	2302      	movs	r3, #2
 8008312:	e1cc      	b.n	80086ae <I2C_Slave_ISR_DMA+0x3be>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	095b      	lsrs	r3, r3, #5
 800832c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008330:	2b00      	cmp	r3, #0
 8008332:	d004      	beq.n	800833e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008334:	68b9      	ldr	r1, [r7, #8]
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 fba8 	bl	8008a8c <I2C_ITSlaveCplt>
 800833c:	e1b2      	b.n	80086a4 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 819c 	beq.w	8008684 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	091b      	lsrs	r3, r3, #4
 8008350:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8195 	beq.w	8008684 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	0b9b      	lsrs	r3, r3, #14
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	0bdb      	lsrs	r3, r3, #15
 800836a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 8181 	beq.w	8008676 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d07c      	beq.n	8008476 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	0bdb      	lsrs	r3, r3, #15
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d076      	beq.n	8008476 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a75      	ldr	r2, [pc, #468]	@ (8008564 <I2C_Slave_ISR_DMA+0x274>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d059      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a73      	ldr	r2, [pc, #460]	@ (8008568 <I2C_Slave_ISR_DMA+0x278>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d053      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a71      	ldr	r2, [pc, #452]	@ (800856c <I2C_Slave_ISR_DMA+0x27c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d04d      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a6f      	ldr	r2, [pc, #444]	@ (8008570 <I2C_Slave_ISR_DMA+0x280>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d047      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a6d      	ldr	r2, [pc, #436]	@ (8008574 <I2C_Slave_ISR_DMA+0x284>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d041      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a6b      	ldr	r2, [pc, #428]	@ (8008578 <I2C_Slave_ISR_DMA+0x288>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d03b      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a69      	ldr	r2, [pc, #420]	@ (800857c <I2C_Slave_ISR_DMA+0x28c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d035      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a67      	ldr	r2, [pc, #412]	@ (8008580 <I2C_Slave_ISR_DMA+0x290>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d02f      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a65      	ldr	r2, [pc, #404]	@ (8008584 <I2C_Slave_ISR_DMA+0x294>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d029      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a63      	ldr	r2, [pc, #396]	@ (8008588 <I2C_Slave_ISR_DMA+0x298>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d023      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a61      	ldr	r2, [pc, #388]	@ (800858c <I2C_Slave_ISR_DMA+0x29c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d01d      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a5f      	ldr	r2, [pc, #380]	@ (8008590 <I2C_Slave_ISR_DMA+0x2a0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d017      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a5d      	ldr	r2, [pc, #372]	@ (8008594 <I2C_Slave_ISR_DMA+0x2a4>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d011      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a5b      	ldr	r2, [pc, #364]	@ (8008598 <I2C_Slave_ISR_DMA+0x2a8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00b      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a59      	ldr	r2, [pc, #356]	@ (800859c <I2C_Slave_ISR_DMA+0x2ac>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d005      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x158>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a57      	ldr	r2, [pc, #348]	@ (80085a0 <I2C_Slave_ISR_DMA+0x2b0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d109      	bne.n	800845c <I2C_Slave_ISR_DMA+0x16c>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bf0c      	ite	eq
 8008454:	2301      	moveq	r3, #1
 8008456:	2300      	movne	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	e008      	b.n	800846e <I2C_Slave_ISR_DMA+0x17e>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	bf0c      	ite	eq
 8008468:	2301      	moveq	r3, #1
 800846a:	2300      	movne	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8008472:	2301      	movs	r3, #1
 8008474:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 809f 	beq.w	80085be <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	0b9b      	lsrs	r3, r3, #14
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8098 	beq.w	80085be <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a33      	ldr	r2, [pc, #204]	@ (8008564 <I2C_Slave_ISR_DMA+0x274>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d059      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a31      	ldr	r2, [pc, #196]	@ (8008568 <I2C_Slave_ISR_DMA+0x278>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d053      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a2f      	ldr	r2, [pc, #188]	@ (800856c <I2C_Slave_ISR_DMA+0x27c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d04d      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008570 <I2C_Slave_ISR_DMA+0x280>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d047      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a2b      	ldr	r2, [pc, #172]	@ (8008574 <I2C_Slave_ISR_DMA+0x284>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d041      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a29      	ldr	r2, [pc, #164]	@ (8008578 <I2C_Slave_ISR_DMA+0x288>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d03b      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a27      	ldr	r2, [pc, #156]	@ (800857c <I2C_Slave_ISR_DMA+0x28c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d035      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a25      	ldr	r2, [pc, #148]	@ (8008580 <I2C_Slave_ISR_DMA+0x290>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d02f      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a23      	ldr	r2, [pc, #140]	@ (8008584 <I2C_Slave_ISR_DMA+0x294>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d029      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a21      	ldr	r2, [pc, #132]	@ (8008588 <I2C_Slave_ISR_DMA+0x298>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d023      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1f      	ldr	r2, [pc, #124]	@ (800858c <I2C_Slave_ISR_DMA+0x29c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d01d      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1d      	ldr	r2, [pc, #116]	@ (8008590 <I2C_Slave_ISR_DMA+0x2a0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d017      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1b      	ldr	r2, [pc, #108]	@ (8008594 <I2C_Slave_ISR_DMA+0x2a4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d011      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a19      	ldr	r2, [pc, #100]	@ (8008598 <I2C_Slave_ISR_DMA+0x2a8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00b      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a17      	ldr	r2, [pc, #92]	@ (800859c <I2C_Slave_ISR_DMA+0x2ac>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d005      	beq.n	800854e <I2C_Slave_ISR_DMA+0x25e>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a15      	ldr	r2, [pc, #84]	@ (80085a0 <I2C_Slave_ISR_DMA+0x2b0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d12a      	bne.n	80085a4 <I2C_Slave_ISR_DMA+0x2b4>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	bf0c      	ite	eq
 800855a:	2301      	moveq	r3, #1
 800855c:	2300      	movne	r3, #0
 800855e:	b2db      	uxtb	r3, r3
 8008560:	e029      	b.n	80085b6 <I2C_Slave_ISR_DMA+0x2c6>
 8008562:	bf00      	nop
 8008564:	40020010 	.word	0x40020010
 8008568:	40020028 	.word	0x40020028
 800856c:	40020040 	.word	0x40020040
 8008570:	40020058 	.word	0x40020058
 8008574:	40020070 	.word	0x40020070
 8008578:	40020088 	.word	0x40020088
 800857c:	400200a0 	.word	0x400200a0
 8008580:	400200b8 	.word	0x400200b8
 8008584:	40020410 	.word	0x40020410
 8008588:	40020428 	.word	0x40020428
 800858c:	40020440 	.word	0x40020440
 8008590:	40020458 	.word	0x40020458
 8008594:	40020470 	.word	0x40020470
 8008598:	40020488 	.word	0x40020488
 800859c:	400204a0 	.word	0x400204a0
 80085a0:	400204b8 	.word	0x400204b8
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bf0c      	ite	eq
 80085b0:	2301      	moveq	r3, #1
 80085b2:	2300      	movne	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 80085ba:	2301      	movs	r3, #1
 80085bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d128      	bne.n	8008616 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b28      	cmp	r3, #40	@ 0x28
 80085ce:	d108      	bne.n	80085e2 <I2C_Slave_ISR_DMA+0x2f2>
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085d6:	d104      	bne.n	80085e2 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fcb0 	bl	8008f40 <I2C_ITListenCplt>
 80085e0:	e048      	b.n	8008674 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b29      	cmp	r3, #41	@ 0x29
 80085ec:	d10e      	bne.n	800860c <I2C_Slave_ISR_DMA+0x31c>
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085f4:	d00a      	beq.n	800860c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2210      	movs	r2, #16
 80085fc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 fe0b 	bl	800921a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f918 	bl	800883a <I2C_ITSlaveSeqCplt>
 800860a:	e033      	b.n	8008674 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2210      	movs	r2, #16
 8008612:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008614:	e034      	b.n	8008680 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2210      	movs	r2, #16
 800861c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008622:	f043 0204 	orr.w	r2, r3, #4
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008630:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <I2C_Slave_ISR_DMA+0x350>
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800863e:	d11f      	bne.n	8008680 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	2b21      	cmp	r3, #33	@ 0x21
 8008644:	d002      	beq.n	800864c <I2C_Slave_ISR_DMA+0x35c>
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	2b29      	cmp	r3, #41	@ 0x29
 800864a:	d103      	bne.n	8008654 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2221      	movs	r2, #33	@ 0x21
 8008650:	631a      	str	r2, [r3, #48]	@ 0x30
 8008652:	e008      	b.n	8008666 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	2b22      	cmp	r3, #34	@ 0x22
 8008658:	d002      	beq.n	8008660 <I2C_Slave_ISR_DMA+0x370>
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	2b2a      	cmp	r3, #42	@ 0x2a
 800865e:	d102      	bne.n	8008666 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2222      	movs	r2, #34	@ 0x22
 8008664:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800866a:	4619      	mov	r1, r3
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fcbd 	bl	8008fec <I2C_ITError>
      if (treatdmanack == 1U)
 8008672:	e005      	b.n	8008680 <I2C_Slave_ISR_DMA+0x390>
 8008674:	e004      	b.n	8008680 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2210      	movs	r2, #16
 800867c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800867e:	e011      	b.n	80086a4 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8008680:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008682:	e00f      	b.n	80086a4 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	08db      	lsrs	r3, r3, #3
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	2b00      	cmp	r3, #0
 800868e:	d009      	beq.n	80086a4 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	08db      	lsrs	r3, r3, #3
 8008694:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 f80a 	bl	80086b8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3720      	adds	r7, #32
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop

080086b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80086ce:	2b28      	cmp	r3, #40	@ 0x28
 80086d0:	d16a      	bne.n	80087a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	0c1b      	lsrs	r3, r3, #16
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	0c1b      	lsrs	r3, r3, #16
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80086f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	b29b      	uxth	r3, r3
 8008708:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800870c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	2b02      	cmp	r3, #2
 8008714:	d138      	bne.n	8008788 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008716:	897b      	ldrh	r3, [r7, #10]
 8008718:	09db      	lsrs	r3, r3, #7
 800871a:	b29a      	uxth	r2, r3
 800871c:	89bb      	ldrh	r3, [r7, #12]
 800871e:	4053      	eors	r3, r2
 8008720:	b29b      	uxth	r3, r3
 8008722:	f003 0306 	and.w	r3, r3, #6
 8008726:	2b00      	cmp	r3, #0
 8008728:	d11c      	bne.n	8008764 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800872a:	897b      	ldrh	r3, [r7, #10]
 800872c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800873c:	2b02      	cmp	r3, #2
 800873e:	d13b      	bne.n	80087b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2208      	movs	r2, #8
 800874c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008756:	89ba      	ldrh	r2, [r7, #12]
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff f92c 	bl	80079ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008762:	e029      	b.n	80087b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008764:	893b      	ldrh	r3, [r7, #8]
 8008766:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 f995 	bl	8009a9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800877a:	89ba      	ldrh	r2, [r7, #12]
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff f91a 	bl	80079ba <HAL_I2C_AddrCallback>
}
 8008786:	e017      	b.n	80087b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 f985 	bl	8009a9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800879a:	89ba      	ldrh	r2, [r7, #12]
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff f90a 	bl	80079ba <HAL_I2C_AddrCallback>
}
 80087a6:	e007      	b.n	80087b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2208      	movs	r2, #8
 80087ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80087b8:	bf00      	nop
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b21      	cmp	r3, #33	@ 0x21
 80087da:	d115      	bne.n	8008808 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2211      	movs	r2, #17
 80087e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80087f0:	2101      	movs	r1, #1
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 f952 	bl	8009a9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff f8b2 	bl	800796a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008806:	e014      	b.n	8008832 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2212      	movs	r2, #18
 8008814:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800881c:	2102      	movs	r1, #2
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f001 f93c 	bl	8009a9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff f8a6 	bl	800797e <HAL_I2C_MasterRxCpltCallback>
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	0b9b      	lsrs	r3, r3, #14
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d008      	beq.n	8008870 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	e00d      	b.n	800888c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	0bdb      	lsrs	r3, r3, #15
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800888a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b29      	cmp	r3, #41	@ 0x29
 8008896:	d112      	bne.n	80088be <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2228      	movs	r2, #40	@ 0x28
 800889c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2221      	movs	r2, #33	@ 0x21
 80088a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80088a6:	2101      	movs	r1, #1
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 f8f7 	bl	8009a9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff f86b 	bl	8007992 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80088bc:	e017      	b.n	80088ee <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c8:	d111      	bne.n	80088ee <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2228      	movs	r2, #40	@ 0x28
 80088ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2222      	movs	r2, #34	@ 0x22
 80088d6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80088d8:	2102      	movs	r1, #2
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 f8de 	bl	8009a9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff f85c 	bl	80079a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2220      	movs	r2, #32
 800890c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b21      	cmp	r3, #33	@ 0x21
 8008918:	d107      	bne.n	800892a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800891a:	2101      	movs	r1, #1
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 f8bd 	bl	8009a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2211      	movs	r2, #17
 8008926:	631a      	str	r2, [r3, #48]	@ 0x30
 8008928:	e00c      	b.n	8008944 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b22      	cmp	r3, #34	@ 0x22
 8008934:	d106      	bne.n	8008944 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008936:	2102      	movs	r1, #2
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 f8af 	bl	8009a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2212      	movs	r2, #18
 8008942:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6859      	ldr	r1, [r3, #4]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	4b4d      	ldr	r3, [pc, #308]	@ (8008a84 <I2C_ITMasterCplt+0x18c>)
 8008950:	400b      	ands	r3, r1
 8008952:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a4a      	ldr	r2, [pc, #296]	@ (8008a88 <I2C_ITMasterCplt+0x190>)
 800895e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	091b      	lsrs	r3, r3, #4
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d009      	beq.n	8008980 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2210      	movs	r2, #16
 8008972:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008978:	f043 0204 	orr.w	r2, r3, #4
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b60      	cmp	r3, #96	@ 0x60
 800898a:	d10b      	bne.n	80089a4 <I2C_ITMasterCplt+0xac>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	089b      	lsrs	r3, r3, #2
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80089a2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc38 	bl	800921a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b60      	cmp	r3, #96	@ 0x60
 80089ba:	d002      	beq.n	80089c2 <I2C_ITMasterCplt+0xca>
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d006      	beq.n	80089d0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fb0f 	bl	8008fec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80089ce:	e054      	b.n	8008a7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b21      	cmp	r3, #33	@ 0x21
 80089da:	d124      	bne.n	8008a26 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b40      	cmp	r3, #64	@ 0x40
 80089f4:	d10b      	bne.n	8008a0e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fe ffef 	bl	80079ea <HAL_I2C_MemTxCpltCallback>
}
 8008a0c:	e035      	b.n	8008a7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7fe ffa3 	bl	800796a <HAL_I2C_MasterTxCpltCallback>
}
 8008a24:	e029      	b.n	8008a7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b22      	cmp	r3, #34	@ 0x22
 8008a30:	d123      	bne.n	8008a7a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b40      	cmp	r3, #64	@ 0x40
 8008a4a:	d10b      	bne.n	8008a64 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7fe ffce 	bl	80079fe <HAL_I2C_MemRxCpltCallback>
}
 8008a62:	e00a      	b.n	8008a7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7fe ff82 	bl	800797e <HAL_I2C_MasterRxCpltCallback>
}
 8008a7a:	bf00      	nop
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	fe00e800 	.word	0xfe00e800
 8008a88:	ffff0000 	.word	0xffff0000

08008a8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008aae:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008ab8:	7afb      	ldrb	r3, [r7, #11]
 8008aba:	2b21      	cmp	r3, #33	@ 0x21
 8008abc:	d002      	beq.n	8008ac4 <I2C_ITSlaveCplt+0x38>
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	2b29      	cmp	r3, #41	@ 0x29
 8008ac2:	d108      	bne.n	8008ad6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008ac4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 ffe7 	bl	8009a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2221      	movs	r2, #33	@ 0x21
 8008ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ad4:	e019      	b.n	8008b0a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	2b22      	cmp	r3, #34	@ 0x22
 8008ada:	d002      	beq.n	8008ae2 <I2C_ITSlaveCplt+0x56>
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ae0:	d108      	bne.n	8008af4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008ae2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 ffd8 	bl	8009a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2222      	movs	r2, #34	@ 0x22
 8008af0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008af2:	e00a      	b.n	8008b0a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008af4:	7afb      	ldrb	r3, [r7, #11]
 8008af6:	2b28      	cmp	r3, #40	@ 0x28
 8008af8:	d107      	bne.n	8008b0a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008afa:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 ffcc 	bl	8009a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b18:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6859      	ldr	r1, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	4b80      	ldr	r3, [pc, #512]	@ (8008d28 <I2C_ITSlaveCplt+0x29c>)
 8008b26:	400b      	ands	r3, r1
 8008b28:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fb75 	bl	800921a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	0b9b      	lsrs	r3, r3, #14
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d07a      	beq.n	8008c32 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8112 	beq.w	8008d7a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a73      	ldr	r2, [pc, #460]	@ (8008d2c <I2C_ITSlaveCplt+0x2a0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d059      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a71      	ldr	r2, [pc, #452]	@ (8008d30 <I2C_ITSlaveCplt+0x2a4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d053      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a6f      	ldr	r2, [pc, #444]	@ (8008d34 <I2C_ITSlaveCplt+0x2a8>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d04d      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a6d      	ldr	r2, [pc, #436]	@ (8008d38 <I2C_ITSlaveCplt+0x2ac>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d047      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8008d3c <I2C_ITSlaveCplt+0x2b0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d041      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a69      	ldr	r2, [pc, #420]	@ (8008d40 <I2C_ITSlaveCplt+0x2b4>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d03b      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a67      	ldr	r2, [pc, #412]	@ (8008d44 <I2C_ITSlaveCplt+0x2b8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d035      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a65      	ldr	r2, [pc, #404]	@ (8008d48 <I2C_ITSlaveCplt+0x2bc>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d02f      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a63      	ldr	r2, [pc, #396]	@ (8008d4c <I2C_ITSlaveCplt+0x2c0>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d029      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a61      	ldr	r2, [pc, #388]	@ (8008d50 <I2C_ITSlaveCplt+0x2c4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d023      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a5f      	ldr	r2, [pc, #380]	@ (8008d54 <I2C_ITSlaveCplt+0x2c8>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d01d      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a5d      	ldr	r2, [pc, #372]	@ (8008d58 <I2C_ITSlaveCplt+0x2cc>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d017      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a5b      	ldr	r2, [pc, #364]	@ (8008d5c <I2C_ITSlaveCplt+0x2d0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d011      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a59      	ldr	r2, [pc, #356]	@ (8008d60 <I2C_ITSlaveCplt+0x2d4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d00b      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a57      	ldr	r2, [pc, #348]	@ (8008d64 <I2C_ITSlaveCplt+0x2d8>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d005      	beq.n	8008c16 <I2C_ITSlaveCplt+0x18a>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a55      	ldr	r2, [pc, #340]	@ (8008d68 <I2C_ITSlaveCplt+0x2dc>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d105      	bne.n	8008c22 <I2C_ITSlaveCplt+0x196>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	e004      	b.n	8008c2c <I2C_ITSlaveCplt+0x1a0>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008c30:	e0a3      	b.n	8008d7a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	0bdb      	lsrs	r3, r3, #15
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 809d 	beq.w	8008d7a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 8090 	beq.w	8008d7a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a32      	ldr	r2, [pc, #200]	@ (8008d2c <I2C_ITSlaveCplt+0x2a0>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d059      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a30      	ldr	r2, [pc, #192]	@ (8008d30 <I2C_ITSlaveCplt+0x2a4>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d053      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a2e      	ldr	r2, [pc, #184]	@ (8008d34 <I2C_ITSlaveCplt+0x2a8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d04d      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a2c      	ldr	r2, [pc, #176]	@ (8008d38 <I2C_ITSlaveCplt+0x2ac>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d047      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a2a      	ldr	r2, [pc, #168]	@ (8008d3c <I2C_ITSlaveCplt+0x2b0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d041      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a28      	ldr	r2, [pc, #160]	@ (8008d40 <I2C_ITSlaveCplt+0x2b4>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d03b      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a26      	ldr	r2, [pc, #152]	@ (8008d44 <I2C_ITSlaveCplt+0x2b8>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d035      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a24      	ldr	r2, [pc, #144]	@ (8008d48 <I2C_ITSlaveCplt+0x2bc>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d02f      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a22      	ldr	r2, [pc, #136]	@ (8008d4c <I2C_ITSlaveCplt+0x2c0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d029      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a20      	ldr	r2, [pc, #128]	@ (8008d50 <I2C_ITSlaveCplt+0x2c4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d023      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8008d54 <I2C_ITSlaveCplt+0x2c8>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d01d      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d58 <I2C_ITSlaveCplt+0x2cc>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d017      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8008d5c <I2C_ITSlaveCplt+0x2d0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d011      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a18      	ldr	r2, [pc, #96]	@ (8008d60 <I2C_ITSlaveCplt+0x2d4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00b      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a16      	ldr	r2, [pc, #88]	@ (8008d64 <I2C_ITSlaveCplt+0x2d8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d005      	beq.n	8008d1a <I2C_ITSlaveCplt+0x28e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a14      	ldr	r2, [pc, #80]	@ (8008d68 <I2C_ITSlaveCplt+0x2dc>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d128      	bne.n	8008d6c <I2C_ITSlaveCplt+0x2e0>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	e027      	b.n	8008d76 <I2C_ITSlaveCplt+0x2ea>
 8008d26:	bf00      	nop
 8008d28:	fe00e800 	.word	0xfe00e800
 8008d2c:	40020010 	.word	0x40020010
 8008d30:	40020028 	.word	0x40020028
 8008d34:	40020040 	.word	0x40020040
 8008d38:	40020058 	.word	0x40020058
 8008d3c:	40020070 	.word	0x40020070
 8008d40:	40020088 	.word	0x40020088
 8008d44:	400200a0 	.word	0x400200a0
 8008d48:	400200b8 	.word	0x400200b8
 8008d4c:	40020410 	.word	0x40020410
 8008d50:	40020428 	.word	0x40020428
 8008d54:	40020440 	.word	0x40020440
 8008d58:	40020458 	.word	0x40020458
 8008d5c:	40020470 	.word	0x40020470
 8008d60:	40020488 	.word	0x40020488
 8008d64:	400204a0 	.word	0x400204a0
 8008d68:	400204b8 	.word	0x400204b8
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	089b      	lsrs	r3, r3, #2
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d020      	beq.n	8008dc8 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f023 0304 	bic.w	r3, r3, #4
 8008d8c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00c      	beq.n	8008dc8 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dd6:	f043 0204 	orr.w	r2, r3, #4
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	091b      	lsrs	r3, r3, #4
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d04a      	beq.n	8008e80 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	091b      	lsrs	r3, r3, #4
 8008dee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d044      	beq.n	8008e80 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d128      	bne.n	8008e52 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b28      	cmp	r3, #40	@ 0x28
 8008e0a:	d108      	bne.n	8008e1e <I2C_ITSlaveCplt+0x392>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e12:	d104      	bne.n	8008e1e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008e14:	6979      	ldr	r1, [r7, #20]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f892 	bl	8008f40 <I2C_ITListenCplt>
 8008e1c:	e030      	b.n	8008e80 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b29      	cmp	r3, #41	@ 0x29
 8008e28:	d10e      	bne.n	8008e48 <I2C_ITSlaveCplt+0x3bc>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008e30:	d00a      	beq.n	8008e48 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2210      	movs	r2, #16
 8008e38:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f9ed 	bl	800921a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff fcfa 	bl	800883a <I2C_ITSlaveSeqCplt>
 8008e46:	e01b      	b.n	8008e80 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2210      	movs	r2, #16
 8008e4e:	61da      	str	r2, [r3, #28]
 8008e50:	e016      	b.n	8008e80 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2210      	movs	r2, #16
 8008e58:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e5e:	f043 0204 	orr.w	r2, r3, #4
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <I2C_ITSlaveCplt+0x3e8>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e72:	d105      	bne.n	8008e80 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f8b6 	bl	8008fec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d010      	beq.n	8008eb8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f8a5 	bl	8008fec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b28      	cmp	r3, #40	@ 0x28
 8008eac:	d141      	bne.n	8008f32 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008eae:	6979      	ldr	r1, [r7, #20]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f845 	bl	8008f40 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008eb6:	e03c      	b.n	8008f32 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ebc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ec0:	d014      	beq.n	8008eec <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fcb9 	bl	800883a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a1c      	ldr	r2, [pc, #112]	@ (8008f3c <I2C_ITSlaveCplt+0x4b0>)
 8008ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7fe fd76 	bl	80079d6 <HAL_I2C_ListenCpltCallback>
}
 8008eea:	e022      	b.n	8008f32 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b22      	cmp	r3, #34	@ 0x22
 8008ef6:	d10e      	bne.n	8008f16 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7fe fd49 	bl	80079a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008f14:	e00d      	b.n	8008f32 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7fe fd30 	bl	8007992 <HAL_I2C_SlaveTxCpltCallback>
}
 8008f32:	bf00      	nop
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	ffff0000 	.word	0xffff0000

08008f40 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a26      	ldr	r2, [pc, #152]	@ (8008fe8 <I2C_ITListenCplt+0xa8>)
 8008f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	089b      	lsrs	r3, r3, #2
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d022      	beq.n	8008fbe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d012      	beq.n	8008fbe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb6:	f043 0204 	orr.w	r2, r3, #4
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008fbe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fd6a 	bl	8009a9c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2210      	movs	r2, #16
 8008fce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7fe fcfc 	bl	80079d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	ffff0000 	.word	0xffff0000

08008fec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ffc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a6d      	ldr	r2, [pc, #436]	@ (80091c0 <I2C_ITError+0x1d4>)
 800900a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	431a      	orrs	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	2b28      	cmp	r3, #40	@ 0x28
 8009022:	d005      	beq.n	8009030 <I2C_ITError+0x44>
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	2b29      	cmp	r3, #41	@ 0x29
 8009028:	d002      	beq.n	8009030 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	2b2a      	cmp	r3, #42	@ 0x2a
 800902e:	d10b      	bne.n	8009048 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009030:	2103      	movs	r1, #3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fd32 	bl	8009a9c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2228      	movs	r2, #40	@ 0x28
 800903c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a60      	ldr	r2, [pc, #384]	@ (80091c4 <I2C_ITError+0x1d8>)
 8009044:	635a      	str	r2, [r3, #52]	@ 0x34
 8009046:	e030      	b.n	80090aa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009048:	f248 0103 	movw	r1, #32771	@ 0x8003
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fd25 	bl	8009a9c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f8e1 	bl	800921a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b60      	cmp	r3, #96	@ 0x60
 8009062:	d01f      	beq.n	80090a4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b20      	cmp	r3, #32
 8009078:	d114      	bne.n	80090a4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b10      	cmp	r3, #16
 8009086:	d109      	bne.n	800909c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2210      	movs	r2, #16
 800908e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009094:	f043 0204 	orr.w	r2, r3, #4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2220      	movs	r2, #32
 80090a2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d039      	beq.n	800912c <I2C_ITError+0x140>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b11      	cmp	r3, #17
 80090bc:	d002      	beq.n	80090c4 <I2C_ITError+0xd8>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b21      	cmp	r3, #33	@ 0x21
 80090c2:	d133      	bne.n	800912c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090d2:	d107      	bne.n	80090e4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80090e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fd fb2f 	bl	800674c <HAL_DMA_GetState>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d017      	beq.n	8009124 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f8:	4a33      	ldr	r2, [pc, #204]	@ (80091c8 <I2C_ITError+0x1dc>)
 80090fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009108:	4618      	mov	r0, r3
 800910a:	f7fc f9af 	bl	800546c <HAL_DMA_Abort_IT>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d04d      	beq.n	80091b0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800911e:	4610      	mov	r0, r2
 8009120:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009122:	e045      	b.n	80091b0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f851 	bl	80091cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800912a:	e041      	b.n	80091b0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d039      	beq.n	80091a8 <I2C_ITError+0x1bc>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b12      	cmp	r3, #18
 8009138:	d002      	beq.n	8009140 <I2C_ITError+0x154>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b22      	cmp	r3, #34	@ 0x22
 800913e:	d133      	bne.n	80091a8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800914a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800914e:	d107      	bne.n	8009160 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800915e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd faf1 	bl	800674c <HAL_DMA_GetState>
 800916a:	4603      	mov	r3, r0
 800916c:	2b01      	cmp	r3, #1
 800916e:	d017      	beq.n	80091a0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009174:	4a14      	ldr	r2, [pc, #80]	@ (80091c8 <I2C_ITError+0x1dc>)
 8009176:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009184:	4618      	mov	r0, r3
 8009186:	f7fc f971 	bl	800546c <HAL_DMA_Abort_IT>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d011      	beq.n	80091b4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800919a:	4610      	mov	r0, r2
 800919c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800919e:	e009      	b.n	80091b4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f813 	bl	80091cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091a6:	e005      	b.n	80091b4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f80f 	bl	80091cc <I2C_TreatErrorCallback>
  }
}
 80091ae:	e002      	b.n	80091b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80091b0:	bf00      	nop
 80091b2:	e000      	b.n	80091b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091b4:	bf00      	nop
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	ffff0000 	.word	0xffff0000
 80091c4:	08007ca3 	.word	0x08007ca3
 80091c8:	0800956d 	.word	0x0800956d

080091cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b60      	cmp	r3, #96	@ 0x60
 80091de:	d10e      	bne.n	80091fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7fe fc15 	bl	8007a26 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80091fc:	e009      	b.n	8009212 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7fe fc00 	bl	8007a12 <HAL_I2C_ErrorCallback>
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b02      	cmp	r3, #2
 800922e:	d103      	bne.n	8009238 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2200      	movs	r2, #0
 8009236:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b01      	cmp	r3, #1
 8009244:	d007      	beq.n	8009256 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	699a      	ldr	r2, [r3, #24]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	619a      	str	r2, [r3, #24]
  }
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800927e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009284:	b29b      	uxth	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800928a:	2120      	movs	r1, #32
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 fb81 	bl	8009994 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009292:	e02d      	b.n	80092f0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800929c:	441a      	add	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	2bff      	cmp	r3, #255	@ 0xff
 80092aa:	d903      	bls.n	80092b4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	22ff      	movs	r2, #255	@ 0xff
 80092b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80092b2:	e004      	b.n	80092be <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c6:	4619      	mov	r1, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3328      	adds	r3, #40	@ 0x28
 80092ce:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80092d4:	f7fb fb42 	bl	800495c <HAL_DMA_Start_IT>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80092de:	2110      	movs	r1, #16
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fe83 	bl	8008fec <I2C_ITError>
}
 80092e6:	e003      	b.n	80092f0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80092e8:	2140      	movs	r1, #64	@ 0x40
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 fb52 	bl	8009994 <I2C_Enable_IRQ>
}
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009308:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930e:	2b00      	cmp	r3, #0
 8009310:	d076      	beq.n	8009400 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a71      	ldr	r2, [pc, #452]	@ (80094e0 <I2C_DMAError+0x1e8>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d059      	beq.n	80093d2 <I2C_DMAError+0xda>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a6f      	ldr	r2, [pc, #444]	@ (80094e4 <I2C_DMAError+0x1ec>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d053      	beq.n	80093d2 <I2C_DMAError+0xda>
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a6d      	ldr	r2, [pc, #436]	@ (80094e8 <I2C_DMAError+0x1f0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d04d      	beq.n	80093d2 <I2C_DMAError+0xda>
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a6b      	ldr	r2, [pc, #428]	@ (80094ec <I2C_DMAError+0x1f4>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d047      	beq.n	80093d2 <I2C_DMAError+0xda>
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a69      	ldr	r2, [pc, #420]	@ (80094f0 <I2C_DMAError+0x1f8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d041      	beq.n	80093d2 <I2C_DMAError+0xda>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a67      	ldr	r2, [pc, #412]	@ (80094f4 <I2C_DMAError+0x1fc>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d03b      	beq.n	80093d2 <I2C_DMAError+0xda>
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a65      	ldr	r2, [pc, #404]	@ (80094f8 <I2C_DMAError+0x200>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d035      	beq.n	80093d2 <I2C_DMAError+0xda>
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a63      	ldr	r2, [pc, #396]	@ (80094fc <I2C_DMAError+0x204>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d02f      	beq.n	80093d2 <I2C_DMAError+0xda>
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a61      	ldr	r2, [pc, #388]	@ (8009500 <I2C_DMAError+0x208>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d029      	beq.n	80093d2 <I2C_DMAError+0xda>
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a5f      	ldr	r2, [pc, #380]	@ (8009504 <I2C_DMAError+0x20c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d023      	beq.n	80093d2 <I2C_DMAError+0xda>
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a5d      	ldr	r2, [pc, #372]	@ (8009508 <I2C_DMAError+0x210>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d01d      	beq.n	80093d2 <I2C_DMAError+0xda>
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a5b      	ldr	r2, [pc, #364]	@ (800950c <I2C_DMAError+0x214>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d017      	beq.n	80093d2 <I2C_DMAError+0xda>
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a59      	ldr	r2, [pc, #356]	@ (8009510 <I2C_DMAError+0x218>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d011      	beq.n	80093d2 <I2C_DMAError+0xda>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a57      	ldr	r2, [pc, #348]	@ (8009514 <I2C_DMAError+0x21c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00b      	beq.n	80093d2 <I2C_DMAError+0xda>
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a55      	ldr	r2, [pc, #340]	@ (8009518 <I2C_DMAError+0x220>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d005      	beq.n	80093d2 <I2C_DMAError+0xda>
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a53      	ldr	r2, [pc, #332]	@ (800951c <I2C_DMAError+0x224>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d109      	bne.n	80093e6 <I2C_DMAError+0xee>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bf0c      	ite	eq
 80093de:	2301      	moveq	r3, #1
 80093e0:	2300      	movne	r3, #0
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	e008      	b.n	80093f8 <I2C_DMAError+0x100>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf0c      	ite	eq
 80093f2:	2301      	moveq	r3, #1
 80093f4:	2300      	movne	r3, #0
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80093fc:	2301      	movs	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8098 	beq.w	800953a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a33      	ldr	r2, [pc, #204]	@ (80094e0 <I2C_DMAError+0x1e8>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d059      	beq.n	80094ca <I2C_DMAError+0x1d2>
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a31      	ldr	r2, [pc, #196]	@ (80094e4 <I2C_DMAError+0x1ec>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d053      	beq.n	80094ca <I2C_DMAError+0x1d2>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a2f      	ldr	r2, [pc, #188]	@ (80094e8 <I2C_DMAError+0x1f0>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d04d      	beq.n	80094ca <I2C_DMAError+0x1d2>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a2d      	ldr	r2, [pc, #180]	@ (80094ec <I2C_DMAError+0x1f4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d047      	beq.n	80094ca <I2C_DMAError+0x1d2>
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a2b      	ldr	r2, [pc, #172]	@ (80094f0 <I2C_DMAError+0x1f8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d041      	beq.n	80094ca <I2C_DMAError+0x1d2>
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a29      	ldr	r2, [pc, #164]	@ (80094f4 <I2C_DMAError+0x1fc>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d03b      	beq.n	80094ca <I2C_DMAError+0x1d2>
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a27      	ldr	r2, [pc, #156]	@ (80094f8 <I2C_DMAError+0x200>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d035      	beq.n	80094ca <I2C_DMAError+0x1d2>
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a25      	ldr	r2, [pc, #148]	@ (80094fc <I2C_DMAError+0x204>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d02f      	beq.n	80094ca <I2C_DMAError+0x1d2>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a23      	ldr	r2, [pc, #140]	@ (8009500 <I2C_DMAError+0x208>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d029      	beq.n	80094ca <I2C_DMAError+0x1d2>
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a21      	ldr	r2, [pc, #132]	@ (8009504 <I2C_DMAError+0x20c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d023      	beq.n	80094ca <I2C_DMAError+0x1d2>
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a1f      	ldr	r2, [pc, #124]	@ (8009508 <I2C_DMAError+0x210>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d01d      	beq.n	80094ca <I2C_DMAError+0x1d2>
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a1d      	ldr	r2, [pc, #116]	@ (800950c <I2C_DMAError+0x214>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d017      	beq.n	80094ca <I2C_DMAError+0x1d2>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009510 <I2C_DMAError+0x218>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d011      	beq.n	80094ca <I2C_DMAError+0x1d2>
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a19      	ldr	r2, [pc, #100]	@ (8009514 <I2C_DMAError+0x21c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00b      	beq.n	80094ca <I2C_DMAError+0x1d2>
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a17      	ldr	r2, [pc, #92]	@ (8009518 <I2C_DMAError+0x220>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d005      	beq.n	80094ca <I2C_DMAError+0x1d2>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a15      	ldr	r2, [pc, #84]	@ (800951c <I2C_DMAError+0x224>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d12a      	bne.n	8009520 <I2C_DMAError+0x228>
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bf0c      	ite	eq
 80094d6:	2301      	moveq	r3, #1
 80094d8:	2300      	movne	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	e029      	b.n	8009532 <I2C_DMAError+0x23a>
 80094de:	bf00      	nop
 80094e0:	40020010 	.word	0x40020010
 80094e4:	40020028 	.word	0x40020028
 80094e8:	40020040 	.word	0x40020040
 80094ec:	40020058 	.word	0x40020058
 80094f0:	40020070 	.word	0x40020070
 80094f4:	40020088 	.word	0x40020088
 80094f8:	400200a0 	.word	0x400200a0
 80094fc:	400200b8 	.word	0x400200b8
 8009500:	40020410 	.word	0x40020410
 8009504:	40020428 	.word	0x40020428
 8009508:	40020440 	.word	0x40020440
 800950c:	40020458 	.word	0x40020458
 8009510:	40020470 	.word	0x40020470
 8009514:	40020488 	.word	0x40020488
 8009518:	400204a0 	.word	0x400204a0
 800951c:	400204b8 	.word	0x400204b8
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	bf0c      	ite	eq
 800952c:	2301      	moveq	r3, #1
 800952e:	2300      	movne	r3, #0
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8009536:	2301      	movs	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7fd f914 	bl	8006768 <HAL_DMA_GetError>
 8009540:	4603      	mov	r3, r0
 8009542:	2b02      	cmp	r3, #2
 8009544:	d00e      	beq.n	8009564 <I2C_DMAError+0x26c>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00b      	beq.n	8009564 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800955a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800955c:	2110      	movs	r1, #16
 800955e:	68b8      	ldr	r0, [r7, #8]
 8009560:	f7ff fd44 	bl	8008fec <I2C_ITError>
  }
}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009578:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009586:	2200      	movs	r2, #0
 8009588:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009596:	2200      	movs	r2, #0
 8009598:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff fe16 	bl	80091cc <I2C_TreatErrorCallback>
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	4613      	mov	r3, r2
 80095b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095b8:	e03b      	b.n	8009632 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 f8d6 	bl	8009770 <I2C_IsErrorOccurred>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e041      	b.n	8009652 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d4:	d02d      	beq.n	8009632 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095d6:	f7f9 f9ef 	bl	80029b8 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d302      	bcc.n	80095ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d122      	bne.n	8009632 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	699a      	ldr	r2, [r3, #24]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	4013      	ands	r3, r2
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	bf0c      	ite	eq
 80095fc:	2301      	moveq	r3, #1
 80095fe:	2300      	movne	r3, #0
 8009600:	b2db      	uxtb	r3, r3
 8009602:	461a      	mov	r2, r3
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	429a      	cmp	r2, r3
 8009608:	d113      	bne.n	8009632 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800960e:	f043 0220 	orr.w	r2, r3, #32
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2220      	movs	r2, #32
 800961a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e00f      	b.n	8009652 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	699a      	ldr	r2, [r3, #24]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4013      	ands	r3, r2
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	429a      	cmp	r2, r3
 8009640:	bf0c      	ite	eq
 8009642:	2301      	moveq	r3, #1
 8009644:	2300      	movne	r3, #0
 8009646:	b2db      	uxtb	r3, r3
 8009648:	461a      	mov	r2, r3
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	429a      	cmp	r2, r3
 800964e:	d0b4      	beq.n	80095ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009666:	e033      	b.n	80096d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 f87f 	bl	8009770 <I2C_IsErrorOccurred>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e031      	b.n	80096e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d025      	beq.n	80096d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009684:	f7f9 f998 	bl	80029b8 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	429a      	cmp	r2, r3
 8009692:	d302      	bcc.n	800969a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d11a      	bne.n	80096d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d013      	beq.n	80096d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ac:	f043 0220 	orr.w	r2, r3, #32
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e007      	b.n	80096e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d1c4      	bne.n	8009668 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096f4:	e02f      	b.n	8009756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f838 	bl	8009770 <I2C_IsErrorOccurred>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e02d      	b.n	8009766 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800970a:	f7f9 f955 	bl	80029b8 <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	429a      	cmp	r2, r3
 8009718:	d302      	bcc.n	8009720 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d11a      	bne.n	8009756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b20      	cmp	r3, #32
 800972c:	d013      	beq.n	8009756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009732:	f043 0220 	orr.w	r2, r3, #32
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2220      	movs	r2, #32
 800973e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e007      	b.n	8009766 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b20      	cmp	r3, #32
 8009762:	d1c8      	bne.n	80096f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08a      	sub	sp, #40	@ 0x28
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	f003 0310 	and.w	r3, r3, #16
 8009798:	2b00      	cmp	r3, #0
 800979a:	d068      	beq.n	800986e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2210      	movs	r2, #16
 80097a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80097a4:	e049      	b.n	800983a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ac:	d045      	beq.n	800983a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80097ae:	f7f9 f903 	bl	80029b8 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d302      	bcc.n	80097c4 <I2C_IsErrorOccurred+0x54>
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d13a      	bne.n	800983a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097e6:	d121      	bne.n	800982c <I2C_IsErrorOccurred+0xbc>
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ee:	d01d      	beq.n	800982c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80097f0:	7cfb      	ldrb	r3, [r7, #19]
 80097f2:	2b20      	cmp	r3, #32
 80097f4:	d01a      	beq.n	800982c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009804:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009806:	f7f9 f8d7 	bl	80029b8 <HAL_GetTick>
 800980a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800980c:	e00e      	b.n	800982c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800980e:	f7f9 f8d3 	bl	80029b8 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b19      	cmp	r3, #25
 800981a:	d907      	bls.n	800982c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	f043 0320 	orr.w	r3, r3, #32
 8009822:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800982a:	e006      	b.n	800983a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b20      	cmp	r3, #32
 8009838:	d1e9      	bne.n	800980e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b20      	cmp	r3, #32
 8009846:	d003      	beq.n	8009850 <I2C_IsErrorOccurred+0xe0>
 8009848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0aa      	beq.n	80097a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009854:	2b00      	cmp	r3, #0
 8009856:	d103      	bne.n	8009860 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2220      	movs	r2, #32
 800985e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	f043 0304 	orr.w	r3, r3, #4
 8009866:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00b      	beq.n	8009898 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	f043 0301 	orr.w	r3, r3, #1
 8009886:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009890:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00b      	beq.n	80098ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	f043 0308 	orr.w	r3, r3, #8
 80098a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80098b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	f043 0302 	orr.w	r3, r3, #2
 80098ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80098dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01c      	beq.n	800991e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f7ff fc98 	bl	800921a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6859      	ldr	r1, [r3, #4]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	4b0d      	ldr	r3, [pc, #52]	@ (800992c <I2C_IsErrorOccurred+0x1bc>)
 80098f6:	400b      	ands	r3, r1
 80098f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	431a      	orrs	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2220      	movs	r2, #32
 800990a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800991e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009922:	4618      	mov	r0, r3
 8009924:	3728      	adds	r7, #40	@ 0x28
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	fe00e800 	.word	0xfe00e800

08009930 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	607b      	str	r3, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	817b      	strh	r3, [r7, #10]
 800993e:	4613      	mov	r3, r2
 8009940:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009942:	897b      	ldrh	r3, [r7, #10]
 8009944:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009948:	7a7b      	ldrb	r3, [r7, #9]
 800994a:	041b      	lsls	r3, r3, #16
 800994c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009950:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	4313      	orrs	r3, r2
 800995a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800995e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	0d5b      	lsrs	r3, r3, #21
 800996a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800996e:	4b08      	ldr	r3, [pc, #32]	@ (8009990 <I2C_TransferConfig+0x60>)
 8009970:	430b      	orrs	r3, r1
 8009972:	43db      	mvns	r3, r3
 8009974:	ea02 0103 	and.w	r1, r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	430a      	orrs	r2, r1
 8009980:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009982:	bf00      	nop
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	03ff63ff 	.word	0x03ff63ff

08009994 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a8:	4a39      	ldr	r2, [pc, #228]	@ (8009a90 <I2C_Enable_IRQ+0xfc>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d032      	beq.n	8009a14 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80099b2:	4a38      	ldr	r2, [pc, #224]	@ (8009a94 <I2C_Enable_IRQ+0x100>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d02d      	beq.n	8009a14 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80099bc:	4a36      	ldr	r2, [pc, #216]	@ (8009a98 <I2C_Enable_IRQ+0x104>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d028      	beq.n	8009a14 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80099c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	da03      	bge.n	80099d2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80099d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80099d2:	887b      	ldrh	r3, [r7, #2]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80099e2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099e4:	887b      	ldrh	r3, [r7, #2]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d003      	beq.n	80099f6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80099f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80099f6:	887b      	ldrh	r3, [r7, #2]
 80099f8:	2b10      	cmp	r3, #16
 80099fa:	d103      	bne.n	8009a04 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009a02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a04:	887b      	ldrh	r3, [r7, #2]
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d133      	bne.n	8009a72 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f043 0320 	orr.w	r3, r3, #32
 8009a10:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a12:	e02e      	b.n	8009a72 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009a14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	da03      	bge.n	8009a24 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009a22:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a24:	887b      	ldrh	r3, [r7, #2]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009a34:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a36:	887b      	ldrh	r3, [r7, #2]
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d003      	beq.n	8009a48 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009a46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a48:	887b      	ldrh	r3, [r7, #2]
 8009a4a:	2b10      	cmp	r3, #16
 8009a4c:	d103      	bne.n	8009a56 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009a54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a56:	887b      	ldrh	r3, [r7, #2]
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d103      	bne.n	8009a64 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009a62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a64:	887b      	ldrh	r3, [r7, #2]
 8009a66:	2b40      	cmp	r3, #64	@ 0x40
 8009a68:	d103      	bne.n	8009a72 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a70:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6819      	ldr	r1, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	601a      	str	r2, [r3, #0]
}
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	08007eab 	.word	0x08007eab
 8009a94:	080082f1 	.word	0x080082f1
 8009a98:	08008091 	.word	0x08008091

08009a9c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009aac:	887b      	ldrh	r3, [r7, #2]
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00f      	beq.n	8009ad6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009abc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009aca:	2b28      	cmp	r3, #40	@ 0x28
 8009acc:	d003      	beq.n	8009ad6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009ad4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00f      	beq.n	8009b00 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009ae6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009af4:	2b28      	cmp	r3, #40	@ 0x28
 8009af6:	d003      	beq.n	8009b00 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009afe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	da03      	bge.n	8009b10 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009b0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009b10:	887b      	ldrh	r3, [r7, #2]
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d103      	bne.n	8009b1e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009b1c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009b1e:	887b      	ldrh	r3, [r7, #2]
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d103      	bne.n	8009b2c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f043 0320 	orr.w	r3, r3, #32
 8009b2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009b2c:	887b      	ldrh	r3, [r7, #2]
 8009b2e:	2b40      	cmp	r3, #64	@ 0x40
 8009b30:	d103      	bne.n	8009b3a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b38:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	43da      	mvns	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	400a      	ands	r2, r1
 8009b4a:	601a      	str	r2, [r3, #0]
}
 8009b4c:	bf00      	nop
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	d138      	bne.n	8009be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d101      	bne.n	8009b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	e032      	b.n	8009be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2224      	movs	r2, #36	@ 0x24
 8009b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 0201 	bic.w	r2, r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6819      	ldr	r1, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0201 	orr.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e000      	b.n	8009be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009be0:	2302      	movs	r3, #2
  }
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b085      	sub	sp, #20
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d139      	bne.n	8009c78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d101      	bne.n	8009c12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e033      	b.n	8009c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2224      	movs	r2, #36	@ 0x24
 8009c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0201 	bic.w	r2, r2, #1
 8009c30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009c40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	021b      	lsls	r3, r3, #8
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f042 0201 	orr.w	r2, r2, #1
 8009c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	e000      	b.n	8009c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c78:	2302      	movs	r3, #2
  }
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
	...

08009c88 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e070      	b.n	8009d7c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7f7 ffc0 	bl	8001c34 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0201 	orr.w	r2, r2, #1
 8009cca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 0201 	bic.w	r2, r2, #1
 8009cda:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009cea:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d0a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a19      	ldr	r2, [pc, #100]	@ (8009d84 <HAL_JPEG_Init+0xfc>)
 8009d20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a18      	ldr	r2, [pc, #96]	@ (8009d88 <HAL_JPEG_Init+0x100>)
 8009d26:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fccd 	bl	800a6d4 <JPEG_Set_HuffEnc_Mem>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d004      	beq.n	8009d4a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e018      	b.n	8009d7c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d58:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	08018fbc 	.word	0x08018fbc
 8009d88:	08018ffc 	.word	0x08018ffc

08009d8c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <HAL_JPEG_GetInfo+0x16>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e083      	b.n	8009eae <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f003 0303 	and.w	r3, r3, #3
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d103      	bne.n	8009dbc <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2210      	movs	r2, #16
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	e017      	b.n	8009dec <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f003 0303 	and.w	r3, r3, #3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d103      	bne.n	8009dd2 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	e00c      	b.n	8009dec <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f003 0303 	and.w	r3, r3, #3
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d103      	bne.n	8009de8 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2230      	movs	r2, #48	@ 0x30
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	e001      	b.n	8009dec <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e060      	b.n	8009eae <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	0c1b      	lsrs	r3, r3, #16
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b10      	cmp	r3, #16
 8009e0e:	d003      	beq.n	8009e18 <HAL_JPEG_GetInfo+0x8c>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b30      	cmp	r3, #48	@ 0x30
 8009e16:	d140      	bne.n	8009e9a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	091b      	lsrs	r3, r3, #4
 8009e20:	f003 030f 	and.w	r3, r3, #15
 8009e24:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	091b      	lsrs	r3, r3, #4
 8009e2e:	f003 030f 	and.w	r3, r3, #15
 8009e32:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	091b      	lsrs	r3, r3, #4
 8009e3c:	f003 030f 	and.w	r3, r3, #15
 8009e40:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d109      	bne.n	8009e5c <HAL_JPEG_GetInfo+0xd0>
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d106      	bne.n	8009e5c <HAL_JPEG_GetInfo+0xd0>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d103      	bne.n	8009e5c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2202      	movs	r2, #2
 8009e58:	605a      	str	r2, [r3, #4]
 8009e5a:	e01d      	b.n	8009e98 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d109      	bne.n	8009e76 <HAL_JPEG_GetInfo+0xea>
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <HAL_JPEG_GetInfo+0xea>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d103      	bne.n	8009e76 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2200      	movs	r2, #0
 8009e72:	605a      	str	r2, [r3, #4]
 8009e74:	e010      	b.n	8009e98 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b03      	cmp	r3, #3
 8009e7a:	d109      	bne.n	8009e90 <HAL_JPEG_GetInfo+0x104>
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <HAL_JPEG_GetInfo+0x104>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	e003      	b.n	8009e98 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2200      	movs	r2, #0
 8009e94:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009e96:	e003      	b.n	8009ea0 <HAL_JPEG_GetInfo+0x114>
 8009e98:	e002      	b.n	8009ea0 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 fd09 	bl	800b8b8 <JPEG_GetQuality>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d005      	beq.n	8009ed6 <HAL_JPEG_Decode_DMA+0x20>
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <HAL_JPEG_Decode_DMA+0x20>
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e04c      	b.n	8009f74 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d101      	bne.n	8009ee8 <HAL_JPEG_Decode_DMA+0x32>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e045      	b.n	8009f74 <HAL_JPEG_Decode_DMA+0xbe>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d134      	bne.n	8009f66 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2204      	movs	r2, #4
 8009f00:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f08:	f023 020f 	bic.w	r2, r3, #15
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f14:	f043 020e 	orr.w	r2, r3, #14
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 fe49 	bl	800abd8 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f001 f96a 	bl	800b220 <JPEG_DMA_StartProcess>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00f      	beq.n	8009f72 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2206      	movs	r2, #6
 8009f56:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e006      	b.n	8009f74 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e000      	b.n	8009f74 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f8e:	f003 030c 	and.w	r3, r3, #12
 8009f92:	2b0c      	cmp	r3, #12
 8009f94:	d116      	bne.n	8009fc4 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d005      	beq.n	8009fac <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fa4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d033      	beq.n	800a01e <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8009fc2:	e02c      	b.n	800a01e <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fc8:	f003 030c 	and.w	r3, r3, #12
 8009fcc:	2b08      	cmp	r3, #8
 8009fce:	d126      	bne.n	800a01e <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d009      	beq.n	8009fee <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fde:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f043 0306 	orr.w	r3, r3, #6
 8009fec:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f003 0302 	and.w	r3, r3, #2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ffc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800a00a:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	43da      	mvns	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	400a      	ands	r2, r1
 800a01c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800a036:	bf00      	nop
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	3b03      	subs	r3, #3
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d813      	bhi.n	800a0aa <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a086:	f003 030c 	and.w	r3, r3, #12
 800a08a:	2b08      	cmp	r3, #8
 800a08c:	d103      	bne.n	800a096 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fe16 	bl	800acc0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800a094:	e00b      	b.n	800a0ae <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a09a:	f003 030c 	and.w	r3, r3, #12
 800a09e:	2b0c      	cmp	r3, #12
 800a0a0:	d105      	bne.n	800a0ae <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f001 f956 	bl	800b354 <JPEG_DMA_ContinueProcess>
      break;
 800a0a8:	e001      	b.n	800a0ae <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800a0aa:	bf00      	nop
 800a0ac:	e000      	b.n	800a0b0 <HAL_JPEG_IRQHandler+0x44>
      break;
 800a0ae:	bf00      	nop
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b08b      	sub	sp, #44	@ 0x2c
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	e020      	b.n	800a112 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800a0da:	6a3a      	ldr	r2, [r7, #32]
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0de:	4413      	add	r3, r2
 800a0e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0e4:	d90f      	bls.n	800a106 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e055      	b.n	800a196 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3201      	adds	r2, #1
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]
      p++;
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	623b      	str	r3, [r7, #32]
      i--;
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	3b01      	subs	r3, #1
 800a104:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800a106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1ee      	bne.n	800a0ea <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	3301      	adds	r3, #1
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	2b0f      	cmp	r3, #15
 800a116:	d9db      	bls.n	800a0d0 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	4413      	add	r3, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	6a3a      	ldr	r2, [r7, #32]
 800a126:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	617b      	str	r3, [r7, #20]
  p = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800a136:	e027      	b.n	800a188 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	4413      	add	r3, r2
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	601a      	str	r2, [r3, #0]
      p++;
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	3301      	adds	r3, #1
 800a148:	623b      	str	r3, [r7, #32]
      code++;
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	3301      	adds	r3, #1
 800a14e:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	4413      	add	r3, r2
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d0eb      	beq.n	800a138 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2b1f      	cmp	r3, #31
 800a164:	d901      	bls.n	800a16a <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e015      	b.n	800a196 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a16a:	2201      	movs	r2, #1
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	fa02 f303 	lsl.w	r3, r2, r3
 800a172:	69ba      	ldr	r2, [r7, #24]
 800a174:	429a      	cmp	r2, r3
 800a176:	d301      	bcc.n	800a17c <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e00c      	b.n	800a196 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	61bb      	str	r3, [r7, #24]
    si++;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	3301      	adds	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	4413      	add	r3, r2
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1dd      	bne.n	800a150 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	372c      	adds	r7, #44	@ 0x2c
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a1ae:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a1b2:	6018      	str	r0, [r3, #0]
 800a1b4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a1b8:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a1bc:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a1be:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a1c2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	f107 0308 	add.w	r3, r7, #8
 800a1cc:	f107 020c 	add.w	r2, r7, #12
 800a1d0:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800a1d4:	f7ff ff70 	bl	800a0b8 <JPEG_Bits_To_SizeCodes>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800a1de:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800a1e6:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800a1ea:	e075      	b.n	800a2d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800a1f2:	e067      	b.n	800a2c4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800a1f4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a1f8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a202:	4413      	add	r3, r2
 800a204:	3310      	adds	r3, #16
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800a20c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800a214:	23a0      	movs	r3, #160	@ 0xa0
 800a216:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a21a:	e021      	b.n	800a260 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a21c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a220:	2bf0      	cmp	r3, #240	@ 0xf0
 800a222:	d103      	bne.n	800a22c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800a224:	23a1      	movs	r3, #161	@ 0xa1
 800a226:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a22a:	e019      	b.n	800a260 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800a22c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a230:	091b      	lsrs	r3, r3, #4
 800a232:	f003 030f 	and.w	r3, r3, #15
 800a236:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800a23a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a23e:	f003 030f 	and.w	r3, r3, #15
 800a242:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800a246:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800a24a:	4613      	mov	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	461a      	mov	r2, r3
 800a254:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a258:	4413      	add	r3, r2
 800a25a:	3b01      	subs	r3, #1
 800a25c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a260:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a264:	2ba1      	cmp	r3, #161	@ 0xa1
 800a266:	d901      	bls.n	800a26c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a268:	2301      	movs	r3, #1
 800a26a:	e035      	b.n	800a2d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a26c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a270:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a274:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a278:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a27c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a280:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a284:	6819      	ldr	r1, [r3, #0]
 800a286:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a28a:	3328      	adds	r3, #40	@ 0x28
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	440b      	add	r3, r1
 800a290:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a292:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a296:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800a29a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a29e:	4413      	add	r3, r2
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	b2d9      	uxtb	r1, r3
 800a2a6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a2aa:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a2b4:	4413      	add	r3, r2
 800a2b6:	460a      	mov	r2, r1
 800a2b8:	701a      	strb	r2, [r3, #0]
      k++;
 800a2ba:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a2be:	3301      	adds	r3, #1
 800a2c0:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800a2c4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a2c8:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d38e      	bcc.n	800a1f4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a2ee:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a2f2:	6018      	str	r0, [r3, #0]
 800a2f4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a2f8:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a2fc:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a2fe:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a302:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800a30c:	f107 0208 	add.w	r2, r7, #8
 800a310:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800a314:	f7ff fed0 	bl	800a0b8 <JPEG_Bits_To_SizeCodes>
 800a318:	4603      	mov	r3, r0
 800a31a:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800a31e:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800a326:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a32a:	e048      	b.n	800a3be <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800a32c:	2300      	movs	r3, #0
 800a32e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800a332:	e03d      	b.n	800a3b0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800a334:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a338:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a342:	4413      	add	r3, r2
 800a344:	3310      	adds	r3, #16
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a34c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a350:	2b0b      	cmp	r3, #11
 800a352:	d901      	bls.n	800a358 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a354:	2301      	movs	r3, #1
 800a356:	e032      	b.n	800a3be <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a358:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a35c:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800a360:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a364:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a368:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a36c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a370:	6819      	ldr	r1, [r3, #0]
 800a372:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a376:	3302      	adds	r3, #2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	440b      	add	r3, r1
 800a37c:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a37e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a382:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800a386:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a38a:	4413      	add	r3, r2
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	3b01      	subs	r3, #1
 800a390:	b2d9      	uxtb	r1, r3
 800a392:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a396:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a3a0:	4413      	add	r3, r2
 800a3a2:	460a      	mov	r2, r1
 800a3a4:	701a      	strb	r2, [r3, #0]
      k++;
 800a3a6:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800a3b0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800a3b4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d3bb      	bcc.n	800a334 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b09a      	sub	sp, #104	@ 0x68
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d106      	bne.n	800a3f0 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a3ea:	3318      	adds	r3, #24
 800a3ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3ee:	e00f      	b.n	800a410 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d106      	bne.n	800a40c <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a406:	3318      	adds	r3, #24
 800a408:	663b      	str	r3, [r7, #96]	@ 0x60
 800a40a:	e001      	b.n	800a410 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e059      	b.n	800a4c4 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d055      	beq.n	800a4c2 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a416:	f107 0314 	add.w	r3, r7, #20
 800a41a:	4619      	mov	r1, r3
 800a41c:	68b8      	ldr	r0, [r7, #8]
 800a41e:	f7ff ff60 	bl	800a2e2 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800a422:	4603      	mov	r3, r0
 800a424:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800a428:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800a430:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a434:	e046      	b.n	800a4c4 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800a436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a438:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a43a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a43c:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a440:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a444:	3304      	adds	r3, #4
 800a446:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a44a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a44e:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800a450:	230c      	movs	r3, #12
 800a452:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800a454:	e032      	b.n	800a4bc <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800a456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a458:	3b01      	subs	r3, #1
 800a45a:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800a45c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a45e:	3b04      	subs	r3, #4
 800a460:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a462:	f107 0214 	add.w	r2, r7, #20
 800a466:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a468:	4413      	add	r3, r2
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a474:	3302      	adds	r3, #2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	3368      	adds	r3, #104	@ 0x68
 800a47a:	443b      	add	r3, r7
 800a47c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	4313      	orrs	r3, r2
 800a484:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800a486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a488:	3b01      	subs	r3, #1
 800a48a:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a48c:	f107 0214 	add.w	r2, r7, #20
 800a490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a492:	4413      	add	r3, r2
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a49c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a49e:	3302      	adds	r3, #2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	3368      	adds	r3, #104	@ 0x68
 800a4a4:	443b      	add	r3, r7
 800a4a6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a4b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4b2:	041a      	lsls	r2, r3, #16
 800a4b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4ba:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a4bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d8c9      	bhi.n	800a456 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3768      	adds	r7, #104	@ 0x68
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a4d8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a4dc:	6018      	str	r0, [r3, #0]
 800a4de:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a4e2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a4e6:	6019      	str	r1, [r3, #0]
 800a4e8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a4ec:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800a4f0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a4f2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a4f6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a502:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a506:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a50a:	6812      	ldr	r2, [r2, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d10c      	bne.n	800a52a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a510:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a514:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a520:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a524:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a528:	e01d      	b.n	800a566 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a52a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a52e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a53a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a53e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a542:	6812      	ldr	r2, [r2, #0]
 800a544:	429a      	cmp	r2, r3
 800a546:	d10c      	bne.n	800a562 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a548:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a54c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a558:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a55c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a560:	e001      	b.n	800a566 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e0a8      	b.n	800a6b8 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800a566:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a56a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 80a0 	beq.w	800a6b6 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800a576:	f107 0214 	add.w	r2, r7, #20
 800a57a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a57e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a582:	4611      	mov	r1, r2
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	f7ff fe0c 	bl	800a1a2 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800a590:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800a598:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a59c:	e08c      	b.n	800a6b8 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800a59e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a5a2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a5ac:	e00e      	b.n	800a5cc <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800a5ae:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a5b2:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a5b6:	601a      	str	r2, [r3, #0]
      addressDef++;
 800a5b8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a5bc:	3304      	adds	r3, #4
 800a5be:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a5c2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a5cc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d9ec      	bls.n	800a5ae <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800a5d4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a5d8:	4a3a      	ldr	r2, [pc, #232]	@ (800a6c4 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800a5da:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a5dc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800a5e6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a5ea:	4a37      	ldr	r2, [pc, #220]	@ (800a6c8 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800a5ec:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a5ee:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800a5f8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a5fc:	4a33      	ldr	r2, [pc, #204]	@ (800a6cc <JPEG_Set_HuffAC_Mem+0x200>)
 800a5fe:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a600:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a604:	3304      	adds	r3, #4
 800a606:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800a60a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a60e:	4a30      	ldr	r2, [pc, #192]	@ (800a6d0 <JPEG_Set_HuffAC_Mem+0x204>)
 800a610:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800a612:	23a2      	movs	r3, #162	@ 0xa2
 800a614:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800a618:	e049      	b.n	800a6ae <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800a61a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a61e:	3b01      	subs	r3, #1
 800a620:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800a624:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a628:	3b04      	subs	r3, #4
 800a62a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a62e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a632:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a636:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a63a:	4413      	add	r3, r2
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	021b      	lsls	r3, r3, #8
 800a640:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a644:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a648:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a64c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a650:	3328      	adds	r3, #40	@ 0x28
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	440b      	add	r3, r1
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800a660:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a664:	3b01      	subs	r3, #1
 800a666:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a66a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a66e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a672:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a676:	4413      	add	r3, r2
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	021b      	lsls	r3, r3, #8
 800a67c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a680:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a684:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a688:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a68c:	3328      	adds	r3, #40	@ 0x28
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	4313      	orrs	r3, r2
 800a698:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a69c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800a6a0:	041a      	lsls	r2, r3, #16
 800a6a2:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a6ac:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a6ae:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d8b1      	bhi.n	800a61a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	0fd10fd0 	.word	0x0fd10fd0
 800a6c8:	0fd30fd2 	.word	0x0fd30fd2
 800a6cc:	0fd50fd4 	.word	0x0fd50fd4
 800a6d0:	0fd70fd6 	.word	0x0fd70fd6

0800a6d4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f84d 	bl	800a77c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	491f      	ldr	r1, [pc, #124]	@ (800a76c <JPEG_Set_HuffEnc_Mem+0x98>)
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff feec 	bl	800a4cc <JPEG_Set_HuffAC_Mem>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	e030      	b.n	800a764 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a70a:	461a      	mov	r2, r3
 800a70c:	4918      	ldr	r1, [pc, #96]	@ (800a770 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff fedc 	bl	800a4cc <JPEG_Set_HuffAC_Mem>
 800a714:	4603      	mov	r3, r0
 800a716:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	e020      	b.n	800a764 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a72a:	461a      	mov	r2, r3
 800a72c:	4911      	ldr	r1, [pc, #68]	@ (800a774 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fe4a 	bl	800a3c8 <JPEG_Set_HuffDC_Mem>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	e010      	b.n	800a764 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a74a:	461a      	mov	r2, r3
 800a74c:	490a      	ldr	r1, [pc, #40]	@ (800a778 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff fe3a 	bl	800a3c8 <JPEG_Set_HuffDC_Mem>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	e000      	b.n	800a764 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	08018e14 	.word	0x08018e14
 800a770:	08018ec8 	.word	0x08018ec8
 800a774:	08018ddc 	.word	0x08018ddc
 800a778:	08018df8 	.word	0x08018df8

0800a77c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b08b      	sub	sp, #44	@ 0x2c
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800a784:	4b80      	ldr	r3, [pc, #512]	@ (800a988 <JPEG_Set_Huff_DHTMem+0x20c>)
 800a786:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800a788:	4b80      	ldr	r3, [pc, #512]	@ (800a98c <JPEG_Set_Huff_DHTMem+0x210>)
 800a78a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800a78c:	4b80      	ldr	r3, [pc, #512]	@ (800a990 <JPEG_Set_Huff_DHTMem+0x214>)
 800a78e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800a790:	4b80      	ldr	r3, [pc, #512]	@ (800a994 <JPEG_Set_Huff_DHTMem+0x218>)
 800a792:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a79c:	330c      	adds	r3, #12
 800a79e:	623b      	str	r3, [r7, #32]
  index = 16;
 800a7a0:	2310      	movs	r3, #16
 800a7a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a7a4:	e01d      	b.n	800a7e2 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	5cd3      	ldrb	r3, [r2, r3]
 800a7ae:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b2:	3b02      	subs	r3, #2
 800a7b4:	6979      	ldr	r1, [r7, #20]
 800a7b6:	5ccb      	ldrb	r3, [r1, r3]
 800a7b8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a7ba:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	3b03      	subs	r3, #3
 800a7c0:	6979      	ldr	r1, [r7, #20]
 800a7c2:	5ccb      	ldrb	r3, [r1, r3]
 800a7c4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a7c6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a7c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7ca:	3a04      	subs	r2, #4
 800a7cc:	6979      	ldr	r1, [r7, #20]
 800a7ce:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a7d0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	601a      	str	r2, [r3, #0]
    address--;
 800a7d6:	6a3b      	ldr	r3, [r7, #32]
 800a7d8:	3b04      	subs	r3, #4
 800a7da:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	3b04      	subs	r3, #4
 800a7e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d8de      	bhi.n	800a7a6 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a7f0:	3318      	adds	r3, #24
 800a7f2:	623b      	str	r3, [r7, #32]
  index = 12;
 800a7f4:	230c      	movs	r3, #12
 800a7f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a7f8:	e021      	b.n	800a83e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	4413      	add	r3, r2
 800a802:	7c1b      	ldrb	r3, [r3, #16]
 800a804:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	3b02      	subs	r3, #2
 800a80a:	6979      	ldr	r1, [r7, #20]
 800a80c:	440b      	add	r3, r1
 800a80e:	7c1b      	ldrb	r3, [r3, #16]
 800a810:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a812:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a816:	3b03      	subs	r3, #3
 800a818:	6979      	ldr	r1, [r7, #20]
 800a81a:	440b      	add	r3, r1
 800a81c:	7c1b      	ldrb	r3, [r3, #16]
 800a81e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a820:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a824:	3a04      	subs	r2, #4
 800a826:	6979      	ldr	r1, [r7, #20]
 800a828:	440a      	add	r2, r1
 800a82a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a82c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	601a      	str	r2, [r3, #0]
    address--;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	3b04      	subs	r3, #4
 800a836:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	3b04      	subs	r3, #4
 800a83c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a840:	2b03      	cmp	r3, #3
 800a842:	d8da      	bhi.n	800a7fa <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a84c:	3328      	adds	r3, #40	@ 0x28
 800a84e:	623b      	str	r3, [r7, #32]
  index = 16;
 800a850:	2310      	movs	r3, #16
 800a852:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a854:	e01d      	b.n	800a892 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a858:	3b01      	subs	r3, #1
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	5cd3      	ldrb	r3, [r2, r3]
 800a85e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a862:	3b02      	subs	r3, #2
 800a864:	69f9      	ldr	r1, [r7, #28]
 800a866:	5ccb      	ldrb	r3, [r1, r3]
 800a868:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a86a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	3b03      	subs	r3, #3
 800a870:	69f9      	ldr	r1, [r7, #28]
 800a872:	5ccb      	ldrb	r3, [r1, r3]
 800a874:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a876:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a87a:	3a04      	subs	r2, #4
 800a87c:	69f9      	ldr	r1, [r7, #28]
 800a87e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a880:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	601a      	str	r2, [r3, #0]
    address--;
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	3b04      	subs	r3, #4
 800a88a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	3b04      	subs	r3, #4
 800a890:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a894:	2b03      	cmp	r3, #3
 800a896:	d8de      	bhi.n	800a856 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a8a0:	33cc      	adds	r3, #204	@ 0xcc
 800a8a2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	4b3b      	ldr	r3, [pc, #236]	@ (800a998 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a8b4:	021a      	lsls	r2, r3, #8
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	69fa      	ldr	r2, [r7, #28]
 800a8bc:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	3b04      	subs	r3, #4
 800a8ce:	623b      	str	r3, [r7, #32]
  index = 160;
 800a8d0:	23a0      	movs	r3, #160	@ 0xa0
 800a8d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a8d4:	e021      	b.n	800a91a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	69fa      	ldr	r2, [r7, #28]
 800a8dc:	4413      	add	r3, r2
 800a8de:	7c1b      	ldrb	r3, [r3, #16]
 800a8e0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e4:	3b02      	subs	r3, #2
 800a8e6:	69f9      	ldr	r1, [r7, #28]
 800a8e8:	440b      	add	r3, r1
 800a8ea:	7c1b      	ldrb	r3, [r3, #16]
 800a8ec:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a8ee:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f2:	3b03      	subs	r3, #3
 800a8f4:	69f9      	ldr	r1, [r7, #28]
 800a8f6:	440b      	add	r3, r1
 800a8f8:	7c1b      	ldrb	r3, [r3, #16]
 800a8fa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a8fc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a8fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a900:	3a04      	subs	r2, #4
 800a902:	69f9      	ldr	r1, [r7, #28]
 800a904:	440a      	add	r2, r1
 800a906:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a908:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	601a      	str	r2, [r3, #0]
    address--;
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	3b04      	subs	r3, #4
 800a912:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a916:	3b04      	subs	r3, #4
 800a918:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	d8da      	bhi.n	800a8d6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a928:	33cc      	adds	r3, #204	@ 0xcc
 800a92a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	b29b      	uxth	r3, r3
 800a932:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	785b      	ldrb	r3, [r3, #1]
 800a938:	061a      	lsls	r2, r3, #24
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	431a      	orrs	r2, r3
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	041b      	lsls	r3, r3, #16
 800a944:	4313      	orrs	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a956:	33dc      	adds	r3, #220	@ 0xdc
 800a958:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	4b0e      	ldr	r3, [pc, #56]	@ (800a998 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a960:	4013      	ands	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	7bdb      	ldrb	r3, [r3, #15]
 800a968:	021a      	lsls	r2, r3, #8
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	7b92      	ldrb	r2, [r2, #14]
 800a972:	4313      	orrs	r3, r2
 800a974:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	3b04      	subs	r3, #4
 800a980:	623b      	str	r3, [r7, #32]
  index = 12;
 800a982:	230c      	movs	r3, #12
 800a984:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a986:	e027      	b.n	800a9d8 <JPEG_Set_Huff_DHTMem+0x25c>
 800a988:	08018e14 	.word	0x08018e14
 800a98c:	08018ec8 	.word	0x08018ec8
 800a990:	08018ddc 	.word	0x08018ddc
 800a994:	08018df8 	.word	0x08018df8
 800a998:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	3301      	adds	r3, #1
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	5cd3      	ldrb	r3, [r2, r3]
 800a9a4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a9a6:	6939      	ldr	r1, [r7, #16]
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9aa:	440b      	add	r3, r1
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a9b0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	6939      	ldr	r1, [r7, #16]
 800a9b8:	5ccb      	ldrb	r3, [r1, r3]
 800a9ba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a9bc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a9be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9c0:	3a02      	subs	r2, #2
 800a9c2:	6939      	ldr	r1, [r7, #16]
 800a9c4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a9c6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	601a      	str	r2, [r3, #0]
    address--;
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	3b04      	subs	r3, #4
 800a9d0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d4:	3b04      	subs	r3, #4
 800a9d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d8de      	bhi.n	800a99c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a9e6:	33dc      	adds	r3, #220	@ 0xdc
 800a9e8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	7c5b      	ldrb	r3, [r3, #17]
 800a9f6:	061a      	lsls	r2, r3, #24
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	7c1b      	ldrb	r3, [r3, #16]
 800aa00:	041b      	lsls	r3, r3, #16
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aa14:	33e8      	adds	r3, #232	@ 0xe8
 800aa16:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	4b6d      	ldr	r3, [pc, #436]	@ (800abd4 <JPEG_Set_Huff_DHTMem+0x458>)
 800aa1e:	4013      	ands	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	7edb      	ldrb	r3, [r3, #27]
 800aa26:	021a      	lsls	r2, r3, #8
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	7e92      	ldrb	r2, [r2, #26]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]
  *address = value;
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	3b04      	subs	r3, #4
 800aa3e:	623b      	str	r3, [r7, #32]
  index = 8;
 800aa40:	2308      	movs	r3, #8
 800aa42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aa44:	e021      	b.n	800aa8a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800aa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa48:	3301      	adds	r3, #1
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	7c1b      	ldrb	r3, [r3, #16]
 800aa50:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800aa52:	6939      	ldr	r1, [r7, #16]
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	440b      	add	r3, r1
 800aa58:	3310      	adds	r3, #16
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800aa5e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800aa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa62:	3b01      	subs	r3, #1
 800aa64:	6939      	ldr	r1, [r7, #16]
 800aa66:	440b      	add	r3, r1
 800aa68:	7c1b      	ldrb	r3, [r3, #16]
 800aa6a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800aa6c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800aa6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa70:	3a02      	subs	r2, #2
 800aa72:	6939      	ldr	r1, [r7, #16]
 800aa74:	440a      	add	r2, r1
 800aa76:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800aa78:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	601a      	str	r2, [r3, #0]
    address--;
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	3b04      	subs	r3, #4
 800aa82:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800aa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa86:	3b04      	subs	r3, #4
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d8da      	bhi.n	800aa46 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aa98:	33e8      	adds	r3, #232	@ 0xe8
 800aa9a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800aa9c:	6a3b      	ldr	r3, [r7, #32]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	785b      	ldrb	r3, [r3, #1]
 800aaa8:	061a      	lsls	r2, r3, #24
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	431a      	orrs	r2, r3
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	041b      	lsls	r3, r3, #16
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aac6:	33f8      	adds	r3, #248	@ 0xf8
 800aac8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	4b41      	ldr	r3, [pc, #260]	@ (800abd4 <JPEG_Set_Huff_DHTMem+0x458>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	7bdb      	ldrb	r3, [r3, #15]
 800aad8:	021a      	lsls	r2, r3, #8
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4313      	orrs	r3, r2
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	7b92      	ldrb	r2, [r2, #14]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	60fb      	str	r3, [r7, #12]
  *address = value;
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	3b04      	subs	r3, #4
 800aaf0:	623b      	str	r3, [r7, #32]
  index = 12;
 800aaf2:	230c      	movs	r3, #12
 800aaf4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aaf6:	e01d      	b.n	800ab34 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	3301      	adds	r3, #1
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	5cd3      	ldrb	r3, [r2, r3]
 800ab00:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800ab02:	69b9      	ldr	r1, [r7, #24]
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	440b      	add	r3, r1
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ab0c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab10:	3b01      	subs	r3, #1
 800ab12:	69b9      	ldr	r1, [r7, #24]
 800ab14:	5ccb      	ldrb	r3, [r1, r3]
 800ab16:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800ab18:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800ab1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab1c:	3a02      	subs	r2, #2
 800ab1e:	69b9      	ldr	r1, [r7, #24]
 800ab20:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ab22:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	601a      	str	r2, [r3, #0]
    address--;
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	3b04      	subs	r3, #4
 800ab2c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	3b04      	subs	r3, #4
 800ab32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ab34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d8de      	bhi.n	800aaf8 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ab42:	33f8      	adds	r3, #248	@ 0xf8
 800ab44:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	7c5b      	ldrb	r3, [r3, #17]
 800ab52:	061a      	lsls	r2, r3, #24
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	7c1b      	ldrb	r3, [r3, #16]
 800ab5c:	041b      	lsls	r3, r3, #16
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ab70:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800ab74:	623b      	str	r3, [r7, #32]
  index = 160;
 800ab76:	23a0      	movs	r3, #160	@ 0xa0
 800ab78:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ab7a:	e021      	b.n	800abc0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	3301      	adds	r3, #1
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	4413      	add	r3, r2
 800ab84:	7c1b      	ldrb	r3, [r3, #16]
 800ab86:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ab88:	69b9      	ldr	r1, [r7, #24]
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	440b      	add	r3, r1
 800ab8e:	3310      	adds	r3, #16
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ab94:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	69b9      	ldr	r1, [r7, #24]
 800ab9c:	440b      	add	r3, r1
 800ab9e:	7c1b      	ldrb	r3, [r3, #16]
 800aba0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800aba2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800aba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aba6:	3a02      	subs	r2, #2
 800aba8:	69b9      	ldr	r1, [r7, #24]
 800abaa:	440a      	add	r2, r1
 800abac:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800abae:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800abb0:	6a3b      	ldr	r3, [r7, #32]
 800abb2:	601a      	str	r2, [r3, #0]
    address--;
 800abb4:	6a3b      	ldr	r3, [r7, #32]
 800abb6:	3b04      	subs	r3, #4
 800abb8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	3b04      	subs	r3, #4
 800abbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	d8da      	bhi.n	800ab7c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800abc6:	bf00      	nop
 800abc8:	bf00      	nop
 800abca:	372c      	adds	r7, #44	@ 0x2c
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	ffff0000 	.word	0xffff0000

0800abd8 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d108      	bne.n	800ac0a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0208 	orr.w	r2, r2, #8
 800ac06:	605a      	str	r2, [r3, #4]
 800ac08:	e007      	b.n	800ac1a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685a      	ldr	r2, [r3, #4]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f022 0208 	bic.w	r2, r2, #8
 800ac18:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f022 0201 	bic.w	r2, r2, #1
 800ac28:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ac38:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ac48:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac58:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ac68:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f042 0201 	orr.w	r2, r2, #1
 800ac78:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac7e:	f003 030c 	and.w	r3, r3, #12
 800ac82:	2b08      	cmp	r3, #8
 800ac84:	d108      	bne.n	800ac98 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800ac94:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800ac96:	e00d      	b.n	800acb4 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac9c:	f003 030c 	and.w	r3, r3, #12
 800aca0:	2b0c      	cmp	r3, #12
 800aca2:	d107      	bne.n	800acb4 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800acb2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800accc:	f003 0303 	and.w	r3, r3, #3
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d125      	bne.n	800ad20 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d01e      	beq.n	800ad20 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3304      	adds	r3, #4
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff f84f 	bl	8009d8c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3304      	adds	r3, #4
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff f996 	bl	800a02c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad0e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad1e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d116      	bne.n	800ad5a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d004      	beq.n	800ad44 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ad3a:	2108      	movs	r1, #8
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f988 	bl	800b052 <JPEG_ReadInputData>
 800ad42:	e00a      	b.n	800ad5a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad4a:	f003 0304 	and.w	r3, r3, #4
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800ad52:	2101      	movs	r1, #1
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f97c 	bl	800b052 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d116      	bne.n	800ad94 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad6c:	f003 0308 	and.w	r3, r3, #8
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d004      	beq.n	800ad7e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ad74:	2108      	movs	r1, #8
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f864 	bl	800ae44 <JPEG_StoreOutputData>
 800ad7c:	e00a      	b.n	800ad94 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad84:	f003 0310 	and.w	r3, r3, #16
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f858 	bl	800ae44 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d14b      	bne.n	800ae3a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0201 	bic.w	r2, r2, #1
 800adb0:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adb6:	f003 030c 	and.w	r3, r3, #12
 800adba:	2b08      	cmp	r3, #8
 800adbc:	d107      	bne.n	800adce <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800adcc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800addc:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	69d9      	ldr	r1, [r3, #28]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adee:	461a      	mov	r2, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7f6 fc19 	bl	8001628 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae00:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae06:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f003 0303 	and.w	r3, r3, #3
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d103      	bne.n	800ae30 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7f6 fbcf 	bl	80015cc <HAL_JPEG_DecodeCpltCallback>
 800ae2e:	e002      	b.n	800ae36 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff f906 	bl	800a042 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	440b      	add	r3, r1
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d34b      	bcc.n	800aef8 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e031      	b.n	800aeca <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae6c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	69da      	ldr	r2, [r3, #28]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae76:	4413      	add	r3, r2
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	b2d2      	uxtb	r2, r2
 800ae7c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	0a19      	lsrs	r1, r3, #8
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69da      	ldr	r2, [r3, #28]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	4413      	add	r3, r2
 800ae8e:	b2ca      	uxtb	r2, r1
 800ae90:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	0c19      	lsrs	r1, r3, #16
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69da      	ldr	r2, [r3, #28]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9e:	3302      	adds	r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	b2ca      	uxtb	r2, r1
 800aea4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	0e19      	lsrs	r1, r3, #24
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	69da      	ldr	r2, [r3, #28]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb2:	3303      	adds	r3, #3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	b2ca      	uxtb	r2, r1
 800aeb8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aebe:	1d1a      	adds	r2, r3, #4
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	3301      	adds	r3, #1
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d3c9      	bcc.n	800ae66 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeda:	429a      	cmp	r2, r3
 800aedc:	f040 80b5 	bne.w	800b04a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	69d9      	ldr	r1, [r3, #28]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee8:	461a      	mov	r2, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7f6 fb9c 	bl	8001628 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800aef6:	e0a8      	b.n	800b04a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	429a      	cmp	r2, r3
 800af02:	f240 80a2 	bls.w	800b04a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	089b      	lsrs	r3, r3, #2
 800af12:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800af14:	2300      	movs	r3, #0
 800af16:	617b      	str	r3, [r7, #20]
 800af18:	e031      	b.n	800af7e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af20:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69da      	ldr	r2, [r3, #28]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2a:	4413      	add	r3, r2
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	0a19      	lsrs	r1, r3, #8
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	69da      	ldr	r2, [r3, #28]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3e:	3301      	adds	r3, #1
 800af40:	4413      	add	r3, r2
 800af42:	b2ca      	uxtb	r2, r1
 800af44:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	0c19      	lsrs	r1, r3, #16
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	69da      	ldr	r2, [r3, #28]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af52:	3302      	adds	r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	b2ca      	uxtb	r2, r1
 800af58:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	0e19      	lsrs	r1, r3, #24
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	69da      	ldr	r2, [r3, #28]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af66:	3303      	adds	r3, #3
 800af68:	4413      	add	r3, r2
 800af6a:	b2ca      	uxtb	r2, r1
 800af6c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af72:	1d1a      	adds	r2, r3, #4
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	3301      	adds	r3, #1
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	429a      	cmp	r2, r3
 800af84:	d3c9      	bcc.n	800af1a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8e:	429a      	cmp	r2, r3
 800af90:	d10b      	bne.n	800afaa <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	69d9      	ldr	r1, [r3, #28]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9a:	461a      	mov	r2, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7f6 fb43 	bl	8001628 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800afa8:	e04f      	b.n	800b04a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afbc:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]
 800afc2:	e015      	b.n	800aff0 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	00db      	lsls	r3, r3, #3
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	fa22 f103 	lsr.w	r1, r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	69da      	ldr	r2, [r3, #28]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afda:	4413      	add	r3, r2
 800afdc:	b2ca      	uxtb	r2, r1
 800afde:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe4:	1c5a      	adds	r2, r3, #1
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	3301      	adds	r3, #1
 800afee:	617b      	str	r3, [r7, #20]
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d3e5      	bcc.n	800afc4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	69d9      	ldr	r1, [r3, #28]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b000:	461a      	mov	r2, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f6 fb10 	bl	8001628 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f1c3 0304 	rsb	r3, r3, #4
 800b014:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	617b      	str	r3, [r7, #20]
 800b01a:	e013      	b.n	800b044 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	fa22 f103 	lsr.w	r1, r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	69da      	ldr	r2, [r3, #28]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02e:	4413      	add	r3, r2
 800b030:	b2ca      	uxtb	r2, r1
 800b032:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	3301      	adds	r3, #1
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2b03      	cmp	r3, #3
 800b048:	d9e8      	bls.n	800b01c <JPEG_StoreOutputData+0x1d8>
}
 800b04a:	bf00      	nop
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b088      	sub	sp, #32
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800b05c:	2300      	movs	r3, #0
 800b05e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <JPEG_ReadInputData+0x1c>
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d104      	bne.n	800b078 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800b06e:	2101      	movs	r1, #1
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7fe ff83 	bl	8009f7c <HAL_JPEG_Pause>
 800b076:	e028      	b.n	800b0ca <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	429a      	cmp	r2, r3
 800b082:	d906      	bls.n	800b092 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	e01b      	b.n	800b0ca <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d115      	bne.n	800b0ca <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7fe ffd6 	bl	800a056 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d905      	bls.n	800b0be <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b6:	f023 0203 	bic.w	r2, r3, #3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f040 809f 	bne.w	800b216 <JPEG_ReadInputData+0x1c4>
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 809b 	beq.w	800b216 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	089b      	lsrs	r3, r3, #2
 800b0e4:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d335      	bcc.n	800b15a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61bb      	str	r3, [r7, #24]
 800b0f2:	e02d      	b.n	800b150 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	699a      	ldr	r2, [r3, #24]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	4413      	add	r3, r2
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699a      	ldr	r2, [r3, #24]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3301      	adds	r3, #1
 800b10e:	4413      	add	r3, r2
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b114:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6999      	ldr	r1, [r3, #24]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3302      	adds	r3, #2
 800b120:	440b      	add	r3, r1
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b126:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3303      	adds	r3, #3
 800b132:	4413      	add	r3, r2
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b13c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b13e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	1d1a      	adds	r2, r3, #4
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	3301      	adds	r3, #1
 800b14e:	61bb      	str	r3, [r7, #24]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	429a      	cmp	r2, r3
 800b156:	d3cd      	bcc.n	800b0f4 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800b158:	e05d      	b.n	800b216 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d035      	beq.n	800b1cc <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800b160:	2300      	movs	r3, #0
 800b162:	61bb      	str	r3, [r7, #24]
 800b164:	e02d      	b.n	800b1c2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	699a      	ldr	r2, [r3, #24]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4413      	add	r3, r2
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	699a      	ldr	r2, [r3, #24]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3301      	adds	r3, #1
 800b180:	4413      	add	r3, r2
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b186:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6999      	ldr	r1, [r3, #24]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3302      	adds	r3, #2
 800b192:	440b      	add	r3, r1
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b198:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	699a      	ldr	r2, [r3, #24]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3303      	adds	r3, #3
 800b1a4:	4413      	add	r3, r2
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b1ae:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b1b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	1d1a      	adds	r2, r3, #4
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	61bb      	str	r3, [r7, #24]
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d3cd      	bcc.n	800b166 <JPEG_ReadInputData+0x114>
}
 800b1ca:	e024      	b.n	800b216 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61bb      	str	r3, [r7, #24]
 800b1d4:	e017      	b.n	800b206 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699a      	ldr	r2, [r3, #24]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	4413      	add	r3, r2
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	f003 0303 	and.w	r3, r3, #3
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	3301      	adds	r3, #1
 800b204:	61bb      	str	r3, [r7, #24]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d3e3      	bcc.n	800b1d6 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b216:	bf00      	nop
 800b218:	3720      	adds	r7, #32
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b220:	b590      	push	{r4, r7, lr}
 800b222:	b087      	sub	sp, #28
 800b224:	af02      	add	r7, sp, #8
 800b226:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b22e:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b236:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d804      	bhi.n	800b24c <JPEG_DMA_StartProcess+0x2c>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d901      	bls.n	800b250 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e074      	b.n	800b33a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b254:	4a3b      	ldr	r2, [pc, #236]	@ (800b344 <JPEG_DMA_StartProcess+0x124>)
 800b256:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b25c:	4a3a      	ldr	r2, [pc, #232]	@ (800b348 <JPEG_DMA_StartProcess+0x128>)
 800b25e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b264:	4a39      	ldr	r2, [pc, #228]	@ (800b34c <JPEG_DMA_StartProcess+0x12c>)
 800b266:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b26c:	4a36      	ldr	r2, [pc, #216]	@ (800b348 <JPEG_DMA_StartProcess+0x128>)
 800b26e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b274:	4a36      	ldr	r2, [pc, #216]	@ (800b350 <JPEG_DMA_StartProcess+0x130>)
 800b276:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <JPEG_DMA_StartProcess+0x64>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d107      	bne.n	800b294 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b288:	f043 0204 	orr.w	r2, r3, #4
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e052      	b.n	800b33a <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b29c:	68f9      	ldr	r1, [r7, #12]
 800b29e:	fbb3 f1f1 	udiv	r1, r3, r1
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	fb00 f101 	mul.w	r1, r0, r1
 800b2a8:	1a5b      	subs	r3, r3, r1
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b8:	68b9      	ldr	r1, [r7, #8]
 800b2ba:	fbb3 f1f1 	udiv	r1, r3, r1
 800b2be:	68b8      	ldr	r0, [r7, #8]
 800b2c0:	fb00 f101 	mul.w	r1, r0, r1
 800b2c4:	1a5b      	subs	r3, r3, r1
 800b2c6:	1ad2      	subs	r2, r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	3344      	adds	r3, #68	@ 0x44
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	69db      	ldr	r3, [r3, #28]
 800b2dc:	461c      	mov	r4, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	9200      	str	r2, [sp, #0]
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	f000 fbe2 	bl	800bab0 <HAL_MDMA_Start_IT>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d007      	beq.n	800b302 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2f6:	f043 0204 	orr.w	r2, r3, #4
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e01b      	b.n	800b33a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	4619      	mov	r1, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3340      	adds	r3, #64	@ 0x40
 800b312:	461c      	mov	r4, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b318:	2201      	movs	r2, #1
 800b31a:	9200      	str	r2, [sp, #0]
 800b31c:	4622      	mov	r2, r4
 800b31e:	f000 fbc7 	bl	800bab0 <HAL_MDMA_Start_IT>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d007      	beq.n	800b338 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b32c:	f043 0204 	orr.w	r2, r3, #4
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e000      	b.n	800b33a <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd90      	pop	{r4, r7, pc}
 800b342:	bf00      	nop
 800b344:	0800b653 	.word	0x0800b653
 800b348:	0800b841 	.word	0x0800b841
 800b34c:	0800b77f 	.word	0x0800b77f
 800b350:	0800b891 	.word	0x0800b891

0800b354 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b360:	f003 0303 	and.w	r3, r3, #3
 800b364:	2b02      	cmp	r3, #2
 800b366:	d125      	bne.n	800b3b4 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b36e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b372:	2b00      	cmp	r3, #0
 800b374:	d01e      	beq.n	800b3b4 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3304      	adds	r3, #4
 800b37a:	4619      	mov	r1, r3
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7fe fd05 	bl	8009d8c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3304      	adds	r3, #4
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7fe fe4c 	bl	800a02c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b3a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3b2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ba:	f003 0320 	and.w	r3, r3, #32
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d039      	beq.n	800b436 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3c6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f022 0201 	bic.w	r2, r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b3ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b3fc:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d104      	bne.n	800b416 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fbce 	bl	800bbb2 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b41a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b02      	cmp	r3, #2
 800b422:	d105      	bne.n	800b430 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fbc2 	bl	800bbb2 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800b42e:	e002      	b.n	800b436 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f804 	bl	800b43e <JPEG_DMA_EndProcess>
}
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b464:	429a      	cmp	r2, r3
 800b466:	d10a      	bne.n	800b47e <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	69d9      	ldr	r1, [r3, #28]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b470:	461a      	mov	r2, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7f6 f8d8 	bl	8001628 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b484:	f003 0310 	and.w	r3, r3, #16
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d134      	bne.n	800b4f6 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00a      	beq.n	800b4aa <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	69d9      	ldr	r1, [r3, #28]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49c:	461a      	mov	r2, r3
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7f6 f8c2 	bl	8001628 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f022 0201 	bic.w	r2, r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4be:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4c4:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f003 0303 	and.w	r3, r3, #3
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d103      	bne.n	800b4ee <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7f6 f870 	bl	80015cc <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800b4ec:	e00c      	b.n	800b508 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7fe fda7 	bl	800a042 <HAL_JPEG_EncodeCpltCallback>
}
 800b4f4:	e008      	b.n	800b508 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d102      	bne.n	800b508 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f804 	bl	800b510 <JPEG_DMA_PollResidualData>
}
 800b508:	bf00      	nop
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b518:	2310      	movs	r3, #16
 800b51a:	617b      	str	r3, [r7, #20]
 800b51c:	e04f      	b.n	800b5be <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d146      	bne.n	800b5b8 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	2b00      	cmp	r3, #0
 800b536:	d03f      	beq.n	800b5b8 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b53e:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	69da      	ldr	r2, [r3, #28]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b548:	4413      	add	r3, r2
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	0a19      	lsrs	r1, r3, #8
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	69da      	ldr	r2, [r3, #28]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b55c:	3301      	adds	r3, #1
 800b55e:	4413      	add	r3, r2
 800b560:	b2ca      	uxtb	r2, r1
 800b562:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	0c19      	lsrs	r1, r3, #16
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	69da      	ldr	r2, [r3, #28]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b570:	3302      	adds	r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	b2ca      	uxtb	r2, r1
 800b576:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	0e19      	lsrs	r1, r3, #24
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	69da      	ldr	r2, [r3, #28]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b584:	3303      	adds	r3, #3
 800b586:	4413      	add	r3, r2
 800b588:	b2ca      	uxtb	r2, r1
 800b58a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b590:	1d1a      	adds	r2, r3, #4
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d10a      	bne.n	800b5b8 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	69d9      	ldr	r1, [r3, #28]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7f6 f83b 	bl	8001628 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1ac      	bne.n	800b51e <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5c8:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d0:	f003 0310 	and.w	r3, r3, #16
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d004      	beq.n	800b5e2 <JPEG_DMA_PollResidualData+0xd2>
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d133      	bne.n	800b64a <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f022 0201 	bic.w	r2, r2, #1
 800b5f0:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69d9      	ldr	r1, [r3, #28]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b602:	461a      	mov	r2, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7f6 f80f 	bl	8001628 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b614:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b61a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	f003 0303 	and.w	r3, r3, #3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d103      	bne.n	800b644 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7f5 ffc5 	bl	80015cc <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b642:	e002      	b.n	800b64a <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7fe fcfc 	bl	800a042 <HAL_JPEG_EncodeCpltCallback>
}
 800b64a:	bf00      	nop
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b652:	b590      	push	{r4, r7, lr}
 800b654:	b087      	sub	sp, #28
 800b656:	af02      	add	r7, sp, #8
 800b658:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b66e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b674:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b678:	4013      	ands	r3, r2
 800b67a:	2b0c      	cmp	r3, #12
 800b67c:	d17c      	bne.n	800b778 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b684:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b694:	1ad2      	subs	r2, r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f7fe fcd8 	bl	800a056 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d81f      	bhi.n	800b6f0 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10d      	bne.n	800b6d2 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6ba:	f043 0204 	orr.w	r2, r3, #4
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2206      	movs	r2, #6
 800b6c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7f5 ff8e 	bl	80015ec <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b6d0:	e052      	b.n	800b778 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6da:	68b9      	ldr	r1, [r7, #8]
 800b6dc:	fbb3 f1f1 	udiv	r1, r3, r1
 800b6e0:	68b8      	ldr	r0, [r7, #8]
 800b6e2:	fb00 f101 	mul.w	r1, r0, r1
 800b6e6:	1a5b      	subs	r3, r3, r1
 800b6e8:	1ad2      	subs	r2, r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	629a      	str	r2, [r3, #40]	@ 0x28
 800b6ee:	e010      	b.n	800b712 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00c      	beq.n	800b712 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fc:	f003 0303 	and.w	r3, r3, #3
 800b700:	2b00      	cmp	r3, #0
 800b702:	d006      	beq.n	800b712 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b708:	089b      	lsrs	r3, r3, #2
 800b70a:	3301      	adds	r3, #1
 800b70c:	009a      	lsls	r2, r3, #2
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b716:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d124      	bne.n	800b768 <JPEG_MDMAInCpltCallback+0x116>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b722:	2b00      	cmp	r3, #0
 800b724:	d020      	beq.n	800b768 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	4619      	mov	r1, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3340      	adds	r3, #64	@ 0x40
 800b736:	461c      	mov	r4, r3
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b73c:	2201      	movs	r2, #1
 800b73e:	9200      	str	r2, [sp, #0]
 800b740:	4622      	mov	r2, r4
 800b742:	f000 f9b5 	bl	800bab0 <HAL_MDMA_Start_IT>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00d      	beq.n	800b768 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b750:	f043 0204 	orr.w	r2, r3, #4
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2206      	movs	r2, #6
 800b75c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f7f5 ff43 	bl	80015ec <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b766:	e007      	b.n	800b778 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b776:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800b778:	3714      	adds	r7, #20
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd90      	pop	{r4, r7, pc}

0800b77e <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b77e:	b590      	push	{r4, r7, lr}
 800b780:	b087      	sub	sp, #28
 800b782:	af02      	add	r7, sp, #8
 800b784:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b78a:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b79a:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b7a0:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	2b0c      	cmp	r3, #12
 800b7a8:	d147      	bne.n	800b83a <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7b0:	f003 0320 	and.w	r3, r3, #32
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d138      	bne.n	800b82a <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b7c6:	1ad2      	subs	r2, r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	69d9      	ldr	r1, [r3, #28]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f7f5 ff26 	bl	8001628 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d120      	bne.n	800b82a <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3344      	adds	r3, #68	@ 0x44
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	461c      	mov	r4, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fe:	2201      	movs	r2, #1
 800b800:	9200      	str	r2, [sp, #0]
 800b802:	4622      	mov	r2, r4
 800b804:	f000 f954 	bl	800bab0 <HAL_MDMA_Start_IT>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00d      	beq.n	800b82a <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b812:	f043 0204 	orr.w	r2, r3, #4
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2206      	movs	r2, #6
 800b81e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7f5 fee2 	bl	80015ec <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800b828:	e007      	b.n	800b83a <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b838:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd90      	pop	{r4, r7, pc}

0800b840 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b84c:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f022 0201 	bic.w	r2, r2, #1
 800b85c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b86c:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b87a:	f043 0204 	orr.w	r2, r3, #4
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7f5 feb2 	bl	80015ec <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800b888:	bf00      	nop
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b89c:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f7ff fdc7 	bl	800b43e <JPEG_DMA_EndProcess>
  }
}
 800b8b0:	bf00      	nop
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b08b      	sub	sp, #44	@ 0x2c
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3350      	adds	r3, #80	@ 0x50
 800b8ca:	61bb      	str	r3, [r7, #24]

  i = 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b8d0:	e042      	b.n	800b958 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61fb      	str	r3, [r7, #28]
 800b8dc:	e033      	b.n	800b946 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d103      	bne.n	800b8fa <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f4:	3364      	adds	r3, #100	@ 0x64
 800b8f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8f8:	e022      	b.n	800b940 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	2264      	movs	r2, #100	@ 0x64
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b906:	6a38      	ldr	r0, [r7, #32]
 800b908:	69f9      	ldr	r1, [r7, #28]
 800b90a:	4401      	add	r1, r0
 800b90c:	4818      	ldr	r0, [pc, #96]	@ (800b970 <JPEG_GetQuality+0xb8>)
 800b90e:	5c41      	ldrb	r1, [r0, r1]
 800b910:	440a      	add	r2, r1
 800b912:	7812      	ldrb	r2, [r2, #0]
 800b914:	fbb3 f3f2 	udiv	r3, r3, r2
 800b918:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2b64      	cmp	r3, #100	@ 0x64
 800b91e:	d807      	bhi.n	800b930 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800b926:	085b      	lsrs	r3, r3, #1
 800b928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b92a:	4413      	add	r3, r2
 800b92c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b92e:	e007      	b.n	800b940 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800b930:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	fbb2 f3f3 	udiv	r3, r2, r3
 800b93a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b93c:	4413      	add	r3, r2
 800b93e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	3301      	adds	r3, #1
 800b944:	61fb      	str	r3, [r7, #28]
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	2b03      	cmp	r3, #3
 800b94a:	d9c8      	bls.n	800b8de <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	3304      	adds	r3, #4
 800b950:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	3304      	adds	r3, #4
 800b956:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	2b3c      	cmp	r3, #60	@ 0x3c
 800b95c:	d9b9      	bls.n	800b8d2 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b960:	099b      	lsrs	r3, r3, #6
}
 800b962:	4618      	mov	r0, r3
 800b964:	372c      	adds	r7, #44	@ 0x2c
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	08018f7c 	.word	0x08018f7c

0800b974 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b97c:	f7f7 f81c 	bl	80029b8 <HAL_GetTick>
 800b980:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d101      	bne.n	800b98c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800b988:	2301      	movs	r3, #1
 800b98a:	e03b      	b.n	800ba04 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2202      	movs	r2, #2
 800b998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68da      	ldr	r2, [r3, #12]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f022 0201 	bic.w	r2, r2, #1
 800b9aa:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b9ac:	e00f      	b.n	800b9ce <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b9ae:	f7f7 f803 	bl	80029b8 <HAL_GetTick>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	2b05      	cmp	r3, #5
 800b9ba:	d908      	bls.n	800b9ce <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2240      	movs	r2, #64	@ 0x40
 800b9c0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2203      	movs	r2, #3
 800b9c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e01a      	b.n	800ba04 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e8      	bne.n	800b9ae <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fad3 	bl	800bf88 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e03e      	b.n	800baa4 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e037      	b.n	800baa4 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d126      	bne.n	800ba96 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d11c      	bne.n	800ba90 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d108      	bne.n	800ba7e <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	691a      	ldr	r2, [r3, #16]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ba7a:	611a      	str	r2, [r3, #16]
 800ba7c:	e00d      	b.n	800ba9a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	691a      	ldr	r2, [r3, #16]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ba8c:	611a      	str	r2, [r3, #16]
 800ba8e:	e004      	b.n	800ba9a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	75fb      	strb	r3, [r7, #23]
 800ba94:	e001      	b.n	800ba9a <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	371c      	adds	r7, #28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af02      	add	r7, sp, #8
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e070      	b.n	800bbaa <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d101      	bne.n	800bad6 <HAL_MDMA_Start_IT+0x26>
 800bad2:	2302      	movs	r3, #2
 800bad4:	e069      	b.n	800bbaa <HAL_MDMA_Start_IT+0xfa>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2201      	movs	r2, #1
 800bada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d158      	bne.n	800bb9c <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2202      	movs	r2, #2
 800baee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68da      	ldr	r2, [r3, #12]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f022 0201 	bic.w	r2, r2, #1
 800bb06:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	68b9      	ldr	r1, [r7, #8]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 f9c8 	bl	800bea8 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68da      	ldr	r2, [r3, #12]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f042 0206 	orr.w	r2, r2, #6
 800bb26:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d007      	beq.n	800bb40 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68da      	ldr	r2, [r3, #12]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f042 0210 	orr.w	r2, r2, #16
 800bb3e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d007      	beq.n	800bb58 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68da      	ldr	r2, [r3, #12]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f042 0208 	orr.w	r2, r2, #8
 800bb56:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d007      	beq.n	800bb70 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	68da      	ldr	r2, [r3, #12]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f042 0220 	orr.w	r2, r2, #32
 800bb6e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68da      	ldr	r2, [r3, #12]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f042 0201 	orr.w	r2, r2, #1
 800bb7e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb88:	d10e      	bne.n	800bba8 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68da      	ldr	r2, [r3, #12]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bb98:	60da      	str	r2, [r3, #12]
 800bb9a:	e005      	b.n	800bba8 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800bba4:	2302      	movs	r3, #2
 800bba6:	e000      	b.n	800bbaa <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e017      	b.n	800bbf4 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d004      	beq.n	800bbda <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2280      	movs	r2, #128	@ 0x80
 800bbd4:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e00c      	b.n	800bbf4 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2204      	movs	r2, #4
 800bbde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68da      	ldr	r2, [r3, #12]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 0201 	bic.w	r2, r2, #1
 800bbf0:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bc0c:	4b91      	ldr	r3, [pc, #580]	@ (800be54 <HAL_MDMA_IRQHandler+0x254>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a91      	ldr	r2, [pc, #580]	@ (800be58 <HAL_MDMA_IRQHandler+0x258>)
 800bc12:	fba2 2303 	umull	r2, r3, r2, r3
 800bc16:	0a9b      	lsrs	r3, r3, #10
 800bc18:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	4b8e      	ldr	r3, [pc, #568]	@ (800be5c <HAL_MDMA_IRQHandler+0x25c>)
 800bc22:	4413      	add	r3, r2
 800bc24:	099b      	lsrs	r3, r3, #6
 800bc26:	f003 031f 	and.w	r3, r3, #31
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc30:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800bc32:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 812d 	beq.w	800be9c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d054      	beq.n	800bcfa <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f003 0302 	and.w	r3, r3, #2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d04d      	beq.n	800bcfa <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68da      	ldr	r2, [r3, #12]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f022 0202 	bic.w	r2, r2, #2
 800bc6c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d106      	bne.n	800bc8e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc84:	f043 0201 	orr.w	r2, r3, #1
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	669a      	str	r2, [r3, #104]	@ 0x68
 800bc8c:	e005      	b.n	800bc9a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc92:	f043 0202 	orr.w	r2, r3, #2
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d005      	beq.n	800bcb0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bca8:	f043 0204 	orr.w	r2, r3, #4
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d005      	beq.n	800bcc6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcbe:	f043 0208 	orr.w	r2, r3, #8
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d005      	beq.n	800bcdc <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcd4:	f043 0210 	orr.w	r2, r3, #16
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d005      	beq.n	800bcf2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcea:	f043 0220 	orr.w	r2, r3, #32
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 0310 	and.w	r3, r3, #16
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d012      	beq.n	800bd2e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	f003 0320 	and.w	r3, r3, #32
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00b      	beq.n	800bd2e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2210      	movs	r2, #16
 800bd1c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0308 	and.w	r3, r3, #8
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d012      	beq.n	800bd62 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	f003 0310 	and.w	r3, r3, #16
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00b      	beq.n	800bd62 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2208      	movs	r2, #8
 800bd50:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d003      	beq.n	800bd62 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0304 	and.w	r3, r3, #4
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d012      	beq.n	800bd96 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	f003 0308 	and.w	r3, r3, #8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2204      	movs	r2, #4
 800bd84:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d039      	beq.n	800be18 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	f003 0304 	and.w	r3, r3, #4
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d032      	beq.n	800be18 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68da      	ldr	r2, [r3, #12]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800bdc0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	2b04      	cmp	r3, #4
 800bdcc:	d110      	bne.n	800bdf0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d05c      	beq.n	800bea0 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	4798      	blx	r3
        }
        return;
 800bdee:	e057      	b.n	800bea0 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d040      	beq.n	800bea2 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2204      	movs	r2, #4
 800be24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68da      	ldr	r2, [r3, #12]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f022 0201 	bic.w	r2, r2, #1
 800be36:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	3301      	adds	r3, #1
 800be3c:	60bb      	str	r3, [r7, #8]
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	429a      	cmp	r2, r3
 800be42:	d30d      	bcc.n	800be60 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1f2      	bne.n	800be38 <HAL_MDMA_IRQHandler+0x238>
 800be52:	e006      	b.n	800be62 <HAL_MDMA_IRQHandler+0x262>
 800be54:	24000214 	.word	0x24000214
 800be58:	1b4e81b5 	.word	0x1b4e81b5
 800be5c:	adffffc0 	.word	0xadffffc0
        break;
 800be60:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b00      	cmp	r3, #0
 800be76:	d004      	beq.n	800be82 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2203      	movs	r2, #3
 800be7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800be80:	e003      	b.n	800be8a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d007      	beq.n	800bea2 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	4798      	blx	r3
 800be9a:	e002      	b.n	800bea2 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800be9c:	bf00      	nop
 800be9e:	e000      	b.n	800bea2 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800bea0:	bf00      	nop
    }
  }
}
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	695a      	ldr	r2, [r3, #20]
 800bebc:	4b31      	ldr	r3, [pc, #196]	@ (800bf84 <MDMA_SetConfig+0xdc>)
 800bebe:	4013      	ands	r3, r2
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	430b      	orrs	r3, r1
 800becc:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	3b01      	subs	r3, #1
 800bedc:	051a      	lsls	r2, r3, #20
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	221f      	movs	r2, #31
 800beec:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bf04:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf0c:	d002      	beq.n	800bf14 <MDMA_SetConfig+0x6c>
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d108      	bne.n	800bf26 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bf22:	629a      	str	r2, [r3, #40]	@ 0x28
 800bf24:	e007      	b.n	800bf36 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bf34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bf3c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf44:	d002      	beq.n	800bf4c <MDMA_SetConfig+0xa4>
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d108      	bne.n	800bf5e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bf5a:	629a      	str	r2, [r3, #40]	@ 0x28
 800bf5c:	e007      	b.n	800bf6e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bf6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bf78:	bf00      	nop
 800bf7a:	371c      	adds	r7, #28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	fffe0000 	.word	0xfffe0000

0800bf88 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68d9      	ldr	r1, [r3, #12]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	691a      	ldr	r2, [r3, #16]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	695a      	ldr	r2, [r3, #20]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bfae:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a1b      	ldr	r3, [r3, #32]
 800bfb4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfba:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bfc6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800bfd0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bfdc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bfde:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfe8:	d107      	bne.n	800bffa <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	691a      	ldr	r2, [r3, #16]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800bff8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2200      	movs	r2, #0
 800c000:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c006:	2b00      	cmp	r3, #0
 800c008:	da11      	bge.n	800c02e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	695a      	ldr	r2, [r3, #20]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c018:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c01e:	425b      	negs	r3, r3
 800c020:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	b292      	uxth	r2, r2
 800c02a:	621a      	str	r2, [r3, #32]
 800c02c:	e006      	b.n	800c03c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c032:	461a      	mov	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	b292      	uxth	r2, r2
 800c03a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c040:	2b00      	cmp	r3, #0
 800c042:	da15      	bge.n	800c070 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	695a      	ldr	r2, [r3, #20]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800c052:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c058:	425b      	negs	r3, r3
 800c05a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6a19      	ldr	r1, [r3, #32]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	041a      	lsls	r2, r3, #16
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	621a      	str	r2, [r3, #32]
 800c06e:	e009      	b.n	800c084 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6a19      	ldr	r1, [r3, #32]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c07a:	041a      	lsls	r2, r3, #16
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	430a      	orrs	r2, r1
 800c082:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c08c:	d006      	beq.n	800c09c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	b2d2      	uxtb	r2, r2
 800c098:	629a      	str	r2, [r3, #40]	@ 0x28
 800c09a:	e003      	b.n	800c0a4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c0ac:	bf00      	nop
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af02      	add	r7, sp, #8
 800c0be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d101      	bne.n	800c0ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e0fe      	b.n	800c2c8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d106      	bne.n	800c0e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f00b fcc8 	bl	8017a74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2203      	movs	r2, #3
 800c0e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f008 f86e 	bl	80141d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	7c1a      	ldrb	r2, [r3, #16]
 800c0fe:	f88d 2000 	strb.w	r2, [sp]
 800c102:	3304      	adds	r3, #4
 800c104:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c106:	f007 ff3f 	bl	8013f88 <USB_CoreInit>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d005      	beq.n	800c11c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2202      	movs	r2, #2
 800c114:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	e0d5      	b.n	800c2c8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2100      	movs	r1, #0
 800c122:	4618      	mov	r0, r3
 800c124:	f008 f866 	bl	80141f4 <USB_SetCurrentMode>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d005      	beq.n	800c13a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2202      	movs	r2, #2
 800c132:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	e0c6      	b.n	800c2c8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]
 800c13e:	e04a      	b.n	800c1d6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c140:	7bfa      	ldrb	r2, [r7, #15]
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	4613      	mov	r3, r2
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	440b      	add	r3, r1
 800c14e:	3315      	adds	r3, #21
 800c150:	2201      	movs	r2, #1
 800c152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c154:	7bfa      	ldrb	r2, [r7, #15]
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	3314      	adds	r3, #20
 800c164:	7bfa      	ldrb	r2, [r7, #15]
 800c166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c168:	7bfa      	ldrb	r2, [r7, #15]
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
 800c16c:	b298      	uxth	r0, r3
 800c16e:	6879      	ldr	r1, [r7, #4]
 800c170:	4613      	mov	r3, r2
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	4413      	add	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	440b      	add	r3, r1
 800c17a:	332e      	adds	r3, #46	@ 0x2e
 800c17c:	4602      	mov	r2, r0
 800c17e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c180:	7bfa      	ldrb	r2, [r7, #15]
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	4613      	mov	r3, r2
 800c186:	00db      	lsls	r3, r3, #3
 800c188:	4413      	add	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	440b      	add	r3, r1
 800c18e:	3318      	adds	r3, #24
 800c190:	2200      	movs	r2, #0
 800c192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c194:	7bfa      	ldrb	r2, [r7, #15]
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	4613      	mov	r3, r2
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	440b      	add	r3, r1
 800c1a2:	331c      	adds	r3, #28
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c1a8:	7bfa      	ldrb	r2, [r7, #15]
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	4413      	add	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	440b      	add	r3, r1
 800c1b6:	3320      	adds	r3, #32
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c1bc:	7bfa      	ldrb	r2, [r7, #15]
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	00db      	lsls	r3, r3, #3
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	440b      	add	r3, r1
 800c1ca:	3324      	adds	r3, #36	@ 0x24
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	73fb      	strb	r3, [r7, #15]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	791b      	ldrb	r3, [r3, #4]
 800c1da:	7bfa      	ldrb	r2, [r7, #15]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d3af      	bcc.n	800c140 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	73fb      	strb	r3, [r7, #15]
 800c1e4:	e044      	b.n	800c270 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c1e6:	7bfa      	ldrb	r2, [r7, #15]
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	00db      	lsls	r3, r3, #3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	440b      	add	r3, r1
 800c1f4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c1fc:	7bfa      	ldrb	r2, [r7, #15]
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	4613      	mov	r3, r2
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	4413      	add	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	440b      	add	r3, r1
 800c20a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c20e:	7bfa      	ldrb	r2, [r7, #15]
 800c210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c212:	7bfa      	ldrb	r2, [r7, #15]
 800c214:	6879      	ldr	r1, [r7, #4]
 800c216:	4613      	mov	r3, r2
 800c218:	00db      	lsls	r3, r3, #3
 800c21a:	4413      	add	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	440b      	add	r3, r1
 800c220:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c224:	2200      	movs	r2, #0
 800c226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c228:	7bfa      	ldrb	r2, [r7, #15]
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	4613      	mov	r3, r2
 800c22e:	00db      	lsls	r3, r3, #3
 800c230:	4413      	add	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	440b      	add	r3, r1
 800c236:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c23e:	7bfa      	ldrb	r2, [r7, #15]
 800c240:	6879      	ldr	r1, [r7, #4]
 800c242:	4613      	mov	r3, r2
 800c244:	00db      	lsls	r3, r3, #3
 800c246:	4413      	add	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	440b      	add	r3, r1
 800c24c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c250:	2200      	movs	r2, #0
 800c252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c254:	7bfa      	ldrb	r2, [r7, #15]
 800c256:	6879      	ldr	r1, [r7, #4]
 800c258:	4613      	mov	r3, r2
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	4413      	add	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	440b      	add	r3, r1
 800c262:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c266:	2200      	movs	r2, #0
 800c268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	3301      	adds	r3, #1
 800c26e:	73fb      	strb	r3, [r7, #15]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	791b      	ldrb	r3, [r3, #4]
 800c274:	7bfa      	ldrb	r2, [r7, #15]
 800c276:	429a      	cmp	r2, r3
 800c278:	d3b5      	bcc.n	800c1e6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6818      	ldr	r0, [r3, #0]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	7c1a      	ldrb	r2, [r3, #16]
 800c282:	f88d 2000 	strb.w	r2, [sp]
 800c286:	3304      	adds	r3, #4
 800c288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c28a:	f007 ffff 	bl	801428c <USB_DevInit>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d005      	beq.n	800c2a0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2202      	movs	r2, #2
 800c298:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	e013      	b.n	800c2c8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	7b1b      	ldrb	r3, [r3, #12]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d102      	bne.n	800c2bc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f001 f96e 	bl	800d598 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f009 f842 	bl	801534a <USB_DevDisconnect>

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d101      	bne.n	800c2ec <HAL_PCD_Start+0x1c>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e022      	b.n	800c332 <HAL_PCD_Start+0x62>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d009      	beq.n	800c314 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c304:	2b01      	cmp	r3, #1
 800c306:	d105      	bne.n	800c314 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c30c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4618      	mov	r0, r3
 800c31a:	f007 ff49 	bl	80141b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4618      	mov	r0, r3
 800c324:	f008 fff0 	bl	8015308 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c33a:	b590      	push	{r4, r7, lr}
 800c33c:	b08d      	sub	sp, #52	@ 0x34
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f009 f8ae 	bl	80154b2 <USB_GetMode>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f040 84b9 	bne.w	800ccd0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4618      	mov	r0, r3
 800c364:	f009 f812 	bl	801538c <USB_ReadInterrupts>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 84af 	beq.w	800ccce <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	0a1b      	lsrs	r3, r3, #8
 800c37a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f008 ffff 	bl	801538c <USB_ReadInterrupts>
 800c38e:	4603      	mov	r3, r0
 800c390:	f003 0302 	and.w	r3, r3, #2
 800c394:	2b02      	cmp	r3, #2
 800c396:	d107      	bne.n	800c3a8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	695a      	ldr	r2, [r3, #20]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f002 0202 	and.w	r2, r2, #2
 800c3a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f008 ffed 	bl	801538c <USB_ReadInterrupts>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	f003 0310 	and.w	r3, r3, #16
 800c3b8:	2b10      	cmp	r3, #16
 800c3ba:	d161      	bne.n	800c480 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	699a      	ldr	r2, [r3, #24]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f022 0210 	bic.w	r2, r2, #16
 800c3ca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c3cc:	6a3b      	ldr	r3, [r7, #32]
 800c3ce:	6a1b      	ldr	r3, [r3, #32]
 800c3d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	f003 020f 	and.w	r2, r3, #15
 800c3d8:	4613      	mov	r3, r2
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	4413      	add	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c3f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c3f6:	d124      	bne.n	800c442 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c3f8:	69ba      	ldr	r2, [r7, #24]
 800c3fa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c3fe:	4013      	ands	r3, r2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d035      	beq.n	800c470 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	091b      	lsrs	r3, r3, #4
 800c40c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c40e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c412:	b29b      	uxth	r3, r3
 800c414:	461a      	mov	r2, r3
 800c416:	6a38      	ldr	r0, [r7, #32]
 800c418:	f008 fe24 	bl	8015064 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	091b      	lsrs	r3, r3, #4
 800c424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c428:	441a      	add	r2, r3
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	695a      	ldr	r2, [r3, #20]
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	091b      	lsrs	r3, r3, #4
 800c436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c43a:	441a      	add	r2, r3
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	615a      	str	r2, [r3, #20]
 800c440:	e016      	b.n	800c470 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c448:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c44c:	d110      	bne.n	800c470 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c454:	2208      	movs	r2, #8
 800c456:	4619      	mov	r1, r3
 800c458:	6a38      	ldr	r0, [r7, #32]
 800c45a:	f008 fe03 	bl	8015064 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	695a      	ldr	r2, [r3, #20]
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	091b      	lsrs	r3, r3, #4
 800c466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c46a:	441a      	add	r2, r3
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	699a      	ldr	r2, [r3, #24]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f042 0210 	orr.w	r2, r2, #16
 800c47e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	f008 ff81 	bl	801538c <USB_ReadInterrupts>
 800c48a:	4603      	mov	r3, r0
 800c48c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c490:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c494:	f040 80a7 	bne.w	800c5e6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f008 ff86 	bl	80153b2 <USB_ReadDevAllOutEpInterrupt>
 800c4a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c4a8:	e099      	b.n	800c5de <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ac:	f003 0301 	and.w	r3, r3, #1
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 808e 	beq.w	800c5d2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4bc:	b2d2      	uxtb	r2, r2
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f008 ffaa 	bl	801541a <USB_ReadDevOutEPInterrupt>
 800c4c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00c      	beq.n	800c4ec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4de:	461a      	mov	r2, r3
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c4e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fed0 	bl	800d28c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f003 0308 	and.w	r3, r3, #8
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00c      	beq.n	800c510 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c502:	461a      	mov	r2, r3
 800c504:	2308      	movs	r3, #8
 800c506:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c508:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 ffa6 	bl	800d45c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	f003 0310 	and.w	r3, r3, #16
 800c516:	2b00      	cmp	r3, #0
 800c518:	d008      	beq.n	800c52c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	4413      	add	r3, r2
 800c522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c526:	461a      	mov	r2, r3
 800c528:	2310      	movs	r3, #16
 800c52a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	f003 0302 	and.w	r3, r3, #2
 800c532:	2b00      	cmp	r3, #0
 800c534:	d030      	beq.n	800c598 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c536:	6a3b      	ldr	r3, [r7, #32]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c53e:	2b80      	cmp	r3, #128	@ 0x80
 800c540:	d109      	bne.n	800c556 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	69fa      	ldr	r2, [r7, #28]
 800c54c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c550:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c554:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c558:	4613      	mov	r3, r2
 800c55a:	00db      	lsls	r3, r3, #3
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	4413      	add	r3, r2
 800c568:	3304      	adds	r3, #4
 800c56a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	78db      	ldrb	r3, [r3, #3]
 800c570:	2b01      	cmp	r3, #1
 800c572:	d108      	bne.n	800c586 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	2200      	movs	r2, #0
 800c578:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f00b fb9d 	bl	8017cc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	015a      	lsls	r2, r3, #5
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	4413      	add	r3, r2
 800c58e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c592:	461a      	mov	r2, r3
 800c594:	2302      	movs	r3, #2
 800c596:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	f003 0320 	and.w	r3, r3, #32
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d008      	beq.n	800c5b4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a4:	015a      	lsls	r2, r3, #5
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	2320      	movs	r3, #32
 800c5b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c0:	015a      	lsls	r2, r3, #5
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c5d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5da:	085b      	lsrs	r3, r3, #1
 800c5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f47f af62 	bne.w	800c4aa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f008 fece 	bl	801538c <USB_ReadInterrupts>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c5f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c5fa:	f040 80db 	bne.w	800c7b4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f008 feef 	bl	80153e6 <USB_ReadDevAllInEpInterrupt>
 800c608:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c60e:	e0cd      	b.n	800c7ac <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b00      	cmp	r3, #0
 800c618:	f000 80c2 	beq.w	800c7a0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f008 ff15 	bl	8015456 <USB_ReadDevInEPInterrupt>
 800c62c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	2b00      	cmp	r3, #0
 800c636:	d057      	beq.n	800c6e8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63a:	f003 030f 	and.w	r3, r3, #15
 800c63e:	2201      	movs	r2, #1
 800c640:	fa02 f303 	lsl.w	r3, r2, r3
 800c644:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c64c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	43db      	mvns	r3, r3
 800c652:	69f9      	ldr	r1, [r7, #28]
 800c654:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c658:	4013      	ands	r3, r2
 800c65a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65e:	015a      	lsls	r2, r3, #5
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	4413      	add	r3, r2
 800c664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c668:	461a      	mov	r2, r3
 800c66a:	2301      	movs	r3, #1
 800c66c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	799b      	ldrb	r3, [r3, #6]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d132      	bne.n	800c6dc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c67a:	4613      	mov	r3, r2
 800c67c:	00db      	lsls	r3, r3, #3
 800c67e:	4413      	add	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	440b      	add	r3, r1
 800c684:	3320      	adds	r3, #32
 800c686:	6819      	ldr	r1, [r3, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c68c:	4613      	mov	r3, r2
 800c68e:	00db      	lsls	r3, r3, #3
 800c690:	4413      	add	r3, r2
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	4403      	add	r3, r0
 800c696:	331c      	adds	r3, #28
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4419      	add	r1, r3
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	00db      	lsls	r3, r3, #3
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4403      	add	r3, r0
 800c6aa:	3320      	adds	r3, #32
 800c6ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d113      	bne.n	800c6dc <HAL_PCD_IRQHandler+0x3a2>
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	00db      	lsls	r3, r3, #3
 800c6bc:	4413      	add	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	440b      	add	r3, r1
 800c6c2:	3324      	adds	r3, #36	@ 0x24
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d108      	bne.n	800c6dc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	2101      	movs	r1, #1
 800c6d8:	f008 ff1e 	bl	8015518 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f00b fa67 	bl	8017bb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	f003 0308 	and.w	r3, r3, #8
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d008      	beq.n	800c704 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f4:	015a      	lsls	r2, r3, #5
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6fe:	461a      	mov	r2, r3
 800c700:	2308      	movs	r3, #8
 800c702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	f003 0310 	and.w	r3, r3, #16
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d008      	beq.n	800c720 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c710:	015a      	lsls	r2, r3, #5
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	4413      	add	r3, r2
 800c716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c71a:	461a      	mov	r2, r3
 800c71c:	2310      	movs	r3, #16
 800c71e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c726:	2b00      	cmp	r3, #0
 800c728:	d008      	beq.n	800c73c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	015a      	lsls	r2, r3, #5
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	4413      	add	r3, r2
 800c732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c736:	461a      	mov	r2, r3
 800c738:	2340      	movs	r3, #64	@ 0x40
 800c73a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	f003 0302 	and.w	r3, r3, #2
 800c742:	2b00      	cmp	r3, #0
 800c744:	d023      	beq.n	800c78e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c748:	6a38      	ldr	r0, [r7, #32]
 800c74a:	f007 fefd 	bl	8014548 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c750:	4613      	mov	r3, r2
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	4413      	add	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	3310      	adds	r3, #16
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	4413      	add	r3, r2
 800c75e:	3304      	adds	r3, #4
 800c760:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	78db      	ldrb	r3, [r3, #3]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d108      	bne.n	800c77c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	2200      	movs	r2, #0
 800c76e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	b2db      	uxtb	r3, r3
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f00b fab4 	bl	8017ce4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c788:	461a      	mov	r2, r3
 800c78a:	2302      	movs	r3, #2
 800c78c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c798:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fcea 	bl	800d174 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a8:	085b      	lsrs	r3, r3, #1
 800c7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f47f af2e 	bne.w	800c610 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f008 fde7 	bl	801538c <USB_ReadInterrupts>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7c8:	d122      	bne.n	800c810 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	69fa      	ldr	r2, [r7, #28]
 800c7d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7d8:	f023 0301 	bic.w	r3, r3, #1
 800c7dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d108      	bne.n	800c7fa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fef4 	bl	800d5e0 <HAL_PCDEx_LPM_Callback>
 800c7f8:	e002      	b.n	800c800 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f00b fa52 	bl	8017ca4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	695a      	ldr	r2, [r3, #20]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c80e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4618      	mov	r0, r3
 800c816:	f008 fdb9 	bl	801538c <USB_ReadInterrupts>
 800c81a:	4603      	mov	r3, r0
 800c81c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c824:	d112      	bne.n	800c84c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b01      	cmp	r3, #1
 800c834:	d102      	bne.n	800c83c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f00b fa0e 	bl	8017c58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	695a      	ldr	r2, [r3, #20]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c84a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4618      	mov	r0, r3
 800c852:	f008 fd9b 	bl	801538c <USB_ReadInterrupts>
 800c856:	4603      	mov	r3, r0
 800c858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c85c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c860:	d121      	bne.n	800c8a6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	695a      	ldr	r2, [r3, #20]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c870:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d111      	bne.n	800c8a0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c88a:	089b      	lsrs	r3, r3, #2
 800c88c:	f003 020f 	and.w	r2, r3, #15
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c896:	2101      	movs	r1, #1
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fea1 	bl	800d5e0 <HAL_PCDEx_LPM_Callback>
 800c89e:	e002      	b.n	800c8a6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f00b f9d9 	bl	8017c58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f008 fd6e 	bl	801538c <USB_ReadInterrupts>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c8b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8ba:	f040 80b7 	bne.w	800ca2c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8cc:	f023 0301 	bic.w	r3, r3, #1
 800c8d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2110      	movs	r1, #16
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f007 fe35 	bl	8014548 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c8de:	2300      	movs	r3, #0
 800c8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8e2:	e046      	b.n	800c972 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e6:	015a      	lsls	r2, r3, #5
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c8f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	015a      	lsls	r2, r3, #5
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	4413      	add	r3, r2
 800c900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c908:	0151      	lsls	r1, r2, #5
 800c90a:	69fa      	ldr	r2, [r7, #28]
 800c90c:	440a      	add	r2, r1
 800c90e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c916:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c924:	461a      	mov	r2, r3
 800c926:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c92a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92e:	015a      	lsls	r2, r3, #5
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	4413      	add	r3, r2
 800c934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c93c:	0151      	lsls	r1, r2, #5
 800c93e:	69fa      	ldr	r2, [r7, #28]
 800c940:	440a      	add	r2, r1
 800c942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c946:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c94a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c95c:	0151      	lsls	r1, r2, #5
 800c95e:	69fa      	ldr	r2, [r7, #28]
 800c960:	440a      	add	r2, r1
 800c962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c966:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c96a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96e:	3301      	adds	r3, #1
 800c970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	791b      	ldrb	r3, [r3, #4]
 800c976:	461a      	mov	r2, r3
 800c978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d3b2      	bcc.n	800c8e4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c984:	69db      	ldr	r3, [r3, #28]
 800c986:	69fa      	ldr	r2, [r7, #28]
 800c988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c98c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c990:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	7bdb      	ldrb	r3, [r3, #15]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d016      	beq.n	800c9c8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9a4:	69fa      	ldr	r2, [r7, #28]
 800c9a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9aa:	f043 030b 	orr.w	r3, r3, #11
 800c9ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9ba:	69fa      	ldr	r2, [r7, #28]
 800c9bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9c0:	f043 030b 	orr.w	r3, r3, #11
 800c9c4:	6453      	str	r3, [r2, #68]	@ 0x44
 800c9c6:	e015      	b.n	800c9f4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9ce:	695a      	ldr	r2, [r3, #20]
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	69fa      	ldr	r2, [r7, #28]
 800c9ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9ee:	f043 030b 	orr.w	r3, r3, #11
 800c9f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	69fa      	ldr	r2, [r7, #28]
 800c9fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ca06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6818      	ldr	r0, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ca16:	461a      	mov	r2, r3
 800ca18:	f008 fd7e 	bl	8015518 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	695a      	ldr	r2, [r3, #20]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800ca2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f008 fcab 	bl	801538c <USB_ReadInterrupts>
 800ca36:	4603      	mov	r3, r0
 800ca38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca40:	d123      	bne.n	800ca8a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f008 fd42 	bl	80154d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f007 fdf2 	bl	801463a <USB_GetDevSpeed>
 800ca56:	4603      	mov	r3, r0
 800ca58:	461a      	mov	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681c      	ldr	r4, [r3, #0]
 800ca62:	f001 fd9d 	bl	800e5a0 <HAL_RCC_GetHCLKFreq>
 800ca66:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f007 fafc 	bl	801406c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f00b f8c6 	bl	8017c06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	695a      	ldr	r2, [r3, #20]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800ca88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f008 fc7c 	bl	801538c <USB_ReadInterrupts>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f003 0308 	and.w	r3, r3, #8
 800ca9a:	2b08      	cmp	r3, #8
 800ca9c:	d10a      	bne.n	800cab4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f00b f8a3 	bl	8017bea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	695a      	ldr	r2, [r3, #20]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f002 0208 	and.w	r2, r2, #8
 800cab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4618      	mov	r0, r3
 800caba:	f008 fc67 	bl	801538c <USB_ReadInterrupts>
 800cabe:	4603      	mov	r3, r0
 800cac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cac4:	2b80      	cmp	r3, #128	@ 0x80
 800cac6:	d123      	bne.n	800cb10 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cad0:	6a3b      	ldr	r3, [r7, #32]
 800cad2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cad4:	2301      	movs	r3, #1
 800cad6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cad8:	e014      	b.n	800cb04 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800cada:	6879      	ldr	r1, [r7, #4]
 800cadc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cade:	4613      	mov	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	4413      	add	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	440b      	add	r3, r1
 800cae8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d105      	bne.n	800cafe <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800caf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fb0a 	bl	800d112 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb00:	3301      	adds	r3, #1
 800cb02:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	791b      	ldrb	r3, [r3, #4]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d3e4      	bcc.n	800cada <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f008 fc39 	bl	801538c <USB_ReadInterrupts>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb24:	d13c      	bne.n	800cba0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cb26:	2301      	movs	r3, #1
 800cb28:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb2a:	e02b      	b.n	800cb84 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2e:	015a      	lsls	r2, r3, #5
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	4413      	add	r3, r2
 800cb34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb40:	4613      	mov	r3, r2
 800cb42:	00db      	lsls	r3, r3, #3
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	440b      	add	r3, r1
 800cb4a:	3318      	adds	r3, #24
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d115      	bne.n	800cb7e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800cb52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	da12      	bge.n	800cb7e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	4413      	add	r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	440b      	add	r3, r1
 800cb66:	3317      	adds	r3, #23
 800cb68:	2201      	movs	r2, #1
 800cb6a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 faca 	bl	800d112 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb80:	3301      	adds	r3, #1
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	791b      	ldrb	r3, [r3, #4]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d3cd      	bcc.n	800cb2c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	695a      	ldr	r2, [r3, #20]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800cb9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f008 fbf1 	bl	801538c <USB_ReadInterrupts>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cbb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cbb4:	d156      	bne.n	800cc64 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbba:	e045      	b.n	800cc48 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	015a      	lsls	r2, r3, #5
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	4413      	add	r3, r2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	440b      	add	r3, r1
 800cbda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d12e      	bne.n	800cc42 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800cbe4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	da2b      	bge.n	800cc42 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	0c1a      	lsrs	r2, r3, #16
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800cbf4:	4053      	eors	r3, r2
 800cbf6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d121      	bne.n	800cc42 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800cbfe:	6879      	ldr	r1, [r7, #4]
 800cc00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc02:	4613      	mov	r3, r2
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	4413      	add	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	440b      	add	r3, r1
 800cc0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800cc10:	2201      	movs	r2, #1
 800cc12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800cc14:	6a3b      	ldr	r3, [r7, #32]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10a      	bne.n	800cc42 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	69fa      	ldr	r2, [r7, #28]
 800cc36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cc3e:	6053      	str	r3, [r2, #4]
            break;
 800cc40:	e008      	b.n	800cc54 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc44:	3301      	adds	r3, #1
 800cc46:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	791b      	ldrb	r3, [r3, #4]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d3b3      	bcc.n	800cbbc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	695a      	ldr	r2, [r3, #20]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800cc62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f008 fb8f 	bl	801538c <USB_ReadInterrupts>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cc74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc78:	d10a      	bne.n	800cc90 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f00b f844 	bl	8017d08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	695a      	ldr	r2, [r3, #20]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800cc8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f008 fb79 	bl	801538c <USB_ReadInterrupts>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	f003 0304 	and.w	r3, r3, #4
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	d115      	bne.n	800ccd0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	f003 0304 	and.w	r3, r3, #4
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d002      	beq.n	800ccbc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f00b f834 	bl	8017d24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6859      	ldr	r1, [r3, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	69ba      	ldr	r2, [r7, #24]
 800ccc8:	430a      	orrs	r2, r1
 800ccca:	605a      	str	r2, [r3, #4]
 800cccc:	e000      	b.n	800ccd0 <HAL_PCD_IRQHandler+0x996>
      return;
 800ccce:	bf00      	nop
    }
  }
}
 800ccd0:	3734      	adds	r7, #52	@ 0x34
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd90      	pop	{r4, r7, pc}

0800ccd6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d101      	bne.n	800ccf0 <HAL_PCD_SetAddress+0x1a>
 800ccec:	2302      	movs	r3, #2
 800ccee:	e012      	b.n	800cd16 <HAL_PCD_SetAddress+0x40>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	78fa      	ldrb	r2, [r7, #3]
 800ccfc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	78fa      	ldrb	r2, [r7, #3]
 800cd04:	4611      	mov	r1, r2
 800cd06:	4618      	mov	r0, r3
 800cd08:	f008 fad8 	bl	80152bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	4608      	mov	r0, r1
 800cd28:	4611      	mov	r1, r2
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	70fb      	strb	r3, [r7, #3]
 800cd30:	460b      	mov	r3, r1
 800cd32:	803b      	strh	r3, [r7, #0]
 800cd34:	4613      	mov	r3, r2
 800cd36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cd3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	da0f      	bge.n	800cd64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd44:	78fb      	ldrb	r3, [r7, #3]
 800cd46:	f003 020f 	and.w	r2, r3, #15
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	4413      	add	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	3310      	adds	r3, #16
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	4413      	add	r3, r2
 800cd58:	3304      	adds	r3, #4
 800cd5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	705a      	strb	r2, [r3, #1]
 800cd62:	e00f      	b.n	800cd84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd64:	78fb      	ldrb	r3, [r7, #3]
 800cd66:	f003 020f 	and.w	r2, r3, #15
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	4413      	add	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	4413      	add	r3, r2
 800cd7a:	3304      	adds	r3, #4
 800cd7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	f003 030f 	and.w	r3, r3, #15
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800cd90:	883b      	ldrh	r3, [r7, #0]
 800cd92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	78ba      	ldrb	r2, [r7, #2]
 800cd9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	785b      	ldrb	r3, [r3, #1]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d004      	beq.n	800cdb2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	461a      	mov	r2, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cdb2:	78bb      	ldrb	r3, [r7, #2]
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d102      	bne.n	800cdbe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d101      	bne.n	800cdcc <HAL_PCD_EP_Open+0xae>
 800cdc8:	2302      	movs	r3, #2
 800cdca:	e00e      	b.n	800cdea <HAL_PCD_EP_Open+0xcc>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68f9      	ldr	r1, [r7, #12]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f007 fc52 	bl	8014684 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800cde8:	7afb      	ldrb	r3, [r7, #11]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cdfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	da0f      	bge.n	800ce26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	f003 020f 	and.w	r2, r3, #15
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	00db      	lsls	r3, r3, #3
 800ce10:	4413      	add	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	3310      	adds	r3, #16
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	4413      	add	r3, r2
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2201      	movs	r2, #1
 800ce22:	705a      	strb	r2, [r3, #1]
 800ce24:	e00f      	b.n	800ce46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce26:	78fb      	ldrb	r3, [r7, #3]
 800ce28:	f003 020f 	and.w	r2, r3, #15
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	4413      	add	r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce46:	78fb      	ldrb	r3, [r7, #3]
 800ce48:	f003 030f 	and.w	r3, r3, #15
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d101      	bne.n	800ce60 <HAL_PCD_EP_Close+0x6e>
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	e00e      	b.n	800ce7e <HAL_PCD_EP_Close+0x8c>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	68f9      	ldr	r1, [r7, #12]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f007 fc90 	bl	8014794 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b086      	sub	sp, #24
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	60f8      	str	r0, [r7, #12]
 800ce8e:	607a      	str	r2, [r7, #4]
 800ce90:	603b      	str	r3, [r7, #0]
 800ce92:	460b      	mov	r3, r1
 800ce94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce96:	7afb      	ldrb	r3, [r7, #11]
 800ce98:	f003 020f 	and.w	r2, r3, #15
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	4413      	add	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	4413      	add	r3, r2
 800ceac:	3304      	adds	r3, #4
 800ceae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	2200      	movs	r2, #0
 800cec0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2200      	movs	r2, #0
 800cec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cec8:	7afb      	ldrb	r3, [r7, #11]
 800ceca:	f003 030f 	and.w	r3, r3, #15
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	799b      	ldrb	r3, [r3, #6]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d102      	bne.n	800cee2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6818      	ldr	r0, [r3, #0]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	799b      	ldrb	r3, [r3, #6]
 800ceea:	461a      	mov	r2, r3
 800ceec:	6979      	ldr	r1, [r7, #20]
 800ceee:	f007 fd2d 	bl	801494c <USB_EPStartXfer>

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cf08:	78fb      	ldrb	r3, [r7, #3]
 800cf0a:	f003 020f 	and.w	r2, r3, #15
 800cf0e:	6879      	ldr	r1, [r7, #4]
 800cf10:	4613      	mov	r3, r2
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	4413      	add	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	440b      	add	r3, r1
 800cf1a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800cf1e:	681b      	ldr	r3, [r3, #0]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	607a      	str	r2, [r7, #4]
 800cf36:	603b      	str	r3, [r7, #0]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf3c:	7afb      	ldrb	r3, [r7, #11]
 800cf3e:	f003 020f 	and.w	r2, r3, #15
 800cf42:	4613      	mov	r3, r2
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	4413      	add	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	3310      	adds	r3, #16
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	3304      	adds	r3, #4
 800cf52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2200      	movs	r2, #0
 800cf64:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf6c:	7afb      	ldrb	r3, [r7, #11]
 800cf6e:	f003 030f 	and.w	r3, r3, #15
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	799b      	ldrb	r3, [r3, #6]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d102      	bne.n	800cf86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	799b      	ldrb	r3, [r3, #6]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	6979      	ldr	r1, [r7, #20]
 800cf92:	f007 fcdb 	bl	801494c <USB_EPStartXfer>

  return HAL_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3718      	adds	r7, #24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cfac:	78fb      	ldrb	r3, [r7, #3]
 800cfae:	f003 030f 	and.w	r3, r3, #15
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	7912      	ldrb	r2, [r2, #4]
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d901      	bls.n	800cfbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e04f      	b.n	800d05e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cfbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	da0f      	bge.n	800cfe6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cfc6:	78fb      	ldrb	r3, [r7, #3]
 800cfc8:	f003 020f 	and.w	r2, r3, #15
 800cfcc:	4613      	mov	r3, r2
 800cfce:	00db      	lsls	r3, r3, #3
 800cfd0:	4413      	add	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	3310      	adds	r3, #16
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	4413      	add	r3, r2
 800cfda:	3304      	adds	r3, #4
 800cfdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	705a      	strb	r2, [r3, #1]
 800cfe4:	e00d      	b.n	800d002 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cfe6:	78fa      	ldrb	r2, [r7, #3]
 800cfe8:	4613      	mov	r3, r2
 800cfea:	00db      	lsls	r3, r3, #3
 800cfec:	4413      	add	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	4413      	add	r3, r2
 800cff8:	3304      	adds	r3, #4
 800cffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2201      	movs	r2, #1
 800d006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d008:	78fb      	ldrb	r3, [r7, #3]
 800d00a:	f003 030f 	and.w	r3, r3, #15
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d101      	bne.n	800d022 <HAL_PCD_EP_SetStall+0x82>
 800d01e:	2302      	movs	r3, #2
 800d020:	e01d      	b.n	800d05e <HAL_PCD_EP_SetStall+0xbe>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68f9      	ldr	r1, [r7, #12]
 800d030:	4618      	mov	r0, r3
 800d032:	f008 f86f 	bl	8015114 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d036:	78fb      	ldrb	r3, [r7, #3]
 800d038:	f003 030f 	and.w	r3, r3, #15
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d109      	bne.n	800d054 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6818      	ldr	r0, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	7999      	ldrb	r1, [r3, #6]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d04e:	461a      	mov	r2, r3
 800d050:	f008 fa62 	bl	8015518 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b084      	sub	sp, #16
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	460b      	mov	r3, r1
 800d070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d072:	78fb      	ldrb	r3, [r7, #3]
 800d074:	f003 030f 	and.w	r3, r3, #15
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	7912      	ldrb	r2, [r2, #4]
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d901      	bls.n	800d084 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e042      	b.n	800d10a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	da0f      	bge.n	800d0ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d08c:	78fb      	ldrb	r3, [r7, #3]
 800d08e:	f003 020f 	and.w	r2, r3, #15
 800d092:	4613      	mov	r3, r2
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	3310      	adds	r3, #16
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	4413      	add	r3, r2
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	705a      	strb	r2, [r3, #1]
 800d0aa:	e00f      	b.n	800d0cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0ac:	78fb      	ldrb	r3, [r7, #3]
 800d0ae:	f003 020f 	and.w	r2, r3, #15
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	00db      	lsls	r3, r3, #3
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0d2:	78fb      	ldrb	r3, [r7, #3]
 800d0d4:	f003 030f 	and.w	r3, r3, #15
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d101      	bne.n	800d0ec <HAL_PCD_EP_ClrStall+0x86>
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	e00e      	b.n	800d10a <HAL_PCD_EP_ClrStall+0xa4>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68f9      	ldr	r1, [r7, #12]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f008 f878 	bl	80151f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800d11e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d122:	2b00      	cmp	r3, #0
 800d124:	da0c      	bge.n	800d140 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d126:	78fb      	ldrb	r3, [r7, #3]
 800d128:	f003 020f 	and.w	r2, r3, #15
 800d12c:	4613      	mov	r3, r2
 800d12e:	00db      	lsls	r3, r3, #3
 800d130:	4413      	add	r3, r2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	3310      	adds	r3, #16
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	4413      	add	r3, r2
 800d13a:	3304      	adds	r3, #4
 800d13c:	60fb      	str	r3, [r7, #12]
 800d13e:	e00c      	b.n	800d15a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d140:	78fb      	ldrb	r3, [r7, #3]
 800d142:	f003 020f 	and.w	r2, r3, #15
 800d146:	4613      	mov	r3, r2
 800d148:	00db      	lsls	r3, r3, #3
 800d14a:	4413      	add	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	4413      	add	r3, r2
 800d156:	3304      	adds	r3, #4
 800d158:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	68f9      	ldr	r1, [r7, #12]
 800d160:	4618      	mov	r0, r3
 800d162:	f007 fe97 	bl	8014e94 <USB_EPStopXfer>
 800d166:	4603      	mov	r3, r0
 800d168:	72fb      	strb	r3, [r7, #11]

  return ret;
 800d16a:	7afb      	ldrb	r3, [r7, #11]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08a      	sub	sp, #40	@ 0x28
 800d178:	af02      	add	r7, sp, #8
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	4613      	mov	r3, r2
 800d18c:	00db      	lsls	r3, r3, #3
 800d18e:	4413      	add	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	3310      	adds	r3, #16
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	4413      	add	r3, r2
 800d198:	3304      	adds	r3, #4
 800d19a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	695a      	ldr	r2, [r3, #20]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d901      	bls.n	800d1ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e06b      	b.n	800d284 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	691a      	ldr	r2, [r3, #16]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	695b      	ldr	r3, [r3, #20]
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	69fa      	ldr	r2, [r7, #28]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d902      	bls.n	800d1c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	3303      	adds	r3, #3
 800d1cc:	089b      	lsrs	r3, r3, #2
 800d1ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d1d0:	e02a      	b.n	800d228 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	691a      	ldr	r2, [r3, #16]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	695b      	ldr	r3, [r3, #20]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	69fa      	ldr	r2, [r7, #28]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d902      	bls.n	800d1ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	3303      	adds	r3, #3
 800d1f2:	089b      	lsrs	r3, r3, #2
 800d1f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	68d9      	ldr	r1, [r3, #12]
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	4603      	mov	r3, r0
 800d20a:	6978      	ldr	r0, [r7, #20]
 800d20c:	f007 feec 	bl	8014fe8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	68da      	ldr	r2, [r3, #12]
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	441a      	add	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	695a      	ldr	r2, [r3, #20]
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	441a      	add	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	015a      	lsls	r2, r3, #5
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	4413      	add	r3, r2
 800d230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d234:	699b      	ldr	r3, [r3, #24]
 800d236:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d238:	69ba      	ldr	r2, [r7, #24]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d809      	bhi.n	800d252 <PCD_WriteEmptyTxFifo+0xde>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	695a      	ldr	r2, [r3, #20]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d246:	429a      	cmp	r2, r3
 800d248:	d203      	bcs.n	800d252 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1bf      	bne.n	800d1d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	691a      	ldr	r2, [r3, #16]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	695b      	ldr	r3, [r3, #20]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d811      	bhi.n	800d282 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	f003 030f 	and.w	r3, r3, #15
 800d264:	2201      	movs	r2, #1
 800d266:	fa02 f303 	lsl.w	r3, r2, r3
 800d26a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	43db      	mvns	r3, r3
 800d278:	6939      	ldr	r1, [r7, #16]
 800d27a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d27e:	4013      	ands	r3, r2
 800d280:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d282:	2300      	movs	r3, #0
}
 800d284:	4618      	mov	r0, r3
 800d286:	3720      	adds	r7, #32
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b088      	sub	sp, #32
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	333c      	adds	r3, #60	@ 0x3c
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	015a      	lsls	r2, r3, #5
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	799b      	ldrb	r3, [r3, #6]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d17b      	bne.n	800d3ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	f003 0308 	and.w	r3, r3, #8
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d015      	beq.n	800d2f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	4a61      	ldr	r2, [pc, #388]	@ (800d454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	f240 80b9 	bls.w	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 80b3 	beq.w	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	015a      	lsls	r2, r3, #5
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2f4:	6093      	str	r3, [r2, #8]
 800d2f6:	e0a7      	b.n	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	f003 0320 	and.w	r3, r3, #32
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d009      	beq.n	800d316 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	015a      	lsls	r2, r3, #5
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	4413      	add	r3, r2
 800d30a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d30e:	461a      	mov	r2, r3
 800d310:	2320      	movs	r3, #32
 800d312:	6093      	str	r3, [r2, #8]
 800d314:	e098      	b.n	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f040 8093 	bne.w	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	4a4b      	ldr	r2, [pc, #300]	@ (800d454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d90f      	bls.n	800d34a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00a      	beq.n	800d34a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	015a      	lsls	r2, r3, #5
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	4413      	add	r3, r2
 800d33c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d340:	461a      	mov	r2, r3
 800d342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d346:	6093      	str	r3, [r2, #8]
 800d348:	e07e      	b.n	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d34a:	683a      	ldr	r2, [r7, #0]
 800d34c:	4613      	mov	r3, r2
 800d34e:	00db      	lsls	r3, r3, #3
 800d350:	4413      	add	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	4413      	add	r3, r2
 800d35c:	3304      	adds	r3, #4
 800d35e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6a1a      	ldr	r2, [r3, #32]
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	0159      	lsls	r1, r3, #5
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	440b      	add	r3, r1
 800d36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d376:	1ad2      	subs	r2, r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d114      	bne.n	800d3ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d109      	bne.n	800d39e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6818      	ldr	r0, [r3, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d394:	461a      	mov	r2, r3
 800d396:	2101      	movs	r1, #1
 800d398:	f008 f8be 	bl	8015518 <USB_EP0_OutStart>
 800d39c:	e006      	b.n	800d3ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	695b      	ldr	r3, [r3, #20]
 800d3a6:	441a      	add	r2, r3
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f00a fbe4 	bl	8017b80 <HAL_PCD_DataOutStageCallback>
 800d3b8:	e046      	b.n	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	4a26      	ldr	r2, [pc, #152]	@ (800d458 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d124      	bne.n	800d40c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00a      	beq.n	800d3e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3d8:	461a      	mov	r2, r3
 800d3da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3de:	6093      	str	r3, [r2, #8]
 800d3e0:	e032      	b.n	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	f003 0320 	and.w	r3, r3, #32
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d008      	beq.n	800d3fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	015a      	lsls	r2, r3, #5
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	2320      	movs	r3, #32
 800d3fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	b2db      	uxtb	r3, r3
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f00a fbbb 	bl	8017b80 <HAL_PCD_DataOutStageCallback>
 800d40a:	e01d      	b.n	800d448 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d114      	bne.n	800d43c <PCD_EP_OutXfrComplete_int+0x1b0>
 800d412:	6879      	ldr	r1, [r7, #4]
 800d414:	683a      	ldr	r2, [r7, #0]
 800d416:	4613      	mov	r3, r2
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	440b      	add	r3, r1
 800d420:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d108      	bne.n	800d43c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6818      	ldr	r0, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d434:	461a      	mov	r2, r3
 800d436:	2100      	movs	r1, #0
 800d438:	f008 f86e 	bl	8015518 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	4619      	mov	r1, r3
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f00a fb9c 	bl	8017b80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3720      	adds	r7, #32
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	4f54300a 	.word	0x4f54300a
 800d458:	4f54310a 	.word	0x4f54310a

0800d45c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	333c      	adds	r3, #60	@ 0x3c
 800d474:	3304      	adds	r3, #4
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	015a      	lsls	r2, r3, #5
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	4413      	add	r3, r2
 800d482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	4a15      	ldr	r2, [pc, #84]	@ (800d4e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d90e      	bls.n	800d4b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d009      	beq.n	800d4b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	015a      	lsls	r2, r3, #5
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f00a fb53 	bl	8017b5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	4a0a      	ldr	r2, [pc, #40]	@ (800d4e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d90c      	bls.n	800d4d8 <PCD_EP_OutSetupPacket_int+0x7c>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	799b      	ldrb	r3, [r3, #6]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d108      	bne.n	800d4d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	f008 f820 	bl	8015518 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	4f54300a 	.word	0x4f54300a

0800d4e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	70fb      	strb	r3, [r7, #3]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d500:	78fb      	ldrb	r3, [r7, #3]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d107      	bne.n	800d516 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d506:	883b      	ldrh	r3, [r7, #0]
 800d508:	0419      	lsls	r1, r3, #16
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	430a      	orrs	r2, r1
 800d512:	629a      	str	r2, [r3, #40]	@ 0x28
 800d514:	e028      	b.n	800d568 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d51c:	0c1b      	lsrs	r3, r3, #16
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	4413      	add	r3, r2
 800d522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d524:	2300      	movs	r3, #0
 800d526:	73fb      	strb	r3, [r7, #15]
 800d528:	e00d      	b.n	800d546 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	7bfb      	ldrb	r3, [r7, #15]
 800d530:	3340      	adds	r3, #64	@ 0x40
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	0c1b      	lsrs	r3, r3, #16
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	4413      	add	r3, r2
 800d53e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d540:	7bfb      	ldrb	r3, [r7, #15]
 800d542:	3301      	adds	r3, #1
 800d544:	73fb      	strb	r3, [r7, #15]
 800d546:	7bfa      	ldrb	r2, [r7, #15]
 800d548:	78fb      	ldrb	r3, [r7, #3]
 800d54a:	3b01      	subs	r3, #1
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d3ec      	bcc.n	800d52a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d550:	883b      	ldrh	r3, [r7, #0]
 800d552:	0418      	lsls	r0, r3, #16
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6819      	ldr	r1, [r3, #0]
 800d558:	78fb      	ldrb	r3, [r7, #3]
 800d55a:	3b01      	subs	r3, #1
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	4302      	orrs	r2, r0
 800d560:	3340      	adds	r3, #64	@ 0x40
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	440b      	add	r3, r1
 800d566:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr

0800d576 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d576:	b480      	push	{r7}
 800d578:	b083      	sub	sp, #12
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
 800d57e:	460b      	mov	r3, r1
 800d580:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	887a      	ldrh	r2, [r7, #2]
 800d588:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	699b      	ldr	r3, [r3, #24]
 800d5ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d5c6:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <HAL_PCDEx_ActivateLPM+0x44>)
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3714      	adds	r7, #20
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr
 800d5dc:	10000003 	.word	0x10000003

0800d5e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d600:	4b19      	ldr	r3, [pc, #100]	@ (800d668 <HAL_PWREx_ConfigSupply+0x70>)
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	f003 0304 	and.w	r3, r3, #4
 800d608:	2b04      	cmp	r3, #4
 800d60a:	d00a      	beq.n	800d622 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d60c:	4b16      	ldr	r3, [pc, #88]	@ (800d668 <HAL_PWREx_ConfigSupply+0x70>)
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	f003 0307 	and.w	r3, r3, #7
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d001      	beq.n	800d61e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	e01f      	b.n	800d65e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d61e:	2300      	movs	r3, #0
 800d620:	e01d      	b.n	800d65e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d622:	4b11      	ldr	r3, [pc, #68]	@ (800d668 <HAL_PWREx_ConfigSupply+0x70>)
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	f023 0207 	bic.w	r2, r3, #7
 800d62a:	490f      	ldr	r1, [pc, #60]	@ (800d668 <HAL_PWREx_ConfigSupply+0x70>)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4313      	orrs	r3, r2
 800d630:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d632:	f7f5 f9c1 	bl	80029b8 <HAL_GetTick>
 800d636:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d638:	e009      	b.n	800d64e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d63a:	f7f5 f9bd 	bl	80029b8 <HAL_GetTick>
 800d63e:	4602      	mov	r2, r0
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d648:	d901      	bls.n	800d64e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e007      	b.n	800d65e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d64e:	4b06      	ldr	r3, [pc, #24]	@ (800d668 <HAL_PWREx_ConfigSupply+0x70>)
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d65a:	d1ee      	bne.n	800d63a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	58024800 	.word	0x58024800

0800d66c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d66c:	b480      	push	{r7}
 800d66e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d670:	4b05      	ldr	r3, [pc, #20]	@ (800d688 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	4a04      	ldr	r2, [pc, #16]	@ (800d688 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d67a:	60d3      	str	r3, [r2, #12]
}
 800d67c:	bf00      	nop
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	58024800 	.word	0x58024800

0800d68c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08c      	sub	sp, #48	@ 0x30
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d102      	bne.n	800d6a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	f000 bc48 	b.w	800df30 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f000 8088 	beq.w	800d7be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6ae:	4b99      	ldr	r3, [pc, #612]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d6b8:	4b96      	ldr	r3, [pc, #600]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c0:	2b10      	cmp	r3, #16
 800d6c2:	d007      	beq.n	800d6d4 <HAL_RCC_OscConfig+0x48>
 800d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c6:	2b18      	cmp	r3, #24
 800d6c8:	d111      	bne.n	800d6ee <HAL_RCC_OscConfig+0x62>
 800d6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6cc:	f003 0303 	and.w	r3, r3, #3
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	d10c      	bne.n	800d6ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6d4:	4b8f      	ldr	r3, [pc, #572]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d06d      	beq.n	800d7bc <HAL_RCC_OscConfig+0x130>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d169      	bne.n	800d7bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	f000 bc21 	b.w	800df30 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6f6:	d106      	bne.n	800d706 <HAL_RCC_OscConfig+0x7a>
 800d6f8:	4b86      	ldr	r3, [pc, #536]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a85      	ldr	r2, [pc, #532]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d6fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d702:	6013      	str	r3, [r2, #0]
 800d704:	e02e      	b.n	800d764 <HAL_RCC_OscConfig+0xd8>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10c      	bne.n	800d728 <HAL_RCC_OscConfig+0x9c>
 800d70e:	4b81      	ldr	r3, [pc, #516]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a80      	ldr	r2, [pc, #512]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d718:	6013      	str	r3, [r2, #0]
 800d71a:	4b7e      	ldr	r3, [pc, #504]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a7d      	ldr	r2, [pc, #500]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d720:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	e01d      	b.n	800d764 <HAL_RCC_OscConfig+0xd8>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d730:	d10c      	bne.n	800d74c <HAL_RCC_OscConfig+0xc0>
 800d732:	4b78      	ldr	r3, [pc, #480]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a77      	ldr	r2, [pc, #476]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d73c:	6013      	str	r3, [r2, #0]
 800d73e:	4b75      	ldr	r3, [pc, #468]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a74      	ldr	r2, [pc, #464]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d748:	6013      	str	r3, [r2, #0]
 800d74a:	e00b      	b.n	800d764 <HAL_RCC_OscConfig+0xd8>
 800d74c:	4b71      	ldr	r3, [pc, #452]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a70      	ldr	r2, [pc, #448]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	4b6e      	ldr	r3, [pc, #440]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a6d      	ldr	r2, [pc, #436]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d75e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d013      	beq.n	800d794 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d76c:	f7f5 f924 	bl	80029b8 <HAL_GetTick>
 800d770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d772:	e008      	b.n	800d786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d774:	f7f5 f920 	bl	80029b8 <HAL_GetTick>
 800d778:	4602      	mov	r2, r0
 800d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	2b64      	cmp	r3, #100	@ 0x64
 800d780:	d901      	bls.n	800d786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d782:	2303      	movs	r3, #3
 800d784:	e3d4      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d786:	4b63      	ldr	r3, [pc, #396]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0f0      	beq.n	800d774 <HAL_RCC_OscConfig+0xe8>
 800d792:	e014      	b.n	800d7be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d794:	f7f5 f910 	bl	80029b8 <HAL_GetTick>
 800d798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d79a:	e008      	b.n	800d7ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d79c:	f7f5 f90c 	bl	80029b8 <HAL_GetTick>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	2b64      	cmp	r3, #100	@ 0x64
 800d7a8:	d901      	bls.n	800d7ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	e3c0      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d7ae:	4b59      	ldr	r3, [pc, #356]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1f0      	bne.n	800d79c <HAL_RCC_OscConfig+0x110>
 800d7ba:	e000      	b.n	800d7be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d7bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f003 0302 	and.w	r3, r3, #2
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f000 80ca 	beq.w	800d960 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d7cc:	4b51      	ldr	r3, [pc, #324]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d7d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d7d6:	4b4f      	ldr	r3, [pc, #316]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d007      	beq.n	800d7f2 <HAL_RCC_OscConfig+0x166>
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	2b18      	cmp	r3, #24
 800d7e6:	d156      	bne.n	800d896 <HAL_RCC_OscConfig+0x20a>
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	f003 0303 	and.w	r3, r3, #3
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d151      	bne.n	800d896 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d7f2:	4b48      	ldr	r3, [pc, #288]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f003 0304 	and.w	r3, r3, #4
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d005      	beq.n	800d80a <HAL_RCC_OscConfig+0x17e>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d101      	bne.n	800d80a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e392      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d80a:	4b42      	ldr	r3, [pc, #264]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f023 0219 	bic.w	r2, r3, #25
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	493f      	ldr	r1, [pc, #252]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d818:	4313      	orrs	r3, r2
 800d81a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d81c:	f7f5 f8cc 	bl	80029b8 <HAL_GetTick>
 800d820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d822:	e008      	b.n	800d836 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d824:	f7f5 f8c8 	bl	80029b8 <HAL_GetTick>
 800d828:	4602      	mov	r2, r0
 800d82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d901      	bls.n	800d836 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	e37c      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d836:	4b37      	ldr	r3, [pc, #220]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f003 0304 	and.w	r3, r3, #4
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d0f0      	beq.n	800d824 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d842:	f7f5 f8e9 	bl	8002a18 <HAL_GetREVID>
 800d846:	4603      	mov	r3, r0
 800d848:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d817      	bhi.n	800d880 <HAL_RCC_OscConfig+0x1f4>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	2b40      	cmp	r3, #64	@ 0x40
 800d856:	d108      	bne.n	800d86a <HAL_RCC_OscConfig+0x1de>
 800d858:	4b2e      	ldr	r3, [pc, #184]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d860:	4a2c      	ldr	r2, [pc, #176]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d866:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d868:	e07a      	b.n	800d960 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d86a:	4b2a      	ldr	r3, [pc, #168]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	031b      	lsls	r3, r3, #12
 800d878:	4926      	ldr	r1, [pc, #152]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d87a:	4313      	orrs	r3, r2
 800d87c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d87e:	e06f      	b.n	800d960 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d880:	4b24      	ldr	r3, [pc, #144]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	061b      	lsls	r3, r3, #24
 800d88e:	4921      	ldr	r1, [pc, #132]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d890:	4313      	orrs	r3, r2
 800d892:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d894:	e064      	b.n	800d960 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d047      	beq.n	800d92e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d89e:	4b1d      	ldr	r3, [pc, #116]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f023 0219 	bic.w	r2, r3, #25
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	491a      	ldr	r1, [pc, #104]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b0:	f7f5 f882 	bl	80029b8 <HAL_GetTick>
 800d8b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d8b6:	e008      	b.n	800d8ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d8b8:	f7f5 f87e 	bl	80029b8 <HAL_GetTick>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	d901      	bls.n	800d8ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	e332      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d8ca:	4b12      	ldr	r3, [pc, #72]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f003 0304 	and.w	r3, r3, #4
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d0f0      	beq.n	800d8b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8d6:	f7f5 f89f 	bl	8002a18 <HAL_GetREVID>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d819      	bhi.n	800d918 <HAL_RCC_OscConfig+0x28c>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	2b40      	cmp	r3, #64	@ 0x40
 800d8ea:	d108      	bne.n	800d8fe <HAL_RCC_OscConfig+0x272>
 800d8ec:	4b09      	ldr	r3, [pc, #36]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d8f4:	4a07      	ldr	r2, [pc, #28]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d8f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8fa:	6053      	str	r3, [r2, #4]
 800d8fc:	e030      	b.n	800d960 <HAL_RCC_OscConfig+0x2d4>
 800d8fe:	4b05      	ldr	r3, [pc, #20]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	031b      	lsls	r3, r3, #12
 800d90c:	4901      	ldr	r1, [pc, #4]	@ (800d914 <HAL_RCC_OscConfig+0x288>)
 800d90e:	4313      	orrs	r3, r2
 800d910:	604b      	str	r3, [r1, #4]
 800d912:	e025      	b.n	800d960 <HAL_RCC_OscConfig+0x2d4>
 800d914:	58024400 	.word	0x58024400
 800d918:	4b9a      	ldr	r3, [pc, #616]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	061b      	lsls	r3, r3, #24
 800d926:	4997      	ldr	r1, [pc, #604]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d928:	4313      	orrs	r3, r2
 800d92a:	604b      	str	r3, [r1, #4]
 800d92c:	e018      	b.n	800d960 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d92e:	4b95      	ldr	r3, [pc, #596]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a94      	ldr	r2, [pc, #592]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d934:	f023 0301 	bic.w	r3, r3, #1
 800d938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d93a:	f7f5 f83d 	bl	80029b8 <HAL_GetTick>
 800d93e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d940:	e008      	b.n	800d954 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d942:	f7f5 f839 	bl	80029b8 <HAL_GetTick>
 800d946:	4602      	mov	r2, r0
 800d948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d901      	bls.n	800d954 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d950:	2303      	movs	r3, #3
 800d952:	e2ed      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d954:	4b8b      	ldr	r3, [pc, #556]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f003 0304 	and.w	r3, r3, #4
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1f0      	bne.n	800d942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 0310 	and.w	r3, r3, #16
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f000 80a9 	beq.w	800dac0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d96e:	4b85      	ldr	r3, [pc, #532]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d976:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d978:	4b82      	ldr	r3, [pc, #520]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d97c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	2b08      	cmp	r3, #8
 800d982:	d007      	beq.n	800d994 <HAL_RCC_OscConfig+0x308>
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	2b18      	cmp	r3, #24
 800d988:	d13a      	bne.n	800da00 <HAL_RCC_OscConfig+0x374>
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f003 0303 	and.w	r3, r3, #3
 800d990:	2b01      	cmp	r3, #1
 800d992:	d135      	bne.n	800da00 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d994:	4b7b      	ldr	r3, [pc, #492]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <HAL_RCC_OscConfig+0x320>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	69db      	ldr	r3, [r3, #28]
 800d9a4:	2b80      	cmp	r3, #128	@ 0x80
 800d9a6:	d001      	beq.n	800d9ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e2c1      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d9ac:	f7f5 f834 	bl	8002a18 <HAL_GetREVID>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d817      	bhi.n	800d9ea <HAL_RCC_OscConfig+0x35e>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	2b20      	cmp	r3, #32
 800d9c0:	d108      	bne.n	800d9d4 <HAL_RCC_OscConfig+0x348>
 800d9c2:	4b70      	ldr	r3, [pc, #448]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d9ca:	4a6e      	ldr	r2, [pc, #440]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d9cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d9d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d9d2:	e075      	b.n	800dac0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d9d4:	4b6b      	ldr	r3, [pc, #428]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6a1b      	ldr	r3, [r3, #32]
 800d9e0:	069b      	lsls	r3, r3, #26
 800d9e2:	4968      	ldr	r1, [pc, #416]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d9e8:	e06a      	b.n	800dac0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d9ea:	4b66      	ldr	r3, [pc, #408]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6a1b      	ldr	r3, [r3, #32]
 800d9f6:	061b      	lsls	r3, r3, #24
 800d9f8:	4962      	ldr	r1, [pc, #392]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d9fe:	e05f      	b.n	800dac0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	69db      	ldr	r3, [r3, #28]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d042      	beq.n	800da8e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800da08:	4b5e      	ldr	r3, [pc, #376]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a5d      	ldr	r2, [pc, #372]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da14:	f7f4 ffd0 	bl	80029b8 <HAL_GetTick>
 800da18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800da1a:	e008      	b.n	800da2e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800da1c:	f7f4 ffcc 	bl	80029b8 <HAL_GetTick>
 800da20:	4602      	mov	r2, r0
 800da22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da24:	1ad3      	subs	r3, r2, r3
 800da26:	2b02      	cmp	r3, #2
 800da28:	d901      	bls.n	800da2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800da2a:	2303      	movs	r3, #3
 800da2c:	e280      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800da2e:	4b55      	ldr	r3, [pc, #340]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da36:	2b00      	cmp	r3, #0
 800da38:	d0f0      	beq.n	800da1c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800da3a:	f7f4 ffed 	bl	8002a18 <HAL_GetREVID>
 800da3e:	4603      	mov	r3, r0
 800da40:	f241 0203 	movw	r2, #4099	@ 0x1003
 800da44:	4293      	cmp	r3, r2
 800da46:	d817      	bhi.n	800da78 <HAL_RCC_OscConfig+0x3ec>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a1b      	ldr	r3, [r3, #32]
 800da4c:	2b20      	cmp	r3, #32
 800da4e:	d108      	bne.n	800da62 <HAL_RCC_OscConfig+0x3d6>
 800da50:	4b4c      	ldr	r3, [pc, #304]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800da58:	4a4a      	ldr	r2, [pc, #296]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800da5e:	6053      	str	r3, [r2, #4]
 800da60:	e02e      	b.n	800dac0 <HAL_RCC_OscConfig+0x434>
 800da62:	4b48      	ldr	r3, [pc, #288]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	069b      	lsls	r3, r3, #26
 800da70:	4944      	ldr	r1, [pc, #272]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da72:	4313      	orrs	r3, r2
 800da74:	604b      	str	r3, [r1, #4]
 800da76:	e023      	b.n	800dac0 <HAL_RCC_OscConfig+0x434>
 800da78:	4b42      	ldr	r3, [pc, #264]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a1b      	ldr	r3, [r3, #32]
 800da84:	061b      	lsls	r3, r3, #24
 800da86:	493f      	ldr	r1, [pc, #252]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da88:	4313      	orrs	r3, r2
 800da8a:	60cb      	str	r3, [r1, #12]
 800da8c:	e018      	b.n	800dac0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800da8e:	4b3d      	ldr	r3, [pc, #244]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a3c      	ldr	r2, [pc, #240]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800da94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da9a:	f7f4 ff8d 	bl	80029b8 <HAL_GetTick>
 800da9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800daa0:	e008      	b.n	800dab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800daa2:	f7f4 ff89 	bl	80029b8 <HAL_GetTick>
 800daa6:	4602      	mov	r2, r0
 800daa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	2b02      	cmp	r3, #2
 800daae:	d901      	bls.n	800dab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dab0:	2303      	movs	r3, #3
 800dab2:	e23d      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dab4:	4b33      	ldr	r3, [pc, #204]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1f0      	bne.n	800daa2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f003 0308 	and.w	r3, r3, #8
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d036      	beq.n	800db3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	695b      	ldr	r3, [r3, #20]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d019      	beq.n	800db08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dad4:	4b2b      	ldr	r3, [pc, #172]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800dad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dad8:	4a2a      	ldr	r2, [pc, #168]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800dada:	f043 0301 	orr.w	r3, r3, #1
 800dade:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dae0:	f7f4 ff6a 	bl	80029b8 <HAL_GetTick>
 800dae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dae6:	e008      	b.n	800dafa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dae8:	f7f4 ff66 	bl	80029b8 <HAL_GetTick>
 800daec:	4602      	mov	r2, r0
 800daee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d901      	bls.n	800dafa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800daf6:	2303      	movs	r3, #3
 800daf8:	e21a      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dafa:	4b22      	ldr	r3, [pc, #136]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800dafc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dafe:	f003 0302 	and.w	r3, r3, #2
 800db02:	2b00      	cmp	r3, #0
 800db04:	d0f0      	beq.n	800dae8 <HAL_RCC_OscConfig+0x45c>
 800db06:	e018      	b.n	800db3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800db08:	4b1e      	ldr	r3, [pc, #120]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800db0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db0c:	4a1d      	ldr	r2, [pc, #116]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800db0e:	f023 0301 	bic.w	r3, r3, #1
 800db12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db14:	f7f4 ff50 	bl	80029b8 <HAL_GetTick>
 800db18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800db1a:	e008      	b.n	800db2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db1c:	f7f4 ff4c 	bl	80029b8 <HAL_GetTick>
 800db20:	4602      	mov	r2, r0
 800db22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db24:	1ad3      	subs	r3, r2, r3
 800db26:	2b02      	cmp	r3, #2
 800db28:	d901      	bls.n	800db2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800db2a:	2303      	movs	r3, #3
 800db2c:	e200      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800db2e:	4b15      	ldr	r3, [pc, #84]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800db30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db32:	f003 0302 	and.w	r3, r3, #2
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1f0      	bne.n	800db1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f003 0320 	and.w	r3, r3, #32
 800db42:	2b00      	cmp	r3, #0
 800db44:	d039      	beq.n	800dbba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	699b      	ldr	r3, [r3, #24]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d01c      	beq.n	800db88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800db4e:	4b0d      	ldr	r3, [pc, #52]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a0c      	ldr	r2, [pc, #48]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800db54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800db58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800db5a:	f7f4 ff2d 	bl	80029b8 <HAL_GetTick>
 800db5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800db60:	e008      	b.n	800db74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800db62:	f7f4 ff29 	bl	80029b8 <HAL_GetTick>
 800db66:	4602      	mov	r2, r0
 800db68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d901      	bls.n	800db74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800db70:	2303      	movs	r3, #3
 800db72:	e1dd      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800db74:	4b03      	ldr	r3, [pc, #12]	@ (800db84 <HAL_RCC_OscConfig+0x4f8>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d0f0      	beq.n	800db62 <HAL_RCC_OscConfig+0x4d6>
 800db80:	e01b      	b.n	800dbba <HAL_RCC_OscConfig+0x52e>
 800db82:	bf00      	nop
 800db84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800db88:	4b9b      	ldr	r3, [pc, #620]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a9a      	ldr	r2, [pc, #616]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800db8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800db94:	f7f4 ff10 	bl	80029b8 <HAL_GetTick>
 800db98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800db9a:	e008      	b.n	800dbae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800db9c:	f7f4 ff0c 	bl	80029b8 <HAL_GetTick>
 800dba0:	4602      	mov	r2, r0
 800dba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	d901      	bls.n	800dbae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	e1c0      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dbae:	4b92      	ldr	r3, [pc, #584]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1f0      	bne.n	800db9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f003 0304 	and.w	r3, r3, #4
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 8081 	beq.w	800dcca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dbc8:	4b8c      	ldr	r3, [pc, #560]	@ (800ddfc <HAL_RCC_OscConfig+0x770>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a8b      	ldr	r2, [pc, #556]	@ (800ddfc <HAL_RCC_OscConfig+0x770>)
 800dbce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dbd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dbd4:	f7f4 fef0 	bl	80029b8 <HAL_GetTick>
 800dbd8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dbda:	e008      	b.n	800dbee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dbdc:	f7f4 feec 	bl	80029b8 <HAL_GetTick>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe4:	1ad3      	subs	r3, r2, r3
 800dbe6:	2b64      	cmp	r3, #100	@ 0x64
 800dbe8:	d901      	bls.n	800dbee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800dbea:	2303      	movs	r3, #3
 800dbec:	e1a0      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dbee:	4b83      	ldr	r3, [pc, #524]	@ (800ddfc <HAL_RCC_OscConfig+0x770>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d0f0      	beq.n	800dbdc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d106      	bne.n	800dc10 <HAL_RCC_OscConfig+0x584>
 800dc02:	4b7d      	ldr	r3, [pc, #500]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc06:	4a7c      	ldr	r2, [pc, #496]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc08:	f043 0301 	orr.w	r3, r3, #1
 800dc0c:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc0e:	e02d      	b.n	800dc6c <HAL_RCC_OscConfig+0x5e0>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10c      	bne.n	800dc32 <HAL_RCC_OscConfig+0x5a6>
 800dc18:	4b77      	ldr	r3, [pc, #476]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc1c:	4a76      	ldr	r2, [pc, #472]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc1e:	f023 0301 	bic.w	r3, r3, #1
 800dc22:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc24:	4b74      	ldr	r3, [pc, #464]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc28:	4a73      	ldr	r2, [pc, #460]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc2a:	f023 0304 	bic.w	r3, r3, #4
 800dc2e:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc30:	e01c      	b.n	800dc6c <HAL_RCC_OscConfig+0x5e0>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	2b05      	cmp	r3, #5
 800dc38:	d10c      	bne.n	800dc54 <HAL_RCC_OscConfig+0x5c8>
 800dc3a:	4b6f      	ldr	r3, [pc, #444]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc3e:	4a6e      	ldr	r2, [pc, #440]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc40:	f043 0304 	orr.w	r3, r3, #4
 800dc44:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc46:	4b6c      	ldr	r3, [pc, #432]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc4a:	4a6b      	ldr	r2, [pc, #428]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc4c:	f043 0301 	orr.w	r3, r3, #1
 800dc50:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc52:	e00b      	b.n	800dc6c <HAL_RCC_OscConfig+0x5e0>
 800dc54:	4b68      	ldr	r3, [pc, #416]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc58:	4a67      	ldr	r2, [pc, #412]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc5a:	f023 0301 	bic.w	r3, r3, #1
 800dc5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc60:	4b65      	ldr	r3, [pc, #404]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc64:	4a64      	ldr	r2, [pc, #400]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc66:	f023 0304 	bic.w	r3, r3, #4
 800dc6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d015      	beq.n	800dca0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc74:	f7f4 fea0 	bl	80029b8 <HAL_GetTick>
 800dc78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dc7a:	e00a      	b.n	800dc92 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc7c:	f7f4 fe9c 	bl	80029b8 <HAL_GetTick>
 800dc80:	4602      	mov	r2, r0
 800dc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d901      	bls.n	800dc92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	e14e      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dc92:	4b59      	ldr	r3, [pc, #356]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dc94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc96:	f003 0302 	and.w	r3, r3, #2
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d0ee      	beq.n	800dc7c <HAL_RCC_OscConfig+0x5f0>
 800dc9e:	e014      	b.n	800dcca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dca0:	f7f4 fe8a 	bl	80029b8 <HAL_GetTick>
 800dca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dca6:	e00a      	b.n	800dcbe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dca8:	f7f4 fe86 	bl	80029b8 <HAL_GetTick>
 800dcac:	4602      	mov	r2, r0
 800dcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d901      	bls.n	800dcbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	e138      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dcbe:	4b4e      	ldr	r3, [pc, #312]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dcc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dcc2:	f003 0302 	and.w	r3, r3, #2
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1ee      	bne.n	800dca8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f000 812d 	beq.w	800df2e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800dcd4:	4b48      	ldr	r3, [pc, #288]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dcd6:	691b      	ldr	r3, [r3, #16]
 800dcd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dcdc:	2b18      	cmp	r3, #24
 800dcde:	f000 80bd 	beq.w	800de5c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	f040 809e 	bne.w	800de28 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dcec:	4b42      	ldr	r3, [pc, #264]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a41      	ldr	r2, [pc, #260]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dcf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dcf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcf8:	f7f4 fe5e 	bl	80029b8 <HAL_GetTick>
 800dcfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dcfe:	e008      	b.n	800dd12 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dd00:	f7f4 fe5a 	bl	80029b8 <HAL_GetTick>
 800dd04:	4602      	mov	r2, r0
 800dd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	d901      	bls.n	800dd12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	e10e      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dd12:	4b39      	ldr	r3, [pc, #228]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1f0      	bne.n	800dd00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dd1e:	4b36      	ldr	r3, [pc, #216]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dd22:	4b37      	ldr	r3, [pc, #220]	@ (800de00 <HAL_RCC_OscConfig+0x774>)
 800dd24:	4013      	ands	r3, r2
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dd2e:	0112      	lsls	r2, r2, #4
 800dd30:	430a      	orrs	r2, r1
 800dd32:	4931      	ldr	r1, [pc, #196]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd34:	4313      	orrs	r3, r2
 800dd36:	628b      	str	r3, [r1, #40]	@ 0x28
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd46:	3b01      	subs	r3, #1
 800dd48:	025b      	lsls	r3, r3, #9
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	431a      	orrs	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd52:	3b01      	subs	r3, #1
 800dd54:	041b      	lsls	r3, r3, #16
 800dd56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd60:	3b01      	subs	r3, #1
 800dd62:	061b      	lsls	r3, r3, #24
 800dd64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dd68:	4923      	ldr	r1, [pc, #140]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800dd6e:	4b22      	ldr	r3, [pc, #136]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd72:	4a21      	ldr	r2, [pc, #132]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd74:	f023 0301 	bic.w	r3, r3, #1
 800dd78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dd7a:	4b1f      	ldr	r3, [pc, #124]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd7e:	4b21      	ldr	r3, [pc, #132]	@ (800de04 <HAL_RCC_OscConfig+0x778>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800dd86:	00d2      	lsls	r2, r2, #3
 800dd88:	491b      	ldr	r1, [pc, #108]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dd8e:	4b1a      	ldr	r3, [pc, #104]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd92:	f023 020c 	bic.w	r2, r3, #12
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd9a:	4917      	ldr	r1, [pc, #92]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800dda0:	4b15      	ldr	r3, [pc, #84]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dda2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda4:	f023 0202 	bic.w	r2, r3, #2
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddac:	4912      	ldr	r1, [pc, #72]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ddb2:	4b11      	ldr	r3, [pc, #68]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800ddb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb6:	4a10      	ldr	r2, [pc, #64]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800ddb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ddbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddbe:	4b0e      	ldr	r3, [pc, #56]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800ddc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddc2:	4a0d      	ldr	r2, [pc, #52]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800ddc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ddc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ddca:	4b0b      	ldr	r3, [pc, #44]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800ddcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddce:	4a0a      	ldr	r2, [pc, #40]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800ddd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ddd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ddd6:	4b08      	ldr	r3, [pc, #32]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800ddd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddda:	4a07      	ldr	r2, [pc, #28]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dddc:	f043 0301 	orr.w	r3, r3, #1
 800dde0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dde2:	4b05      	ldr	r3, [pc, #20]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a04      	ldr	r2, [pc, #16]	@ (800ddf8 <HAL_RCC_OscConfig+0x76c>)
 800dde8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ddec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddee:	f7f4 fde3 	bl	80029b8 <HAL_GetTick>
 800ddf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ddf4:	e011      	b.n	800de1a <HAL_RCC_OscConfig+0x78e>
 800ddf6:	bf00      	nop
 800ddf8:	58024400 	.word	0x58024400
 800ddfc:	58024800 	.word	0x58024800
 800de00:	fffffc0c 	.word	0xfffffc0c
 800de04:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de08:	f7f4 fdd6 	bl	80029b8 <HAL_GetTick>
 800de0c:	4602      	mov	r2, r0
 800de0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de10:	1ad3      	subs	r3, r2, r3
 800de12:	2b02      	cmp	r3, #2
 800de14:	d901      	bls.n	800de1a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800de16:	2303      	movs	r3, #3
 800de18:	e08a      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800de1a:	4b47      	ldr	r3, [pc, #284]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de22:	2b00      	cmp	r3, #0
 800de24:	d0f0      	beq.n	800de08 <HAL_RCC_OscConfig+0x77c>
 800de26:	e082      	b.n	800df2e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de28:	4b43      	ldr	r3, [pc, #268]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a42      	ldr	r2, [pc, #264]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800de2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800de32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de34:	f7f4 fdc0 	bl	80029b8 <HAL_GetTick>
 800de38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800de3a:	e008      	b.n	800de4e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de3c:	f7f4 fdbc 	bl	80029b8 <HAL_GetTick>
 800de40:	4602      	mov	r2, r0
 800de42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	2b02      	cmp	r3, #2
 800de48:	d901      	bls.n	800de4e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e070      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800de4e:	4b3a      	ldr	r3, [pc, #232]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1f0      	bne.n	800de3c <HAL_RCC_OscConfig+0x7b0>
 800de5a:	e068      	b.n	800df2e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800de5c:	4b36      	ldr	r3, [pc, #216]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800de5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800de62:	4b35      	ldr	r3, [pc, #212]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800de64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de66:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d031      	beq.n	800ded4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	f003 0203 	and.w	r2, r3, #3
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d12a      	bne.n	800ded4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	091b      	lsrs	r3, r3, #4
 800de82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d122      	bne.n	800ded4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d11a      	bne.n	800ded4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	0a5b      	lsrs	r3, r3, #9
 800dea2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deaa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800deac:	429a      	cmp	r2, r3
 800deae:	d111      	bne.n	800ded4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	0c1b      	lsrs	r3, r3, #16
 800deb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800debc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800debe:	429a      	cmp	r2, r3
 800dec0:	d108      	bne.n	800ded4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	0e1b      	lsrs	r3, r3, #24
 800dec6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dece:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d001      	beq.n	800ded8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e02b      	b.n	800df30 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ded8:	4b17      	ldr	r3, [pc, #92]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800deda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dedc:	08db      	lsrs	r3, r3, #3
 800dede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dee2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	429a      	cmp	r2, r3
 800deec:	d01f      	beq.n	800df2e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800deee:	4b12      	ldr	r3, [pc, #72]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800def0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def2:	4a11      	ldr	r2, [pc, #68]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800def4:	f023 0301 	bic.w	r3, r3, #1
 800def8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800defa:	f7f4 fd5d 	bl	80029b8 <HAL_GetTick>
 800defe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800df00:	bf00      	nop
 800df02:	f7f4 fd59 	bl	80029b8 <HAL_GetTick>
 800df06:	4602      	mov	r2, r0
 800df08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d0f9      	beq.n	800df02 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800df0e:	4b0a      	ldr	r3, [pc, #40]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800df10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df12:	4b0a      	ldr	r3, [pc, #40]	@ (800df3c <HAL_RCC_OscConfig+0x8b0>)
 800df14:	4013      	ands	r3, r2
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800df1a:	00d2      	lsls	r2, r2, #3
 800df1c:	4906      	ldr	r1, [pc, #24]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800df1e:	4313      	orrs	r3, r2
 800df20:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800df22:	4b05      	ldr	r3, [pc, #20]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800df24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df26:	4a04      	ldr	r2, [pc, #16]	@ (800df38 <HAL_RCC_OscConfig+0x8ac>)
 800df28:	f043 0301 	orr.w	r3, r3, #1
 800df2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3730      	adds	r7, #48	@ 0x30
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	58024400 	.word	0x58024400
 800df3c:	ffff0007 	.word	0xffff0007

0800df40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d101      	bne.n	800df54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800df50:	2301      	movs	r3, #1
 800df52:	e19c      	b.n	800e28e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800df54:	4b8a      	ldr	r3, [pc, #552]	@ (800e180 <HAL_RCC_ClockConfig+0x240>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f003 030f 	and.w	r3, r3, #15
 800df5c:	683a      	ldr	r2, [r7, #0]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d910      	bls.n	800df84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df62:	4b87      	ldr	r3, [pc, #540]	@ (800e180 <HAL_RCC_ClockConfig+0x240>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f023 020f 	bic.w	r2, r3, #15
 800df6a:	4985      	ldr	r1, [pc, #532]	@ (800e180 <HAL_RCC_ClockConfig+0x240>)
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	4313      	orrs	r3, r2
 800df70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df72:	4b83      	ldr	r3, [pc, #524]	@ (800e180 <HAL_RCC_ClockConfig+0x240>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f003 030f 	and.w	r3, r3, #15
 800df7a:	683a      	ldr	r2, [r7, #0]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d001      	beq.n	800df84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e184      	b.n	800e28e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f003 0304 	and.w	r3, r3, #4
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d010      	beq.n	800dfb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	691a      	ldr	r2, [r3, #16]
 800df94:	4b7b      	ldr	r3, [pc, #492]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800df96:	699b      	ldr	r3, [r3, #24]
 800df98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d908      	bls.n	800dfb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dfa0:	4b78      	ldr	r3, [pc, #480]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800dfa2:	699b      	ldr	r3, [r3, #24]
 800dfa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	4975      	ldr	r1, [pc, #468]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f003 0308 	and.w	r3, r3, #8
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d010      	beq.n	800dfe0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	695a      	ldr	r2, [r3, #20]
 800dfc2:	4b70      	ldr	r3, [pc, #448]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800dfc4:	69db      	ldr	r3, [r3, #28]
 800dfc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d908      	bls.n	800dfe0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dfce:	4b6d      	ldr	r3, [pc, #436]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	695b      	ldr	r3, [r3, #20]
 800dfda:	496a      	ldr	r1, [pc, #424]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f003 0310 	and.w	r3, r3, #16
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d010      	beq.n	800e00e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	699a      	ldr	r2, [r3, #24]
 800dff0:	4b64      	ldr	r3, [pc, #400]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800dff2:	69db      	ldr	r3, [r3, #28]
 800dff4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d908      	bls.n	800e00e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dffc:	4b61      	ldr	r3, [pc, #388]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800dffe:	69db      	ldr	r3, [r3, #28]
 800e000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	699b      	ldr	r3, [r3, #24]
 800e008:	495e      	ldr	r1, [pc, #376]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e00a:	4313      	orrs	r3, r2
 800e00c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f003 0320 	and.w	r3, r3, #32
 800e016:	2b00      	cmp	r3, #0
 800e018:	d010      	beq.n	800e03c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	69da      	ldr	r2, [r3, #28]
 800e01e:	4b59      	ldr	r3, [pc, #356]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e020:	6a1b      	ldr	r3, [r3, #32]
 800e022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e026:	429a      	cmp	r2, r3
 800e028:	d908      	bls.n	800e03c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e02a:	4b56      	ldr	r3, [pc, #344]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	69db      	ldr	r3, [r3, #28]
 800e036:	4953      	ldr	r1, [pc, #332]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e038:	4313      	orrs	r3, r2
 800e03a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f003 0302 	and.w	r3, r3, #2
 800e044:	2b00      	cmp	r3, #0
 800e046:	d010      	beq.n	800e06a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	68da      	ldr	r2, [r3, #12]
 800e04c:	4b4d      	ldr	r3, [pc, #308]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	f003 030f 	and.w	r3, r3, #15
 800e054:	429a      	cmp	r2, r3
 800e056:	d908      	bls.n	800e06a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e058:	4b4a      	ldr	r3, [pc, #296]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e05a:	699b      	ldr	r3, [r3, #24]
 800e05c:	f023 020f 	bic.w	r2, r3, #15
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	4947      	ldr	r1, [pc, #284]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e066:	4313      	orrs	r3, r2
 800e068:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 0301 	and.w	r3, r3, #1
 800e072:	2b00      	cmp	r3, #0
 800e074:	d055      	beq.n	800e122 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e076:	4b43      	ldr	r3, [pc, #268]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e078:	699b      	ldr	r3, [r3, #24]
 800e07a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	4940      	ldr	r1, [pc, #256]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e084:	4313      	orrs	r3, r2
 800e086:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	d107      	bne.n	800e0a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e090:	4b3c      	ldr	r3, [pc, #240]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d121      	bne.n	800e0e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	e0f6      	b.n	800e28e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	2b03      	cmp	r3, #3
 800e0a6:	d107      	bne.n	800e0b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e0a8:	4b36      	ldr	r3, [pc, #216]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d115      	bne.n	800e0e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e0ea      	b.n	800e28e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d107      	bne.n	800e0d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e0c0:	4b30      	ldr	r3, [pc, #192]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d109      	bne.n	800e0e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e0de      	b.n	800e28e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e0d0:	4b2c      	ldr	r3, [pc, #176]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 0304 	and.w	r3, r3, #4
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d101      	bne.n	800e0e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e0d6      	b.n	800e28e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e0e0:	4b28      	ldr	r3, [pc, #160]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	f023 0207 	bic.w	r2, r3, #7
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	4925      	ldr	r1, [pc, #148]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0f2:	f7f4 fc61 	bl	80029b8 <HAL_GetTick>
 800e0f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0f8:	e00a      	b.n	800e110 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e0fa:	f7f4 fc5d 	bl	80029b8 <HAL_GetTick>
 800e0fe:	4602      	mov	r2, r0
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	1ad3      	subs	r3, r2, r3
 800e104:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e108:	4293      	cmp	r3, r2
 800e10a:	d901      	bls.n	800e110 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e10c:	2303      	movs	r3, #3
 800e10e:	e0be      	b.n	800e28e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e110:	4b1c      	ldr	r3, [pc, #112]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	00db      	lsls	r3, r3, #3
 800e11e:	429a      	cmp	r2, r3
 800e120:	d1eb      	bne.n	800e0fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f003 0302 	and.w	r3, r3, #2
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d010      	beq.n	800e150 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	68da      	ldr	r2, [r3, #12]
 800e132:	4b14      	ldr	r3, [pc, #80]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	f003 030f 	and.w	r3, r3, #15
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d208      	bcs.n	800e150 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e13e:	4b11      	ldr	r3, [pc, #68]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e140:	699b      	ldr	r3, [r3, #24]
 800e142:	f023 020f 	bic.w	r2, r3, #15
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	490e      	ldr	r1, [pc, #56]	@ (800e184 <HAL_RCC_ClockConfig+0x244>)
 800e14c:	4313      	orrs	r3, r2
 800e14e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e150:	4b0b      	ldr	r3, [pc, #44]	@ (800e180 <HAL_RCC_ClockConfig+0x240>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f003 030f 	and.w	r3, r3, #15
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d214      	bcs.n	800e188 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e15e:	4b08      	ldr	r3, [pc, #32]	@ (800e180 <HAL_RCC_ClockConfig+0x240>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f023 020f 	bic.w	r2, r3, #15
 800e166:	4906      	ldr	r1, [pc, #24]	@ (800e180 <HAL_RCC_ClockConfig+0x240>)
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	4313      	orrs	r3, r2
 800e16c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e16e:	4b04      	ldr	r3, [pc, #16]	@ (800e180 <HAL_RCC_ClockConfig+0x240>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f003 030f 	and.w	r3, r3, #15
 800e176:	683a      	ldr	r2, [r7, #0]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d005      	beq.n	800e188 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e086      	b.n	800e28e <HAL_RCC_ClockConfig+0x34e>
 800e180:	52002000 	.word	0x52002000
 800e184:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f003 0304 	and.w	r3, r3, #4
 800e190:	2b00      	cmp	r3, #0
 800e192:	d010      	beq.n	800e1b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	691a      	ldr	r2, [r3, #16]
 800e198:	4b3f      	ldr	r3, [pc, #252]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e19a:	699b      	ldr	r3, [r3, #24]
 800e19c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d208      	bcs.n	800e1b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e1a4:	4b3c      	ldr	r3, [pc, #240]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	4939      	ldr	r1, [pc, #228]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f003 0308 	and.w	r3, r3, #8
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d010      	beq.n	800e1e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	695a      	ldr	r2, [r3, #20]
 800e1c6:	4b34      	ldr	r3, [pc, #208]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e1c8:	69db      	ldr	r3, [r3, #28]
 800e1ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d208      	bcs.n	800e1e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e1d2:	4b31      	ldr	r3, [pc, #196]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e1d4:	69db      	ldr	r3, [r3, #28]
 800e1d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	695b      	ldr	r3, [r3, #20]
 800e1de:	492e      	ldr	r1, [pc, #184]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f003 0310 	and.w	r3, r3, #16
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d010      	beq.n	800e212 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	699a      	ldr	r2, [r3, #24]
 800e1f4:	4b28      	ldr	r3, [pc, #160]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e1f6:	69db      	ldr	r3, [r3, #28]
 800e1f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d208      	bcs.n	800e212 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e200:	4b25      	ldr	r3, [pc, #148]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e202:	69db      	ldr	r3, [r3, #28]
 800e204:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	699b      	ldr	r3, [r3, #24]
 800e20c:	4922      	ldr	r1, [pc, #136]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e20e:	4313      	orrs	r3, r2
 800e210:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f003 0320 	and.w	r3, r3, #32
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d010      	beq.n	800e240 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	69da      	ldr	r2, [r3, #28]
 800e222:	4b1d      	ldr	r3, [pc, #116]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d208      	bcs.n	800e240 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e22e:	4b1a      	ldr	r3, [pc, #104]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	69db      	ldr	r3, [r3, #28]
 800e23a:	4917      	ldr	r1, [pc, #92]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e23c:	4313      	orrs	r3, r2
 800e23e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e240:	f000 f834 	bl	800e2ac <HAL_RCC_GetSysClockFreq>
 800e244:	4602      	mov	r2, r0
 800e246:	4b14      	ldr	r3, [pc, #80]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	0a1b      	lsrs	r3, r3, #8
 800e24c:	f003 030f 	and.w	r3, r3, #15
 800e250:	4912      	ldr	r1, [pc, #72]	@ (800e29c <HAL_RCC_ClockConfig+0x35c>)
 800e252:	5ccb      	ldrb	r3, [r1, r3]
 800e254:	f003 031f 	and.w	r3, r3, #31
 800e258:	fa22 f303 	lsr.w	r3, r2, r3
 800e25c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e25e:	4b0e      	ldr	r3, [pc, #56]	@ (800e298 <HAL_RCC_ClockConfig+0x358>)
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	f003 030f 	and.w	r3, r3, #15
 800e266:	4a0d      	ldr	r2, [pc, #52]	@ (800e29c <HAL_RCC_ClockConfig+0x35c>)
 800e268:	5cd3      	ldrb	r3, [r2, r3]
 800e26a:	f003 031f 	and.w	r3, r3, #31
 800e26e:	693a      	ldr	r2, [r7, #16]
 800e270:	fa22 f303 	lsr.w	r3, r2, r3
 800e274:	4a0a      	ldr	r2, [pc, #40]	@ (800e2a0 <HAL_RCC_ClockConfig+0x360>)
 800e276:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e278:	4a0a      	ldr	r2, [pc, #40]	@ (800e2a4 <HAL_RCC_ClockConfig+0x364>)
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e27e:	4b0a      	ldr	r3, [pc, #40]	@ (800e2a8 <HAL_RCC_ClockConfig+0x368>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4618      	mov	r0, r3
 800e284:	f7f4 fb4e 	bl	8002924 <HAL_InitTick>
 800e288:	4603      	mov	r3, r0
 800e28a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3718      	adds	r7, #24
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	58024400 	.word	0x58024400
 800e29c:	08018b0c 	.word	0x08018b0c
 800e2a0:	24000218 	.word	0x24000218
 800e2a4:	24000214 	.word	0x24000214
 800e2a8:	2400021c 	.word	0x2400021c

0800e2ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b089      	sub	sp, #36	@ 0x24
 800e2b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e2b2:	4bb3      	ldr	r3, [pc, #716]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e2ba:	2b18      	cmp	r3, #24
 800e2bc:	f200 8155 	bhi.w	800e56a <HAL_RCC_GetSysClockFreq+0x2be>
 800e2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800e2c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c6:	bf00      	nop
 800e2c8:	0800e32d 	.word	0x0800e32d
 800e2cc:	0800e56b 	.word	0x0800e56b
 800e2d0:	0800e56b 	.word	0x0800e56b
 800e2d4:	0800e56b 	.word	0x0800e56b
 800e2d8:	0800e56b 	.word	0x0800e56b
 800e2dc:	0800e56b 	.word	0x0800e56b
 800e2e0:	0800e56b 	.word	0x0800e56b
 800e2e4:	0800e56b 	.word	0x0800e56b
 800e2e8:	0800e353 	.word	0x0800e353
 800e2ec:	0800e56b 	.word	0x0800e56b
 800e2f0:	0800e56b 	.word	0x0800e56b
 800e2f4:	0800e56b 	.word	0x0800e56b
 800e2f8:	0800e56b 	.word	0x0800e56b
 800e2fc:	0800e56b 	.word	0x0800e56b
 800e300:	0800e56b 	.word	0x0800e56b
 800e304:	0800e56b 	.word	0x0800e56b
 800e308:	0800e359 	.word	0x0800e359
 800e30c:	0800e56b 	.word	0x0800e56b
 800e310:	0800e56b 	.word	0x0800e56b
 800e314:	0800e56b 	.word	0x0800e56b
 800e318:	0800e56b 	.word	0x0800e56b
 800e31c:	0800e56b 	.word	0x0800e56b
 800e320:	0800e56b 	.word	0x0800e56b
 800e324:	0800e56b 	.word	0x0800e56b
 800e328:	0800e35f 	.word	0x0800e35f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e32c:	4b94      	ldr	r3, [pc, #592]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f003 0320 	and.w	r3, r3, #32
 800e334:	2b00      	cmp	r3, #0
 800e336:	d009      	beq.n	800e34c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e338:	4b91      	ldr	r3, [pc, #580]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	08db      	lsrs	r3, r3, #3
 800e33e:	f003 0303 	and.w	r3, r3, #3
 800e342:	4a90      	ldr	r2, [pc, #576]	@ (800e584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e344:	fa22 f303 	lsr.w	r3, r2, r3
 800e348:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e34a:	e111      	b.n	800e570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e34c:	4b8d      	ldr	r3, [pc, #564]	@ (800e584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e34e:	61bb      	str	r3, [r7, #24]
      break;
 800e350:	e10e      	b.n	800e570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e352:	4b8d      	ldr	r3, [pc, #564]	@ (800e588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e354:	61bb      	str	r3, [r7, #24]
      break;
 800e356:	e10b      	b.n	800e570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e358:	4b8c      	ldr	r3, [pc, #560]	@ (800e58c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e35a:	61bb      	str	r3, [r7, #24]
      break;
 800e35c:	e108      	b.n	800e570 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e35e:	4b88      	ldr	r3, [pc, #544]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e362:	f003 0303 	and.w	r3, r3, #3
 800e366:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e368:	4b85      	ldr	r3, [pc, #532]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e36c:	091b      	lsrs	r3, r3, #4
 800e36e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e372:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e374:	4b82      	ldr	r3, [pc, #520]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e378:	f003 0301 	and.w	r3, r3, #1
 800e37c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e37e:	4b80      	ldr	r3, [pc, #512]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e382:	08db      	lsrs	r3, r3, #3
 800e384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	fb02 f303 	mul.w	r3, r2, r3
 800e38e:	ee07 3a90 	vmov	s15, r3
 800e392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e396:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f000 80e1 	beq.w	800e564 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2b02      	cmp	r3, #2
 800e3a6:	f000 8083 	beq.w	800e4b0 <HAL_RCC_GetSysClockFreq+0x204>
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	f200 80a1 	bhi.w	800e4f4 <HAL_RCC_GetSysClockFreq+0x248>
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d003      	beq.n	800e3c0 <HAL_RCC_GetSysClockFreq+0x114>
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d056      	beq.n	800e46c <HAL_RCC_GetSysClockFreq+0x1c0>
 800e3be:	e099      	b.n	800e4f4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3c0:	4b6f      	ldr	r3, [pc, #444]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f003 0320 	and.w	r3, r3, #32
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d02d      	beq.n	800e428 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3cc:	4b6c      	ldr	r3, [pc, #432]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	08db      	lsrs	r3, r3, #3
 800e3d2:	f003 0303 	and.w	r3, r3, #3
 800e3d6:	4a6b      	ldr	r2, [pc, #428]	@ (800e584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800e3dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	ee07 3a90 	vmov	s15, r3
 800e3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	ee07 3a90 	vmov	s15, r3
 800e3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3f6:	4b62      	ldr	r3, [pc, #392]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3fe:	ee07 3a90 	vmov	s15, r3
 800e402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e406:	ed97 6a02 	vldr	s12, [r7, #8]
 800e40a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e422:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e426:	e087      	b.n	800e538 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	ee07 3a90 	vmov	s15, r3
 800e42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e432:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e594 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e43a:	4b51      	ldr	r3, [pc, #324]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e442:	ee07 3a90 	vmov	s15, r3
 800e446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e44a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e44e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e45a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e46a:	e065      	b.n	800e538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	ee07 3a90 	vmov	s15, r3
 800e472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e476:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e598 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e47e:	4b40      	ldr	r3, [pc, #256]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e486:	ee07 3a90 	vmov	s15, r3
 800e48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e48e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e492:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e49e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e4ae:	e043      	b.n	800e538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	ee07 3a90 	vmov	s15, r3
 800e4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e59c <HAL_RCC_GetSysClockFreq+0x2f0>
 800e4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4c2:	4b2f      	ldr	r3, [pc, #188]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4ca:	ee07 3a90 	vmov	s15, r3
 800e4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e4d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e4f2:	e021      	b.n	800e538 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	ee07 3a90 	vmov	s15, r3
 800e4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e598 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e506:	4b1e      	ldr	r3, [pc, #120]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e50e:	ee07 3a90 	vmov	s15, r3
 800e512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e516:	ed97 6a02 	vldr	s12, [r7, #8]
 800e51a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e536:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e538:	4b11      	ldr	r3, [pc, #68]	@ (800e580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e53a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e53c:	0a5b      	lsrs	r3, r3, #9
 800e53e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e542:	3301      	adds	r3, #1
 800e544:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	ee07 3a90 	vmov	s15, r3
 800e54c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e550:	edd7 6a07 	vldr	s13, [r7, #28]
 800e554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e55c:	ee17 3a90 	vmov	r3, s15
 800e560:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e562:	e005      	b.n	800e570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e564:	2300      	movs	r3, #0
 800e566:	61bb      	str	r3, [r7, #24]
      break;
 800e568:	e002      	b.n	800e570 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e56a:	4b07      	ldr	r3, [pc, #28]	@ (800e588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e56c:	61bb      	str	r3, [r7, #24]
      break;
 800e56e:	bf00      	nop
  }

  return sysclockfreq;
 800e570:	69bb      	ldr	r3, [r7, #24]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3724      	adds	r7, #36	@ 0x24
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr
 800e57e:	bf00      	nop
 800e580:	58024400 	.word	0x58024400
 800e584:	03d09000 	.word	0x03d09000
 800e588:	003d0900 	.word	0x003d0900
 800e58c:	017d7840 	.word	0x017d7840
 800e590:	46000000 	.word	0x46000000
 800e594:	4c742400 	.word	0x4c742400
 800e598:	4a742400 	.word	0x4a742400
 800e59c:	4bbebc20 	.word	0x4bbebc20

0800e5a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e5a6:	f7ff fe81 	bl	800e2ac <HAL_RCC_GetSysClockFreq>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	4b10      	ldr	r3, [pc, #64]	@ (800e5f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800e5ae:	699b      	ldr	r3, [r3, #24]
 800e5b0:	0a1b      	lsrs	r3, r3, #8
 800e5b2:	f003 030f 	and.w	r3, r3, #15
 800e5b6:	490f      	ldr	r1, [pc, #60]	@ (800e5f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800e5b8:	5ccb      	ldrb	r3, [r1, r3]
 800e5ba:	f003 031f 	and.w	r3, r3, #31
 800e5be:	fa22 f303 	lsr.w	r3, r2, r3
 800e5c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e5c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e5f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800e5c6:	699b      	ldr	r3, [r3, #24]
 800e5c8:	f003 030f 	and.w	r3, r3, #15
 800e5cc:	4a09      	ldr	r2, [pc, #36]	@ (800e5f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800e5ce:	5cd3      	ldrb	r3, [r2, r3]
 800e5d0:	f003 031f 	and.w	r3, r3, #31
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e5da:	4a07      	ldr	r2, [pc, #28]	@ (800e5f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800e5dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e5de:	4a07      	ldr	r2, [pc, #28]	@ (800e5fc <HAL_RCC_GetHCLKFreq+0x5c>)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e5e4:	4b04      	ldr	r3, [pc, #16]	@ (800e5f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	58024400 	.word	0x58024400
 800e5f4:	08018b0c 	.word	0x08018b0c
 800e5f8:	24000218 	.word	0x24000218
 800e5fc:	24000214 	.word	0x24000214

0800e600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e604:	f7ff ffcc 	bl	800e5a0 <HAL_RCC_GetHCLKFreq>
 800e608:	4602      	mov	r2, r0
 800e60a:	4b06      	ldr	r3, [pc, #24]	@ (800e624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e60c:	69db      	ldr	r3, [r3, #28]
 800e60e:	091b      	lsrs	r3, r3, #4
 800e610:	f003 0307 	and.w	r3, r3, #7
 800e614:	4904      	ldr	r1, [pc, #16]	@ (800e628 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e616:	5ccb      	ldrb	r3, [r1, r3]
 800e618:	f003 031f 	and.w	r3, r3, #31
 800e61c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e620:	4618      	mov	r0, r3
 800e622:	bd80      	pop	{r7, pc}
 800e624:	58024400 	.word	0x58024400
 800e628:	08018b0c 	.word	0x08018b0c

0800e62c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e630:	f7ff ffb6 	bl	800e5a0 <HAL_RCC_GetHCLKFreq>
 800e634:	4602      	mov	r2, r0
 800e636:	4b06      	ldr	r3, [pc, #24]	@ (800e650 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e638:	69db      	ldr	r3, [r3, #28]
 800e63a:	0a1b      	lsrs	r3, r3, #8
 800e63c:	f003 0307 	and.w	r3, r3, #7
 800e640:	4904      	ldr	r1, [pc, #16]	@ (800e654 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e642:	5ccb      	ldrb	r3, [r1, r3]
 800e644:	f003 031f 	and.w	r3, r3, #31
 800e648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	58024400 	.word	0x58024400
 800e654:	08018b0c 	.word	0x08018b0c

0800e658 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e65c:	b0ca      	sub	sp, #296	@ 0x128
 800e65e:	af00      	add	r7, sp, #0
 800e660:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e664:	2300      	movs	r3, #0
 800e666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e66a:	2300      	movs	r3, #0
 800e66c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e67c:	2500      	movs	r5, #0
 800e67e:	ea54 0305 	orrs.w	r3, r4, r5
 800e682:	d049      	beq.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e68a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e68e:	d02f      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e690:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e694:	d828      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e69a:	d01a      	beq.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e69c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e6a0:	d822      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d003      	beq.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e6a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e6aa:	d007      	beq.n	800e6bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e6ac:	e01c      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6ae:	4bb8      	ldr	r3, [pc, #736]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6b2:	4ab7      	ldr	r2, [pc, #732]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e6b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e6ba:	e01a      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	2102      	movs	r1, #2
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f002 fb61 	bl	8010d8c <RCCEx_PLL2_Config>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e6d0:	e00f      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6d6:	3328      	adds	r3, #40	@ 0x28
 800e6d8:	2102      	movs	r1, #2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f002 fc08 	bl	8010ef0 <RCCEx_PLL3_Config>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e6e6:	e004      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e6ee:	e000      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10a      	bne.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e6fa:	4ba5      	ldr	r3, [pc, #660]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e708:	4aa1      	ldr	r2, [pc, #644]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e70a:	430b      	orrs	r3, r1
 800e70c:	6513      	str	r3, [r2, #80]	@ 0x50
 800e70e:	e003      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e724:	f04f 0900 	mov.w	r9, #0
 800e728:	ea58 0309 	orrs.w	r3, r8, r9
 800e72c:	d047      	beq.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e734:	2b04      	cmp	r3, #4
 800e736:	d82a      	bhi.n	800e78e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e738:	a201      	add	r2, pc, #4	@ (adr r2, 800e740 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73e:	bf00      	nop
 800e740:	0800e755 	.word	0x0800e755
 800e744:	0800e763 	.word	0x0800e763
 800e748:	0800e779 	.word	0x0800e779
 800e74c:	0800e797 	.word	0x0800e797
 800e750:	0800e797 	.word	0x0800e797
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e754:	4b8e      	ldr	r3, [pc, #568]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e758:	4a8d      	ldr	r2, [pc, #564]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e75a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e75e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e760:	e01a      	b.n	800e798 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e766:	3308      	adds	r3, #8
 800e768:	2100      	movs	r1, #0
 800e76a:	4618      	mov	r0, r3
 800e76c:	f002 fb0e 	bl	8010d8c <RCCEx_PLL2_Config>
 800e770:	4603      	mov	r3, r0
 800e772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e776:	e00f      	b.n	800e798 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e77c:	3328      	adds	r3, #40	@ 0x28
 800e77e:	2100      	movs	r1, #0
 800e780:	4618      	mov	r0, r3
 800e782:	f002 fbb5 	bl	8010ef0 <RCCEx_PLL3_Config>
 800e786:	4603      	mov	r3, r0
 800e788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e78c:	e004      	b.n	800e798 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e78e:	2301      	movs	r3, #1
 800e790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e794:	e000      	b.n	800e798 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e796:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10a      	bne.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e7a0:	4b7b      	ldr	r3, [pc, #492]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7a4:	f023 0107 	bic.w	r1, r3, #7
 800e7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7ae:	4a78      	ldr	r2, [pc, #480]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e7b0:	430b      	orrs	r3, r1
 800e7b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800e7b4:	e003      	b.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800e7ca:	f04f 0b00 	mov.w	fp, #0
 800e7ce:	ea5a 030b 	orrs.w	r3, sl, fp
 800e7d2:	d04c      	beq.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7de:	d030      	beq.n	800e842 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e7e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7e4:	d829      	bhi.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e7e6:	2bc0      	cmp	r3, #192	@ 0xc0
 800e7e8:	d02d      	beq.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e7ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800e7ec:	d825      	bhi.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e7ee:	2b80      	cmp	r3, #128	@ 0x80
 800e7f0:	d018      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e7f2:	2b80      	cmp	r3, #128	@ 0x80
 800e7f4:	d821      	bhi.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d002      	beq.n	800e800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e7fa:	2b40      	cmp	r3, #64	@ 0x40
 800e7fc:	d007      	beq.n	800e80e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e7fe:	e01c      	b.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e800:	4b63      	ldr	r3, [pc, #396]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e804:	4a62      	ldr	r2, [pc, #392]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e80a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e80c:	e01c      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e812:	3308      	adds	r3, #8
 800e814:	2100      	movs	r1, #0
 800e816:	4618      	mov	r0, r3
 800e818:	f002 fab8 	bl	8010d8c <RCCEx_PLL2_Config>
 800e81c:	4603      	mov	r3, r0
 800e81e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e822:	e011      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e828:	3328      	adds	r3, #40	@ 0x28
 800e82a:	2100      	movs	r1, #0
 800e82c:	4618      	mov	r0, r3
 800e82e:	f002 fb5f 	bl	8010ef0 <RCCEx_PLL3_Config>
 800e832:	4603      	mov	r3, r0
 800e834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e838:	e006      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e840:	e002      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e842:	bf00      	nop
 800e844:	e000      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e846:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10a      	bne.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e850:	4b4f      	ldr	r3, [pc, #316]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e854:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e85c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e85e:	4a4c      	ldr	r2, [pc, #304]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e860:	430b      	orrs	r3, r1
 800e862:	6513      	str	r3, [r2, #80]	@ 0x50
 800e864:	e003      	b.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e86a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e876:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800e87a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800e87e:	2300      	movs	r3, #0
 800e880:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e884:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800e888:	460b      	mov	r3, r1
 800e88a:	4313      	orrs	r3, r2
 800e88c:	d053      	beq.n	800e936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e892:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e896:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e89a:	d035      	beq.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e89c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e8a0:	d82e      	bhi.n	800e900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e8a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e8a6:	d031      	beq.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e8a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e8ac:	d828      	bhi.n	800e900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e8ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e8b2:	d01a      	beq.n	800e8ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e8b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e8b8:	d822      	bhi.n	800e900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d003      	beq.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e8be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e8c2:	d007      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e8c4:	e01c      	b.n	800e900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8c6:	4b32      	ldr	r3, [pc, #200]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ca:	4a31      	ldr	r2, [pc, #196]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e8cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e8d2:	e01c      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8d8:	3308      	adds	r3, #8
 800e8da:	2100      	movs	r1, #0
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f002 fa55 	bl	8010d8c <RCCEx_PLL2_Config>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e8e8:	e011      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8ee:	3328      	adds	r3, #40	@ 0x28
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f002 fafc 	bl	8010ef0 <RCCEx_PLL3_Config>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e8fe:	e006      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e900:	2301      	movs	r3, #1
 800e902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e906:	e002      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e908:	bf00      	nop
 800e90a:	e000      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e90c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e90e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10b      	bne.n	800e92e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e916:	4b1e      	ldr	r3, [pc, #120]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e91a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e926:	4a1a      	ldr	r2, [pc, #104]	@ (800e990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e928:	430b      	orrs	r3, r1
 800e92a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e92c:	e003      	b.n	800e936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e92e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e942:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e946:	2300      	movs	r3, #0
 800e948:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e94c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800e950:	460b      	mov	r3, r1
 800e952:	4313      	orrs	r3, r2
 800e954:	d056      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e95a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e95e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e962:	d038      	beq.n	800e9d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e964:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e968:	d831      	bhi.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e96a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e96e:	d034      	beq.n	800e9da <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e970:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e974:	d82b      	bhi.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e976:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e97a:	d01d      	beq.n	800e9b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e97c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e980:	d825      	bhi.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e982:	2b00      	cmp	r3, #0
 800e984:	d006      	beq.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e98a:	d00a      	beq.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e98c:	e01f      	b.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e98e:	bf00      	nop
 800e990:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e994:	4ba2      	ldr	r3, [pc, #648]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e998:	4aa1      	ldr	r2, [pc, #644]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e99a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e99e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e9a0:	e01c      	b.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9a6:	3308      	adds	r3, #8
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f002 f9ee 	bl	8010d8c <RCCEx_PLL2_Config>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e9b6:	e011      	b.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9bc:	3328      	adds	r3, #40	@ 0x28
 800e9be:	2100      	movs	r1, #0
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f002 fa95 	bl	8010ef0 <RCCEx_PLL3_Config>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e9cc:	e006      	b.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e9d4:	e002      	b.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e9d6:	bf00      	nop
 800e9d8:	e000      	b.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e9da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10b      	bne.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e9e4:	4b8e      	ldr	r3, [pc, #568]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e9e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e9f4:	4a8a      	ldr	r2, [pc, #552]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e9f6:	430b      	orrs	r3, r1
 800e9f8:	6593      	str	r3, [r2, #88]	@ 0x58
 800e9fa:	e003      	b.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ea04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ea10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ea14:	2300      	movs	r3, #0
 800ea16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ea1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ea1e:	460b      	mov	r3, r1
 800ea20:	4313      	orrs	r3, r2
 800ea22:	d03a      	beq.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ea24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea2a:	2b30      	cmp	r3, #48	@ 0x30
 800ea2c:	d01f      	beq.n	800ea6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ea2e:	2b30      	cmp	r3, #48	@ 0x30
 800ea30:	d819      	bhi.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ea32:	2b20      	cmp	r3, #32
 800ea34:	d00c      	beq.n	800ea50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ea36:	2b20      	cmp	r3, #32
 800ea38:	d815      	bhi.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d019      	beq.n	800ea72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ea3e:	2b10      	cmp	r3, #16
 800ea40:	d111      	bne.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea42:	4b77      	ldr	r3, [pc, #476]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ea44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea46:	4a76      	ldr	r2, [pc, #472]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ea48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ea4e:	e011      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ea50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea54:	3308      	adds	r3, #8
 800ea56:	2102      	movs	r1, #2
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f002 f997 	bl	8010d8c <RCCEx_PLL2_Config>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ea64:	e006      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ea6c:	e002      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ea6e:	bf00      	nop
 800ea70:	e000      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ea72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ea7c:	4b68      	ldr	r3, [pc, #416]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ea7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ea84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea8a:	4a65      	ldr	r2, [pc, #404]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ea8c:	430b      	orrs	r3, r1
 800ea8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ea90:	e003      	b.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ea9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800eaa6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800eab0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800eab4:	460b      	mov	r3, r1
 800eab6:	4313      	orrs	r3, r2
 800eab8:	d051      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800eaba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eabe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eac4:	d035      	beq.n	800eb32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800eac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eaca:	d82e      	bhi.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800eacc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ead0:	d031      	beq.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ead2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ead6:	d828      	bhi.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ead8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eadc:	d01a      	beq.n	800eb14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800eade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eae2:	d822      	bhi.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d003      	beq.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800eae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eaec:	d007      	beq.n	800eafe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800eaee:	e01c      	b.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eaf0:	4b4b      	ldr	r3, [pc, #300]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf4:	4a4a      	ldr	r2, [pc, #296]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eaf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eafa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800eafc:	e01c      	b.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb02:	3308      	adds	r3, #8
 800eb04:	2100      	movs	r1, #0
 800eb06:	4618      	mov	r0, r3
 800eb08:	f002 f940 	bl	8010d8c <RCCEx_PLL2_Config>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800eb12:	e011      	b.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb18:	3328      	adds	r3, #40	@ 0x28
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f002 f9e7 	bl	8010ef0 <RCCEx_PLL3_Config>
 800eb22:	4603      	mov	r3, r0
 800eb24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800eb28:	e006      	b.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb30:	e002      	b.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800eb32:	bf00      	nop
 800eb34:	e000      	b.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800eb36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10a      	bne.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800eb40:	4b37      	ldr	r3, [pc, #220]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eb42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800eb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb4e:	4a34      	ldr	r2, [pc, #208]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eb50:	430b      	orrs	r3, r1
 800eb52:	6513      	str	r3, [r2, #80]	@ 0x50
 800eb54:	e003      	b.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800eb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb66:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800eb6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800eb6e:	2300      	movs	r3, #0
 800eb70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800eb74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800eb78:	460b      	mov	r3, r1
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	d056      	beq.n	800ec2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800eb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800eb88:	d033      	beq.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800eb8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800eb8e:	d82c      	bhi.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800eb90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eb94:	d02f      	beq.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800eb96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eb9a:	d826      	bhi.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800eb9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800eba0:	d02b      	beq.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800eba2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800eba6:	d820      	bhi.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800eba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ebac:	d012      	beq.n	800ebd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ebae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ebb2:	d81a      	bhi.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d022      	beq.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ebb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebbc:	d115      	bne.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ebbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebc2:	3308      	adds	r3, #8
 800ebc4:	2101      	movs	r1, #1
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f002 f8e0 	bl	8010d8c <RCCEx_PLL2_Config>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ebd2:	e015      	b.n	800ec00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebd8:	3328      	adds	r3, #40	@ 0x28
 800ebda:	2101      	movs	r1, #1
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f002 f987 	bl	8010ef0 <RCCEx_PLL3_Config>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ebe8:	e00a      	b.n	800ec00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebea:	2301      	movs	r3, #1
 800ebec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ebf0:	e006      	b.n	800ec00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ebf2:	bf00      	nop
 800ebf4:	e004      	b.n	800ec00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ebf6:	bf00      	nop
 800ebf8:	e002      	b.n	800ec00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ebfa:	bf00      	nop
 800ebfc:	e000      	b.n	800ec00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ebfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d10d      	bne.n	800ec24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ec08:	4b05      	ldr	r3, [pc, #20]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ec10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec16:	4a02      	ldr	r2, [pc, #8]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec18:	430b      	orrs	r3, r1
 800ec1a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ec1c:	e006      	b.n	800ec2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ec1e:	bf00      	nop
 800ec20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ec2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ec38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ec42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ec46:	460b      	mov	r3, r1
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	d055      	beq.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ec4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ec54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec58:	d033      	beq.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ec5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec5e:	d82c      	bhi.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ec60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec64:	d02f      	beq.n	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ec66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec6a:	d826      	bhi.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ec6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ec70:	d02b      	beq.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ec72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ec76:	d820      	bhi.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ec78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec7c:	d012      	beq.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ec7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec82:	d81a      	bhi.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d022      	beq.n	800ecce <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ec88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec8c:	d115      	bne.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ec8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec92:	3308      	adds	r3, #8
 800ec94:	2101      	movs	r1, #1
 800ec96:	4618      	mov	r0, r3
 800ec98:	f002 f878 	bl	8010d8c <RCCEx_PLL2_Config>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800eca2:	e015      	b.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eca8:	3328      	adds	r3, #40	@ 0x28
 800ecaa:	2101      	movs	r1, #1
 800ecac:	4618      	mov	r0, r3
 800ecae:	f002 f91f 	bl	8010ef0 <RCCEx_PLL3_Config>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ecb8:	e00a      	b.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ecc0:	e006      	b.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ecc2:	bf00      	nop
 800ecc4:	e004      	b.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ecc6:	bf00      	nop
 800ecc8:	e002      	b.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ecca:	bf00      	nop
 800eccc:	e000      	b.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ecce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d10b      	bne.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ecd8:	4ba3      	ldr	r3, [pc, #652]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ecda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecdc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ece0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ece4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ece8:	4a9f      	ldr	r2, [pc, #636]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ecea:	430b      	orrs	r3, r1
 800ecec:	6593      	str	r3, [r2, #88]	@ 0x58
 800ecee:	e003      	b.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ecf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed00:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ed04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ed08:	2300      	movs	r3, #0
 800ed0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ed0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ed12:	460b      	mov	r3, r1
 800ed14:	4313      	orrs	r3, r2
 800ed16:	d037      	beq.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ed18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed22:	d00e      	beq.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ed24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed28:	d816      	bhi.n	800ed58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d018      	beq.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ed2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed32:	d111      	bne.n	800ed58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed34:	4b8c      	ldr	r3, [pc, #560]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed38:	4a8b      	ldr	r2, [pc, #556]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ed40:	e00f      	b.n	800ed62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ed42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed46:	3308      	adds	r3, #8
 800ed48:	2101      	movs	r1, #1
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f002 f81e 	bl	8010d8c <RCCEx_PLL2_Config>
 800ed50:	4603      	mov	r3, r0
 800ed52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ed56:	e004      	b.n	800ed62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ed5e:	e000      	b.n	800ed62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ed60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10a      	bne.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ed6a:	4b7f      	ldr	r3, [pc, #508]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed6e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ed72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed78:	4a7b      	ldr	r2, [pc, #492]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed7a:	430b      	orrs	r3, r1
 800ed7c:	6513      	str	r3, [r2, #80]	@ 0x50
 800ed7e:	e003      	b.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ed88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed90:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ed94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ed9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800eda2:	460b      	mov	r3, r1
 800eda4:	4313      	orrs	r3, r2
 800eda6:	d039      	beq.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800eda8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800edae:	2b03      	cmp	r3, #3
 800edb0:	d81c      	bhi.n	800edec <HAL_RCCEx_PeriphCLKConfig+0x794>
 800edb2:	a201      	add	r2, pc, #4	@ (adr r2, 800edb8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800edb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb8:	0800edf5 	.word	0x0800edf5
 800edbc:	0800edc9 	.word	0x0800edc9
 800edc0:	0800edd7 	.word	0x0800edd7
 800edc4:	0800edf5 	.word	0x0800edf5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edc8:	4b67      	ldr	r3, [pc, #412]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800edca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edcc:	4a66      	ldr	r2, [pc, #408]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800edce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800edd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800edd4:	e00f      	b.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800edd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edda:	3308      	adds	r3, #8
 800eddc:	2102      	movs	r1, #2
 800edde:	4618      	mov	r0, r3
 800ede0:	f001 ffd4 	bl	8010d8c <RCCEx_PLL2_Config>
 800ede4:	4603      	mov	r3, r0
 800ede6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800edea:	e004      	b.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800edf2:	e000      	b.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800edf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10a      	bne.n	800ee14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800edfe:	4b5a      	ldr	r3, [pc, #360]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ee00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee02:	f023 0103 	bic.w	r1, r3, #3
 800ee06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee0c:	4a56      	ldr	r2, [pc, #344]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ee0e:	430b      	orrs	r3, r1
 800ee10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ee12:	e003      	b.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ee1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee24:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ee28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ee32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ee36:	460b      	mov	r3, r1
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	f000 809f 	beq.w	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ee3e:	4b4b      	ldr	r3, [pc, #300]	@ (800ef6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	4a4a      	ldr	r2, [pc, #296]	@ (800ef6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ee44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ee48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ee4a:	f7f3 fdb5 	bl	80029b8 <HAL_GetTick>
 800ee4e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ee52:	e00b      	b.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee54:	f7f3 fdb0 	bl	80029b8 <HAL_GetTick>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	2b64      	cmp	r3, #100	@ 0x64
 800ee62:	d903      	bls.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ee64:	2303      	movs	r3, #3
 800ee66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ee6a:	e005      	b.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ee6c:	4b3f      	ldr	r3, [pc, #252]	@ (800ef6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d0ed      	beq.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ee78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d179      	bne.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ee80:	4b39      	ldr	r3, [pc, #228]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ee82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ee84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ee8c:	4053      	eors	r3, r2
 800ee8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d015      	beq.n	800eec2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ee96:	4b34      	ldr	r3, [pc, #208]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ee98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800eea2:	4b31      	ldr	r3, [pc, #196]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eea6:	4a30      	ldr	r2, [pc, #192]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eeac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800eeae:	4b2e      	ldr	r3, [pc, #184]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eeb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eeb2:	4a2d      	ldr	r2, [pc, #180]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eeb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eeb8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800eeba:	4a2b      	ldr	r2, [pc, #172]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800eec0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800eec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eec6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800eeca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eece:	d118      	bne.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eed0:	f7f3 fd72 	bl	80029b8 <HAL_GetTick>
 800eed4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eed8:	e00d      	b.n	800eef6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eeda:	f7f3 fd6d 	bl	80029b8 <HAL_GetTick>
 800eede:	4602      	mov	r2, r0
 800eee0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800eee4:	1ad2      	subs	r2, r2, r3
 800eee6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d903      	bls.n	800eef6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800eeee:	2303      	movs	r3, #3
 800eef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800eef4:	e005      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eef6:	4b1c      	ldr	r3, [pc, #112]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eefa:	f003 0302 	and.w	r3, r3, #2
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d0eb      	beq.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ef02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d129      	bne.n	800ef5e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ef0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ef12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ef16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef1a:	d10e      	bne.n	800ef3a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ef1c:	4b12      	ldr	r3, [pc, #72]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ef24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ef2c:	091a      	lsrs	r2, r3, #4
 800ef2e:	4b10      	ldr	r3, [pc, #64]	@ (800ef70 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ef30:	4013      	ands	r3, r2
 800ef32:	4a0d      	ldr	r2, [pc, #52]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef34:	430b      	orrs	r3, r1
 800ef36:	6113      	str	r3, [r2, #16]
 800ef38:	e005      	b.n	800ef46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ef3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	4a0a      	ldr	r2, [pc, #40]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ef44:	6113      	str	r3, [r2, #16]
 800ef46:	4b08      	ldr	r3, [pc, #32]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ef4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ef52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef56:	4a04      	ldr	r2, [pc, #16]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef58:	430b      	orrs	r3, r1
 800ef5a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef5c:	e00e      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ef5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ef66:	e009      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ef68:	58024400 	.word	0x58024400
 800ef6c:	58024800 	.word	0x58024800
 800ef70:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ef7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef84:	f002 0301 	and.w	r3, r2, #1
 800ef88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ef92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ef96:	460b      	mov	r3, r1
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	f000 8089 	beq.w	800f0b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ef9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efa4:	2b28      	cmp	r3, #40	@ 0x28
 800efa6:	d86b      	bhi.n	800f080 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800efa8:	a201      	add	r2, pc, #4	@ (adr r2, 800efb0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800efaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efae:	bf00      	nop
 800efb0:	0800f089 	.word	0x0800f089
 800efb4:	0800f081 	.word	0x0800f081
 800efb8:	0800f081 	.word	0x0800f081
 800efbc:	0800f081 	.word	0x0800f081
 800efc0:	0800f081 	.word	0x0800f081
 800efc4:	0800f081 	.word	0x0800f081
 800efc8:	0800f081 	.word	0x0800f081
 800efcc:	0800f081 	.word	0x0800f081
 800efd0:	0800f055 	.word	0x0800f055
 800efd4:	0800f081 	.word	0x0800f081
 800efd8:	0800f081 	.word	0x0800f081
 800efdc:	0800f081 	.word	0x0800f081
 800efe0:	0800f081 	.word	0x0800f081
 800efe4:	0800f081 	.word	0x0800f081
 800efe8:	0800f081 	.word	0x0800f081
 800efec:	0800f081 	.word	0x0800f081
 800eff0:	0800f06b 	.word	0x0800f06b
 800eff4:	0800f081 	.word	0x0800f081
 800eff8:	0800f081 	.word	0x0800f081
 800effc:	0800f081 	.word	0x0800f081
 800f000:	0800f081 	.word	0x0800f081
 800f004:	0800f081 	.word	0x0800f081
 800f008:	0800f081 	.word	0x0800f081
 800f00c:	0800f081 	.word	0x0800f081
 800f010:	0800f089 	.word	0x0800f089
 800f014:	0800f081 	.word	0x0800f081
 800f018:	0800f081 	.word	0x0800f081
 800f01c:	0800f081 	.word	0x0800f081
 800f020:	0800f081 	.word	0x0800f081
 800f024:	0800f081 	.word	0x0800f081
 800f028:	0800f081 	.word	0x0800f081
 800f02c:	0800f081 	.word	0x0800f081
 800f030:	0800f089 	.word	0x0800f089
 800f034:	0800f081 	.word	0x0800f081
 800f038:	0800f081 	.word	0x0800f081
 800f03c:	0800f081 	.word	0x0800f081
 800f040:	0800f081 	.word	0x0800f081
 800f044:	0800f081 	.word	0x0800f081
 800f048:	0800f081 	.word	0x0800f081
 800f04c:	0800f081 	.word	0x0800f081
 800f050:	0800f089 	.word	0x0800f089
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f058:	3308      	adds	r3, #8
 800f05a:	2101      	movs	r1, #1
 800f05c:	4618      	mov	r0, r3
 800f05e:	f001 fe95 	bl	8010d8c <RCCEx_PLL2_Config>
 800f062:	4603      	mov	r3, r0
 800f064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f068:	e00f      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f06e:	3328      	adds	r3, #40	@ 0x28
 800f070:	2101      	movs	r1, #1
 800f072:	4618      	mov	r0, r3
 800f074:	f001 ff3c 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f078:	4603      	mov	r3, r0
 800f07a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f07e:	e004      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f080:	2301      	movs	r3, #1
 800f082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f086:	e000      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f08a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d10a      	bne.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f092:	4bbf      	ldr	r3, [pc, #764]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f096:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800f09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f09e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f0a0:	4abb      	ldr	r2, [pc, #748]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f0a2:	430b      	orrs	r3, r1
 800f0a4:	6553      	str	r3, [r2, #84]	@ 0x54
 800f0a6:	e003      	b.n	800f0b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	f002 0302 	and.w	r3, r2, #2
 800f0bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f0c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	d041      	beq.n	800f154 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0d6:	2b05      	cmp	r3, #5
 800f0d8:	d824      	bhi.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f0da:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e0:	0800f12d 	.word	0x0800f12d
 800f0e4:	0800f0f9 	.word	0x0800f0f9
 800f0e8:	0800f10f 	.word	0x0800f10f
 800f0ec:	0800f12d 	.word	0x0800f12d
 800f0f0:	0800f12d 	.word	0x0800f12d
 800f0f4:	0800f12d 	.word	0x0800f12d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0fc:	3308      	adds	r3, #8
 800f0fe:	2101      	movs	r1, #1
 800f100:	4618      	mov	r0, r3
 800f102:	f001 fe43 	bl	8010d8c <RCCEx_PLL2_Config>
 800f106:	4603      	mov	r3, r0
 800f108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f10c:	e00f      	b.n	800f12e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f112:	3328      	adds	r3, #40	@ 0x28
 800f114:	2101      	movs	r1, #1
 800f116:	4618      	mov	r0, r3
 800f118:	f001 feea 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f11c:	4603      	mov	r3, r0
 800f11e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f122:	e004      	b.n	800f12e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f124:	2301      	movs	r3, #1
 800f126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f12a:	e000      	b.n	800f12e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f12e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f132:	2b00      	cmp	r3, #0
 800f134:	d10a      	bne.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f136:	4b96      	ldr	r3, [pc, #600]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f13a:	f023 0107 	bic.w	r1, r3, #7
 800f13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f144:	4a92      	ldr	r2, [pc, #584]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f146:	430b      	orrs	r3, r1
 800f148:	6553      	str	r3, [r2, #84]	@ 0x54
 800f14a:	e003      	b.n	800f154 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f14c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	f002 0304 	and.w	r3, r2, #4
 800f160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f164:	2300      	movs	r3, #0
 800f166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f16a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800f16e:	460b      	mov	r3, r1
 800f170:	4313      	orrs	r3, r2
 800f172:	d044      	beq.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f17c:	2b05      	cmp	r3, #5
 800f17e:	d825      	bhi.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f180:	a201      	add	r2, pc, #4	@ (adr r2, 800f188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f186:	bf00      	nop
 800f188:	0800f1d5 	.word	0x0800f1d5
 800f18c:	0800f1a1 	.word	0x0800f1a1
 800f190:	0800f1b7 	.word	0x0800f1b7
 800f194:	0800f1d5 	.word	0x0800f1d5
 800f198:	0800f1d5 	.word	0x0800f1d5
 800f19c:	0800f1d5 	.word	0x0800f1d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1a4:	3308      	adds	r3, #8
 800f1a6:	2101      	movs	r1, #1
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f001 fdef 	bl	8010d8c <RCCEx_PLL2_Config>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f1b4:	e00f      	b.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1ba:	3328      	adds	r3, #40	@ 0x28
 800f1bc:	2101      	movs	r1, #1
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f001 fe96 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f1ca:	e004      	b.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f1d2:	e000      	b.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f1d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10b      	bne.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f1de:	4b6c      	ldr	r3, [pc, #432]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f1e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1e2:	f023 0107 	bic.w	r1, r3, #7
 800f1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1ee:	4a68      	ldr	r2, [pc, #416]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f1f0:	430b      	orrs	r3, r1
 800f1f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800f1f4:	e003      	b.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	f002 0320 	and.w	r3, r2, #32
 800f20a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f20e:	2300      	movs	r3, #0
 800f210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f218:	460b      	mov	r3, r1
 800f21a:	4313      	orrs	r3, r2
 800f21c:	d055      	beq.n	800f2ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f22a:	d033      	beq.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f22c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f230:	d82c      	bhi.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f236:	d02f      	beq.n	800f298 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f23c:	d826      	bhi.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f23e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f242:	d02b      	beq.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f244:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f248:	d820      	bhi.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f24a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f24e:	d012      	beq.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f254:	d81a      	bhi.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f256:	2b00      	cmp	r3, #0
 800f258:	d022      	beq.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f25a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f25e:	d115      	bne.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f264:	3308      	adds	r3, #8
 800f266:	2100      	movs	r1, #0
 800f268:	4618      	mov	r0, r3
 800f26a:	f001 fd8f 	bl	8010d8c <RCCEx_PLL2_Config>
 800f26e:	4603      	mov	r3, r0
 800f270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f274:	e015      	b.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f27a:	3328      	adds	r3, #40	@ 0x28
 800f27c:	2102      	movs	r1, #2
 800f27e:	4618      	mov	r0, r3
 800f280:	f001 fe36 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f284:	4603      	mov	r3, r0
 800f286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f28a:	e00a      	b.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f292:	e006      	b.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f294:	bf00      	nop
 800f296:	e004      	b.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f298:	bf00      	nop
 800f29a:	e002      	b.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f29c:	bf00      	nop
 800f29e:	e000      	b.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f2a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10b      	bne.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f2aa:	4b39      	ldr	r3, [pc, #228]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f2ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2ba:	4a35      	ldr	r2, [pc, #212]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f2bc:	430b      	orrs	r3, r1
 800f2be:	6553      	str	r3, [r2, #84]	@ 0x54
 800f2c0:	e003      	b.n	800f2ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f2c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f2d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f2da:	2300      	movs	r3, #0
 800f2dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f2e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	d058      	beq.n	800f39c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f2f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f2f6:	d033      	beq.n	800f360 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f2f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f2fc:	d82c      	bhi.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f302:	d02f      	beq.n	800f364 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f308:	d826      	bhi.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f30a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f30e:	d02b      	beq.n	800f368 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f310:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f314:	d820      	bhi.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f31a:	d012      	beq.n	800f342 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f31c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f320:	d81a      	bhi.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f322:	2b00      	cmp	r3, #0
 800f324:	d022      	beq.n	800f36c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f32a:	d115      	bne.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f330:	3308      	adds	r3, #8
 800f332:	2100      	movs	r1, #0
 800f334:	4618      	mov	r0, r3
 800f336:	f001 fd29 	bl	8010d8c <RCCEx_PLL2_Config>
 800f33a:	4603      	mov	r3, r0
 800f33c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f340:	e015      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f346:	3328      	adds	r3, #40	@ 0x28
 800f348:	2102      	movs	r1, #2
 800f34a:	4618      	mov	r0, r3
 800f34c:	f001 fdd0 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f350:	4603      	mov	r3, r0
 800f352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f356:	e00a      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f35e:	e006      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f360:	bf00      	nop
 800f362:	e004      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f364:	bf00      	nop
 800f366:	e002      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f368:	bf00      	nop
 800f36a:	e000      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f36c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f36e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f372:	2b00      	cmp	r3, #0
 800f374:	d10e      	bne.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f376:	4b06      	ldr	r3, [pc, #24]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f37a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800f37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f386:	4a02      	ldr	r2, [pc, #8]	@ (800f390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f388:	430b      	orrs	r3, r1
 800f38a:	6593      	str	r3, [r2, #88]	@ 0x58
 800f38c:	e006      	b.n	800f39c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f38e:	bf00      	nop
 800f390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f3a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f3b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	d055      	beq.n	800f468 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f3c8:	d033      	beq.n	800f432 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f3ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f3ce:	d82c      	bhi.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f3d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f3d4:	d02f      	beq.n	800f436 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f3d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f3da:	d826      	bhi.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f3dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f3e0:	d02b      	beq.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f3e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f3e6:	d820      	bhi.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f3e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f3ec:	d012      	beq.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f3ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f3f2:	d81a      	bhi.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d022      	beq.n	800f43e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f3f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3fc:	d115      	bne.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f402:	3308      	adds	r3, #8
 800f404:	2100      	movs	r1, #0
 800f406:	4618      	mov	r0, r3
 800f408:	f001 fcc0 	bl	8010d8c <RCCEx_PLL2_Config>
 800f40c:	4603      	mov	r3, r0
 800f40e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f412:	e015      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f418:	3328      	adds	r3, #40	@ 0x28
 800f41a:	2102      	movs	r1, #2
 800f41c:	4618      	mov	r0, r3
 800f41e:	f001 fd67 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f422:	4603      	mov	r3, r0
 800f424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f428:	e00a      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f42a:	2301      	movs	r3, #1
 800f42c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f430:	e006      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f432:	bf00      	nop
 800f434:	e004      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f436:	bf00      	nop
 800f438:	e002      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f43a:	bf00      	nop
 800f43c:	e000      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f43e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f444:	2b00      	cmp	r3, #0
 800f446:	d10b      	bne.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f448:	4ba1      	ldr	r3, [pc, #644]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f44a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f44c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800f450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f458:	4a9d      	ldr	r2, [pc, #628]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f45a:	430b      	orrs	r3, r1
 800f45c:	6593      	str	r3, [r2, #88]	@ 0x58
 800f45e:	e003      	b.n	800f468 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f470:	f002 0308 	and.w	r3, r2, #8
 800f474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f478:	2300      	movs	r3, #0
 800f47a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f47e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f482:	460b      	mov	r3, r1
 800f484:	4313      	orrs	r3, r2
 800f486:	d01e      	beq.n	800f4c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f494:	d10c      	bne.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f49a:	3328      	adds	r3, #40	@ 0x28
 800f49c:	2102      	movs	r1, #2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f001 fd26 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d002      	beq.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f4b0:	4b87      	ldr	r3, [pc, #540]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4c0:	4a83      	ldr	r2, [pc, #524]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f4c2:	430b      	orrs	r3, r1
 800f4c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ce:	f002 0310 	and.w	r3, r2, #16
 800f4d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f4dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	d01e      	beq.n	800f524 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f4ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4f2:	d10c      	bne.n	800f50e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4f8:	3328      	adds	r3, #40	@ 0x28
 800f4fa:	2102      	movs	r1, #2
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f001 fcf7 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d002      	beq.n	800f50e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f508:	2301      	movs	r3, #1
 800f50a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f50e:	4b70      	ldr	r3, [pc, #448]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f512:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f51a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f51e:	4a6c      	ldr	r2, [pc, #432]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f520:	430b      	orrs	r3, r1
 800f522:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f534:	2300      	movs	r3, #0
 800f536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f53a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f53e:	460b      	mov	r3, r1
 800f540:	4313      	orrs	r3, r2
 800f542:	d03e      	beq.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f54c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f550:	d022      	beq.n	800f598 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f556:	d81b      	bhi.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d003      	beq.n	800f564 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f55c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f560:	d00b      	beq.n	800f57a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f562:	e015      	b.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f568:	3308      	adds	r3, #8
 800f56a:	2100      	movs	r1, #0
 800f56c:	4618      	mov	r0, r3
 800f56e:	f001 fc0d 	bl	8010d8c <RCCEx_PLL2_Config>
 800f572:	4603      	mov	r3, r0
 800f574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f578:	e00f      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f57e:	3328      	adds	r3, #40	@ 0x28
 800f580:	2102      	movs	r1, #2
 800f582:	4618      	mov	r0, r3
 800f584:	f001 fcb4 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f588:	4603      	mov	r3, r0
 800f58a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f58e:	e004      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f596:	e000      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f59a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d10b      	bne.n	800f5ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f5a2:	4b4b      	ldr	r3, [pc, #300]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f5a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f5b2:	4a47      	ldr	r2, [pc, #284]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f5b4:	430b      	orrs	r3, r1
 800f5b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800f5b8:	e003      	b.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f5be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f5ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f5d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f5d8:	460b      	mov	r3, r1
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	d03b      	beq.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f5ea:	d01f      	beq.n	800f62c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f5ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f5f0:	d818      	bhi.n	800f624 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f5f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5f6:	d003      	beq.n	800f600 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f5f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f5fc:	d007      	beq.n	800f60e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f5fe:	e011      	b.n	800f624 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f600:	4b33      	ldr	r3, [pc, #204]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f604:	4a32      	ldr	r2, [pc, #200]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f60a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f60c:	e00f      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f612:	3328      	adds	r3, #40	@ 0x28
 800f614:	2101      	movs	r1, #1
 800f616:	4618      	mov	r0, r3
 800f618:	f001 fc6a 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f61c:	4603      	mov	r3, r0
 800f61e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f622:	e004      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f624:	2301      	movs	r3, #1
 800f626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f62a:	e000      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f62e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10b      	bne.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f636:	4b26      	ldr	r3, [pc, #152]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f63a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f646:	4a22      	ldr	r2, [pc, #136]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f648:	430b      	orrs	r3, r1
 800f64a:	6553      	str	r3, [r2, #84]	@ 0x54
 800f64c:	e003      	b.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f64e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f662:	673b      	str	r3, [r7, #112]	@ 0x70
 800f664:	2300      	movs	r3, #0
 800f666:	677b      	str	r3, [r7, #116]	@ 0x74
 800f668:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f66c:	460b      	mov	r3, r1
 800f66e:	4313      	orrs	r3, r2
 800f670:	d034      	beq.n	800f6dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d003      	beq.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f67c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f680:	d007      	beq.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f682:	e011      	b.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f684:	4b12      	ldr	r3, [pc, #72]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f688:	4a11      	ldr	r2, [pc, #68]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f68a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f68e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f690:	e00e      	b.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f696:	3308      	adds	r3, #8
 800f698:	2102      	movs	r1, #2
 800f69a:	4618      	mov	r0, r3
 800f69c:	f001 fb76 	bl	8010d8c <RCCEx_PLL2_Config>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f6a6:	e003      	b.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f6ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d10d      	bne.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f6b8:	4b05      	ldr	r3, [pc, #20]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f6ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6c6:	4a02      	ldr	r2, [pc, #8]	@ (800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f6c8:	430b      	orrs	r3, r1
 800f6ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f6cc:	e006      	b.n	800f6dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f6ce:	bf00      	nop
 800f6d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f6e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f6ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	d00c      	beq.n	800f712 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6fc:	3328      	adds	r3, #40	@ 0x28
 800f6fe:	2102      	movs	r1, #2
 800f700:	4618      	mov	r0, r3
 800f702:	f001 fbf5 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d002      	beq.n	800f712 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f70c:	2301      	movs	r3, #1
 800f70e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f71e:	663b      	str	r3, [r7, #96]	@ 0x60
 800f720:	2300      	movs	r3, #0
 800f722:	667b      	str	r3, [r7, #100]	@ 0x64
 800f724:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f728:	460b      	mov	r3, r1
 800f72a:	4313      	orrs	r3, r2
 800f72c:	d038      	beq.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f73a:	d018      	beq.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f73c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f740:	d811      	bhi.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f746:	d014      	beq.n	800f772 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f74c:	d80b      	bhi.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d011      	beq.n	800f776 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f756:	d106      	bne.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f758:	4bc3      	ldr	r3, [pc, #780]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f75c:	4ac2      	ldr	r2, [pc, #776]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f75e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f764:	e008      	b.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f766:	2301      	movs	r3, #1
 800f768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f76c:	e004      	b.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f76e:	bf00      	nop
 800f770:	e002      	b.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f772:	bf00      	nop
 800f774:	e000      	b.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f776:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d10b      	bne.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f780:	4bb9      	ldr	r3, [pc, #740]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f784:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f78c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f790:	4ab5      	ldr	r2, [pc, #724]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f792:	430b      	orrs	r3, r1
 800f794:	6553      	str	r3, [r2, #84]	@ 0x54
 800f796:	e003      	b.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f79c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f7ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f7b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	d009      	beq.n	800f7d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f7bc:	4baa      	ldr	r3, [pc, #680]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7ca:	4aa7      	ldr	r2, [pc, #668]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f7cc:	430b      	orrs	r3, r1
 800f7ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800f7dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800f7de:	2300      	movs	r3, #0
 800f7e0:	657b      	str	r3, [r7, #84]	@ 0x54
 800f7e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	d00a      	beq.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f7ec:	4b9e      	ldr	r3, [pc, #632]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f7ee:	691b      	ldr	r3, [r3, #16]
 800f7f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800f7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f7fc:	4a9a      	ldr	r2, [pc, #616]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f7fe:	430b      	orrs	r3, r1
 800f800:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f80e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f810:	2300      	movs	r3, #0
 800f812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f814:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f818:	460b      	mov	r3, r1
 800f81a:	4313      	orrs	r3, r2
 800f81c:	d009      	beq.n	800f832 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f81e:	4b92      	ldr	r3, [pc, #584]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f822:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f82a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f82c:	4a8e      	ldr	r2, [pc, #568]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f82e:	430b      	orrs	r3, r1
 800f830:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f83e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f840:	2300      	movs	r3, #0
 800f842:	647b      	str	r3, [r7, #68]	@ 0x44
 800f844:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f848:	460b      	mov	r3, r1
 800f84a:	4313      	orrs	r3, r2
 800f84c:	d00e      	beq.n	800f86c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f84e:	4b86      	ldr	r3, [pc, #536]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	4a85      	ldr	r2, [pc, #532]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f854:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f858:	6113      	str	r3, [r2, #16]
 800f85a:	4b83      	ldr	r3, [pc, #524]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f85c:	6919      	ldr	r1, [r3, #16]
 800f85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f862:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f866:	4a80      	ldr	r2, [pc, #512]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f868:	430b      	orrs	r3, r1
 800f86a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f874:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f878:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f87a:	2300      	movs	r3, #0
 800f87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f87e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f882:	460b      	mov	r3, r1
 800f884:	4313      	orrs	r3, r2
 800f886:	d009      	beq.n	800f89c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f888:	4b77      	ldr	r3, [pc, #476]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f88a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f88c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f896:	4a74      	ldr	r2, [pc, #464]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f898:	430b      	orrs	r3, r1
 800f89a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f8a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	d00a      	beq.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f8b8:	4b6b      	ldr	r3, [pc, #428]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f8ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8bc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f8c8:	4a67      	ldr	r2, [pc, #412]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f8ca:	430b      	orrs	r3, r1
 800f8cc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f8da:	f003 0301 	and.w	r3, r3, #1
 800f8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f8e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	d011      	beq.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8ee:	3308      	adds	r3, #8
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f001 fa4a 	bl	8010d8c <RCCEx_PLL2_Config>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f8fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f902:	2b00      	cmp	r3, #0
 800f904:	d003      	beq.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f90a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f916:	2100      	movs	r1, #0
 800f918:	6239      	str	r1, [r7, #32]
 800f91a:	f003 0302 	and.w	r3, r3, #2
 800f91e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f920:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f924:	460b      	mov	r3, r1
 800f926:	4313      	orrs	r3, r2
 800f928:	d011      	beq.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f92e:	3308      	adds	r3, #8
 800f930:	2101      	movs	r1, #1
 800f932:	4618      	mov	r0, r3
 800f934:	f001 fa2a 	bl	8010d8c <RCCEx_PLL2_Config>
 800f938:	4603      	mov	r3, r0
 800f93a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f93e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f942:	2b00      	cmp	r3, #0
 800f944:	d003      	beq.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f94a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	2100      	movs	r1, #0
 800f958:	61b9      	str	r1, [r7, #24]
 800f95a:	f003 0304 	and.w	r3, r3, #4
 800f95e:	61fb      	str	r3, [r7, #28]
 800f960:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f964:	460b      	mov	r3, r1
 800f966:	4313      	orrs	r3, r2
 800f968:	d011      	beq.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f96e:	3308      	adds	r3, #8
 800f970:	2102      	movs	r1, #2
 800f972:	4618      	mov	r0, r3
 800f974:	f001 fa0a 	bl	8010d8c <RCCEx_PLL2_Config>
 800f978:	4603      	mov	r3, r0
 800f97a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f97e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f982:	2b00      	cmp	r3, #0
 800f984:	d003      	beq.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f98a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	2100      	movs	r1, #0
 800f998:	6139      	str	r1, [r7, #16]
 800f99a:	f003 0308 	and.w	r3, r3, #8
 800f99e:	617b      	str	r3, [r7, #20]
 800f9a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	d011      	beq.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9ae:	3328      	adds	r3, #40	@ 0x28
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f001 fa9c 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800f9be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d003      	beq.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f9ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	f003 0310 	and.w	r3, r3, #16
 800f9de:	60fb      	str	r3, [r7, #12]
 800f9e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	d011      	beq.n	800fa0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9ee:	3328      	adds	r3, #40	@ 0x28
 800f9f0:	2101      	movs	r1, #1
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f001 fa7c 	bl	8010ef0 <RCCEx_PLL3_Config>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f9fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fa0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa16:	2100      	movs	r1, #0
 800fa18:	6039      	str	r1, [r7, #0]
 800fa1a:	f003 0320 	and.w	r3, r3, #32
 800fa1e:	607b      	str	r3, [r7, #4]
 800fa20:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa24:	460b      	mov	r3, r1
 800fa26:	4313      	orrs	r3, r2
 800fa28:	d011      	beq.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fa2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa2e:	3328      	adds	r3, #40	@ 0x28
 800fa30:	2102      	movs	r1, #2
 800fa32:	4618      	mov	r0, r3
 800fa34:	f001 fa5c 	bl	8010ef0 <RCCEx_PLL3_Config>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fa3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d003      	beq.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800fa4e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d101      	bne.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800fa56:	2300      	movs	r3, #0
 800fa58:	e000      	b.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800fa5a:	2301      	movs	r3, #1
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800fa62:	46bd      	mov	sp, r7
 800fa64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fa68:	58024400 	.word	0x58024400

0800fa6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b090      	sub	sp, #64	@ 0x40
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fa76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa7a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800fa7e:	430b      	orrs	r3, r1
 800fa80:	f040 8094 	bne.w	800fbac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fa84:	4b9e      	ldr	r3, [pc, #632]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa88:	f003 0307 	and.w	r3, r3, #7
 800fa8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa90:	2b04      	cmp	r3, #4
 800fa92:	f200 8087 	bhi.w	800fba4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fa96:	a201      	add	r2, pc, #4	@ (adr r2, 800fa9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa9c:	0800fab1 	.word	0x0800fab1
 800faa0:	0800fad9 	.word	0x0800fad9
 800faa4:	0800fb01 	.word	0x0800fb01
 800faa8:	0800fb9d 	.word	0x0800fb9d
 800faac:	0800fb29 	.word	0x0800fb29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fab0:	4b93      	ldr	r3, [pc, #588]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fabc:	d108      	bne.n	800fad0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fabe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fac2:	4618      	mov	r0, r3
 800fac4:	f001 f810 	bl	8010ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800facc:	f000 bd45 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fad4:	f000 bd41 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fad8:	4b89      	ldr	r3, [pc, #548]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fae4:	d108      	bne.n	800faf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fae6:	f107 0318 	add.w	r3, r7, #24
 800faea:	4618      	mov	r0, r3
 800faec:	f000 fd54 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800faf4:	f000 bd31 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fafc:	f000 bd2d 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fb00:	4b7f      	ldr	r3, [pc, #508]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fb08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb0c:	d108      	bne.n	800fb20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb0e:	f107 030c 	add.w	r3, r7, #12
 800fb12:	4618      	mov	r0, r3
 800fb14:	f000 fe94 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb1c:	f000 bd1d 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb20:	2300      	movs	r3, #0
 800fb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb24:	f000 bd19 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fb28:	4b75      	ldr	r3, [pc, #468]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fb2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fb30:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb32:	4b73      	ldr	r3, [pc, #460]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f003 0304 	and.w	r3, r3, #4
 800fb3a:	2b04      	cmp	r3, #4
 800fb3c:	d10c      	bne.n	800fb58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fb3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d109      	bne.n	800fb58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb44:	4b6e      	ldr	r3, [pc, #440]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	08db      	lsrs	r3, r3, #3
 800fb4a:	f003 0303 	and.w	r3, r3, #3
 800fb4e:	4a6d      	ldr	r2, [pc, #436]	@ (800fd04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fb50:	fa22 f303 	lsr.w	r3, r2, r3
 800fb54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb56:	e01f      	b.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fb58:	4b69      	ldr	r3, [pc, #420]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb64:	d106      	bne.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800fb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb6c:	d102      	bne.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fb6e:	4b66      	ldr	r3, [pc, #408]	@ (800fd08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fb70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb72:	e011      	b.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fb74:	4b62      	ldr	r3, [pc, #392]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb80:	d106      	bne.n	800fb90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fb82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb88:	d102      	bne.n	800fb90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fb8a:	4b60      	ldr	r3, [pc, #384]	@ (800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb8e:	e003      	b.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fb90:	2300      	movs	r3, #0
 800fb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fb94:	f000 bce1 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fb98:	f000 bcdf 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fb9c:	4b5c      	ldr	r3, [pc, #368]	@ (800fd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fba0:	f000 bcdb 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fba4:	2300      	movs	r3, #0
 800fba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fba8:	f000 bcd7 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800fbac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbb0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800fbb4:	430b      	orrs	r3, r1
 800fbb6:	f040 80ad 	bne.w	800fd14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800fbba:	4b51      	ldr	r3, [pc, #324]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fbbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbbe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800fbc2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbca:	d056      	beq.n	800fc7a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800fbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbd2:	f200 8090 	bhi.w	800fcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd8:	2bc0      	cmp	r3, #192	@ 0xc0
 800fbda:	f000 8088 	beq.w	800fcee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800fbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbe0:	2bc0      	cmp	r3, #192	@ 0xc0
 800fbe2:	f200 8088 	bhi.w	800fcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbe8:	2b80      	cmp	r3, #128	@ 0x80
 800fbea:	d032      	beq.n	800fc52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800fbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbee:	2b80      	cmp	r3, #128	@ 0x80
 800fbf0:	f200 8081 	bhi.w	800fcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d003      	beq.n	800fc02 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbfc:	2b40      	cmp	r3, #64	@ 0x40
 800fbfe:	d014      	beq.n	800fc2a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800fc00:	e079      	b.n	800fcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fc02:	4b3f      	ldr	r3, [pc, #252]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc0e:	d108      	bne.n	800fc22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc14:	4618      	mov	r0, r3
 800fc16:	f000 ff67 	bl	8010ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc1e:	f000 bc9c 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc22:	2300      	movs	r3, #0
 800fc24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc26:	f000 bc98 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc2a:	4b35      	ldr	r3, [pc, #212]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc36:	d108      	bne.n	800fc4a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc38:	f107 0318 	add.w	r3, r7, #24
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f000 fcab 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc46:	f000 bc88 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc4e:	f000 bc84 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fc52:	4b2b      	ldr	r3, [pc, #172]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fc5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc5e:	d108      	bne.n	800fc72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc60:	f107 030c 	add.w	r3, r7, #12
 800fc64:	4618      	mov	r0, r3
 800fc66:	f000 fdeb 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc6e:	f000 bc74 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc72:	2300      	movs	r3, #0
 800fc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc76:	f000 bc70 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fc7a:	4b21      	ldr	r3, [pc, #132]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fc7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fc82:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fc84:	4b1e      	ldr	r3, [pc, #120]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f003 0304 	and.w	r3, r3, #4
 800fc8c:	2b04      	cmp	r3, #4
 800fc8e:	d10c      	bne.n	800fcaa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800fc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d109      	bne.n	800fcaa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fc96:	4b1a      	ldr	r3, [pc, #104]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	08db      	lsrs	r3, r3, #3
 800fc9c:	f003 0303 	and.w	r3, r3, #3
 800fca0:	4a18      	ldr	r2, [pc, #96]	@ (800fd04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fca2:	fa22 f303 	lsr.w	r3, r2, r3
 800fca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fca8:	e01f      	b.n	800fcea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fcaa:	4b15      	ldr	r3, [pc, #84]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fcb6:	d106      	bne.n	800fcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800fcb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcbe:	d102      	bne.n	800fcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fcc0:	4b11      	ldr	r3, [pc, #68]	@ (800fd08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcc4:	e011      	b.n	800fcea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fcc6:	4b0e      	ldr	r3, [pc, #56]	@ (800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fcce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fcd2:	d106      	bne.n	800fce2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800fcd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcda:	d102      	bne.n	800fce2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fcdc:	4b0b      	ldr	r3, [pc, #44]	@ (800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fce0:	e003      	b.n	800fcea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fce6:	f000 bc38 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fcea:	f000 bc36 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fcee:	4b08      	ldr	r3, [pc, #32]	@ (800fd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fcf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcf2:	f000 bc32 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcfa:	f000 bc2e 	b.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fcfe:	bf00      	nop
 800fd00:	58024400 	.word	0x58024400
 800fd04:	03d09000 	.word	0x03d09000
 800fd08:	003d0900 	.word	0x003d0900
 800fd0c:	017d7840 	.word	0x017d7840
 800fd10:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800fd14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd18:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800fd1c:	430b      	orrs	r3, r1
 800fd1e:	f040 809c 	bne.w	800fe5a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800fd22:	4b9e      	ldr	r3, [pc, #632]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd26:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800fd2a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fd32:	d054      	beq.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800fd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fd3a:	f200 808b 	bhi.w	800fe54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fd44:	f000 8083 	beq.w	800fe4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800fd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fd4e:	f200 8081 	bhi.w	800fe54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fd58:	d02f      	beq.n	800fdba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800fd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fd60:	d878      	bhi.n	800fe54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d004      	beq.n	800fd72 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800fd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fd6e:	d012      	beq.n	800fd96 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800fd70:	e070      	b.n	800fe54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd72:	4b8a      	ldr	r3, [pc, #552]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fd7e:	d107      	bne.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd84:	4618      	mov	r0, r3
 800fd86:	f000 feaf 	bl	8010ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd8e:	e3e4      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd94:	e3e1      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd96:	4b81      	ldr	r3, [pc, #516]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fda2:	d107      	bne.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fda4:	f107 0318 	add.w	r3, r7, #24
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f000 fbf5 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdb2:	e3d2      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdb8:	e3cf      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fdba:	4b78      	ldr	r3, [pc, #480]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fdc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fdc6:	d107      	bne.n	800fdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdc8:	f107 030c 	add.w	r3, r7, #12
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f000 fd37 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdd6:	e3c0      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fddc:	e3bd      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fdde:	4b6f      	ldr	r3, [pc, #444]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fde0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fde2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fde6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fde8:	4b6c      	ldr	r3, [pc, #432]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 0304 	and.w	r3, r3, #4
 800fdf0:	2b04      	cmp	r3, #4
 800fdf2:	d10c      	bne.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800fdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d109      	bne.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fdfa:	4b68      	ldr	r3, [pc, #416]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	08db      	lsrs	r3, r3, #3
 800fe00:	f003 0303 	and.w	r3, r3, #3
 800fe04:	4a66      	ldr	r2, [pc, #408]	@ (800ffa0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fe06:	fa22 f303 	lsr.w	r3, r2, r3
 800fe0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe0c:	e01e      	b.n	800fe4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe0e:	4b63      	ldr	r3, [pc, #396]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe1a:	d106      	bne.n	800fe2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800fe1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe22:	d102      	bne.n	800fe2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fe24:	4b5f      	ldr	r3, [pc, #380]	@ (800ffa4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800fe26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe28:	e010      	b.n	800fe4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fe2a:	4b5c      	ldr	r3, [pc, #368]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fe32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe36:	d106      	bne.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800fe38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe3e:	d102      	bne.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fe40:	4b59      	ldr	r3, [pc, #356]	@ (800ffa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800fe42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe44:	e002      	b.n	800fe4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fe4a:	e386      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fe4c:	e385      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fe4e:	4b57      	ldr	r3, [pc, #348]	@ (800ffac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800fe50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe52:	e382      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fe54:	2300      	movs	r3, #0
 800fe56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe58:	e37f      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800fe5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe5e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800fe62:	430b      	orrs	r3, r1
 800fe64:	f040 80a7 	bne.w	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800fe68:	4b4c      	ldr	r3, [pc, #304]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fe6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe6c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800fe70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fe72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fe78:	d055      	beq.n	800ff26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fe80:	f200 8096 	bhi.w	800ffb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fe84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fe8a:	f000 8084 	beq.w	800ff96 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800fe8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fe94:	f200 808c 	bhi.w	800ffb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fe98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fe9e:	d030      	beq.n	800ff02 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800fea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fea6:	f200 8083 	bhi.w	800ffb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800feaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feac:	2b00      	cmp	r3, #0
 800feae:	d004      	beq.n	800feba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800feb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800feb6:	d012      	beq.n	800fede <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800feb8:	e07a      	b.n	800ffb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800feba:	4b38      	ldr	r3, [pc, #224]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fec2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fec6:	d107      	bne.n	800fed8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fecc:	4618      	mov	r0, r3
 800fece:	f000 fe0b 	bl	8010ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fed6:	e340      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fed8:	2300      	movs	r3, #0
 800feda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fedc:	e33d      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fede:	4b2f      	ldr	r3, [pc, #188]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800feea:	d107      	bne.n	800fefc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feec:	f107 0318 	add.w	r3, r7, #24
 800fef0:	4618      	mov	r0, r3
 800fef2:	f000 fb51 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fefa:	e32e      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fefc:	2300      	movs	r3, #0
 800fefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff00:	e32b      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff02:	4b26      	ldr	r3, [pc, #152]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff0e:	d107      	bne.n	800ff20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff10:	f107 030c 	add.w	r3, r7, #12
 800ff14:	4618      	mov	r0, r3
 800ff16:	f000 fc93 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff1e:	e31c      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff20:	2300      	movs	r3, #0
 800ff22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff24:	e319      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ff26:	4b1d      	ldr	r3, [pc, #116]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ff2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ff30:	4b1a      	ldr	r3, [pc, #104]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f003 0304 	and.w	r3, r3, #4
 800ff38:	2b04      	cmp	r3, #4
 800ff3a:	d10c      	bne.n	800ff56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ff3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d109      	bne.n	800ff56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff42:	4b16      	ldr	r3, [pc, #88]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	08db      	lsrs	r3, r3, #3
 800ff48:	f003 0303 	and.w	r3, r3, #3
 800ff4c:	4a14      	ldr	r2, [pc, #80]	@ (800ffa0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ff4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ff52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff54:	e01e      	b.n	800ff94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ff56:	4b11      	ldr	r3, [pc, #68]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff62:	d106      	bne.n	800ff72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ff64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff6a:	d102      	bne.n	800ff72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ff6c:	4b0d      	ldr	r3, [pc, #52]	@ (800ffa4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ff6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff70:	e010      	b.n	800ff94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ff72:	4b0a      	ldr	r3, [pc, #40]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ff7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ff7e:	d106      	bne.n	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ff80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff86:	d102      	bne.n	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ff88:	4b07      	ldr	r3, [pc, #28]	@ (800ffa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ff8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff8c:	e002      	b.n	800ff94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ff92:	e2e2      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ff94:	e2e1      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ff96:	4b05      	ldr	r3, [pc, #20]	@ (800ffac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ff98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff9a:	e2de      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ff9c:	58024400 	.word	0x58024400
 800ffa0:	03d09000 	.word	0x03d09000
 800ffa4:	003d0900 	.word	0x003d0900
 800ffa8:	017d7840 	.word	0x017d7840
 800ffac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffb4:	e2d1      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ffb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ffbe:	430b      	orrs	r3, r1
 800ffc0:	f040 809c 	bne.w	80100fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ffc4:	4b93      	ldr	r3, [pc, #588]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ffc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffc8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ffcc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ffce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ffd4:	d054      	beq.n	8010080 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ffd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ffdc:	f200 808b 	bhi.w	80100f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ffe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ffe6:	f000 8083 	beq.w	80100f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ffea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fff0:	f200 8081 	bhi.w	80100f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fffa:	d02f      	beq.n	801005c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800fffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010002:	d878      	bhi.n	80100f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010006:	2b00      	cmp	r3, #0
 8010008:	d004      	beq.n	8010014 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801000a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801000c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010010:	d012      	beq.n	8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010012:	e070      	b.n	80100f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010014:	4b7f      	ldr	r3, [pc, #508]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801001c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010020:	d107      	bne.n	8010032 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010026:	4618      	mov	r0, r3
 8010028:	f000 fd5e 	bl	8010ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801002c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010030:	e293      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010032:	2300      	movs	r3, #0
 8010034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010036:	e290      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010038:	4b76      	ldr	r3, [pc, #472]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010044:	d107      	bne.n	8010056 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010046:	f107 0318 	add.w	r3, r7, #24
 801004a:	4618      	mov	r0, r3
 801004c:	f000 faa4 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010054:	e281      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010056:	2300      	movs	r3, #0
 8010058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801005a:	e27e      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801005c:	4b6d      	ldr	r3, [pc, #436]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010068:	d107      	bne.n	801007a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801006a:	f107 030c 	add.w	r3, r7, #12
 801006e:	4618      	mov	r0, r3
 8010070:	f000 fbe6 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010078:	e26f      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801007a:	2300      	movs	r3, #0
 801007c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801007e:	e26c      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010080:	4b64      	ldr	r3, [pc, #400]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010084:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010088:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801008a:	4b62      	ldr	r3, [pc, #392]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f003 0304 	and.w	r3, r3, #4
 8010092:	2b04      	cmp	r3, #4
 8010094:	d10c      	bne.n	80100b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010098:	2b00      	cmp	r3, #0
 801009a:	d109      	bne.n	80100b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801009c:	4b5d      	ldr	r3, [pc, #372]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	08db      	lsrs	r3, r3, #3
 80100a2:	f003 0303 	and.w	r3, r3, #3
 80100a6:	4a5c      	ldr	r2, [pc, #368]	@ (8010218 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80100a8:	fa22 f303 	lsr.w	r3, r2, r3
 80100ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100ae:	e01e      	b.n	80100ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80100b0:	4b58      	ldr	r3, [pc, #352]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80100bc:	d106      	bne.n	80100cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80100be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80100c4:	d102      	bne.n	80100cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80100c6:	4b55      	ldr	r3, [pc, #340]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80100c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100ca:	e010      	b.n	80100ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80100cc:	4b51      	ldr	r3, [pc, #324]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80100d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80100d8:	d106      	bne.n	80100e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80100da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100e0:	d102      	bne.n	80100e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80100e2:	4b4f      	ldr	r3, [pc, #316]	@ (8010220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80100e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100e6:	e002      	b.n	80100ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80100e8:	2300      	movs	r3, #0
 80100ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80100ec:	e235      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80100ee:	e234      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80100f0:	4b4c      	ldr	r3, [pc, #304]	@ (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80100f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100f4:	e231      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80100f6:	2300      	movs	r3, #0
 80100f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100fa:	e22e      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80100fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010100:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8010104:	430b      	orrs	r3, r1
 8010106:	f040 808f 	bne.w	8010228 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801010a:	4b42      	ldr	r3, [pc, #264]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801010c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801010e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8010112:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8010114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010116:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801011a:	d06b      	beq.n	80101f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801011c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801011e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010122:	d874      	bhi.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010126:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801012a:	d056      	beq.n	80101da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801012c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010132:	d86c      	bhi.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010136:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801013a:	d03b      	beq.n	80101b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801013c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010142:	d864      	bhi.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801014a:	d021      	beq.n	8010190 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801014c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010152:	d85c      	bhi.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010156:	2b00      	cmp	r3, #0
 8010158:	d004      	beq.n	8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801015a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801015c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010160:	d004      	beq.n	801016c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010162:	e054      	b.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010164:	f7fe fa4c 	bl	800e600 <HAL_RCC_GetPCLK1Freq>
 8010168:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801016a:	e1f6      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801016c:	4b29      	ldr	r3, [pc, #164]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010178:	d107      	bne.n	801018a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801017a:	f107 0318 	add.w	r3, r7, #24
 801017e:	4618      	mov	r0, r3
 8010180:	f000 fa0a 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010188:	e1e7      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801018e:	e1e4      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010190:	4b20      	ldr	r3, [pc, #128]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801019c:	d107      	bne.n	80101ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801019e:	f107 030c 	add.w	r3, r7, #12
 80101a2:	4618      	mov	r0, r3
 80101a4:	f000 fb4c 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101ac:	e1d5      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101b2:	e1d2      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80101b4:	4b17      	ldr	r3, [pc, #92]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f003 0304 	and.w	r3, r3, #4
 80101bc:	2b04      	cmp	r3, #4
 80101be:	d109      	bne.n	80101d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101c0:	4b14      	ldr	r3, [pc, #80]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	08db      	lsrs	r3, r3, #3
 80101c6:	f003 0303 	and.w	r3, r3, #3
 80101ca:	4a13      	ldr	r2, [pc, #76]	@ (8010218 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80101cc:	fa22 f303 	lsr.w	r3, r2, r3
 80101d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101d2:	e1c2      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101d4:	2300      	movs	r3, #0
 80101d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101d8:	e1bf      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80101da:	4b0e      	ldr	r3, [pc, #56]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80101e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101e6:	d102      	bne.n	80101ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80101e8:	4b0c      	ldr	r3, [pc, #48]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80101ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101ec:	e1b5      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101ee:	2300      	movs	r3, #0
 80101f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101f2:	e1b2      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80101f4:	4b07      	ldr	r3, [pc, #28]	@ (8010214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80101fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010200:	d102      	bne.n	8010208 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010202:	4b07      	ldr	r3, [pc, #28]	@ (8010220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010206:	e1a8      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010208:	2300      	movs	r3, #0
 801020a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801020c:	e1a5      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801020e:	2300      	movs	r3, #0
 8010210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010212:	e1a2      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010214:	58024400 	.word	0x58024400
 8010218:	03d09000 	.word	0x03d09000
 801021c:	003d0900 	.word	0x003d0900
 8010220:	017d7840 	.word	0x017d7840
 8010224:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010228:	e9d7 2300 	ldrd	r2, r3, [r7]
 801022c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8010230:	430b      	orrs	r3, r1
 8010232:	d173      	bne.n	801031c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010234:	4b9c      	ldr	r3, [pc, #624]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801023c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801023e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010244:	d02f      	beq.n	80102a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801024c:	d863      	bhi.n	8010316 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801024e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010250:	2b00      	cmp	r3, #0
 8010252:	d004      	beq.n	801025e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801025a:	d012      	beq.n	8010282 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801025c:	e05b      	b.n	8010316 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801025e:	4b92      	ldr	r3, [pc, #584]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801026a:	d107      	bne.n	801027c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801026c:	f107 0318 	add.w	r3, r7, #24
 8010270:	4618      	mov	r0, r3
 8010272:	f000 f991 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801027a:	e16e      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801027c:	2300      	movs	r3, #0
 801027e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010280:	e16b      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010282:	4b89      	ldr	r3, [pc, #548]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801028a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801028e:	d107      	bne.n	80102a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010290:	f107 030c 	add.w	r3, r7, #12
 8010294:	4618      	mov	r0, r3
 8010296:	f000 fad3 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801029e:	e15c      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102a0:	2300      	movs	r3, #0
 80102a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102a4:	e159      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80102a6:	4b80      	ldr	r3, [pc, #512]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80102a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80102aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80102ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80102b0:	4b7d      	ldr	r3, [pc, #500]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f003 0304 	and.w	r3, r3, #4
 80102b8:	2b04      	cmp	r3, #4
 80102ba:	d10c      	bne.n	80102d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80102bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d109      	bne.n	80102d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80102c2:	4b79      	ldr	r3, [pc, #484]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	08db      	lsrs	r3, r3, #3
 80102c8:	f003 0303 	and.w	r3, r3, #3
 80102cc:	4a77      	ldr	r2, [pc, #476]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80102ce:	fa22 f303 	lsr.w	r3, r2, r3
 80102d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80102d4:	e01e      	b.n	8010314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80102d6:	4b74      	ldr	r3, [pc, #464]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80102e2:	d106      	bne.n	80102f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80102e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80102ea:	d102      	bne.n	80102f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80102ec:	4b70      	ldr	r3, [pc, #448]	@ (80104b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80102ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80102f0:	e010      	b.n	8010314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80102f2:	4b6d      	ldr	r3, [pc, #436]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80102fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80102fe:	d106      	bne.n	801030e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010306:	d102      	bne.n	801030e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010308:	4b6a      	ldr	r3, [pc, #424]	@ (80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801030a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801030c:	e002      	b.n	8010314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010312:	e122      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010314:	e121      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010316:	2300      	movs	r3, #0
 8010318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801031a:	e11e      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801031c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010320:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8010324:	430b      	orrs	r3, r1
 8010326:	d133      	bne.n	8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010328:	4b5f      	ldr	r3, [pc, #380]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801032a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801032c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010330:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010334:	2b00      	cmp	r3, #0
 8010336:	d004      	beq.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801033a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801033e:	d012      	beq.n	8010366 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010340:	e023      	b.n	801038a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010342:	4b59      	ldr	r3, [pc, #356]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801034a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801034e:	d107      	bne.n	8010360 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010354:	4618      	mov	r0, r3
 8010356:	f000 fbc7 	bl	8010ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801035a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801035c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801035e:	e0fc      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010360:	2300      	movs	r3, #0
 8010362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010364:	e0f9      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010366:	4b50      	ldr	r3, [pc, #320]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801036e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010372:	d107      	bne.n	8010384 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010374:	f107 0318 	add.w	r3, r7, #24
 8010378:	4618      	mov	r0, r3
 801037a:	f000 f90d 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801037e:	6a3b      	ldr	r3, [r7, #32]
 8010380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010382:	e0ea      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010384:	2300      	movs	r3, #0
 8010386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010388:	e0e7      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801038a:	2300      	movs	r3, #0
 801038c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801038e:	e0e4      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010394:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8010398:	430b      	orrs	r3, r1
 801039a:	f040 808d 	bne.w	80104b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801039e:	4b42      	ldr	r3, [pc, #264]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80103a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80103a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80103a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80103ae:	d06b      	beq.n	8010488 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80103b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80103b6:	d874      	bhi.n	80104a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80103b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103be:	d056      	beq.n	801046e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80103c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103c6:	d86c      	bhi.n	80104a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80103c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80103ce:	d03b      	beq.n	8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80103d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80103d6:	d864      	bhi.n	80104a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80103d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80103de:	d021      	beq.n	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80103e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80103e6:	d85c      	bhi.n	80104a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80103e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d004      	beq.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80103ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80103f4:	d004      	beq.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80103f6:	e054      	b.n	80104a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80103f8:	f000 f8b8 	bl	801056c <HAL_RCCEx_GetD3PCLK1Freq>
 80103fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103fe:	e0ac      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010400:	4b29      	ldr	r3, [pc, #164]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801040c:	d107      	bne.n	801041e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801040e:	f107 0318 	add.w	r3, r7, #24
 8010412:	4618      	mov	r0, r3
 8010414:	f000 f8c0 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801041c:	e09d      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801041e:	2300      	movs	r3, #0
 8010420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010422:	e09a      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010424:	4b20      	ldr	r3, [pc, #128]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801042c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010430:	d107      	bne.n	8010442 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010432:	f107 030c 	add.w	r3, r7, #12
 8010436:	4618      	mov	r0, r3
 8010438:	f000 fa02 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010440:	e08b      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010442:	2300      	movs	r3, #0
 8010444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010446:	e088      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010448:	4b17      	ldr	r3, [pc, #92]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f003 0304 	and.w	r3, r3, #4
 8010450:	2b04      	cmp	r3, #4
 8010452:	d109      	bne.n	8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010454:	4b14      	ldr	r3, [pc, #80]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	08db      	lsrs	r3, r3, #3
 801045a:	f003 0303 	and.w	r3, r3, #3
 801045e:	4a13      	ldr	r2, [pc, #76]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010460:	fa22 f303 	lsr.w	r3, r2, r3
 8010464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010466:	e078      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010468:	2300      	movs	r3, #0
 801046a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801046c:	e075      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801046e:	4b0e      	ldr	r3, [pc, #56]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801047a:	d102      	bne.n	8010482 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801047c:	4b0c      	ldr	r3, [pc, #48]	@ (80104b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801047e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010480:	e06b      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010482:	2300      	movs	r3, #0
 8010484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010486:	e068      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010488:	4b07      	ldr	r3, [pc, #28]	@ (80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010494:	d102      	bne.n	801049c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010496:	4b07      	ldr	r3, [pc, #28]	@ (80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801049a:	e05e      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801049c:	2300      	movs	r3, #0
 801049e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104a0:	e05b      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104a6:	e058      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104a8:	58024400 	.word	0x58024400
 80104ac:	03d09000 	.word	0x03d09000
 80104b0:	003d0900 	.word	0x003d0900
 80104b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80104b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104bc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80104c0:	430b      	orrs	r3, r1
 80104c2:	d148      	bne.n	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80104c4:	4b27      	ldr	r3, [pc, #156]	@ (8010564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80104c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80104cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80104ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80104d4:	d02a      	beq.n	801052c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80104d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80104dc:	d838      	bhi.n	8010550 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80104de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d004      	beq.n	80104ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80104e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80104ea:	d00d      	beq.n	8010508 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80104ec:	e030      	b.n	8010550 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80104ee:	4b1d      	ldr	r3, [pc, #116]	@ (8010564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80104f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80104fa:	d102      	bne.n	8010502 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80104fc:	4b1a      	ldr	r3, [pc, #104]	@ (8010568 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80104fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010500:	e02b      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010502:	2300      	movs	r3, #0
 8010504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010506:	e028      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010508:	4b16      	ldr	r3, [pc, #88]	@ (8010564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010514:	d107      	bne.n	8010526 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801051a:	4618      	mov	r0, r3
 801051c:	f000 fae4 	bl	8010ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010524:	e019      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010526:	2300      	movs	r3, #0
 8010528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801052a:	e016      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801052c:	4b0d      	ldr	r3, [pc, #52]	@ (8010564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010534:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010538:	d107      	bne.n	801054a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801053a:	f107 0318 	add.w	r3, r7, #24
 801053e:	4618      	mov	r0, r3
 8010540:	f000 f82a 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010548:	e007      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801054a:	2300      	movs	r3, #0
 801054c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801054e:	e004      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010550:	2300      	movs	r3, #0
 8010552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010554:	e001      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010556:	2300      	movs	r3, #0
 8010558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801055a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801055c:	4618      	mov	r0, r3
 801055e:	3740      	adds	r7, #64	@ 0x40
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}
 8010564:	58024400 	.word	0x58024400
 8010568:	017d7840 	.word	0x017d7840

0801056c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010570:	f7fe f816 	bl	800e5a0 <HAL_RCC_GetHCLKFreq>
 8010574:	4602      	mov	r2, r0
 8010576:	4b06      	ldr	r3, [pc, #24]	@ (8010590 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010578:	6a1b      	ldr	r3, [r3, #32]
 801057a:	091b      	lsrs	r3, r3, #4
 801057c:	f003 0307 	and.w	r3, r3, #7
 8010580:	4904      	ldr	r1, [pc, #16]	@ (8010594 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010582:	5ccb      	ldrb	r3, [r1, r3]
 8010584:	f003 031f 	and.w	r3, r3, #31
 8010588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801058c:	4618      	mov	r0, r3
 801058e:	bd80      	pop	{r7, pc}
 8010590:	58024400 	.word	0x58024400
 8010594:	08018b0c 	.word	0x08018b0c

08010598 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010598:	b480      	push	{r7}
 801059a:	b089      	sub	sp, #36	@ 0x24
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80105a0:	4ba1      	ldr	r3, [pc, #644]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80105a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105a4:	f003 0303 	and.w	r3, r3, #3
 80105a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80105aa:	4b9f      	ldr	r3, [pc, #636]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80105ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ae:	0b1b      	lsrs	r3, r3, #12
 80105b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80105b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80105b6:	4b9c      	ldr	r3, [pc, #624]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80105b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105ba:	091b      	lsrs	r3, r3, #4
 80105bc:	f003 0301 	and.w	r3, r3, #1
 80105c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80105c2:	4b99      	ldr	r3, [pc, #612]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80105c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105c6:	08db      	lsrs	r3, r3, #3
 80105c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80105cc:	693a      	ldr	r2, [r7, #16]
 80105ce:	fb02 f303 	mul.w	r3, r2, r3
 80105d2:	ee07 3a90 	vmov	s15, r3
 80105d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f000 8111 	beq.w	8010808 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80105e6:	69bb      	ldr	r3, [r7, #24]
 80105e8:	2b02      	cmp	r3, #2
 80105ea:	f000 8083 	beq.w	80106f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	2b02      	cmp	r3, #2
 80105f2:	f200 80a1 	bhi.w	8010738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d003      	beq.n	8010604 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80105fc:	69bb      	ldr	r3, [r7, #24]
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d056      	beq.n	80106b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010602:	e099      	b.n	8010738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010604:	4b88      	ldr	r3, [pc, #544]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f003 0320 	and.w	r3, r3, #32
 801060c:	2b00      	cmp	r3, #0
 801060e:	d02d      	beq.n	801066c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010610:	4b85      	ldr	r3, [pc, #532]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	08db      	lsrs	r3, r3, #3
 8010616:	f003 0303 	and.w	r3, r3, #3
 801061a:	4a84      	ldr	r2, [pc, #528]	@ (801082c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801061c:	fa22 f303 	lsr.w	r3, r2, r3
 8010620:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	ee07 3a90 	vmov	s15, r3
 8010628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	ee07 3a90 	vmov	s15, r3
 8010632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801063a:	4b7b      	ldr	r3, [pc, #492]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801063c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801063e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010642:	ee07 3a90 	vmov	s15, r3
 8010646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801064a:	ed97 6a03 	vldr	s12, [r7, #12]
 801064e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801065a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801065e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801066a:	e087      	b.n	801077c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	ee07 3a90 	vmov	s15, r3
 8010672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010676:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010834 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801067a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801067e:	4b6a      	ldr	r3, [pc, #424]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010686:	ee07 3a90 	vmov	s15, r3
 801068a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801068e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010692:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801069a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801069e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80106a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80106ae:	e065      	b.n	801077c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	ee07 3a90 	vmov	s15, r3
 80106b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80106be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80106c2:	4b59      	ldr	r3, [pc, #356]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80106c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106ca:	ee07 3a90 	vmov	s15, r3
 80106ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80106d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80106da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80106de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80106e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80106e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80106f2:	e043      	b.n	801077c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	ee07 3a90 	vmov	s15, r3
 80106fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801083c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010706:	4b48      	ldr	r3, [pc, #288]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801070a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801070e:	ee07 3a90 	vmov	s15, r3
 8010712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010716:	ed97 6a03 	vldr	s12, [r7, #12]
 801071a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801071e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801072a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801072e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010736:	e021      	b.n	801077c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	ee07 3a90 	vmov	s15, r3
 801073e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010742:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801074a:	4b37      	ldr	r3, [pc, #220]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801074c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801074e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010752:	ee07 3a90 	vmov	s15, r3
 8010756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801075a:	ed97 6a03 	vldr	s12, [r7, #12]
 801075e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801076a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801076e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801077a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801077c:	4b2a      	ldr	r3, [pc, #168]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801077e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010780:	0a5b      	lsrs	r3, r3, #9
 8010782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010786:	ee07 3a90 	vmov	s15, r3
 801078a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801078e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010796:	edd7 6a07 	vldr	s13, [r7, #28]
 801079a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801079e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80107a2:	ee17 2a90 	vmov	r2, s15
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80107aa:	4b1f      	ldr	r3, [pc, #124]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107ae:	0c1b      	lsrs	r3, r3, #16
 80107b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107b4:	ee07 3a90 	vmov	s15, r3
 80107b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80107c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80107c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80107c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80107d0:	ee17 2a90 	vmov	r2, s15
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80107d8:	4b13      	ldr	r3, [pc, #76]	@ (8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107dc:	0e1b      	lsrs	r3, r3, #24
 80107de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107e2:	ee07 3a90 	vmov	s15, r3
 80107e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80107ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80107f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80107f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80107fe:	ee17 2a90 	vmov	r2, s15
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010806:	e008      	b.n	801081a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2200      	movs	r2, #0
 8010818:	609a      	str	r2, [r3, #8]
}
 801081a:	bf00      	nop
 801081c:	3724      	adds	r7, #36	@ 0x24
 801081e:	46bd      	mov	sp, r7
 8010820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	58024400 	.word	0x58024400
 801082c:	03d09000 	.word	0x03d09000
 8010830:	46000000 	.word	0x46000000
 8010834:	4c742400 	.word	0x4c742400
 8010838:	4a742400 	.word	0x4a742400
 801083c:	4bbebc20 	.word	0x4bbebc20

08010840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010840:	b480      	push	{r7}
 8010842:	b089      	sub	sp, #36	@ 0x24
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010848:	4ba1      	ldr	r3, [pc, #644]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801084a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801084c:	f003 0303 	and.w	r3, r3, #3
 8010850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010852:	4b9f      	ldr	r3, [pc, #636]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010856:	0d1b      	lsrs	r3, r3, #20
 8010858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801085c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801085e:	4b9c      	ldr	r3, [pc, #624]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010862:	0a1b      	lsrs	r3, r3, #8
 8010864:	f003 0301 	and.w	r3, r3, #1
 8010868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801086a:	4b99      	ldr	r3, [pc, #612]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801086e:	08db      	lsrs	r3, r3, #3
 8010870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010874:	693a      	ldr	r2, [r7, #16]
 8010876:	fb02 f303 	mul.w	r3, r2, r3
 801087a:	ee07 3a90 	vmov	s15, r3
 801087e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2b00      	cmp	r3, #0
 801088a:	f000 8111 	beq.w	8010ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	2b02      	cmp	r3, #2
 8010892:	f000 8083 	beq.w	801099c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	2b02      	cmp	r3, #2
 801089a:	f200 80a1 	bhi.w	80109e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801089e:	69bb      	ldr	r3, [r7, #24]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d003      	beq.n	80108ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80108a4:	69bb      	ldr	r3, [r7, #24]
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d056      	beq.n	8010958 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80108aa:	e099      	b.n	80109e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108ac:	4b88      	ldr	r3, [pc, #544]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f003 0320 	and.w	r3, r3, #32
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d02d      	beq.n	8010914 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108b8:	4b85      	ldr	r3, [pc, #532]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	08db      	lsrs	r3, r3, #3
 80108be:	f003 0303 	and.w	r3, r3, #3
 80108c2:	4a84      	ldr	r2, [pc, #528]	@ (8010ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80108c4:	fa22 f303 	lsr.w	r3, r2, r3
 80108c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	ee07 3a90 	vmov	s15, r3
 80108d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	ee07 3a90 	vmov	s15, r3
 80108da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108e2:	4b7b      	ldr	r3, [pc, #492]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80108e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108ea:	ee07 3a90 	vmov	s15, r3
 80108ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80108f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80108fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80108fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801090a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801090e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010912:	e087      	b.n	8010a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	ee07 3a90 	vmov	s15, r3
 801091a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801091e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010adc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010926:	4b6a      	ldr	r3, [pc, #424]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801092a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801092e:	ee07 3a90 	vmov	s15, r3
 8010932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010936:	ed97 6a03 	vldr	s12, [r7, #12]
 801093a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801093e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801094a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801094e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010956:	e065      	b.n	8010a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	ee07 3a90 	vmov	s15, r3
 801095e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010962:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801096a:	4b59      	ldr	r3, [pc, #356]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801096e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010972:	ee07 3a90 	vmov	s15, r3
 8010976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801097a:	ed97 6a03 	vldr	s12, [r7, #12]
 801097e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801098a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801098e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801099a:	e043      	b.n	8010a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	ee07 3a90 	vmov	s15, r3
 80109a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80109aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109ae:	4b48      	ldr	r3, [pc, #288]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80109b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109b6:	ee07 3a90 	vmov	s15, r3
 80109ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109be:	ed97 6a03 	vldr	s12, [r7, #12]
 80109c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80109c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80109d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109de:	e021      	b.n	8010a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	ee07 3a90 	vmov	s15, r3
 80109e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80109ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109f2:	4b37      	ldr	r3, [pc, #220]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80109f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109fa:	ee07 3a90 	vmov	s15, r3
 80109fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010a24:	4b2a      	ldr	r3, [pc, #168]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a28:	0a5b      	lsrs	r3, r3, #9
 8010a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a2e:	ee07 3a90 	vmov	s15, r3
 8010a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a4a:	ee17 2a90 	vmov	r2, s15
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010a52:	4b1f      	ldr	r3, [pc, #124]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a56:	0c1b      	lsrs	r3, r3, #16
 8010a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a5c:	ee07 3a90 	vmov	s15, r3
 8010a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a78:	ee17 2a90 	vmov	r2, s15
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010a80:	4b13      	ldr	r3, [pc, #76]	@ (8010ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a84:	0e1b      	lsrs	r3, r3, #24
 8010a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a8a:	ee07 3a90 	vmov	s15, r3
 8010a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010aa6:	ee17 2a90 	vmov	r2, s15
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010aae:	e008      	b.n	8010ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	609a      	str	r2, [r3, #8]
}
 8010ac2:	bf00      	nop
 8010ac4:	3724      	adds	r7, #36	@ 0x24
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop
 8010ad0:	58024400 	.word	0x58024400
 8010ad4:	03d09000 	.word	0x03d09000
 8010ad8:	46000000 	.word	0x46000000
 8010adc:	4c742400 	.word	0x4c742400
 8010ae0:	4a742400 	.word	0x4a742400
 8010ae4:	4bbebc20 	.word	0x4bbebc20

08010ae8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b089      	sub	sp, #36	@ 0x24
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010af0:	4ba0      	ldr	r3, [pc, #640]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010af4:	f003 0303 	and.w	r3, r3, #3
 8010af8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010afa:	4b9e      	ldr	r3, [pc, #632]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010afe:	091b      	lsrs	r3, r3, #4
 8010b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010b06:	4b9b      	ldr	r3, [pc, #620]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b0a:	f003 0301 	and.w	r3, r3, #1
 8010b0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010b10:	4b98      	ldr	r3, [pc, #608]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b14:	08db      	lsrs	r3, r3, #3
 8010b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b1a:	693a      	ldr	r2, [r7, #16]
 8010b1c:	fb02 f303 	mul.w	r3, r2, r3
 8010b20:	ee07 3a90 	vmov	s15, r3
 8010b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f000 8111 	beq.w	8010d56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	2b02      	cmp	r3, #2
 8010b38:	f000 8083 	beq.w	8010c42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010b3c:	69bb      	ldr	r3, [r7, #24]
 8010b3e:	2b02      	cmp	r3, #2
 8010b40:	f200 80a1 	bhi.w	8010c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010b44:	69bb      	ldr	r3, [r7, #24]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d003      	beq.n	8010b52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d056      	beq.n	8010bfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010b50:	e099      	b.n	8010c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b52:	4b88      	ldr	r3, [pc, #544]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f003 0320 	and.w	r3, r3, #32
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d02d      	beq.n	8010bba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b5e:	4b85      	ldr	r3, [pc, #532]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	08db      	lsrs	r3, r3, #3
 8010b64:	f003 0303 	and.w	r3, r3, #3
 8010b68:	4a83      	ldr	r2, [pc, #524]	@ (8010d78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8010b6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	ee07 3a90 	vmov	s15, r3
 8010b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	ee07 3a90 	vmov	s15, r3
 8010b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b88:	4b7a      	ldr	r3, [pc, #488]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b90:	ee07 3a90 	vmov	s15, r3
 8010b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b98:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b9c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ba8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010bb8:	e087      	b.n	8010cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	ee07 3a90 	vmov	s15, r3
 8010bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bc4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bcc:	4b69      	ldr	r3, [pc, #420]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bd4:	ee07 3a90 	vmov	s15, r3
 8010bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8010be0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bfc:	e065      	b.n	8010cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	ee07 3a90 	vmov	s15, r3
 8010c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c08:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8010d84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c10:	4b58      	ldr	r3, [pc, #352]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c18:	ee07 3a90 	vmov	s15, r3
 8010c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c24:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c40:	e043      	b.n	8010cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	ee07 3a90 	vmov	s15, r3
 8010c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c4c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010d88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c54:	4b47      	ldr	r3, [pc, #284]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c5c:	ee07 3a90 	vmov	s15, r3
 8010c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c68:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c84:	e021      	b.n	8010cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	ee07 3a90 	vmov	s15, r3
 8010c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c90:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c98:	4b36      	ldr	r3, [pc, #216]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ca0:	ee07 3a90 	vmov	s15, r3
 8010ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010cc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010cca:	4b2a      	ldr	r3, [pc, #168]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cce:	0a5b      	lsrs	r3, r3, #9
 8010cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cd4:	ee07 3a90 	vmov	s15, r3
 8010cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cf0:	ee17 2a90 	vmov	r2, s15
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cfc:	0c1b      	lsrs	r3, r3, #16
 8010cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d02:	ee07 3a90 	vmov	s15, r3
 8010d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d1e:	ee17 2a90 	vmov	r2, s15
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010d26:	4b13      	ldr	r3, [pc, #76]	@ (8010d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d2a:	0e1b      	lsrs	r3, r3, #24
 8010d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d30:	ee07 3a90 	vmov	s15, r3
 8010d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d4c:	ee17 2a90 	vmov	r2, s15
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010d54:	e008      	b.n	8010d68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2200      	movs	r2, #0
 8010d66:	609a      	str	r2, [r3, #8]
}
 8010d68:	bf00      	nop
 8010d6a:	3724      	adds	r7, #36	@ 0x24
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr
 8010d74:	58024400 	.word	0x58024400
 8010d78:	03d09000 	.word	0x03d09000
 8010d7c:	46000000 	.word	0x46000000
 8010d80:	4c742400 	.word	0x4c742400
 8010d84:	4a742400 	.word	0x4a742400
 8010d88:	4bbebc20 	.word	0x4bbebc20

08010d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010d96:	2300      	movs	r3, #0
 8010d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010d9a:	4b53      	ldr	r3, [pc, #332]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d9e:	f003 0303 	and.w	r3, r3, #3
 8010da2:	2b03      	cmp	r3, #3
 8010da4:	d101      	bne.n	8010daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010da6:	2301      	movs	r3, #1
 8010da8:	e099      	b.n	8010ede <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010daa:	4b4f      	ldr	r3, [pc, #316]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	4a4e      	ldr	r2, [pc, #312]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010db6:	f7f1 fdff 	bl	80029b8 <HAL_GetTick>
 8010dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010dbc:	e008      	b.n	8010dd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010dbe:	f7f1 fdfb 	bl	80029b8 <HAL_GetTick>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	2b02      	cmp	r3, #2
 8010dca:	d901      	bls.n	8010dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010dcc:	2303      	movs	r3, #3
 8010dce:	e086      	b.n	8010ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010dd0:	4b45      	ldr	r3, [pc, #276]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d1f0      	bne.n	8010dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010ddc:	4b42      	ldr	r3, [pc, #264]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010de0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	031b      	lsls	r3, r3, #12
 8010dea:	493f      	ldr	r1, [pc, #252]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010dec:	4313      	orrs	r3, r2
 8010dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	3b01      	subs	r3, #1
 8010df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	689b      	ldr	r3, [r3, #8]
 8010dfe:	3b01      	subs	r3, #1
 8010e00:	025b      	lsls	r3, r3, #9
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	431a      	orrs	r2, r3
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	041b      	lsls	r3, r3, #16
 8010e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010e12:	431a      	orrs	r2, r3
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	691b      	ldr	r3, [r3, #16]
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	061b      	lsls	r3, r3, #24
 8010e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010e20:	4931      	ldr	r1, [pc, #196]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e22:	4313      	orrs	r3, r2
 8010e24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010e26:	4b30      	ldr	r3, [pc, #192]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	695b      	ldr	r3, [r3, #20]
 8010e32:	492d      	ldr	r1, [pc, #180]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e34:	4313      	orrs	r3, r2
 8010e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010e38:	4b2b      	ldr	r3, [pc, #172]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e3c:	f023 0220 	bic.w	r2, r3, #32
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	699b      	ldr	r3, [r3, #24]
 8010e44:	4928      	ldr	r1, [pc, #160]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e46:	4313      	orrs	r3, r2
 8010e48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010e4a:	4b27      	ldr	r3, [pc, #156]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e4e:	4a26      	ldr	r2, [pc, #152]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e50:	f023 0310 	bic.w	r3, r3, #16
 8010e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010e56:	4b24      	ldr	r3, [pc, #144]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010e5a:	4b24      	ldr	r3, [pc, #144]	@ (8010eec <RCCEx_PLL2_Config+0x160>)
 8010e5c:	4013      	ands	r3, r2
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	69d2      	ldr	r2, [r2, #28]
 8010e62:	00d2      	lsls	r2, r2, #3
 8010e64:	4920      	ldr	r1, [pc, #128]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e66:	4313      	orrs	r3, r2
 8010e68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e70:	f043 0310 	orr.w	r3, r3, #16
 8010e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d106      	bne.n	8010e8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e80:	4a19      	ldr	r2, [pc, #100]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010e86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010e88:	e00f      	b.n	8010eaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d106      	bne.n	8010e9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010e90:	4b15      	ldr	r3, [pc, #84]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e94:	4a14      	ldr	r2, [pc, #80]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010e9c:	e005      	b.n	8010eaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010e9e:	4b12      	ldr	r3, [pc, #72]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ea2:	4a11      	ldr	r2, [pc, #68]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4a0e      	ldr	r2, [pc, #56]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010eb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010eb6:	f7f1 fd7f 	bl	80029b8 <HAL_GetTick>
 8010eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010ebc:	e008      	b.n	8010ed0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010ebe:	f7f1 fd7b 	bl	80029b8 <HAL_GetTick>
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	1ad3      	subs	r3, r2, r3
 8010ec8:	2b02      	cmp	r3, #2
 8010eca:	d901      	bls.n	8010ed0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010ecc:	2303      	movs	r3, #3
 8010ece:	e006      	b.n	8010ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010ed0:	4b05      	ldr	r3, [pc, #20]	@ (8010ee8 <RCCEx_PLL2_Config+0x15c>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d0f0      	beq.n	8010ebe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3710      	adds	r7, #16
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	58024400 	.word	0x58024400
 8010eec:	ffff0007 	.word	0xffff0007

08010ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010efa:	2300      	movs	r3, #0
 8010efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010efe:	4b53      	ldr	r3, [pc, #332]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f02:	f003 0303 	and.w	r3, r3, #3
 8010f06:	2b03      	cmp	r3, #3
 8010f08:	d101      	bne.n	8010f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e099      	b.n	8011042 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010f0e:	4b4f      	ldr	r3, [pc, #316]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a4e      	ldr	r2, [pc, #312]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010f1a:	f7f1 fd4d 	bl	80029b8 <HAL_GetTick>
 8010f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010f20:	e008      	b.n	8010f34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010f22:	f7f1 fd49 	bl	80029b8 <HAL_GetTick>
 8010f26:	4602      	mov	r2, r0
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	2b02      	cmp	r3, #2
 8010f2e:	d901      	bls.n	8010f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010f30:	2303      	movs	r3, #3
 8010f32:	e086      	b.n	8011042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010f34:	4b45      	ldr	r3, [pc, #276]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d1f0      	bne.n	8010f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010f40:	4b42      	ldr	r3, [pc, #264]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	051b      	lsls	r3, r3, #20
 8010f4e:	493f      	ldr	r1, [pc, #252]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f50:	4313      	orrs	r3, r2
 8010f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	3b01      	subs	r3, #1
 8010f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	3b01      	subs	r3, #1
 8010f64:	025b      	lsls	r3, r3, #9
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	431a      	orrs	r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	68db      	ldr	r3, [r3, #12]
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	041b      	lsls	r3, r3, #16
 8010f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010f76:	431a      	orrs	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	691b      	ldr	r3, [r3, #16]
 8010f7c:	3b01      	subs	r3, #1
 8010f7e:	061b      	lsls	r3, r3, #24
 8010f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010f84:	4931      	ldr	r1, [pc, #196]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f86:	4313      	orrs	r3, r2
 8010f88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010f8a:	4b30      	ldr	r3, [pc, #192]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	695b      	ldr	r3, [r3, #20]
 8010f96:	492d      	ldr	r1, [pc, #180]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f98:	4313      	orrs	r3, r2
 8010f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010f9c:	4b2b      	ldr	r3, [pc, #172]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	699b      	ldr	r3, [r3, #24]
 8010fa8:	4928      	ldr	r1, [pc, #160]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010faa:	4313      	orrs	r3, r2
 8010fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010fae:	4b27      	ldr	r3, [pc, #156]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb2:	4a26      	ldr	r2, [pc, #152]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010fba:	4b24      	ldr	r3, [pc, #144]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010fbe:	4b24      	ldr	r3, [pc, #144]	@ (8011050 <RCCEx_PLL3_Config+0x160>)
 8010fc0:	4013      	ands	r3, r2
 8010fc2:	687a      	ldr	r2, [r7, #4]
 8010fc4:	69d2      	ldr	r2, [r2, #28]
 8010fc6:	00d2      	lsls	r2, r2, #3
 8010fc8:	4920      	ldr	r1, [pc, #128]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010fce:	4b1f      	ldr	r3, [pc, #124]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fd2:	4a1e      	ldr	r2, [pc, #120]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d106      	bne.n	8010fee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010fe0:	4b1a      	ldr	r3, [pc, #104]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fe4:	4a19      	ldr	r2, [pc, #100]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010fe6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010fec:	e00f      	b.n	801100e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d106      	bne.n	8011002 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010ff4:	4b15      	ldr	r3, [pc, #84]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ff8:	4a14      	ldr	r2, [pc, #80]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8010ffa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011000:	e005      	b.n	801100e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011002:	4b12      	ldr	r3, [pc, #72]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8011004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011006:	4a11      	ldr	r2, [pc, #68]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8011008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801100c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801100e:	4b0f      	ldr	r3, [pc, #60]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4a0e      	ldr	r2, [pc, #56]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8011014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801101a:	f7f1 fccd 	bl	80029b8 <HAL_GetTick>
 801101e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011020:	e008      	b.n	8011034 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011022:	f7f1 fcc9 	bl	80029b8 <HAL_GetTick>
 8011026:	4602      	mov	r2, r0
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	2b02      	cmp	r3, #2
 801102e:	d901      	bls.n	8011034 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011030:	2303      	movs	r3, #3
 8011032:	e006      	b.n	8011042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011034:	4b05      	ldr	r3, [pc, #20]	@ (801104c <RCCEx_PLL3_Config+0x15c>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801103c:	2b00      	cmp	r3, #0
 801103e:	d0f0      	beq.n	8011022 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011040:	7bfb      	ldrb	r3, [r7, #15]
}
 8011042:	4618      	mov	r0, r3
 8011044:	3710      	adds	r7, #16
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	58024400 	.word	0x58024400
 8011050:	ffff0007 	.word	0xffff0007

08011054 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d101      	bne.n	8011066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011062:	2301      	movs	r3, #1
 8011064:	e10f      	b.n	8011286 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2200      	movs	r2, #0
 801106a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a87      	ldr	r2, [pc, #540]	@ (8011290 <HAL_SPI_Init+0x23c>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d00f      	beq.n	8011096 <HAL_SPI_Init+0x42>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	4a86      	ldr	r2, [pc, #536]	@ (8011294 <HAL_SPI_Init+0x240>)
 801107c:	4293      	cmp	r3, r2
 801107e:	d00a      	beq.n	8011096 <HAL_SPI_Init+0x42>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4a84      	ldr	r2, [pc, #528]	@ (8011298 <HAL_SPI_Init+0x244>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d005      	beq.n	8011096 <HAL_SPI_Init+0x42>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	68db      	ldr	r3, [r3, #12]
 801108e:	2b0f      	cmp	r3, #15
 8011090:	d901      	bls.n	8011096 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011092:	2301      	movs	r3, #1
 8011094:	e0f7      	b.n	8011286 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 ff6c 	bl	8011f74 <SPI_GetPacketSize>
 801109c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	4a7b      	ldr	r2, [pc, #492]	@ (8011290 <HAL_SPI_Init+0x23c>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d00c      	beq.n	80110c2 <HAL_SPI_Init+0x6e>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4a79      	ldr	r2, [pc, #484]	@ (8011294 <HAL_SPI_Init+0x240>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d007      	beq.n	80110c2 <HAL_SPI_Init+0x6e>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4a78      	ldr	r2, [pc, #480]	@ (8011298 <HAL_SPI_Init+0x244>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d002      	beq.n	80110c2 <HAL_SPI_Init+0x6e>
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2b08      	cmp	r3, #8
 80110c0:	d811      	bhi.n	80110e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80110c6:	4a72      	ldr	r2, [pc, #456]	@ (8011290 <HAL_SPI_Init+0x23c>)
 80110c8:	4293      	cmp	r3, r2
 80110ca:	d009      	beq.n	80110e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4a70      	ldr	r2, [pc, #448]	@ (8011294 <HAL_SPI_Init+0x240>)
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d004      	beq.n	80110e0 <HAL_SPI_Init+0x8c>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4a6f      	ldr	r2, [pc, #444]	@ (8011298 <HAL_SPI_Init+0x244>)
 80110dc:	4293      	cmp	r3, r2
 80110de:	d104      	bne.n	80110ea <HAL_SPI_Init+0x96>
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2b10      	cmp	r3, #16
 80110e4:	d901      	bls.n	80110ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80110e6:	2301      	movs	r3, #1
 80110e8:	e0cd      	b.n	8011286 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d106      	bne.n	8011104 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2200      	movs	r2, #0
 80110fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f7f0 fe56 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2202      	movs	r2, #2
 8011108:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f022 0201 	bic.w	r2, r2, #1
 801111a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8011126:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	699b      	ldr	r3, [r3, #24]
 801112c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011130:	d119      	bne.n	8011166 <HAL_SPI_Init+0x112>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801113a:	d103      	bne.n	8011144 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011140:	2b00      	cmp	r3, #0
 8011142:	d008      	beq.n	8011156 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10c      	bne.n	8011166 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011154:	d107      	bne.n	8011166 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011164:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00f      	beq.n	8011192 <HAL_SPI_Init+0x13e>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	2b06      	cmp	r3, #6
 8011178:	d90b      	bls.n	8011192 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	430a      	orrs	r2, r1
 801118e:	601a      	str	r2, [r3, #0]
 8011190:	e007      	b.n	80111a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80111a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	69da      	ldr	r2, [r3, #28]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111aa:	431a      	orrs	r2, r3
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	431a      	orrs	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111b4:	ea42 0103 	orr.w	r1, r2, r3
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	68da      	ldr	r2, [r3, #12]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	430a      	orrs	r2, r1
 80111c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111cc:	431a      	orrs	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111d2:	431a      	orrs	r2, r3
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	699b      	ldr	r3, [r3, #24]
 80111d8:	431a      	orrs	r2, r3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	691b      	ldr	r3, [r3, #16]
 80111de:	431a      	orrs	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	695b      	ldr	r3, [r3, #20]
 80111e4:	431a      	orrs	r2, r3
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a1b      	ldr	r3, [r3, #32]
 80111ea:	431a      	orrs	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	431a      	orrs	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80111f6:	431a      	orrs	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	431a      	orrs	r2, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011202:	ea42 0103 	orr.w	r1, r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	430a      	orrs	r2, r1
 8011210:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d113      	bne.n	8011242 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801122c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011240:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	f022 0201 	bic.w	r2, r2, #1
 8011250:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00a      	beq.n	8011274 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	430a      	orrs	r2, r1
 8011272:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2201      	movs	r2, #1
 8011280:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	40013000 	.word	0x40013000
 8011294:	40003800 	.word	0x40003800
 8011298:	40003c00 	.word	0x40003c00

0801129c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b088      	sub	sp, #32
 80112a0:	af02      	add	r7, sp, #8
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	603b      	str	r3, [r7, #0]
 80112a8:	4613      	mov	r3, r2
 80112aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	3320      	adds	r3, #32
 80112b2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80112b4:	f7f1 fb80 	bl	80029b8 <HAL_GetTick>
 80112b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	d001      	beq.n	80112ca <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80112c6:	2302      	movs	r3, #2
 80112c8:	e1d1      	b.n	801166e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d002      	beq.n	80112d6 <HAL_SPI_Transmit+0x3a>
 80112d0:	88fb      	ldrh	r3, [r7, #6]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d101      	bne.n	80112da <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80112d6:	2301      	movs	r3, #1
 80112d8:	e1c9      	b.n	801166e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80112e0:	2b01      	cmp	r3, #1
 80112e2:	d101      	bne.n	80112e8 <HAL_SPI_Transmit+0x4c>
 80112e4:	2302      	movs	r3, #2
 80112e6:	e1c2      	b.n	801166e <HAL_SPI_Transmit+0x3d2>
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2201      	movs	r2, #1
 80112ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2203      	movs	r2, #3
 80112f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2200      	movs	r2, #0
 80112fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	68ba      	ldr	r2, [r7, #8]
 8011304:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	88fa      	ldrh	r2, [r7, #6]
 801130a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	88fa      	ldrh	r2, [r7, #6]
 8011312:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2200      	movs	r2, #0
 801131a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2200      	movs	r2, #0
 8011320:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2200      	movs	r2, #0
 8011328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	2200      	movs	r2, #0
 8011330:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2200      	movs	r2, #0
 8011336:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	689b      	ldr	r3, [r3, #8]
 801133c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011340:	d108      	bne.n	8011354 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	681a      	ldr	r2, [r3, #0]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011350:	601a      	str	r2, [r3, #0]
 8011352:	e009      	b.n	8011368 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011366:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	685a      	ldr	r2, [r3, #4]
 801136e:	4b96      	ldr	r3, [pc, #600]	@ (80115c8 <HAL_SPI_Transmit+0x32c>)
 8011370:	4013      	ands	r3, r2
 8011372:	88f9      	ldrh	r1, [r7, #6]
 8011374:	68fa      	ldr	r2, [r7, #12]
 8011376:	6812      	ldr	r2, [r2, #0]
 8011378:	430b      	orrs	r3, r1
 801137a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f042 0201 	orr.w	r2, r2, #1
 801138a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011394:	d107      	bne.n	80113a6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80113a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	2b0f      	cmp	r3, #15
 80113ac:	d947      	bls.n	801143e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80113ae:	e03f      	b.n	8011430 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	f003 0302 	and.w	r3, r3, #2
 80113ba:	2b02      	cmp	r3, #2
 80113bc:	d114      	bne.n	80113e8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	6812      	ldr	r2, [r2, #0]
 80113c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80113ce:	1d1a      	adds	r2, r3, #4
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80113da:	b29b      	uxth	r3, r3
 80113dc:	3b01      	subs	r3, #1
 80113de:	b29a      	uxth	r2, r3
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80113e6:	e023      	b.n	8011430 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80113e8:	f7f1 fae6 	bl	80029b8 <HAL_GetTick>
 80113ec:	4602      	mov	r2, r0
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	683a      	ldr	r2, [r7, #0]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d803      	bhi.n	8011400 <HAL_SPI_Transmit+0x164>
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113fe:	d102      	bne.n	8011406 <HAL_SPI_Transmit+0x16a>
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d114      	bne.n	8011430 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f000 fce6 	bl	8011dd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011412:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2201      	movs	r2, #1
 8011420:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2200      	movs	r2, #0
 8011428:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801142c:	2303      	movs	r3, #3
 801142e:	e11e      	b.n	801166e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011436:	b29b      	uxth	r3, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1b9      	bne.n	80113b0 <HAL_SPI_Transmit+0x114>
 801143c:	e0f1      	b.n	8011622 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	2b07      	cmp	r3, #7
 8011444:	f240 80e6 	bls.w	8011614 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011448:	e05d      	b.n	8011506 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	695b      	ldr	r3, [r3, #20]
 8011450:	f003 0302 	and.w	r3, r3, #2
 8011454:	2b02      	cmp	r3, #2
 8011456:	d132      	bne.n	80114be <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801145e:	b29b      	uxth	r3, r3
 8011460:	2b01      	cmp	r3, #1
 8011462:	d918      	bls.n	8011496 <HAL_SPI_Transmit+0x1fa>
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011468:	2b00      	cmp	r3, #0
 801146a:	d014      	beq.n	8011496 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	6812      	ldr	r2, [r2, #0]
 8011476:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801147c:	1d1a      	adds	r2, r3, #4
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011488:	b29b      	uxth	r3, r3
 801148a:	3b02      	subs	r3, #2
 801148c:	b29a      	uxth	r2, r3
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011494:	e037      	b.n	8011506 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801149a:	881a      	ldrh	r2, [r3, #0]
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114a4:	1c9a      	adds	r2, r3, #2
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	3b01      	subs	r3, #1
 80114b4:	b29a      	uxth	r2, r3
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80114bc:	e023      	b.n	8011506 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80114be:	f7f1 fa7b 	bl	80029b8 <HAL_GetTick>
 80114c2:	4602      	mov	r2, r0
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	683a      	ldr	r2, [r7, #0]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d803      	bhi.n	80114d6 <HAL_SPI_Transmit+0x23a>
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114d4:	d102      	bne.n	80114dc <HAL_SPI_Transmit+0x240>
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d114      	bne.n	8011506 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	f000 fc7b 	bl	8011dd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2201      	movs	r2, #1
 80114f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2200      	movs	r2, #0
 80114fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011502:	2303      	movs	r3, #3
 8011504:	e0b3      	b.n	801166e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801150c:	b29b      	uxth	r3, r3
 801150e:	2b00      	cmp	r3, #0
 8011510:	d19b      	bne.n	801144a <HAL_SPI_Transmit+0x1ae>
 8011512:	e086      	b.n	8011622 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	695b      	ldr	r3, [r3, #20]
 801151a:	f003 0302 	and.w	r3, r3, #2
 801151e:	2b02      	cmp	r3, #2
 8011520:	d154      	bne.n	80115cc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011528:	b29b      	uxth	r3, r3
 801152a:	2b03      	cmp	r3, #3
 801152c:	d918      	bls.n	8011560 <HAL_SPI_Transmit+0x2c4>
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011532:	2b40      	cmp	r3, #64	@ 0x40
 8011534:	d914      	bls.n	8011560 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	6812      	ldr	r2, [r2, #0]
 8011540:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011546:	1d1a      	adds	r2, r3, #4
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011552:	b29b      	uxth	r3, r3
 8011554:	3b04      	subs	r3, #4
 8011556:	b29a      	uxth	r2, r3
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801155e:	e059      	b.n	8011614 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011566:	b29b      	uxth	r3, r3
 8011568:	2b01      	cmp	r3, #1
 801156a:	d917      	bls.n	801159c <HAL_SPI_Transmit+0x300>
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011570:	2b00      	cmp	r3, #0
 8011572:	d013      	beq.n	801159c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011578:	881a      	ldrh	r2, [r3, #0]
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011582:	1c9a      	adds	r2, r3, #2
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801158e:	b29b      	uxth	r3, r3
 8011590:	3b02      	subs	r3, #2
 8011592:	b29a      	uxth	r2, r3
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801159a:	e03b      	b.n	8011614 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	3320      	adds	r3, #32
 80115a6:	7812      	ldrb	r2, [r2, #0]
 80115a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80115ae:	1c5a      	adds	r2, r3, #1
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	3b01      	subs	r3, #1
 80115be:	b29a      	uxth	r2, r3
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80115c6:	e025      	b.n	8011614 <HAL_SPI_Transmit+0x378>
 80115c8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115cc:	f7f1 f9f4 	bl	80029b8 <HAL_GetTick>
 80115d0:	4602      	mov	r2, r0
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	683a      	ldr	r2, [r7, #0]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d803      	bhi.n	80115e4 <HAL_SPI_Transmit+0x348>
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e2:	d102      	bne.n	80115ea <HAL_SPI_Transmit+0x34e>
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d114      	bne.n	8011614 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80115ea:	68f8      	ldr	r0, [r7, #12]
 80115ec:	f000 fbf4 	bl	8011dd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2201      	movs	r2, #1
 8011604:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2200      	movs	r2, #0
 801160c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011610:	2303      	movs	r3, #3
 8011612:	e02c      	b.n	801166e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801161a:	b29b      	uxth	r3, r3
 801161c:	2b00      	cmp	r3, #0
 801161e:	f47f af79 	bne.w	8011514 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	9300      	str	r3, [sp, #0]
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	2200      	movs	r2, #0
 801162a:	2108      	movs	r1, #8
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f000 fc73 	bl	8011f18 <SPI_WaitOnFlagUntilTimeout>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d007      	beq.n	8011648 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801163e:	f043 0220 	orr.w	r2, r3, #32
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011648:	68f8      	ldr	r0, [r7, #12]
 801164a:	f000 fbc5 	bl	8011dd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2201      	movs	r2, #1
 8011652:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2200      	movs	r2, #0
 801165a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011664:	2b00      	cmp	r3, #0
 8011666:	d001      	beq.n	801166c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011668:	2301      	movs	r3, #1
 801166a:	e000      	b.n	801166e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801166c:	2300      	movs	r3, #0
  }
}
 801166e:	4618      	mov	r0, r3
 8011670:	3718      	adds	r7, #24
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop

08011678 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	4613      	mov	r3, r2
 8011684:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801168c:	b2db      	uxtb	r3, r3
 801168e:	2b01      	cmp	r3, #1
 8011690:	d001      	beq.n	8011696 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8011692:	2302      	movs	r3, #2
 8011694:	e126      	b.n	80118e4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d002      	beq.n	80116a2 <HAL_SPI_Transmit_DMA+0x2a>
 801169c:	88fb      	ldrh	r3, [r7, #6]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d101      	bne.n	80116a6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80116a2:	2301      	movs	r3, #1
 80116a4:	e11e      	b.n	80118e4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d101      	bne.n	80116b4 <HAL_SPI_Transmit_DMA+0x3c>
 80116b0:	2302      	movs	r3, #2
 80116b2:	e117      	b.n	80118e4 <HAL_SPI_Transmit_DMA+0x26c>
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2201      	movs	r2, #1
 80116b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2203      	movs	r2, #3
 80116c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2200      	movs	r2, #0
 80116c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	68ba      	ldr	r2, [r7, #8]
 80116d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	88fa      	ldrh	r2, [r7, #6]
 80116d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	88fa      	ldrh	r2, [r7, #6]
 80116de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2200      	movs	r2, #0
 80116e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2200      	movs	r2, #0
 80116ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2200      	movs	r2, #0
 80116f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2200      	movs	r2, #0
 8011700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	689b      	ldr	r3, [r3, #8]
 8011708:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801170c:	d108      	bne.n	8011720 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801171c:	601a      	str	r2, [r3, #0]
 801171e:	e009      	b.n	8011734 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011732:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	2b0f      	cmp	r3, #15
 801173a:	d905      	bls.n	8011748 <HAL_SPI_Transmit_DMA+0xd0>
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011740:	699b      	ldr	r3, [r3, #24]
 8011742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011746:	d10f      	bne.n	8011768 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801174c:	2b07      	cmp	r3, #7
 801174e:	d911      	bls.n	8011774 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011754:	699b      	ldr	r3, [r3, #24]
 8011756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801175a:	d00b      	beq.n	8011774 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011760:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011766:	d005      	beq.n	8011774 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2200      	movs	r2, #0
 801176c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8011770:	2301      	movs	r3, #1
 8011772:	e0b7      	b.n	80118e4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	2b07      	cmp	r3, #7
 801177a:	d820      	bhi.n	80117be <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011780:	699b      	ldr	r3, [r3, #24]
 8011782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011786:	d109      	bne.n	801179c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801178e:	b29b      	uxth	r3, r3
 8011790:	3301      	adds	r3, #1
 8011792:	105b      	asrs	r3, r3, #1
 8011794:	b29a      	uxth	r2, r3
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80117a0:	699b      	ldr	r3, [r3, #24]
 80117a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80117a6:	d11e      	bne.n	80117e6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	3303      	adds	r3, #3
 80117b2:	109b      	asrs	r3, r3, #2
 80117b4:	b29a      	uxth	r2, r3
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80117bc:	e013      	b.n	80117e6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	2b0f      	cmp	r3, #15
 80117c4:	d80f      	bhi.n	80117e6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80117ca:	699b      	ldr	r3, [r3, #24]
 80117cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80117d0:	d109      	bne.n	80117e6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117d8:	b29b      	uxth	r3, r3
 80117da:	3301      	adds	r3, #1
 80117dc:	105b      	asrs	r3, r3, #1
 80117de:	b29a      	uxth	r2, r3
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80117ea:	4a40      	ldr	r2, [pc, #256]	@ (80118ec <HAL_SPI_Transmit_DMA+0x274>)
 80117ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80117f2:	4a3f      	ldr	r2, [pc, #252]	@ (80118f0 <HAL_SPI_Transmit_DMA+0x278>)
 80117f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80117fa:	4a3e      	ldr	r2, [pc, #248]	@ (80118f4 <HAL_SPI_Transmit_DMA+0x27c>)
 80117fc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011802:	2200      	movs	r2, #0
 8011804:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	689a      	ldr	r2, [r3, #8]
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011814:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801181e:	4619      	mov	r1, r3
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	3320      	adds	r3, #32
 8011826:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801182e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011830:	f7f3 f894 	bl	800495c <HAL_DMA_Start_IT>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d011      	beq.n	801185e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011840:	f043 0210 	orr.w	r2, r3, #16
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2201      	movs	r2, #1
 801184e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	2200      	movs	r2, #0
 8011856:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 801185a:	2301      	movs	r3, #1
 801185c:	e042      	b.n	80118e4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011862:	69db      	ldr	r3, [r3, #28]
 8011864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011868:	d108      	bne.n	801187c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	6859      	ldr	r1, [r3, #4]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	681a      	ldr	r2, [r3, #0]
 8011874:	4b20      	ldr	r3, [pc, #128]	@ (80118f8 <HAL_SPI_Transmit_DMA+0x280>)
 8011876:	400b      	ands	r3, r1
 8011878:	6053      	str	r3, [r2, #4]
 801187a:	e009      	b.n	8011890 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	685a      	ldr	r2, [r3, #4]
 8011882:	4b1d      	ldr	r3, [pc, #116]	@ (80118f8 <HAL_SPI_Transmit_DMA+0x280>)
 8011884:	4013      	ands	r3, r2
 8011886:	88f9      	ldrh	r1, [r7, #6]
 8011888:	68fa      	ldr	r2, [r7, #12]
 801188a:	6812      	ldr	r2, [r2, #0]
 801188c:	430b      	orrs	r3, r1
 801188e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	689a      	ldr	r2, [r3, #8]
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801189e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	691a      	ldr	r2, [r3, #16]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80118ae:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f042 0201 	orr.w	r2, r2, #1
 80118be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80118c8:	d107      	bne.n	80118da <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80118d8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	2200      	movs	r2, #0
 80118de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80118e2:	2300      	movs	r3, #0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	08011d43 	.word	0x08011d43
 80118f0:	08011cfd 	.word	0x08011cfd
 80118f4:	08011d5f 	.word	0x08011d5f
 80118f8:	ffff0000 	.word	0xffff0000

080118fc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b08a      	sub	sp, #40	@ 0x28
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	691b      	ldr	r3, [r3, #16]
 801190a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	695b      	ldr	r3, [r3, #20]
 8011912:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011914:	6a3a      	ldr	r2, [r7, #32]
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	4013      	ands	r3, r2
 801191a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011924:	2300      	movs	r3, #0
 8011926:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801192e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	3330      	adds	r3, #48	@ 0x30
 8011936:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011938:	69fb      	ldr	r3, [r7, #28]
 801193a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801193e:	2b00      	cmp	r3, #0
 8011940:	d010      	beq.n	8011964 <HAL_SPI_IRQHandler+0x68>
 8011942:	6a3b      	ldr	r3, [r7, #32]
 8011944:	f003 0308 	and.w	r3, r3, #8
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00b      	beq.n	8011964 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	699a      	ldr	r2, [r3, #24]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801195a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f000 f9c3 	bl	8011ce8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011962:	e192      	b.n	8011c8a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801196a:	2b00      	cmp	r3, #0
 801196c:	d113      	bne.n	8011996 <HAL_SPI_IRQHandler+0x9a>
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	f003 0320 	and.w	r3, r3, #32
 8011974:	2b00      	cmp	r3, #0
 8011976:	d10e      	bne.n	8011996 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011978:	69bb      	ldr	r3, [r7, #24]
 801197a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801197e:	2b00      	cmp	r3, #0
 8011980:	d009      	beq.n	8011996 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	4798      	blx	r3
    hspi->RxISR(hspi);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	4798      	blx	r3
    handled = 1UL;
 8011992:	2301      	movs	r3, #1
 8011994:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011996:	69bb      	ldr	r3, [r7, #24]
 8011998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801199c:	2b00      	cmp	r3, #0
 801199e:	d10f      	bne.n	80119c0 <HAL_SPI_IRQHandler+0xc4>
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	f003 0301 	and.w	r3, r3, #1
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00a      	beq.n	80119c0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80119aa:	69bb      	ldr	r3, [r7, #24]
 80119ac:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d105      	bne.n	80119c0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	4798      	blx	r3
    handled = 1UL;
 80119bc:	2301      	movs	r3, #1
 80119be:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	f003 0320 	and.w	r3, r3, #32
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d10f      	bne.n	80119ea <HAL_SPI_IRQHandler+0xee>
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	f003 0302 	and.w	r3, r3, #2
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d00a      	beq.n	80119ea <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d105      	bne.n	80119ea <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	4798      	blx	r3
    handled = 1UL;
 80119e6:	2301      	movs	r3, #1
 80119e8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80119ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f040 8147 	bne.w	8011c80 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	f003 0308 	and.w	r3, r3, #8
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	f000 808b 	beq.w	8011b14 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	699a      	ldr	r2, [r3, #24]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f042 0208 	orr.w	r2, r2, #8
 8011a0c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	699a      	ldr	r2, [r3, #24]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f042 0210 	orr.w	r2, r2, #16
 8011a1c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	699a      	ldr	r2, [r3, #24]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011a2c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	691a      	ldr	r2, [r3, #16]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f022 0208 	bic.w	r2, r2, #8
 8011a3c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	689b      	ldr	r3, [r3, #8]
 8011a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d13d      	bne.n	8011ac8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011a4c:	e036      	b.n	8011abc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	68db      	ldr	r3, [r3, #12]
 8011a52:	2b0f      	cmp	r3, #15
 8011a54:	d90b      	bls.n	8011a6e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681a      	ldr	r2, [r3, #0]
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011a60:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a66:	1d1a      	adds	r2, r3, #4
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	665a      	str	r2, [r3, #100]	@ 0x64
 8011a6c:	e01d      	b.n	8011aaa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	2b07      	cmp	r3, #7
 8011a74:	d90b      	bls.n	8011a8e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a7a:	68fa      	ldr	r2, [r7, #12]
 8011a7c:	8812      	ldrh	r2, [r2, #0]
 8011a7e:	b292      	uxth	r2, r2
 8011a80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a86:	1c9a      	adds	r2, r3, #2
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	665a      	str	r2, [r3, #100]	@ 0x64
 8011a8c:	e00d      	b.n	8011aaa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a9a:	7812      	ldrb	r2, [r2, #0]
 8011a9c:	b2d2      	uxtb	r2, r2
 8011a9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011aa4:	1c5a      	adds	r2, r3, #1
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	3b01      	subs	r3, #1
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d1c2      	bne.n	8011a4e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 f985 	bl	8011dd8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d003      	beq.n	8011ae8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f000 f8f7 	bl	8011cd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011ae6:	e0d0      	b.n	8011c8a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011ae8:	7cfb      	ldrb	r3, [r7, #19]
 8011aea:	2b05      	cmp	r3, #5
 8011aec:	d103      	bne.n	8011af6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f000 f8dc 	bl	8011cac <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011af4:	e0c6      	b.n	8011c84 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011af6:	7cfb      	ldrb	r3, [r7, #19]
 8011af8:	2b04      	cmp	r3, #4
 8011afa:	d103      	bne.n	8011b04 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f000 f8cb 	bl	8011c98 <HAL_SPI_RxCpltCallback>
    return;
 8011b02:	e0bf      	b.n	8011c84 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011b04:	7cfb      	ldrb	r3, [r7, #19]
 8011b06:	2b03      	cmp	r3, #3
 8011b08:	f040 80bc 	bne.w	8011c84 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7ef fd9d 	bl	800164c <HAL_SPI_TxCpltCallback>
    return;
 8011b12:	e0b7      	b.n	8011c84 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f000 80b5 	beq.w	8011c8a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d00f      	beq.n	8011b4a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b30:	f043 0204 	orr.w	r2, r3, #4
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	699a      	ldr	r2, [r3, #24]
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011b48:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d00f      	beq.n	8011b74 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b5a:	f043 0201 	orr.w	r2, r3, #1
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	699a      	ldr	r2, [r3, #24]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b72:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011b74:	69bb      	ldr	r3, [r7, #24]
 8011b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d00f      	beq.n	8011b9e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b84:	f043 0208 	orr.w	r2, r3, #8
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	699a      	ldr	r2, [r3, #24]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011b9c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	f003 0320 	and.w	r3, r3, #32
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00f      	beq.n	8011bc8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011bae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	699a      	ldr	r2, [r3, #24]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f042 0220 	orr.w	r2, r2, #32
 8011bc6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d05a      	beq.n	8011c88 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	f022 0201 	bic.w	r2, r2, #1
 8011be0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	6919      	ldr	r1, [r3, #16]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	4b28      	ldr	r3, [pc, #160]	@ (8011c90 <HAL_SPI_IRQHandler+0x394>)
 8011bee:	400b      	ands	r3, r1
 8011bf0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011bf8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8011bfc:	d138      	bne.n	8011c70 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	689a      	ldr	r2, [r3, #8]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011c0c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d013      	beq.n	8011c3e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8011c94 <HAL_SPI_IRQHandler+0x398>)
 8011c1c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7f3 fc22 	bl	800546c <HAL_DMA_Abort_IT>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d007      	beq.n	8011c3e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d020      	beq.n	8011c88 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c4a:	4a12      	ldr	r2, [pc, #72]	@ (8011c94 <HAL_SPI_IRQHandler+0x398>)
 8011c4c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7f3 fc0a 	bl	800546c <HAL_DMA_Abort_IT>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d014      	beq.n	8011c88 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011c6e:	e00b      	b.n	8011c88 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2201      	movs	r2, #1
 8011c74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f000 f82b 	bl	8011cd4 <HAL_SPI_ErrorCallback>
    return;
 8011c7e:	e003      	b.n	8011c88 <HAL_SPI_IRQHandler+0x38c>
    return;
 8011c80:	bf00      	nop
 8011c82:	e002      	b.n	8011c8a <HAL_SPI_IRQHandler+0x38e>
    return;
 8011c84:	bf00      	nop
 8011c86:	e000      	b.n	8011c8a <HAL_SPI_IRQHandler+0x38e>
    return;
 8011c88:	bf00      	nop
  }
}
 8011c8a:	3728      	adds	r7, #40	@ 0x28
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	fffffc94 	.word	0xfffffc94
 8011c94:	08011da5 	.word	0x08011da5

08011c98 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011ca0:	bf00      	nop
 8011ca2:	370c      	adds	r7, #12
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr

08011cac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011cb4:	bf00      	nop
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8011cc8:	bf00      	nop
 8011cca:	370c      	adds	r7, #12
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr

08011cd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011cdc:	bf00      	nop
 8011cde:	370c      	adds	r7, #12
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr

08011ce8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8011cf0:	bf00      	nop
 8011cf2:	370c      	adds	r7, #12
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d08:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	2b07      	cmp	r3, #7
 8011d14:	d011      	beq.n	8011d3a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d1a:	69db      	ldr	r3, [r3, #28]
 8011d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011d20:	d103      	bne.n	8011d2a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8011d22:	68f8      	ldr	r0, [r7, #12]
 8011d24:	f7ef fc92 	bl	800164c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011d28:	e007      	b.n	8011d3a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	691a      	ldr	r2, [r3, #16]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	f042 0208 	orr.w	r2, r2, #8
 8011d38:	611a      	str	r2, [r3, #16]
}
 8011d3a:	bf00      	nop
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}

08011d42 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b084      	sub	sp, #16
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d4e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f7ff ffb5 	bl	8011cc0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011d56:	bf00      	nop
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b084      	sub	sp, #16
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d6a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f7f4 fcfb 	bl	8006768 <HAL_DMA_GetError>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b02      	cmp	r3, #2
 8011d76:	d011      	beq.n	8011d9c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f000 f82d 	bl	8011dd8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011d84:	f043 0210 	orr.w	r2, r3, #16
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2201      	movs	r2, #1
 8011d92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8011d96:	68f8      	ldr	r0, [r7, #12]
 8011d98:	f7ff ff9c 	bl	8011cd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8011d9c:	bf00      	nop
 8011d9e:	3710      	adds	r7, #16
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b084      	sub	sp, #16
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011db0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2200      	movs	r2, #0
 8011db6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	f7ff ff82 	bl	8011cd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011dd0:	bf00      	nop
 8011dd2:	3710      	adds	r7, #16
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}

08011dd8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b085      	sub	sp, #20
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	695b      	ldr	r3, [r3, #20]
 8011de6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	699a      	ldr	r2, [r3, #24]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f042 0208 	orr.w	r2, r2, #8
 8011df6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	699a      	ldr	r2, [r3, #24]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f042 0210 	orr.w	r2, r2, #16
 8011e06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	681a      	ldr	r2, [r3, #0]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f022 0201 	bic.w	r2, r2, #1
 8011e16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	6919      	ldr	r1, [r3, #16]
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	4b3c      	ldr	r3, [pc, #240]	@ (8011f14 <SPI_CloseTransfer+0x13c>)
 8011e24:	400b      	ands	r3, r1
 8011e26:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	689a      	ldr	r2, [r3, #8]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011e36:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011e3e:	b2db      	uxtb	r3, r3
 8011e40:	2b04      	cmp	r3, #4
 8011e42:	d014      	beq.n	8011e6e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f003 0320 	and.w	r3, r3, #32
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d00f      	beq.n	8011e6e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	699a      	ldr	r2, [r3, #24]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f042 0220 	orr.w	r2, r2, #32
 8011e6c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b03      	cmp	r3, #3
 8011e78:	d014      	beq.n	8011ea4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d00f      	beq.n	8011ea4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e8a:	f043 0204 	orr.w	r2, r3, #4
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	699a      	ldr	r2, [r3, #24]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011ea2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d00f      	beq.n	8011ece <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011eb4:	f043 0201 	orr.w	r2, r3, #1
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	699a      	ldr	r2, [r3, #24]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ecc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00f      	beq.n	8011ef8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ede:	f043 0208 	orr.w	r2, r3, #8
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	699a      	ldr	r2, [r3, #24]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011ef6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2200      	movs	r2, #0
 8011efc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011f08:	bf00      	nop
 8011f0a:	3714      	adds	r7, #20
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr
 8011f14:	fffffc90 	.word	0xfffffc90

08011f18 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	603b      	str	r3, [r7, #0]
 8011f24:	4613      	mov	r3, r2
 8011f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011f28:	e010      	b.n	8011f4c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011f2a:	f7f0 fd45 	bl	80029b8 <HAL_GetTick>
 8011f2e:	4602      	mov	r2, r0
 8011f30:	69bb      	ldr	r3, [r7, #24]
 8011f32:	1ad3      	subs	r3, r2, r3
 8011f34:	683a      	ldr	r2, [r7, #0]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d803      	bhi.n	8011f42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f40:	d102      	bne.n	8011f48 <SPI_WaitOnFlagUntilTimeout+0x30>
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d101      	bne.n	8011f4c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011f48:	2303      	movs	r3, #3
 8011f4a:	e00f      	b.n	8011f6c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	695a      	ldr	r2, [r3, #20]
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	4013      	ands	r3, r2
 8011f56:	68ba      	ldr	r2, [r7, #8]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	bf0c      	ite	eq
 8011f5c:	2301      	moveq	r3, #1
 8011f5e:	2300      	movne	r3, #0
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	461a      	mov	r2, r3
 8011f64:	79fb      	ldrb	r3, [r7, #7]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d0df      	beq.n	8011f2a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011f6a:	2300      	movs	r3, #0
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3710      	adds	r7, #16
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011f74:	b480      	push	{r7}
 8011f76:	b085      	sub	sp, #20
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f80:	095b      	lsrs	r3, r3, #5
 8011f82:	3301      	adds	r3, #1
 8011f84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	3307      	adds	r3, #7
 8011f92:	08db      	lsrs	r3, r3, #3
 8011f94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	68fa      	ldr	r2, [r7, #12]
 8011f9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3714      	adds	r7, #20
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b082      	sub	sp, #8
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d101      	bne.n	8011fbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e042      	b.n	8012042 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d106      	bne.n	8011fd4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f7ef ff82 	bl	8001ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2224      	movs	r2, #36	@ 0x24
 8011fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	f022 0201 	bic.w	r2, r2, #1
 8011fea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f001 fa6b 	bl	80134d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 fd00 	bl	8012a00 <UART_SetConfig>
 8012000:	4603      	mov	r3, r0
 8012002:	2b01      	cmp	r3, #1
 8012004:	d101      	bne.n	801200a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012006:	2301      	movs	r3, #1
 8012008:	e01b      	b.n	8012042 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	685a      	ldr	r2, [r3, #4]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012018:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	689a      	ldr	r2, [r3, #8]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012028:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f042 0201 	orr.w	r2, r2, #1
 8012038:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f001 faea 	bl	8013614 <UART_CheckIdleState>
 8012040:	4603      	mov	r3, r0
}
 8012042:	4618      	mov	r0, r3
 8012044:	3708      	adds	r7, #8
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b08a      	sub	sp, #40	@ 0x28
 801204e:	af02      	add	r7, sp, #8
 8012050:	60f8      	str	r0, [r7, #12]
 8012052:	60b9      	str	r1, [r7, #8]
 8012054:	603b      	str	r3, [r7, #0]
 8012056:	4613      	mov	r3, r2
 8012058:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012060:	2b20      	cmp	r3, #32
 8012062:	d17b      	bne.n	801215c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d002      	beq.n	8012070 <HAL_UART_Transmit+0x26>
 801206a:	88fb      	ldrh	r3, [r7, #6]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d101      	bne.n	8012074 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012070:	2301      	movs	r3, #1
 8012072:	e074      	b.n	801215e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2200      	movs	r2, #0
 8012078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2221      	movs	r2, #33	@ 0x21
 8012080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012084:	f7f0 fc98 	bl	80029b8 <HAL_GetTick>
 8012088:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	88fa      	ldrh	r2, [r7, #6]
 801208e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	88fa      	ldrh	r2, [r7, #6]
 8012096:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80120a2:	d108      	bne.n	80120b6 <HAL_UART_Transmit+0x6c>
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	691b      	ldr	r3, [r3, #16]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d104      	bne.n	80120b6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80120ac:	2300      	movs	r3, #0
 80120ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	61bb      	str	r3, [r7, #24]
 80120b4:	e003      	b.n	80120be <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80120be:	e030      	b.n	8012122 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	2200      	movs	r2, #0
 80120c8:	2180      	movs	r1, #128	@ 0x80
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f001 fb4c 	bl	8013768 <UART_WaitOnFlagUntilTimeout>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d005      	beq.n	80120e2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2220      	movs	r2, #32
 80120da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80120de:	2303      	movs	r3, #3
 80120e0:	e03d      	b.n	801215e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d10b      	bne.n	8012100 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	881b      	ldrh	r3, [r3, #0]
 80120ec:	461a      	mov	r2, r3
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80120f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	3302      	adds	r3, #2
 80120fc:	61bb      	str	r3, [r7, #24]
 80120fe:	e007      	b.n	8012110 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	781a      	ldrb	r2, [r3, #0]
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	3301      	adds	r3, #1
 801210e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012116:	b29b      	uxth	r3, r3
 8012118:	3b01      	subs	r3, #1
 801211a:	b29a      	uxth	r2, r3
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012128:	b29b      	uxth	r3, r3
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1c8      	bne.n	80120c0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	9300      	str	r3, [sp, #0]
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	2200      	movs	r2, #0
 8012136:	2140      	movs	r1, #64	@ 0x40
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	f001 fb15 	bl	8013768 <UART_WaitOnFlagUntilTimeout>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d005      	beq.n	8012150 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2220      	movs	r2, #32
 8012148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801214c:	2303      	movs	r3, #3
 801214e:	e006      	b.n	801215e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	2220      	movs	r2, #32
 8012154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012158:	2300      	movs	r3, #0
 801215a:	e000      	b.n	801215e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801215c:	2302      	movs	r3, #2
  }
}
 801215e:	4618      	mov	r0, r3
 8012160:	3720      	adds	r7, #32
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
	...

08012168 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b08a      	sub	sp, #40	@ 0x28
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	4613      	mov	r3, r2
 8012174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801217c:	2b20      	cmp	r3, #32
 801217e:	d137      	bne.n	80121f0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d002      	beq.n	801218c <HAL_UART_Receive_DMA+0x24>
 8012186:	88fb      	ldrh	r3, [r7, #6]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d101      	bne.n	8012190 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801218c:	2301      	movs	r3, #1
 801218e:	e030      	b.n	80121f2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2200      	movs	r2, #0
 8012194:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4a18      	ldr	r2, [pc, #96]	@ (80121fc <HAL_UART_Receive_DMA+0x94>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d01f      	beq.n	80121e0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d018      	beq.n	80121e0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	e853 3f00 	ldrex	r3, [r3]
 80121ba:	613b      	str	r3, [r7, #16]
   return(result);
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80121c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	461a      	mov	r2, r3
 80121ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121cc:	623b      	str	r3, [r7, #32]
 80121ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d0:	69f9      	ldr	r1, [r7, #28]
 80121d2:	6a3a      	ldr	r2, [r7, #32]
 80121d4:	e841 2300 	strex	r3, r2, [r1]
 80121d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d1e6      	bne.n	80121ae <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80121e0:	88fb      	ldrh	r3, [r7, #6]
 80121e2:	461a      	mov	r2, r3
 80121e4:	68b9      	ldr	r1, [r7, #8]
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f001 fb2c 	bl	8013844 <UART_Start_Receive_DMA>
 80121ec:	4603      	mov	r3, r0
 80121ee:	e000      	b.n	80121f2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80121f0:	2302      	movs	r3, #2
  }
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3728      	adds	r7, #40	@ 0x28
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	58000c00 	.word	0x58000c00

08012200 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b0ba      	sub	sp, #232	@ 0xe8
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	69db      	ldr	r3, [r3, #28]
 801220e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012226:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801222a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801222e:	4013      	ands	r3, r2
 8012230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012238:	2b00      	cmp	r3, #0
 801223a:	d11b      	bne.n	8012274 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801223c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012240:	f003 0320 	and.w	r3, r3, #32
 8012244:	2b00      	cmp	r3, #0
 8012246:	d015      	beq.n	8012274 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801224c:	f003 0320 	and.w	r3, r3, #32
 8012250:	2b00      	cmp	r3, #0
 8012252:	d105      	bne.n	8012260 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801225c:	2b00      	cmp	r3, #0
 801225e:	d009      	beq.n	8012274 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012264:	2b00      	cmp	r3, #0
 8012266:	f000 8393 	beq.w	8012990 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	4798      	blx	r3
      }
      return;
 8012272:	e38d      	b.n	8012990 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012278:	2b00      	cmp	r3, #0
 801227a:	f000 8123 	beq.w	80124c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801227e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012282:	4b8d      	ldr	r3, [pc, #564]	@ (80124b8 <HAL_UART_IRQHandler+0x2b8>)
 8012284:	4013      	ands	r3, r2
 8012286:	2b00      	cmp	r3, #0
 8012288:	d106      	bne.n	8012298 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801228a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801228e:	4b8b      	ldr	r3, [pc, #556]	@ (80124bc <HAL_UART_IRQHandler+0x2bc>)
 8012290:	4013      	ands	r3, r2
 8012292:	2b00      	cmp	r3, #0
 8012294:	f000 8116 	beq.w	80124c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801229c:	f003 0301 	and.w	r3, r3, #1
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d011      	beq.n	80122c8 <HAL_UART_IRQHandler+0xc8>
 80122a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80122a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00b      	beq.n	80122c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2201      	movs	r2, #1
 80122b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122be:	f043 0201 	orr.w	r2, r3, #1
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80122c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122cc:	f003 0302 	and.w	r3, r3, #2
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d011      	beq.n	80122f8 <HAL_UART_IRQHandler+0xf8>
 80122d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80122d8:	f003 0301 	and.w	r3, r3, #1
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00b      	beq.n	80122f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	2202      	movs	r2, #2
 80122e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122ee:	f043 0204 	orr.w	r2, r3, #4
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80122f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122fc:	f003 0304 	and.w	r3, r3, #4
 8012300:	2b00      	cmp	r3, #0
 8012302:	d011      	beq.n	8012328 <HAL_UART_IRQHandler+0x128>
 8012304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012308:	f003 0301 	and.w	r3, r3, #1
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00b      	beq.n	8012328 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	2204      	movs	r2, #4
 8012316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801231e:	f043 0202 	orr.w	r2, r3, #2
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801232c:	f003 0308 	and.w	r3, r3, #8
 8012330:	2b00      	cmp	r3, #0
 8012332:	d017      	beq.n	8012364 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012338:	f003 0320 	and.w	r3, r3, #32
 801233c:	2b00      	cmp	r3, #0
 801233e:	d105      	bne.n	801234c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012340:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012344:	4b5c      	ldr	r3, [pc, #368]	@ (80124b8 <HAL_UART_IRQHandler+0x2b8>)
 8012346:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00b      	beq.n	8012364 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2208      	movs	r2, #8
 8012352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801235a:	f043 0208 	orr.w	r2, r3, #8
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801236c:	2b00      	cmp	r3, #0
 801236e:	d012      	beq.n	8012396 <HAL_UART_IRQHandler+0x196>
 8012370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012374:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00c      	beq.n	8012396 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801238c:	f043 0220 	orr.w	r2, r3, #32
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801239c:	2b00      	cmp	r3, #0
 801239e:	f000 82f9 	beq.w	8012994 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80123a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123a6:	f003 0320 	and.w	r3, r3, #32
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d013      	beq.n	80123d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80123ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80123b2:	f003 0320 	and.w	r3, r3, #32
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d105      	bne.n	80123c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80123ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80123be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d007      	beq.n	80123d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d003      	beq.n	80123d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	689b      	ldr	r3, [r3, #8]
 80123e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123ea:	2b40      	cmp	r3, #64	@ 0x40
 80123ec:	d005      	beq.n	80123fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80123ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80123f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d054      	beq.n	80124a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f001 fb0a 	bl	8013a14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	689b      	ldr	r3, [r3, #8]
 8012406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801240a:	2b40      	cmp	r3, #64	@ 0x40
 801240c:	d146      	bne.n	801249c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	3308      	adds	r3, #8
 8012414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012418:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801241c:	e853 3f00 	ldrex	r3, [r3]
 8012420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801242c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	3308      	adds	r3, #8
 8012436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801243a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801243e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801244a:	e841 2300 	strex	r3, r2, [r1]
 801244e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012456:	2b00      	cmp	r3, #0
 8012458:	d1d9      	bne.n	801240e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012460:	2b00      	cmp	r3, #0
 8012462:	d017      	beq.n	8012494 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801246a:	4a15      	ldr	r2, [pc, #84]	@ (80124c0 <HAL_UART_IRQHandler+0x2c0>)
 801246c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012474:	4618      	mov	r0, r3
 8012476:	f7f2 fff9 	bl	800546c <HAL_DMA_Abort_IT>
 801247a:	4603      	mov	r3, r0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d019      	beq.n	80124b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801248e:	4610      	mov	r0, r2
 8012490:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012492:	e00f      	b.n	80124b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f000 fa9d 	bl	80129d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801249a:	e00b      	b.n	80124b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f000 fa99 	bl	80129d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124a2:	e007      	b.n	80124b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 fa95 	bl	80129d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2200      	movs	r2, #0
 80124ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80124b2:	e26f      	b.n	8012994 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124b4:	bf00      	nop
    return;
 80124b6:	e26d      	b.n	8012994 <HAL_UART_IRQHandler+0x794>
 80124b8:	10000001 	.word	0x10000001
 80124bc:	04000120 	.word	0x04000120
 80124c0:	08013cc7 	.word	0x08013cc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	f040 8203 	bne.w	80128d4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80124ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80124d2:	f003 0310 	and.w	r3, r3, #16
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	f000 81fc 	beq.w	80128d4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80124dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80124e0:	f003 0310 	and.w	r3, r3, #16
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	f000 81f5 	beq.w	80128d4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	2210      	movs	r2, #16
 80124f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124fc:	2b40      	cmp	r3, #64	@ 0x40
 80124fe:	f040 816d 	bne.w	80127dc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4aa4      	ldr	r2, [pc, #656]	@ (801279c <HAL_UART_IRQHandler+0x59c>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d068      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	4aa1      	ldr	r2, [pc, #644]	@ (80127a0 <HAL_UART_IRQHandler+0x5a0>)
 801251a:	4293      	cmp	r3, r2
 801251c:	d061      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	4a9f      	ldr	r2, [pc, #636]	@ (80127a4 <HAL_UART_IRQHandler+0x5a4>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d05a      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	4a9c      	ldr	r2, [pc, #624]	@ (80127a8 <HAL_UART_IRQHandler+0x5a8>)
 8012536:	4293      	cmp	r3, r2
 8012538:	d053      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	4a9a      	ldr	r2, [pc, #616]	@ (80127ac <HAL_UART_IRQHandler+0x5ac>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d04c      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4a97      	ldr	r2, [pc, #604]	@ (80127b0 <HAL_UART_IRQHandler+0x5b0>)
 8012552:	4293      	cmp	r3, r2
 8012554:	d045      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	4a95      	ldr	r2, [pc, #596]	@ (80127b4 <HAL_UART_IRQHandler+0x5b4>)
 8012560:	4293      	cmp	r3, r2
 8012562:	d03e      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	4a92      	ldr	r2, [pc, #584]	@ (80127b8 <HAL_UART_IRQHandler+0x5b8>)
 801256e:	4293      	cmp	r3, r2
 8012570:	d037      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	4a90      	ldr	r2, [pc, #576]	@ (80127bc <HAL_UART_IRQHandler+0x5bc>)
 801257c:	4293      	cmp	r3, r2
 801257e:	d030      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4a8d      	ldr	r2, [pc, #564]	@ (80127c0 <HAL_UART_IRQHandler+0x5c0>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d029      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4a8b      	ldr	r2, [pc, #556]	@ (80127c4 <HAL_UART_IRQHandler+0x5c4>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d022      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4a88      	ldr	r2, [pc, #544]	@ (80127c8 <HAL_UART_IRQHandler+0x5c8>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d01b      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	4a86      	ldr	r2, [pc, #536]	@ (80127cc <HAL_UART_IRQHandler+0x5cc>)
 80125b4:	4293      	cmp	r3, r2
 80125b6:	d014      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	4a83      	ldr	r2, [pc, #524]	@ (80127d0 <HAL_UART_IRQHandler+0x5d0>)
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d00d      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	4a81      	ldr	r2, [pc, #516]	@ (80127d4 <HAL_UART_IRQHandler+0x5d4>)
 80125d0:	4293      	cmp	r3, r2
 80125d2:	d006      	beq.n	80125e2 <HAL_UART_IRQHandler+0x3e2>
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	4a7e      	ldr	r2, [pc, #504]	@ (80127d8 <HAL_UART_IRQHandler+0x5d8>)
 80125de:	4293      	cmp	r3, r2
 80125e0:	d106      	bne.n	80125f0 <HAL_UART_IRQHandler+0x3f0>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	e005      	b.n	80125fc <HAL_UART_IRQHandler+0x3fc>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012604:	2b00      	cmp	r3, #0
 8012606:	f000 80ad 	beq.w	8012764 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012610:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012614:	429a      	cmp	r2, r3
 8012616:	f080 80a5 	bcs.w	8012764 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012620:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801262a:	69db      	ldr	r3, [r3, #28]
 801262c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012630:	f000 8087 	beq.w	8012742 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801263c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012640:	e853 3f00 	ldrex	r3, [r3]
 8012644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012648:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801264c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012650:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	461a      	mov	r2, r3
 801265a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801265e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012662:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012666:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801266a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801266e:	e841 2300 	strex	r3, r2, [r1]
 8012672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801267a:	2b00      	cmp	r3, #0
 801267c:	d1da      	bne.n	8012634 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	3308      	adds	r3, #8
 8012684:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012688:	e853 3f00 	ldrex	r3, [r3]
 801268c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801268e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012690:	f023 0301 	bic.w	r3, r3, #1
 8012694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	3308      	adds	r3, #8
 801269e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80126a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80126a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80126aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80126ae:	e841 2300 	strex	r3, r2, [r1]
 80126b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80126b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d1e1      	bne.n	801267e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	3308      	adds	r3, #8
 80126c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80126c4:	e853 3f00 	ldrex	r3, [r3]
 80126c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80126ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80126d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	3308      	adds	r3, #8
 80126da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80126de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80126e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80126e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80126e6:	e841 2300 	strex	r3, r2, [r1]
 80126ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80126ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d1e3      	bne.n	80126ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2220      	movs	r2, #32
 80126f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2200      	movs	r2, #0
 80126fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012708:	e853 3f00 	ldrex	r3, [r3]
 801270c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801270e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012710:	f023 0310 	bic.w	r3, r3, #16
 8012714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	461a      	mov	r2, r3
 801271e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012722:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012724:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012726:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012728:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801272a:	e841 2300 	strex	r3, r2, [r1]
 801272e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012732:	2b00      	cmp	r3, #0
 8012734:	d1e4      	bne.n	8012700 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801273c:	4618      	mov	r0, r3
 801273e:	f7f2 fb77 	bl	8004e30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2202      	movs	r2, #2
 8012746:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012754:	b29b      	uxth	r3, r3
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	b29b      	uxth	r3, r3
 801275a:	4619      	mov	r1, r3
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 f943 	bl	80129e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012762:	e119      	b.n	8012998 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801276e:	429a      	cmp	r2, r3
 8012770:	f040 8112 	bne.w	8012998 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801277a:	69db      	ldr	r3, [r3, #28]
 801277c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012780:	f040 810a 	bne.w	8012998 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2202      	movs	r2, #2
 8012788:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012790:	4619      	mov	r1, r3
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f000 f928 	bl	80129e8 <HAL_UARTEx_RxEventCallback>
      return;
 8012798:	e0fe      	b.n	8012998 <HAL_UART_IRQHandler+0x798>
 801279a:	bf00      	nop
 801279c:	40020010 	.word	0x40020010
 80127a0:	40020028 	.word	0x40020028
 80127a4:	40020040 	.word	0x40020040
 80127a8:	40020058 	.word	0x40020058
 80127ac:	40020070 	.word	0x40020070
 80127b0:	40020088 	.word	0x40020088
 80127b4:	400200a0 	.word	0x400200a0
 80127b8:	400200b8 	.word	0x400200b8
 80127bc:	40020410 	.word	0x40020410
 80127c0:	40020428 	.word	0x40020428
 80127c4:	40020440 	.word	0x40020440
 80127c8:	40020458 	.word	0x40020458
 80127cc:	40020470 	.word	0x40020470
 80127d0:	40020488 	.word	0x40020488
 80127d4:	400204a0 	.word	0x400204a0
 80127d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f000 80cf 	beq.w	801299c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80127fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012802:	2b00      	cmp	r3, #0
 8012804:	f000 80ca 	beq.w	801299c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012810:	e853 3f00 	ldrex	r3, [r3]
 8012814:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801281c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	461a      	mov	r2, r3
 8012826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801282a:	647b      	str	r3, [r7, #68]	@ 0x44
 801282c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801282e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012830:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012832:	e841 2300 	strex	r3, r2, [r1]
 8012836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1e4      	bne.n	8012808 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	3308      	adds	r3, #8
 8012844:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012848:	e853 3f00 	ldrex	r3, [r3]
 801284c:	623b      	str	r3, [r7, #32]
   return(result);
 801284e:	6a3a      	ldr	r2, [r7, #32]
 8012850:	4b55      	ldr	r3, [pc, #340]	@ (80129a8 <HAL_UART_IRQHandler+0x7a8>)
 8012852:	4013      	ands	r3, r2
 8012854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	3308      	adds	r3, #8
 801285e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012862:	633a      	str	r2, [r7, #48]	@ 0x30
 8012864:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801286a:	e841 2300 	strex	r3, r2, [r1]
 801286e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1e3      	bne.n	801283e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2220      	movs	r2, #32
 801287a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2200      	movs	r2, #0
 8012882:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	e853 3f00 	ldrex	r3, [r3]
 8012896:	60fb      	str	r3, [r7, #12]
   return(result);
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f023 0310 	bic.w	r3, r3, #16
 801289e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	461a      	mov	r2, r3
 80128a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80128ac:	61fb      	str	r3, [r7, #28]
 80128ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b0:	69b9      	ldr	r1, [r7, #24]
 80128b2:	69fa      	ldr	r2, [r7, #28]
 80128b4:	e841 2300 	strex	r3, r2, [r1]
 80128b8:	617b      	str	r3, [r7, #20]
   return(result);
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d1e4      	bne.n	801288a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2202      	movs	r2, #2
 80128c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80128c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80128ca:	4619      	mov	r1, r3
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 f88b 	bl	80129e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80128d2:	e063      	b.n	801299c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80128d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80128d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d00e      	beq.n	80128fe <HAL_UART_IRQHandler+0x6fe>
 80128e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80128e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d008      	beq.n	80128fe <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80128f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f001 fa22 	bl	8013d40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80128fc:	e051      	b.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80128fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012906:	2b00      	cmp	r3, #0
 8012908:	d014      	beq.n	8012934 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801290a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012912:	2b00      	cmp	r3, #0
 8012914:	d105      	bne.n	8012922 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801291a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801291e:	2b00      	cmp	r3, #0
 8012920:	d008      	beq.n	8012934 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012926:	2b00      	cmp	r3, #0
 8012928:	d03a      	beq.n	80129a0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	4798      	blx	r3
    }
    return;
 8012932:	e035      	b.n	80129a0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801293c:	2b00      	cmp	r3, #0
 801293e:	d009      	beq.n	8012954 <HAL_UART_IRQHandler+0x754>
 8012940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012948:	2b00      	cmp	r3, #0
 801294a:	d003      	beq.n	8012954 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f001 f9cc 	bl	8013cea <UART_EndTransmit_IT>
    return;
 8012952:	e026      	b.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801295c:	2b00      	cmp	r3, #0
 801295e:	d009      	beq.n	8012974 <HAL_UART_IRQHandler+0x774>
 8012960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012964:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012968:	2b00      	cmp	r3, #0
 801296a:	d003      	beq.n	8012974 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f001 f9fb 	bl	8013d68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012972:	e016      	b.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801297c:	2b00      	cmp	r3, #0
 801297e:	d010      	beq.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
 8012980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012984:	2b00      	cmp	r3, #0
 8012986:	da0c      	bge.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f001 f9e3 	bl	8013d54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801298e:	e008      	b.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012990:	bf00      	nop
 8012992:	e006      	b.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012994:	bf00      	nop
 8012996:	e004      	b.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012998:	bf00      	nop
 801299a:	e002      	b.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
      return;
 801299c:	bf00      	nop
 801299e:	e000      	b.n	80129a2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80129a0:	bf00      	nop
  }
}
 80129a2:	37e8      	adds	r7, #232	@ 0xe8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}
 80129a8:	effffffe 	.word	0xeffffffe

080129ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80129b4:	bf00      	nop
 80129b6:	370c      	adds	r7, #12
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr

080129c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80129c8:	bf00      	nop
 80129ca:	370c      	adds	r7, #12
 80129cc:	46bd      	mov	sp, r7
 80129ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d2:	4770      	bx	lr

080129d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80129d4:	b480      	push	{r7}
 80129d6:	b083      	sub	sp, #12
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80129dc:	bf00      	nop
 80129de:	370c      	adds	r7, #12
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	460b      	mov	r3, r1
 80129f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80129f4:	bf00      	nop
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr

08012a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012a04:	b092      	sub	sp, #72	@ 0x48
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	689a      	ldr	r2, [r3, #8]
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	691b      	ldr	r3, [r3, #16]
 8012a18:	431a      	orrs	r2, r3
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	695b      	ldr	r3, [r3, #20]
 8012a1e:	431a      	orrs	r2, r3
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	69db      	ldr	r3, [r3, #28]
 8012a24:	4313      	orrs	r3, r2
 8012a26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	681a      	ldr	r2, [r3, #0]
 8012a2e:	4bbe      	ldr	r3, [pc, #760]	@ (8012d28 <UART_SetConfig+0x328>)
 8012a30:	4013      	ands	r3, r2
 8012a32:	697a      	ldr	r2, [r7, #20]
 8012a34:	6812      	ldr	r2, [r2, #0]
 8012a36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012a38:	430b      	orrs	r3, r1
 8012a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	68da      	ldr	r2, [r3, #12]
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	430a      	orrs	r2, r1
 8012a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	699b      	ldr	r3, [r3, #24]
 8012a56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4ab3      	ldr	r2, [pc, #716]	@ (8012d2c <UART_SetConfig+0x32c>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d004      	beq.n	8012a6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	6a1b      	ldr	r3, [r3, #32]
 8012a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	689a      	ldr	r2, [r3, #8]
 8012a72:	4baf      	ldr	r3, [pc, #700]	@ (8012d30 <UART_SetConfig+0x330>)
 8012a74:	4013      	ands	r3, r2
 8012a76:	697a      	ldr	r2, [r7, #20]
 8012a78:	6812      	ldr	r2, [r2, #0]
 8012a7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012a7c:	430b      	orrs	r3, r1
 8012a7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a86:	f023 010f 	bic.w	r1, r3, #15
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	430a      	orrs	r2, r1
 8012a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	4aa6      	ldr	r2, [pc, #664]	@ (8012d34 <UART_SetConfig+0x334>)
 8012a9c:	4293      	cmp	r3, r2
 8012a9e:	d177      	bne.n	8012b90 <UART_SetConfig+0x190>
 8012aa0:	4ba5      	ldr	r3, [pc, #660]	@ (8012d38 <UART_SetConfig+0x338>)
 8012aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012aa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012aa8:	2b28      	cmp	r3, #40	@ 0x28
 8012aaa:	d86d      	bhi.n	8012b88 <UART_SetConfig+0x188>
 8012aac:	a201      	add	r2, pc, #4	@ (adr r2, 8012ab4 <UART_SetConfig+0xb4>)
 8012aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab2:	bf00      	nop
 8012ab4:	08012b59 	.word	0x08012b59
 8012ab8:	08012b89 	.word	0x08012b89
 8012abc:	08012b89 	.word	0x08012b89
 8012ac0:	08012b89 	.word	0x08012b89
 8012ac4:	08012b89 	.word	0x08012b89
 8012ac8:	08012b89 	.word	0x08012b89
 8012acc:	08012b89 	.word	0x08012b89
 8012ad0:	08012b89 	.word	0x08012b89
 8012ad4:	08012b61 	.word	0x08012b61
 8012ad8:	08012b89 	.word	0x08012b89
 8012adc:	08012b89 	.word	0x08012b89
 8012ae0:	08012b89 	.word	0x08012b89
 8012ae4:	08012b89 	.word	0x08012b89
 8012ae8:	08012b89 	.word	0x08012b89
 8012aec:	08012b89 	.word	0x08012b89
 8012af0:	08012b89 	.word	0x08012b89
 8012af4:	08012b69 	.word	0x08012b69
 8012af8:	08012b89 	.word	0x08012b89
 8012afc:	08012b89 	.word	0x08012b89
 8012b00:	08012b89 	.word	0x08012b89
 8012b04:	08012b89 	.word	0x08012b89
 8012b08:	08012b89 	.word	0x08012b89
 8012b0c:	08012b89 	.word	0x08012b89
 8012b10:	08012b89 	.word	0x08012b89
 8012b14:	08012b71 	.word	0x08012b71
 8012b18:	08012b89 	.word	0x08012b89
 8012b1c:	08012b89 	.word	0x08012b89
 8012b20:	08012b89 	.word	0x08012b89
 8012b24:	08012b89 	.word	0x08012b89
 8012b28:	08012b89 	.word	0x08012b89
 8012b2c:	08012b89 	.word	0x08012b89
 8012b30:	08012b89 	.word	0x08012b89
 8012b34:	08012b79 	.word	0x08012b79
 8012b38:	08012b89 	.word	0x08012b89
 8012b3c:	08012b89 	.word	0x08012b89
 8012b40:	08012b89 	.word	0x08012b89
 8012b44:	08012b89 	.word	0x08012b89
 8012b48:	08012b89 	.word	0x08012b89
 8012b4c:	08012b89 	.word	0x08012b89
 8012b50:	08012b89 	.word	0x08012b89
 8012b54:	08012b81 	.word	0x08012b81
 8012b58:	2301      	movs	r3, #1
 8012b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b5e:	e222      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012b60:	2304      	movs	r3, #4
 8012b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b66:	e21e      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012b68:	2308      	movs	r3, #8
 8012b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b6e:	e21a      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012b70:	2310      	movs	r3, #16
 8012b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b76:	e216      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012b78:	2320      	movs	r3, #32
 8012b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b7e:	e212      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012b80:	2340      	movs	r3, #64	@ 0x40
 8012b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b86:	e20e      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012b88:	2380      	movs	r3, #128	@ 0x80
 8012b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b8e:	e20a      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	4a69      	ldr	r2, [pc, #420]	@ (8012d3c <UART_SetConfig+0x33c>)
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d130      	bne.n	8012bfc <UART_SetConfig+0x1fc>
 8012b9a:	4b67      	ldr	r3, [pc, #412]	@ (8012d38 <UART_SetConfig+0x338>)
 8012b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b9e:	f003 0307 	and.w	r3, r3, #7
 8012ba2:	2b05      	cmp	r3, #5
 8012ba4:	d826      	bhi.n	8012bf4 <UART_SetConfig+0x1f4>
 8012ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8012bac <UART_SetConfig+0x1ac>)
 8012ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bac:	08012bc5 	.word	0x08012bc5
 8012bb0:	08012bcd 	.word	0x08012bcd
 8012bb4:	08012bd5 	.word	0x08012bd5
 8012bb8:	08012bdd 	.word	0x08012bdd
 8012bbc:	08012be5 	.word	0x08012be5
 8012bc0:	08012bed 	.word	0x08012bed
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bca:	e1ec      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012bcc:	2304      	movs	r3, #4
 8012bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bd2:	e1e8      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012bd4:	2308      	movs	r3, #8
 8012bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bda:	e1e4      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012bdc:	2310      	movs	r3, #16
 8012bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012be2:	e1e0      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012be4:	2320      	movs	r3, #32
 8012be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bea:	e1dc      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012bec:	2340      	movs	r3, #64	@ 0x40
 8012bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bf2:	e1d8      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012bf4:	2380      	movs	r3, #128	@ 0x80
 8012bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bfa:	e1d4      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4a4f      	ldr	r2, [pc, #316]	@ (8012d40 <UART_SetConfig+0x340>)
 8012c02:	4293      	cmp	r3, r2
 8012c04:	d130      	bne.n	8012c68 <UART_SetConfig+0x268>
 8012c06:	4b4c      	ldr	r3, [pc, #304]	@ (8012d38 <UART_SetConfig+0x338>)
 8012c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c0a:	f003 0307 	and.w	r3, r3, #7
 8012c0e:	2b05      	cmp	r3, #5
 8012c10:	d826      	bhi.n	8012c60 <UART_SetConfig+0x260>
 8012c12:	a201      	add	r2, pc, #4	@ (adr r2, 8012c18 <UART_SetConfig+0x218>)
 8012c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c18:	08012c31 	.word	0x08012c31
 8012c1c:	08012c39 	.word	0x08012c39
 8012c20:	08012c41 	.word	0x08012c41
 8012c24:	08012c49 	.word	0x08012c49
 8012c28:	08012c51 	.word	0x08012c51
 8012c2c:	08012c59 	.word	0x08012c59
 8012c30:	2300      	movs	r3, #0
 8012c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c36:	e1b6      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012c38:	2304      	movs	r3, #4
 8012c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c3e:	e1b2      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012c40:	2308      	movs	r3, #8
 8012c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c46:	e1ae      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012c48:	2310      	movs	r3, #16
 8012c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c4e:	e1aa      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012c50:	2320      	movs	r3, #32
 8012c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c56:	e1a6      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012c58:	2340      	movs	r3, #64	@ 0x40
 8012c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c5e:	e1a2      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012c60:	2380      	movs	r3, #128	@ 0x80
 8012c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c66:	e19e      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	4a35      	ldr	r2, [pc, #212]	@ (8012d44 <UART_SetConfig+0x344>)
 8012c6e:	4293      	cmp	r3, r2
 8012c70:	d130      	bne.n	8012cd4 <UART_SetConfig+0x2d4>
 8012c72:	4b31      	ldr	r3, [pc, #196]	@ (8012d38 <UART_SetConfig+0x338>)
 8012c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c76:	f003 0307 	and.w	r3, r3, #7
 8012c7a:	2b05      	cmp	r3, #5
 8012c7c:	d826      	bhi.n	8012ccc <UART_SetConfig+0x2cc>
 8012c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8012c84 <UART_SetConfig+0x284>)
 8012c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c84:	08012c9d 	.word	0x08012c9d
 8012c88:	08012ca5 	.word	0x08012ca5
 8012c8c:	08012cad 	.word	0x08012cad
 8012c90:	08012cb5 	.word	0x08012cb5
 8012c94:	08012cbd 	.word	0x08012cbd
 8012c98:	08012cc5 	.word	0x08012cc5
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ca2:	e180      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012ca4:	2304      	movs	r3, #4
 8012ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012caa:	e17c      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012cac:	2308      	movs	r3, #8
 8012cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cb2:	e178      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012cb4:	2310      	movs	r3, #16
 8012cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cba:	e174      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012cbc:	2320      	movs	r3, #32
 8012cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cc2:	e170      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012cc4:	2340      	movs	r3, #64	@ 0x40
 8012cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cca:	e16c      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012ccc:	2380      	movs	r3, #128	@ 0x80
 8012cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cd2:	e168      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8012d48 <UART_SetConfig+0x348>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	d142      	bne.n	8012d64 <UART_SetConfig+0x364>
 8012cde:	4b16      	ldr	r3, [pc, #88]	@ (8012d38 <UART_SetConfig+0x338>)
 8012ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ce2:	f003 0307 	and.w	r3, r3, #7
 8012ce6:	2b05      	cmp	r3, #5
 8012ce8:	d838      	bhi.n	8012d5c <UART_SetConfig+0x35c>
 8012cea:	a201      	add	r2, pc, #4	@ (adr r2, 8012cf0 <UART_SetConfig+0x2f0>)
 8012cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cf0:	08012d09 	.word	0x08012d09
 8012cf4:	08012d11 	.word	0x08012d11
 8012cf8:	08012d19 	.word	0x08012d19
 8012cfc:	08012d21 	.word	0x08012d21
 8012d00:	08012d4d 	.word	0x08012d4d
 8012d04:	08012d55 	.word	0x08012d55
 8012d08:	2300      	movs	r3, #0
 8012d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d0e:	e14a      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012d10:	2304      	movs	r3, #4
 8012d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d16:	e146      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012d18:	2308      	movs	r3, #8
 8012d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d1e:	e142      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012d20:	2310      	movs	r3, #16
 8012d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d26:	e13e      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012d28:	cfff69f3 	.word	0xcfff69f3
 8012d2c:	58000c00 	.word	0x58000c00
 8012d30:	11fff4ff 	.word	0x11fff4ff
 8012d34:	40011000 	.word	0x40011000
 8012d38:	58024400 	.word	0x58024400
 8012d3c:	40004400 	.word	0x40004400
 8012d40:	40004800 	.word	0x40004800
 8012d44:	40004c00 	.word	0x40004c00
 8012d48:	40005000 	.word	0x40005000
 8012d4c:	2320      	movs	r3, #32
 8012d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d52:	e128      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012d54:	2340      	movs	r3, #64	@ 0x40
 8012d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d5a:	e124      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012d5c:	2380      	movs	r3, #128	@ 0x80
 8012d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d62:	e120      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	4acb      	ldr	r2, [pc, #812]	@ (8013098 <UART_SetConfig+0x698>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d176      	bne.n	8012e5c <UART_SetConfig+0x45c>
 8012d6e:	4bcb      	ldr	r3, [pc, #812]	@ (801309c <UART_SetConfig+0x69c>)
 8012d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012d76:	2b28      	cmp	r3, #40	@ 0x28
 8012d78:	d86c      	bhi.n	8012e54 <UART_SetConfig+0x454>
 8012d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8012d80 <UART_SetConfig+0x380>)
 8012d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d80:	08012e25 	.word	0x08012e25
 8012d84:	08012e55 	.word	0x08012e55
 8012d88:	08012e55 	.word	0x08012e55
 8012d8c:	08012e55 	.word	0x08012e55
 8012d90:	08012e55 	.word	0x08012e55
 8012d94:	08012e55 	.word	0x08012e55
 8012d98:	08012e55 	.word	0x08012e55
 8012d9c:	08012e55 	.word	0x08012e55
 8012da0:	08012e2d 	.word	0x08012e2d
 8012da4:	08012e55 	.word	0x08012e55
 8012da8:	08012e55 	.word	0x08012e55
 8012dac:	08012e55 	.word	0x08012e55
 8012db0:	08012e55 	.word	0x08012e55
 8012db4:	08012e55 	.word	0x08012e55
 8012db8:	08012e55 	.word	0x08012e55
 8012dbc:	08012e55 	.word	0x08012e55
 8012dc0:	08012e35 	.word	0x08012e35
 8012dc4:	08012e55 	.word	0x08012e55
 8012dc8:	08012e55 	.word	0x08012e55
 8012dcc:	08012e55 	.word	0x08012e55
 8012dd0:	08012e55 	.word	0x08012e55
 8012dd4:	08012e55 	.word	0x08012e55
 8012dd8:	08012e55 	.word	0x08012e55
 8012ddc:	08012e55 	.word	0x08012e55
 8012de0:	08012e3d 	.word	0x08012e3d
 8012de4:	08012e55 	.word	0x08012e55
 8012de8:	08012e55 	.word	0x08012e55
 8012dec:	08012e55 	.word	0x08012e55
 8012df0:	08012e55 	.word	0x08012e55
 8012df4:	08012e55 	.word	0x08012e55
 8012df8:	08012e55 	.word	0x08012e55
 8012dfc:	08012e55 	.word	0x08012e55
 8012e00:	08012e45 	.word	0x08012e45
 8012e04:	08012e55 	.word	0x08012e55
 8012e08:	08012e55 	.word	0x08012e55
 8012e0c:	08012e55 	.word	0x08012e55
 8012e10:	08012e55 	.word	0x08012e55
 8012e14:	08012e55 	.word	0x08012e55
 8012e18:	08012e55 	.word	0x08012e55
 8012e1c:	08012e55 	.word	0x08012e55
 8012e20:	08012e4d 	.word	0x08012e4d
 8012e24:	2301      	movs	r3, #1
 8012e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e2a:	e0bc      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012e2c:	2304      	movs	r3, #4
 8012e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e32:	e0b8      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012e34:	2308      	movs	r3, #8
 8012e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e3a:	e0b4      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012e3c:	2310      	movs	r3, #16
 8012e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e42:	e0b0      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012e44:	2320      	movs	r3, #32
 8012e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e4a:	e0ac      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012e4c:	2340      	movs	r3, #64	@ 0x40
 8012e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e52:	e0a8      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012e54:	2380      	movs	r3, #128	@ 0x80
 8012e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e5a:	e0a4      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4a8f      	ldr	r2, [pc, #572]	@ (80130a0 <UART_SetConfig+0x6a0>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d130      	bne.n	8012ec8 <UART_SetConfig+0x4c8>
 8012e66:	4b8d      	ldr	r3, [pc, #564]	@ (801309c <UART_SetConfig+0x69c>)
 8012e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e6a:	f003 0307 	and.w	r3, r3, #7
 8012e6e:	2b05      	cmp	r3, #5
 8012e70:	d826      	bhi.n	8012ec0 <UART_SetConfig+0x4c0>
 8012e72:	a201      	add	r2, pc, #4	@ (adr r2, 8012e78 <UART_SetConfig+0x478>)
 8012e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e78:	08012e91 	.word	0x08012e91
 8012e7c:	08012e99 	.word	0x08012e99
 8012e80:	08012ea1 	.word	0x08012ea1
 8012e84:	08012ea9 	.word	0x08012ea9
 8012e88:	08012eb1 	.word	0x08012eb1
 8012e8c:	08012eb9 	.word	0x08012eb9
 8012e90:	2300      	movs	r3, #0
 8012e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e96:	e086      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012e98:	2304      	movs	r3, #4
 8012e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e9e:	e082      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012ea0:	2308      	movs	r3, #8
 8012ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ea6:	e07e      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012ea8:	2310      	movs	r3, #16
 8012eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eae:	e07a      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012eb0:	2320      	movs	r3, #32
 8012eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eb6:	e076      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012eb8:	2340      	movs	r3, #64	@ 0x40
 8012eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ebe:	e072      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012ec0:	2380      	movs	r3, #128	@ 0x80
 8012ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ec6:	e06e      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	4a75      	ldr	r2, [pc, #468]	@ (80130a4 <UART_SetConfig+0x6a4>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d130      	bne.n	8012f34 <UART_SetConfig+0x534>
 8012ed2:	4b72      	ldr	r3, [pc, #456]	@ (801309c <UART_SetConfig+0x69c>)
 8012ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ed6:	f003 0307 	and.w	r3, r3, #7
 8012eda:	2b05      	cmp	r3, #5
 8012edc:	d826      	bhi.n	8012f2c <UART_SetConfig+0x52c>
 8012ede:	a201      	add	r2, pc, #4	@ (adr r2, 8012ee4 <UART_SetConfig+0x4e4>)
 8012ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ee4:	08012efd 	.word	0x08012efd
 8012ee8:	08012f05 	.word	0x08012f05
 8012eec:	08012f0d 	.word	0x08012f0d
 8012ef0:	08012f15 	.word	0x08012f15
 8012ef4:	08012f1d 	.word	0x08012f1d
 8012ef8:	08012f25 	.word	0x08012f25
 8012efc:	2300      	movs	r3, #0
 8012efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f02:	e050      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f04:	2304      	movs	r3, #4
 8012f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f0a:	e04c      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f0c:	2308      	movs	r3, #8
 8012f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f12:	e048      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f14:	2310      	movs	r3, #16
 8012f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f1a:	e044      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f1c:	2320      	movs	r3, #32
 8012f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f22:	e040      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f24:	2340      	movs	r3, #64	@ 0x40
 8012f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f2a:	e03c      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f2c:	2380      	movs	r3, #128	@ 0x80
 8012f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f32:	e038      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4a5b      	ldr	r2, [pc, #364]	@ (80130a8 <UART_SetConfig+0x6a8>)
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d130      	bne.n	8012fa0 <UART_SetConfig+0x5a0>
 8012f3e:	4b57      	ldr	r3, [pc, #348]	@ (801309c <UART_SetConfig+0x69c>)
 8012f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f42:	f003 0307 	and.w	r3, r3, #7
 8012f46:	2b05      	cmp	r3, #5
 8012f48:	d826      	bhi.n	8012f98 <UART_SetConfig+0x598>
 8012f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f50 <UART_SetConfig+0x550>)
 8012f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f50:	08012f69 	.word	0x08012f69
 8012f54:	08012f71 	.word	0x08012f71
 8012f58:	08012f79 	.word	0x08012f79
 8012f5c:	08012f81 	.word	0x08012f81
 8012f60:	08012f89 	.word	0x08012f89
 8012f64:	08012f91 	.word	0x08012f91
 8012f68:	2302      	movs	r3, #2
 8012f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f6e:	e01a      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f70:	2304      	movs	r3, #4
 8012f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f76:	e016      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f78:	2308      	movs	r3, #8
 8012f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f7e:	e012      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f80:	2310      	movs	r3, #16
 8012f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f86:	e00e      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f88:	2320      	movs	r3, #32
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f8e:	e00a      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f90:	2340      	movs	r3, #64	@ 0x40
 8012f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f96:	e006      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012f98:	2380      	movs	r3, #128	@ 0x80
 8012f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f9e:	e002      	b.n	8012fa6 <UART_SetConfig+0x5a6>
 8012fa0:	2380      	movs	r3, #128	@ 0x80
 8012fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4a3f      	ldr	r2, [pc, #252]	@ (80130a8 <UART_SetConfig+0x6a8>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	f040 80f8 	bne.w	80131a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012fb6:	2b20      	cmp	r3, #32
 8012fb8:	dc46      	bgt.n	8013048 <UART_SetConfig+0x648>
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	f2c0 8082 	blt.w	80130c4 <UART_SetConfig+0x6c4>
 8012fc0:	3b02      	subs	r3, #2
 8012fc2:	2b1e      	cmp	r3, #30
 8012fc4:	d87e      	bhi.n	80130c4 <UART_SetConfig+0x6c4>
 8012fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8012fcc <UART_SetConfig+0x5cc>)
 8012fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fcc:	0801304f 	.word	0x0801304f
 8012fd0:	080130c5 	.word	0x080130c5
 8012fd4:	08013057 	.word	0x08013057
 8012fd8:	080130c5 	.word	0x080130c5
 8012fdc:	080130c5 	.word	0x080130c5
 8012fe0:	080130c5 	.word	0x080130c5
 8012fe4:	08013067 	.word	0x08013067
 8012fe8:	080130c5 	.word	0x080130c5
 8012fec:	080130c5 	.word	0x080130c5
 8012ff0:	080130c5 	.word	0x080130c5
 8012ff4:	080130c5 	.word	0x080130c5
 8012ff8:	080130c5 	.word	0x080130c5
 8012ffc:	080130c5 	.word	0x080130c5
 8013000:	080130c5 	.word	0x080130c5
 8013004:	08013077 	.word	0x08013077
 8013008:	080130c5 	.word	0x080130c5
 801300c:	080130c5 	.word	0x080130c5
 8013010:	080130c5 	.word	0x080130c5
 8013014:	080130c5 	.word	0x080130c5
 8013018:	080130c5 	.word	0x080130c5
 801301c:	080130c5 	.word	0x080130c5
 8013020:	080130c5 	.word	0x080130c5
 8013024:	080130c5 	.word	0x080130c5
 8013028:	080130c5 	.word	0x080130c5
 801302c:	080130c5 	.word	0x080130c5
 8013030:	080130c5 	.word	0x080130c5
 8013034:	080130c5 	.word	0x080130c5
 8013038:	080130c5 	.word	0x080130c5
 801303c:	080130c5 	.word	0x080130c5
 8013040:	080130c5 	.word	0x080130c5
 8013044:	080130b7 	.word	0x080130b7
 8013048:	2b40      	cmp	r3, #64	@ 0x40
 801304a:	d037      	beq.n	80130bc <UART_SetConfig+0x6bc>
 801304c:	e03a      	b.n	80130c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801304e:	f7fd fa8d 	bl	801056c <HAL_RCCEx_GetD3PCLK1Freq>
 8013052:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013054:	e03c      	b.n	80130d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801305a:	4618      	mov	r0, r3
 801305c:	f7fd fa9c 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013064:	e034      	b.n	80130d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013066:	f107 0318 	add.w	r3, r7, #24
 801306a:	4618      	mov	r0, r3
 801306c:	f7fd fbe8 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013074:	e02c      	b.n	80130d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013076:	4b09      	ldr	r3, [pc, #36]	@ (801309c <UART_SetConfig+0x69c>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f003 0320 	and.w	r3, r3, #32
 801307e:	2b00      	cmp	r3, #0
 8013080:	d016      	beq.n	80130b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013082:	4b06      	ldr	r3, [pc, #24]	@ (801309c <UART_SetConfig+0x69c>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	08db      	lsrs	r3, r3, #3
 8013088:	f003 0303 	and.w	r3, r3, #3
 801308c:	4a07      	ldr	r2, [pc, #28]	@ (80130ac <UART_SetConfig+0x6ac>)
 801308e:	fa22 f303 	lsr.w	r3, r2, r3
 8013092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013094:	e01c      	b.n	80130d0 <UART_SetConfig+0x6d0>
 8013096:	bf00      	nop
 8013098:	40011400 	.word	0x40011400
 801309c:	58024400 	.word	0x58024400
 80130a0:	40007800 	.word	0x40007800
 80130a4:	40007c00 	.word	0x40007c00
 80130a8:	58000c00 	.word	0x58000c00
 80130ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80130b0:	4b9d      	ldr	r3, [pc, #628]	@ (8013328 <UART_SetConfig+0x928>)
 80130b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130b4:	e00c      	b.n	80130d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80130b6:	4b9d      	ldr	r3, [pc, #628]	@ (801332c <UART_SetConfig+0x92c>)
 80130b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130ba:	e009      	b.n	80130d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80130bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80130c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130c2:	e005      	b.n	80130d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80130c4:	2300      	movs	r3, #0
 80130c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80130c8:	2301      	movs	r3, #1
 80130ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80130ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80130d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	f000 81de 	beq.w	8013494 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130dc:	4a94      	ldr	r2, [pc, #592]	@ (8013330 <UART_SetConfig+0x930>)
 80130de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130e2:	461a      	mov	r2, r3
 80130e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80130ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	685a      	ldr	r2, [r3, #4]
 80130f0:	4613      	mov	r3, r2
 80130f2:	005b      	lsls	r3, r3, #1
 80130f4:	4413      	add	r3, r2
 80130f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d305      	bcc.n	8013108 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013104:	429a      	cmp	r2, r3
 8013106:	d903      	bls.n	8013110 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8013108:	2301      	movs	r3, #1
 801310a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801310e:	e1c1      	b.n	8013494 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013112:	2200      	movs	r2, #0
 8013114:	60bb      	str	r3, [r7, #8]
 8013116:	60fa      	str	r2, [r7, #12]
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801311c:	4a84      	ldr	r2, [pc, #528]	@ (8013330 <UART_SetConfig+0x930>)
 801311e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013122:	b29b      	uxth	r3, r3
 8013124:	2200      	movs	r2, #0
 8013126:	603b      	str	r3, [r7, #0]
 8013128:	607a      	str	r2, [r7, #4]
 801312a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801312e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013132:	f7ed f92d 	bl	8000390 <__aeabi_uldivmod>
 8013136:	4602      	mov	r2, r0
 8013138:	460b      	mov	r3, r1
 801313a:	4610      	mov	r0, r2
 801313c:	4619      	mov	r1, r3
 801313e:	f04f 0200 	mov.w	r2, #0
 8013142:	f04f 0300 	mov.w	r3, #0
 8013146:	020b      	lsls	r3, r1, #8
 8013148:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801314c:	0202      	lsls	r2, r0, #8
 801314e:	6979      	ldr	r1, [r7, #20]
 8013150:	6849      	ldr	r1, [r1, #4]
 8013152:	0849      	lsrs	r1, r1, #1
 8013154:	2000      	movs	r0, #0
 8013156:	460c      	mov	r4, r1
 8013158:	4605      	mov	r5, r0
 801315a:	eb12 0804 	adds.w	r8, r2, r4
 801315e:	eb43 0905 	adc.w	r9, r3, r5
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	2200      	movs	r2, #0
 8013168:	469a      	mov	sl, r3
 801316a:	4693      	mov	fp, r2
 801316c:	4652      	mov	r2, sl
 801316e:	465b      	mov	r3, fp
 8013170:	4640      	mov	r0, r8
 8013172:	4649      	mov	r1, r9
 8013174:	f7ed f90c 	bl	8000390 <__aeabi_uldivmod>
 8013178:	4602      	mov	r2, r0
 801317a:	460b      	mov	r3, r1
 801317c:	4613      	mov	r3, r2
 801317e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013186:	d308      	bcc.n	801319a <UART_SetConfig+0x79a>
 8013188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801318a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801318e:	d204      	bcs.n	801319a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013196:	60da      	str	r2, [r3, #12]
 8013198:	e17c      	b.n	8013494 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801319a:	2301      	movs	r3, #1
 801319c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80131a0:	e178      	b.n	8013494 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	69db      	ldr	r3, [r3, #28]
 80131a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80131aa:	f040 80c5 	bne.w	8013338 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80131ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80131b2:	2b20      	cmp	r3, #32
 80131b4:	dc48      	bgt.n	8013248 <UART_SetConfig+0x848>
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	db7b      	blt.n	80132b2 <UART_SetConfig+0x8b2>
 80131ba:	2b20      	cmp	r3, #32
 80131bc:	d879      	bhi.n	80132b2 <UART_SetConfig+0x8b2>
 80131be:	a201      	add	r2, pc, #4	@ (adr r2, 80131c4 <UART_SetConfig+0x7c4>)
 80131c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131c4:	0801324f 	.word	0x0801324f
 80131c8:	08013257 	.word	0x08013257
 80131cc:	080132b3 	.word	0x080132b3
 80131d0:	080132b3 	.word	0x080132b3
 80131d4:	0801325f 	.word	0x0801325f
 80131d8:	080132b3 	.word	0x080132b3
 80131dc:	080132b3 	.word	0x080132b3
 80131e0:	080132b3 	.word	0x080132b3
 80131e4:	0801326f 	.word	0x0801326f
 80131e8:	080132b3 	.word	0x080132b3
 80131ec:	080132b3 	.word	0x080132b3
 80131f0:	080132b3 	.word	0x080132b3
 80131f4:	080132b3 	.word	0x080132b3
 80131f8:	080132b3 	.word	0x080132b3
 80131fc:	080132b3 	.word	0x080132b3
 8013200:	080132b3 	.word	0x080132b3
 8013204:	0801327f 	.word	0x0801327f
 8013208:	080132b3 	.word	0x080132b3
 801320c:	080132b3 	.word	0x080132b3
 8013210:	080132b3 	.word	0x080132b3
 8013214:	080132b3 	.word	0x080132b3
 8013218:	080132b3 	.word	0x080132b3
 801321c:	080132b3 	.word	0x080132b3
 8013220:	080132b3 	.word	0x080132b3
 8013224:	080132b3 	.word	0x080132b3
 8013228:	080132b3 	.word	0x080132b3
 801322c:	080132b3 	.word	0x080132b3
 8013230:	080132b3 	.word	0x080132b3
 8013234:	080132b3 	.word	0x080132b3
 8013238:	080132b3 	.word	0x080132b3
 801323c:	080132b3 	.word	0x080132b3
 8013240:	080132b3 	.word	0x080132b3
 8013244:	080132a5 	.word	0x080132a5
 8013248:	2b40      	cmp	r3, #64	@ 0x40
 801324a:	d02e      	beq.n	80132aa <UART_SetConfig+0x8aa>
 801324c:	e031      	b.n	80132b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801324e:	f7fb f9d7 	bl	800e600 <HAL_RCC_GetPCLK1Freq>
 8013252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013254:	e033      	b.n	80132be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013256:	f7fb f9e9 	bl	800e62c <HAL_RCC_GetPCLK2Freq>
 801325a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801325c:	e02f      	b.n	80132be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801325e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013262:	4618      	mov	r0, r3
 8013264:	f7fd f998 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801326a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801326c:	e027      	b.n	80132be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801326e:	f107 0318 	add.w	r3, r7, #24
 8013272:	4618      	mov	r0, r3
 8013274:	f7fd fae4 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801327c:	e01f      	b.n	80132be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801327e:	4b2d      	ldr	r3, [pc, #180]	@ (8013334 <UART_SetConfig+0x934>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f003 0320 	and.w	r3, r3, #32
 8013286:	2b00      	cmp	r3, #0
 8013288:	d009      	beq.n	801329e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801328a:	4b2a      	ldr	r3, [pc, #168]	@ (8013334 <UART_SetConfig+0x934>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	08db      	lsrs	r3, r3, #3
 8013290:	f003 0303 	and.w	r3, r3, #3
 8013294:	4a24      	ldr	r2, [pc, #144]	@ (8013328 <UART_SetConfig+0x928>)
 8013296:	fa22 f303 	lsr.w	r3, r2, r3
 801329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801329c:	e00f      	b.n	80132be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801329e:	4b22      	ldr	r3, [pc, #136]	@ (8013328 <UART_SetConfig+0x928>)
 80132a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132a2:	e00c      	b.n	80132be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80132a4:	4b21      	ldr	r3, [pc, #132]	@ (801332c <UART_SetConfig+0x92c>)
 80132a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132a8:	e009      	b.n	80132be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80132aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80132ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132b0:	e005      	b.n	80132be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80132b2:	2300      	movs	r3, #0
 80132b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80132b6:	2301      	movs	r3, #1
 80132b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80132bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80132be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	f000 80e7 	beq.w	8013494 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132ca:	4a19      	ldr	r2, [pc, #100]	@ (8013330 <UART_SetConfig+0x930>)
 80132cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132d0:	461a      	mov	r2, r3
 80132d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80132d8:	005a      	lsls	r2, r3, #1
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	085b      	lsrs	r3, r3, #1
 80132e0:	441a      	add	r2, r3
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	685b      	ldr	r3, [r3, #4]
 80132e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80132ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80132ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ee:	2b0f      	cmp	r3, #15
 80132f0:	d916      	bls.n	8013320 <UART_SetConfig+0x920>
 80132f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80132f8:	d212      	bcs.n	8013320 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80132fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	f023 030f 	bic.w	r3, r3, #15
 8013302:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013306:	085b      	lsrs	r3, r3, #1
 8013308:	b29b      	uxth	r3, r3
 801330a:	f003 0307 	and.w	r3, r3, #7
 801330e:	b29a      	uxth	r2, r3
 8013310:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013312:	4313      	orrs	r3, r2
 8013314:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801331c:	60da      	str	r2, [r3, #12]
 801331e:	e0b9      	b.n	8013494 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013320:	2301      	movs	r3, #1
 8013322:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013326:	e0b5      	b.n	8013494 <UART_SetConfig+0xa94>
 8013328:	03d09000 	.word	0x03d09000
 801332c:	003d0900 	.word	0x003d0900
 8013330:	0801903c 	.word	0x0801903c
 8013334:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013338:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801333c:	2b20      	cmp	r3, #32
 801333e:	dc49      	bgt.n	80133d4 <UART_SetConfig+0x9d4>
 8013340:	2b00      	cmp	r3, #0
 8013342:	db7c      	blt.n	801343e <UART_SetConfig+0xa3e>
 8013344:	2b20      	cmp	r3, #32
 8013346:	d87a      	bhi.n	801343e <UART_SetConfig+0xa3e>
 8013348:	a201      	add	r2, pc, #4	@ (adr r2, 8013350 <UART_SetConfig+0x950>)
 801334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801334e:	bf00      	nop
 8013350:	080133db 	.word	0x080133db
 8013354:	080133e3 	.word	0x080133e3
 8013358:	0801343f 	.word	0x0801343f
 801335c:	0801343f 	.word	0x0801343f
 8013360:	080133eb 	.word	0x080133eb
 8013364:	0801343f 	.word	0x0801343f
 8013368:	0801343f 	.word	0x0801343f
 801336c:	0801343f 	.word	0x0801343f
 8013370:	080133fb 	.word	0x080133fb
 8013374:	0801343f 	.word	0x0801343f
 8013378:	0801343f 	.word	0x0801343f
 801337c:	0801343f 	.word	0x0801343f
 8013380:	0801343f 	.word	0x0801343f
 8013384:	0801343f 	.word	0x0801343f
 8013388:	0801343f 	.word	0x0801343f
 801338c:	0801343f 	.word	0x0801343f
 8013390:	0801340b 	.word	0x0801340b
 8013394:	0801343f 	.word	0x0801343f
 8013398:	0801343f 	.word	0x0801343f
 801339c:	0801343f 	.word	0x0801343f
 80133a0:	0801343f 	.word	0x0801343f
 80133a4:	0801343f 	.word	0x0801343f
 80133a8:	0801343f 	.word	0x0801343f
 80133ac:	0801343f 	.word	0x0801343f
 80133b0:	0801343f 	.word	0x0801343f
 80133b4:	0801343f 	.word	0x0801343f
 80133b8:	0801343f 	.word	0x0801343f
 80133bc:	0801343f 	.word	0x0801343f
 80133c0:	0801343f 	.word	0x0801343f
 80133c4:	0801343f 	.word	0x0801343f
 80133c8:	0801343f 	.word	0x0801343f
 80133cc:	0801343f 	.word	0x0801343f
 80133d0:	08013431 	.word	0x08013431
 80133d4:	2b40      	cmp	r3, #64	@ 0x40
 80133d6:	d02e      	beq.n	8013436 <UART_SetConfig+0xa36>
 80133d8:	e031      	b.n	801343e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80133da:	f7fb f911 	bl	800e600 <HAL_RCC_GetPCLK1Freq>
 80133de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80133e0:	e033      	b.n	801344a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80133e2:	f7fb f923 	bl	800e62c <HAL_RCC_GetPCLK2Freq>
 80133e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80133e8:	e02f      	b.n	801344a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fd f8d2 	bl	8010598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80133f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133f8:	e027      	b.n	801344a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80133fa:	f107 0318 	add.w	r3, r7, #24
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fd fa1e 	bl	8010840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013408:	e01f      	b.n	801344a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801340a:	4b2d      	ldr	r3, [pc, #180]	@ (80134c0 <UART_SetConfig+0xac0>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f003 0320 	and.w	r3, r3, #32
 8013412:	2b00      	cmp	r3, #0
 8013414:	d009      	beq.n	801342a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013416:	4b2a      	ldr	r3, [pc, #168]	@ (80134c0 <UART_SetConfig+0xac0>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	08db      	lsrs	r3, r3, #3
 801341c:	f003 0303 	and.w	r3, r3, #3
 8013420:	4a28      	ldr	r2, [pc, #160]	@ (80134c4 <UART_SetConfig+0xac4>)
 8013422:	fa22 f303 	lsr.w	r3, r2, r3
 8013426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013428:	e00f      	b.n	801344a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801342a:	4b26      	ldr	r3, [pc, #152]	@ (80134c4 <UART_SetConfig+0xac4>)
 801342c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801342e:	e00c      	b.n	801344a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013430:	4b25      	ldr	r3, [pc, #148]	@ (80134c8 <UART_SetConfig+0xac8>)
 8013432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013434:	e009      	b.n	801344a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801343c:	e005      	b.n	801344a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801343e:	2300      	movs	r3, #0
 8013440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013442:	2301      	movs	r3, #1
 8013444:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013448:	bf00      	nop
    }

    if (pclk != 0U)
 801344a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801344c:	2b00      	cmp	r3, #0
 801344e:	d021      	beq.n	8013494 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013454:	4a1d      	ldr	r2, [pc, #116]	@ (80134cc <UART_SetConfig+0xacc>)
 8013456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801345a:	461a      	mov	r2, r3
 801345c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801345e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	085b      	lsrs	r3, r3, #1
 8013468:	441a      	add	r2, r3
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	685b      	ldr	r3, [r3, #4]
 801346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013472:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013476:	2b0f      	cmp	r3, #15
 8013478:	d909      	bls.n	801348e <UART_SetConfig+0xa8e>
 801347a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013480:	d205      	bcs.n	801348e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013484:	b29a      	uxth	r2, r3
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	60da      	str	r2, [r3, #12]
 801348c:	e002      	b.n	8013494 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801348e:	2301      	movs	r3, #1
 8013490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	2201      	movs	r2, #1
 8013498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	2201      	movs	r2, #1
 80134a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	2200      	movs	r2, #0
 80134a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	2200      	movs	r2, #0
 80134ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80134b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3748      	adds	r7, #72	@ 0x48
 80134b8:	46bd      	mov	sp, r7
 80134ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80134be:	bf00      	nop
 80134c0:	58024400 	.word	0x58024400
 80134c4:	03d09000 	.word	0x03d09000
 80134c8:	003d0900 	.word	0x003d0900
 80134cc:	0801903c 	.word	0x0801903c

080134d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134dc:	f003 0308 	and.w	r3, r3, #8
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d00a      	beq.n	80134fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	430a      	orrs	r2, r1
 80134f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134fe:	f003 0301 	and.w	r3, r3, #1
 8013502:	2b00      	cmp	r3, #0
 8013504:	d00a      	beq.n	801351c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	685b      	ldr	r3, [r3, #4]
 801350c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	430a      	orrs	r2, r1
 801351a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013520:	f003 0302 	and.w	r3, r3, #2
 8013524:	2b00      	cmp	r3, #0
 8013526:	d00a      	beq.n	801353e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	430a      	orrs	r2, r1
 801353c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013542:	f003 0304 	and.w	r3, r3, #4
 8013546:	2b00      	cmp	r3, #0
 8013548:	d00a      	beq.n	8013560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	685b      	ldr	r3, [r3, #4]
 8013550:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	430a      	orrs	r2, r1
 801355e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013564:	f003 0310 	and.w	r3, r3, #16
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00a      	beq.n	8013582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	689b      	ldr	r3, [r3, #8]
 8013572:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	430a      	orrs	r2, r1
 8013580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013586:	f003 0320 	and.w	r3, r3, #32
 801358a:	2b00      	cmp	r3, #0
 801358c:	d00a      	beq.n	80135a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	689b      	ldr	r3, [r3, #8]
 8013594:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	430a      	orrs	r2, r1
 80135a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d01a      	beq.n	80135e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	430a      	orrs	r2, r1
 80135c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80135ce:	d10a      	bne.n	80135e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	430a      	orrs	r2, r1
 80135e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d00a      	beq.n	8013608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	430a      	orrs	r2, r1
 8013606:	605a      	str	r2, [r3, #4]
  }
}
 8013608:	bf00      	nop
 801360a:	370c      	adds	r7, #12
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr

08013614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b098      	sub	sp, #96	@ 0x60
 8013618:	af02      	add	r7, sp, #8
 801361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2200      	movs	r2, #0
 8013620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013624:	f7ef f9c8 	bl	80029b8 <HAL_GetTick>
 8013628:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	f003 0308 	and.w	r3, r3, #8
 8013634:	2b08      	cmp	r3, #8
 8013636:	d12f      	bne.n	8013698 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013638:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801363c:	9300      	str	r3, [sp, #0]
 801363e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013640:	2200      	movs	r2, #0
 8013642:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f000 f88e 	bl	8013768 <UART_WaitOnFlagUntilTimeout>
 801364c:	4603      	mov	r3, r0
 801364e:	2b00      	cmp	r3, #0
 8013650:	d022      	beq.n	8013698 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801365a:	e853 3f00 	ldrex	r3, [r3]
 801365e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013666:	653b      	str	r3, [r7, #80]	@ 0x50
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	461a      	mov	r2, r3
 801366e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013670:	647b      	str	r3, [r7, #68]	@ 0x44
 8013672:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013678:	e841 2300 	strex	r3, r2, [r1]
 801367c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801367e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013680:	2b00      	cmp	r3, #0
 8013682:	d1e6      	bne.n	8013652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2220      	movs	r2, #32
 8013688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2200      	movs	r2, #0
 8013690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013694:	2303      	movs	r3, #3
 8013696:	e063      	b.n	8013760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f003 0304 	and.w	r3, r3, #4
 80136a2:	2b04      	cmp	r3, #4
 80136a4:	d149      	bne.n	801373a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80136a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80136aa:	9300      	str	r3, [sp, #0]
 80136ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136ae:	2200      	movs	r2, #0
 80136b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f000 f857 	bl	8013768 <UART_WaitOnFlagUntilTimeout>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d03c      	beq.n	801373a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c8:	e853 3f00 	ldrex	r3, [r3]
 80136cc:	623b      	str	r3, [r7, #32]
   return(result);
 80136ce:	6a3b      	ldr	r3, [r7, #32]
 80136d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80136d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	461a      	mov	r2, r3
 80136dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136de:	633b      	str	r3, [r7, #48]	@ 0x30
 80136e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80136e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136e6:	e841 2300 	strex	r3, r2, [r1]
 80136ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80136ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d1e6      	bne.n	80136c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	3308      	adds	r3, #8
 80136f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	e853 3f00 	ldrex	r3, [r3]
 8013700:	60fb      	str	r3, [r7, #12]
   return(result);
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	f023 0301 	bic.w	r3, r3, #1
 8013708:	64bb      	str	r3, [r7, #72]	@ 0x48
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	3308      	adds	r3, #8
 8013710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013712:	61fa      	str	r2, [r7, #28]
 8013714:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013716:	69b9      	ldr	r1, [r7, #24]
 8013718:	69fa      	ldr	r2, [r7, #28]
 801371a:	e841 2300 	strex	r3, r2, [r1]
 801371e:	617b      	str	r3, [r7, #20]
   return(result);
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d1e5      	bne.n	80136f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2220      	movs	r2, #32
 801372a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2200      	movs	r2, #0
 8013732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013736:	2303      	movs	r3, #3
 8013738:	e012      	b.n	8013760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2220      	movs	r2, #32
 801373e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2220      	movs	r2, #32
 8013746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2200      	movs	r2, #0
 801374e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2200      	movs	r2, #0
 8013754:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2200      	movs	r2, #0
 801375a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801375e:	2300      	movs	r3, #0
}
 8013760:	4618      	mov	r0, r3
 8013762:	3758      	adds	r7, #88	@ 0x58
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	603b      	str	r3, [r7, #0]
 8013774:	4613      	mov	r3, r2
 8013776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013778:	e04f      	b.n	801381a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013780:	d04b      	beq.n	801381a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013782:	f7ef f919 	bl	80029b8 <HAL_GetTick>
 8013786:	4602      	mov	r2, r0
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	1ad3      	subs	r3, r2, r3
 801378c:	69ba      	ldr	r2, [r7, #24]
 801378e:	429a      	cmp	r2, r3
 8013790:	d302      	bcc.n	8013798 <UART_WaitOnFlagUntilTimeout+0x30>
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d101      	bne.n	801379c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013798:	2303      	movs	r3, #3
 801379a:	e04e      	b.n	801383a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f003 0304 	and.w	r3, r3, #4
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d037      	beq.n	801381a <UART_WaitOnFlagUntilTimeout+0xb2>
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	2b80      	cmp	r3, #128	@ 0x80
 80137ae:	d034      	beq.n	801381a <UART_WaitOnFlagUntilTimeout+0xb2>
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	2b40      	cmp	r3, #64	@ 0x40
 80137b4:	d031      	beq.n	801381a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	69db      	ldr	r3, [r3, #28]
 80137bc:	f003 0308 	and.w	r3, r3, #8
 80137c0:	2b08      	cmp	r3, #8
 80137c2:	d110      	bne.n	80137e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2208      	movs	r2, #8
 80137ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f000 f921 	bl	8013a14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	2208      	movs	r2, #8
 80137d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2200      	movs	r2, #0
 80137de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80137e2:	2301      	movs	r3, #1
 80137e4:	e029      	b.n	801383a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	69db      	ldr	r3, [r3, #28]
 80137ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80137f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80137f4:	d111      	bne.n	801381a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80137fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013800:	68f8      	ldr	r0, [r7, #12]
 8013802:	f000 f907 	bl	8013a14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2220      	movs	r2, #32
 801380a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2200      	movs	r2, #0
 8013812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013816:	2303      	movs	r3, #3
 8013818:	e00f      	b.n	801383a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	69da      	ldr	r2, [r3, #28]
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	4013      	ands	r3, r2
 8013824:	68ba      	ldr	r2, [r7, #8]
 8013826:	429a      	cmp	r2, r3
 8013828:	bf0c      	ite	eq
 801382a:	2301      	moveq	r3, #1
 801382c:	2300      	movne	r3, #0
 801382e:	b2db      	uxtb	r3, r3
 8013830:	461a      	mov	r2, r3
 8013832:	79fb      	ldrb	r3, [r7, #7]
 8013834:	429a      	cmp	r2, r3
 8013836:	d0a0      	beq.n	801377a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013838:	2300      	movs	r3, #0
}
 801383a:	4618      	mov	r0, r3
 801383c:	3710      	adds	r7, #16
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
	...

08013844 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b096      	sub	sp, #88	@ 0x58
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	4613      	mov	r3, r2
 8013850:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	68ba      	ldr	r2, [r7, #8]
 8013856:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	88fa      	ldrh	r2, [r7, #6]
 801385c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2200      	movs	r2, #0
 8013864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2222      	movs	r2, #34	@ 0x22
 801386c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013876:	2b00      	cmp	r3, #0
 8013878:	d02d      	beq.n	80138d6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013880:	4a40      	ldr	r2, [pc, #256]	@ (8013984 <UART_Start_Receive_DMA+0x140>)
 8013882:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801388a:	4a3f      	ldr	r2, [pc, #252]	@ (8013988 <UART_Start_Receive_DMA+0x144>)
 801388c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013894:	4a3d      	ldr	r2, [pc, #244]	@ (801398c <UART_Start_Receive_DMA+0x148>)
 8013896:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801389e:	2200      	movs	r2, #0
 80138a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	3324      	adds	r3, #36	@ 0x24
 80138ae:	4619      	mov	r1, r3
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138b4:	461a      	mov	r2, r3
 80138b6:	88fb      	ldrh	r3, [r7, #6]
 80138b8:	f7f1 f850 	bl	800495c <HAL_DMA_Start_IT>
 80138bc:	4603      	mov	r3, r0
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d009      	beq.n	80138d6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2210      	movs	r2, #16
 80138c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2220      	movs	r2, #32
 80138ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80138d2:	2301      	movs	r3, #1
 80138d4:	e051      	b.n	801397a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	691b      	ldr	r3, [r3, #16]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d018      	beq.n	8013910 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138e6:	e853 3f00 	ldrex	r3, [r3]
 80138ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80138ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80138f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	461a      	mov	r2, r3
 80138fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80138fe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013900:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013904:	e841 2300 	strex	r3, r2, [r1]
 8013908:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801390a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801390c:	2b00      	cmp	r3, #0
 801390e:	d1e6      	bne.n	80138de <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	3308      	adds	r3, #8
 8013916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801391a:	e853 3f00 	ldrex	r3, [r3]
 801391e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013922:	f043 0301 	orr.w	r3, r3, #1
 8013926:	653b      	str	r3, [r7, #80]	@ 0x50
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	3308      	adds	r3, #8
 801392e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013930:	637a      	str	r2, [r7, #52]	@ 0x34
 8013932:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013934:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013936:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013938:	e841 2300 	strex	r3, r2, [r1]
 801393c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801393e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013940:	2b00      	cmp	r3, #0
 8013942:	d1e5      	bne.n	8013910 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	3308      	adds	r3, #8
 801394a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	e853 3f00 	ldrex	r3, [r3]
 8013952:	613b      	str	r3, [r7, #16]
   return(result);
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801395a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	3308      	adds	r3, #8
 8013962:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013964:	623a      	str	r2, [r7, #32]
 8013966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013968:	69f9      	ldr	r1, [r7, #28]
 801396a:	6a3a      	ldr	r2, [r7, #32]
 801396c:	e841 2300 	strex	r3, r2, [r1]
 8013970:	61bb      	str	r3, [r7, #24]
   return(result);
 8013972:	69bb      	ldr	r3, [r7, #24]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d1e5      	bne.n	8013944 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013978:	2300      	movs	r3, #0
}
 801397a:	4618      	mov	r0, r3
 801397c:	3758      	adds	r7, #88	@ 0x58
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
 8013982:	bf00      	nop
 8013984:	08013ae1 	.word	0x08013ae1
 8013988:	08013c09 	.word	0x08013c09
 801398c:	08013c47 	.word	0x08013c47

08013990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013990:	b480      	push	{r7}
 8013992:	b08f      	sub	sp, #60	@ 0x3c
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801399e:	6a3b      	ldr	r3, [r7, #32]
 80139a0:	e853 3f00 	ldrex	r3, [r3]
 80139a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80139ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	461a      	mov	r2, r3
 80139b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80139b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80139bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80139be:	e841 2300 	strex	r3, r2, [r1]
 80139c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80139c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d1e6      	bne.n	8013998 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	3308      	adds	r3, #8
 80139d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	e853 3f00 	ldrex	r3, [r3]
 80139d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80139e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	3308      	adds	r3, #8
 80139e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139ea:	61ba      	str	r2, [r7, #24]
 80139ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ee:	6979      	ldr	r1, [r7, #20]
 80139f0:	69ba      	ldr	r2, [r7, #24]
 80139f2:	e841 2300 	strex	r3, r2, [r1]
 80139f6:	613b      	str	r3, [r7, #16]
   return(result);
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d1e5      	bne.n	80139ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2220      	movs	r2, #32
 8013a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8013a06:	bf00      	nop
 8013a08:	373c      	adds	r7, #60	@ 0x3c
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr
	...

08013a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b095      	sub	sp, #84	@ 0x54
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a24:	e853 3f00 	ldrex	r3, [r3]
 8013a28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	461a      	mov	r2, r3
 8013a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8013a3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013a40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013a42:	e841 2300 	strex	r3, r2, [r1]
 8013a46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d1e6      	bne.n	8013a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	3308      	adds	r3, #8
 8013a54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a56:	6a3b      	ldr	r3, [r7, #32]
 8013a58:	e853 3f00 	ldrex	r3, [r3]
 8013a5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a5e:	69fa      	ldr	r2, [r7, #28]
 8013a60:	4b1e      	ldr	r3, [pc, #120]	@ (8013adc <UART_EndRxTransfer+0xc8>)
 8013a62:	4013      	ands	r3, r2
 8013a64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	3308      	adds	r3, #8
 8013a6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013a74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a76:	e841 2300 	strex	r3, r2, [r1]
 8013a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d1e5      	bne.n	8013a4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d118      	bne.n	8013abc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	e853 3f00 	ldrex	r3, [r3]
 8013a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	f023 0310 	bic.w	r3, r3, #16
 8013a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013aa8:	61bb      	str	r3, [r7, #24]
 8013aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013aac:	6979      	ldr	r1, [r7, #20]
 8013aae:	69ba      	ldr	r2, [r7, #24]
 8013ab0:	e841 2300 	strex	r3, r2, [r1]
 8013ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d1e6      	bne.n	8013a8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2220      	movs	r2, #32
 8013ac0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2200      	movs	r2, #0
 8013ace:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013ad0:	bf00      	nop
 8013ad2:	3754      	adds	r7, #84	@ 0x54
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr
 8013adc:	effffffe 	.word	0xeffffffe

08013ae0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b09c      	sub	sp, #112	@ 0x70
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013aec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	69db      	ldr	r3, [r3, #28]
 8013af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013af6:	d071      	beq.n	8013bdc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013afa:	2200      	movs	r2, #0
 8013afc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b08:	e853 3f00 	ldrex	r3, [r3]
 8013b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	461a      	mov	r2, r3
 8013b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013b20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013b24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013b26:	e841 2300 	strex	r3, r2, [r1]
 8013b2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d1e6      	bne.n	8013b00 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	3308      	adds	r3, #8
 8013b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b3c:	e853 3f00 	ldrex	r3, [r3]
 8013b40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b44:	f023 0301 	bic.w	r3, r3, #1
 8013b48:	667b      	str	r3, [r7, #100]	@ 0x64
 8013b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	3308      	adds	r3, #8
 8013b50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013b52:	647a      	str	r2, [r7, #68]	@ 0x44
 8013b54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013b5a:	e841 2300 	strex	r3, r2, [r1]
 8013b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d1e5      	bne.n	8013b32 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	3308      	adds	r3, #8
 8013b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b70:	e853 3f00 	ldrex	r3, [r3]
 8013b74:	623b      	str	r3, [r7, #32]
   return(result);
 8013b76:	6a3b      	ldr	r3, [r7, #32]
 8013b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013b7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8013b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	3308      	adds	r3, #8
 8013b84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013b86:	633a      	str	r2, [r7, #48]	@ 0x30
 8013b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b8e:	e841 2300 	strex	r3, r2, [r1]
 8013b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d1e5      	bne.n	8013b66 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b9c:	2220      	movs	r2, #32
 8013b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ba6:	2b01      	cmp	r3, #1
 8013ba8:	d118      	bne.n	8013bdc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb0:	693b      	ldr	r3, [r7, #16]
 8013bb2:	e853 3f00 	ldrex	r3, [r3]
 8013bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f023 0310 	bic.w	r3, r3, #16
 8013bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bc8:	61fb      	str	r3, [r7, #28]
 8013bca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bcc:	69b9      	ldr	r1, [r7, #24]
 8013bce:	69fa      	ldr	r2, [r7, #28]
 8013bd0:	e841 2300 	strex	r3, r2, [r1]
 8013bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d1e6      	bne.n	8013baa <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bde:	2200      	movs	r2, #0
 8013be0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d107      	bne.n	8013bfa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013bf4:	f7fe fef8 	bl	80129e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013bf8:	e002      	b.n	8013c00 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013bfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013bfc:	f7ed fc60 	bl	80014c0 <HAL_UART_RxCpltCallback>
}
 8013c00:	bf00      	nop
 8013c02:	3770      	adds	r7, #112	@ 0x70
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c14:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2201      	movs	r2, #1
 8013c1a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c20:	2b01      	cmp	r3, #1
 8013c22:	d109      	bne.n	8013c38 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013c2a:	085b      	lsrs	r3, r3, #1
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	4619      	mov	r1, r3
 8013c30:	68f8      	ldr	r0, [r7, #12]
 8013c32:	f7fe fed9 	bl	80129e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013c36:	e002      	b.n	8013c3e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013c38:	68f8      	ldr	r0, [r7, #12]
 8013c3a:	f7fe fec1 	bl	80129c0 <HAL_UART_RxHalfCpltCallback>
}
 8013c3e:	bf00      	nop
 8013c40:	3710      	adds	r7, #16
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}

08013c46 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013c46:	b580      	push	{r7, lr}
 8013c48:	b086      	sub	sp, #24
 8013c4a:	af00      	add	r7, sp, #0
 8013c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c52:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013c5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013c62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013c6e:	2b80      	cmp	r3, #128	@ 0x80
 8013c70:	d109      	bne.n	8013c86 <UART_DMAError+0x40>
 8013c72:	693b      	ldr	r3, [r7, #16]
 8013c74:	2b21      	cmp	r3, #33	@ 0x21
 8013c76:	d106      	bne.n	8013c86 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013c80:	6978      	ldr	r0, [r7, #20]
 8013c82:	f7ff fe85 	bl	8013990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	689b      	ldr	r3, [r3, #8]
 8013c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013c90:	2b40      	cmp	r3, #64	@ 0x40
 8013c92:	d109      	bne.n	8013ca8 <UART_DMAError+0x62>
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	2b22      	cmp	r3, #34	@ 0x22
 8013c98:	d106      	bne.n	8013ca8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013ca2:	6978      	ldr	r0, [r7, #20]
 8013ca4:	f7ff feb6 	bl	8013a14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cae:	f043 0210 	orr.w	r2, r3, #16
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013cb8:	6978      	ldr	r0, [r7, #20]
 8013cba:	f7fe fe8b 	bl	80129d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013cbe:	bf00      	nop
 8013cc0:	3718      	adds	r7, #24
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}

08013cc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013cc6:	b580      	push	{r7, lr}
 8013cc8:	b084      	sub	sp, #16
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	f7fe fe79 	bl	80129d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013ce2:	bf00      	nop
 8013ce4:	3710      	adds	r7, #16
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b088      	sub	sp, #32
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	e853 3f00 	ldrex	r3, [r3]
 8013cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013d06:	61fb      	str	r3, [r7, #28]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	61bb      	str	r3, [r7, #24]
 8013d12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d14:	6979      	ldr	r1, [r7, #20]
 8013d16:	69ba      	ldr	r2, [r7, #24]
 8013d18:	e841 2300 	strex	r3, r2, [r1]
 8013d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d1e6      	bne.n	8013cf2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2220      	movs	r2, #32
 8013d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f7fe fe3a 	bl	80129ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d38:	bf00      	nop
 8013d3a:	3720      	adds	r7, #32
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013d48:	bf00      	nop
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013d54:	b480      	push	{r7}
 8013d56:	b083      	sub	sp, #12
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013d5c:	bf00      	nop
 8013d5e:	370c      	adds	r7, #12
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b083      	sub	sp, #12
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013d70:	bf00      	nop
 8013d72:	370c      	adds	r7, #12
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	d101      	bne.n	8013d92 <HAL_UARTEx_EnableFifoMode+0x16>
 8013d8e:	2302      	movs	r3, #2
 8013d90:	e02b      	b.n	8013dea <HAL_UARTEx_EnableFifoMode+0x6e>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	2201      	movs	r2, #1
 8013d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2224      	movs	r2, #36	@ 0x24
 8013d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f022 0201 	bic.w	r2, r2, #1
 8013db8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013dc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8013dc8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	68fa      	ldr	r2, [r7, #12]
 8013dd0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f000 f88a 	bl	8013eec <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2220      	movs	r2, #32
 8013ddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2200      	movs	r2, #0
 8013de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013de8:	2300      	movs	r3, #0
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3710      	adds	r7, #16
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}

08013df2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013df2:	b580      	push	{r7, lr}
 8013df4:	b084      	sub	sp, #16
 8013df6:	af00      	add	r7, sp, #0
 8013df8:	6078      	str	r0, [r7, #4]
 8013dfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d101      	bne.n	8013e0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013e06:	2302      	movs	r3, #2
 8013e08:	e02d      	b.n	8013e66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2224      	movs	r2, #36	@ 0x24
 8013e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	681a      	ldr	r2, [r3, #0]
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f022 0201 	bic.w	r2, r2, #1
 8013e30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	689b      	ldr	r3, [r3, #8]
 8013e38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	683a      	ldr	r2, [r7, #0]
 8013e42:	430a      	orrs	r2, r1
 8013e44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f000 f850 	bl	8013eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2220      	movs	r2, #32
 8013e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013e64:	2300      	movs	r3, #0
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3710      	adds	r7, #16
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}

08013e6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013e6e:	b580      	push	{r7, lr}
 8013e70:	b084      	sub	sp, #16
 8013e72:	af00      	add	r7, sp, #0
 8013e74:	6078      	str	r0, [r7, #4]
 8013e76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d101      	bne.n	8013e86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013e82:	2302      	movs	r3, #2
 8013e84:	e02d      	b.n	8013ee2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	2201      	movs	r2, #1
 8013e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2224      	movs	r2, #36	@ 0x24
 8013e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	681a      	ldr	r2, [r3, #0]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	f022 0201 	bic.w	r2, r2, #1
 8013eac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	689b      	ldr	r3, [r3, #8]
 8013eb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	683a      	ldr	r2, [r7, #0]
 8013ebe:	430a      	orrs	r2, r1
 8013ec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f000 f812 	bl	8013eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	68fa      	ldr	r2, [r7, #12]
 8013ece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2220      	movs	r2, #32
 8013ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2200      	movs	r2, #0
 8013edc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013ee0:	2300      	movs	r3, #0
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3710      	adds	r7, #16
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
	...

08013eec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013eec:	b480      	push	{r7}
 8013eee:	b085      	sub	sp, #20
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d108      	bne.n	8013f0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2201      	movs	r2, #1
 8013f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2201      	movs	r2, #1
 8013f08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013f0c:	e031      	b.n	8013f72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013f0e:	2310      	movs	r3, #16
 8013f10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013f12:	2310      	movs	r3, #16
 8013f14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	689b      	ldr	r3, [r3, #8]
 8013f1c:	0e5b      	lsrs	r3, r3, #25
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	f003 0307 	and.w	r3, r3, #7
 8013f24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	689b      	ldr	r3, [r3, #8]
 8013f2c:	0f5b      	lsrs	r3, r3, #29
 8013f2e:	b2db      	uxtb	r3, r3
 8013f30:	f003 0307 	and.w	r3, r3, #7
 8013f34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013f36:	7bbb      	ldrb	r3, [r7, #14]
 8013f38:	7b3a      	ldrb	r2, [r7, #12]
 8013f3a:	4911      	ldr	r1, [pc, #68]	@ (8013f80 <UARTEx_SetNbDataToProcess+0x94>)
 8013f3c:	5c8a      	ldrb	r2, [r1, r2]
 8013f3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013f42:	7b3a      	ldrb	r2, [r7, #12]
 8013f44:	490f      	ldr	r1, [pc, #60]	@ (8013f84 <UARTEx_SetNbDataToProcess+0x98>)
 8013f46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013f48:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f4c:	b29a      	uxth	r2, r3
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013f54:	7bfb      	ldrb	r3, [r7, #15]
 8013f56:	7b7a      	ldrb	r2, [r7, #13]
 8013f58:	4909      	ldr	r1, [pc, #36]	@ (8013f80 <UARTEx_SetNbDataToProcess+0x94>)
 8013f5a:	5c8a      	ldrb	r2, [r1, r2]
 8013f5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013f60:	7b7a      	ldrb	r2, [r7, #13]
 8013f62:	4908      	ldr	r1, [pc, #32]	@ (8013f84 <UARTEx_SetNbDataToProcess+0x98>)
 8013f64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013f66:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f6a:	b29a      	uxth	r2, r3
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013f72:	bf00      	nop
 8013f74:	3714      	adds	r7, #20
 8013f76:	46bd      	mov	sp, r7
 8013f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7c:	4770      	bx	lr
 8013f7e:	bf00      	nop
 8013f80:	08019054 	.word	0x08019054
 8013f84:	0801905c 	.word	0x0801905c

08013f88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013f88:	b084      	sub	sp, #16
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b084      	sub	sp, #16
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
 8013f92:	f107 001c 	add.w	r0, r7, #28
 8013f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013f9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d121      	bne.n	8013fe6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fa6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	68da      	ldr	r2, [r3, #12]
 8013fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8014064 <USB_CoreInit+0xdc>)
 8013fb4:	4013      	ands	r3, r2
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	68db      	ldr	r3, [r3, #12]
 8013fbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013fca:	2b01      	cmp	r3, #1
 8013fcc:	d105      	bne.n	8013fda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	68db      	ldr	r3, [r3, #12]
 8013fd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f001 fafa 	bl	80155d4 <USB_CoreReset>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	73fb      	strb	r3, [r7, #15]
 8013fe4:	e01b      	b.n	801401e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f001 faee 	bl	80155d4 <USB_CoreReset>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013ffc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014000:	2b00      	cmp	r3, #0
 8014002:	d106      	bne.n	8014012 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014008:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	639a      	str	r2, [r3, #56]	@ 0x38
 8014010:	e005      	b.n	801401e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014016:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801401e:	7fbb      	ldrb	r3, [r7, #30]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d116      	bne.n	8014052 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014028:	b29a      	uxth	r2, r3
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014032:	4b0d      	ldr	r3, [pc, #52]	@ (8014068 <USB_CoreInit+0xe0>)
 8014034:	4313      	orrs	r3, r2
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	689b      	ldr	r3, [r3, #8]
 801403e:	f043 0206 	orr.w	r2, r3, #6
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	689b      	ldr	r3, [r3, #8]
 801404a:	f043 0220 	orr.w	r2, r3, #32
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014052:	7bfb      	ldrb	r3, [r7, #15]
}
 8014054:	4618      	mov	r0, r3
 8014056:	3710      	adds	r7, #16
 8014058:	46bd      	mov	sp, r7
 801405a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801405e:	b004      	add	sp, #16
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop
 8014064:	ffbdffbf 	.word	0xffbdffbf
 8014068:	03ee0000 	.word	0x03ee0000

0801406c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801406c:	b480      	push	{r7}
 801406e:	b087      	sub	sp, #28
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	4613      	mov	r3, r2
 8014078:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801407a:	79fb      	ldrb	r3, [r7, #7]
 801407c:	2b02      	cmp	r3, #2
 801407e:	d165      	bne.n	801414c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	4a41      	ldr	r2, [pc, #260]	@ (8014188 <USB_SetTurnaroundTime+0x11c>)
 8014084:	4293      	cmp	r3, r2
 8014086:	d906      	bls.n	8014096 <USB_SetTurnaroundTime+0x2a>
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	4a40      	ldr	r2, [pc, #256]	@ (801418c <USB_SetTurnaroundTime+0x120>)
 801408c:	4293      	cmp	r3, r2
 801408e:	d202      	bcs.n	8014096 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014090:	230f      	movs	r3, #15
 8014092:	617b      	str	r3, [r7, #20]
 8014094:	e062      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	4a3c      	ldr	r2, [pc, #240]	@ (801418c <USB_SetTurnaroundTime+0x120>)
 801409a:	4293      	cmp	r3, r2
 801409c:	d306      	bcc.n	80140ac <USB_SetTurnaroundTime+0x40>
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	4a3b      	ldr	r2, [pc, #236]	@ (8014190 <USB_SetTurnaroundTime+0x124>)
 80140a2:	4293      	cmp	r3, r2
 80140a4:	d202      	bcs.n	80140ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80140a6:	230e      	movs	r3, #14
 80140a8:	617b      	str	r3, [r7, #20]
 80140aa:	e057      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	4a38      	ldr	r2, [pc, #224]	@ (8014190 <USB_SetTurnaroundTime+0x124>)
 80140b0:	4293      	cmp	r3, r2
 80140b2:	d306      	bcc.n	80140c2 <USB_SetTurnaroundTime+0x56>
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	4a37      	ldr	r2, [pc, #220]	@ (8014194 <USB_SetTurnaroundTime+0x128>)
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d202      	bcs.n	80140c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80140bc:	230d      	movs	r3, #13
 80140be:	617b      	str	r3, [r7, #20]
 80140c0:	e04c      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	4a33      	ldr	r2, [pc, #204]	@ (8014194 <USB_SetTurnaroundTime+0x128>)
 80140c6:	4293      	cmp	r3, r2
 80140c8:	d306      	bcc.n	80140d8 <USB_SetTurnaroundTime+0x6c>
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	4a32      	ldr	r2, [pc, #200]	@ (8014198 <USB_SetTurnaroundTime+0x12c>)
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d802      	bhi.n	80140d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80140d2:	230c      	movs	r3, #12
 80140d4:	617b      	str	r3, [r7, #20]
 80140d6:	e041      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	4a2f      	ldr	r2, [pc, #188]	@ (8014198 <USB_SetTurnaroundTime+0x12c>)
 80140dc:	4293      	cmp	r3, r2
 80140de:	d906      	bls.n	80140ee <USB_SetTurnaroundTime+0x82>
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	4a2e      	ldr	r2, [pc, #184]	@ (801419c <USB_SetTurnaroundTime+0x130>)
 80140e4:	4293      	cmp	r3, r2
 80140e6:	d802      	bhi.n	80140ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80140e8:	230b      	movs	r3, #11
 80140ea:	617b      	str	r3, [r7, #20]
 80140ec:	e036      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	4a2a      	ldr	r2, [pc, #168]	@ (801419c <USB_SetTurnaroundTime+0x130>)
 80140f2:	4293      	cmp	r3, r2
 80140f4:	d906      	bls.n	8014104 <USB_SetTurnaroundTime+0x98>
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	4a29      	ldr	r2, [pc, #164]	@ (80141a0 <USB_SetTurnaroundTime+0x134>)
 80140fa:	4293      	cmp	r3, r2
 80140fc:	d802      	bhi.n	8014104 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80140fe:	230a      	movs	r3, #10
 8014100:	617b      	str	r3, [r7, #20]
 8014102:	e02b      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	4a26      	ldr	r2, [pc, #152]	@ (80141a0 <USB_SetTurnaroundTime+0x134>)
 8014108:	4293      	cmp	r3, r2
 801410a:	d906      	bls.n	801411a <USB_SetTurnaroundTime+0xae>
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	4a25      	ldr	r2, [pc, #148]	@ (80141a4 <USB_SetTurnaroundTime+0x138>)
 8014110:	4293      	cmp	r3, r2
 8014112:	d202      	bcs.n	801411a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014114:	2309      	movs	r3, #9
 8014116:	617b      	str	r3, [r7, #20]
 8014118:	e020      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	4a21      	ldr	r2, [pc, #132]	@ (80141a4 <USB_SetTurnaroundTime+0x138>)
 801411e:	4293      	cmp	r3, r2
 8014120:	d306      	bcc.n	8014130 <USB_SetTurnaroundTime+0xc4>
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	4a20      	ldr	r2, [pc, #128]	@ (80141a8 <USB_SetTurnaroundTime+0x13c>)
 8014126:	4293      	cmp	r3, r2
 8014128:	d802      	bhi.n	8014130 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801412a:	2308      	movs	r3, #8
 801412c:	617b      	str	r3, [r7, #20]
 801412e:	e015      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	4a1d      	ldr	r2, [pc, #116]	@ (80141a8 <USB_SetTurnaroundTime+0x13c>)
 8014134:	4293      	cmp	r3, r2
 8014136:	d906      	bls.n	8014146 <USB_SetTurnaroundTime+0xda>
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	4a1c      	ldr	r2, [pc, #112]	@ (80141ac <USB_SetTurnaroundTime+0x140>)
 801413c:	4293      	cmp	r3, r2
 801413e:	d202      	bcs.n	8014146 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014140:	2307      	movs	r3, #7
 8014142:	617b      	str	r3, [r7, #20]
 8014144:	e00a      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014146:	2306      	movs	r3, #6
 8014148:	617b      	str	r3, [r7, #20]
 801414a:	e007      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801414c:	79fb      	ldrb	r3, [r7, #7]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d102      	bne.n	8014158 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014152:	2309      	movs	r3, #9
 8014154:	617b      	str	r3, [r7, #20]
 8014156:	e001      	b.n	801415c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014158:	2309      	movs	r3, #9
 801415a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	68db      	ldr	r3, [r3, #12]
 8014160:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	68da      	ldr	r2, [r3, #12]
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	029b      	lsls	r3, r3, #10
 8014170:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014174:	431a      	orrs	r2, r3
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801417a:	2300      	movs	r3, #0
}
 801417c:	4618      	mov	r0, r3
 801417e:	371c      	adds	r7, #28
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr
 8014188:	00d8acbf 	.word	0x00d8acbf
 801418c:	00e4e1c0 	.word	0x00e4e1c0
 8014190:	00f42400 	.word	0x00f42400
 8014194:	01067380 	.word	0x01067380
 8014198:	011a499f 	.word	0x011a499f
 801419c:	01312cff 	.word	0x01312cff
 80141a0:	014ca43f 	.word	0x014ca43f
 80141a4:	016e3600 	.word	0x016e3600
 80141a8:	01a6ab1f 	.word	0x01a6ab1f
 80141ac:	01e84800 	.word	0x01e84800

080141b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80141b0:	b480      	push	{r7}
 80141b2:	b083      	sub	sp, #12
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	689b      	ldr	r3, [r3, #8]
 80141bc:	f043 0201 	orr.w	r2, r3, #1
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80141c4:	2300      	movs	r3, #0
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	370c      	adds	r7, #12
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr

080141d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80141d2:	b480      	push	{r7}
 80141d4:	b083      	sub	sp, #12
 80141d6:	af00      	add	r7, sp, #0
 80141d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	689b      	ldr	r3, [r3, #8]
 80141de:	f023 0201 	bic.w	r2, r3, #1
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80141e6:	2300      	movs	r3, #0
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	370c      	adds	r7, #12
 80141ec:	46bd      	mov	sp, r7
 80141ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f2:	4770      	bx	lr

080141f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	460b      	mov	r3, r1
 80141fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014200:	2300      	movs	r3, #0
 8014202:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014210:	78fb      	ldrb	r3, [r7, #3]
 8014212:	2b01      	cmp	r3, #1
 8014214:	d115      	bne.n	8014242 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	68db      	ldr	r3, [r3, #12]
 801421a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014222:	200a      	movs	r0, #10
 8014224:	f7ee fbd4 	bl	80029d0 <HAL_Delay>
      ms += 10U;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	330a      	adds	r3, #10
 801422c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f001 f93f 	bl	80154b2 <USB_GetMode>
 8014234:	4603      	mov	r3, r0
 8014236:	2b01      	cmp	r3, #1
 8014238:	d01e      	beq.n	8014278 <USB_SetCurrentMode+0x84>
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2bc7      	cmp	r3, #199	@ 0xc7
 801423e:	d9f0      	bls.n	8014222 <USB_SetCurrentMode+0x2e>
 8014240:	e01a      	b.n	8014278 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014242:	78fb      	ldrb	r3, [r7, #3]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d115      	bne.n	8014274 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	68db      	ldr	r3, [r3, #12]
 801424c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014254:	200a      	movs	r0, #10
 8014256:	f7ee fbbb 	bl	80029d0 <HAL_Delay>
      ms += 10U;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	330a      	adds	r3, #10
 801425e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f001 f926 	bl	80154b2 <USB_GetMode>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d005      	beq.n	8014278 <USB_SetCurrentMode+0x84>
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014270:	d9f0      	bls.n	8014254 <USB_SetCurrentMode+0x60>
 8014272:	e001      	b.n	8014278 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014274:	2301      	movs	r3, #1
 8014276:	e005      	b.n	8014284 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2bc8      	cmp	r3, #200	@ 0xc8
 801427c:	d101      	bne.n	8014282 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801427e:	2301      	movs	r3, #1
 8014280:	e000      	b.n	8014284 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014282:	2300      	movs	r3, #0
}
 8014284:	4618      	mov	r0, r3
 8014286:	3710      	adds	r7, #16
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801428c:	b084      	sub	sp, #16
 801428e:	b580      	push	{r7, lr}
 8014290:	b086      	sub	sp, #24
 8014292:	af00      	add	r7, sp, #0
 8014294:	6078      	str	r0, [r7, #4]
 8014296:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801429a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801429e:	2300      	movs	r3, #0
 80142a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80142a6:	2300      	movs	r3, #0
 80142a8:	613b      	str	r3, [r7, #16]
 80142aa:	e009      	b.n	80142c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	3340      	adds	r3, #64	@ 0x40
 80142b2:	009b      	lsls	r3, r3, #2
 80142b4:	4413      	add	r3, r2
 80142b6:	2200      	movs	r2, #0
 80142b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	3301      	adds	r3, #1
 80142be:	613b      	str	r3, [r7, #16]
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	2b0e      	cmp	r3, #14
 80142c4:	d9f2      	bls.n	80142ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80142c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d11c      	bne.n	8014308 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	68fa      	ldr	r2, [r7, #12]
 80142d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80142dc:	f043 0302 	orr.w	r3, r3, #2
 80142e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	601a      	str	r2, [r3, #0]
 8014306:	e005      	b.n	8014314 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801430c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801431a:	461a      	mov	r2, r3
 801431c:	2300      	movs	r3, #0
 801431e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014320:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014324:	2b01      	cmp	r3, #1
 8014326:	d10d      	bne.n	8014344 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801432c:	2b00      	cmp	r3, #0
 801432e:	d104      	bne.n	801433a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014330:	2100      	movs	r1, #0
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f000 f968 	bl	8014608 <USB_SetDevSpeed>
 8014338:	e008      	b.n	801434c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801433a:	2101      	movs	r1, #1
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f000 f963 	bl	8014608 <USB_SetDevSpeed>
 8014342:	e003      	b.n	801434c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014344:	2103      	movs	r1, #3
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f000 f95e 	bl	8014608 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801434c:	2110      	movs	r1, #16
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f000 f8fa 	bl	8014548 <USB_FlushTxFifo>
 8014354:	4603      	mov	r3, r0
 8014356:	2b00      	cmp	r3, #0
 8014358:	d001      	beq.n	801435e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801435a:	2301      	movs	r3, #1
 801435c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 f924 	bl	80145ac <USB_FlushRxFifo>
 8014364:	4603      	mov	r3, r0
 8014366:	2b00      	cmp	r3, #0
 8014368:	d001      	beq.n	801436e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801436a:	2301      	movs	r3, #1
 801436c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014374:	461a      	mov	r2, r3
 8014376:	2300      	movs	r3, #0
 8014378:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014380:	461a      	mov	r2, r3
 8014382:	2300      	movs	r3, #0
 8014384:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801438c:	461a      	mov	r2, r3
 801438e:	2300      	movs	r3, #0
 8014390:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014392:	2300      	movs	r3, #0
 8014394:	613b      	str	r3, [r7, #16]
 8014396:	e043      	b.n	8014420 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	015a      	lsls	r2, r3, #5
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	4413      	add	r3, r2
 80143a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80143aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80143ae:	d118      	bne.n	80143e2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d10a      	bne.n	80143cc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	015a      	lsls	r2, r3, #5
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	4413      	add	r3, r2
 80143be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143c2:	461a      	mov	r2, r3
 80143c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80143c8:	6013      	str	r3, [r2, #0]
 80143ca:	e013      	b.n	80143f4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	015a      	lsls	r2, r3, #5
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	4413      	add	r3, r2
 80143d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143d8:	461a      	mov	r2, r3
 80143da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80143de:	6013      	str	r3, [r2, #0]
 80143e0:	e008      	b.n	80143f4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	015a      	lsls	r2, r3, #5
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	4413      	add	r3, r2
 80143ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143ee:	461a      	mov	r2, r3
 80143f0:	2300      	movs	r3, #0
 80143f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	015a      	lsls	r2, r3, #5
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	4413      	add	r3, r2
 80143fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014400:	461a      	mov	r2, r3
 8014402:	2300      	movs	r3, #0
 8014404:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	015a      	lsls	r2, r3, #5
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	4413      	add	r3, r2
 801440e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014412:	461a      	mov	r2, r3
 8014414:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014418:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	3301      	adds	r3, #1
 801441e:	613b      	str	r3, [r7, #16]
 8014420:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014424:	461a      	mov	r2, r3
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	4293      	cmp	r3, r2
 801442a:	d3b5      	bcc.n	8014398 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801442c:	2300      	movs	r3, #0
 801442e:	613b      	str	r3, [r7, #16]
 8014430:	e043      	b.n	80144ba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	015a      	lsls	r2, r3, #5
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	4413      	add	r3, r2
 801443a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014448:	d118      	bne.n	801447c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d10a      	bne.n	8014466 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	015a      	lsls	r2, r3, #5
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	4413      	add	r3, r2
 8014458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801445c:	461a      	mov	r2, r3
 801445e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014462:	6013      	str	r3, [r2, #0]
 8014464:	e013      	b.n	801448e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	015a      	lsls	r2, r3, #5
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	4413      	add	r3, r2
 801446e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014472:	461a      	mov	r2, r3
 8014474:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014478:	6013      	str	r3, [r2, #0]
 801447a:	e008      	b.n	801448e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	015a      	lsls	r2, r3, #5
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	4413      	add	r3, r2
 8014484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014488:	461a      	mov	r2, r3
 801448a:	2300      	movs	r3, #0
 801448c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	015a      	lsls	r2, r3, #5
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	4413      	add	r3, r2
 8014496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801449a:	461a      	mov	r2, r3
 801449c:	2300      	movs	r3, #0
 801449e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80144a0:	693b      	ldr	r3, [r7, #16]
 80144a2:	015a      	lsls	r2, r3, #5
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	4413      	add	r3, r2
 80144a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144ac:	461a      	mov	r2, r3
 80144ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80144b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	3301      	adds	r3, #1
 80144b8:	613b      	str	r3, [r7, #16]
 80144ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80144be:	461a      	mov	r2, r3
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	4293      	cmp	r3, r2
 80144c4:	d3b5      	bcc.n	8014432 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144cc:	691b      	ldr	r3, [r3, #16]
 80144ce:	68fa      	ldr	r2, [r7, #12]
 80144d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80144d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80144d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2200      	movs	r2, #0
 80144de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80144e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80144e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d105      	bne.n	80144fc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	699b      	ldr	r3, [r3, #24]
 80144f4:	f043 0210 	orr.w	r2, r3, #16
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	699a      	ldr	r2, [r3, #24]
 8014500:	4b0f      	ldr	r3, [pc, #60]	@ (8014540 <USB_DevInit+0x2b4>)
 8014502:	4313      	orrs	r3, r2
 8014504:	687a      	ldr	r2, [r7, #4]
 8014506:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014508:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801450c:	2b00      	cmp	r3, #0
 801450e:	d005      	beq.n	801451c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	699b      	ldr	r3, [r3, #24]
 8014514:	f043 0208 	orr.w	r2, r3, #8
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801451c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014520:	2b01      	cmp	r3, #1
 8014522:	d105      	bne.n	8014530 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	699a      	ldr	r2, [r3, #24]
 8014528:	4b06      	ldr	r3, [pc, #24]	@ (8014544 <USB_DevInit+0x2b8>)
 801452a:	4313      	orrs	r3, r2
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014530:	7dfb      	ldrb	r3, [r7, #23]
}
 8014532:	4618      	mov	r0, r3
 8014534:	3718      	adds	r7, #24
 8014536:	46bd      	mov	sp, r7
 8014538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801453c:	b004      	add	sp, #16
 801453e:	4770      	bx	lr
 8014540:	803c3800 	.word	0x803c3800
 8014544:	40000004 	.word	0x40000004

08014548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014548:	b480      	push	{r7}
 801454a:	b085      	sub	sp, #20
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014552:	2300      	movs	r3, #0
 8014554:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	3301      	adds	r3, #1
 801455a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014562:	d901      	bls.n	8014568 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014564:	2303      	movs	r3, #3
 8014566:	e01b      	b.n	80145a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	691b      	ldr	r3, [r3, #16]
 801456c:	2b00      	cmp	r3, #0
 801456e:	daf2      	bge.n	8014556 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014570:	2300      	movs	r3, #0
 8014572:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	019b      	lsls	r3, r3, #6
 8014578:	f043 0220 	orr.w	r2, r3, #32
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	3301      	adds	r3, #1
 8014584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801458c:	d901      	bls.n	8014592 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801458e:	2303      	movs	r3, #3
 8014590:	e006      	b.n	80145a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	691b      	ldr	r3, [r3, #16]
 8014596:	f003 0320 	and.w	r3, r3, #32
 801459a:	2b20      	cmp	r3, #32
 801459c:	d0f0      	beq.n	8014580 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801459e:	2300      	movs	r3, #0
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3714      	adds	r7, #20
 80145a4:	46bd      	mov	sp, r7
 80145a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145aa:	4770      	bx	lr

080145ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80145ac:	b480      	push	{r7}
 80145ae:	b085      	sub	sp, #20
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80145b4:	2300      	movs	r3, #0
 80145b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	3301      	adds	r3, #1
 80145bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80145c4:	d901      	bls.n	80145ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80145c6:	2303      	movs	r3, #3
 80145c8:	e018      	b.n	80145fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	691b      	ldr	r3, [r3, #16]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	daf2      	bge.n	80145b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80145d2:	2300      	movs	r3, #0
 80145d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2210      	movs	r2, #16
 80145da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	3301      	adds	r3, #1
 80145e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80145e8:	d901      	bls.n	80145ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80145ea:	2303      	movs	r3, #3
 80145ec:	e006      	b.n	80145fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	691b      	ldr	r3, [r3, #16]
 80145f2:	f003 0310 	and.w	r3, r3, #16
 80145f6:	2b10      	cmp	r3, #16
 80145f8:	d0f0      	beq.n	80145dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80145fa:	2300      	movs	r3, #0
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	3714      	adds	r7, #20
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014608:	b480      	push	{r7}
 801460a:	b085      	sub	sp, #20
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	460b      	mov	r3, r1
 8014612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801461e:	681a      	ldr	r2, [r3, #0]
 8014620:	78fb      	ldrb	r3, [r7, #3]
 8014622:	68f9      	ldr	r1, [r7, #12]
 8014624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014628:	4313      	orrs	r3, r2
 801462a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801462c:	2300      	movs	r3, #0
}
 801462e:	4618      	mov	r0, r3
 8014630:	3714      	adds	r7, #20
 8014632:	46bd      	mov	sp, r7
 8014634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014638:	4770      	bx	lr

0801463a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801463a:	b480      	push	{r7}
 801463c:	b087      	sub	sp, #28
 801463e:	af00      	add	r7, sp, #0
 8014640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801464c:	689b      	ldr	r3, [r3, #8]
 801464e:	f003 0306 	and.w	r3, r3, #6
 8014652:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d102      	bne.n	8014660 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801465a:	2300      	movs	r3, #0
 801465c:	75fb      	strb	r3, [r7, #23]
 801465e:	e00a      	b.n	8014676 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	2b02      	cmp	r3, #2
 8014664:	d002      	beq.n	801466c <USB_GetDevSpeed+0x32>
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	2b06      	cmp	r3, #6
 801466a:	d102      	bne.n	8014672 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801466c:	2302      	movs	r3, #2
 801466e:	75fb      	strb	r3, [r7, #23]
 8014670:	e001      	b.n	8014676 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014672:	230f      	movs	r3, #15
 8014674:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014676:	7dfb      	ldrb	r3, [r7, #23]
}
 8014678:	4618      	mov	r0, r3
 801467a:	371c      	adds	r7, #28
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr

08014684 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014684:	b480      	push	{r7}
 8014686:	b085      	sub	sp, #20
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	785b      	ldrb	r3, [r3, #1]
 801469c:	2b01      	cmp	r3, #1
 801469e:	d139      	bne.n	8014714 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146a6:	69da      	ldr	r2, [r3, #28]
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	781b      	ldrb	r3, [r3, #0]
 80146ac:	f003 030f 	and.w	r3, r3, #15
 80146b0:	2101      	movs	r1, #1
 80146b2:	fa01 f303 	lsl.w	r3, r1, r3
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	68f9      	ldr	r1, [r7, #12]
 80146ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146be:	4313      	orrs	r3, r2
 80146c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	015a      	lsls	r2, r3, #5
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	4413      	add	r3, r2
 80146ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d153      	bne.n	8014780 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	015a      	lsls	r2, r3, #5
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	4413      	add	r3, r2
 80146e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80146e4:	681a      	ldr	r2, [r3, #0]
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	791b      	ldrb	r3, [r3, #4]
 80146f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80146f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	059b      	lsls	r3, r3, #22
 80146fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80146fc:	431a      	orrs	r2, r3
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	0159      	lsls	r1, r3, #5
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	440b      	add	r3, r1
 8014706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801470a:	4619      	mov	r1, r3
 801470c:	4b20      	ldr	r3, [pc, #128]	@ (8014790 <USB_ActivateEndpoint+0x10c>)
 801470e:	4313      	orrs	r3, r2
 8014710:	600b      	str	r3, [r1, #0]
 8014712:	e035      	b.n	8014780 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801471a:	69da      	ldr	r2, [r3, #28]
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	f003 030f 	and.w	r3, r3, #15
 8014724:	2101      	movs	r1, #1
 8014726:	fa01 f303 	lsl.w	r3, r1, r3
 801472a:	041b      	lsls	r3, r3, #16
 801472c:	68f9      	ldr	r1, [r7, #12]
 801472e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014732:	4313      	orrs	r3, r2
 8014734:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	015a      	lsls	r2, r3, #5
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	4413      	add	r3, r2
 801473e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014748:	2b00      	cmp	r3, #0
 801474a:	d119      	bne.n	8014780 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	015a      	lsls	r2, r3, #5
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	4413      	add	r3, r2
 8014754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	689b      	ldr	r3, [r3, #8]
 801475e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014762:	683b      	ldr	r3, [r7, #0]
 8014764:	791b      	ldrb	r3, [r3, #4]
 8014766:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014768:	430b      	orrs	r3, r1
 801476a:	431a      	orrs	r2, r3
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	0159      	lsls	r1, r3, #5
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	440b      	add	r3, r1
 8014774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014778:	4619      	mov	r1, r3
 801477a:	4b05      	ldr	r3, [pc, #20]	@ (8014790 <USB_ActivateEndpoint+0x10c>)
 801477c:	4313      	orrs	r3, r2
 801477e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014780:	2300      	movs	r3, #0
}
 8014782:	4618      	mov	r0, r3
 8014784:	3714      	adds	r7, #20
 8014786:	46bd      	mov	sp, r7
 8014788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop
 8014790:	10008000 	.word	0x10008000

08014794 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014794:	b480      	push	{r7}
 8014796:	b085      	sub	sp, #20
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	785b      	ldrb	r3, [r3, #1]
 80147ac:	2b01      	cmp	r3, #1
 80147ae:	d161      	bne.n	8014874 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	015a      	lsls	r2, r3, #5
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	4413      	add	r3, r2
 80147b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80147c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80147c6:	d11f      	bne.n	8014808 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	015a      	lsls	r2, r3, #5
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	4413      	add	r3, r2
 80147d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	68ba      	ldr	r2, [r7, #8]
 80147d8:	0151      	lsls	r1, r2, #5
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	440a      	add	r2, r1
 80147de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80147e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80147e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	015a      	lsls	r2, r3, #5
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	4413      	add	r3, r2
 80147f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	68ba      	ldr	r2, [r7, #8]
 80147f8:	0151      	lsls	r1, r2, #5
 80147fa:	68fa      	ldr	r2, [r7, #12]
 80147fc:	440a      	add	r2, r1
 80147fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014802:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014806:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801480e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	f003 030f 	and.w	r3, r3, #15
 8014818:	2101      	movs	r1, #1
 801481a:	fa01 f303 	lsl.w	r3, r1, r3
 801481e:	b29b      	uxth	r3, r3
 8014820:	43db      	mvns	r3, r3
 8014822:	68f9      	ldr	r1, [r7, #12]
 8014824:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014828:	4013      	ands	r3, r2
 801482a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014832:	69da      	ldr	r2, [r3, #28]
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	f003 030f 	and.w	r3, r3, #15
 801483c:	2101      	movs	r1, #1
 801483e:	fa01 f303 	lsl.w	r3, r1, r3
 8014842:	b29b      	uxth	r3, r3
 8014844:	43db      	mvns	r3, r3
 8014846:	68f9      	ldr	r1, [r7, #12]
 8014848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801484c:	4013      	ands	r3, r2
 801484e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	015a      	lsls	r2, r3, #5
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	4413      	add	r3, r2
 8014858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801485c:	681a      	ldr	r2, [r3, #0]
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	0159      	lsls	r1, r3, #5
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	440b      	add	r3, r1
 8014866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801486a:	4619      	mov	r1, r3
 801486c:	4b35      	ldr	r3, [pc, #212]	@ (8014944 <USB_DeactivateEndpoint+0x1b0>)
 801486e:	4013      	ands	r3, r2
 8014870:	600b      	str	r3, [r1, #0]
 8014872:	e060      	b.n	8014936 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	015a      	lsls	r2, r3, #5
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	4413      	add	r3, r2
 801487c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014886:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801488a:	d11f      	bne.n	80148cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	015a      	lsls	r2, r3, #5
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	4413      	add	r3, r2
 8014894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	68ba      	ldr	r2, [r7, #8]
 801489c:	0151      	lsls	r1, r2, #5
 801489e:	68fa      	ldr	r2, [r7, #12]
 80148a0:	440a      	add	r2, r1
 80148a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80148a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80148aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	015a      	lsls	r2, r3, #5
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	4413      	add	r3, r2
 80148b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	68ba      	ldr	r2, [r7, #8]
 80148bc:	0151      	lsls	r1, r2, #5
 80148be:	68fa      	ldr	r2, [r7, #12]
 80148c0:	440a      	add	r2, r1
 80148c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80148c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	f003 030f 	and.w	r3, r3, #15
 80148dc:	2101      	movs	r1, #1
 80148de:	fa01 f303 	lsl.w	r3, r1, r3
 80148e2:	041b      	lsls	r3, r3, #16
 80148e4:	43db      	mvns	r3, r3
 80148e6:	68f9      	ldr	r1, [r7, #12]
 80148e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148ec:	4013      	ands	r3, r2
 80148ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148f6:	69da      	ldr	r2, [r3, #28]
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	f003 030f 	and.w	r3, r3, #15
 8014900:	2101      	movs	r1, #1
 8014902:	fa01 f303 	lsl.w	r3, r1, r3
 8014906:	041b      	lsls	r3, r3, #16
 8014908:	43db      	mvns	r3, r3
 801490a:	68f9      	ldr	r1, [r7, #12]
 801490c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014910:	4013      	ands	r3, r2
 8014912:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	015a      	lsls	r2, r3, #5
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	4413      	add	r3, r2
 801491c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	0159      	lsls	r1, r3, #5
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	440b      	add	r3, r1
 801492a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801492e:	4619      	mov	r1, r3
 8014930:	4b05      	ldr	r3, [pc, #20]	@ (8014948 <USB_DeactivateEndpoint+0x1b4>)
 8014932:	4013      	ands	r3, r2
 8014934:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014936:	2300      	movs	r3, #0
}
 8014938:	4618      	mov	r0, r3
 801493a:	3714      	adds	r7, #20
 801493c:	46bd      	mov	sp, r7
 801493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014942:	4770      	bx	lr
 8014944:	ec337800 	.word	0xec337800
 8014948:	eff37800 	.word	0xeff37800

0801494c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b08a      	sub	sp, #40	@ 0x28
 8014950:	af02      	add	r7, sp, #8
 8014952:	60f8      	str	r0, [r7, #12]
 8014954:	60b9      	str	r1, [r7, #8]
 8014956:	4613      	mov	r3, r2
 8014958:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	781b      	ldrb	r3, [r3, #0]
 8014962:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	785b      	ldrb	r3, [r3, #1]
 8014968:	2b01      	cmp	r3, #1
 801496a:	f040 8185 	bne.w	8014c78 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	691b      	ldr	r3, [r3, #16]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d132      	bne.n	80149dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	015a      	lsls	r2, r3, #5
 801497a:	69fb      	ldr	r3, [r7, #28]
 801497c:	4413      	add	r3, r2
 801497e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014982:	691a      	ldr	r2, [r3, #16]
 8014984:	69bb      	ldr	r3, [r7, #24]
 8014986:	0159      	lsls	r1, r3, #5
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	440b      	add	r3, r1
 801498c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014990:	4619      	mov	r1, r3
 8014992:	4ba7      	ldr	r3, [pc, #668]	@ (8014c30 <USB_EPStartXfer+0x2e4>)
 8014994:	4013      	ands	r3, r2
 8014996:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014998:	69bb      	ldr	r3, [r7, #24]
 801499a:	015a      	lsls	r2, r3, #5
 801499c:	69fb      	ldr	r3, [r7, #28]
 801499e:	4413      	add	r3, r2
 80149a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149a4:	691b      	ldr	r3, [r3, #16]
 80149a6:	69ba      	ldr	r2, [r7, #24]
 80149a8:	0151      	lsls	r1, r2, #5
 80149aa:	69fa      	ldr	r2, [r7, #28]
 80149ac:	440a      	add	r2, r1
 80149ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80149b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80149b8:	69bb      	ldr	r3, [r7, #24]
 80149ba:	015a      	lsls	r2, r3, #5
 80149bc:	69fb      	ldr	r3, [r7, #28]
 80149be:	4413      	add	r3, r2
 80149c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149c4:	691a      	ldr	r2, [r3, #16]
 80149c6:	69bb      	ldr	r3, [r7, #24]
 80149c8:	0159      	lsls	r1, r3, #5
 80149ca:	69fb      	ldr	r3, [r7, #28]
 80149cc:	440b      	add	r3, r1
 80149ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149d2:	4619      	mov	r1, r3
 80149d4:	4b97      	ldr	r3, [pc, #604]	@ (8014c34 <USB_EPStartXfer+0x2e8>)
 80149d6:	4013      	ands	r3, r2
 80149d8:	610b      	str	r3, [r1, #16]
 80149da:	e097      	b.n	8014b0c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	015a      	lsls	r2, r3, #5
 80149e0:	69fb      	ldr	r3, [r7, #28]
 80149e2:	4413      	add	r3, r2
 80149e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149e8:	691a      	ldr	r2, [r3, #16]
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	0159      	lsls	r1, r3, #5
 80149ee:	69fb      	ldr	r3, [r7, #28]
 80149f0:	440b      	add	r3, r1
 80149f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149f6:	4619      	mov	r1, r3
 80149f8:	4b8e      	ldr	r3, [pc, #568]	@ (8014c34 <USB_EPStartXfer+0x2e8>)
 80149fa:	4013      	ands	r3, r2
 80149fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80149fe:	69bb      	ldr	r3, [r7, #24]
 8014a00:	015a      	lsls	r2, r3, #5
 8014a02:	69fb      	ldr	r3, [r7, #28]
 8014a04:	4413      	add	r3, r2
 8014a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a0a:	691a      	ldr	r2, [r3, #16]
 8014a0c:	69bb      	ldr	r3, [r7, #24]
 8014a0e:	0159      	lsls	r1, r3, #5
 8014a10:	69fb      	ldr	r3, [r7, #28]
 8014a12:	440b      	add	r3, r1
 8014a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a18:	4619      	mov	r1, r3
 8014a1a:	4b85      	ldr	r3, [pc, #532]	@ (8014c30 <USB_EPStartXfer+0x2e4>)
 8014a1c:	4013      	ands	r3, r2
 8014a1e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d11a      	bne.n	8014a5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	691a      	ldr	r2, [r3, #16]
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	689b      	ldr	r3, [r3, #8]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d903      	bls.n	8014a3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	689a      	ldr	r2, [r3, #8]
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014a3a:	69bb      	ldr	r3, [r7, #24]
 8014a3c:	015a      	lsls	r2, r3, #5
 8014a3e:	69fb      	ldr	r3, [r7, #28]
 8014a40:	4413      	add	r3, r2
 8014a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a46:	691b      	ldr	r3, [r3, #16]
 8014a48:	69ba      	ldr	r2, [r7, #24]
 8014a4a:	0151      	lsls	r1, r2, #5
 8014a4c:	69fa      	ldr	r2, [r7, #28]
 8014a4e:	440a      	add	r2, r1
 8014a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014a58:	6113      	str	r3, [r2, #16]
 8014a5a:	e044      	b.n	8014ae6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	691a      	ldr	r2, [r3, #16]
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	689b      	ldr	r3, [r3, #8]
 8014a64:	4413      	add	r3, r2
 8014a66:	1e5a      	subs	r2, r3, #1
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	689b      	ldr	r3, [r3, #8]
 8014a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a70:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014a72:	69bb      	ldr	r3, [r7, #24]
 8014a74:	015a      	lsls	r2, r3, #5
 8014a76:	69fb      	ldr	r3, [r7, #28]
 8014a78:	4413      	add	r3, r2
 8014a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a7e:	691a      	ldr	r2, [r3, #16]
 8014a80:	8afb      	ldrh	r3, [r7, #22]
 8014a82:	04d9      	lsls	r1, r3, #19
 8014a84:	4b6c      	ldr	r3, [pc, #432]	@ (8014c38 <USB_EPStartXfer+0x2ec>)
 8014a86:	400b      	ands	r3, r1
 8014a88:	69b9      	ldr	r1, [r7, #24]
 8014a8a:	0148      	lsls	r0, r1, #5
 8014a8c:	69f9      	ldr	r1, [r7, #28]
 8014a8e:	4401      	add	r1, r0
 8014a90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014a94:	4313      	orrs	r3, r2
 8014a96:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	791b      	ldrb	r3, [r3, #4]
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d122      	bne.n	8014ae6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014aa0:	69bb      	ldr	r3, [r7, #24]
 8014aa2:	015a      	lsls	r2, r3, #5
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aac:	691b      	ldr	r3, [r3, #16]
 8014aae:	69ba      	ldr	r2, [r7, #24]
 8014ab0:	0151      	lsls	r1, r2, #5
 8014ab2:	69fa      	ldr	r2, [r7, #28]
 8014ab4:	440a      	add	r2, r1
 8014ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014aba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014abe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	015a      	lsls	r2, r3, #5
 8014ac4:	69fb      	ldr	r3, [r7, #28]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014acc:	691a      	ldr	r2, [r3, #16]
 8014ace:	8afb      	ldrh	r3, [r7, #22]
 8014ad0:	075b      	lsls	r3, r3, #29
 8014ad2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014ad6:	69b9      	ldr	r1, [r7, #24]
 8014ad8:	0148      	lsls	r0, r1, #5
 8014ada:	69f9      	ldr	r1, [r7, #28]
 8014adc:	4401      	add	r1, r0
 8014ade:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014ae2:	4313      	orrs	r3, r2
 8014ae4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	015a      	lsls	r2, r3, #5
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	4413      	add	r3, r2
 8014aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014af2:	691a      	ldr	r2, [r3, #16]
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	691b      	ldr	r3, [r3, #16]
 8014af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014afc:	69b9      	ldr	r1, [r7, #24]
 8014afe:	0148      	lsls	r0, r1, #5
 8014b00:	69f9      	ldr	r1, [r7, #28]
 8014b02:	4401      	add	r1, r0
 8014b04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b08:	4313      	orrs	r3, r2
 8014b0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014b0c:	79fb      	ldrb	r3, [r7, #7]
 8014b0e:	2b01      	cmp	r3, #1
 8014b10:	d14b      	bne.n	8014baa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	69db      	ldr	r3, [r3, #28]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d009      	beq.n	8014b2e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014b1a:	69bb      	ldr	r3, [r7, #24]
 8014b1c:	015a      	lsls	r2, r3, #5
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	4413      	add	r3, r2
 8014b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b26:	461a      	mov	r2, r3
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	69db      	ldr	r3, [r3, #28]
 8014b2c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	791b      	ldrb	r3, [r3, #4]
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d128      	bne.n	8014b88 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d110      	bne.n	8014b68 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014b46:	69bb      	ldr	r3, [r7, #24]
 8014b48:	015a      	lsls	r2, r3, #5
 8014b4a:	69fb      	ldr	r3, [r7, #28]
 8014b4c:	4413      	add	r3, r2
 8014b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	69ba      	ldr	r2, [r7, #24]
 8014b56:	0151      	lsls	r1, r2, #5
 8014b58:	69fa      	ldr	r2, [r7, #28]
 8014b5a:	440a      	add	r2, r1
 8014b5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014b64:	6013      	str	r3, [r2, #0]
 8014b66:	e00f      	b.n	8014b88 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	015a      	lsls	r2, r3, #5
 8014b6c:	69fb      	ldr	r3, [r7, #28]
 8014b6e:	4413      	add	r3, r2
 8014b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	69ba      	ldr	r2, [r7, #24]
 8014b78:	0151      	lsls	r1, r2, #5
 8014b7a:	69fa      	ldr	r2, [r7, #28]
 8014b7c:	440a      	add	r2, r1
 8014b7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014b86:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014b88:	69bb      	ldr	r3, [r7, #24]
 8014b8a:	015a      	lsls	r2, r3, #5
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	4413      	add	r3, r2
 8014b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	69ba      	ldr	r2, [r7, #24]
 8014b98:	0151      	lsls	r1, r2, #5
 8014b9a:	69fa      	ldr	r2, [r7, #28]
 8014b9c:	440a      	add	r2, r1
 8014b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ba2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014ba6:	6013      	str	r3, [r2, #0]
 8014ba8:	e169      	b.n	8014e7e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	015a      	lsls	r2, r3, #5
 8014bae:	69fb      	ldr	r3, [r7, #28]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	69ba      	ldr	r2, [r7, #24]
 8014bba:	0151      	lsls	r1, r2, #5
 8014bbc:	69fa      	ldr	r2, [r7, #28]
 8014bbe:	440a      	add	r2, r1
 8014bc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014bc4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014bc8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	791b      	ldrb	r3, [r3, #4]
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d015      	beq.n	8014bfe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	691b      	ldr	r3, [r3, #16]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f000 8151 	beq.w	8014e7e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014bdc:	69fb      	ldr	r3, [r7, #28]
 8014bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	781b      	ldrb	r3, [r3, #0]
 8014be8:	f003 030f 	and.w	r3, r3, #15
 8014bec:	2101      	movs	r1, #1
 8014bee:	fa01 f303 	lsl.w	r3, r1, r3
 8014bf2:	69f9      	ldr	r1, [r7, #28]
 8014bf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014bf8:	4313      	orrs	r3, r2
 8014bfa:	634b      	str	r3, [r1, #52]	@ 0x34
 8014bfc:	e13f      	b.n	8014e7e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c04:	689b      	ldr	r3, [r3, #8]
 8014c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d116      	bne.n	8014c3c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014c0e:	69bb      	ldr	r3, [r7, #24]
 8014c10:	015a      	lsls	r2, r3, #5
 8014c12:	69fb      	ldr	r3, [r7, #28]
 8014c14:	4413      	add	r3, r2
 8014c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	69ba      	ldr	r2, [r7, #24]
 8014c1e:	0151      	lsls	r1, r2, #5
 8014c20:	69fa      	ldr	r2, [r7, #28]
 8014c22:	440a      	add	r2, r1
 8014c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c2c:	6013      	str	r3, [r2, #0]
 8014c2e:	e015      	b.n	8014c5c <USB_EPStartXfer+0x310>
 8014c30:	e007ffff 	.word	0xe007ffff
 8014c34:	fff80000 	.word	0xfff80000
 8014c38:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	015a      	lsls	r2, r3, #5
 8014c40:	69fb      	ldr	r3, [r7, #28]
 8014c42:	4413      	add	r3, r2
 8014c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	69ba      	ldr	r2, [r7, #24]
 8014c4c:	0151      	lsls	r1, r2, #5
 8014c4e:	69fa      	ldr	r2, [r7, #28]
 8014c50:	440a      	add	r2, r1
 8014c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c5a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	68d9      	ldr	r1, [r3, #12]
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	781a      	ldrb	r2, [r3, #0]
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	691b      	ldr	r3, [r3, #16]
 8014c68:	b298      	uxth	r0, r3
 8014c6a:	79fb      	ldrb	r3, [r7, #7]
 8014c6c:	9300      	str	r3, [sp, #0]
 8014c6e:	4603      	mov	r3, r0
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f000 f9b9 	bl	8014fe8 <USB_WritePacket>
 8014c76:	e102      	b.n	8014e7e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	015a      	lsls	r2, r3, #5
 8014c7c:	69fb      	ldr	r3, [r7, #28]
 8014c7e:	4413      	add	r3, r2
 8014c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c84:	691a      	ldr	r2, [r3, #16]
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	0159      	lsls	r1, r3, #5
 8014c8a:	69fb      	ldr	r3, [r7, #28]
 8014c8c:	440b      	add	r3, r1
 8014c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c92:	4619      	mov	r1, r3
 8014c94:	4b7c      	ldr	r3, [pc, #496]	@ (8014e88 <USB_EPStartXfer+0x53c>)
 8014c96:	4013      	ands	r3, r2
 8014c98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014c9a:	69bb      	ldr	r3, [r7, #24]
 8014c9c:	015a      	lsls	r2, r3, #5
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ca6:	691a      	ldr	r2, [r3, #16]
 8014ca8:	69bb      	ldr	r3, [r7, #24]
 8014caa:	0159      	lsls	r1, r3, #5
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	440b      	add	r3, r1
 8014cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cb4:	4619      	mov	r1, r3
 8014cb6:	4b75      	ldr	r3, [pc, #468]	@ (8014e8c <USB_EPStartXfer+0x540>)
 8014cb8:	4013      	ands	r3, r2
 8014cba:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014cbc:	69bb      	ldr	r3, [r7, #24]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d12f      	bne.n	8014d22 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	691b      	ldr	r3, [r3, #16]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d003      	beq.n	8014cd2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	689a      	ldr	r2, [r3, #8]
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	689a      	ldr	r2, [r3, #8]
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	015a      	lsls	r2, r3, #5
 8014cde:	69fb      	ldr	r3, [r7, #28]
 8014ce0:	4413      	add	r3, r2
 8014ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ce6:	691a      	ldr	r2, [r3, #16]
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	6a1b      	ldr	r3, [r3, #32]
 8014cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014cf0:	69b9      	ldr	r1, [r7, #24]
 8014cf2:	0148      	lsls	r0, r1, #5
 8014cf4:	69f9      	ldr	r1, [r7, #28]
 8014cf6:	4401      	add	r1, r0
 8014cf8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014cfc:	4313      	orrs	r3, r2
 8014cfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d00:	69bb      	ldr	r3, [r7, #24]
 8014d02:	015a      	lsls	r2, r3, #5
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	4413      	add	r3, r2
 8014d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d0c:	691b      	ldr	r3, [r3, #16]
 8014d0e:	69ba      	ldr	r2, [r7, #24]
 8014d10:	0151      	lsls	r1, r2, #5
 8014d12:	69fa      	ldr	r2, [r7, #28]
 8014d14:	440a      	add	r2, r1
 8014d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014d1e:	6113      	str	r3, [r2, #16]
 8014d20:	e05f      	b.n	8014de2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	691b      	ldr	r3, [r3, #16]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d123      	bne.n	8014d72 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014d2a:	69bb      	ldr	r3, [r7, #24]
 8014d2c:	015a      	lsls	r2, r3, #5
 8014d2e:	69fb      	ldr	r3, [r7, #28]
 8014d30:	4413      	add	r3, r2
 8014d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d36:	691a      	ldr	r2, [r3, #16]
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	689b      	ldr	r3, [r3, #8]
 8014d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014d40:	69b9      	ldr	r1, [r7, #24]
 8014d42:	0148      	lsls	r0, r1, #5
 8014d44:	69f9      	ldr	r1, [r7, #28]
 8014d46:	4401      	add	r1, r0
 8014d48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014d4c:	4313      	orrs	r3, r2
 8014d4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d50:	69bb      	ldr	r3, [r7, #24]
 8014d52:	015a      	lsls	r2, r3, #5
 8014d54:	69fb      	ldr	r3, [r7, #28]
 8014d56:	4413      	add	r3, r2
 8014d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d5c:	691b      	ldr	r3, [r3, #16]
 8014d5e:	69ba      	ldr	r2, [r7, #24]
 8014d60:	0151      	lsls	r1, r2, #5
 8014d62:	69fa      	ldr	r2, [r7, #28]
 8014d64:	440a      	add	r2, r1
 8014d66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014d6e:	6113      	str	r3, [r2, #16]
 8014d70:	e037      	b.n	8014de2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	691a      	ldr	r2, [r3, #16]
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	689b      	ldr	r3, [r3, #8]
 8014d7a:	4413      	add	r3, r2
 8014d7c:	1e5a      	subs	r2, r3, #1
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	689b      	ldr	r3, [r3, #8]
 8014d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d86:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	689b      	ldr	r3, [r3, #8]
 8014d8c:	8afa      	ldrh	r2, [r7, #22]
 8014d8e:	fb03 f202 	mul.w	r2, r3, r2
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d96:	69bb      	ldr	r3, [r7, #24]
 8014d98:	015a      	lsls	r2, r3, #5
 8014d9a:	69fb      	ldr	r3, [r7, #28]
 8014d9c:	4413      	add	r3, r2
 8014d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014da2:	691a      	ldr	r2, [r3, #16]
 8014da4:	8afb      	ldrh	r3, [r7, #22]
 8014da6:	04d9      	lsls	r1, r3, #19
 8014da8:	4b39      	ldr	r3, [pc, #228]	@ (8014e90 <USB_EPStartXfer+0x544>)
 8014daa:	400b      	ands	r3, r1
 8014dac:	69b9      	ldr	r1, [r7, #24]
 8014dae:	0148      	lsls	r0, r1, #5
 8014db0:	69f9      	ldr	r1, [r7, #28]
 8014db2:	4401      	add	r1, r0
 8014db4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014db8:	4313      	orrs	r3, r2
 8014dba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	015a      	lsls	r2, r3, #5
 8014dc0:	69fb      	ldr	r3, [r7, #28]
 8014dc2:	4413      	add	r3, r2
 8014dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dc8:	691a      	ldr	r2, [r3, #16]
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	6a1b      	ldr	r3, [r3, #32]
 8014dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014dd2:	69b9      	ldr	r1, [r7, #24]
 8014dd4:	0148      	lsls	r0, r1, #5
 8014dd6:	69f9      	ldr	r1, [r7, #28]
 8014dd8:	4401      	add	r1, r0
 8014dda:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014dde:	4313      	orrs	r3, r2
 8014de0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014de2:	79fb      	ldrb	r3, [r7, #7]
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d10d      	bne.n	8014e04 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	68db      	ldr	r3, [r3, #12]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d009      	beq.n	8014e04 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	68d9      	ldr	r1, [r3, #12]
 8014df4:	69bb      	ldr	r3, [r7, #24]
 8014df6:	015a      	lsls	r2, r3, #5
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	4413      	add	r3, r2
 8014dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e00:	460a      	mov	r2, r1
 8014e02:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014e04:	68bb      	ldr	r3, [r7, #8]
 8014e06:	791b      	ldrb	r3, [r3, #4]
 8014e08:	2b01      	cmp	r3, #1
 8014e0a:	d128      	bne.n	8014e5e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014e12:	689b      	ldr	r3, [r3, #8]
 8014e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d110      	bne.n	8014e3e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014e1c:	69bb      	ldr	r3, [r7, #24]
 8014e1e:	015a      	lsls	r2, r3, #5
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	4413      	add	r3, r2
 8014e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	69ba      	ldr	r2, [r7, #24]
 8014e2c:	0151      	lsls	r1, r2, #5
 8014e2e:	69fa      	ldr	r2, [r7, #28]
 8014e30:	440a      	add	r2, r1
 8014e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014e3a:	6013      	str	r3, [r2, #0]
 8014e3c:	e00f      	b.n	8014e5e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014e3e:	69bb      	ldr	r3, [r7, #24]
 8014e40:	015a      	lsls	r2, r3, #5
 8014e42:	69fb      	ldr	r3, [r7, #28]
 8014e44:	4413      	add	r3, r2
 8014e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	69ba      	ldr	r2, [r7, #24]
 8014e4e:	0151      	lsls	r1, r2, #5
 8014e50:	69fa      	ldr	r2, [r7, #28]
 8014e52:	440a      	add	r2, r1
 8014e54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014e5c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014e5e:	69bb      	ldr	r3, [r7, #24]
 8014e60:	015a      	lsls	r2, r3, #5
 8014e62:	69fb      	ldr	r3, [r7, #28]
 8014e64:	4413      	add	r3, r2
 8014e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	69ba      	ldr	r2, [r7, #24]
 8014e6e:	0151      	lsls	r1, r2, #5
 8014e70:	69fa      	ldr	r2, [r7, #28]
 8014e72:	440a      	add	r2, r1
 8014e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014e7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014e7e:	2300      	movs	r3, #0
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3720      	adds	r7, #32
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	fff80000 	.word	0xfff80000
 8014e8c:	e007ffff 	.word	0xe007ffff
 8014e90:	1ff80000 	.word	0x1ff80000

08014e94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014e94:	b480      	push	{r7}
 8014e96:	b087      	sub	sp, #28
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
 8014e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	785b      	ldrb	r3, [r3, #1]
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d14a      	bne.n	8014f48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	015a      	lsls	r2, r3, #5
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	4413      	add	r3, r2
 8014ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014eca:	f040 8086 	bne.w	8014fda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	015a      	lsls	r2, r3, #5
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	4413      	add	r3, r2
 8014ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	683a      	ldr	r2, [r7, #0]
 8014ee0:	7812      	ldrb	r2, [r2, #0]
 8014ee2:	0151      	lsls	r1, r2, #5
 8014ee4:	693a      	ldr	r2, [r7, #16]
 8014ee6:	440a      	add	r2, r1
 8014ee8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014eec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014ef0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	015a      	lsls	r2, r3, #5
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	4413      	add	r3, r2
 8014efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	683a      	ldr	r2, [r7, #0]
 8014f04:	7812      	ldrb	r2, [r2, #0]
 8014f06:	0151      	lsls	r1, r2, #5
 8014f08:	693a      	ldr	r2, [r7, #16]
 8014f0a:	440a      	add	r2, r1
 8014f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	3301      	adds	r3, #1
 8014f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014f22:	4293      	cmp	r3, r2
 8014f24:	d902      	bls.n	8014f2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014f26:	2301      	movs	r3, #1
 8014f28:	75fb      	strb	r3, [r7, #23]
          break;
 8014f2a:	e056      	b.n	8014fda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	015a      	lsls	r2, r3, #5
 8014f32:	693b      	ldr	r3, [r7, #16]
 8014f34:	4413      	add	r3, r2
 8014f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f44:	d0e7      	beq.n	8014f16 <USB_EPStopXfer+0x82>
 8014f46:	e048      	b.n	8014fda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	015a      	lsls	r2, r3, #5
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	4413      	add	r3, r2
 8014f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f60:	d13b      	bne.n	8014fda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	015a      	lsls	r2, r3, #5
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	4413      	add	r3, r2
 8014f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	683a      	ldr	r2, [r7, #0]
 8014f74:	7812      	ldrb	r2, [r2, #0]
 8014f76:	0151      	lsls	r1, r2, #5
 8014f78:	693a      	ldr	r2, [r7, #16]
 8014f7a:	440a      	add	r2, r1
 8014f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014f84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	781b      	ldrb	r3, [r3, #0]
 8014f8a:	015a      	lsls	r2, r3, #5
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	4413      	add	r3, r2
 8014f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	683a      	ldr	r2, [r7, #0]
 8014f98:	7812      	ldrb	r2, [r2, #0]
 8014f9a:	0151      	lsls	r1, r2, #5
 8014f9c:	693a      	ldr	r2, [r7, #16]
 8014f9e:	440a      	add	r2, r1
 8014fa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	3301      	adds	r3, #1
 8014fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d902      	bls.n	8014fc0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8014fbe:	e00c      	b.n	8014fda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	015a      	lsls	r2, r3, #5
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	4413      	add	r3, r2
 8014fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014fd8:	d0e7      	beq.n	8014faa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	371c      	adds	r7, #28
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe6:	4770      	bx	lr

08014fe8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b089      	sub	sp, #36	@ 0x24
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	4611      	mov	r1, r2
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	71fb      	strb	r3, [r7, #7]
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015006:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801500a:	2b00      	cmp	r3, #0
 801500c:	d123      	bne.n	8015056 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801500e:	88bb      	ldrh	r3, [r7, #4]
 8015010:	3303      	adds	r3, #3
 8015012:	089b      	lsrs	r3, r3, #2
 8015014:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015016:	2300      	movs	r3, #0
 8015018:	61bb      	str	r3, [r7, #24]
 801501a:	e018      	b.n	801504e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801501c:	79fb      	ldrb	r3, [r7, #7]
 801501e:	031a      	lsls	r2, r3, #12
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	4413      	add	r3, r2
 8015024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015028:	461a      	mov	r2, r3
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	3301      	adds	r3, #1
 8015034:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	3301      	adds	r3, #1
 801503a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801503c:	69fb      	ldr	r3, [r7, #28]
 801503e:	3301      	adds	r3, #1
 8015040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015042:	69fb      	ldr	r3, [r7, #28]
 8015044:	3301      	adds	r3, #1
 8015046:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015048:	69bb      	ldr	r3, [r7, #24]
 801504a:	3301      	adds	r3, #1
 801504c:	61bb      	str	r3, [r7, #24]
 801504e:	69ba      	ldr	r2, [r7, #24]
 8015050:	693b      	ldr	r3, [r7, #16]
 8015052:	429a      	cmp	r2, r3
 8015054:	d3e2      	bcc.n	801501c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015056:	2300      	movs	r3, #0
}
 8015058:	4618      	mov	r0, r3
 801505a:	3724      	adds	r7, #36	@ 0x24
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr

08015064 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015064:	b480      	push	{r7}
 8015066:	b08b      	sub	sp, #44	@ 0x2c
 8015068:	af00      	add	r7, sp, #0
 801506a:	60f8      	str	r0, [r7, #12]
 801506c:	60b9      	str	r1, [r7, #8]
 801506e:	4613      	mov	r3, r2
 8015070:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801507a:	88fb      	ldrh	r3, [r7, #6]
 801507c:	089b      	lsrs	r3, r3, #2
 801507e:	b29b      	uxth	r3, r3
 8015080:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015082:	88fb      	ldrh	r3, [r7, #6]
 8015084:	f003 0303 	and.w	r3, r3, #3
 8015088:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801508a:	2300      	movs	r3, #0
 801508c:	623b      	str	r3, [r7, #32]
 801508e:	e014      	b.n	80150ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015090:	69bb      	ldr	r3, [r7, #24]
 8015092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015096:	681a      	ldr	r2, [r3, #0]
 8015098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801509a:	601a      	str	r2, [r3, #0]
    pDest++;
 801509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801509e:	3301      	adds	r3, #1
 80150a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80150a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a4:	3301      	adds	r3, #1
 80150a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80150a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150aa:	3301      	adds	r3, #1
 80150ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80150ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b0:	3301      	adds	r3, #1
 80150b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80150b4:	6a3b      	ldr	r3, [r7, #32]
 80150b6:	3301      	adds	r3, #1
 80150b8:	623b      	str	r3, [r7, #32]
 80150ba:	6a3a      	ldr	r2, [r7, #32]
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d3e6      	bcc.n	8015090 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80150c2:	8bfb      	ldrh	r3, [r7, #30]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d01e      	beq.n	8015106 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80150c8:	2300      	movs	r3, #0
 80150ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80150d2:	461a      	mov	r2, r3
 80150d4:	f107 0310 	add.w	r3, r7, #16
 80150d8:	6812      	ldr	r2, [r2, #0]
 80150da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80150dc:	693a      	ldr	r2, [r7, #16]
 80150de:	6a3b      	ldr	r3, [r7, #32]
 80150e0:	b2db      	uxtb	r3, r3
 80150e2:	00db      	lsls	r3, r3, #3
 80150e4:	fa22 f303 	lsr.w	r3, r2, r3
 80150e8:	b2da      	uxtb	r2, r3
 80150ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ec:	701a      	strb	r2, [r3, #0]
      i++;
 80150ee:	6a3b      	ldr	r3, [r7, #32]
 80150f0:	3301      	adds	r3, #1
 80150f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80150f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150f6:	3301      	adds	r3, #1
 80150f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80150fa:	8bfb      	ldrh	r3, [r7, #30]
 80150fc:	3b01      	subs	r3, #1
 80150fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015100:	8bfb      	ldrh	r3, [r7, #30]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d1ea      	bne.n	80150dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015108:	4618      	mov	r0, r3
 801510a:	372c      	adds	r7, #44	@ 0x2c
 801510c:	46bd      	mov	sp, r7
 801510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015112:	4770      	bx	lr

08015114 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015114:	b480      	push	{r7}
 8015116:	b085      	sub	sp, #20
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015122:	683b      	ldr	r3, [r7, #0]
 8015124:	781b      	ldrb	r3, [r3, #0]
 8015126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	785b      	ldrb	r3, [r3, #1]
 801512c:	2b01      	cmp	r3, #1
 801512e:	d12c      	bne.n	801518a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	015a      	lsls	r2, r3, #5
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	4413      	add	r3, r2
 8015138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	db12      	blt.n	8015168 <USB_EPSetStall+0x54>
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d00f      	beq.n	8015168 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	015a      	lsls	r2, r3, #5
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	4413      	add	r3, r2
 8015150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	68ba      	ldr	r2, [r7, #8]
 8015158:	0151      	lsls	r1, r2, #5
 801515a:	68fa      	ldr	r2, [r7, #12]
 801515c:	440a      	add	r2, r1
 801515e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015162:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015166:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	015a      	lsls	r2, r3, #5
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	4413      	add	r3, r2
 8015170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	68ba      	ldr	r2, [r7, #8]
 8015178:	0151      	lsls	r1, r2, #5
 801517a:	68fa      	ldr	r2, [r7, #12]
 801517c:	440a      	add	r2, r1
 801517e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015182:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015186:	6013      	str	r3, [r2, #0]
 8015188:	e02b      	b.n	80151e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	015a      	lsls	r2, r3, #5
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	4413      	add	r3, r2
 8015192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	2b00      	cmp	r3, #0
 801519a:	db12      	blt.n	80151c2 <USB_EPSetStall+0xae>
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d00f      	beq.n	80151c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	015a      	lsls	r2, r3, #5
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	4413      	add	r3, r2
 80151aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	68ba      	ldr	r2, [r7, #8]
 80151b2:	0151      	lsls	r1, r2, #5
 80151b4:	68fa      	ldr	r2, [r7, #12]
 80151b6:	440a      	add	r2, r1
 80151b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80151c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	015a      	lsls	r2, r3, #5
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	4413      	add	r3, r2
 80151ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	68ba      	ldr	r2, [r7, #8]
 80151d2:	0151      	lsls	r1, r2, #5
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	440a      	add	r2, r1
 80151d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80151e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80151e2:	2300      	movs	r3, #0
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	3714      	adds	r7, #20
 80151e8:	46bd      	mov	sp, r7
 80151ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ee:	4770      	bx	lr

080151f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80151f0:	b480      	push	{r7}
 80151f2:	b085      	sub	sp, #20
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
 80151f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	785b      	ldrb	r3, [r3, #1]
 8015208:	2b01      	cmp	r3, #1
 801520a:	d128      	bne.n	801525e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	015a      	lsls	r2, r3, #5
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	4413      	add	r3, r2
 8015214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	68ba      	ldr	r2, [r7, #8]
 801521c:	0151      	lsls	r1, r2, #5
 801521e:	68fa      	ldr	r2, [r7, #12]
 8015220:	440a      	add	r2, r1
 8015222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015226:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801522a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	791b      	ldrb	r3, [r3, #4]
 8015230:	2b03      	cmp	r3, #3
 8015232:	d003      	beq.n	801523c <USB_EPClearStall+0x4c>
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	791b      	ldrb	r3, [r3, #4]
 8015238:	2b02      	cmp	r3, #2
 801523a:	d138      	bne.n	80152ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801523c:	68bb      	ldr	r3, [r7, #8]
 801523e:	015a      	lsls	r2, r3, #5
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	4413      	add	r3, r2
 8015244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	68ba      	ldr	r2, [r7, #8]
 801524c:	0151      	lsls	r1, r2, #5
 801524e:	68fa      	ldr	r2, [r7, #12]
 8015250:	440a      	add	r2, r1
 8015252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801525a:	6013      	str	r3, [r2, #0]
 801525c:	e027      	b.n	80152ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	015a      	lsls	r2, r3, #5
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	4413      	add	r3, r2
 8015266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	68ba      	ldr	r2, [r7, #8]
 801526e:	0151      	lsls	r1, r2, #5
 8015270:	68fa      	ldr	r2, [r7, #12]
 8015272:	440a      	add	r2, r1
 8015274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015278:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801527c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801527e:	683b      	ldr	r3, [r7, #0]
 8015280:	791b      	ldrb	r3, [r3, #4]
 8015282:	2b03      	cmp	r3, #3
 8015284:	d003      	beq.n	801528e <USB_EPClearStall+0x9e>
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	791b      	ldrb	r3, [r3, #4]
 801528a:	2b02      	cmp	r3, #2
 801528c:	d10f      	bne.n	80152ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	015a      	lsls	r2, r3, #5
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	4413      	add	r3, r2
 8015296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	68ba      	ldr	r2, [r7, #8]
 801529e:	0151      	lsls	r1, r2, #5
 80152a0:	68fa      	ldr	r2, [r7, #12]
 80152a2:	440a      	add	r2, r1
 80152a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80152a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80152ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80152ae:	2300      	movs	r3, #0
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3714      	adds	r7, #20
 80152b4:	46bd      	mov	sp, r7
 80152b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ba:	4770      	bx	lr

080152bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80152bc:	b480      	push	{r7}
 80152be:	b085      	sub	sp, #20
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	460b      	mov	r3, r1
 80152c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80152da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80152de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80152e6:	681a      	ldr	r2, [r3, #0]
 80152e8:	78fb      	ldrb	r3, [r7, #3]
 80152ea:	011b      	lsls	r3, r3, #4
 80152ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80152f0:	68f9      	ldr	r1, [r7, #12]
 80152f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80152f6:	4313      	orrs	r3, r2
 80152f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80152fa:	2300      	movs	r3, #0
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3714      	adds	r7, #20
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr

08015308 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015308:	b480      	push	{r7}
 801530a:	b085      	sub	sp, #20
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	68fa      	ldr	r2, [r7, #12]
 801531e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015322:	f023 0303 	bic.w	r3, r3, #3
 8015326:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	68fa      	ldr	r2, [r7, #12]
 8015332:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015336:	f023 0302 	bic.w	r3, r3, #2
 801533a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801533c:	2300      	movs	r3, #0
}
 801533e:	4618      	mov	r0, r3
 8015340:	3714      	adds	r7, #20
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr

0801534a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801534a:	b480      	push	{r7}
 801534c:	b085      	sub	sp, #20
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	68fa      	ldr	r2, [r7, #12]
 8015360:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015364:	f023 0303 	bic.w	r3, r3, #3
 8015368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015370:	685b      	ldr	r3, [r3, #4]
 8015372:	68fa      	ldr	r2, [r7, #12]
 8015374:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015378:	f043 0302 	orr.w	r3, r3, #2
 801537c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	3714      	adds	r7, #20
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr

0801538c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801538c:	b480      	push	{r7}
 801538e:	b085      	sub	sp, #20
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	695b      	ldr	r3, [r3, #20]
 8015398:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	699b      	ldr	r3, [r3, #24]
 801539e:	68fa      	ldr	r2, [r7, #12]
 80153a0:	4013      	ands	r3, r2
 80153a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80153a4:	68fb      	ldr	r3, [r7, #12]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3714      	adds	r7, #20
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr

080153b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80153b2:	b480      	push	{r7}
 80153b4:	b085      	sub	sp, #20
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153c4:	699b      	ldr	r3, [r3, #24]
 80153c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153ce:	69db      	ldr	r3, [r3, #28]
 80153d0:	68ba      	ldr	r2, [r7, #8]
 80153d2:	4013      	ands	r3, r2
 80153d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	0c1b      	lsrs	r3, r3, #16
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3714      	adds	r7, #20
 80153de:	46bd      	mov	sp, r7
 80153e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e4:	4770      	bx	lr

080153e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80153e6:	b480      	push	{r7}
 80153e8:	b085      	sub	sp, #20
 80153ea:	af00      	add	r7, sp, #0
 80153ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153f8:	699b      	ldr	r3, [r3, #24]
 80153fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015402:	69db      	ldr	r3, [r3, #28]
 8015404:	68ba      	ldr	r2, [r7, #8]
 8015406:	4013      	ands	r3, r2
 8015408:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	b29b      	uxth	r3, r3
}
 801540e:	4618      	mov	r0, r3
 8015410:	3714      	adds	r7, #20
 8015412:	46bd      	mov	sp, r7
 8015414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015418:	4770      	bx	lr

0801541a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801541a:	b480      	push	{r7}
 801541c:	b085      	sub	sp, #20
 801541e:	af00      	add	r7, sp, #0
 8015420:	6078      	str	r0, [r7, #4]
 8015422:	460b      	mov	r3, r1
 8015424:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801542a:	78fb      	ldrb	r3, [r7, #3]
 801542c:	015a      	lsls	r2, r3, #5
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	4413      	add	r3, r2
 8015432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015436:	689b      	ldr	r3, [r3, #8]
 8015438:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015440:	695b      	ldr	r3, [r3, #20]
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	4013      	ands	r3, r2
 8015446:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015448:	68bb      	ldr	r3, [r7, #8]
}
 801544a:	4618      	mov	r0, r3
 801544c:	3714      	adds	r7, #20
 801544e:	46bd      	mov	sp, r7
 8015450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015454:	4770      	bx	lr

08015456 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015456:	b480      	push	{r7}
 8015458:	b087      	sub	sp, #28
 801545a:	af00      	add	r7, sp, #0
 801545c:	6078      	str	r0, [r7, #4]
 801545e:	460b      	mov	r3, r1
 8015460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015466:	697b      	ldr	r3, [r7, #20]
 8015468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801546c:	691b      	ldr	r3, [r3, #16]
 801546e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015478:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801547a:	78fb      	ldrb	r3, [r7, #3]
 801547c:	f003 030f 	and.w	r3, r3, #15
 8015480:	68fa      	ldr	r2, [r7, #12]
 8015482:	fa22 f303 	lsr.w	r3, r2, r3
 8015486:	01db      	lsls	r3, r3, #7
 8015488:	b2db      	uxtb	r3, r3
 801548a:	693a      	ldr	r2, [r7, #16]
 801548c:	4313      	orrs	r3, r2
 801548e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015490:	78fb      	ldrb	r3, [r7, #3]
 8015492:	015a      	lsls	r2, r3, #5
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	4413      	add	r3, r2
 8015498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801549c:	689b      	ldr	r3, [r3, #8]
 801549e:	693a      	ldr	r2, [r7, #16]
 80154a0:	4013      	ands	r3, r2
 80154a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80154a4:	68bb      	ldr	r3, [r7, #8]
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	371c      	adds	r7, #28
 80154aa:	46bd      	mov	sp, r7
 80154ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b0:	4770      	bx	lr

080154b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80154b2:	b480      	push	{r7}
 80154b4:	b083      	sub	sp, #12
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	695b      	ldr	r3, [r3, #20]
 80154be:	f003 0301 	and.w	r3, r3, #1
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	370c      	adds	r7, #12
 80154c6:	46bd      	mov	sp, r7
 80154c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154cc:	4770      	bx	lr
	...

080154d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80154d0:	b480      	push	{r7}
 80154d2:	b085      	sub	sp, #20
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154ea:	4619      	mov	r1, r3
 80154ec:	4b09      	ldr	r3, [pc, #36]	@ (8015514 <USB_ActivateSetup+0x44>)
 80154ee:	4013      	ands	r3, r2
 80154f0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	68fa      	ldr	r2, [r7, #12]
 80154fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015506:	2300      	movs	r3, #0
}
 8015508:	4618      	mov	r0, r3
 801550a:	3714      	adds	r7, #20
 801550c:	46bd      	mov	sp, r7
 801550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015512:	4770      	bx	lr
 8015514:	fffff800 	.word	0xfffff800

08015518 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015518:	b480      	push	{r7}
 801551a:	b087      	sub	sp, #28
 801551c:	af00      	add	r7, sp, #0
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	460b      	mov	r3, r1
 8015522:	607a      	str	r2, [r7, #4]
 8015524:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	333c      	adds	r3, #60	@ 0x3c
 801552e:	3304      	adds	r3, #4
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	4a26      	ldr	r2, [pc, #152]	@ (80155d0 <USB_EP0_OutStart+0xb8>)
 8015538:	4293      	cmp	r3, r2
 801553a:	d90a      	bls.n	8015552 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801554c:	d101      	bne.n	8015552 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801554e:	2300      	movs	r3, #0
 8015550:	e037      	b.n	80155c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015558:	461a      	mov	r2, r3
 801555a:	2300      	movs	r3, #0
 801555c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015564:	691b      	ldr	r3, [r3, #16]
 8015566:	697a      	ldr	r2, [r7, #20]
 8015568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801556c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015578:	691b      	ldr	r3, [r3, #16]
 801557a:	697a      	ldr	r2, [r7, #20]
 801557c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015580:	f043 0318 	orr.w	r3, r3, #24
 8015584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015586:	697b      	ldr	r3, [r7, #20]
 8015588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801558c:	691b      	ldr	r3, [r3, #16]
 801558e:	697a      	ldr	r2, [r7, #20]
 8015590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015594:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015598:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801559a:	7afb      	ldrb	r3, [r7, #11]
 801559c:	2b01      	cmp	r3, #1
 801559e:	d10f      	bne.n	80155c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155a6:	461a      	mov	r2, r3
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	697a      	ldr	r2, [r7, #20]
 80155b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80155ba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80155be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80155c0:	2300      	movs	r3, #0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	371c      	adds	r7, #28
 80155c6:	46bd      	mov	sp, r7
 80155c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155cc:	4770      	bx	lr
 80155ce:	bf00      	nop
 80155d0:	4f54300a 	.word	0x4f54300a

080155d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80155d4:	b480      	push	{r7}
 80155d6:	b085      	sub	sp, #20
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80155dc:	2300      	movs	r3, #0
 80155de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	3301      	adds	r3, #1
 80155e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80155ec:	d901      	bls.n	80155f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80155ee:	2303      	movs	r3, #3
 80155f0:	e01b      	b.n	801562a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	691b      	ldr	r3, [r3, #16]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	daf2      	bge.n	80155e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80155fa:	2300      	movs	r3, #0
 80155fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	691b      	ldr	r3, [r3, #16]
 8015602:	f043 0201 	orr.w	r2, r3, #1
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	3301      	adds	r3, #1
 801560e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015616:	d901      	bls.n	801561c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015618:	2303      	movs	r3, #3
 801561a:	e006      	b.n	801562a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	691b      	ldr	r3, [r3, #16]
 8015620:	f003 0301 	and.w	r3, r3, #1
 8015624:	2b01      	cmp	r3, #1
 8015626:	d0f0      	beq.n	801560a <USB_CoreReset+0x36>

  return HAL_OK;
 8015628:	2300      	movs	r3, #0
}
 801562a:	4618      	mov	r0, r3
 801562c:	3714      	adds	r7, #20
 801562e:	46bd      	mov	sp, r7
 8015630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015634:	4770      	bx	lr
	...

08015638 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	460b      	mov	r3, r1
 8015642:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015644:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015648:	f002 fd08 	bl	801805c <USBD_static_malloc>
 801564c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d109      	bne.n	8015668 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	32b0      	adds	r2, #176	@ 0xb0
 801565e:	2100      	movs	r1, #0
 8015660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015664:	2302      	movs	r3, #2
 8015666:	e0d4      	b.n	8015812 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015668:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801566c:	2100      	movs	r1, #0
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	f002 fd5a 	bl	8018128 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	32b0      	adds	r2, #176	@ 0xb0
 801567e:	68f9      	ldr	r1, [r7, #12]
 8015680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	32b0      	adds	r2, #176	@ 0xb0
 801568e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	7c1b      	ldrb	r3, [r3, #16]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d138      	bne.n	8015712 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80156a0:	4b5e      	ldr	r3, [pc, #376]	@ (801581c <USBD_CDC_Init+0x1e4>)
 80156a2:	7819      	ldrb	r1, [r3, #0]
 80156a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80156a8:	2202      	movs	r2, #2
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f002 fbb3 	bl	8017e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80156b0:	4b5a      	ldr	r3, [pc, #360]	@ (801581c <USBD_CDC_Init+0x1e4>)
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	f003 020f 	and.w	r2, r3, #15
 80156b8:	6879      	ldr	r1, [r7, #4]
 80156ba:	4613      	mov	r3, r2
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	4413      	add	r3, r2
 80156c0:	009b      	lsls	r3, r3, #2
 80156c2:	440b      	add	r3, r1
 80156c4:	3324      	adds	r3, #36	@ 0x24
 80156c6:	2201      	movs	r2, #1
 80156c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80156ca:	4b55      	ldr	r3, [pc, #340]	@ (8015820 <USBD_CDC_Init+0x1e8>)
 80156cc:	7819      	ldrb	r1, [r3, #0]
 80156ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80156d2:	2202      	movs	r2, #2
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f002 fb9e 	bl	8017e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80156da:	4b51      	ldr	r3, [pc, #324]	@ (8015820 <USBD_CDC_Init+0x1e8>)
 80156dc:	781b      	ldrb	r3, [r3, #0]
 80156de:	f003 020f 	and.w	r2, r3, #15
 80156e2:	6879      	ldr	r1, [r7, #4]
 80156e4:	4613      	mov	r3, r2
 80156e6:	009b      	lsls	r3, r3, #2
 80156e8:	4413      	add	r3, r2
 80156ea:	009b      	lsls	r3, r3, #2
 80156ec:	440b      	add	r3, r1
 80156ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80156f2:	2201      	movs	r2, #1
 80156f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80156f6:	4b4b      	ldr	r3, [pc, #300]	@ (8015824 <USBD_CDC_Init+0x1ec>)
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	f003 020f 	and.w	r2, r3, #15
 80156fe:	6879      	ldr	r1, [r7, #4]
 8015700:	4613      	mov	r3, r2
 8015702:	009b      	lsls	r3, r3, #2
 8015704:	4413      	add	r3, r2
 8015706:	009b      	lsls	r3, r3, #2
 8015708:	440b      	add	r3, r1
 801570a:	3326      	adds	r3, #38	@ 0x26
 801570c:	2210      	movs	r2, #16
 801570e:	801a      	strh	r2, [r3, #0]
 8015710:	e035      	b.n	801577e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015712:	4b42      	ldr	r3, [pc, #264]	@ (801581c <USBD_CDC_Init+0x1e4>)
 8015714:	7819      	ldrb	r1, [r3, #0]
 8015716:	2340      	movs	r3, #64	@ 0x40
 8015718:	2202      	movs	r2, #2
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f002 fb7b 	bl	8017e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015720:	4b3e      	ldr	r3, [pc, #248]	@ (801581c <USBD_CDC_Init+0x1e4>)
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	f003 020f 	and.w	r2, r3, #15
 8015728:	6879      	ldr	r1, [r7, #4]
 801572a:	4613      	mov	r3, r2
 801572c:	009b      	lsls	r3, r3, #2
 801572e:	4413      	add	r3, r2
 8015730:	009b      	lsls	r3, r3, #2
 8015732:	440b      	add	r3, r1
 8015734:	3324      	adds	r3, #36	@ 0x24
 8015736:	2201      	movs	r2, #1
 8015738:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801573a:	4b39      	ldr	r3, [pc, #228]	@ (8015820 <USBD_CDC_Init+0x1e8>)
 801573c:	7819      	ldrb	r1, [r3, #0]
 801573e:	2340      	movs	r3, #64	@ 0x40
 8015740:	2202      	movs	r2, #2
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f002 fb67 	bl	8017e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015748:	4b35      	ldr	r3, [pc, #212]	@ (8015820 <USBD_CDC_Init+0x1e8>)
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	f003 020f 	and.w	r2, r3, #15
 8015750:	6879      	ldr	r1, [r7, #4]
 8015752:	4613      	mov	r3, r2
 8015754:	009b      	lsls	r3, r3, #2
 8015756:	4413      	add	r3, r2
 8015758:	009b      	lsls	r3, r3, #2
 801575a:	440b      	add	r3, r1
 801575c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015760:	2201      	movs	r2, #1
 8015762:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015764:	4b2f      	ldr	r3, [pc, #188]	@ (8015824 <USBD_CDC_Init+0x1ec>)
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	f003 020f 	and.w	r2, r3, #15
 801576c:	6879      	ldr	r1, [r7, #4]
 801576e:	4613      	mov	r3, r2
 8015770:	009b      	lsls	r3, r3, #2
 8015772:	4413      	add	r3, r2
 8015774:	009b      	lsls	r3, r3, #2
 8015776:	440b      	add	r3, r1
 8015778:	3326      	adds	r3, #38	@ 0x26
 801577a:	2210      	movs	r2, #16
 801577c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801577e:	4b29      	ldr	r3, [pc, #164]	@ (8015824 <USBD_CDC_Init+0x1ec>)
 8015780:	7819      	ldrb	r1, [r3, #0]
 8015782:	2308      	movs	r3, #8
 8015784:	2203      	movs	r2, #3
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f002 fb45 	bl	8017e16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801578c:	4b25      	ldr	r3, [pc, #148]	@ (8015824 <USBD_CDC_Init+0x1ec>)
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	f003 020f 	and.w	r2, r3, #15
 8015794:	6879      	ldr	r1, [r7, #4]
 8015796:	4613      	mov	r3, r2
 8015798:	009b      	lsls	r3, r3, #2
 801579a:	4413      	add	r3, r2
 801579c:	009b      	lsls	r3, r3, #2
 801579e:	440b      	add	r3, r1
 80157a0:	3324      	adds	r3, #36	@ 0x24
 80157a2:	2201      	movs	r2, #1
 80157a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	2200      	movs	r2, #0
 80157aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80157b4:	687a      	ldr	r2, [r7, #4]
 80157b6:	33b0      	adds	r3, #176	@ 0xb0
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	4413      	add	r3, r2
 80157bc:	685b      	ldr	r3, [r3, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	2200      	movs	r2, #0
 80157c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	2200      	movs	r2, #0
 80157ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d101      	bne.n	80157e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80157dc:	2302      	movs	r3, #2
 80157de:	e018      	b.n	8015812 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	7c1b      	ldrb	r3, [r3, #16]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d10a      	bne.n	80157fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80157e8:	4b0d      	ldr	r3, [pc, #52]	@ (8015820 <USBD_CDC_Init+0x1e8>)
 80157ea:	7819      	ldrb	r1, [r3, #0]
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80157f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f002 fbfc 	bl	8017ff4 <USBD_LL_PrepareReceive>
 80157fc:	e008      	b.n	8015810 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80157fe:	4b08      	ldr	r3, [pc, #32]	@ (8015820 <USBD_CDC_Init+0x1e8>)
 8015800:	7819      	ldrb	r1, [r3, #0]
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015808:	2340      	movs	r3, #64	@ 0x40
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f002 fbf2 	bl	8017ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015810:	2300      	movs	r3, #0
}
 8015812:	4618      	mov	r0, r3
 8015814:	3710      	adds	r7, #16
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}
 801581a:	bf00      	nop
 801581c:	240002ab 	.word	0x240002ab
 8015820:	240002ac 	.word	0x240002ac
 8015824:	240002ad 	.word	0x240002ad

08015828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	460b      	mov	r3, r1
 8015832:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015834:	4b3a      	ldr	r3, [pc, #232]	@ (8015920 <USBD_CDC_DeInit+0xf8>)
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	4619      	mov	r1, r3
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f002 fb11 	bl	8017e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015840:	4b37      	ldr	r3, [pc, #220]	@ (8015920 <USBD_CDC_DeInit+0xf8>)
 8015842:	781b      	ldrb	r3, [r3, #0]
 8015844:	f003 020f 	and.w	r2, r3, #15
 8015848:	6879      	ldr	r1, [r7, #4]
 801584a:	4613      	mov	r3, r2
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	4413      	add	r3, r2
 8015850:	009b      	lsls	r3, r3, #2
 8015852:	440b      	add	r3, r1
 8015854:	3324      	adds	r3, #36	@ 0x24
 8015856:	2200      	movs	r2, #0
 8015858:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801585a:	4b32      	ldr	r3, [pc, #200]	@ (8015924 <USBD_CDC_DeInit+0xfc>)
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	4619      	mov	r1, r3
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f002 fafe 	bl	8017e62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015866:	4b2f      	ldr	r3, [pc, #188]	@ (8015924 <USBD_CDC_DeInit+0xfc>)
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	f003 020f 	and.w	r2, r3, #15
 801586e:	6879      	ldr	r1, [r7, #4]
 8015870:	4613      	mov	r3, r2
 8015872:	009b      	lsls	r3, r3, #2
 8015874:	4413      	add	r3, r2
 8015876:	009b      	lsls	r3, r3, #2
 8015878:	440b      	add	r3, r1
 801587a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801587e:	2200      	movs	r2, #0
 8015880:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015882:	4b29      	ldr	r3, [pc, #164]	@ (8015928 <USBD_CDC_DeInit+0x100>)
 8015884:	781b      	ldrb	r3, [r3, #0]
 8015886:	4619      	mov	r1, r3
 8015888:	6878      	ldr	r0, [r7, #4]
 801588a:	f002 faea 	bl	8017e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801588e:	4b26      	ldr	r3, [pc, #152]	@ (8015928 <USBD_CDC_DeInit+0x100>)
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	f003 020f 	and.w	r2, r3, #15
 8015896:	6879      	ldr	r1, [r7, #4]
 8015898:	4613      	mov	r3, r2
 801589a:	009b      	lsls	r3, r3, #2
 801589c:	4413      	add	r3, r2
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	440b      	add	r3, r1
 80158a2:	3324      	adds	r3, #36	@ 0x24
 80158a4:	2200      	movs	r2, #0
 80158a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80158a8:	4b1f      	ldr	r3, [pc, #124]	@ (8015928 <USBD_CDC_DeInit+0x100>)
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	f003 020f 	and.w	r2, r3, #15
 80158b0:	6879      	ldr	r1, [r7, #4]
 80158b2:	4613      	mov	r3, r2
 80158b4:	009b      	lsls	r3, r3, #2
 80158b6:	4413      	add	r3, r2
 80158b8:	009b      	lsls	r3, r3, #2
 80158ba:	440b      	add	r3, r1
 80158bc:	3326      	adds	r3, #38	@ 0x26
 80158be:	2200      	movs	r2, #0
 80158c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	32b0      	adds	r2, #176	@ 0xb0
 80158cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d01f      	beq.n	8015914 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	33b0      	adds	r3, #176	@ 0xb0
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	4413      	add	r3, r2
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	32b0      	adds	r2, #176	@ 0xb0
 80158f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158f6:	4618      	mov	r0, r3
 80158f8:	f002 fbbe 	bl	8018078 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	32b0      	adds	r2, #176	@ 0xb0
 8015906:	2100      	movs	r1, #0
 8015908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2200      	movs	r2, #0
 8015910:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015914:	2300      	movs	r3, #0
}
 8015916:	4618      	mov	r0, r3
 8015918:	3708      	adds	r7, #8
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}
 801591e:	bf00      	nop
 8015920:	240002ab 	.word	0x240002ab
 8015924:	240002ac 	.word	0x240002ac
 8015928:	240002ad 	.word	0x240002ad

0801592c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b086      	sub	sp, #24
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	32b0      	adds	r2, #176	@ 0xb0
 8015940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015946:	2300      	movs	r3, #0
 8015948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801594a:	2300      	movs	r3, #0
 801594c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801594e:	2300      	movs	r3, #0
 8015950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d101      	bne.n	801595c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015958:	2303      	movs	r3, #3
 801595a:	e0bf      	b.n	8015adc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	781b      	ldrb	r3, [r3, #0]
 8015960:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015964:	2b00      	cmp	r3, #0
 8015966:	d050      	beq.n	8015a0a <USBD_CDC_Setup+0xde>
 8015968:	2b20      	cmp	r3, #32
 801596a:	f040 80af 	bne.w	8015acc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	88db      	ldrh	r3, [r3, #6]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d03a      	beq.n	80159ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	b25b      	sxtb	r3, r3
 801597c:	2b00      	cmp	r3, #0
 801597e:	da1b      	bge.n	80159b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015986:	687a      	ldr	r2, [r7, #4]
 8015988:	33b0      	adds	r3, #176	@ 0xb0
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	4413      	add	r3, r2
 801598e:	685b      	ldr	r3, [r3, #4]
 8015990:	689b      	ldr	r3, [r3, #8]
 8015992:	683a      	ldr	r2, [r7, #0]
 8015994:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015996:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015998:	683a      	ldr	r2, [r7, #0]
 801599a:	88d2      	ldrh	r2, [r2, #6]
 801599c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	88db      	ldrh	r3, [r3, #6]
 80159a2:	2b07      	cmp	r3, #7
 80159a4:	bf28      	it	cs
 80159a6:	2307      	movcs	r3, #7
 80159a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80159aa:	693b      	ldr	r3, [r7, #16]
 80159ac:	89fa      	ldrh	r2, [r7, #14]
 80159ae:	4619      	mov	r1, r3
 80159b0:	6878      	ldr	r0, [r7, #4]
 80159b2:	f001 fdbd 	bl	8017530 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80159b6:	e090      	b.n	8015ada <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	785a      	ldrb	r2, [r3, #1]
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80159c2:	683b      	ldr	r3, [r7, #0]
 80159c4:	88db      	ldrh	r3, [r3, #6]
 80159c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80159c8:	d803      	bhi.n	80159d2 <USBD_CDC_Setup+0xa6>
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	88db      	ldrh	r3, [r3, #6]
 80159ce:	b2da      	uxtb	r2, r3
 80159d0:	e000      	b.n	80159d4 <USBD_CDC_Setup+0xa8>
 80159d2:	2240      	movs	r2, #64	@ 0x40
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80159da:	6939      	ldr	r1, [r7, #16]
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80159e2:	461a      	mov	r2, r3
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f001 fdcf 	bl	8017588 <USBD_CtlPrepareRx>
      break;
 80159ea:	e076      	b.n	8015ada <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80159f2:	687a      	ldr	r2, [r7, #4]
 80159f4:	33b0      	adds	r3, #176	@ 0xb0
 80159f6:	009b      	lsls	r3, r3, #2
 80159f8:	4413      	add	r3, r2
 80159fa:	685b      	ldr	r3, [r3, #4]
 80159fc:	689b      	ldr	r3, [r3, #8]
 80159fe:	683a      	ldr	r2, [r7, #0]
 8015a00:	7850      	ldrb	r0, [r2, #1]
 8015a02:	2200      	movs	r2, #0
 8015a04:	6839      	ldr	r1, [r7, #0]
 8015a06:	4798      	blx	r3
      break;
 8015a08:	e067      	b.n	8015ada <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	785b      	ldrb	r3, [r3, #1]
 8015a0e:	2b0b      	cmp	r3, #11
 8015a10:	d851      	bhi.n	8015ab6 <USBD_CDC_Setup+0x18a>
 8015a12:	a201      	add	r2, pc, #4	@ (adr r2, 8015a18 <USBD_CDC_Setup+0xec>)
 8015a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a18:	08015a49 	.word	0x08015a49
 8015a1c:	08015ac5 	.word	0x08015ac5
 8015a20:	08015ab7 	.word	0x08015ab7
 8015a24:	08015ab7 	.word	0x08015ab7
 8015a28:	08015ab7 	.word	0x08015ab7
 8015a2c:	08015ab7 	.word	0x08015ab7
 8015a30:	08015ab7 	.word	0x08015ab7
 8015a34:	08015ab7 	.word	0x08015ab7
 8015a38:	08015ab7 	.word	0x08015ab7
 8015a3c:	08015ab7 	.word	0x08015ab7
 8015a40:	08015a73 	.word	0x08015a73
 8015a44:	08015a9d 	.word	0x08015a9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	2b03      	cmp	r3, #3
 8015a52:	d107      	bne.n	8015a64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015a54:	f107 030a 	add.w	r3, r7, #10
 8015a58:	2202      	movs	r2, #2
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f001 fd67 	bl	8017530 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015a62:	e032      	b.n	8015aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015a64:	6839      	ldr	r1, [r7, #0]
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	f001 fce5 	bl	8017436 <USBD_CtlError>
            ret = USBD_FAIL;
 8015a6c:	2303      	movs	r3, #3
 8015a6e:	75fb      	strb	r3, [r7, #23]
          break;
 8015a70:	e02b      	b.n	8015aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a78:	b2db      	uxtb	r3, r3
 8015a7a:	2b03      	cmp	r3, #3
 8015a7c:	d107      	bne.n	8015a8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015a7e:	f107 030d 	add.w	r3, r7, #13
 8015a82:	2201      	movs	r2, #1
 8015a84:	4619      	mov	r1, r3
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f001 fd52 	bl	8017530 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015a8c:	e01d      	b.n	8015aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015a8e:	6839      	ldr	r1, [r7, #0]
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f001 fcd0 	bl	8017436 <USBD_CtlError>
            ret = USBD_FAIL;
 8015a96:	2303      	movs	r3, #3
 8015a98:	75fb      	strb	r3, [r7, #23]
          break;
 8015a9a:	e016      	b.n	8015aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	2b03      	cmp	r3, #3
 8015aa6:	d00f      	beq.n	8015ac8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015aa8:	6839      	ldr	r1, [r7, #0]
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	f001 fcc3 	bl	8017436 <USBD_CtlError>
            ret = USBD_FAIL;
 8015ab0:	2303      	movs	r3, #3
 8015ab2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015ab4:	e008      	b.n	8015ac8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015ab6:	6839      	ldr	r1, [r7, #0]
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f001 fcbc 	bl	8017436 <USBD_CtlError>
          ret = USBD_FAIL;
 8015abe:	2303      	movs	r3, #3
 8015ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8015ac2:	e002      	b.n	8015aca <USBD_CDC_Setup+0x19e>
          break;
 8015ac4:	bf00      	nop
 8015ac6:	e008      	b.n	8015ada <USBD_CDC_Setup+0x1ae>
          break;
 8015ac8:	bf00      	nop
      }
      break;
 8015aca:	e006      	b.n	8015ada <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015acc:	6839      	ldr	r1, [r7, #0]
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f001 fcb1 	bl	8017436 <USBD_CtlError>
      ret = USBD_FAIL;
 8015ad4:	2303      	movs	r3, #3
 8015ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8015ad8:	bf00      	nop
  }

  return (uint8_t)ret;
 8015ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	3718      	adds	r7, #24
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}

08015ae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	460b      	mov	r3, r1
 8015aee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015af6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	32b0      	adds	r2, #176	@ 0xb0
 8015b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d101      	bne.n	8015b0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015b0a:	2303      	movs	r3, #3
 8015b0c:	e065      	b.n	8015bda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	32b0      	adds	r2, #176	@ 0xb0
 8015b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015b1e:	78fb      	ldrb	r3, [r7, #3]
 8015b20:	f003 020f 	and.w	r2, r3, #15
 8015b24:	6879      	ldr	r1, [r7, #4]
 8015b26:	4613      	mov	r3, r2
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	4413      	add	r3, r2
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	440b      	add	r3, r1
 8015b30:	3318      	adds	r3, #24
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d02f      	beq.n	8015b98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015b38:	78fb      	ldrb	r3, [r7, #3]
 8015b3a:	f003 020f 	and.w	r2, r3, #15
 8015b3e:	6879      	ldr	r1, [r7, #4]
 8015b40:	4613      	mov	r3, r2
 8015b42:	009b      	lsls	r3, r3, #2
 8015b44:	4413      	add	r3, r2
 8015b46:	009b      	lsls	r3, r3, #2
 8015b48:	440b      	add	r3, r1
 8015b4a:	3318      	adds	r3, #24
 8015b4c:	681a      	ldr	r2, [r3, #0]
 8015b4e:	78fb      	ldrb	r3, [r7, #3]
 8015b50:	f003 010f 	and.w	r1, r3, #15
 8015b54:	68f8      	ldr	r0, [r7, #12]
 8015b56:	460b      	mov	r3, r1
 8015b58:	00db      	lsls	r3, r3, #3
 8015b5a:	440b      	add	r3, r1
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	4403      	add	r3, r0
 8015b60:	331c      	adds	r3, #28
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	fbb2 f1f3 	udiv	r1, r2, r3
 8015b68:	fb01 f303 	mul.w	r3, r1, r3
 8015b6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d112      	bne.n	8015b98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015b72:	78fb      	ldrb	r3, [r7, #3]
 8015b74:	f003 020f 	and.w	r2, r3, #15
 8015b78:	6879      	ldr	r1, [r7, #4]
 8015b7a:	4613      	mov	r3, r2
 8015b7c:	009b      	lsls	r3, r3, #2
 8015b7e:	4413      	add	r3, r2
 8015b80:	009b      	lsls	r3, r3, #2
 8015b82:	440b      	add	r3, r1
 8015b84:	3318      	adds	r3, #24
 8015b86:	2200      	movs	r2, #0
 8015b88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015b8a:	78f9      	ldrb	r1, [r7, #3]
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	2200      	movs	r2, #0
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f002 fa0e 	bl	8017fb2 <USBD_LL_Transmit>
 8015b96:	e01f      	b.n	8015bd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015b98:	68bb      	ldr	r3, [r7, #8]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ba6:	687a      	ldr	r2, [r7, #4]
 8015ba8:	33b0      	adds	r3, #176	@ 0xb0
 8015baa:	009b      	lsls	r3, r3, #2
 8015bac:	4413      	add	r3, r2
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	691b      	ldr	r3, [r3, #16]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d010      	beq.n	8015bd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	33b0      	adds	r3, #176	@ 0xb0
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4413      	add	r3, r2
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	691b      	ldr	r3, [r3, #16]
 8015bc8:	68ba      	ldr	r2, [r7, #8]
 8015bca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015bce:	68ba      	ldr	r2, [r7, #8]
 8015bd0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015bd4:	78fa      	ldrb	r2, [r7, #3]
 8015bd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015bd8:	2300      	movs	r3, #0
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015be2:	b580      	push	{r7, lr}
 8015be4:	b084      	sub	sp, #16
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	6078      	str	r0, [r7, #4]
 8015bea:	460b      	mov	r3, r1
 8015bec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	32b0      	adds	r2, #176	@ 0xb0
 8015bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	32b0      	adds	r2, #176	@ 0xb0
 8015c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d101      	bne.n	8015c14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015c10:	2303      	movs	r3, #3
 8015c12:	e01a      	b.n	8015c4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015c14:	78fb      	ldrb	r3, [r7, #3]
 8015c16:	4619      	mov	r1, r3
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	f002 fa0c 	bl	8018036 <USBD_LL_GetRxDataSize>
 8015c1e:	4602      	mov	r2, r0
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c2c:	687a      	ldr	r2, [r7, #4]
 8015c2e:	33b0      	adds	r3, #176	@ 0xb0
 8015c30:	009b      	lsls	r3, r3, #2
 8015c32:	4413      	add	r3, r2
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	68db      	ldr	r3, [r3, #12]
 8015c38:	68fa      	ldr	r2, [r7, #12]
 8015c3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015c3e:	68fa      	ldr	r2, [r7, #12]
 8015c40:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015c44:	4611      	mov	r1, r2
 8015c46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015c48:	2300      	movs	r3, #0
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3710      	adds	r7, #16
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}

08015c52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015c52:	b580      	push	{r7, lr}
 8015c54:	b084      	sub	sp, #16
 8015c56:	af00      	add	r7, sp, #0
 8015c58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	32b0      	adds	r2, #176	@ 0xb0
 8015c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d101      	bne.n	8015c74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015c70:	2303      	movs	r3, #3
 8015c72:	e024      	b.n	8015cbe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c7a:	687a      	ldr	r2, [r7, #4]
 8015c7c:	33b0      	adds	r3, #176	@ 0xb0
 8015c7e:	009b      	lsls	r3, r3, #2
 8015c80:	4413      	add	r3, r2
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d019      	beq.n	8015cbc <USBD_CDC_EP0_RxReady+0x6a>
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015c8e:	2bff      	cmp	r3, #255	@ 0xff
 8015c90:	d014      	beq.n	8015cbc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	33b0      	adds	r3, #176	@ 0xb0
 8015c9c:	009b      	lsls	r3, r3, #2
 8015c9e:	4413      	add	r3, r2
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	689b      	ldr	r3, [r3, #8]
 8015ca4:	68fa      	ldr	r2, [r7, #12]
 8015ca6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015caa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015cac:	68fa      	ldr	r2, [r7, #12]
 8015cae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015cb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	22ff      	movs	r2, #255	@ 0xff
 8015cb8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015cbc:	2300      	movs	r3, #0
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3710      	adds	r7, #16
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
	...

08015cc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b086      	sub	sp, #24
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015cd0:	2182      	movs	r1, #130	@ 0x82
 8015cd2:	4818      	ldr	r0, [pc, #96]	@ (8015d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015cd4:	f000 fd4f 	bl	8016776 <USBD_GetEpDesc>
 8015cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015cda:	2101      	movs	r1, #1
 8015cdc:	4815      	ldr	r0, [pc, #84]	@ (8015d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015cde:	f000 fd4a 	bl	8016776 <USBD_GetEpDesc>
 8015ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ce4:	2181      	movs	r1, #129	@ 0x81
 8015ce6:	4813      	ldr	r0, [pc, #76]	@ (8015d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015ce8:	f000 fd45 	bl	8016776 <USBD_GetEpDesc>
 8015cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d002      	beq.n	8015cfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	2210      	movs	r2, #16
 8015cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d006      	beq.n	8015d0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	2200      	movs	r2, #0
 8015d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015d08:	711a      	strb	r2, [r3, #4]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d006      	beq.n	8015d22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2200      	movs	r2, #0
 8015d18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015d1c:	711a      	strb	r2, [r3, #4]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2243      	movs	r2, #67	@ 0x43
 8015d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015d28:	4b02      	ldr	r3, [pc, #8]	@ (8015d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3718      	adds	r7, #24
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	24000268 	.word	0x24000268

08015d38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b086      	sub	sp, #24
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015d40:	2182      	movs	r1, #130	@ 0x82
 8015d42:	4818      	ldr	r0, [pc, #96]	@ (8015da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015d44:	f000 fd17 	bl	8016776 <USBD_GetEpDesc>
 8015d48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015d4a:	2101      	movs	r1, #1
 8015d4c:	4815      	ldr	r0, [pc, #84]	@ (8015da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015d4e:	f000 fd12 	bl	8016776 <USBD_GetEpDesc>
 8015d52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015d54:	2181      	movs	r1, #129	@ 0x81
 8015d56:	4813      	ldr	r0, [pc, #76]	@ (8015da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015d58:	f000 fd0d 	bl	8016776 <USBD_GetEpDesc>
 8015d5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d002      	beq.n	8015d6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	2210      	movs	r2, #16
 8015d68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d006      	beq.n	8015d7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	2200      	movs	r2, #0
 8015d74:	711a      	strb	r2, [r3, #4]
 8015d76:	2200      	movs	r2, #0
 8015d78:	f042 0202 	orr.w	r2, r2, #2
 8015d7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d006      	beq.n	8015d92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	2200      	movs	r2, #0
 8015d88:	711a      	strb	r2, [r3, #4]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	f042 0202 	orr.w	r2, r2, #2
 8015d90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2243      	movs	r2, #67	@ 0x43
 8015d96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015d98:	4b02      	ldr	r3, [pc, #8]	@ (8015da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3718      	adds	r7, #24
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	24000268 	.word	0x24000268

08015da8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b086      	sub	sp, #24
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015db0:	2182      	movs	r1, #130	@ 0x82
 8015db2:	4818      	ldr	r0, [pc, #96]	@ (8015e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015db4:	f000 fcdf 	bl	8016776 <USBD_GetEpDesc>
 8015db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015dba:	2101      	movs	r1, #1
 8015dbc:	4815      	ldr	r0, [pc, #84]	@ (8015e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015dbe:	f000 fcda 	bl	8016776 <USBD_GetEpDesc>
 8015dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015dc4:	2181      	movs	r1, #129	@ 0x81
 8015dc6:	4813      	ldr	r0, [pc, #76]	@ (8015e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015dc8:	f000 fcd5 	bl	8016776 <USBD_GetEpDesc>
 8015dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015dce:	697b      	ldr	r3, [r7, #20]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d002      	beq.n	8015dda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	2210      	movs	r2, #16
 8015dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d006      	beq.n	8015dee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	2200      	movs	r2, #0
 8015de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015de8:	711a      	strb	r2, [r3, #4]
 8015dea:	2200      	movs	r2, #0
 8015dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d006      	beq.n	8015e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	2200      	movs	r2, #0
 8015df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015dfc:	711a      	strb	r2, [r3, #4]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2243      	movs	r2, #67	@ 0x43
 8015e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e08:	4b02      	ldr	r3, [pc, #8]	@ (8015e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3718      	adds	r7, #24
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	24000268 	.word	0x24000268

08015e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015e18:	b480      	push	{r7}
 8015e1a:	b083      	sub	sp, #12
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	220a      	movs	r2, #10
 8015e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015e26:	4b03      	ldr	r3, [pc, #12]	@ (8015e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015e28:	4618      	mov	r0, r3
 8015e2a:	370c      	adds	r7, #12
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e32:	4770      	bx	lr
 8015e34:	24000224 	.word	0x24000224

08015e38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015e38:	b480      	push	{r7}
 8015e3a:	b083      	sub	sp, #12
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
 8015e40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d101      	bne.n	8015e4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015e48:	2303      	movs	r3, #3
 8015e4a:	e009      	b.n	8015e60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e52:	687a      	ldr	r2, [r7, #4]
 8015e54:	33b0      	adds	r3, #176	@ 0xb0
 8015e56:	009b      	lsls	r3, r3, #2
 8015e58:	4413      	add	r3, r2
 8015e5a:	683a      	ldr	r2, [r7, #0]
 8015e5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015e5e:	2300      	movs	r3, #0
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	370c      	adds	r7, #12
 8015e64:	46bd      	mov	sp, r7
 8015e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6a:	4770      	bx	lr

08015e6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b087      	sub	sp, #28
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	60f8      	str	r0, [r7, #12]
 8015e74:	60b9      	str	r1, [r7, #8]
 8015e76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	32b0      	adds	r2, #176	@ 0xb0
 8015e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d101      	bne.n	8015e92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015e8e:	2303      	movs	r3, #3
 8015e90:	e008      	b.n	8015ea4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	68ba      	ldr	r2, [r7, #8]
 8015e96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	687a      	ldr	r2, [r7, #4]
 8015e9e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8015ea2:	2300      	movs	r3, #0
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	371c      	adds	r7, #28
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eae:	4770      	bx	lr

08015eb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	b085      	sub	sp, #20
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
 8015eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	32b0      	adds	r2, #176	@ 0xb0
 8015ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d101      	bne.n	8015ed4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015ed0:	2303      	movs	r3, #3
 8015ed2:	e004      	b.n	8015ede <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	683a      	ldr	r2, [r7, #0]
 8015ed8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8015edc:	2300      	movs	r3, #0
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3714      	adds	r7, #20
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee8:	4770      	bx	lr
	...

08015eec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b084      	sub	sp, #16
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	32b0      	adds	r2, #176	@ 0xb0
 8015efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f02:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015f04:	2301      	movs	r3, #1
 8015f06:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d101      	bne.n	8015f12 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015f0e:	2303      	movs	r3, #3
 8015f10:	e025      	b.n	8015f5e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d11f      	bne.n	8015f5c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	2201      	movs	r2, #1
 8015f20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015f24:	4b10      	ldr	r3, [pc, #64]	@ (8015f68 <USBD_CDC_TransmitPacket+0x7c>)
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	f003 020f 	and.w	r2, r3, #15
 8015f2c:	68bb      	ldr	r3, [r7, #8]
 8015f2e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	4613      	mov	r3, r2
 8015f36:	009b      	lsls	r3, r3, #2
 8015f38:	4413      	add	r3, r2
 8015f3a:	009b      	lsls	r3, r3, #2
 8015f3c:	4403      	add	r3, r0
 8015f3e:	3318      	adds	r3, #24
 8015f40:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015f42:	4b09      	ldr	r3, [pc, #36]	@ (8015f68 <USBD_CDC_TransmitPacket+0x7c>)
 8015f44:	7819      	ldrb	r1, [r3, #0]
 8015f46:	68bb      	ldr	r3, [r7, #8]
 8015f48:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f002 f82d 	bl	8017fb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	3710      	adds	r7, #16
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}
 8015f66:	bf00      	nop
 8015f68:	240002ab 	.word	0x240002ab

08015f6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b084      	sub	sp, #16
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	32b0      	adds	r2, #176	@ 0xb0
 8015f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	32b0      	adds	r2, #176	@ 0xb0
 8015f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d101      	bne.n	8015f9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015f96:	2303      	movs	r3, #3
 8015f98:	e018      	b.n	8015fcc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	7c1b      	ldrb	r3, [r3, #16]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d10a      	bne.n	8015fb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8015fd4 <USBD_CDC_ReceivePacket+0x68>)
 8015fa4:	7819      	ldrb	r1, [r3, #0]
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f002 f81f 	bl	8017ff4 <USBD_LL_PrepareReceive>
 8015fb6:	e008      	b.n	8015fca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015fb8:	4b06      	ldr	r3, [pc, #24]	@ (8015fd4 <USBD_CDC_ReceivePacket+0x68>)
 8015fba:	7819      	ldrb	r1, [r3, #0]
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015fc2:	2340      	movs	r3, #64	@ 0x40
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f002 f815 	bl	8017ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015fca:	2300      	movs	r3, #0
}
 8015fcc:	4618      	mov	r0, r3
 8015fce:	3710      	adds	r7, #16
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}
 8015fd4:	240002ac 	.word	0x240002ac

08015fd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b086      	sub	sp, #24
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	60f8      	str	r0, [r7, #12]
 8015fe0:	60b9      	str	r1, [r7, #8]
 8015fe2:	4613      	mov	r3, r2
 8015fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d101      	bne.n	8015ff0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015fec:	2303      	movs	r3, #3
 8015fee:	e01f      	b.n	8016030 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2200      	movs	r2, #0
 8016004:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d003      	beq.n	8016016 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	68ba      	ldr	r2, [r7, #8]
 8016012:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	2201      	movs	r2, #1
 801601a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	79fa      	ldrb	r2, [r7, #7]
 8016022:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016024:	68f8      	ldr	r0, [r7, #12]
 8016026:	f001 fe8b 	bl	8017d40 <USBD_LL_Init>
 801602a:	4603      	mov	r3, r0
 801602c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801602e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016030:	4618      	mov	r0, r3
 8016032:	3718      	adds	r7, #24
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}

08016038 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b084      	sub	sp, #16
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
 8016040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016042:	2300      	movs	r3, #0
 8016044:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d101      	bne.n	8016050 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801604c:	2303      	movs	r3, #3
 801604e:	e025      	b.n	801609c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	683a      	ldr	r2, [r7, #0]
 8016054:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	32ae      	adds	r2, #174	@ 0xae
 8016062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016068:	2b00      	cmp	r3, #0
 801606a:	d00f      	beq.n	801608c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	32ae      	adds	r2, #174	@ 0xae
 8016076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801607a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801607c:	f107 020e 	add.w	r2, r7, #14
 8016080:	4610      	mov	r0, r2
 8016082:	4798      	blx	r3
 8016084:	4602      	mov	r2, r0
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016092:	1c5a      	adds	r2, r3, #1
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801609a:	2300      	movs	r3, #0
}
 801609c:	4618      	mov	r0, r3
 801609e:	3710      	adds	r7, #16
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f001 fe97 	bl	8017de0 <USBD_LL_Start>
 80160b2:	4603      	mov	r3, r0
}
 80160b4:	4618      	mov	r0, r3
 80160b6:	3708      	adds	r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}

080160bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80160bc:	b480      	push	{r7}
 80160be:	b083      	sub	sp, #12
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80160c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	370c      	adds	r7, #12
 80160ca:	46bd      	mov	sp, r7
 80160cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d0:	4770      	bx	lr

080160d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80160d2:	b580      	push	{r7, lr}
 80160d4:	b084      	sub	sp, #16
 80160d6:	af00      	add	r7, sp, #0
 80160d8:	6078      	str	r0, [r7, #4]
 80160da:	460b      	mov	r3, r1
 80160dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80160de:	2300      	movs	r3, #0
 80160e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d009      	beq.n	8016100 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	78fa      	ldrb	r2, [r7, #3]
 80160f6:	4611      	mov	r1, r2
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	4798      	blx	r3
 80160fc:	4603      	mov	r3, r0
 80160fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016100:	7bfb      	ldrb	r3, [r7, #15]
}
 8016102:	4618      	mov	r0, r3
 8016104:	3710      	adds	r7, #16
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801610a:	b580      	push	{r7, lr}
 801610c:	b084      	sub	sp, #16
 801610e:	af00      	add	r7, sp, #0
 8016110:	6078      	str	r0, [r7, #4]
 8016112:	460b      	mov	r3, r1
 8016114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016116:	2300      	movs	r3, #0
 8016118:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	78fa      	ldrb	r2, [r7, #3]
 8016124:	4611      	mov	r1, r2
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	4798      	blx	r3
 801612a:	4603      	mov	r3, r0
 801612c:	2b00      	cmp	r3, #0
 801612e:	d001      	beq.n	8016134 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016130:	2303      	movs	r3, #3
 8016132:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016134:	7bfb      	ldrb	r3, [r7, #15]
}
 8016136:	4618      	mov	r0, r3
 8016138:	3710      	adds	r7, #16
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}

0801613e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801613e:	b580      	push	{r7, lr}
 8016140:	b084      	sub	sp, #16
 8016142:	af00      	add	r7, sp, #0
 8016144:	6078      	str	r0, [r7, #4]
 8016146:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801614e:	6839      	ldr	r1, [r7, #0]
 8016150:	4618      	mov	r0, r3
 8016152:	f001 f936 	bl	80173c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	2201      	movs	r2, #1
 801615a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016164:	461a      	mov	r2, r3
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016172:	f003 031f 	and.w	r3, r3, #31
 8016176:	2b02      	cmp	r3, #2
 8016178:	d01a      	beq.n	80161b0 <USBD_LL_SetupStage+0x72>
 801617a:	2b02      	cmp	r3, #2
 801617c:	d822      	bhi.n	80161c4 <USBD_LL_SetupStage+0x86>
 801617e:	2b00      	cmp	r3, #0
 8016180:	d002      	beq.n	8016188 <USBD_LL_SetupStage+0x4a>
 8016182:	2b01      	cmp	r3, #1
 8016184:	d00a      	beq.n	801619c <USBD_LL_SetupStage+0x5e>
 8016186:	e01d      	b.n	80161c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801618e:	4619      	mov	r1, r3
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f000 fb63 	bl	801685c <USBD_StdDevReq>
 8016196:	4603      	mov	r3, r0
 8016198:	73fb      	strb	r3, [r7, #15]
      break;
 801619a:	e020      	b.n	80161de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80161a2:	4619      	mov	r1, r3
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 fbcb 	bl	8016940 <USBD_StdItfReq>
 80161aa:	4603      	mov	r3, r0
 80161ac:	73fb      	strb	r3, [r7, #15]
      break;
 80161ae:	e016      	b.n	80161de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80161b6:	4619      	mov	r1, r3
 80161b8:	6878      	ldr	r0, [r7, #4]
 80161ba:	f000 fc2d 	bl	8016a18 <USBD_StdEPReq>
 80161be:	4603      	mov	r3, r0
 80161c0:	73fb      	strb	r3, [r7, #15]
      break;
 80161c2:	e00c      	b.n	80161de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80161ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	4619      	mov	r1, r3
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f001 fe64 	bl	8017ea0 <USBD_LL_StallEP>
 80161d8:	4603      	mov	r3, r0
 80161da:	73fb      	strb	r3, [r7, #15]
      break;
 80161dc:	bf00      	nop
  }

  return ret;
 80161de:	7bfb      	ldrb	r3, [r7, #15]
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	3710      	adds	r7, #16
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b086      	sub	sp, #24
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	460b      	mov	r3, r1
 80161f2:	607a      	str	r2, [r7, #4]
 80161f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80161f6:	2300      	movs	r3, #0
 80161f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80161fa:	7afb      	ldrb	r3, [r7, #11]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d16e      	bne.n	80162de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801620e:	2b03      	cmp	r3, #3
 8016210:	f040 8098 	bne.w	8016344 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	689a      	ldr	r2, [r3, #8]
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	68db      	ldr	r3, [r3, #12]
 801621c:	429a      	cmp	r2, r3
 801621e:	d913      	bls.n	8016248 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016220:	693b      	ldr	r3, [r7, #16]
 8016222:	689a      	ldr	r2, [r3, #8]
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	68db      	ldr	r3, [r3, #12]
 8016228:	1ad2      	subs	r2, r2, r3
 801622a:	693b      	ldr	r3, [r7, #16]
 801622c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	68da      	ldr	r2, [r3, #12]
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	689b      	ldr	r3, [r3, #8]
 8016236:	4293      	cmp	r3, r2
 8016238:	bf28      	it	cs
 801623a:	4613      	movcs	r3, r2
 801623c:	461a      	mov	r2, r3
 801623e:	6879      	ldr	r1, [r7, #4]
 8016240:	68f8      	ldr	r0, [r7, #12]
 8016242:	f001 f9be 	bl	80175c2 <USBD_CtlContinueRx>
 8016246:	e07d      	b.n	8016344 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801624e:	f003 031f 	and.w	r3, r3, #31
 8016252:	2b02      	cmp	r3, #2
 8016254:	d014      	beq.n	8016280 <USBD_LL_DataOutStage+0x98>
 8016256:	2b02      	cmp	r3, #2
 8016258:	d81d      	bhi.n	8016296 <USBD_LL_DataOutStage+0xae>
 801625a:	2b00      	cmp	r3, #0
 801625c:	d002      	beq.n	8016264 <USBD_LL_DataOutStage+0x7c>
 801625e:	2b01      	cmp	r3, #1
 8016260:	d003      	beq.n	801626a <USBD_LL_DataOutStage+0x82>
 8016262:	e018      	b.n	8016296 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016264:	2300      	movs	r3, #0
 8016266:	75bb      	strb	r3, [r7, #22]
            break;
 8016268:	e018      	b.n	801629c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016270:	b2db      	uxtb	r3, r3
 8016272:	4619      	mov	r1, r3
 8016274:	68f8      	ldr	r0, [r7, #12]
 8016276:	f000 fa64 	bl	8016742 <USBD_CoreFindIF>
 801627a:	4603      	mov	r3, r0
 801627c:	75bb      	strb	r3, [r7, #22]
            break;
 801627e:	e00d      	b.n	801629c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016286:	b2db      	uxtb	r3, r3
 8016288:	4619      	mov	r1, r3
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	f000 fa66 	bl	801675c <USBD_CoreFindEP>
 8016290:	4603      	mov	r3, r0
 8016292:	75bb      	strb	r3, [r7, #22]
            break;
 8016294:	e002      	b.n	801629c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016296:	2300      	movs	r3, #0
 8016298:	75bb      	strb	r3, [r7, #22]
            break;
 801629a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801629c:	7dbb      	ldrb	r3, [r7, #22]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d119      	bne.n	80162d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80162a8:	b2db      	uxtb	r3, r3
 80162aa:	2b03      	cmp	r3, #3
 80162ac:	d113      	bne.n	80162d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80162ae:	7dba      	ldrb	r2, [r7, #22]
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	32ae      	adds	r2, #174	@ 0xae
 80162b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162b8:	691b      	ldr	r3, [r3, #16]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00b      	beq.n	80162d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80162be:	7dba      	ldrb	r2, [r7, #22]
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80162c6:	7dba      	ldrb	r2, [r7, #22]
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	32ae      	adds	r2, #174	@ 0xae
 80162cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162d0:	691b      	ldr	r3, [r3, #16]
 80162d2:	68f8      	ldr	r0, [r7, #12]
 80162d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80162d6:	68f8      	ldr	r0, [r7, #12]
 80162d8:	f001 f984 	bl	80175e4 <USBD_CtlSendStatus>
 80162dc:	e032      	b.n	8016344 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80162de:	7afb      	ldrb	r3, [r7, #11]
 80162e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	4619      	mov	r1, r3
 80162e8:	68f8      	ldr	r0, [r7, #12]
 80162ea:	f000 fa37 	bl	801675c <USBD_CoreFindEP>
 80162ee:	4603      	mov	r3, r0
 80162f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80162f2:	7dbb      	ldrb	r3, [r7, #22]
 80162f4:	2bff      	cmp	r3, #255	@ 0xff
 80162f6:	d025      	beq.n	8016344 <USBD_LL_DataOutStage+0x15c>
 80162f8:	7dbb      	ldrb	r3, [r7, #22]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d122      	bne.n	8016344 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016304:	b2db      	uxtb	r3, r3
 8016306:	2b03      	cmp	r3, #3
 8016308:	d117      	bne.n	801633a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801630a:	7dba      	ldrb	r2, [r7, #22]
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	32ae      	adds	r2, #174	@ 0xae
 8016310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016314:	699b      	ldr	r3, [r3, #24]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d00f      	beq.n	801633a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801631a:	7dba      	ldrb	r2, [r7, #22]
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016322:	7dba      	ldrb	r2, [r7, #22]
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	32ae      	adds	r2, #174	@ 0xae
 8016328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801632c:	699b      	ldr	r3, [r3, #24]
 801632e:	7afa      	ldrb	r2, [r7, #11]
 8016330:	4611      	mov	r1, r2
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	4798      	blx	r3
 8016336:	4603      	mov	r3, r0
 8016338:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801633a:	7dfb      	ldrb	r3, [r7, #23]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d001      	beq.n	8016344 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016340:	7dfb      	ldrb	r3, [r7, #23]
 8016342:	e000      	b.n	8016346 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016344:	2300      	movs	r3, #0
}
 8016346:	4618      	mov	r0, r3
 8016348:	3718      	adds	r7, #24
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}

0801634e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801634e:	b580      	push	{r7, lr}
 8016350:	b086      	sub	sp, #24
 8016352:	af00      	add	r7, sp, #0
 8016354:	60f8      	str	r0, [r7, #12]
 8016356:	460b      	mov	r3, r1
 8016358:	607a      	str	r2, [r7, #4]
 801635a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801635c:	7afb      	ldrb	r3, [r7, #11]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d16f      	bne.n	8016442 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	3314      	adds	r3, #20
 8016366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801636e:	2b02      	cmp	r3, #2
 8016370:	d15a      	bne.n	8016428 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	689a      	ldr	r2, [r3, #8]
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	429a      	cmp	r2, r3
 801637c:	d914      	bls.n	80163a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	689a      	ldr	r2, [r3, #8]
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	68db      	ldr	r3, [r3, #12]
 8016386:	1ad2      	subs	r2, r2, r3
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	689b      	ldr	r3, [r3, #8]
 8016390:	461a      	mov	r2, r3
 8016392:	6879      	ldr	r1, [r7, #4]
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f001 f8e6 	bl	8017566 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801639a:	2300      	movs	r3, #0
 801639c:	2200      	movs	r2, #0
 801639e:	2100      	movs	r1, #0
 80163a0:	68f8      	ldr	r0, [r7, #12]
 80163a2:	f001 fe27 	bl	8017ff4 <USBD_LL_PrepareReceive>
 80163a6:	e03f      	b.n	8016428 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	68da      	ldr	r2, [r3, #12]
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	689b      	ldr	r3, [r3, #8]
 80163b0:	429a      	cmp	r2, r3
 80163b2:	d11c      	bne.n	80163ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	685a      	ldr	r2, [r3, #4]
 80163b8:	693b      	ldr	r3, [r7, #16]
 80163ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80163bc:	429a      	cmp	r2, r3
 80163be:	d316      	bcc.n	80163ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	685a      	ldr	r2, [r3, #4]
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d20f      	bcs.n	80163ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80163ce:	2200      	movs	r2, #0
 80163d0:	2100      	movs	r1, #0
 80163d2:	68f8      	ldr	r0, [r7, #12]
 80163d4:	f001 f8c7 	bl	8017566 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	2200      	movs	r2, #0
 80163dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163e0:	2300      	movs	r3, #0
 80163e2:	2200      	movs	r2, #0
 80163e4:	2100      	movs	r1, #0
 80163e6:	68f8      	ldr	r0, [r7, #12]
 80163e8:	f001 fe04 	bl	8017ff4 <USBD_LL_PrepareReceive>
 80163ec:	e01c      	b.n	8016428 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80163f4:	b2db      	uxtb	r3, r3
 80163f6:	2b03      	cmp	r3, #3
 80163f8:	d10f      	bne.n	801641a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016400:	68db      	ldr	r3, [r3, #12]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d009      	beq.n	801641a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2200      	movs	r2, #0
 801640a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016414:	68db      	ldr	r3, [r3, #12]
 8016416:	68f8      	ldr	r0, [r7, #12]
 8016418:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801641a:	2180      	movs	r1, #128	@ 0x80
 801641c:	68f8      	ldr	r0, [r7, #12]
 801641e:	f001 fd3f 	bl	8017ea0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016422:	68f8      	ldr	r0, [r7, #12]
 8016424:	f001 f8f1 	bl	801760a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801642e:	2b00      	cmp	r3, #0
 8016430:	d03a      	beq.n	80164a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016432:	68f8      	ldr	r0, [r7, #12]
 8016434:	f7ff fe42 	bl	80160bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	2200      	movs	r2, #0
 801643c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016440:	e032      	b.n	80164a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016442:	7afb      	ldrb	r3, [r7, #11]
 8016444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016448:	b2db      	uxtb	r3, r3
 801644a:	4619      	mov	r1, r3
 801644c:	68f8      	ldr	r0, [r7, #12]
 801644e:	f000 f985 	bl	801675c <USBD_CoreFindEP>
 8016452:	4603      	mov	r3, r0
 8016454:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016456:	7dfb      	ldrb	r3, [r7, #23]
 8016458:	2bff      	cmp	r3, #255	@ 0xff
 801645a:	d025      	beq.n	80164a8 <USBD_LL_DataInStage+0x15a>
 801645c:	7dfb      	ldrb	r3, [r7, #23]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d122      	bne.n	80164a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016468:	b2db      	uxtb	r3, r3
 801646a:	2b03      	cmp	r3, #3
 801646c:	d11c      	bne.n	80164a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801646e:	7dfa      	ldrb	r2, [r7, #23]
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	32ae      	adds	r2, #174	@ 0xae
 8016474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016478:	695b      	ldr	r3, [r3, #20]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d014      	beq.n	80164a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801647e:	7dfa      	ldrb	r2, [r7, #23]
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016486:	7dfa      	ldrb	r2, [r7, #23]
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	32ae      	adds	r2, #174	@ 0xae
 801648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016490:	695b      	ldr	r3, [r3, #20]
 8016492:	7afa      	ldrb	r2, [r7, #11]
 8016494:	4611      	mov	r1, r2
 8016496:	68f8      	ldr	r0, [r7, #12]
 8016498:	4798      	blx	r3
 801649a:	4603      	mov	r3, r0
 801649c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801649e:	7dbb      	ldrb	r3, [r7, #22]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d001      	beq.n	80164a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80164a4:	7dbb      	ldrb	r3, [r7, #22]
 80164a6:	e000      	b.n	80164aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3718      	adds	r7, #24
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}

080164b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80164b2:	b580      	push	{r7, lr}
 80164b4:	b084      	sub	sp, #16
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80164ba:	2300      	movs	r3, #0
 80164bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2201      	movs	r2, #1
 80164c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2200      	movs	r2, #0
 80164ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2200      	movs	r2, #0
 80164d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2200      	movs	r2, #0
 80164d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2200      	movs	r2, #0
 80164e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d014      	beq.n	8016518 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00e      	beq.n	8016518 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016500:	685b      	ldr	r3, [r3, #4]
 8016502:	687a      	ldr	r2, [r7, #4]
 8016504:	6852      	ldr	r2, [r2, #4]
 8016506:	b2d2      	uxtb	r2, r2
 8016508:	4611      	mov	r1, r2
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	4798      	blx	r3
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d001      	beq.n	8016518 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016514:	2303      	movs	r3, #3
 8016516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016518:	2340      	movs	r3, #64	@ 0x40
 801651a:	2200      	movs	r2, #0
 801651c:	2100      	movs	r1, #0
 801651e:	6878      	ldr	r0, [r7, #4]
 8016520:	f001 fc79 	bl	8017e16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2201      	movs	r2, #1
 8016528:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	2240      	movs	r2, #64	@ 0x40
 8016530:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016534:	2340      	movs	r3, #64	@ 0x40
 8016536:	2200      	movs	r2, #0
 8016538:	2180      	movs	r1, #128	@ 0x80
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f001 fc6b 	bl	8017e16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2201      	movs	r2, #1
 8016544:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2240      	movs	r2, #64	@ 0x40
 801654a:	621a      	str	r2, [r3, #32]

  return ret;
 801654c:	7bfb      	ldrb	r3, [r7, #15]
}
 801654e:	4618      	mov	r0, r3
 8016550:	3710      	adds	r7, #16
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}

08016556 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016556:	b480      	push	{r7}
 8016558:	b083      	sub	sp, #12
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
 801655e:	460b      	mov	r3, r1
 8016560:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	78fa      	ldrb	r2, [r7, #3]
 8016566:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016568:	2300      	movs	r3, #0
}
 801656a:	4618      	mov	r0, r3
 801656c:	370c      	adds	r7, #12
 801656e:	46bd      	mov	sp, r7
 8016570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016574:	4770      	bx	lr

08016576 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016576:	b480      	push	{r7}
 8016578:	b083      	sub	sp, #12
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016584:	b2db      	uxtb	r3, r3
 8016586:	2b04      	cmp	r3, #4
 8016588:	d006      	beq.n	8016598 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016590:	b2da      	uxtb	r2, r3
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2204      	movs	r2, #4
 801659c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80165a0:	2300      	movs	r3, #0
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	370c      	adds	r7, #12
 80165a6:	46bd      	mov	sp, r7
 80165a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ac:	4770      	bx	lr

080165ae <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80165ae:	b480      	push	{r7}
 80165b0:	b083      	sub	sp, #12
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165bc:	b2db      	uxtb	r3, r3
 80165be:	2b04      	cmp	r3, #4
 80165c0:	d106      	bne.n	80165d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80165c8:	b2da      	uxtb	r2, r3
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80165d0:	2300      	movs	r3, #0
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	370c      	adds	r7, #12
 80165d6:	46bd      	mov	sp, r7
 80165d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165dc:	4770      	bx	lr

080165de <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80165de:	b580      	push	{r7, lr}
 80165e0:	b082      	sub	sp, #8
 80165e2:	af00      	add	r7, sp, #0
 80165e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	2b03      	cmp	r3, #3
 80165f0:	d110      	bne.n	8016614 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d00b      	beq.n	8016614 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016602:	69db      	ldr	r3, [r3, #28]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d005      	beq.n	8016614 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801660e:	69db      	ldr	r3, [r3, #28]
 8016610:	6878      	ldr	r0, [r7, #4]
 8016612:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016614:	2300      	movs	r3, #0
}
 8016616:	4618      	mov	r0, r3
 8016618:	3708      	adds	r7, #8
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}

0801661e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801661e:	b580      	push	{r7, lr}
 8016620:	b082      	sub	sp, #8
 8016622:	af00      	add	r7, sp, #0
 8016624:	6078      	str	r0, [r7, #4]
 8016626:	460b      	mov	r3, r1
 8016628:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	32ae      	adds	r2, #174	@ 0xae
 8016634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d101      	bne.n	8016640 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801663c:	2303      	movs	r3, #3
 801663e:	e01c      	b.n	801667a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016646:	b2db      	uxtb	r3, r3
 8016648:	2b03      	cmp	r3, #3
 801664a:	d115      	bne.n	8016678 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	32ae      	adds	r2, #174	@ 0xae
 8016656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801665a:	6a1b      	ldr	r3, [r3, #32]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d00b      	beq.n	8016678 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	32ae      	adds	r2, #174	@ 0xae
 801666a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801666e:	6a1b      	ldr	r3, [r3, #32]
 8016670:	78fa      	ldrb	r2, [r7, #3]
 8016672:	4611      	mov	r1, r2
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016678:	2300      	movs	r3, #0
}
 801667a:	4618      	mov	r0, r3
 801667c:	3708      	adds	r7, #8
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}

08016682 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016682:	b580      	push	{r7, lr}
 8016684:	b082      	sub	sp, #8
 8016686:	af00      	add	r7, sp, #0
 8016688:	6078      	str	r0, [r7, #4]
 801668a:	460b      	mov	r3, r1
 801668c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	32ae      	adds	r2, #174	@ 0xae
 8016698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d101      	bne.n	80166a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80166a0:	2303      	movs	r3, #3
 80166a2:	e01c      	b.n	80166de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166aa:	b2db      	uxtb	r3, r3
 80166ac:	2b03      	cmp	r3, #3
 80166ae:	d115      	bne.n	80166dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	32ae      	adds	r2, #174	@ 0xae
 80166ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d00b      	beq.n	80166dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	32ae      	adds	r2, #174	@ 0xae
 80166ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166d4:	78fa      	ldrb	r2, [r7, #3]
 80166d6:	4611      	mov	r1, r2
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80166dc:	2300      	movs	r3, #0
}
 80166de:	4618      	mov	r0, r3
 80166e0:	3708      	adds	r7, #8
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}

080166e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80166e6:	b480      	push	{r7}
 80166e8:	b083      	sub	sp, #12
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80166ee:	2300      	movs	r3, #0
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	370c      	adds	r7, #12
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr

080166fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b084      	sub	sp, #16
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016704:	2300      	movs	r3, #0
 8016706:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2201      	movs	r2, #1
 801670c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016716:	2b00      	cmp	r3, #0
 8016718:	d00e      	beq.n	8016738 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016720:	685b      	ldr	r3, [r3, #4]
 8016722:	687a      	ldr	r2, [r7, #4]
 8016724:	6852      	ldr	r2, [r2, #4]
 8016726:	b2d2      	uxtb	r2, r2
 8016728:	4611      	mov	r1, r2
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	4798      	blx	r3
 801672e:	4603      	mov	r3, r0
 8016730:	2b00      	cmp	r3, #0
 8016732:	d001      	beq.n	8016738 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016734:	2303      	movs	r3, #3
 8016736:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016738:	7bfb      	ldrb	r3, [r7, #15]
}
 801673a:	4618      	mov	r0, r3
 801673c:	3710      	adds	r7, #16
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}

08016742 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016742:	b480      	push	{r7}
 8016744:	b083      	sub	sp, #12
 8016746:	af00      	add	r7, sp, #0
 8016748:	6078      	str	r0, [r7, #4]
 801674a:	460b      	mov	r3, r1
 801674c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801674e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016750:	4618      	mov	r0, r3
 8016752:	370c      	adds	r7, #12
 8016754:	46bd      	mov	sp, r7
 8016756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675a:	4770      	bx	lr

0801675c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801675c:	b480      	push	{r7}
 801675e:	b083      	sub	sp, #12
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
 8016764:	460b      	mov	r3, r1
 8016766:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016768:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801676a:	4618      	mov	r0, r3
 801676c:	370c      	adds	r7, #12
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr

08016776 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016776:	b580      	push	{r7, lr}
 8016778:	b086      	sub	sp, #24
 801677a:	af00      	add	r7, sp, #0
 801677c:	6078      	str	r0, [r7, #4]
 801677e:	460b      	mov	r3, r1
 8016780:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801678a:	2300      	movs	r3, #0
 801678c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	885b      	ldrh	r3, [r3, #2]
 8016792:	b29b      	uxth	r3, r3
 8016794:	68fa      	ldr	r2, [r7, #12]
 8016796:	7812      	ldrb	r2, [r2, #0]
 8016798:	4293      	cmp	r3, r2
 801679a:	d91f      	bls.n	80167dc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80167a2:	e013      	b.n	80167cc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80167a4:	f107 030a 	add.w	r3, r7, #10
 80167a8:	4619      	mov	r1, r3
 80167aa:	6978      	ldr	r0, [r7, #20]
 80167ac:	f000 f81b 	bl	80167e6 <USBD_GetNextDesc>
 80167b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	785b      	ldrb	r3, [r3, #1]
 80167b6:	2b05      	cmp	r3, #5
 80167b8:	d108      	bne.n	80167cc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80167be:	693b      	ldr	r3, [r7, #16]
 80167c0:	789b      	ldrb	r3, [r3, #2]
 80167c2:	78fa      	ldrb	r2, [r7, #3]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d008      	beq.n	80167da <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80167c8:	2300      	movs	r3, #0
 80167ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	885b      	ldrh	r3, [r3, #2]
 80167d0:	b29a      	uxth	r2, r3
 80167d2:	897b      	ldrh	r3, [r7, #10]
 80167d4:	429a      	cmp	r2, r3
 80167d6:	d8e5      	bhi.n	80167a4 <USBD_GetEpDesc+0x2e>
 80167d8:	e000      	b.n	80167dc <USBD_GetEpDesc+0x66>
          break;
 80167da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80167dc:	693b      	ldr	r3, [r7, #16]
}
 80167de:	4618      	mov	r0, r3
 80167e0:	3718      	adds	r7, #24
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80167e6:	b480      	push	{r7}
 80167e8:	b085      	sub	sp, #20
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	6078      	str	r0, [r7, #4]
 80167ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	881b      	ldrh	r3, [r3, #0]
 80167f8:	68fa      	ldr	r2, [r7, #12]
 80167fa:	7812      	ldrb	r2, [r2, #0]
 80167fc:	4413      	add	r3, r2
 80167fe:	b29a      	uxth	r2, r3
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	781b      	ldrb	r3, [r3, #0]
 8016808:	461a      	mov	r2, r3
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	4413      	add	r3, r2
 801680e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016810:	68fb      	ldr	r3, [r7, #12]
}
 8016812:	4618      	mov	r0, r3
 8016814:	3714      	adds	r7, #20
 8016816:	46bd      	mov	sp, r7
 8016818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681c:	4770      	bx	lr

0801681e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801681e:	b480      	push	{r7}
 8016820:	b087      	sub	sp, #28
 8016822:	af00      	add	r7, sp, #0
 8016824:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801682a:	697b      	ldr	r3, [r7, #20]
 801682c:	781b      	ldrb	r3, [r3, #0]
 801682e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	3301      	adds	r3, #1
 8016834:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016836:	697b      	ldr	r3, [r7, #20]
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801683c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016840:	021b      	lsls	r3, r3, #8
 8016842:	b21a      	sxth	r2, r3
 8016844:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016848:	4313      	orrs	r3, r2
 801684a:	b21b      	sxth	r3, r3
 801684c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801684e:	89fb      	ldrh	r3, [r7, #14]
}
 8016850:	4618      	mov	r0, r3
 8016852:	371c      	adds	r7, #28
 8016854:	46bd      	mov	sp, r7
 8016856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685a:	4770      	bx	lr

0801685c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b084      	sub	sp, #16
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016866:	2300      	movs	r3, #0
 8016868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016872:	2b40      	cmp	r3, #64	@ 0x40
 8016874:	d005      	beq.n	8016882 <USBD_StdDevReq+0x26>
 8016876:	2b40      	cmp	r3, #64	@ 0x40
 8016878:	d857      	bhi.n	801692a <USBD_StdDevReq+0xce>
 801687a:	2b00      	cmp	r3, #0
 801687c:	d00f      	beq.n	801689e <USBD_StdDevReq+0x42>
 801687e:	2b20      	cmp	r3, #32
 8016880:	d153      	bne.n	801692a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	32ae      	adds	r2, #174	@ 0xae
 801688c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016890:	689b      	ldr	r3, [r3, #8]
 8016892:	6839      	ldr	r1, [r7, #0]
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	4798      	blx	r3
 8016898:	4603      	mov	r3, r0
 801689a:	73fb      	strb	r3, [r7, #15]
      break;
 801689c:	e04a      	b.n	8016934 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	785b      	ldrb	r3, [r3, #1]
 80168a2:	2b09      	cmp	r3, #9
 80168a4:	d83b      	bhi.n	801691e <USBD_StdDevReq+0xc2>
 80168a6:	a201      	add	r2, pc, #4	@ (adr r2, 80168ac <USBD_StdDevReq+0x50>)
 80168a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168ac:	08016901 	.word	0x08016901
 80168b0:	08016915 	.word	0x08016915
 80168b4:	0801691f 	.word	0x0801691f
 80168b8:	0801690b 	.word	0x0801690b
 80168bc:	0801691f 	.word	0x0801691f
 80168c0:	080168df 	.word	0x080168df
 80168c4:	080168d5 	.word	0x080168d5
 80168c8:	0801691f 	.word	0x0801691f
 80168cc:	080168f7 	.word	0x080168f7
 80168d0:	080168e9 	.word	0x080168e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80168d4:	6839      	ldr	r1, [r7, #0]
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f000 fa3c 	bl	8016d54 <USBD_GetDescriptor>
          break;
 80168dc:	e024      	b.n	8016928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80168de:	6839      	ldr	r1, [r7, #0]
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f000 fbcb 	bl	801707c <USBD_SetAddress>
          break;
 80168e6:	e01f      	b.n	8016928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80168e8:	6839      	ldr	r1, [r7, #0]
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f000 fc0a 	bl	8017104 <USBD_SetConfig>
 80168f0:	4603      	mov	r3, r0
 80168f2:	73fb      	strb	r3, [r7, #15]
          break;
 80168f4:	e018      	b.n	8016928 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80168f6:	6839      	ldr	r1, [r7, #0]
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f000 fcad 	bl	8017258 <USBD_GetConfig>
          break;
 80168fe:	e013      	b.n	8016928 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016900:	6839      	ldr	r1, [r7, #0]
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f000 fcde 	bl	80172c4 <USBD_GetStatus>
          break;
 8016908:	e00e      	b.n	8016928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801690a:	6839      	ldr	r1, [r7, #0]
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 fd0d 	bl	801732c <USBD_SetFeature>
          break;
 8016912:	e009      	b.n	8016928 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016914:	6839      	ldr	r1, [r7, #0]
 8016916:	6878      	ldr	r0, [r7, #4]
 8016918:	f000 fd31 	bl	801737e <USBD_ClrFeature>
          break;
 801691c:	e004      	b.n	8016928 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801691e:	6839      	ldr	r1, [r7, #0]
 8016920:	6878      	ldr	r0, [r7, #4]
 8016922:	f000 fd88 	bl	8017436 <USBD_CtlError>
          break;
 8016926:	bf00      	nop
      }
      break;
 8016928:	e004      	b.n	8016934 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801692a:	6839      	ldr	r1, [r7, #0]
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f000 fd82 	bl	8017436 <USBD_CtlError>
      break;
 8016932:	bf00      	nop
  }

  return ret;
 8016934:	7bfb      	ldrb	r3, [r7, #15]
}
 8016936:	4618      	mov	r0, r3
 8016938:	3710      	adds	r7, #16
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}
 801693e:	bf00      	nop

08016940 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b084      	sub	sp, #16
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801694a:	2300      	movs	r3, #0
 801694c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016956:	2b40      	cmp	r3, #64	@ 0x40
 8016958:	d005      	beq.n	8016966 <USBD_StdItfReq+0x26>
 801695a:	2b40      	cmp	r3, #64	@ 0x40
 801695c:	d852      	bhi.n	8016a04 <USBD_StdItfReq+0xc4>
 801695e:	2b00      	cmp	r3, #0
 8016960:	d001      	beq.n	8016966 <USBD_StdItfReq+0x26>
 8016962:	2b20      	cmp	r3, #32
 8016964:	d14e      	bne.n	8016a04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801696c:	b2db      	uxtb	r3, r3
 801696e:	3b01      	subs	r3, #1
 8016970:	2b02      	cmp	r3, #2
 8016972:	d840      	bhi.n	80169f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	889b      	ldrh	r3, [r3, #4]
 8016978:	b2db      	uxtb	r3, r3
 801697a:	2b01      	cmp	r3, #1
 801697c:	d836      	bhi.n	80169ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	889b      	ldrh	r3, [r3, #4]
 8016982:	b2db      	uxtb	r3, r3
 8016984:	4619      	mov	r1, r3
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f7ff fedb 	bl	8016742 <USBD_CoreFindIF>
 801698c:	4603      	mov	r3, r0
 801698e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016990:	7bbb      	ldrb	r3, [r7, #14]
 8016992:	2bff      	cmp	r3, #255	@ 0xff
 8016994:	d01d      	beq.n	80169d2 <USBD_StdItfReq+0x92>
 8016996:	7bbb      	ldrb	r3, [r7, #14]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d11a      	bne.n	80169d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801699c:	7bba      	ldrb	r2, [r7, #14]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	32ae      	adds	r2, #174	@ 0xae
 80169a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169a6:	689b      	ldr	r3, [r3, #8]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d00f      	beq.n	80169cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80169ac:	7bba      	ldrb	r2, [r7, #14]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80169b4:	7bba      	ldrb	r2, [r7, #14]
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	32ae      	adds	r2, #174	@ 0xae
 80169ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169be:	689b      	ldr	r3, [r3, #8]
 80169c0:	6839      	ldr	r1, [r7, #0]
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	4798      	blx	r3
 80169c6:	4603      	mov	r3, r0
 80169c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80169ca:	e004      	b.n	80169d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80169cc:	2303      	movs	r3, #3
 80169ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80169d0:	e001      	b.n	80169d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80169d2:	2303      	movs	r3, #3
 80169d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	88db      	ldrh	r3, [r3, #6]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d110      	bne.n	8016a00 <USBD_StdItfReq+0xc0>
 80169de:	7bfb      	ldrb	r3, [r7, #15]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d10d      	bne.n	8016a00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f000 fdfd 	bl	80175e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80169ea:	e009      	b.n	8016a00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80169ec:	6839      	ldr	r1, [r7, #0]
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f000 fd21 	bl	8017436 <USBD_CtlError>
          break;
 80169f4:	e004      	b.n	8016a00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80169f6:	6839      	ldr	r1, [r7, #0]
 80169f8:	6878      	ldr	r0, [r7, #4]
 80169fa:	f000 fd1c 	bl	8017436 <USBD_CtlError>
          break;
 80169fe:	e000      	b.n	8016a02 <USBD_StdItfReq+0xc2>
          break;
 8016a00:	bf00      	nop
      }
      break;
 8016a02:	e004      	b.n	8016a0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016a04:	6839      	ldr	r1, [r7, #0]
 8016a06:	6878      	ldr	r0, [r7, #4]
 8016a08:	f000 fd15 	bl	8017436 <USBD_CtlError>
      break;
 8016a0c:	bf00      	nop
  }

  return ret;
 8016a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	3710      	adds	r7, #16
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}

08016a18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016a22:	2300      	movs	r3, #0
 8016a24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	889b      	ldrh	r3, [r3, #4]
 8016a2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a34:	2b40      	cmp	r3, #64	@ 0x40
 8016a36:	d007      	beq.n	8016a48 <USBD_StdEPReq+0x30>
 8016a38:	2b40      	cmp	r3, #64	@ 0x40
 8016a3a:	f200 817f 	bhi.w	8016d3c <USBD_StdEPReq+0x324>
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d02a      	beq.n	8016a98 <USBD_StdEPReq+0x80>
 8016a42:	2b20      	cmp	r3, #32
 8016a44:	f040 817a 	bne.w	8016d3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016a48:	7bbb      	ldrb	r3, [r7, #14]
 8016a4a:	4619      	mov	r1, r3
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7ff fe85 	bl	801675c <USBD_CoreFindEP>
 8016a52:	4603      	mov	r3, r0
 8016a54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a56:	7b7b      	ldrb	r3, [r7, #13]
 8016a58:	2bff      	cmp	r3, #255	@ 0xff
 8016a5a:	f000 8174 	beq.w	8016d46 <USBD_StdEPReq+0x32e>
 8016a5e:	7b7b      	ldrb	r3, [r7, #13]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	f040 8170 	bne.w	8016d46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016a66:	7b7a      	ldrb	r2, [r7, #13]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016a6e:	7b7a      	ldrb	r2, [r7, #13]
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	32ae      	adds	r2, #174	@ 0xae
 8016a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a78:	689b      	ldr	r3, [r3, #8]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	f000 8163 	beq.w	8016d46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016a80:	7b7a      	ldrb	r2, [r7, #13]
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	32ae      	adds	r2, #174	@ 0xae
 8016a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a8a:	689b      	ldr	r3, [r3, #8]
 8016a8c:	6839      	ldr	r1, [r7, #0]
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	4798      	blx	r3
 8016a92:	4603      	mov	r3, r0
 8016a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016a96:	e156      	b.n	8016d46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	785b      	ldrb	r3, [r3, #1]
 8016a9c:	2b03      	cmp	r3, #3
 8016a9e:	d008      	beq.n	8016ab2 <USBD_StdEPReq+0x9a>
 8016aa0:	2b03      	cmp	r3, #3
 8016aa2:	f300 8145 	bgt.w	8016d30 <USBD_StdEPReq+0x318>
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	f000 809b 	beq.w	8016be2 <USBD_StdEPReq+0x1ca>
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d03c      	beq.n	8016b2a <USBD_StdEPReq+0x112>
 8016ab0:	e13e      	b.n	8016d30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ab8:	b2db      	uxtb	r3, r3
 8016aba:	2b02      	cmp	r3, #2
 8016abc:	d002      	beq.n	8016ac4 <USBD_StdEPReq+0xac>
 8016abe:	2b03      	cmp	r3, #3
 8016ac0:	d016      	beq.n	8016af0 <USBD_StdEPReq+0xd8>
 8016ac2:	e02c      	b.n	8016b1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016ac4:	7bbb      	ldrb	r3, [r7, #14]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d00d      	beq.n	8016ae6 <USBD_StdEPReq+0xce>
 8016aca:	7bbb      	ldrb	r3, [r7, #14]
 8016acc:	2b80      	cmp	r3, #128	@ 0x80
 8016ace:	d00a      	beq.n	8016ae6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ad0:	7bbb      	ldrb	r3, [r7, #14]
 8016ad2:	4619      	mov	r1, r3
 8016ad4:	6878      	ldr	r0, [r7, #4]
 8016ad6:	f001 f9e3 	bl	8017ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016ada:	2180      	movs	r1, #128	@ 0x80
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f001 f9df 	bl	8017ea0 <USBD_LL_StallEP>
 8016ae2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016ae4:	e020      	b.n	8016b28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016ae6:	6839      	ldr	r1, [r7, #0]
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f000 fca4 	bl	8017436 <USBD_CtlError>
              break;
 8016aee:	e01b      	b.n	8016b28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	885b      	ldrh	r3, [r3, #2]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d10e      	bne.n	8016b16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016af8:	7bbb      	ldrb	r3, [r7, #14]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d00b      	beq.n	8016b16 <USBD_StdEPReq+0xfe>
 8016afe:	7bbb      	ldrb	r3, [r7, #14]
 8016b00:	2b80      	cmp	r3, #128	@ 0x80
 8016b02:	d008      	beq.n	8016b16 <USBD_StdEPReq+0xfe>
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	88db      	ldrh	r3, [r3, #6]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d104      	bne.n	8016b16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b0c:	7bbb      	ldrb	r3, [r7, #14]
 8016b0e:	4619      	mov	r1, r3
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	f001 f9c5 	bl	8017ea0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	f000 fd64 	bl	80175e4 <USBD_CtlSendStatus>

              break;
 8016b1c:	e004      	b.n	8016b28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016b1e:	6839      	ldr	r1, [r7, #0]
 8016b20:	6878      	ldr	r0, [r7, #4]
 8016b22:	f000 fc88 	bl	8017436 <USBD_CtlError>
              break;
 8016b26:	bf00      	nop
          }
          break;
 8016b28:	e107      	b.n	8016d3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	2b02      	cmp	r3, #2
 8016b34:	d002      	beq.n	8016b3c <USBD_StdEPReq+0x124>
 8016b36:	2b03      	cmp	r3, #3
 8016b38:	d016      	beq.n	8016b68 <USBD_StdEPReq+0x150>
 8016b3a:	e04b      	b.n	8016bd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b3c:	7bbb      	ldrb	r3, [r7, #14]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d00d      	beq.n	8016b5e <USBD_StdEPReq+0x146>
 8016b42:	7bbb      	ldrb	r3, [r7, #14]
 8016b44:	2b80      	cmp	r3, #128	@ 0x80
 8016b46:	d00a      	beq.n	8016b5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b48:	7bbb      	ldrb	r3, [r7, #14]
 8016b4a:	4619      	mov	r1, r3
 8016b4c:	6878      	ldr	r0, [r7, #4]
 8016b4e:	f001 f9a7 	bl	8017ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b52:	2180      	movs	r1, #128	@ 0x80
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	f001 f9a3 	bl	8017ea0 <USBD_LL_StallEP>
 8016b5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016b5c:	e040      	b.n	8016be0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016b5e:	6839      	ldr	r1, [r7, #0]
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f000 fc68 	bl	8017436 <USBD_CtlError>
              break;
 8016b66:	e03b      	b.n	8016be0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016b68:	683b      	ldr	r3, [r7, #0]
 8016b6a:	885b      	ldrh	r3, [r3, #2]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d136      	bne.n	8016bde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016b70:	7bbb      	ldrb	r3, [r7, #14]
 8016b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d004      	beq.n	8016b84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016b7a:	7bbb      	ldrb	r3, [r7, #14]
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f001 f9ad 	bl	8017ede <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f000 fd2d 	bl	80175e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016b8a:	7bbb      	ldrb	r3, [r7, #14]
 8016b8c:	4619      	mov	r1, r3
 8016b8e:	6878      	ldr	r0, [r7, #4]
 8016b90:	f7ff fde4 	bl	801675c <USBD_CoreFindEP>
 8016b94:	4603      	mov	r3, r0
 8016b96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016b98:	7b7b      	ldrb	r3, [r7, #13]
 8016b9a:	2bff      	cmp	r3, #255	@ 0xff
 8016b9c:	d01f      	beq.n	8016bde <USBD_StdEPReq+0x1c6>
 8016b9e:	7b7b      	ldrb	r3, [r7, #13]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d11c      	bne.n	8016bde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016ba4:	7b7a      	ldrb	r2, [r7, #13]
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016bac:	7b7a      	ldrb	r2, [r7, #13]
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	32ae      	adds	r2, #174	@ 0xae
 8016bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bb6:	689b      	ldr	r3, [r3, #8]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d010      	beq.n	8016bde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016bbc:	7b7a      	ldrb	r2, [r7, #13]
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	32ae      	adds	r2, #174	@ 0xae
 8016bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bc6:	689b      	ldr	r3, [r3, #8]
 8016bc8:	6839      	ldr	r1, [r7, #0]
 8016bca:	6878      	ldr	r0, [r7, #4]
 8016bcc:	4798      	blx	r3
 8016bce:	4603      	mov	r3, r0
 8016bd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016bd2:	e004      	b.n	8016bde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016bd4:	6839      	ldr	r1, [r7, #0]
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f000 fc2d 	bl	8017436 <USBD_CtlError>
              break;
 8016bdc:	e000      	b.n	8016be0 <USBD_StdEPReq+0x1c8>
              break;
 8016bde:	bf00      	nop
          }
          break;
 8016be0:	e0ab      	b.n	8016d3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016be8:	b2db      	uxtb	r3, r3
 8016bea:	2b02      	cmp	r3, #2
 8016bec:	d002      	beq.n	8016bf4 <USBD_StdEPReq+0x1dc>
 8016bee:	2b03      	cmp	r3, #3
 8016bf0:	d032      	beq.n	8016c58 <USBD_StdEPReq+0x240>
 8016bf2:	e097      	b.n	8016d24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016bf4:	7bbb      	ldrb	r3, [r7, #14]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d007      	beq.n	8016c0a <USBD_StdEPReq+0x1f2>
 8016bfa:	7bbb      	ldrb	r3, [r7, #14]
 8016bfc:	2b80      	cmp	r3, #128	@ 0x80
 8016bfe:	d004      	beq.n	8016c0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016c00:	6839      	ldr	r1, [r7, #0]
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f000 fc17 	bl	8017436 <USBD_CtlError>
                break;
 8016c08:	e091      	b.n	8016d2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	da0b      	bge.n	8016c2a <USBD_StdEPReq+0x212>
 8016c12:	7bbb      	ldrb	r3, [r7, #14]
 8016c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016c18:	4613      	mov	r3, r2
 8016c1a:	009b      	lsls	r3, r3, #2
 8016c1c:	4413      	add	r3, r2
 8016c1e:	009b      	lsls	r3, r3, #2
 8016c20:	3310      	adds	r3, #16
 8016c22:	687a      	ldr	r2, [r7, #4]
 8016c24:	4413      	add	r3, r2
 8016c26:	3304      	adds	r3, #4
 8016c28:	e00b      	b.n	8016c42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016c2a:	7bbb      	ldrb	r3, [r7, #14]
 8016c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c30:	4613      	mov	r3, r2
 8016c32:	009b      	lsls	r3, r3, #2
 8016c34:	4413      	add	r3, r2
 8016c36:	009b      	lsls	r3, r3, #2
 8016c38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016c3c:	687a      	ldr	r2, [r7, #4]
 8016c3e:	4413      	add	r3, r2
 8016c40:	3304      	adds	r3, #4
 8016c42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	2200      	movs	r2, #0
 8016c48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	2202      	movs	r2, #2
 8016c4e:	4619      	mov	r1, r3
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f000 fc6d 	bl	8017530 <USBD_CtlSendData>
              break;
 8016c56:	e06a      	b.n	8016d2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	da11      	bge.n	8016c84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016c60:	7bbb      	ldrb	r3, [r7, #14]
 8016c62:	f003 020f 	and.w	r2, r3, #15
 8016c66:	6879      	ldr	r1, [r7, #4]
 8016c68:	4613      	mov	r3, r2
 8016c6a:	009b      	lsls	r3, r3, #2
 8016c6c:	4413      	add	r3, r2
 8016c6e:	009b      	lsls	r3, r3, #2
 8016c70:	440b      	add	r3, r1
 8016c72:	3324      	adds	r3, #36	@ 0x24
 8016c74:	881b      	ldrh	r3, [r3, #0]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d117      	bne.n	8016caa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016c7a:	6839      	ldr	r1, [r7, #0]
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f000 fbda 	bl	8017436 <USBD_CtlError>
                  break;
 8016c82:	e054      	b.n	8016d2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016c84:	7bbb      	ldrb	r3, [r7, #14]
 8016c86:	f003 020f 	and.w	r2, r3, #15
 8016c8a:	6879      	ldr	r1, [r7, #4]
 8016c8c:	4613      	mov	r3, r2
 8016c8e:	009b      	lsls	r3, r3, #2
 8016c90:	4413      	add	r3, r2
 8016c92:	009b      	lsls	r3, r3, #2
 8016c94:	440b      	add	r3, r1
 8016c96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016c9a:	881b      	ldrh	r3, [r3, #0]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d104      	bne.n	8016caa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016ca0:	6839      	ldr	r1, [r7, #0]
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f000 fbc7 	bl	8017436 <USBD_CtlError>
                  break;
 8016ca8:	e041      	b.n	8016d2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016caa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	da0b      	bge.n	8016cca <USBD_StdEPReq+0x2b2>
 8016cb2:	7bbb      	ldrb	r3, [r7, #14]
 8016cb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016cb8:	4613      	mov	r3, r2
 8016cba:	009b      	lsls	r3, r3, #2
 8016cbc:	4413      	add	r3, r2
 8016cbe:	009b      	lsls	r3, r3, #2
 8016cc0:	3310      	adds	r3, #16
 8016cc2:	687a      	ldr	r2, [r7, #4]
 8016cc4:	4413      	add	r3, r2
 8016cc6:	3304      	adds	r3, #4
 8016cc8:	e00b      	b.n	8016ce2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016cca:	7bbb      	ldrb	r3, [r7, #14]
 8016ccc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016cd0:	4613      	mov	r3, r2
 8016cd2:	009b      	lsls	r3, r3, #2
 8016cd4:	4413      	add	r3, r2
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016cdc:	687a      	ldr	r2, [r7, #4]
 8016cde:	4413      	add	r3, r2
 8016ce0:	3304      	adds	r3, #4
 8016ce2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016ce4:	7bbb      	ldrb	r3, [r7, #14]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d002      	beq.n	8016cf0 <USBD_StdEPReq+0x2d8>
 8016cea:	7bbb      	ldrb	r3, [r7, #14]
 8016cec:	2b80      	cmp	r3, #128	@ 0x80
 8016cee:	d103      	bne.n	8016cf8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	601a      	str	r2, [r3, #0]
 8016cf6:	e00e      	b.n	8016d16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016cf8:	7bbb      	ldrb	r3, [r7, #14]
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	6878      	ldr	r0, [r7, #4]
 8016cfe:	f001 f90d 	bl	8017f1c <USBD_LL_IsStallEP>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d003      	beq.n	8016d10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	2201      	movs	r2, #1
 8016d0c:	601a      	str	r2, [r3, #0]
 8016d0e:	e002      	b.n	8016d16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	2200      	movs	r2, #0
 8016d14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016d16:	68bb      	ldr	r3, [r7, #8]
 8016d18:	2202      	movs	r2, #2
 8016d1a:	4619      	mov	r1, r3
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f000 fc07 	bl	8017530 <USBD_CtlSendData>
              break;
 8016d22:	e004      	b.n	8016d2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016d24:	6839      	ldr	r1, [r7, #0]
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f000 fb85 	bl	8017436 <USBD_CtlError>
              break;
 8016d2c:	bf00      	nop
          }
          break;
 8016d2e:	e004      	b.n	8016d3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016d30:	6839      	ldr	r1, [r7, #0]
 8016d32:	6878      	ldr	r0, [r7, #4]
 8016d34:	f000 fb7f 	bl	8017436 <USBD_CtlError>
          break;
 8016d38:	bf00      	nop
      }
      break;
 8016d3a:	e005      	b.n	8016d48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016d3c:	6839      	ldr	r1, [r7, #0]
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f000 fb79 	bl	8017436 <USBD_CtlError>
      break;
 8016d44:	e000      	b.n	8016d48 <USBD_StdEPReq+0x330>
      break;
 8016d46:	bf00      	nop
  }

  return ret;
 8016d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3710      	adds	r7, #16
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
	...

08016d54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b084      	sub	sp, #16
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
 8016d5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016d62:	2300      	movs	r3, #0
 8016d64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016d66:	2300      	movs	r3, #0
 8016d68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	885b      	ldrh	r3, [r3, #2]
 8016d6e:	0a1b      	lsrs	r3, r3, #8
 8016d70:	b29b      	uxth	r3, r3
 8016d72:	3b01      	subs	r3, #1
 8016d74:	2b0e      	cmp	r3, #14
 8016d76:	f200 8152 	bhi.w	801701e <USBD_GetDescriptor+0x2ca>
 8016d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8016d80 <USBD_GetDescriptor+0x2c>)
 8016d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d80:	08016df1 	.word	0x08016df1
 8016d84:	08016e09 	.word	0x08016e09
 8016d88:	08016e49 	.word	0x08016e49
 8016d8c:	0801701f 	.word	0x0801701f
 8016d90:	0801701f 	.word	0x0801701f
 8016d94:	08016fbf 	.word	0x08016fbf
 8016d98:	08016feb 	.word	0x08016feb
 8016d9c:	0801701f 	.word	0x0801701f
 8016da0:	0801701f 	.word	0x0801701f
 8016da4:	0801701f 	.word	0x0801701f
 8016da8:	0801701f 	.word	0x0801701f
 8016dac:	0801701f 	.word	0x0801701f
 8016db0:	0801701f 	.word	0x0801701f
 8016db4:	0801701f 	.word	0x0801701f
 8016db8:	08016dbd 	.word	0x08016dbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016dc2:	69db      	ldr	r3, [r3, #28]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d00b      	beq.n	8016de0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016dce:	69db      	ldr	r3, [r3, #28]
 8016dd0:	687a      	ldr	r2, [r7, #4]
 8016dd2:	7c12      	ldrb	r2, [r2, #16]
 8016dd4:	f107 0108 	add.w	r1, r7, #8
 8016dd8:	4610      	mov	r0, r2
 8016dda:	4798      	blx	r3
 8016ddc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016dde:	e126      	b.n	801702e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016de0:	6839      	ldr	r1, [r7, #0]
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f000 fb27 	bl	8017436 <USBD_CtlError>
        err++;
 8016de8:	7afb      	ldrb	r3, [r7, #11]
 8016dea:	3301      	adds	r3, #1
 8016dec:	72fb      	strb	r3, [r7, #11]
      break;
 8016dee:	e11e      	b.n	801702e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	7c12      	ldrb	r2, [r2, #16]
 8016dfc:	f107 0108 	add.w	r1, r7, #8
 8016e00:	4610      	mov	r0, r2
 8016e02:	4798      	blx	r3
 8016e04:	60f8      	str	r0, [r7, #12]
      break;
 8016e06:	e112      	b.n	801702e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	7c1b      	ldrb	r3, [r3, #16]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d10d      	bne.n	8016e2c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e18:	f107 0208 	add.w	r2, r7, #8
 8016e1c:	4610      	mov	r0, r2
 8016e1e:	4798      	blx	r3
 8016e20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	3301      	adds	r3, #1
 8016e26:	2202      	movs	r2, #2
 8016e28:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016e2a:	e100      	b.n	801702e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e34:	f107 0208 	add.w	r2, r7, #8
 8016e38:	4610      	mov	r0, r2
 8016e3a:	4798      	blx	r3
 8016e3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	3301      	adds	r3, #1
 8016e42:	2202      	movs	r2, #2
 8016e44:	701a      	strb	r2, [r3, #0]
      break;
 8016e46:	e0f2      	b.n	801702e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	885b      	ldrh	r3, [r3, #2]
 8016e4c:	b2db      	uxtb	r3, r3
 8016e4e:	2b05      	cmp	r3, #5
 8016e50:	f200 80ac 	bhi.w	8016fac <USBD_GetDescriptor+0x258>
 8016e54:	a201      	add	r2, pc, #4	@ (adr r2, 8016e5c <USBD_GetDescriptor+0x108>)
 8016e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e5a:	bf00      	nop
 8016e5c:	08016e75 	.word	0x08016e75
 8016e60:	08016ea9 	.word	0x08016ea9
 8016e64:	08016edd 	.word	0x08016edd
 8016e68:	08016f11 	.word	0x08016f11
 8016e6c:	08016f45 	.word	0x08016f45
 8016e70:	08016f79 	.word	0x08016f79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e7a:	685b      	ldr	r3, [r3, #4]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d00b      	beq.n	8016e98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	687a      	ldr	r2, [r7, #4]
 8016e8a:	7c12      	ldrb	r2, [r2, #16]
 8016e8c:	f107 0108 	add.w	r1, r7, #8
 8016e90:	4610      	mov	r0, r2
 8016e92:	4798      	blx	r3
 8016e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e96:	e091      	b.n	8016fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016e98:	6839      	ldr	r1, [r7, #0]
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 facb 	bl	8017436 <USBD_CtlError>
            err++;
 8016ea0:	7afb      	ldrb	r3, [r7, #11]
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ea6:	e089      	b.n	8016fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016eae:	689b      	ldr	r3, [r3, #8]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d00b      	beq.n	8016ecc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016eba:	689b      	ldr	r3, [r3, #8]
 8016ebc:	687a      	ldr	r2, [r7, #4]
 8016ebe:	7c12      	ldrb	r2, [r2, #16]
 8016ec0:	f107 0108 	add.w	r1, r7, #8
 8016ec4:	4610      	mov	r0, r2
 8016ec6:	4798      	blx	r3
 8016ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016eca:	e077      	b.n	8016fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016ecc:	6839      	ldr	r1, [r7, #0]
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f000 fab1 	bl	8017436 <USBD_CtlError>
            err++;
 8016ed4:	7afb      	ldrb	r3, [r7, #11]
 8016ed6:	3301      	adds	r3, #1
 8016ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8016eda:	e06f      	b.n	8016fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ee2:	68db      	ldr	r3, [r3, #12]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d00b      	beq.n	8016f00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016eee:	68db      	ldr	r3, [r3, #12]
 8016ef0:	687a      	ldr	r2, [r7, #4]
 8016ef2:	7c12      	ldrb	r2, [r2, #16]
 8016ef4:	f107 0108 	add.w	r1, r7, #8
 8016ef8:	4610      	mov	r0, r2
 8016efa:	4798      	blx	r3
 8016efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016efe:	e05d      	b.n	8016fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016f00:	6839      	ldr	r1, [r7, #0]
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f000 fa97 	bl	8017436 <USBD_CtlError>
            err++;
 8016f08:	7afb      	ldrb	r3, [r7, #11]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8016f0e:	e055      	b.n	8016fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f16:	691b      	ldr	r3, [r3, #16]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d00b      	beq.n	8016f34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f22:	691b      	ldr	r3, [r3, #16]
 8016f24:	687a      	ldr	r2, [r7, #4]
 8016f26:	7c12      	ldrb	r2, [r2, #16]
 8016f28:	f107 0108 	add.w	r1, r7, #8
 8016f2c:	4610      	mov	r0, r2
 8016f2e:	4798      	blx	r3
 8016f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f32:	e043      	b.n	8016fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016f34:	6839      	ldr	r1, [r7, #0]
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f000 fa7d 	bl	8017436 <USBD_CtlError>
            err++;
 8016f3c:	7afb      	ldrb	r3, [r7, #11]
 8016f3e:	3301      	adds	r3, #1
 8016f40:	72fb      	strb	r3, [r7, #11]
          break;
 8016f42:	e03b      	b.n	8016fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f4a:	695b      	ldr	r3, [r3, #20]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d00b      	beq.n	8016f68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f56:	695b      	ldr	r3, [r3, #20]
 8016f58:	687a      	ldr	r2, [r7, #4]
 8016f5a:	7c12      	ldrb	r2, [r2, #16]
 8016f5c:	f107 0108 	add.w	r1, r7, #8
 8016f60:	4610      	mov	r0, r2
 8016f62:	4798      	blx	r3
 8016f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f66:	e029      	b.n	8016fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016f68:	6839      	ldr	r1, [r7, #0]
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f000 fa63 	bl	8017436 <USBD_CtlError>
            err++;
 8016f70:	7afb      	ldrb	r3, [r7, #11]
 8016f72:	3301      	adds	r3, #1
 8016f74:	72fb      	strb	r3, [r7, #11]
          break;
 8016f76:	e021      	b.n	8016fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f7e:	699b      	ldr	r3, [r3, #24]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d00b      	beq.n	8016f9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f8a:	699b      	ldr	r3, [r3, #24]
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	7c12      	ldrb	r2, [r2, #16]
 8016f90:	f107 0108 	add.w	r1, r7, #8
 8016f94:	4610      	mov	r0, r2
 8016f96:	4798      	blx	r3
 8016f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f9a:	e00f      	b.n	8016fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016f9c:	6839      	ldr	r1, [r7, #0]
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f000 fa49 	bl	8017436 <USBD_CtlError>
            err++;
 8016fa4:	7afb      	ldrb	r3, [r7, #11]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8016faa:	e007      	b.n	8016fbc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016fac:	6839      	ldr	r1, [r7, #0]
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f000 fa41 	bl	8017436 <USBD_CtlError>
          err++;
 8016fb4:	7afb      	ldrb	r3, [r7, #11]
 8016fb6:	3301      	adds	r3, #1
 8016fb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016fba:	bf00      	nop
      }
      break;
 8016fbc:	e037      	b.n	801702e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	7c1b      	ldrb	r3, [r3, #16]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d109      	bne.n	8016fda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016fce:	f107 0208 	add.w	r2, r7, #8
 8016fd2:	4610      	mov	r0, r2
 8016fd4:	4798      	blx	r3
 8016fd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016fd8:	e029      	b.n	801702e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016fda:	6839      	ldr	r1, [r7, #0]
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f000 fa2a 	bl	8017436 <USBD_CtlError>
        err++;
 8016fe2:	7afb      	ldrb	r3, [r7, #11]
 8016fe4:	3301      	adds	r3, #1
 8016fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8016fe8:	e021      	b.n	801702e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	7c1b      	ldrb	r3, [r3, #16]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d10d      	bne.n	801700e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ffa:	f107 0208 	add.w	r2, r7, #8
 8016ffe:	4610      	mov	r0, r2
 8017000:	4798      	blx	r3
 8017002:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	3301      	adds	r3, #1
 8017008:	2207      	movs	r2, #7
 801700a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801700c:	e00f      	b.n	801702e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801700e:	6839      	ldr	r1, [r7, #0]
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f000 fa10 	bl	8017436 <USBD_CtlError>
        err++;
 8017016:	7afb      	ldrb	r3, [r7, #11]
 8017018:	3301      	adds	r3, #1
 801701a:	72fb      	strb	r3, [r7, #11]
      break;
 801701c:	e007      	b.n	801702e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801701e:	6839      	ldr	r1, [r7, #0]
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f000 fa08 	bl	8017436 <USBD_CtlError>
      err++;
 8017026:	7afb      	ldrb	r3, [r7, #11]
 8017028:	3301      	adds	r3, #1
 801702a:	72fb      	strb	r3, [r7, #11]
      break;
 801702c:	bf00      	nop
  }

  if (err != 0U)
 801702e:	7afb      	ldrb	r3, [r7, #11]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d11e      	bne.n	8017072 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	88db      	ldrh	r3, [r3, #6]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d016      	beq.n	801706a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801703c:	893b      	ldrh	r3, [r7, #8]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d00e      	beq.n	8017060 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	88da      	ldrh	r2, [r3, #6]
 8017046:	893b      	ldrh	r3, [r7, #8]
 8017048:	4293      	cmp	r3, r2
 801704a:	bf28      	it	cs
 801704c:	4613      	movcs	r3, r2
 801704e:	b29b      	uxth	r3, r3
 8017050:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017052:	893b      	ldrh	r3, [r7, #8]
 8017054:	461a      	mov	r2, r3
 8017056:	68f9      	ldr	r1, [r7, #12]
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f000 fa69 	bl	8017530 <USBD_CtlSendData>
 801705e:	e009      	b.n	8017074 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017060:	6839      	ldr	r1, [r7, #0]
 8017062:	6878      	ldr	r0, [r7, #4]
 8017064:	f000 f9e7 	bl	8017436 <USBD_CtlError>
 8017068:	e004      	b.n	8017074 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f000 faba 	bl	80175e4 <USBD_CtlSendStatus>
 8017070:	e000      	b.n	8017074 <USBD_GetDescriptor+0x320>
    return;
 8017072:	bf00      	nop
  }
}
 8017074:	3710      	adds	r7, #16
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}
 801707a:	bf00      	nop

0801707c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b084      	sub	sp, #16
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
 8017084:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	889b      	ldrh	r3, [r3, #4]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d131      	bne.n	80170f2 <USBD_SetAddress+0x76>
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	88db      	ldrh	r3, [r3, #6]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d12d      	bne.n	80170f2 <USBD_SetAddress+0x76>
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	885b      	ldrh	r3, [r3, #2]
 801709a:	2b7f      	cmp	r3, #127	@ 0x7f
 801709c:	d829      	bhi.n	80170f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	885b      	ldrh	r3, [r3, #2]
 80170a2:	b2db      	uxtb	r3, r3
 80170a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80170a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80170b0:	b2db      	uxtb	r3, r3
 80170b2:	2b03      	cmp	r3, #3
 80170b4:	d104      	bne.n	80170c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80170b6:	6839      	ldr	r1, [r7, #0]
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f000 f9bc 	bl	8017436 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170be:	e01d      	b.n	80170fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	7bfa      	ldrb	r2, [r7, #15]
 80170c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80170c8:	7bfb      	ldrb	r3, [r7, #15]
 80170ca:	4619      	mov	r1, r3
 80170cc:	6878      	ldr	r0, [r7, #4]
 80170ce:	f000 ff51 	bl	8017f74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80170d2:	6878      	ldr	r0, [r7, #4]
 80170d4:	f000 fa86 	bl	80175e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80170d8:	7bfb      	ldrb	r3, [r7, #15]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d004      	beq.n	80170e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	2202      	movs	r2, #2
 80170e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170e6:	e009      	b.n	80170fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	2201      	movs	r2, #1
 80170ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170f0:	e004      	b.n	80170fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80170f2:	6839      	ldr	r1, [r7, #0]
 80170f4:	6878      	ldr	r0, [r7, #4]
 80170f6:	f000 f99e 	bl	8017436 <USBD_CtlError>
  }
}
 80170fa:	bf00      	nop
 80170fc:	bf00      	nop
 80170fe:	3710      	adds	r7, #16
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}

08017104 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b084      	sub	sp, #16
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
 801710c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801710e:	2300      	movs	r3, #0
 8017110:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	885b      	ldrh	r3, [r3, #2]
 8017116:	b2da      	uxtb	r2, r3
 8017118:	4b4e      	ldr	r3, [pc, #312]	@ (8017254 <USBD_SetConfig+0x150>)
 801711a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801711c:	4b4d      	ldr	r3, [pc, #308]	@ (8017254 <USBD_SetConfig+0x150>)
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	2b01      	cmp	r3, #1
 8017122:	d905      	bls.n	8017130 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017124:	6839      	ldr	r1, [r7, #0]
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f000 f985 	bl	8017436 <USBD_CtlError>
    return USBD_FAIL;
 801712c:	2303      	movs	r3, #3
 801712e:	e08c      	b.n	801724a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017136:	b2db      	uxtb	r3, r3
 8017138:	2b02      	cmp	r3, #2
 801713a:	d002      	beq.n	8017142 <USBD_SetConfig+0x3e>
 801713c:	2b03      	cmp	r3, #3
 801713e:	d029      	beq.n	8017194 <USBD_SetConfig+0x90>
 8017140:	e075      	b.n	801722e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017142:	4b44      	ldr	r3, [pc, #272]	@ (8017254 <USBD_SetConfig+0x150>)
 8017144:	781b      	ldrb	r3, [r3, #0]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d020      	beq.n	801718c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801714a:	4b42      	ldr	r3, [pc, #264]	@ (8017254 <USBD_SetConfig+0x150>)
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	461a      	mov	r2, r3
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017154:	4b3f      	ldr	r3, [pc, #252]	@ (8017254 <USBD_SetConfig+0x150>)
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	4619      	mov	r1, r3
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	f7fe ffb9 	bl	80160d2 <USBD_SetClassConfig>
 8017160:	4603      	mov	r3, r0
 8017162:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017164:	7bfb      	ldrb	r3, [r7, #15]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d008      	beq.n	801717c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801716a:	6839      	ldr	r1, [r7, #0]
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	f000 f962 	bl	8017436 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	2202      	movs	r2, #2
 8017176:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801717a:	e065      	b.n	8017248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	f000 fa31 	bl	80175e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2203      	movs	r2, #3
 8017186:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801718a:	e05d      	b.n	8017248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f000 fa29 	bl	80175e4 <USBD_CtlSendStatus>
      break;
 8017192:	e059      	b.n	8017248 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017194:	4b2f      	ldr	r3, [pc, #188]	@ (8017254 <USBD_SetConfig+0x150>)
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d112      	bne.n	80171c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	2202      	movs	r2, #2
 80171a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80171a4:	4b2b      	ldr	r3, [pc, #172]	@ (8017254 <USBD_SetConfig+0x150>)
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	461a      	mov	r2, r3
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80171ae:	4b29      	ldr	r3, [pc, #164]	@ (8017254 <USBD_SetConfig+0x150>)
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	4619      	mov	r1, r3
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f7fe ffa8 	bl	801610a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80171ba:	6878      	ldr	r0, [r7, #4]
 80171bc:	f000 fa12 	bl	80175e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80171c0:	e042      	b.n	8017248 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80171c2:	4b24      	ldr	r3, [pc, #144]	@ (8017254 <USBD_SetConfig+0x150>)
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	461a      	mov	r2, r3
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	685b      	ldr	r3, [r3, #4]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d02a      	beq.n	8017226 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	4619      	mov	r1, r3
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f7fe ff96 	bl	801610a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80171de:	4b1d      	ldr	r3, [pc, #116]	@ (8017254 <USBD_SetConfig+0x150>)
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	461a      	mov	r2, r3
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80171e8:	4b1a      	ldr	r3, [pc, #104]	@ (8017254 <USBD_SetConfig+0x150>)
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	4619      	mov	r1, r3
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	f7fe ff6f 	bl	80160d2 <USBD_SetClassConfig>
 80171f4:	4603      	mov	r3, r0
 80171f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80171f8:	7bfb      	ldrb	r3, [r7, #15]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d00f      	beq.n	801721e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80171fe:	6839      	ldr	r1, [r7, #0]
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f000 f918 	bl	8017436 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	685b      	ldr	r3, [r3, #4]
 801720a:	b2db      	uxtb	r3, r3
 801720c:	4619      	mov	r1, r3
 801720e:	6878      	ldr	r0, [r7, #4]
 8017210:	f7fe ff7b 	bl	801610a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2202      	movs	r2, #2
 8017218:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801721c:	e014      	b.n	8017248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801721e:	6878      	ldr	r0, [r7, #4]
 8017220:	f000 f9e0 	bl	80175e4 <USBD_CtlSendStatus>
      break;
 8017224:	e010      	b.n	8017248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017226:	6878      	ldr	r0, [r7, #4]
 8017228:	f000 f9dc 	bl	80175e4 <USBD_CtlSendStatus>
      break;
 801722c:	e00c      	b.n	8017248 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801722e:	6839      	ldr	r1, [r7, #0]
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f000 f900 	bl	8017436 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017236:	4b07      	ldr	r3, [pc, #28]	@ (8017254 <USBD_SetConfig+0x150>)
 8017238:	781b      	ldrb	r3, [r3, #0]
 801723a:	4619      	mov	r1, r3
 801723c:	6878      	ldr	r0, [r7, #4]
 801723e:	f7fe ff64 	bl	801610a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017242:	2303      	movs	r3, #3
 8017244:	73fb      	strb	r3, [r7, #15]
      break;
 8017246:	bf00      	nop
  }

  return ret;
 8017248:	7bfb      	ldrb	r3, [r7, #15]
}
 801724a:	4618      	mov	r0, r3
 801724c:	3710      	adds	r7, #16
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	2403140c 	.word	0x2403140c

08017258 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b082      	sub	sp, #8
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
 8017260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	88db      	ldrh	r3, [r3, #6]
 8017266:	2b01      	cmp	r3, #1
 8017268:	d004      	beq.n	8017274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801726a:	6839      	ldr	r1, [r7, #0]
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	f000 f8e2 	bl	8017436 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017272:	e023      	b.n	80172bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801727a:	b2db      	uxtb	r3, r3
 801727c:	2b02      	cmp	r3, #2
 801727e:	dc02      	bgt.n	8017286 <USBD_GetConfig+0x2e>
 8017280:	2b00      	cmp	r3, #0
 8017282:	dc03      	bgt.n	801728c <USBD_GetConfig+0x34>
 8017284:	e015      	b.n	80172b2 <USBD_GetConfig+0x5a>
 8017286:	2b03      	cmp	r3, #3
 8017288:	d00b      	beq.n	80172a2 <USBD_GetConfig+0x4a>
 801728a:	e012      	b.n	80172b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2200      	movs	r2, #0
 8017290:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	3308      	adds	r3, #8
 8017296:	2201      	movs	r2, #1
 8017298:	4619      	mov	r1, r3
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f000 f948 	bl	8017530 <USBD_CtlSendData>
        break;
 80172a0:	e00c      	b.n	80172bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	3304      	adds	r3, #4
 80172a6:	2201      	movs	r2, #1
 80172a8:	4619      	mov	r1, r3
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f000 f940 	bl	8017530 <USBD_CtlSendData>
        break;
 80172b0:	e004      	b.n	80172bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80172b2:	6839      	ldr	r1, [r7, #0]
 80172b4:	6878      	ldr	r0, [r7, #4]
 80172b6:	f000 f8be 	bl	8017436 <USBD_CtlError>
        break;
 80172ba:	bf00      	nop
}
 80172bc:	bf00      	nop
 80172be:	3708      	adds	r7, #8
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd80      	pop	{r7, pc}

080172c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b082      	sub	sp, #8
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
 80172cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80172d4:	b2db      	uxtb	r3, r3
 80172d6:	3b01      	subs	r3, #1
 80172d8:	2b02      	cmp	r3, #2
 80172da:	d81e      	bhi.n	801731a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	88db      	ldrh	r3, [r3, #6]
 80172e0:	2b02      	cmp	r3, #2
 80172e2:	d004      	beq.n	80172ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80172e4:	6839      	ldr	r1, [r7, #0]
 80172e6:	6878      	ldr	r0, [r7, #4]
 80172e8:	f000 f8a5 	bl	8017436 <USBD_CtlError>
        break;
 80172ec:	e01a      	b.n	8017324 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2201      	movs	r2, #1
 80172f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d005      	beq.n	801730a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	68db      	ldr	r3, [r3, #12]
 8017302:	f043 0202 	orr.w	r2, r3, #2
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	330c      	adds	r3, #12
 801730e:	2202      	movs	r2, #2
 8017310:	4619      	mov	r1, r3
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f000 f90c 	bl	8017530 <USBD_CtlSendData>
      break;
 8017318:	e004      	b.n	8017324 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801731a:	6839      	ldr	r1, [r7, #0]
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f000 f88a 	bl	8017436 <USBD_CtlError>
      break;
 8017322:	bf00      	nop
  }
}
 8017324:	bf00      	nop
 8017326:	3708      	adds	r7, #8
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b082      	sub	sp, #8
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	885b      	ldrh	r3, [r3, #2]
 801733a:	2b01      	cmp	r3, #1
 801733c:	d107      	bne.n	801734e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	2201      	movs	r2, #1
 8017342:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f000 f94c 	bl	80175e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801734c:	e013      	b.n	8017376 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801734e:	683b      	ldr	r3, [r7, #0]
 8017350:	885b      	ldrh	r3, [r3, #2]
 8017352:	2b02      	cmp	r3, #2
 8017354:	d10b      	bne.n	801736e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	889b      	ldrh	r3, [r3, #4]
 801735a:	0a1b      	lsrs	r3, r3, #8
 801735c:	b29b      	uxth	r3, r3
 801735e:	b2da      	uxtb	r2, r3
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f000 f93c 	bl	80175e4 <USBD_CtlSendStatus>
}
 801736c:	e003      	b.n	8017376 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801736e:	6839      	ldr	r1, [r7, #0]
 8017370:	6878      	ldr	r0, [r7, #4]
 8017372:	f000 f860 	bl	8017436 <USBD_CtlError>
}
 8017376:	bf00      	nop
 8017378:	3708      	adds	r7, #8
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}

0801737e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801737e:	b580      	push	{r7, lr}
 8017380:	b082      	sub	sp, #8
 8017382:	af00      	add	r7, sp, #0
 8017384:	6078      	str	r0, [r7, #4]
 8017386:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801738e:	b2db      	uxtb	r3, r3
 8017390:	3b01      	subs	r3, #1
 8017392:	2b02      	cmp	r3, #2
 8017394:	d80b      	bhi.n	80173ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	885b      	ldrh	r3, [r3, #2]
 801739a:	2b01      	cmp	r3, #1
 801739c:	d10c      	bne.n	80173b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2200      	movs	r2, #0
 80173a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f000 f91c 	bl	80175e4 <USBD_CtlSendStatus>
      }
      break;
 80173ac:	e004      	b.n	80173b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80173ae:	6839      	ldr	r1, [r7, #0]
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	f000 f840 	bl	8017436 <USBD_CtlError>
      break;
 80173b6:	e000      	b.n	80173ba <USBD_ClrFeature+0x3c>
      break;
 80173b8:	bf00      	nop
  }
}
 80173ba:	bf00      	nop
 80173bc:	3708      	adds	r7, #8
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}

080173c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80173c2:	b580      	push	{r7, lr}
 80173c4:	b084      	sub	sp, #16
 80173c6:	af00      	add	r7, sp, #0
 80173c8:	6078      	str	r0, [r7, #4]
 80173ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	781a      	ldrb	r2, [r3, #0]
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	3301      	adds	r3, #1
 80173dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	781a      	ldrb	r2, [r3, #0]
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	3301      	adds	r3, #1
 80173ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80173ec:	68f8      	ldr	r0, [r7, #12]
 80173ee:	f7ff fa16 	bl	801681e <SWAPBYTE>
 80173f2:	4603      	mov	r3, r0
 80173f4:	461a      	mov	r2, r3
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	3301      	adds	r3, #1
 80173fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	3301      	adds	r3, #1
 8017404:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017406:	68f8      	ldr	r0, [r7, #12]
 8017408:	f7ff fa09 	bl	801681e <SWAPBYTE>
 801740c:	4603      	mov	r3, r0
 801740e:	461a      	mov	r2, r3
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	3301      	adds	r3, #1
 8017418:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	3301      	adds	r3, #1
 801741e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017420:	68f8      	ldr	r0, [r7, #12]
 8017422:	f7ff f9fc 	bl	801681e <SWAPBYTE>
 8017426:	4603      	mov	r3, r0
 8017428:	461a      	mov	r2, r3
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	80da      	strh	r2, [r3, #6]
}
 801742e:	bf00      	nop
 8017430:	3710      	adds	r7, #16
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}

08017436 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017436:	b580      	push	{r7, lr}
 8017438:	b082      	sub	sp, #8
 801743a:	af00      	add	r7, sp, #0
 801743c:	6078      	str	r0, [r7, #4]
 801743e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017440:	2180      	movs	r1, #128	@ 0x80
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	f000 fd2c 	bl	8017ea0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017448:	2100      	movs	r1, #0
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 fd28 	bl	8017ea0 <USBD_LL_StallEP>
}
 8017450:	bf00      	nop
 8017452:	3708      	adds	r7, #8
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}

08017458 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b086      	sub	sp, #24
 801745c:	af00      	add	r7, sp, #0
 801745e:	60f8      	str	r0, [r7, #12]
 8017460:	60b9      	str	r1, [r7, #8]
 8017462:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017464:	2300      	movs	r3, #0
 8017466:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d042      	beq.n	80174f4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8017472:	6938      	ldr	r0, [r7, #16]
 8017474:	f000 f842 	bl	80174fc <USBD_GetLen>
 8017478:	4603      	mov	r3, r0
 801747a:	3301      	adds	r3, #1
 801747c:	005b      	lsls	r3, r3, #1
 801747e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017482:	d808      	bhi.n	8017496 <USBD_GetString+0x3e>
 8017484:	6938      	ldr	r0, [r7, #16]
 8017486:	f000 f839 	bl	80174fc <USBD_GetLen>
 801748a:	4603      	mov	r3, r0
 801748c:	3301      	adds	r3, #1
 801748e:	b29b      	uxth	r3, r3
 8017490:	005b      	lsls	r3, r3, #1
 8017492:	b29a      	uxth	r2, r3
 8017494:	e001      	b.n	801749a <USBD_GetString+0x42>
 8017496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801749e:	7dfb      	ldrb	r3, [r7, #23]
 80174a0:	68ba      	ldr	r2, [r7, #8]
 80174a2:	4413      	add	r3, r2
 80174a4:	687a      	ldr	r2, [r7, #4]
 80174a6:	7812      	ldrb	r2, [r2, #0]
 80174a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80174aa:	7dfb      	ldrb	r3, [r7, #23]
 80174ac:	3301      	adds	r3, #1
 80174ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80174b0:	7dfb      	ldrb	r3, [r7, #23]
 80174b2:	68ba      	ldr	r2, [r7, #8]
 80174b4:	4413      	add	r3, r2
 80174b6:	2203      	movs	r2, #3
 80174b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80174ba:	7dfb      	ldrb	r3, [r7, #23]
 80174bc:	3301      	adds	r3, #1
 80174be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80174c0:	e013      	b.n	80174ea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80174c2:	7dfb      	ldrb	r3, [r7, #23]
 80174c4:	68ba      	ldr	r2, [r7, #8]
 80174c6:	4413      	add	r3, r2
 80174c8:	693a      	ldr	r2, [r7, #16]
 80174ca:	7812      	ldrb	r2, [r2, #0]
 80174cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80174ce:	693b      	ldr	r3, [r7, #16]
 80174d0:	3301      	adds	r3, #1
 80174d2:	613b      	str	r3, [r7, #16]
    idx++;
 80174d4:	7dfb      	ldrb	r3, [r7, #23]
 80174d6:	3301      	adds	r3, #1
 80174d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80174da:	7dfb      	ldrb	r3, [r7, #23]
 80174dc:	68ba      	ldr	r2, [r7, #8]
 80174de:	4413      	add	r3, r2
 80174e0:	2200      	movs	r2, #0
 80174e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80174e4:	7dfb      	ldrb	r3, [r7, #23]
 80174e6:	3301      	adds	r3, #1
 80174e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	781b      	ldrb	r3, [r3, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d1e7      	bne.n	80174c2 <USBD_GetString+0x6a>
 80174f2:	e000      	b.n	80174f6 <USBD_GetString+0x9e>
    return;
 80174f4:	bf00      	nop
  }
}
 80174f6:	3718      	adds	r7, #24
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}

080174fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80174fc:	b480      	push	{r7}
 80174fe:	b085      	sub	sp, #20
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017504:	2300      	movs	r3, #0
 8017506:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801750c:	e005      	b.n	801751a <USBD_GetLen+0x1e>
  {
    len++;
 801750e:	7bfb      	ldrb	r3, [r7, #15]
 8017510:	3301      	adds	r3, #1
 8017512:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	3301      	adds	r3, #1
 8017518:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d1f5      	bne.n	801750e <USBD_GetLen+0x12>
  }

  return len;
 8017522:	7bfb      	ldrb	r3, [r7, #15]
}
 8017524:	4618      	mov	r0, r3
 8017526:	3714      	adds	r7, #20
 8017528:	46bd      	mov	sp, r7
 801752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752e:	4770      	bx	lr

08017530 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b084      	sub	sp, #16
 8017534:	af00      	add	r7, sp, #0
 8017536:	60f8      	str	r0, [r7, #12]
 8017538:	60b9      	str	r1, [r7, #8]
 801753a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	2202      	movs	r2, #2
 8017540:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	687a      	ldr	r2, [r7, #4]
 8017548:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	687a      	ldr	r2, [r7, #4]
 801754e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	68ba      	ldr	r2, [r7, #8]
 8017554:	2100      	movs	r1, #0
 8017556:	68f8      	ldr	r0, [r7, #12]
 8017558:	f000 fd2b 	bl	8017fb2 <USBD_LL_Transmit>

  return USBD_OK;
 801755c:	2300      	movs	r3, #0
}
 801755e:	4618      	mov	r0, r3
 8017560:	3710      	adds	r7, #16
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}

08017566 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017566:	b580      	push	{r7, lr}
 8017568:	b084      	sub	sp, #16
 801756a:	af00      	add	r7, sp, #0
 801756c:	60f8      	str	r0, [r7, #12]
 801756e:	60b9      	str	r1, [r7, #8]
 8017570:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	68ba      	ldr	r2, [r7, #8]
 8017576:	2100      	movs	r1, #0
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f000 fd1a 	bl	8017fb2 <USBD_LL_Transmit>

  return USBD_OK;
 801757e:	2300      	movs	r3, #0
}
 8017580:	4618      	mov	r0, r3
 8017582:	3710      	adds	r7, #16
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}

08017588 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b084      	sub	sp, #16
 801758c:	af00      	add	r7, sp, #0
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	2203      	movs	r2, #3
 8017598:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	687a      	ldr	r2, [r7, #4]
 80175a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	68ba      	ldr	r2, [r7, #8]
 80175b0:	2100      	movs	r1, #0
 80175b2:	68f8      	ldr	r0, [r7, #12]
 80175b4:	f000 fd1e 	bl	8017ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80175b8:	2300      	movs	r3, #0
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3710      	adds	r7, #16
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}

080175c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80175c2:	b580      	push	{r7, lr}
 80175c4:	b084      	sub	sp, #16
 80175c6:	af00      	add	r7, sp, #0
 80175c8:	60f8      	str	r0, [r7, #12]
 80175ca:	60b9      	str	r1, [r7, #8]
 80175cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	68ba      	ldr	r2, [r7, #8]
 80175d2:	2100      	movs	r1, #0
 80175d4:	68f8      	ldr	r0, [r7, #12]
 80175d6:	f000 fd0d 	bl	8017ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80175da:	2300      	movs	r3, #0
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3710      	adds	r7, #16
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b082      	sub	sp, #8
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2204      	movs	r2, #4
 80175f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80175f4:	2300      	movs	r3, #0
 80175f6:	2200      	movs	r2, #0
 80175f8:	2100      	movs	r1, #0
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f000 fcd9 	bl	8017fb2 <USBD_LL_Transmit>

  return USBD_OK;
 8017600:	2300      	movs	r3, #0
}
 8017602:	4618      	mov	r0, r3
 8017604:	3708      	adds	r7, #8
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}

0801760a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801760a:	b580      	push	{r7, lr}
 801760c:	b082      	sub	sp, #8
 801760e:	af00      	add	r7, sp, #0
 8017610:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	2205      	movs	r2, #5
 8017616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801761a:	2300      	movs	r3, #0
 801761c:	2200      	movs	r2, #0
 801761e:	2100      	movs	r1, #0
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f000 fce7 	bl	8017ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017626:	2300      	movs	r3, #0
}
 8017628:	4618      	mov	r0, r3
 801762a:	3708      	adds	r7, #8
 801762c:	46bd      	mov	sp, r7
 801762e:	bd80      	pop	{r7, pc}

08017630 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017634:	2200      	movs	r2, #0
 8017636:	4918      	ldr	r1, [pc, #96]	@ (8017698 <MX_USB_DEVICE_Init+0x68>)
 8017638:	4818      	ldr	r0, [pc, #96]	@ (801769c <MX_USB_DEVICE_Init+0x6c>)
 801763a:	f7fe fccd 	bl	8015fd8 <USBD_Init>
 801763e:	4603      	mov	r3, r0
 8017640:	2b00      	cmp	r3, #0
 8017642:	d001      	beq.n	8017648 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017644:	f7ea f938 	bl	80018b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017648:	4915      	ldr	r1, [pc, #84]	@ (80176a0 <MX_USB_DEVICE_Init+0x70>)
 801764a:	4814      	ldr	r0, [pc, #80]	@ (801769c <MX_USB_DEVICE_Init+0x6c>)
 801764c:	f7fe fcf4 	bl	8016038 <USBD_RegisterClass>
 8017650:	4603      	mov	r3, r0
 8017652:	2b00      	cmp	r3, #0
 8017654:	d001      	beq.n	801765a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017656:	f7ea f92f 	bl	80018b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801765a:	4912      	ldr	r1, [pc, #72]	@ (80176a4 <MX_USB_DEVICE_Init+0x74>)
 801765c:	480f      	ldr	r0, [pc, #60]	@ (801769c <MX_USB_DEVICE_Init+0x6c>)
 801765e:	f7fe fbeb 	bl	8015e38 <USBD_CDC_RegisterInterface>
 8017662:	4603      	mov	r3, r0
 8017664:	2b00      	cmp	r3, #0
 8017666:	d001      	beq.n	801766c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017668:	f7ea f926 	bl	80018b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801766c:	480b      	ldr	r0, [pc, #44]	@ (801769c <MX_USB_DEVICE_Init+0x6c>)
 801766e:	f7fe fd19 	bl	80160a4 <USBD_Start>
 8017672:	4603      	mov	r3, r0
 8017674:	2b00      	cmp	r3, #0
 8017676:	d001      	beq.n	801767c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017678:	f7ea f91e 	bl	80018b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801767c:	f7f5 fff6 	bl	800d66c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8017680:	4b06      	ldr	r3, [pc, #24]	@ (801769c <MX_USB_DEVICE_Init+0x6c>)
 8017682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017686:	4a05      	ldr	r2, [pc, #20]	@ (801769c <MX_USB_DEVICE_Init+0x6c>)
 8017688:	33b0      	adds	r3, #176	@ 0xb0
 801768a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801768e:	4a06      	ldr	r2, [pc, #24]	@ (80176a8 <MX_USB_DEVICE_Init+0x78>)
 8017690:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017692:	bf00      	nop
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	240002c4 	.word	0x240002c4
 801769c:	24031410 	.word	0x24031410
 80176a0:	24000230 	.word	0x24000230
 80176a4:	240002b0 	.word	0x240002b0
 80176a8:	240316ec 	.word	0x240316ec

080176ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80176b0:	2200      	movs	r2, #0
 80176b2:	4905      	ldr	r1, [pc, #20]	@ (80176c8 <CDC_Init_FS+0x1c>)
 80176b4:	4805      	ldr	r0, [pc, #20]	@ (80176cc <CDC_Init_FS+0x20>)
 80176b6:	f7fe fbd9 	bl	8015e6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80176ba:	4905      	ldr	r1, [pc, #20]	@ (80176d0 <CDC_Init_FS+0x24>)
 80176bc:	4803      	ldr	r0, [pc, #12]	@ (80176cc <CDC_Init_FS+0x20>)
 80176be:	f7fe fbf7 	bl	8015eb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80176c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	bd80      	pop	{r7, pc}
 80176c8:	24031ef0 	.word	0x24031ef0
 80176cc:	24031410 	.word	0x24031410
 80176d0:	240316f0 	.word	0x240316f0

080176d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80176d4:	b480      	push	{r7}
 80176d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80176d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80176da:	4618      	mov	r0, r3
 80176dc:	46bd      	mov	sp, r7
 80176de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e2:	4770      	bx	lr

080176e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80176e4:	b480      	push	{r7}
 80176e6:	b083      	sub	sp, #12
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	4603      	mov	r3, r0
 80176ec:	6039      	str	r1, [r7, #0]
 80176ee:	71fb      	strb	r3, [r7, #7]
 80176f0:	4613      	mov	r3, r2
 80176f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80176f4:	79fb      	ldrb	r3, [r7, #7]
 80176f6:	2b23      	cmp	r3, #35	@ 0x23
 80176f8:	d84a      	bhi.n	8017790 <CDC_Control_FS+0xac>
 80176fa:	a201      	add	r2, pc, #4	@ (adr r2, 8017700 <CDC_Control_FS+0x1c>)
 80176fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017700:	08017791 	.word	0x08017791
 8017704:	08017791 	.word	0x08017791
 8017708:	08017791 	.word	0x08017791
 801770c:	08017791 	.word	0x08017791
 8017710:	08017791 	.word	0x08017791
 8017714:	08017791 	.word	0x08017791
 8017718:	08017791 	.word	0x08017791
 801771c:	08017791 	.word	0x08017791
 8017720:	08017791 	.word	0x08017791
 8017724:	08017791 	.word	0x08017791
 8017728:	08017791 	.word	0x08017791
 801772c:	08017791 	.word	0x08017791
 8017730:	08017791 	.word	0x08017791
 8017734:	08017791 	.word	0x08017791
 8017738:	08017791 	.word	0x08017791
 801773c:	08017791 	.word	0x08017791
 8017740:	08017791 	.word	0x08017791
 8017744:	08017791 	.word	0x08017791
 8017748:	08017791 	.word	0x08017791
 801774c:	08017791 	.word	0x08017791
 8017750:	08017791 	.word	0x08017791
 8017754:	08017791 	.word	0x08017791
 8017758:	08017791 	.word	0x08017791
 801775c:	08017791 	.word	0x08017791
 8017760:	08017791 	.word	0x08017791
 8017764:	08017791 	.word	0x08017791
 8017768:	08017791 	.word	0x08017791
 801776c:	08017791 	.word	0x08017791
 8017770:	08017791 	.word	0x08017791
 8017774:	08017791 	.word	0x08017791
 8017778:	08017791 	.word	0x08017791
 801777c:	08017791 	.word	0x08017791
 8017780:	08017791 	.word	0x08017791
 8017784:	08017791 	.word	0x08017791
 8017788:	08017791 	.word	0x08017791
 801778c:	08017791 	.word	0x08017791
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017790:	bf00      	nop
  }

  return (USBD_OK);
 8017792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017794:	4618      	mov	r0, r3
 8017796:	370c      	adds	r7, #12
 8017798:	46bd      	mov	sp, r7
 801779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779e:	4770      	bx	lr

080177a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b082      	sub	sp, #8
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]
 80177a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80177aa:	6879      	ldr	r1, [r7, #4]
 80177ac:	480a      	ldr	r0, [pc, #40]	@ (80177d8 <CDC_Receive_FS+0x38>)
 80177ae:	f7fe fb7f 	bl	8015eb0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80177b2:	4809      	ldr	r0, [pc, #36]	@ (80177d8 <CDC_Receive_FS+0x38>)
 80177b4:	f7fe fbda 	bl	8015f6c <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 80177b8:	4b08      	ldr	r3, [pc, #32]	@ (80177dc <CDC_Receive_FS+0x3c>)
 80177ba:	2201      	movs	r2, #1
 80177bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	b29a      	uxth	r2, r3
 80177c4:	2364      	movs	r3, #100	@ 0x64
 80177c6:	6879      	ldr	r1, [r7, #4]
 80177c8:	4805      	ldr	r0, [pc, #20]	@ (80177e0 <CDC_Receive_FS+0x40>)
 80177ca:	f7fa fc3e 	bl	801204a <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 80177ce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3708      	adds	r7, #8
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}
 80177d8:	24031410 	.word	0x24031410
 80177dc:	24031400 	.word	0x24031400
 80177e0:	24000828 	.word	0x24000828

080177e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b084      	sub	sp, #16
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	460b      	mov	r3, r1
 80177ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80177f0:	2300      	movs	r3, #0
 80177f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80177f4:	4b0d      	ldr	r3, [pc, #52]	@ (801782c <CDC_Transmit_FS+0x48>)
 80177f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80177fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017802:	2b00      	cmp	r3, #0
 8017804:	d001      	beq.n	801780a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017806:	2301      	movs	r3, #1
 8017808:	e00b      	b.n	8017822 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801780a:	887b      	ldrh	r3, [r7, #2]
 801780c:	461a      	mov	r2, r3
 801780e:	6879      	ldr	r1, [r7, #4]
 8017810:	4806      	ldr	r0, [pc, #24]	@ (801782c <CDC_Transmit_FS+0x48>)
 8017812:	f7fe fb2b 	bl	8015e6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017816:	4805      	ldr	r0, [pc, #20]	@ (801782c <CDC_Transmit_FS+0x48>)
 8017818:	f7fe fb68 	bl	8015eec <USBD_CDC_TransmitPacket>
 801781c:	4603      	mov	r3, r0
 801781e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017820:	7bfb      	ldrb	r3, [r7, #15]
}
 8017822:	4618      	mov	r0, r3
 8017824:	3710      	adds	r7, #16
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
 801782a:	bf00      	nop
 801782c:	24031410 	.word	0x24031410

08017830 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017830:	b480      	push	{r7}
 8017832:	b087      	sub	sp, #28
 8017834:	af00      	add	r7, sp, #0
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	60b9      	str	r1, [r7, #8]
 801783a:	4613      	mov	r3, r2
 801783c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801783e:	2300      	movs	r3, #0
 8017840:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017846:	4618      	mov	r0, r3
 8017848:	371c      	adds	r7, #28
 801784a:	46bd      	mov	sp, r7
 801784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017850:	4770      	bx	lr
	...

08017854 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017854:	b480      	push	{r7}
 8017856:	b083      	sub	sp, #12
 8017858:	af00      	add	r7, sp, #0
 801785a:	4603      	mov	r3, r0
 801785c:	6039      	str	r1, [r7, #0]
 801785e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	2212      	movs	r2, #18
 8017864:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017866:	4b03      	ldr	r3, [pc, #12]	@ (8017874 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017868:	4618      	mov	r0, r3
 801786a:	370c      	adds	r7, #12
 801786c:	46bd      	mov	sp, r7
 801786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017872:	4770      	bx	lr
 8017874:	240002e4 	.word	0x240002e4

08017878 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017878:	b480      	push	{r7}
 801787a:	b083      	sub	sp, #12
 801787c:	af00      	add	r7, sp, #0
 801787e:	4603      	mov	r3, r0
 8017880:	6039      	str	r1, [r7, #0]
 8017882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017884:	683b      	ldr	r3, [r7, #0]
 8017886:	2204      	movs	r2, #4
 8017888:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801788a:	4b03      	ldr	r3, [pc, #12]	@ (8017898 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801788c:	4618      	mov	r0, r3
 801788e:	370c      	adds	r7, #12
 8017890:	46bd      	mov	sp, r7
 8017892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017896:	4770      	bx	lr
 8017898:	240002f8 	.word	0x240002f8

0801789c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b082      	sub	sp, #8
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	4603      	mov	r3, r0
 80178a4:	6039      	str	r1, [r7, #0]
 80178a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80178a8:	79fb      	ldrb	r3, [r7, #7]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d105      	bne.n	80178ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80178ae:	683a      	ldr	r2, [r7, #0]
 80178b0:	4907      	ldr	r1, [pc, #28]	@ (80178d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80178b2:	4808      	ldr	r0, [pc, #32]	@ (80178d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80178b4:	f7ff fdd0 	bl	8017458 <USBD_GetString>
 80178b8:	e004      	b.n	80178c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80178ba:	683a      	ldr	r2, [r7, #0]
 80178bc:	4904      	ldr	r1, [pc, #16]	@ (80178d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80178be:	4805      	ldr	r0, [pc, #20]	@ (80178d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80178c0:	f7ff fdca 	bl	8017458 <USBD_GetString>
  }
  return USBD_StrDesc;
 80178c4:	4b02      	ldr	r3, [pc, #8]	@ (80178d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80178c6:	4618      	mov	r0, r3
 80178c8:	3708      	adds	r7, #8
 80178ca:	46bd      	mov	sp, r7
 80178cc:	bd80      	pop	{r7, pc}
 80178ce:	bf00      	nop
 80178d0:	240326f0 	.word	0x240326f0
 80178d4:	08018ac4 	.word	0x08018ac4

080178d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	4603      	mov	r3, r0
 80178e0:	6039      	str	r1, [r7, #0]
 80178e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80178e4:	683a      	ldr	r2, [r7, #0]
 80178e6:	4904      	ldr	r1, [pc, #16]	@ (80178f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80178e8:	4804      	ldr	r0, [pc, #16]	@ (80178fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80178ea:	f7ff fdb5 	bl	8017458 <USBD_GetString>
  return USBD_StrDesc;
 80178ee:	4b02      	ldr	r3, [pc, #8]	@ (80178f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	240326f0 	.word	0x240326f0
 80178fc:	08018adc 	.word	0x08018adc

08017900 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	4603      	mov	r3, r0
 8017908:	6039      	str	r1, [r7, #0]
 801790a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801790c:	683b      	ldr	r3, [r7, #0]
 801790e:	221a      	movs	r2, #26
 8017910:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017912:	f000 f843 	bl	801799c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017916:	4b02      	ldr	r3, [pc, #8]	@ (8017920 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017918:	4618      	mov	r0, r3
 801791a:	3708      	adds	r7, #8
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}
 8017920:	240002fc 	.word	0x240002fc

08017924 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	af00      	add	r7, sp, #0
 801792a:	4603      	mov	r3, r0
 801792c:	6039      	str	r1, [r7, #0]
 801792e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017930:	79fb      	ldrb	r3, [r7, #7]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d105      	bne.n	8017942 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017936:	683a      	ldr	r2, [r7, #0]
 8017938:	4907      	ldr	r1, [pc, #28]	@ (8017958 <USBD_FS_ConfigStrDescriptor+0x34>)
 801793a:	4808      	ldr	r0, [pc, #32]	@ (801795c <USBD_FS_ConfigStrDescriptor+0x38>)
 801793c:	f7ff fd8c 	bl	8017458 <USBD_GetString>
 8017940:	e004      	b.n	801794c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017942:	683a      	ldr	r2, [r7, #0]
 8017944:	4904      	ldr	r1, [pc, #16]	@ (8017958 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017946:	4805      	ldr	r0, [pc, #20]	@ (801795c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017948:	f7ff fd86 	bl	8017458 <USBD_GetString>
  }
  return USBD_StrDesc;
 801794c:	4b02      	ldr	r3, [pc, #8]	@ (8017958 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801794e:	4618      	mov	r0, r3
 8017950:	3708      	adds	r7, #8
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}
 8017956:	bf00      	nop
 8017958:	240326f0 	.word	0x240326f0
 801795c:	08018af0 	.word	0x08018af0

08017960 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	4603      	mov	r3, r0
 8017968:	6039      	str	r1, [r7, #0]
 801796a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801796c:	79fb      	ldrb	r3, [r7, #7]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d105      	bne.n	801797e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017972:	683a      	ldr	r2, [r7, #0]
 8017974:	4907      	ldr	r1, [pc, #28]	@ (8017994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017976:	4808      	ldr	r0, [pc, #32]	@ (8017998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017978:	f7ff fd6e 	bl	8017458 <USBD_GetString>
 801797c:	e004      	b.n	8017988 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801797e:	683a      	ldr	r2, [r7, #0]
 8017980:	4904      	ldr	r1, [pc, #16]	@ (8017994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017982:	4805      	ldr	r0, [pc, #20]	@ (8017998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017984:	f7ff fd68 	bl	8017458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017988:	4b02      	ldr	r3, [pc, #8]	@ (8017994 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801798a:	4618      	mov	r0, r3
 801798c:	3708      	adds	r7, #8
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	240326f0 	.word	0x240326f0
 8017998:	08018afc 	.word	0x08018afc

0801799c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b084      	sub	sp, #16
 80179a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80179a2:	4b0f      	ldr	r3, [pc, #60]	@ (80179e0 <Get_SerialNum+0x44>)
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80179a8:	4b0e      	ldr	r3, [pc, #56]	@ (80179e4 <Get_SerialNum+0x48>)
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80179ae:	4b0e      	ldr	r3, [pc, #56]	@ (80179e8 <Get_SerialNum+0x4c>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80179b4:	68fa      	ldr	r2, [r7, #12]
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	4413      	add	r3, r2
 80179ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d009      	beq.n	80179d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80179c2:	2208      	movs	r2, #8
 80179c4:	4909      	ldr	r1, [pc, #36]	@ (80179ec <Get_SerialNum+0x50>)
 80179c6:	68f8      	ldr	r0, [r7, #12]
 80179c8:	f000 f814 	bl	80179f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80179cc:	2204      	movs	r2, #4
 80179ce:	4908      	ldr	r1, [pc, #32]	@ (80179f0 <Get_SerialNum+0x54>)
 80179d0:	68b8      	ldr	r0, [r7, #8]
 80179d2:	f000 f80f 	bl	80179f4 <IntToUnicode>
  }
}
 80179d6:	bf00      	nop
 80179d8:	3710      	adds	r7, #16
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}
 80179de:	bf00      	nop
 80179e0:	1ff1e800 	.word	0x1ff1e800
 80179e4:	1ff1e804 	.word	0x1ff1e804
 80179e8:	1ff1e808 	.word	0x1ff1e808
 80179ec:	240002fe 	.word	0x240002fe
 80179f0:	2400030e 	.word	0x2400030e

080179f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80179f4:	b480      	push	{r7}
 80179f6:	b087      	sub	sp, #28
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	60f8      	str	r0, [r7, #12]
 80179fc:	60b9      	str	r1, [r7, #8]
 80179fe:	4613      	mov	r3, r2
 8017a00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017a02:	2300      	movs	r3, #0
 8017a04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017a06:	2300      	movs	r3, #0
 8017a08:	75fb      	strb	r3, [r7, #23]
 8017a0a:	e027      	b.n	8017a5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	0f1b      	lsrs	r3, r3, #28
 8017a10:	2b09      	cmp	r3, #9
 8017a12:	d80b      	bhi.n	8017a2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	0f1b      	lsrs	r3, r3, #28
 8017a18:	b2da      	uxtb	r2, r3
 8017a1a:	7dfb      	ldrb	r3, [r7, #23]
 8017a1c:	005b      	lsls	r3, r3, #1
 8017a1e:	4619      	mov	r1, r3
 8017a20:	68bb      	ldr	r3, [r7, #8]
 8017a22:	440b      	add	r3, r1
 8017a24:	3230      	adds	r2, #48	@ 0x30
 8017a26:	b2d2      	uxtb	r2, r2
 8017a28:	701a      	strb	r2, [r3, #0]
 8017a2a:	e00a      	b.n	8017a42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	0f1b      	lsrs	r3, r3, #28
 8017a30:	b2da      	uxtb	r2, r3
 8017a32:	7dfb      	ldrb	r3, [r7, #23]
 8017a34:	005b      	lsls	r3, r3, #1
 8017a36:	4619      	mov	r1, r3
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	440b      	add	r3, r1
 8017a3c:	3237      	adds	r2, #55	@ 0x37
 8017a3e:	b2d2      	uxtb	r2, r2
 8017a40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	011b      	lsls	r3, r3, #4
 8017a46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017a48:	7dfb      	ldrb	r3, [r7, #23]
 8017a4a:	005b      	lsls	r3, r3, #1
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	68ba      	ldr	r2, [r7, #8]
 8017a50:	4413      	add	r3, r2
 8017a52:	2200      	movs	r2, #0
 8017a54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017a56:	7dfb      	ldrb	r3, [r7, #23]
 8017a58:	3301      	adds	r3, #1
 8017a5a:	75fb      	strb	r3, [r7, #23]
 8017a5c:	7dfa      	ldrb	r2, [r7, #23]
 8017a5e:	79fb      	ldrb	r3, [r7, #7]
 8017a60:	429a      	cmp	r2, r3
 8017a62:	d3d3      	bcc.n	8017a0c <IntToUnicode+0x18>
  }
}
 8017a64:	bf00      	nop
 8017a66:	bf00      	nop
 8017a68:	371c      	adds	r7, #28
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a70:	4770      	bx	lr
	...

08017a74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b0ba      	sub	sp, #232	@ 0xe8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017a80:	2200      	movs	r2, #0
 8017a82:	601a      	str	r2, [r3, #0]
 8017a84:	605a      	str	r2, [r3, #4]
 8017a86:	609a      	str	r2, [r3, #8]
 8017a88:	60da      	str	r2, [r3, #12]
 8017a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017a8c:	f107 0310 	add.w	r3, r7, #16
 8017a90:	22c0      	movs	r2, #192	@ 0xc0
 8017a92:	2100      	movs	r1, #0
 8017a94:	4618      	mov	r0, r3
 8017a96:	f000 fb47 	bl	8018128 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8017b50 <HAL_PCD_MspInit+0xdc>)
 8017aa0:	4293      	cmp	r3, r2
 8017aa2:	d151      	bne.n	8017b48 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017aa4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017aa8:	f04f 0300 	mov.w	r3, #0
 8017aac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8017ab0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017ab8:	f107 0310 	add.w	r3, r7, #16
 8017abc:	4618      	mov	r0, r3
 8017abe:	f7f6 fdcb 	bl	800e658 <HAL_RCCEx_PeriphCLKConfig>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d001      	beq.n	8017acc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017ac8:	f7e9 fef6 	bl	80018b8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017acc:	f7f5 fdce 	bl	800d66c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ad0:	4b20      	ldr	r3, [pc, #128]	@ (8017b54 <HAL_PCD_MspInit+0xe0>)
 8017ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8017b54 <HAL_PCD_MspInit+0xe0>)
 8017ad8:	f043 0301 	orr.w	r3, r3, #1
 8017adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8017b54 <HAL_PCD_MspInit+0xe0>)
 8017ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017ae6:	f003 0301 	and.w	r3, r3, #1
 8017aea:	60fb      	str	r3, [r7, #12]
 8017aec:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017aee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017af6:	2302      	movs	r3, #2
 8017af8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017afc:	2300      	movs	r3, #0
 8017afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b02:	2300      	movs	r3, #0
 8017b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017b08:	230a      	movs	r3, #10
 8017b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017b0e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017b12:	4619      	mov	r1, r3
 8017b14:	4810      	ldr	r0, [pc, #64]	@ (8017b58 <HAL_PCD_MspInit+0xe4>)
 8017b16:	f7ef fa1b 	bl	8006f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8017b54 <HAL_PCD_MspInit+0xe0>)
 8017b1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017b20:	4a0c      	ldr	r2, [pc, #48]	@ (8017b54 <HAL_PCD_MspInit+0xe0>)
 8017b22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017b26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8017b54 <HAL_PCD_MspInit+0xe0>)
 8017b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017b34:	60bb      	str	r3, [r7, #8]
 8017b36:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017b38:	2200      	movs	r2, #0
 8017b3a:	2100      	movs	r1, #0
 8017b3c:	2065      	movs	r0, #101	@ 0x65
 8017b3e:	f7ec fb04 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017b42:	2065      	movs	r0, #101	@ 0x65
 8017b44:	f7ec fb1b 	bl	800417e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017b48:	bf00      	nop
 8017b4a:	37e8      	adds	r7, #232	@ 0xe8
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	40080000 	.word	0x40080000
 8017b54:	58024400 	.word	0x58024400
 8017b58:	58020000 	.word	0x58020000

08017b5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b082      	sub	sp, #8
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017b70:	4619      	mov	r1, r3
 8017b72:	4610      	mov	r0, r2
 8017b74:	f7fe fae3 	bl	801613e <USBD_LL_SetupStage>
}
 8017b78:	bf00      	nop
 8017b7a:	3708      	adds	r7, #8
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}

08017b80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b082      	sub	sp, #8
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	460b      	mov	r3, r1
 8017b8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017b92:	78fa      	ldrb	r2, [r7, #3]
 8017b94:	6879      	ldr	r1, [r7, #4]
 8017b96:	4613      	mov	r3, r2
 8017b98:	00db      	lsls	r3, r3, #3
 8017b9a:	4413      	add	r3, r2
 8017b9c:	009b      	lsls	r3, r3, #2
 8017b9e:	440b      	add	r3, r1
 8017ba0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017ba4:	681a      	ldr	r2, [r3, #0]
 8017ba6:	78fb      	ldrb	r3, [r7, #3]
 8017ba8:	4619      	mov	r1, r3
 8017baa:	f7fe fb1d 	bl	80161e8 <USBD_LL_DataOutStage>
}
 8017bae:	bf00      	nop
 8017bb0:	3708      	adds	r7, #8
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}

08017bb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bb6:	b580      	push	{r7, lr}
 8017bb8:	b082      	sub	sp, #8
 8017bba:	af00      	add	r7, sp, #0
 8017bbc:	6078      	str	r0, [r7, #4]
 8017bbe:	460b      	mov	r3, r1
 8017bc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017bc8:	78fa      	ldrb	r2, [r7, #3]
 8017bca:	6879      	ldr	r1, [r7, #4]
 8017bcc:	4613      	mov	r3, r2
 8017bce:	00db      	lsls	r3, r3, #3
 8017bd0:	4413      	add	r3, r2
 8017bd2:	009b      	lsls	r3, r3, #2
 8017bd4:	440b      	add	r3, r1
 8017bd6:	3320      	adds	r3, #32
 8017bd8:	681a      	ldr	r2, [r3, #0]
 8017bda:	78fb      	ldrb	r3, [r7, #3]
 8017bdc:	4619      	mov	r1, r3
 8017bde:	f7fe fbb6 	bl	801634e <USBD_LL_DataInStage>
}
 8017be2:	bf00      	nop
 8017be4:	3708      	adds	r7, #8
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}

08017bea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bea:	b580      	push	{r7, lr}
 8017bec:	b082      	sub	sp, #8
 8017bee:	af00      	add	r7, sp, #0
 8017bf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7fe fcf0 	bl	80165de <USBD_LL_SOF>
}
 8017bfe:	bf00      	nop
 8017c00:	3708      	adds	r7, #8
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}

08017c06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c06:	b580      	push	{r7, lr}
 8017c08:	b084      	sub	sp, #16
 8017c0a:	af00      	add	r7, sp, #0
 8017c0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017c0e:	2301      	movs	r3, #1
 8017c10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	79db      	ldrb	r3, [r3, #7]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d102      	bne.n	8017c20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	73fb      	strb	r3, [r7, #15]
 8017c1e:	e008      	b.n	8017c32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	79db      	ldrb	r3, [r3, #7]
 8017c24:	2b02      	cmp	r3, #2
 8017c26:	d102      	bne.n	8017c2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017c28:	2301      	movs	r3, #1
 8017c2a:	73fb      	strb	r3, [r7, #15]
 8017c2c:	e001      	b.n	8017c32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017c2e:	f7e9 fe43 	bl	80018b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c38:	7bfa      	ldrb	r2, [r7, #15]
 8017c3a:	4611      	mov	r1, r2
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f7fe fc8a 	bl	8016556 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7fe fc32 	bl	80164b2 <USBD_LL_Reset>
}
 8017c4e:	bf00      	nop
 8017c50:	3710      	adds	r7, #16
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bd80      	pop	{r7, pc}
	...

08017c58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7fe fc85 	bl	8016576 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	687a      	ldr	r2, [r7, #4]
 8017c78:	6812      	ldr	r2, [r2, #0]
 8017c7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017c7e:	f043 0301 	orr.w	r3, r3, #1
 8017c82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	7adb      	ldrb	r3, [r3, #11]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d005      	beq.n	8017c98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c8c:	4b04      	ldr	r3, [pc, #16]	@ (8017ca0 <HAL_PCD_SuspendCallback+0x48>)
 8017c8e:	691b      	ldr	r3, [r3, #16]
 8017c90:	4a03      	ldr	r2, [pc, #12]	@ (8017ca0 <HAL_PCD_SuspendCallback+0x48>)
 8017c92:	f043 0306 	orr.w	r3, r3, #6
 8017c96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017c98:	bf00      	nop
 8017c9a:	3708      	adds	r7, #8
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}
 8017ca0:	e000ed00 	.word	0xe000ed00

08017ca4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7fe fc7b 	bl	80165ae <USBD_LL_Resume>
}
 8017cb8:	bf00      	nop
 8017cba:	3708      	adds	r7, #8
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
 8017cc8:	460b      	mov	r3, r1
 8017cca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cd2:	78fa      	ldrb	r2, [r7, #3]
 8017cd4:	4611      	mov	r1, r2
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fe fcd3 	bl	8016682 <USBD_LL_IsoOUTIncomplete>
}
 8017cdc:	bf00      	nop
 8017cde:	3708      	adds	r7, #8
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
 8017cec:	460b      	mov	r3, r1
 8017cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cf6:	78fa      	ldrb	r2, [r7, #3]
 8017cf8:	4611      	mov	r1, r2
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7fe fc8f 	bl	801661e <USBD_LL_IsoINIncomplete>
}
 8017d00:	bf00      	nop
 8017d02:	3708      	adds	r7, #8
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}

08017d08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b082      	sub	sp, #8
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d16:	4618      	mov	r0, r3
 8017d18:	f7fe fce5 	bl	80166e6 <USBD_LL_DevConnected>
}
 8017d1c:	bf00      	nop
 8017d1e:	3708      	adds	r7, #8
 8017d20:	46bd      	mov	sp, r7
 8017d22:	bd80      	pop	{r7, pc}

08017d24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b082      	sub	sp, #8
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d32:	4618      	mov	r0, r3
 8017d34:	f7fe fce2 	bl	80166fc <USBD_LL_DevDisconnected>
}
 8017d38:	bf00      	nop
 8017d3a:	3708      	adds	r7, #8
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b082      	sub	sp, #8
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	781b      	ldrb	r3, [r3, #0]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d13e      	bne.n	8017dce <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017d50:	4a21      	ldr	r2, [pc, #132]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d5c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017d60:	4b1d      	ldr	r3, [pc, #116]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d62:	4a1e      	ldr	r2, [pc, #120]	@ (8017ddc <USBD_LL_Init+0x9c>)
 8017d64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017d66:	4b1c      	ldr	r3, [pc, #112]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d68:	2209      	movs	r2, #9
 8017d6a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d6e:	2202      	movs	r2, #2
 8017d70:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017d72:	4b19      	ldr	r3, [pc, #100]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d74:	2200      	movs	r2, #0
 8017d76:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017d78:	4b17      	ldr	r3, [pc, #92]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d7a:	2202      	movs	r2, #2
 8017d7c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017d7e:	4b16      	ldr	r3, [pc, #88]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d80:	2200      	movs	r2, #0
 8017d82:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017d84:	4b14      	ldr	r3, [pc, #80]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d86:	2200      	movs	r2, #0
 8017d88:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017d8a:	4b13      	ldr	r3, [pc, #76]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8017d90:	4b11      	ldr	r3, [pc, #68]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d92:	2200      	movs	r2, #0
 8017d94:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017d96:	4b10      	ldr	r3, [pc, #64]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d98:	2200      	movs	r2, #0
 8017d9a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017d9e:	2200      	movs	r2, #0
 8017da0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017da2:	480d      	ldr	r0, [pc, #52]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017da4:	f7f4 f988 	bl	800c0b8 <HAL_PCD_Init>
 8017da8:	4603      	mov	r3, r0
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d001      	beq.n	8017db2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017dae:	f7e9 fd83 	bl	80018b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017db2:	2180      	movs	r1, #128	@ 0x80
 8017db4:	4808      	ldr	r0, [pc, #32]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017db6:	f7f5 fbde 	bl	800d576 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017dba:	2240      	movs	r2, #64	@ 0x40
 8017dbc:	2100      	movs	r1, #0
 8017dbe:	4806      	ldr	r0, [pc, #24]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017dc0:	f7f5 fb92 	bl	800d4e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017dc4:	2280      	movs	r2, #128	@ 0x80
 8017dc6:	2101      	movs	r1, #1
 8017dc8:	4803      	ldr	r0, [pc, #12]	@ (8017dd8 <USBD_LL_Init+0x98>)
 8017dca:	f7f5 fb8d 	bl	800d4e8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8017dce:	2300      	movs	r3, #0
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	3708      	adds	r7, #8
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}
 8017dd8:	240328f0 	.word	0x240328f0
 8017ddc:	40080000 	.word	0x40080000

08017de0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b084      	sub	sp, #16
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017de8:	2300      	movs	r3, #0
 8017dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dec:	2300      	movs	r3, #0
 8017dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7f4 fa6a 	bl	800c2d0 <HAL_PCD_Start>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e00:	7bfb      	ldrb	r3, [r7, #15]
 8017e02:	4618      	mov	r0, r3
 8017e04:	f000 f942 	bl	801808c <USBD_Get_USB_Status>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e0e:	4618      	mov	r0, r3
 8017e10:	3710      	adds	r7, #16
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bd80      	pop	{r7, pc}

08017e16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017e16:	b580      	push	{r7, lr}
 8017e18:	b084      	sub	sp, #16
 8017e1a:	af00      	add	r7, sp, #0
 8017e1c:	6078      	str	r0, [r7, #4]
 8017e1e:	4608      	mov	r0, r1
 8017e20:	4611      	mov	r1, r2
 8017e22:	461a      	mov	r2, r3
 8017e24:	4603      	mov	r3, r0
 8017e26:	70fb      	strb	r3, [r7, #3]
 8017e28:	460b      	mov	r3, r1
 8017e2a:	70bb      	strb	r3, [r7, #2]
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e30:	2300      	movs	r3, #0
 8017e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e34:	2300      	movs	r3, #0
 8017e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017e3e:	78bb      	ldrb	r3, [r7, #2]
 8017e40:	883a      	ldrh	r2, [r7, #0]
 8017e42:	78f9      	ldrb	r1, [r7, #3]
 8017e44:	f7f4 ff6b 	bl	800cd1e <HAL_PCD_EP_Open>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e4c:	7bfb      	ldrb	r3, [r7, #15]
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f000 f91c 	bl	801808c <USBD_Get_USB_Status>
 8017e54:	4603      	mov	r3, r0
 8017e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3710      	adds	r7, #16
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}

08017e62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e62:	b580      	push	{r7, lr}
 8017e64:	b084      	sub	sp, #16
 8017e66:	af00      	add	r7, sp, #0
 8017e68:	6078      	str	r0, [r7, #4]
 8017e6a:	460b      	mov	r3, r1
 8017e6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e72:	2300      	movs	r3, #0
 8017e74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e7c:	78fa      	ldrb	r2, [r7, #3]
 8017e7e:	4611      	mov	r1, r2
 8017e80:	4618      	mov	r0, r3
 8017e82:	f7f4 ffb6 	bl	800cdf2 <HAL_PCD_EP_Close>
 8017e86:	4603      	mov	r3, r0
 8017e88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e8a:	7bfb      	ldrb	r3, [r7, #15]
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f000 f8fd 	bl	801808c <USBD_Get_USB_Status>
 8017e92:	4603      	mov	r3, r0
 8017e94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e96:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	3710      	adds	r7, #16
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd80      	pop	{r7, pc}

08017ea0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b084      	sub	sp, #16
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
 8017ea8:	460b      	mov	r3, r1
 8017eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017eac:	2300      	movs	r3, #0
 8017eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017eba:	78fa      	ldrb	r2, [r7, #3]
 8017ebc:	4611      	mov	r1, r2
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f7f5 f86e 	bl	800cfa0 <HAL_PCD_EP_SetStall>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ec8:	7bfb      	ldrb	r3, [r7, #15]
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f000 f8de 	bl	801808c <USBD_Get_USB_Status>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	3710      	adds	r7, #16
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}

08017ede <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ede:	b580      	push	{r7, lr}
 8017ee0:	b084      	sub	sp, #16
 8017ee2:	af00      	add	r7, sp, #0
 8017ee4:	6078      	str	r0, [r7, #4]
 8017ee6:	460b      	mov	r3, r1
 8017ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017eea:	2300      	movs	r3, #0
 8017eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017eee:	2300      	movs	r3, #0
 8017ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ef8:	78fa      	ldrb	r2, [r7, #3]
 8017efa:	4611      	mov	r1, r2
 8017efc:	4618      	mov	r0, r3
 8017efe:	f7f5 f8b2 	bl	800d066 <HAL_PCD_EP_ClrStall>
 8017f02:	4603      	mov	r3, r0
 8017f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f06:	7bfb      	ldrb	r3, [r7, #15]
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f000 f8bf 	bl	801808c <USBD_Get_USB_Status>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f14:	4618      	mov	r0, r3
 8017f16:	3710      	adds	r7, #16
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}

08017f1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f1c:	b480      	push	{r7}
 8017f1e:	b085      	sub	sp, #20
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
 8017f24:	460b      	mov	r3, r1
 8017f26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	da0b      	bge.n	8017f50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017f38:	78fb      	ldrb	r3, [r7, #3]
 8017f3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017f3e:	68f9      	ldr	r1, [r7, #12]
 8017f40:	4613      	mov	r3, r2
 8017f42:	00db      	lsls	r3, r3, #3
 8017f44:	4413      	add	r3, r2
 8017f46:	009b      	lsls	r3, r3, #2
 8017f48:	440b      	add	r3, r1
 8017f4a:	3316      	adds	r3, #22
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	e00b      	b.n	8017f68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017f50:	78fb      	ldrb	r3, [r7, #3]
 8017f52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017f56:	68f9      	ldr	r1, [r7, #12]
 8017f58:	4613      	mov	r3, r2
 8017f5a:	00db      	lsls	r3, r3, #3
 8017f5c:	4413      	add	r3, r2
 8017f5e:	009b      	lsls	r3, r3, #2
 8017f60:	440b      	add	r3, r1
 8017f62:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017f66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	3714      	adds	r7, #20
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f72:	4770      	bx	lr

08017f74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b084      	sub	sp, #16
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
 8017f7c:	460b      	mov	r3, r1
 8017f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f80:	2300      	movs	r3, #0
 8017f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f84:	2300      	movs	r3, #0
 8017f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f8e:	78fa      	ldrb	r2, [r7, #3]
 8017f90:	4611      	mov	r1, r2
 8017f92:	4618      	mov	r0, r3
 8017f94:	f7f4 fe9f 	bl	800ccd6 <HAL_PCD_SetAddress>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f9c:	7bfb      	ldrb	r3, [r7, #15]
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f000 f874 	bl	801808c <USBD_Get_USB_Status>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017faa:	4618      	mov	r0, r3
 8017fac:	3710      	adds	r7, #16
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}

08017fb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017fb2:	b580      	push	{r7, lr}
 8017fb4:	b086      	sub	sp, #24
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	60f8      	str	r0, [r7, #12]
 8017fba:	607a      	str	r2, [r7, #4]
 8017fbc:	603b      	str	r3, [r7, #0]
 8017fbe:	460b      	mov	r3, r1
 8017fc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017fd0:	7af9      	ldrb	r1, [r7, #11]
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	687a      	ldr	r2, [r7, #4]
 8017fd6:	f7f4 ffa9 	bl	800cf2c <HAL_PCD_EP_Transmit>
 8017fda:	4603      	mov	r3, r0
 8017fdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017fde:	7dfb      	ldrb	r3, [r7, #23]
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f000 f853 	bl	801808c <USBD_Get_USB_Status>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017fea:	7dbb      	ldrb	r3, [r7, #22]
}
 8017fec:	4618      	mov	r0, r3
 8017fee:	3718      	adds	r7, #24
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	bd80      	pop	{r7, pc}

08017ff4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b086      	sub	sp, #24
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	60f8      	str	r0, [r7, #12]
 8017ffc:	607a      	str	r2, [r7, #4]
 8017ffe:	603b      	str	r3, [r7, #0]
 8018000:	460b      	mov	r3, r1
 8018002:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018004:	2300      	movs	r3, #0
 8018006:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018008:	2300      	movs	r3, #0
 801800a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018012:	7af9      	ldrb	r1, [r7, #11]
 8018014:	683b      	ldr	r3, [r7, #0]
 8018016:	687a      	ldr	r2, [r7, #4]
 8018018:	f7f4 ff35 	bl	800ce86 <HAL_PCD_EP_Receive>
 801801c:	4603      	mov	r3, r0
 801801e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018020:	7dfb      	ldrb	r3, [r7, #23]
 8018022:	4618      	mov	r0, r3
 8018024:	f000 f832 	bl	801808c <USBD_Get_USB_Status>
 8018028:	4603      	mov	r3, r0
 801802a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801802c:	7dbb      	ldrb	r3, [r7, #22]
}
 801802e:	4618      	mov	r0, r3
 8018030:	3718      	adds	r7, #24
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}

08018036 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018036:	b580      	push	{r7, lr}
 8018038:	b082      	sub	sp, #8
 801803a:	af00      	add	r7, sp, #0
 801803c:	6078      	str	r0, [r7, #4]
 801803e:	460b      	mov	r3, r1
 8018040:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018048:	78fa      	ldrb	r2, [r7, #3]
 801804a:	4611      	mov	r1, r2
 801804c:	4618      	mov	r0, r3
 801804e:	f7f4 ff55 	bl	800cefc <HAL_PCD_EP_GetRxCount>
 8018052:	4603      	mov	r3, r0
}
 8018054:	4618      	mov	r0, r3
 8018056:	3708      	adds	r7, #8
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}

0801805c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801805c:	b480      	push	{r7}
 801805e:	b083      	sub	sp, #12
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018064:	4b03      	ldr	r3, [pc, #12]	@ (8018074 <USBD_static_malloc+0x18>)
}
 8018066:	4618      	mov	r0, r3
 8018068:	370c      	adds	r7, #12
 801806a:	46bd      	mov	sp, r7
 801806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018070:	4770      	bx	lr
 8018072:	bf00      	nop
 8018074:	24032dd4 	.word	0x24032dd4

08018078 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018078:	b480      	push	{r7}
 801807a:	b083      	sub	sp, #12
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018080:	bf00      	nop
 8018082:	370c      	adds	r7, #12
 8018084:	46bd      	mov	sp, r7
 8018086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808a:	4770      	bx	lr

0801808c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801808c:	b480      	push	{r7}
 801808e:	b085      	sub	sp, #20
 8018090:	af00      	add	r7, sp, #0
 8018092:	4603      	mov	r3, r0
 8018094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018096:	2300      	movs	r3, #0
 8018098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801809a:	79fb      	ldrb	r3, [r7, #7]
 801809c:	2b03      	cmp	r3, #3
 801809e:	d817      	bhi.n	80180d0 <USBD_Get_USB_Status+0x44>
 80180a0:	a201      	add	r2, pc, #4	@ (adr r2, 80180a8 <USBD_Get_USB_Status+0x1c>)
 80180a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180a6:	bf00      	nop
 80180a8:	080180b9 	.word	0x080180b9
 80180ac:	080180bf 	.word	0x080180bf
 80180b0:	080180c5 	.word	0x080180c5
 80180b4:	080180cb 	.word	0x080180cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80180b8:	2300      	movs	r3, #0
 80180ba:	73fb      	strb	r3, [r7, #15]
    break;
 80180bc:	e00b      	b.n	80180d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80180be:	2303      	movs	r3, #3
 80180c0:	73fb      	strb	r3, [r7, #15]
    break;
 80180c2:	e008      	b.n	80180d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80180c4:	2301      	movs	r3, #1
 80180c6:	73fb      	strb	r3, [r7, #15]
    break;
 80180c8:	e005      	b.n	80180d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80180ca:	2303      	movs	r3, #3
 80180cc:	73fb      	strb	r3, [r7, #15]
    break;
 80180ce:	e002      	b.n	80180d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80180d0:	2303      	movs	r3, #3
 80180d2:	73fb      	strb	r3, [r7, #15]
    break;
 80180d4:	bf00      	nop
  }
  return usb_status;
 80180d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3714      	adds	r7, #20
 80180dc:	46bd      	mov	sp, r7
 80180de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e2:	4770      	bx	lr

080180e4 <siprintf>:
 80180e4:	b40e      	push	{r1, r2, r3}
 80180e6:	b510      	push	{r4, lr}
 80180e8:	b09d      	sub	sp, #116	@ 0x74
 80180ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80180ec:	9002      	str	r0, [sp, #8]
 80180ee:	9006      	str	r0, [sp, #24]
 80180f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80180f4:	480a      	ldr	r0, [pc, #40]	@ (8018120 <siprintf+0x3c>)
 80180f6:	9107      	str	r1, [sp, #28]
 80180f8:	9104      	str	r1, [sp, #16]
 80180fa:	490a      	ldr	r1, [pc, #40]	@ (8018124 <siprintf+0x40>)
 80180fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018100:	9105      	str	r1, [sp, #20]
 8018102:	2400      	movs	r4, #0
 8018104:	a902      	add	r1, sp, #8
 8018106:	6800      	ldr	r0, [r0, #0]
 8018108:	9301      	str	r3, [sp, #4]
 801810a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801810c:	f000 f9a2 	bl	8018454 <_svfiprintf_r>
 8018110:	9b02      	ldr	r3, [sp, #8]
 8018112:	701c      	strb	r4, [r3, #0]
 8018114:	b01d      	add	sp, #116	@ 0x74
 8018116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801811a:	b003      	add	sp, #12
 801811c:	4770      	bx	lr
 801811e:	bf00      	nop
 8018120:	24000318 	.word	0x24000318
 8018124:	ffff0208 	.word	0xffff0208

08018128 <memset>:
 8018128:	4402      	add	r2, r0
 801812a:	4603      	mov	r3, r0
 801812c:	4293      	cmp	r3, r2
 801812e:	d100      	bne.n	8018132 <memset+0xa>
 8018130:	4770      	bx	lr
 8018132:	f803 1b01 	strb.w	r1, [r3], #1
 8018136:	e7f9      	b.n	801812c <memset+0x4>

08018138 <__errno>:
 8018138:	4b01      	ldr	r3, [pc, #4]	@ (8018140 <__errno+0x8>)
 801813a:	6818      	ldr	r0, [r3, #0]
 801813c:	4770      	bx	lr
 801813e:	bf00      	nop
 8018140:	24000318 	.word	0x24000318

08018144 <__libc_init_array>:
 8018144:	b570      	push	{r4, r5, r6, lr}
 8018146:	4d0d      	ldr	r5, [pc, #52]	@ (801817c <__libc_init_array+0x38>)
 8018148:	4c0d      	ldr	r4, [pc, #52]	@ (8018180 <__libc_init_array+0x3c>)
 801814a:	1b64      	subs	r4, r4, r5
 801814c:	10a4      	asrs	r4, r4, #2
 801814e:	2600      	movs	r6, #0
 8018150:	42a6      	cmp	r6, r4
 8018152:	d109      	bne.n	8018168 <__libc_init_array+0x24>
 8018154:	4d0b      	ldr	r5, [pc, #44]	@ (8018184 <__libc_init_array+0x40>)
 8018156:	4c0c      	ldr	r4, [pc, #48]	@ (8018188 <__libc_init_array+0x44>)
 8018158:	f000 fc64 	bl	8018a24 <_init>
 801815c:	1b64      	subs	r4, r4, r5
 801815e:	10a4      	asrs	r4, r4, #2
 8018160:	2600      	movs	r6, #0
 8018162:	42a6      	cmp	r6, r4
 8018164:	d105      	bne.n	8018172 <__libc_init_array+0x2e>
 8018166:	bd70      	pop	{r4, r5, r6, pc}
 8018168:	f855 3b04 	ldr.w	r3, [r5], #4
 801816c:	4798      	blx	r3
 801816e:	3601      	adds	r6, #1
 8018170:	e7ee      	b.n	8018150 <__libc_init_array+0xc>
 8018172:	f855 3b04 	ldr.w	r3, [r5], #4
 8018176:	4798      	blx	r3
 8018178:	3601      	adds	r6, #1
 801817a:	e7f2      	b.n	8018162 <__libc_init_array+0x1e>
 801817c:	080190a0 	.word	0x080190a0
 8018180:	080190a0 	.word	0x080190a0
 8018184:	080190a0 	.word	0x080190a0
 8018188:	080190a4 	.word	0x080190a4

0801818c <__retarget_lock_acquire_recursive>:
 801818c:	4770      	bx	lr

0801818e <__retarget_lock_release_recursive>:
 801818e:	4770      	bx	lr

08018190 <memcpy>:
 8018190:	440a      	add	r2, r1
 8018192:	4291      	cmp	r1, r2
 8018194:	f100 33ff 	add.w	r3, r0, #4294967295
 8018198:	d100      	bne.n	801819c <memcpy+0xc>
 801819a:	4770      	bx	lr
 801819c:	b510      	push	{r4, lr}
 801819e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80181a6:	4291      	cmp	r1, r2
 80181a8:	d1f9      	bne.n	801819e <memcpy+0xe>
 80181aa:	bd10      	pop	{r4, pc}

080181ac <_free_r>:
 80181ac:	b538      	push	{r3, r4, r5, lr}
 80181ae:	4605      	mov	r5, r0
 80181b0:	2900      	cmp	r1, #0
 80181b2:	d041      	beq.n	8018238 <_free_r+0x8c>
 80181b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181b8:	1f0c      	subs	r4, r1, #4
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	bfb8      	it	lt
 80181be:	18e4      	addlt	r4, r4, r3
 80181c0:	f000 f8e0 	bl	8018384 <__malloc_lock>
 80181c4:	4a1d      	ldr	r2, [pc, #116]	@ (801823c <_free_r+0x90>)
 80181c6:	6813      	ldr	r3, [r2, #0]
 80181c8:	b933      	cbnz	r3, 80181d8 <_free_r+0x2c>
 80181ca:	6063      	str	r3, [r4, #4]
 80181cc:	6014      	str	r4, [r2, #0]
 80181ce:	4628      	mov	r0, r5
 80181d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181d4:	f000 b8dc 	b.w	8018390 <__malloc_unlock>
 80181d8:	42a3      	cmp	r3, r4
 80181da:	d908      	bls.n	80181ee <_free_r+0x42>
 80181dc:	6820      	ldr	r0, [r4, #0]
 80181de:	1821      	adds	r1, r4, r0
 80181e0:	428b      	cmp	r3, r1
 80181e2:	bf01      	itttt	eq
 80181e4:	6819      	ldreq	r1, [r3, #0]
 80181e6:	685b      	ldreq	r3, [r3, #4]
 80181e8:	1809      	addeq	r1, r1, r0
 80181ea:	6021      	streq	r1, [r4, #0]
 80181ec:	e7ed      	b.n	80181ca <_free_r+0x1e>
 80181ee:	461a      	mov	r2, r3
 80181f0:	685b      	ldr	r3, [r3, #4]
 80181f2:	b10b      	cbz	r3, 80181f8 <_free_r+0x4c>
 80181f4:	42a3      	cmp	r3, r4
 80181f6:	d9fa      	bls.n	80181ee <_free_r+0x42>
 80181f8:	6811      	ldr	r1, [r2, #0]
 80181fa:	1850      	adds	r0, r2, r1
 80181fc:	42a0      	cmp	r0, r4
 80181fe:	d10b      	bne.n	8018218 <_free_r+0x6c>
 8018200:	6820      	ldr	r0, [r4, #0]
 8018202:	4401      	add	r1, r0
 8018204:	1850      	adds	r0, r2, r1
 8018206:	4283      	cmp	r3, r0
 8018208:	6011      	str	r1, [r2, #0]
 801820a:	d1e0      	bne.n	80181ce <_free_r+0x22>
 801820c:	6818      	ldr	r0, [r3, #0]
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	6053      	str	r3, [r2, #4]
 8018212:	4408      	add	r0, r1
 8018214:	6010      	str	r0, [r2, #0]
 8018216:	e7da      	b.n	80181ce <_free_r+0x22>
 8018218:	d902      	bls.n	8018220 <_free_r+0x74>
 801821a:	230c      	movs	r3, #12
 801821c:	602b      	str	r3, [r5, #0]
 801821e:	e7d6      	b.n	80181ce <_free_r+0x22>
 8018220:	6820      	ldr	r0, [r4, #0]
 8018222:	1821      	adds	r1, r4, r0
 8018224:	428b      	cmp	r3, r1
 8018226:	bf04      	itt	eq
 8018228:	6819      	ldreq	r1, [r3, #0]
 801822a:	685b      	ldreq	r3, [r3, #4]
 801822c:	6063      	str	r3, [r4, #4]
 801822e:	bf04      	itt	eq
 8018230:	1809      	addeq	r1, r1, r0
 8018232:	6021      	streq	r1, [r4, #0]
 8018234:	6054      	str	r4, [r2, #4]
 8018236:	e7ca      	b.n	80181ce <_free_r+0x22>
 8018238:	bd38      	pop	{r3, r4, r5, pc}
 801823a:	bf00      	nop
 801823c:	24033138 	.word	0x24033138

08018240 <sbrk_aligned>:
 8018240:	b570      	push	{r4, r5, r6, lr}
 8018242:	4e0f      	ldr	r6, [pc, #60]	@ (8018280 <sbrk_aligned+0x40>)
 8018244:	460c      	mov	r4, r1
 8018246:	6831      	ldr	r1, [r6, #0]
 8018248:	4605      	mov	r5, r0
 801824a:	b911      	cbnz	r1, 8018252 <sbrk_aligned+0x12>
 801824c:	f000 fba4 	bl	8018998 <_sbrk_r>
 8018250:	6030      	str	r0, [r6, #0]
 8018252:	4621      	mov	r1, r4
 8018254:	4628      	mov	r0, r5
 8018256:	f000 fb9f 	bl	8018998 <_sbrk_r>
 801825a:	1c43      	adds	r3, r0, #1
 801825c:	d103      	bne.n	8018266 <sbrk_aligned+0x26>
 801825e:	f04f 34ff 	mov.w	r4, #4294967295
 8018262:	4620      	mov	r0, r4
 8018264:	bd70      	pop	{r4, r5, r6, pc}
 8018266:	1cc4      	adds	r4, r0, #3
 8018268:	f024 0403 	bic.w	r4, r4, #3
 801826c:	42a0      	cmp	r0, r4
 801826e:	d0f8      	beq.n	8018262 <sbrk_aligned+0x22>
 8018270:	1a21      	subs	r1, r4, r0
 8018272:	4628      	mov	r0, r5
 8018274:	f000 fb90 	bl	8018998 <_sbrk_r>
 8018278:	3001      	adds	r0, #1
 801827a:	d1f2      	bne.n	8018262 <sbrk_aligned+0x22>
 801827c:	e7ef      	b.n	801825e <sbrk_aligned+0x1e>
 801827e:	bf00      	nop
 8018280:	24033134 	.word	0x24033134

08018284 <_malloc_r>:
 8018284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018288:	1ccd      	adds	r5, r1, #3
 801828a:	f025 0503 	bic.w	r5, r5, #3
 801828e:	3508      	adds	r5, #8
 8018290:	2d0c      	cmp	r5, #12
 8018292:	bf38      	it	cc
 8018294:	250c      	movcc	r5, #12
 8018296:	2d00      	cmp	r5, #0
 8018298:	4606      	mov	r6, r0
 801829a:	db01      	blt.n	80182a0 <_malloc_r+0x1c>
 801829c:	42a9      	cmp	r1, r5
 801829e:	d904      	bls.n	80182aa <_malloc_r+0x26>
 80182a0:	230c      	movs	r3, #12
 80182a2:	6033      	str	r3, [r6, #0]
 80182a4:	2000      	movs	r0, #0
 80182a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018380 <_malloc_r+0xfc>
 80182ae:	f000 f869 	bl	8018384 <__malloc_lock>
 80182b2:	f8d8 3000 	ldr.w	r3, [r8]
 80182b6:	461c      	mov	r4, r3
 80182b8:	bb44      	cbnz	r4, 801830c <_malloc_r+0x88>
 80182ba:	4629      	mov	r1, r5
 80182bc:	4630      	mov	r0, r6
 80182be:	f7ff ffbf 	bl	8018240 <sbrk_aligned>
 80182c2:	1c43      	adds	r3, r0, #1
 80182c4:	4604      	mov	r4, r0
 80182c6:	d158      	bne.n	801837a <_malloc_r+0xf6>
 80182c8:	f8d8 4000 	ldr.w	r4, [r8]
 80182cc:	4627      	mov	r7, r4
 80182ce:	2f00      	cmp	r7, #0
 80182d0:	d143      	bne.n	801835a <_malloc_r+0xd6>
 80182d2:	2c00      	cmp	r4, #0
 80182d4:	d04b      	beq.n	801836e <_malloc_r+0xea>
 80182d6:	6823      	ldr	r3, [r4, #0]
 80182d8:	4639      	mov	r1, r7
 80182da:	4630      	mov	r0, r6
 80182dc:	eb04 0903 	add.w	r9, r4, r3
 80182e0:	f000 fb5a 	bl	8018998 <_sbrk_r>
 80182e4:	4581      	cmp	r9, r0
 80182e6:	d142      	bne.n	801836e <_malloc_r+0xea>
 80182e8:	6821      	ldr	r1, [r4, #0]
 80182ea:	1a6d      	subs	r5, r5, r1
 80182ec:	4629      	mov	r1, r5
 80182ee:	4630      	mov	r0, r6
 80182f0:	f7ff ffa6 	bl	8018240 <sbrk_aligned>
 80182f4:	3001      	adds	r0, #1
 80182f6:	d03a      	beq.n	801836e <_malloc_r+0xea>
 80182f8:	6823      	ldr	r3, [r4, #0]
 80182fa:	442b      	add	r3, r5
 80182fc:	6023      	str	r3, [r4, #0]
 80182fe:	f8d8 3000 	ldr.w	r3, [r8]
 8018302:	685a      	ldr	r2, [r3, #4]
 8018304:	bb62      	cbnz	r2, 8018360 <_malloc_r+0xdc>
 8018306:	f8c8 7000 	str.w	r7, [r8]
 801830a:	e00f      	b.n	801832c <_malloc_r+0xa8>
 801830c:	6822      	ldr	r2, [r4, #0]
 801830e:	1b52      	subs	r2, r2, r5
 8018310:	d420      	bmi.n	8018354 <_malloc_r+0xd0>
 8018312:	2a0b      	cmp	r2, #11
 8018314:	d917      	bls.n	8018346 <_malloc_r+0xc2>
 8018316:	1961      	adds	r1, r4, r5
 8018318:	42a3      	cmp	r3, r4
 801831a:	6025      	str	r5, [r4, #0]
 801831c:	bf18      	it	ne
 801831e:	6059      	strne	r1, [r3, #4]
 8018320:	6863      	ldr	r3, [r4, #4]
 8018322:	bf08      	it	eq
 8018324:	f8c8 1000 	streq.w	r1, [r8]
 8018328:	5162      	str	r2, [r4, r5]
 801832a:	604b      	str	r3, [r1, #4]
 801832c:	4630      	mov	r0, r6
 801832e:	f000 f82f 	bl	8018390 <__malloc_unlock>
 8018332:	f104 000b 	add.w	r0, r4, #11
 8018336:	1d23      	adds	r3, r4, #4
 8018338:	f020 0007 	bic.w	r0, r0, #7
 801833c:	1ac2      	subs	r2, r0, r3
 801833e:	bf1c      	itt	ne
 8018340:	1a1b      	subne	r3, r3, r0
 8018342:	50a3      	strne	r3, [r4, r2]
 8018344:	e7af      	b.n	80182a6 <_malloc_r+0x22>
 8018346:	6862      	ldr	r2, [r4, #4]
 8018348:	42a3      	cmp	r3, r4
 801834a:	bf0c      	ite	eq
 801834c:	f8c8 2000 	streq.w	r2, [r8]
 8018350:	605a      	strne	r2, [r3, #4]
 8018352:	e7eb      	b.n	801832c <_malloc_r+0xa8>
 8018354:	4623      	mov	r3, r4
 8018356:	6864      	ldr	r4, [r4, #4]
 8018358:	e7ae      	b.n	80182b8 <_malloc_r+0x34>
 801835a:	463c      	mov	r4, r7
 801835c:	687f      	ldr	r7, [r7, #4]
 801835e:	e7b6      	b.n	80182ce <_malloc_r+0x4a>
 8018360:	461a      	mov	r2, r3
 8018362:	685b      	ldr	r3, [r3, #4]
 8018364:	42a3      	cmp	r3, r4
 8018366:	d1fb      	bne.n	8018360 <_malloc_r+0xdc>
 8018368:	2300      	movs	r3, #0
 801836a:	6053      	str	r3, [r2, #4]
 801836c:	e7de      	b.n	801832c <_malloc_r+0xa8>
 801836e:	230c      	movs	r3, #12
 8018370:	6033      	str	r3, [r6, #0]
 8018372:	4630      	mov	r0, r6
 8018374:	f000 f80c 	bl	8018390 <__malloc_unlock>
 8018378:	e794      	b.n	80182a4 <_malloc_r+0x20>
 801837a:	6005      	str	r5, [r0, #0]
 801837c:	e7d6      	b.n	801832c <_malloc_r+0xa8>
 801837e:	bf00      	nop
 8018380:	24033138 	.word	0x24033138

08018384 <__malloc_lock>:
 8018384:	4801      	ldr	r0, [pc, #4]	@ (801838c <__malloc_lock+0x8>)
 8018386:	f7ff bf01 	b.w	801818c <__retarget_lock_acquire_recursive>
 801838a:	bf00      	nop
 801838c:	24033130 	.word	0x24033130

08018390 <__malloc_unlock>:
 8018390:	4801      	ldr	r0, [pc, #4]	@ (8018398 <__malloc_unlock+0x8>)
 8018392:	f7ff befc 	b.w	801818e <__retarget_lock_release_recursive>
 8018396:	bf00      	nop
 8018398:	24033130 	.word	0x24033130

0801839c <__ssputs_r>:
 801839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183a0:	688e      	ldr	r6, [r1, #8]
 80183a2:	461f      	mov	r7, r3
 80183a4:	42be      	cmp	r6, r7
 80183a6:	680b      	ldr	r3, [r1, #0]
 80183a8:	4682      	mov	sl, r0
 80183aa:	460c      	mov	r4, r1
 80183ac:	4690      	mov	r8, r2
 80183ae:	d82d      	bhi.n	801840c <__ssputs_r+0x70>
 80183b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80183b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80183b8:	d026      	beq.n	8018408 <__ssputs_r+0x6c>
 80183ba:	6965      	ldr	r5, [r4, #20]
 80183bc:	6909      	ldr	r1, [r1, #16]
 80183be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80183c2:	eba3 0901 	sub.w	r9, r3, r1
 80183c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80183ca:	1c7b      	adds	r3, r7, #1
 80183cc:	444b      	add	r3, r9
 80183ce:	106d      	asrs	r5, r5, #1
 80183d0:	429d      	cmp	r5, r3
 80183d2:	bf38      	it	cc
 80183d4:	461d      	movcc	r5, r3
 80183d6:	0553      	lsls	r3, r2, #21
 80183d8:	d527      	bpl.n	801842a <__ssputs_r+0x8e>
 80183da:	4629      	mov	r1, r5
 80183dc:	f7ff ff52 	bl	8018284 <_malloc_r>
 80183e0:	4606      	mov	r6, r0
 80183e2:	b360      	cbz	r0, 801843e <__ssputs_r+0xa2>
 80183e4:	6921      	ldr	r1, [r4, #16]
 80183e6:	464a      	mov	r2, r9
 80183e8:	f7ff fed2 	bl	8018190 <memcpy>
 80183ec:	89a3      	ldrh	r3, [r4, #12]
 80183ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80183f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80183f6:	81a3      	strh	r3, [r4, #12]
 80183f8:	6126      	str	r6, [r4, #16]
 80183fa:	6165      	str	r5, [r4, #20]
 80183fc:	444e      	add	r6, r9
 80183fe:	eba5 0509 	sub.w	r5, r5, r9
 8018402:	6026      	str	r6, [r4, #0]
 8018404:	60a5      	str	r5, [r4, #8]
 8018406:	463e      	mov	r6, r7
 8018408:	42be      	cmp	r6, r7
 801840a:	d900      	bls.n	801840e <__ssputs_r+0x72>
 801840c:	463e      	mov	r6, r7
 801840e:	6820      	ldr	r0, [r4, #0]
 8018410:	4632      	mov	r2, r6
 8018412:	4641      	mov	r1, r8
 8018414:	f000 faa6 	bl	8018964 <memmove>
 8018418:	68a3      	ldr	r3, [r4, #8]
 801841a:	1b9b      	subs	r3, r3, r6
 801841c:	60a3      	str	r3, [r4, #8]
 801841e:	6823      	ldr	r3, [r4, #0]
 8018420:	4433      	add	r3, r6
 8018422:	6023      	str	r3, [r4, #0]
 8018424:	2000      	movs	r0, #0
 8018426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801842a:	462a      	mov	r2, r5
 801842c:	f000 fac4 	bl	80189b8 <_realloc_r>
 8018430:	4606      	mov	r6, r0
 8018432:	2800      	cmp	r0, #0
 8018434:	d1e0      	bne.n	80183f8 <__ssputs_r+0x5c>
 8018436:	6921      	ldr	r1, [r4, #16]
 8018438:	4650      	mov	r0, sl
 801843a:	f7ff feb7 	bl	80181ac <_free_r>
 801843e:	230c      	movs	r3, #12
 8018440:	f8ca 3000 	str.w	r3, [sl]
 8018444:	89a3      	ldrh	r3, [r4, #12]
 8018446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801844a:	81a3      	strh	r3, [r4, #12]
 801844c:	f04f 30ff 	mov.w	r0, #4294967295
 8018450:	e7e9      	b.n	8018426 <__ssputs_r+0x8a>
	...

08018454 <_svfiprintf_r>:
 8018454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018458:	4698      	mov	r8, r3
 801845a:	898b      	ldrh	r3, [r1, #12]
 801845c:	061b      	lsls	r3, r3, #24
 801845e:	b09d      	sub	sp, #116	@ 0x74
 8018460:	4607      	mov	r7, r0
 8018462:	460d      	mov	r5, r1
 8018464:	4614      	mov	r4, r2
 8018466:	d510      	bpl.n	801848a <_svfiprintf_r+0x36>
 8018468:	690b      	ldr	r3, [r1, #16]
 801846a:	b973      	cbnz	r3, 801848a <_svfiprintf_r+0x36>
 801846c:	2140      	movs	r1, #64	@ 0x40
 801846e:	f7ff ff09 	bl	8018284 <_malloc_r>
 8018472:	6028      	str	r0, [r5, #0]
 8018474:	6128      	str	r0, [r5, #16]
 8018476:	b930      	cbnz	r0, 8018486 <_svfiprintf_r+0x32>
 8018478:	230c      	movs	r3, #12
 801847a:	603b      	str	r3, [r7, #0]
 801847c:	f04f 30ff 	mov.w	r0, #4294967295
 8018480:	b01d      	add	sp, #116	@ 0x74
 8018482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018486:	2340      	movs	r3, #64	@ 0x40
 8018488:	616b      	str	r3, [r5, #20]
 801848a:	2300      	movs	r3, #0
 801848c:	9309      	str	r3, [sp, #36]	@ 0x24
 801848e:	2320      	movs	r3, #32
 8018490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018494:	f8cd 800c 	str.w	r8, [sp, #12]
 8018498:	2330      	movs	r3, #48	@ 0x30
 801849a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018638 <_svfiprintf_r+0x1e4>
 801849e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80184a2:	f04f 0901 	mov.w	r9, #1
 80184a6:	4623      	mov	r3, r4
 80184a8:	469a      	mov	sl, r3
 80184aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184ae:	b10a      	cbz	r2, 80184b4 <_svfiprintf_r+0x60>
 80184b0:	2a25      	cmp	r2, #37	@ 0x25
 80184b2:	d1f9      	bne.n	80184a8 <_svfiprintf_r+0x54>
 80184b4:	ebba 0b04 	subs.w	fp, sl, r4
 80184b8:	d00b      	beq.n	80184d2 <_svfiprintf_r+0x7e>
 80184ba:	465b      	mov	r3, fp
 80184bc:	4622      	mov	r2, r4
 80184be:	4629      	mov	r1, r5
 80184c0:	4638      	mov	r0, r7
 80184c2:	f7ff ff6b 	bl	801839c <__ssputs_r>
 80184c6:	3001      	adds	r0, #1
 80184c8:	f000 80a7 	beq.w	801861a <_svfiprintf_r+0x1c6>
 80184cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80184ce:	445a      	add	r2, fp
 80184d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80184d2:	f89a 3000 	ldrb.w	r3, [sl]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	f000 809f 	beq.w	801861a <_svfiprintf_r+0x1c6>
 80184dc:	2300      	movs	r3, #0
 80184de:	f04f 32ff 	mov.w	r2, #4294967295
 80184e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184e6:	f10a 0a01 	add.w	sl, sl, #1
 80184ea:	9304      	str	r3, [sp, #16]
 80184ec:	9307      	str	r3, [sp, #28]
 80184ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80184f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80184f4:	4654      	mov	r4, sl
 80184f6:	2205      	movs	r2, #5
 80184f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184fc:	484e      	ldr	r0, [pc, #312]	@ (8018638 <_svfiprintf_r+0x1e4>)
 80184fe:	f7e7 fef7 	bl	80002f0 <memchr>
 8018502:	9a04      	ldr	r2, [sp, #16]
 8018504:	b9d8      	cbnz	r0, 801853e <_svfiprintf_r+0xea>
 8018506:	06d0      	lsls	r0, r2, #27
 8018508:	bf44      	itt	mi
 801850a:	2320      	movmi	r3, #32
 801850c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018510:	0711      	lsls	r1, r2, #28
 8018512:	bf44      	itt	mi
 8018514:	232b      	movmi	r3, #43	@ 0x2b
 8018516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801851a:	f89a 3000 	ldrb.w	r3, [sl]
 801851e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018520:	d015      	beq.n	801854e <_svfiprintf_r+0xfa>
 8018522:	9a07      	ldr	r2, [sp, #28]
 8018524:	4654      	mov	r4, sl
 8018526:	2000      	movs	r0, #0
 8018528:	f04f 0c0a 	mov.w	ip, #10
 801852c:	4621      	mov	r1, r4
 801852e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018532:	3b30      	subs	r3, #48	@ 0x30
 8018534:	2b09      	cmp	r3, #9
 8018536:	d94b      	bls.n	80185d0 <_svfiprintf_r+0x17c>
 8018538:	b1b0      	cbz	r0, 8018568 <_svfiprintf_r+0x114>
 801853a:	9207      	str	r2, [sp, #28]
 801853c:	e014      	b.n	8018568 <_svfiprintf_r+0x114>
 801853e:	eba0 0308 	sub.w	r3, r0, r8
 8018542:	fa09 f303 	lsl.w	r3, r9, r3
 8018546:	4313      	orrs	r3, r2
 8018548:	9304      	str	r3, [sp, #16]
 801854a:	46a2      	mov	sl, r4
 801854c:	e7d2      	b.n	80184f4 <_svfiprintf_r+0xa0>
 801854e:	9b03      	ldr	r3, [sp, #12]
 8018550:	1d19      	adds	r1, r3, #4
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	9103      	str	r1, [sp, #12]
 8018556:	2b00      	cmp	r3, #0
 8018558:	bfbb      	ittet	lt
 801855a:	425b      	neglt	r3, r3
 801855c:	f042 0202 	orrlt.w	r2, r2, #2
 8018560:	9307      	strge	r3, [sp, #28]
 8018562:	9307      	strlt	r3, [sp, #28]
 8018564:	bfb8      	it	lt
 8018566:	9204      	strlt	r2, [sp, #16]
 8018568:	7823      	ldrb	r3, [r4, #0]
 801856a:	2b2e      	cmp	r3, #46	@ 0x2e
 801856c:	d10a      	bne.n	8018584 <_svfiprintf_r+0x130>
 801856e:	7863      	ldrb	r3, [r4, #1]
 8018570:	2b2a      	cmp	r3, #42	@ 0x2a
 8018572:	d132      	bne.n	80185da <_svfiprintf_r+0x186>
 8018574:	9b03      	ldr	r3, [sp, #12]
 8018576:	1d1a      	adds	r2, r3, #4
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	9203      	str	r2, [sp, #12]
 801857c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018580:	3402      	adds	r4, #2
 8018582:	9305      	str	r3, [sp, #20]
 8018584:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018648 <_svfiprintf_r+0x1f4>
 8018588:	7821      	ldrb	r1, [r4, #0]
 801858a:	2203      	movs	r2, #3
 801858c:	4650      	mov	r0, sl
 801858e:	f7e7 feaf 	bl	80002f0 <memchr>
 8018592:	b138      	cbz	r0, 80185a4 <_svfiprintf_r+0x150>
 8018594:	9b04      	ldr	r3, [sp, #16]
 8018596:	eba0 000a 	sub.w	r0, r0, sl
 801859a:	2240      	movs	r2, #64	@ 0x40
 801859c:	4082      	lsls	r2, r0
 801859e:	4313      	orrs	r3, r2
 80185a0:	3401      	adds	r4, #1
 80185a2:	9304      	str	r3, [sp, #16]
 80185a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185a8:	4824      	ldr	r0, [pc, #144]	@ (801863c <_svfiprintf_r+0x1e8>)
 80185aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80185ae:	2206      	movs	r2, #6
 80185b0:	f7e7 fe9e 	bl	80002f0 <memchr>
 80185b4:	2800      	cmp	r0, #0
 80185b6:	d036      	beq.n	8018626 <_svfiprintf_r+0x1d2>
 80185b8:	4b21      	ldr	r3, [pc, #132]	@ (8018640 <_svfiprintf_r+0x1ec>)
 80185ba:	bb1b      	cbnz	r3, 8018604 <_svfiprintf_r+0x1b0>
 80185bc:	9b03      	ldr	r3, [sp, #12]
 80185be:	3307      	adds	r3, #7
 80185c0:	f023 0307 	bic.w	r3, r3, #7
 80185c4:	3308      	adds	r3, #8
 80185c6:	9303      	str	r3, [sp, #12]
 80185c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185ca:	4433      	add	r3, r6
 80185cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80185ce:	e76a      	b.n	80184a6 <_svfiprintf_r+0x52>
 80185d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80185d4:	460c      	mov	r4, r1
 80185d6:	2001      	movs	r0, #1
 80185d8:	e7a8      	b.n	801852c <_svfiprintf_r+0xd8>
 80185da:	2300      	movs	r3, #0
 80185dc:	3401      	adds	r4, #1
 80185de:	9305      	str	r3, [sp, #20]
 80185e0:	4619      	mov	r1, r3
 80185e2:	f04f 0c0a 	mov.w	ip, #10
 80185e6:	4620      	mov	r0, r4
 80185e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185ec:	3a30      	subs	r2, #48	@ 0x30
 80185ee:	2a09      	cmp	r2, #9
 80185f0:	d903      	bls.n	80185fa <_svfiprintf_r+0x1a6>
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d0c6      	beq.n	8018584 <_svfiprintf_r+0x130>
 80185f6:	9105      	str	r1, [sp, #20]
 80185f8:	e7c4      	b.n	8018584 <_svfiprintf_r+0x130>
 80185fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80185fe:	4604      	mov	r4, r0
 8018600:	2301      	movs	r3, #1
 8018602:	e7f0      	b.n	80185e6 <_svfiprintf_r+0x192>
 8018604:	ab03      	add	r3, sp, #12
 8018606:	9300      	str	r3, [sp, #0]
 8018608:	462a      	mov	r2, r5
 801860a:	4b0e      	ldr	r3, [pc, #56]	@ (8018644 <_svfiprintf_r+0x1f0>)
 801860c:	a904      	add	r1, sp, #16
 801860e:	4638      	mov	r0, r7
 8018610:	f3af 8000 	nop.w
 8018614:	1c42      	adds	r2, r0, #1
 8018616:	4606      	mov	r6, r0
 8018618:	d1d6      	bne.n	80185c8 <_svfiprintf_r+0x174>
 801861a:	89ab      	ldrh	r3, [r5, #12]
 801861c:	065b      	lsls	r3, r3, #25
 801861e:	f53f af2d 	bmi.w	801847c <_svfiprintf_r+0x28>
 8018622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018624:	e72c      	b.n	8018480 <_svfiprintf_r+0x2c>
 8018626:	ab03      	add	r3, sp, #12
 8018628:	9300      	str	r3, [sp, #0]
 801862a:	462a      	mov	r2, r5
 801862c:	4b05      	ldr	r3, [pc, #20]	@ (8018644 <_svfiprintf_r+0x1f0>)
 801862e:	a904      	add	r1, sp, #16
 8018630:	4638      	mov	r0, r7
 8018632:	f000 f879 	bl	8018728 <_printf_i>
 8018636:	e7ed      	b.n	8018614 <_svfiprintf_r+0x1c0>
 8018638:	08019064 	.word	0x08019064
 801863c:	0801906e 	.word	0x0801906e
 8018640:	00000000 	.word	0x00000000
 8018644:	0801839d 	.word	0x0801839d
 8018648:	0801906a 	.word	0x0801906a

0801864c <_printf_common>:
 801864c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018650:	4616      	mov	r6, r2
 8018652:	4698      	mov	r8, r3
 8018654:	688a      	ldr	r2, [r1, #8]
 8018656:	690b      	ldr	r3, [r1, #16]
 8018658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801865c:	4293      	cmp	r3, r2
 801865e:	bfb8      	it	lt
 8018660:	4613      	movlt	r3, r2
 8018662:	6033      	str	r3, [r6, #0]
 8018664:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018668:	4607      	mov	r7, r0
 801866a:	460c      	mov	r4, r1
 801866c:	b10a      	cbz	r2, 8018672 <_printf_common+0x26>
 801866e:	3301      	adds	r3, #1
 8018670:	6033      	str	r3, [r6, #0]
 8018672:	6823      	ldr	r3, [r4, #0]
 8018674:	0699      	lsls	r1, r3, #26
 8018676:	bf42      	ittt	mi
 8018678:	6833      	ldrmi	r3, [r6, #0]
 801867a:	3302      	addmi	r3, #2
 801867c:	6033      	strmi	r3, [r6, #0]
 801867e:	6825      	ldr	r5, [r4, #0]
 8018680:	f015 0506 	ands.w	r5, r5, #6
 8018684:	d106      	bne.n	8018694 <_printf_common+0x48>
 8018686:	f104 0a19 	add.w	sl, r4, #25
 801868a:	68e3      	ldr	r3, [r4, #12]
 801868c:	6832      	ldr	r2, [r6, #0]
 801868e:	1a9b      	subs	r3, r3, r2
 8018690:	42ab      	cmp	r3, r5
 8018692:	dc26      	bgt.n	80186e2 <_printf_common+0x96>
 8018694:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018698:	6822      	ldr	r2, [r4, #0]
 801869a:	3b00      	subs	r3, #0
 801869c:	bf18      	it	ne
 801869e:	2301      	movne	r3, #1
 80186a0:	0692      	lsls	r2, r2, #26
 80186a2:	d42b      	bmi.n	80186fc <_printf_common+0xb0>
 80186a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80186a8:	4641      	mov	r1, r8
 80186aa:	4638      	mov	r0, r7
 80186ac:	47c8      	blx	r9
 80186ae:	3001      	adds	r0, #1
 80186b0:	d01e      	beq.n	80186f0 <_printf_common+0xa4>
 80186b2:	6823      	ldr	r3, [r4, #0]
 80186b4:	6922      	ldr	r2, [r4, #16]
 80186b6:	f003 0306 	and.w	r3, r3, #6
 80186ba:	2b04      	cmp	r3, #4
 80186bc:	bf02      	ittt	eq
 80186be:	68e5      	ldreq	r5, [r4, #12]
 80186c0:	6833      	ldreq	r3, [r6, #0]
 80186c2:	1aed      	subeq	r5, r5, r3
 80186c4:	68a3      	ldr	r3, [r4, #8]
 80186c6:	bf0c      	ite	eq
 80186c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186cc:	2500      	movne	r5, #0
 80186ce:	4293      	cmp	r3, r2
 80186d0:	bfc4      	itt	gt
 80186d2:	1a9b      	subgt	r3, r3, r2
 80186d4:	18ed      	addgt	r5, r5, r3
 80186d6:	2600      	movs	r6, #0
 80186d8:	341a      	adds	r4, #26
 80186da:	42b5      	cmp	r5, r6
 80186dc:	d11a      	bne.n	8018714 <_printf_common+0xc8>
 80186de:	2000      	movs	r0, #0
 80186e0:	e008      	b.n	80186f4 <_printf_common+0xa8>
 80186e2:	2301      	movs	r3, #1
 80186e4:	4652      	mov	r2, sl
 80186e6:	4641      	mov	r1, r8
 80186e8:	4638      	mov	r0, r7
 80186ea:	47c8      	blx	r9
 80186ec:	3001      	adds	r0, #1
 80186ee:	d103      	bne.n	80186f8 <_printf_common+0xac>
 80186f0:	f04f 30ff 	mov.w	r0, #4294967295
 80186f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186f8:	3501      	adds	r5, #1
 80186fa:	e7c6      	b.n	801868a <_printf_common+0x3e>
 80186fc:	18e1      	adds	r1, r4, r3
 80186fe:	1c5a      	adds	r2, r3, #1
 8018700:	2030      	movs	r0, #48	@ 0x30
 8018702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018706:	4422      	add	r2, r4
 8018708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801870c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018710:	3302      	adds	r3, #2
 8018712:	e7c7      	b.n	80186a4 <_printf_common+0x58>
 8018714:	2301      	movs	r3, #1
 8018716:	4622      	mov	r2, r4
 8018718:	4641      	mov	r1, r8
 801871a:	4638      	mov	r0, r7
 801871c:	47c8      	blx	r9
 801871e:	3001      	adds	r0, #1
 8018720:	d0e6      	beq.n	80186f0 <_printf_common+0xa4>
 8018722:	3601      	adds	r6, #1
 8018724:	e7d9      	b.n	80186da <_printf_common+0x8e>
	...

08018728 <_printf_i>:
 8018728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801872c:	7e0f      	ldrb	r7, [r1, #24]
 801872e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018730:	2f78      	cmp	r7, #120	@ 0x78
 8018732:	4691      	mov	r9, r2
 8018734:	4680      	mov	r8, r0
 8018736:	460c      	mov	r4, r1
 8018738:	469a      	mov	sl, r3
 801873a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801873e:	d807      	bhi.n	8018750 <_printf_i+0x28>
 8018740:	2f62      	cmp	r7, #98	@ 0x62
 8018742:	d80a      	bhi.n	801875a <_printf_i+0x32>
 8018744:	2f00      	cmp	r7, #0
 8018746:	f000 80d1 	beq.w	80188ec <_printf_i+0x1c4>
 801874a:	2f58      	cmp	r7, #88	@ 0x58
 801874c:	f000 80b8 	beq.w	80188c0 <_printf_i+0x198>
 8018750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018758:	e03a      	b.n	80187d0 <_printf_i+0xa8>
 801875a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801875e:	2b15      	cmp	r3, #21
 8018760:	d8f6      	bhi.n	8018750 <_printf_i+0x28>
 8018762:	a101      	add	r1, pc, #4	@ (adr r1, 8018768 <_printf_i+0x40>)
 8018764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018768:	080187c1 	.word	0x080187c1
 801876c:	080187d5 	.word	0x080187d5
 8018770:	08018751 	.word	0x08018751
 8018774:	08018751 	.word	0x08018751
 8018778:	08018751 	.word	0x08018751
 801877c:	08018751 	.word	0x08018751
 8018780:	080187d5 	.word	0x080187d5
 8018784:	08018751 	.word	0x08018751
 8018788:	08018751 	.word	0x08018751
 801878c:	08018751 	.word	0x08018751
 8018790:	08018751 	.word	0x08018751
 8018794:	080188d3 	.word	0x080188d3
 8018798:	080187ff 	.word	0x080187ff
 801879c:	0801888d 	.word	0x0801888d
 80187a0:	08018751 	.word	0x08018751
 80187a4:	08018751 	.word	0x08018751
 80187a8:	080188f5 	.word	0x080188f5
 80187ac:	08018751 	.word	0x08018751
 80187b0:	080187ff 	.word	0x080187ff
 80187b4:	08018751 	.word	0x08018751
 80187b8:	08018751 	.word	0x08018751
 80187bc:	08018895 	.word	0x08018895
 80187c0:	6833      	ldr	r3, [r6, #0]
 80187c2:	1d1a      	adds	r2, r3, #4
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	6032      	str	r2, [r6, #0]
 80187c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80187cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80187d0:	2301      	movs	r3, #1
 80187d2:	e09c      	b.n	801890e <_printf_i+0x1e6>
 80187d4:	6833      	ldr	r3, [r6, #0]
 80187d6:	6820      	ldr	r0, [r4, #0]
 80187d8:	1d19      	adds	r1, r3, #4
 80187da:	6031      	str	r1, [r6, #0]
 80187dc:	0606      	lsls	r6, r0, #24
 80187de:	d501      	bpl.n	80187e4 <_printf_i+0xbc>
 80187e0:	681d      	ldr	r5, [r3, #0]
 80187e2:	e003      	b.n	80187ec <_printf_i+0xc4>
 80187e4:	0645      	lsls	r5, r0, #25
 80187e6:	d5fb      	bpl.n	80187e0 <_printf_i+0xb8>
 80187e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80187ec:	2d00      	cmp	r5, #0
 80187ee:	da03      	bge.n	80187f8 <_printf_i+0xd0>
 80187f0:	232d      	movs	r3, #45	@ 0x2d
 80187f2:	426d      	negs	r5, r5
 80187f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80187f8:	4858      	ldr	r0, [pc, #352]	@ (801895c <_printf_i+0x234>)
 80187fa:	230a      	movs	r3, #10
 80187fc:	e011      	b.n	8018822 <_printf_i+0xfa>
 80187fe:	6821      	ldr	r1, [r4, #0]
 8018800:	6833      	ldr	r3, [r6, #0]
 8018802:	0608      	lsls	r0, r1, #24
 8018804:	f853 5b04 	ldr.w	r5, [r3], #4
 8018808:	d402      	bmi.n	8018810 <_printf_i+0xe8>
 801880a:	0649      	lsls	r1, r1, #25
 801880c:	bf48      	it	mi
 801880e:	b2ad      	uxthmi	r5, r5
 8018810:	2f6f      	cmp	r7, #111	@ 0x6f
 8018812:	4852      	ldr	r0, [pc, #328]	@ (801895c <_printf_i+0x234>)
 8018814:	6033      	str	r3, [r6, #0]
 8018816:	bf14      	ite	ne
 8018818:	230a      	movne	r3, #10
 801881a:	2308      	moveq	r3, #8
 801881c:	2100      	movs	r1, #0
 801881e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018822:	6866      	ldr	r6, [r4, #4]
 8018824:	60a6      	str	r6, [r4, #8]
 8018826:	2e00      	cmp	r6, #0
 8018828:	db05      	blt.n	8018836 <_printf_i+0x10e>
 801882a:	6821      	ldr	r1, [r4, #0]
 801882c:	432e      	orrs	r6, r5
 801882e:	f021 0104 	bic.w	r1, r1, #4
 8018832:	6021      	str	r1, [r4, #0]
 8018834:	d04b      	beq.n	80188ce <_printf_i+0x1a6>
 8018836:	4616      	mov	r6, r2
 8018838:	fbb5 f1f3 	udiv	r1, r5, r3
 801883c:	fb03 5711 	mls	r7, r3, r1, r5
 8018840:	5dc7      	ldrb	r7, [r0, r7]
 8018842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018846:	462f      	mov	r7, r5
 8018848:	42bb      	cmp	r3, r7
 801884a:	460d      	mov	r5, r1
 801884c:	d9f4      	bls.n	8018838 <_printf_i+0x110>
 801884e:	2b08      	cmp	r3, #8
 8018850:	d10b      	bne.n	801886a <_printf_i+0x142>
 8018852:	6823      	ldr	r3, [r4, #0]
 8018854:	07df      	lsls	r7, r3, #31
 8018856:	d508      	bpl.n	801886a <_printf_i+0x142>
 8018858:	6923      	ldr	r3, [r4, #16]
 801885a:	6861      	ldr	r1, [r4, #4]
 801885c:	4299      	cmp	r1, r3
 801885e:	bfde      	ittt	le
 8018860:	2330      	movle	r3, #48	@ 0x30
 8018862:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018866:	f106 36ff 	addle.w	r6, r6, #4294967295
 801886a:	1b92      	subs	r2, r2, r6
 801886c:	6122      	str	r2, [r4, #16]
 801886e:	f8cd a000 	str.w	sl, [sp]
 8018872:	464b      	mov	r3, r9
 8018874:	aa03      	add	r2, sp, #12
 8018876:	4621      	mov	r1, r4
 8018878:	4640      	mov	r0, r8
 801887a:	f7ff fee7 	bl	801864c <_printf_common>
 801887e:	3001      	adds	r0, #1
 8018880:	d14a      	bne.n	8018918 <_printf_i+0x1f0>
 8018882:	f04f 30ff 	mov.w	r0, #4294967295
 8018886:	b004      	add	sp, #16
 8018888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801888c:	6823      	ldr	r3, [r4, #0]
 801888e:	f043 0320 	orr.w	r3, r3, #32
 8018892:	6023      	str	r3, [r4, #0]
 8018894:	4832      	ldr	r0, [pc, #200]	@ (8018960 <_printf_i+0x238>)
 8018896:	2778      	movs	r7, #120	@ 0x78
 8018898:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801889c:	6823      	ldr	r3, [r4, #0]
 801889e:	6831      	ldr	r1, [r6, #0]
 80188a0:	061f      	lsls	r7, r3, #24
 80188a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80188a6:	d402      	bmi.n	80188ae <_printf_i+0x186>
 80188a8:	065f      	lsls	r7, r3, #25
 80188aa:	bf48      	it	mi
 80188ac:	b2ad      	uxthmi	r5, r5
 80188ae:	6031      	str	r1, [r6, #0]
 80188b0:	07d9      	lsls	r1, r3, #31
 80188b2:	bf44      	itt	mi
 80188b4:	f043 0320 	orrmi.w	r3, r3, #32
 80188b8:	6023      	strmi	r3, [r4, #0]
 80188ba:	b11d      	cbz	r5, 80188c4 <_printf_i+0x19c>
 80188bc:	2310      	movs	r3, #16
 80188be:	e7ad      	b.n	801881c <_printf_i+0xf4>
 80188c0:	4826      	ldr	r0, [pc, #152]	@ (801895c <_printf_i+0x234>)
 80188c2:	e7e9      	b.n	8018898 <_printf_i+0x170>
 80188c4:	6823      	ldr	r3, [r4, #0]
 80188c6:	f023 0320 	bic.w	r3, r3, #32
 80188ca:	6023      	str	r3, [r4, #0]
 80188cc:	e7f6      	b.n	80188bc <_printf_i+0x194>
 80188ce:	4616      	mov	r6, r2
 80188d0:	e7bd      	b.n	801884e <_printf_i+0x126>
 80188d2:	6833      	ldr	r3, [r6, #0]
 80188d4:	6825      	ldr	r5, [r4, #0]
 80188d6:	6961      	ldr	r1, [r4, #20]
 80188d8:	1d18      	adds	r0, r3, #4
 80188da:	6030      	str	r0, [r6, #0]
 80188dc:	062e      	lsls	r6, r5, #24
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	d501      	bpl.n	80188e6 <_printf_i+0x1be>
 80188e2:	6019      	str	r1, [r3, #0]
 80188e4:	e002      	b.n	80188ec <_printf_i+0x1c4>
 80188e6:	0668      	lsls	r0, r5, #25
 80188e8:	d5fb      	bpl.n	80188e2 <_printf_i+0x1ba>
 80188ea:	8019      	strh	r1, [r3, #0]
 80188ec:	2300      	movs	r3, #0
 80188ee:	6123      	str	r3, [r4, #16]
 80188f0:	4616      	mov	r6, r2
 80188f2:	e7bc      	b.n	801886e <_printf_i+0x146>
 80188f4:	6833      	ldr	r3, [r6, #0]
 80188f6:	1d1a      	adds	r2, r3, #4
 80188f8:	6032      	str	r2, [r6, #0]
 80188fa:	681e      	ldr	r6, [r3, #0]
 80188fc:	6862      	ldr	r2, [r4, #4]
 80188fe:	2100      	movs	r1, #0
 8018900:	4630      	mov	r0, r6
 8018902:	f7e7 fcf5 	bl	80002f0 <memchr>
 8018906:	b108      	cbz	r0, 801890c <_printf_i+0x1e4>
 8018908:	1b80      	subs	r0, r0, r6
 801890a:	6060      	str	r0, [r4, #4]
 801890c:	6863      	ldr	r3, [r4, #4]
 801890e:	6123      	str	r3, [r4, #16]
 8018910:	2300      	movs	r3, #0
 8018912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018916:	e7aa      	b.n	801886e <_printf_i+0x146>
 8018918:	6923      	ldr	r3, [r4, #16]
 801891a:	4632      	mov	r2, r6
 801891c:	4649      	mov	r1, r9
 801891e:	4640      	mov	r0, r8
 8018920:	47d0      	blx	sl
 8018922:	3001      	adds	r0, #1
 8018924:	d0ad      	beq.n	8018882 <_printf_i+0x15a>
 8018926:	6823      	ldr	r3, [r4, #0]
 8018928:	079b      	lsls	r3, r3, #30
 801892a:	d413      	bmi.n	8018954 <_printf_i+0x22c>
 801892c:	68e0      	ldr	r0, [r4, #12]
 801892e:	9b03      	ldr	r3, [sp, #12]
 8018930:	4298      	cmp	r0, r3
 8018932:	bfb8      	it	lt
 8018934:	4618      	movlt	r0, r3
 8018936:	e7a6      	b.n	8018886 <_printf_i+0x15e>
 8018938:	2301      	movs	r3, #1
 801893a:	4632      	mov	r2, r6
 801893c:	4649      	mov	r1, r9
 801893e:	4640      	mov	r0, r8
 8018940:	47d0      	blx	sl
 8018942:	3001      	adds	r0, #1
 8018944:	d09d      	beq.n	8018882 <_printf_i+0x15a>
 8018946:	3501      	adds	r5, #1
 8018948:	68e3      	ldr	r3, [r4, #12]
 801894a:	9903      	ldr	r1, [sp, #12]
 801894c:	1a5b      	subs	r3, r3, r1
 801894e:	42ab      	cmp	r3, r5
 8018950:	dcf2      	bgt.n	8018938 <_printf_i+0x210>
 8018952:	e7eb      	b.n	801892c <_printf_i+0x204>
 8018954:	2500      	movs	r5, #0
 8018956:	f104 0619 	add.w	r6, r4, #25
 801895a:	e7f5      	b.n	8018948 <_printf_i+0x220>
 801895c:	08019075 	.word	0x08019075
 8018960:	08019086 	.word	0x08019086

08018964 <memmove>:
 8018964:	4288      	cmp	r0, r1
 8018966:	b510      	push	{r4, lr}
 8018968:	eb01 0402 	add.w	r4, r1, r2
 801896c:	d902      	bls.n	8018974 <memmove+0x10>
 801896e:	4284      	cmp	r4, r0
 8018970:	4623      	mov	r3, r4
 8018972:	d807      	bhi.n	8018984 <memmove+0x20>
 8018974:	1e43      	subs	r3, r0, #1
 8018976:	42a1      	cmp	r1, r4
 8018978:	d008      	beq.n	801898c <memmove+0x28>
 801897a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801897e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018982:	e7f8      	b.n	8018976 <memmove+0x12>
 8018984:	4402      	add	r2, r0
 8018986:	4601      	mov	r1, r0
 8018988:	428a      	cmp	r2, r1
 801898a:	d100      	bne.n	801898e <memmove+0x2a>
 801898c:	bd10      	pop	{r4, pc}
 801898e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018996:	e7f7      	b.n	8018988 <memmove+0x24>

08018998 <_sbrk_r>:
 8018998:	b538      	push	{r3, r4, r5, lr}
 801899a:	4d06      	ldr	r5, [pc, #24]	@ (80189b4 <_sbrk_r+0x1c>)
 801899c:	2300      	movs	r3, #0
 801899e:	4604      	mov	r4, r0
 80189a0:	4608      	mov	r0, r1
 80189a2:	602b      	str	r3, [r5, #0]
 80189a4:	f7e9 fbfe 	bl	80021a4 <_sbrk>
 80189a8:	1c43      	adds	r3, r0, #1
 80189aa:	d102      	bne.n	80189b2 <_sbrk_r+0x1a>
 80189ac:	682b      	ldr	r3, [r5, #0]
 80189ae:	b103      	cbz	r3, 80189b2 <_sbrk_r+0x1a>
 80189b0:	6023      	str	r3, [r4, #0]
 80189b2:	bd38      	pop	{r3, r4, r5, pc}
 80189b4:	2403312c 	.word	0x2403312c

080189b8 <_realloc_r>:
 80189b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189bc:	4607      	mov	r7, r0
 80189be:	4614      	mov	r4, r2
 80189c0:	460d      	mov	r5, r1
 80189c2:	b921      	cbnz	r1, 80189ce <_realloc_r+0x16>
 80189c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189c8:	4611      	mov	r1, r2
 80189ca:	f7ff bc5b 	b.w	8018284 <_malloc_r>
 80189ce:	b92a      	cbnz	r2, 80189dc <_realloc_r+0x24>
 80189d0:	f7ff fbec 	bl	80181ac <_free_r>
 80189d4:	4625      	mov	r5, r4
 80189d6:	4628      	mov	r0, r5
 80189d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189dc:	f000 f81a 	bl	8018a14 <_malloc_usable_size_r>
 80189e0:	4284      	cmp	r4, r0
 80189e2:	4606      	mov	r6, r0
 80189e4:	d802      	bhi.n	80189ec <_realloc_r+0x34>
 80189e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80189ea:	d8f4      	bhi.n	80189d6 <_realloc_r+0x1e>
 80189ec:	4621      	mov	r1, r4
 80189ee:	4638      	mov	r0, r7
 80189f0:	f7ff fc48 	bl	8018284 <_malloc_r>
 80189f4:	4680      	mov	r8, r0
 80189f6:	b908      	cbnz	r0, 80189fc <_realloc_r+0x44>
 80189f8:	4645      	mov	r5, r8
 80189fa:	e7ec      	b.n	80189d6 <_realloc_r+0x1e>
 80189fc:	42b4      	cmp	r4, r6
 80189fe:	4622      	mov	r2, r4
 8018a00:	4629      	mov	r1, r5
 8018a02:	bf28      	it	cs
 8018a04:	4632      	movcs	r2, r6
 8018a06:	f7ff fbc3 	bl	8018190 <memcpy>
 8018a0a:	4629      	mov	r1, r5
 8018a0c:	4638      	mov	r0, r7
 8018a0e:	f7ff fbcd 	bl	80181ac <_free_r>
 8018a12:	e7f1      	b.n	80189f8 <_realloc_r+0x40>

08018a14 <_malloc_usable_size_r>:
 8018a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a18:	1f18      	subs	r0, r3, #4
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	bfbc      	itt	lt
 8018a1e:	580b      	ldrlt	r3, [r1, r0]
 8018a20:	18c0      	addlt	r0, r0, r3
 8018a22:	4770      	bx	lr

08018a24 <_init>:
 8018a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a26:	bf00      	nop
 8018a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a2a:	bc08      	pop	{r3}
 8018a2c:	469e      	mov	lr, r3
 8018a2e:	4770      	bx	lr

08018a30 <_fini>:
 8018a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a32:	bf00      	nop
 8018a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a36:	bc08      	pop	{r3}
 8018a38:	469e      	mov	lr, r3
 8018a3a:	4770      	bx	lr
