
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aee0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  0801b180  0801b180  0001c180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b980  0801b980  0001c980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b988  0801b988  0001c988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b98c  0801b98c  0001c98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000394  24000000  0801b990  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00048a8c  24000394  0801bd24  0001d394  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24048e20  0801bd24  0001de20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d394  2**0
                  CONTENTS, READONLY
 10 .debug_info   000342a3  00000000  00000000  0001d3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005e1b  00000000  00000000  00051665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000025e0  00000000  00000000  00057480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d8c  00000000  00000000  00059a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f967  00000000  00000000  0005b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003625a  00000000  00000000  0009b153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185103  00000000  00000000  000d13ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002564b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a8e4  00000000  00000000  002564f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00260dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000394 	.word	0x24000394
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b168 	.word	0x0801b168

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000398 	.word	0x24000398
 80002dc:	0801b168 	.word	0x0801b168

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fcad 	bl	800204c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 ff8f 	bl	8003614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f927 	bl	8000948 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 f99f 	bl	8000a3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fc57 	bl	8000fb0 <MX_GPIO_Init>
  MX_MDMA_Init();
 8000702:	f000 fc35 	bl	8000f70 <MX_MDMA_Init>
  MX_DMA_Init();
 8000706:	f000 fbe3 	bl	8000ed0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800070a:	f000 fb8f 	bl	8000e2c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070e:	f019 fb21 	bl	8019d54 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 8000712:	f000 fad1 	bl	8000cb8 <MX_JPEG_Init>
  MX_I2C1_Init();
 8000716:	f000 fa4f 	bl	8000bb8 <MX_I2C1_Init>
  MX_SPI4_Init();
 800071a:	f000 fae1 	bl	8000ce0 <MX_SPI4_Init>
  MX_ADC1_Init();
 800071e:	f000 f9bf 	bl	8000aa0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000722:	f000 fa89 	bl	8000c38 <MX_I2C2_Init>
  MX_TIM5_Init();
 8000726:	f000 fb31 	bl	8000d8c <MX_TIM5_Init>
//			  }
//		}

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 800072a:	2214      	movs	r2, #20
 800072c:	496b      	ldr	r1, [pc, #428]	@ (80008dc <main+0x1f4>)
 800072e:	486c      	ldr	r0, [pc, #432]	@ (80008e0 <main+0x1f8>)
 8000730:	f003 fbee 	bl	8003f10 <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	uint8_t init_result = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	71fb      	strb	r3, [r7, #7]

	hssd1.i2c_handle = &hi2c2;
 8000738:	4b6a      	ldr	r3, [pc, #424]	@ (80008e4 <main+0x1fc>)
 800073a:	4a6b      	ldr	r2, [pc, #428]	@ (80008e8 <main+0x200>)
 800073c:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800073e:	4b69      	ldr	r3, [pc, #420]	@ (80008e4 <main+0x1fc>)
 8000740:	223c      	movs	r2, #60	@ 0x3c
 8000742:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000744:	4b67      	ldr	r3, [pc, #412]	@ (80008e4 <main+0x1fc>)
 8000746:	4a69      	ldr	r2, [pc, #420]	@ (80008ec <main+0x204>)
 8000748:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd1);
 800074a:	4866      	ldr	r0, [pc, #408]	@ (80008e4 <main+0x1fc>)
 800074c:	f002 fad8 	bl	8002d00 <SSD1306_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d00f      	beq.n	800077a <main+0x92>
		sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	461a      	mov	r2, r3
 800075e:	4964      	ldr	r1, [pc, #400]	@ (80008f0 <main+0x208>)
 8000760:	4864      	ldr	r0, [pc, #400]	@ (80008f4 <main+0x20c>)
 8000762:	f01a f907 	bl	801a974 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000766:	4863      	ldr	r0, [pc, #396]	@ (80008f4 <main+0x20c>)
 8000768:	f7ff fdba 	bl	80002e0 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	4619      	mov	r1, r3
 8000770:	4860      	ldr	r0, [pc, #384]	@ (80008f4 <main+0x20c>)
 8000772:	f019 fbc9 	bl	8019f08 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000776:	f7ff ffa1 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	hssd2.i2c_handle = &hi2c1;
 800077a:	4b5f      	ldr	r3, [pc, #380]	@ (80008f8 <main+0x210>)
 800077c:	4a5f      	ldr	r2, [pc, #380]	@ (80008fc <main+0x214>)
 800077e:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 8000780:	4b5d      	ldr	r3, [pc, #372]	@ (80008f8 <main+0x210>)
 8000782:	223c      	movs	r2, #60	@ 0x3c
 8000784:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 8000786:	4b5c      	ldr	r3, [pc, #368]	@ (80008f8 <main+0x210>)
 8000788:	4a5d      	ldr	r2, [pc, #372]	@ (8000900 <main+0x218>)
 800078a:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd2);
 800078c:	485a      	ldr	r0, [pc, #360]	@ (80008f8 <main+0x210>)
 800078e:	f002 fab7 	bl	8002d00 <SSD1306_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00f      	beq.n	80007bc <main+0xd4>
		sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	461a      	mov	r2, r3
 80007a0:	4958      	ldr	r1, [pc, #352]	@ (8000904 <main+0x21c>)
 80007a2:	4854      	ldr	r0, [pc, #336]	@ (80008f4 <main+0x20c>)
 80007a4:	f01a f8e6 	bl	801a974 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007a8:	4852      	ldr	r0, [pc, #328]	@ (80008f4 <main+0x20c>)
 80007aa:	f7ff fd99 	bl	80002e0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4619      	mov	r1, r3
 80007b2:	4850      	ldr	r0, [pc, #320]	@ (80008f4 <main+0x20c>)
 80007b4:	f019 fba8 	bl	8019f08 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80007b8:	f7ff ff80 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 80007bc:	4b52      	ldr	r3, [pc, #328]	@ (8000908 <main+0x220>)
 80007be:	4a53      	ldr	r2, [pc, #332]	@ (800090c <main+0x224>)
 80007c0:	601a      	str	r2, [r3, #0]
	hst7789.spi_state = 0;
 80007c2:	4b51      	ldr	r3, [pc, #324]	@ (8000908 <main+0x220>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000908 <main+0x220>)
 80007ca:	4a51      	ldr	r2, [pc, #324]	@ (8000910 <main+0x228>)
 80007cc:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000908 <main+0x220>)
 80007d0:	2220      	movs	r2, #32
 80007d2:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 80007d4:	4b4c      	ldr	r3, [pc, #304]	@ (8000908 <main+0x220>)
 80007d6:	4a4f      	ldr	r2, [pc, #316]	@ (8000914 <main+0x22c>)
 80007d8:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 80007da:	484b      	ldr	r0, [pc, #300]	@ (8000908 <main+0x220>)
 80007dc:	f002 fbf4 	bl	8002fc8 <ST7789_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00f      	beq.n	800080a <main+0x122>
		sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	461a      	mov	r2, r3
 80007ee:	494a      	ldr	r1, [pc, #296]	@ (8000918 <main+0x230>)
 80007f0:	4840      	ldr	r0, [pc, #256]	@ (80008f4 <main+0x20c>)
 80007f2:	f01a f8bf 	bl	801a974 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007f6:	483f      	ldr	r0, [pc, #252]	@ (80008f4 <main+0x20c>)
 80007f8:	f7ff fd72 	bl	80002e0 <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4619      	mov	r1, r3
 8000800:	483c      	ldr	r0, [pc, #240]	@ (80008f4 <main+0x20c>)
 8000802:	f019 fb81 	bl	8019f08 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000806:	f7ff ff59 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}


	ST7789_Clear(&hst7789);		 // Clear the screen
 800080a:	483f      	ldr	r0, [pc, #252]	@ (8000908 <main+0x220>)
 800080c:	f002 fcfa 	bl	8003204 <ST7789_Clear>
	ST7789_Draw_NOSIG(&hst7789); // Draw the NOSIG symbol
 8000810:	483d      	ldr	r0, [pc, #244]	@ (8000908 <main+0x220>)
 8000812:	f002 fd09 	bl	8003228 <ST7789_Draw_NOSIG>
	st7789_state = 1;			 // Flag LCD as requested
 8000816:	4b41      	ldr	r3, [pc, #260]	@ (800091c <main+0x234>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]

	// ------------------------------------------------------------ SETUP MENU -- //
	hmenu.ssdL_handle = &hssd1;
 800081c:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <main+0x238>)
 800081e:	4a31      	ldr	r2, [pc, #196]	@ (80008e4 <main+0x1fc>)
 8000820:	601a      	str	r2, [r3, #0]
	hmenu.ssdR_handle = &hssd2;
 8000822:	4b3f      	ldr	r3, [pc, #252]	@ (8000920 <main+0x238>)
 8000824:	4a34      	ldr	r2, [pc, #208]	@ (80008f8 <main+0x210>)
 8000826:	605a      	str	r2, [r3, #4]
	hmenu.page_anim = 0;
 8000828:	4b3d      	ldr	r3, [pc, #244]	@ (8000920 <main+0x238>)
 800082a:	2200      	movs	r2, #0
 800082c:	755a      	strb	r2, [r3, #21]
	MENU_Init(&hmenu);
 800082e:	483c      	ldr	r0, [pc, #240]	@ (8000920 <main+0x238>)
 8000830:	f016 fdfa 	bl	8017428 <MENU_Init>

	// ------------------------------------------------------------ SETUP JPEG DECODE -- //
	// override the header
	// DO NOT MODIFY THE JPEG_RAW BUF BELOW BYTE 526
	memcpy(jpeg_raw1, jpeg_header, JPEG_HEADERSIZE);
 8000834:	4a3b      	ldr	r2, [pc, #236]	@ (8000924 <main+0x23c>)
 8000836:	4b3c      	ldr	r3, [pc, #240]	@ (8000928 <main+0x240>)
 8000838:	4610      	mov	r0, r2
 800083a:	4619      	mov	r1, r3
 800083c:	f240 230e 	movw	r3, #526	@ 0x20e
 8000840:	461a      	mov	r2, r3
 8000842:	f01a f905 	bl	801aa50 <memcpy>
	memcpy(jpeg_raw2, jpeg_header, JPEG_HEADERSIZE);
 8000846:	4a39      	ldr	r2, [pc, #228]	@ (800092c <main+0x244>)
 8000848:	4b37      	ldr	r3, [pc, #220]	@ (8000928 <main+0x240>)
 800084a:	4610      	mov	r0, r2
 800084c:	4619      	mov	r1, r3
 800084e:	f240 230e 	movw	r3, #526	@ 0x20e
 8000852:	461a      	mov	r2, r3
 8000854:	f01a f8fc 	bl	801aa50 <memcpy>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 8000858:	4b35      	ldr	r3, [pc, #212]	@ (8000930 <main+0x248>)
 800085a:	4a36      	ldr	r2, [pc, #216]	@ (8000934 <main+0x24c>)
 800085c:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 5;
 800085e:	4b34      	ldr	r3, [pc, #208]	@ (8000930 <main+0x248>)
 8000860:	2205      	movs	r2, #5
 8000862:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 5;
 8000864:	4b32      	ldr	r3, [pc, #200]	@ (8000930 <main+0x248>)
 8000866:	2205      	movs	r2, #5
 8000868:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 800086c:	4830      	ldr	r0, [pc, #192]	@ (8000930 <main+0x248>)
 800086e:	f016 fb9c 	bl	8016faa <XBEE_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d00e      	beq.n	8000896 <main+0x1ae>
		sprintf(ssd_msg, " Failed to Init XBEE");
 8000878:	492f      	ldr	r1, [pc, #188]	@ (8000938 <main+0x250>)
 800087a:	4830      	ldr	r0, [pc, #192]	@ (800093c <main+0x254>)
 800087c:	f01a f87a 	bl	801a974 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000880:	482e      	ldr	r0, [pc, #184]	@ (800093c <main+0x254>)
 8000882:	f7ff fd2d 	bl	80002e0 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	482b      	ldr	r0, [pc, #172]	@ (800093c <main+0x254>)
 800088e:	f001 fbb7 	bl	8002000 <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000892:	f7ff ff13 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK)
 8000896:	482a      	ldr	r0, [pc, #168]	@ (8000940 <main+0x258>)
 8000898:	f012 fbae 	bl	8012ff8 <HAL_TIM_Base_Start_IT>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00e      	beq.n	80008c0 <main+0x1d8>
	{
		sprintf(ssd_msg, " Failed to Start Watchdog");
 80008a2:	4928      	ldr	r1, [pc, #160]	@ (8000944 <main+0x25c>)
 80008a4:	4825      	ldr	r0, [pc, #148]	@ (800093c <main+0x254>)
 80008a6:	f01a f865 	bl	801a974 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80008aa:	4824      	ldr	r0, [pc, #144]	@ (800093c <main+0x254>)
 80008ac:	f7ff fd18 	bl	80002e0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	4821      	ldr	r0, [pc, #132]	@ (800093c <main+0x254>)
 80008b8:	f001 fba2 	bl	8002000 <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80008bc:	f7ff fefe 	bl	80006bc <__NVIC_SystemReset>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();		// Process any incoming packets
 80008c0:	f000 fd34 	bl	800132c <SCH_XBeeRX>
		SCH_GetInputs();	// Get user inputs
 80008c4:	f000 ff8a 	bl	80017dc <SCH_GetInputs>
		SCH_OLEDUpdate();	// Update the OLEDs
 80008c8:	f000 ff3e 	bl	8001748 <SCH_OLEDUpdate>
		SCH_LCDUpdate();	// Update the LCD
 80008cc:	f000 ff70 	bl	80017b0 <SCH_LCDUpdate>
		// Don't SEND anything
		// Don't bother processing images
		// Don't update the screen
		//if (wdog_network < WDOG_NETWORK_CUTOFF) {

			SCH_XBeeTX();		// Send any neccesarry outgoing packets
 80008d0:	f000 fda0 	bl	8001414 <SCH_XBeeTX>
			SCH_ImageDecode();	// Decode pending MCU blocks
 80008d4:	f000 fde4 	bl	80014a0 <SCH_ImageDecode>
		SCH_XBeeRX();		// Process any incoming packets
 80008d8:	e7f2      	b.n	80008c0 <main+0x1d8>
 80008da:	bf00      	nop
 80008dc:	24026af8 	.word	0x24026af8
 80008e0:	240003b0 	.word	0x240003b0
 80008e4:	240009d0 	.word	0x240009d0
 80008e8:	240004e0 	.word	0x240004e0
 80008ec:	240009f8 	.word	0x240009f8
 80008f0:	0801b180 	.word	0x0801b180
 80008f4:	2400125c 	.word	0x2400125c
 80008f8:	240009e4 	.word	0x240009e4
 80008fc:	2400048c 	.word	0x2400048c
 8000900:	24000df8 	.word	0x24000df8
 8000904:	0801b19c 	.word	0x0801b19c
 8000908:	240012dc 	.word	0x240012dc
 800090c:	24000754 	.word	0x24000754
 8000910:	58021000 	.word	0x58021000
 8000914:	240012f4 	.word	0x240012f4
 8000918:	0801b1b8 	.word	0x0801b1b8
 800091c:	24026af4 	.word	0x24026af4
 8000920:	240012c0 	.word	0x240012c0
 8000924:	24026b60 	.word	0x24026b60
 8000928:	24000030 	.word	0x24000030
 800092c:	240317e0 	.word	0x240317e0
 8000930:	24026b2c 	.word	0x24026b2c
 8000934:	240008a0 	.word	0x240008a0
 8000938:	0801b1d4 	.word	0x0801b1d4
 800093c:	240011f8 	.word	0x240011f8
 8000940:	24000854 	.word	0x24000854
 8000944:	0801b1ec 	.word	0x0801b1ec

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	@ 0x70
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000952:	224c      	movs	r2, #76	@ 0x4c
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f01a f82e 	bl	801a9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2220      	movs	r2, #32
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f01a f828 	bl	801a9b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000968:	2002      	movs	r0, #2
 800096a:	f00d fe15 	bl	800e598 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <SystemClock_Config+0xec>)
 8000974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000976:	4a2f      	ldr	r2, [pc, #188]	@ (8000a34 <SystemClock_Config+0xec>)
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800097e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <SystemClock_Config+0xec>)
 8000980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <SystemClock_Config+0xf0>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a2a      	ldr	r2, [pc, #168]	@ (8000a38 <SystemClock_Config+0xf0>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <SystemClock_Config+0xf0>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a0:	bf00      	nop
 80009a2:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <SystemClock_Config+0xf0>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009ae:	d1f8      	bne.n	80009a2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	2302      	movs	r3, #2
 80009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009c6:	2318      	movs	r3, #24
 80009c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009ce:	2306      	movs	r3, #6
 80009d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009d6:	230c      	movs	r3, #12
 80009d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009da:	2300      	movs	r3, #0
 80009dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00d fe20 	bl	800e62c <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009f2:	f001 fb57 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	233f      	movs	r3, #63	@ 0x3f
 80009f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2303      	movs	r3, #3
 80009fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a06:	2340      	movs	r3, #64	@ 0x40
 8000a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a0a:	2340      	movs	r3, #64	@ 0x40
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00e fa5f 	bl	800eee0 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a28:	f001 fb3c 	bl	80020a4 <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3770      	adds	r7, #112	@ 0x70
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	58000400 	.word	0x58000400
 8000a38:	58024800 	.word	0x58024800

08000a3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0b0      	sub	sp, #192	@ 0xc0
 8000a40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	22c0      	movs	r2, #192	@ 0xc0
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f019 ffb5 	bl	801a9b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 8000a4e:	f04f 0208 	mov.w	r2, #8
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a78:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f00e fdb5 	bl	800f5f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000a94:	f001 fb06 	bl	80020a4 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	37c0      	adds	r7, #192	@ 0xc0
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac4:	4b38      	ldr	r3, [pc, #224]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000ac6:	4a39      	ldr	r2, [pc, #228]	@ (8000bac <MX_ADC1_Init+0x10c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aca:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000acc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ad0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ad2:	4b35      	ldr	r3, [pc, #212]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ad8:	4b33      	ldr	r3, [pc, #204]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ade:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae4:	4b30      	ldr	r3, [pc, #192]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000af0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b02:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b08:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	481f      	ldr	r0, [pc, #124]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b2a:	f003 f84f 	bl	8003bcc <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b34:	f001 fab6 	bl	80020a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4819      	ldr	r0, [pc, #100]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b44:	f003 fffc 	bl	8004b40 <HAL_ADCEx_MultiModeConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b4e:	f001 faa9 	bl	80020a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b52:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_ADC1_Init+0x110>)
 8000b54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b56:	2306      	movs	r3, #6
 8000b58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b5e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b62:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b64:	2304      	movs	r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b76:	f003 faa3 	bl	80040c0 <HAL_ADC_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b80:	f001 fa90 	bl	80020a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_ADC1_Init+0x114>)
 8000b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_ADC1_Init+0x108>)
 8000b92:	f003 fa95 	bl	80040c0 <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b9c:	f001 fa82 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	@ 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	240003b0 	.word	0x240003b0
 8000bac:	40022000 	.word	0x40022000
 8000bb0:	0c900008 	.word	0x0c900008
 8000bb4:	10c00010 	.word	0x10c00010

08000bb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c30 <MX_I2C1_Init+0x78>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <MX_I2C1_Init+0x7c>)
 8000bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf2:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000bf4:	f007 fa42 	bl	800807c <HAL_I2C_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bfe:	f001 fa51 	bl	80020a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000c06:	f009 fe73 	bl	800a8f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c10:	f001 fa48 	bl	80020a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_I2C1_Init+0x74>)
 8000c18:	f009 feb5 	bl	800a986 <HAL_I2CEx_ConfigDigitalFilter>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c22:	f001 fa3f 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2400048c 	.word	0x2400048c
 8000c30:	40005400 	.word	0x40005400
 8000c34:	00401959 	.word	0x00401959

08000c38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb0 <MX_I2C2_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c44:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb4 <MX_I2C2_Init+0x7c>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c72:	480e      	ldr	r0, [pc, #56]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c74:	f007 fa02 	bl	800807c <HAL_I2C_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c7e:	f001 fa11 	bl	80020a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4809      	ldr	r0, [pc, #36]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c86:	f009 fe33 	bl	800a8f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c90:	f001 fa08 	bl	80020a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c94:	2100      	movs	r1, #0
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_I2C2_Init+0x74>)
 8000c98:	f009 fe75 	bl	800a986 <HAL_I2CEx_ConfigDigitalFilter>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ca2:	f001 f9ff 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	240004e0 	.word	0x240004e0
 8000cb0:	40005800 	.word	0x40005800
 8000cb4:	00401959 	.word	0x00401959

08000cb8 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_JPEG_Init+0x20>)
 8000cbe:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <MX_JPEG_Init+0x24>)
 8000cc0:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_JPEG_Init+0x20>)
 8000cc4:	f009 feac 	bl	800aa20 <HAL_JPEG_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000cce:	f001 f9e9 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000624 	.word	0x24000624
 8000cdc:	52003000 	.word	0x52003000

08000ce0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ce4:	4b27      	ldr	r3, [pc, #156]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000ce6:	4a28      	ldr	r2, [pc, #160]	@ (8000d88 <MX_SPI4_Init+0xa8>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000cec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cf0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000cf2:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000cf4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cf8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d0e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d12:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d38:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d40:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <MX_SPI4_Init+0xa4>)
 8000d72:	f011 f93f 	bl	8011ff4 <HAL_SPI_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d7c:	f001 f992 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	24000754 	.word	0x24000754
 8000d88:	40013400 	.word	0x40013400

08000d8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000dac:	4a1d      	ldr	r2, [pc, #116]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000dae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000e28 <MX_TIM5_Init+0x9c>)
 8000dc0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dce:	4814      	ldr	r0, [pc, #80]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000dd0:	f012 f8bb 	bl	8012f4a <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000dda:	f001 f963 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000dec:	f012 fa84 	bl	80132f8 <HAL_TIM_ConfigClockSource>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f001 f955 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4806      	ldr	r0, [pc, #24]	@ (8000e20 <MX_TIM5_Init+0x94>)
 8000e08:	f012 fcde 	bl	80137c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e12:	f001 f947 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	24000854 	.word	0x24000854
 8000e24:	40000c00 	.word	0x40000c00
 8000e28:	007270de 	.word	0x007270de

08000e2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e30:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e32:	4a25      	ldr	r2, [pc, #148]	@ (8000ec8 <MX_USART1_UART_Init+0x9c>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000e36:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e38:	4a24      	ldr	r2, [pc, #144]	@ (8000ecc <MX_USART1_UART_Init+0xa0>)
 8000e3a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e42:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e50:	220c      	movs	r2, #12
 8000e52:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e6e:	2220      	movs	r2, #32
 8000e70:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e7a:	4812      	ldr	r0, [pc, #72]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e7c:	f012 fd50 	bl	8013920 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000e86:	f001 f90d 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e8e:	f014 fc6a 	bl	8015766 <HAL_UARTEx_SetTxFifoThreshold>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000e98:	f001 f904 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000ea0:	f014 fc9f 	bl	80157e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000eaa:	f001 f8fb 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000eb0:	f014 fc1e 	bl	80156f0 <HAL_UARTEx_EnableFifoMode>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000eba:	f001 f8f3 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	240008a0 	.word	0x240008a0
 8000ec8:	40011000 	.word	0x40011000
 8000ecc:	0001b207 	.word	0x0001b207

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	4b25      	ldr	r3, [pc, #148]	@ (8000f6c <MX_DMA_Init+0x9c>)
 8000ed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000edc:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <MX_DMA_Init+0x9c>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_DMA_Init+0x9c>)
 8000ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <MX_DMA_Init+0x9c>)
 8000ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000efa:	4a1c      	ldr	r2, [pc, #112]	@ (8000f6c <MX_DMA_Init+0x9c>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_DMA_Init+0x9c>)
 8000f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	200b      	movs	r0, #11
 8000f18:	f003 ffcb 	bl	8004eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f1c:	200b      	movs	r0, #11
 8000f1e:	f003 ffe2 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	200c      	movs	r0, #12
 8000f28:	f003 ffc3 	bl	8004eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f2c:	200c      	movs	r0, #12
 8000f2e:	f003 ffda 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	200d      	movs	r0, #13
 8000f38:	f003 ffbb 	bl	8004eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f3c:	200d      	movs	r0, #13
 8000f3e:	f003 ffd2 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	200e      	movs	r0, #14
 8000f48:	f003 ffb3 	bl	8004eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f4c:	200e      	movs	r0, #14
 8000f4e:	f003 ffca 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2038      	movs	r0, #56	@ 0x38
 8000f58:	f003 ffab 	bl	8004eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f5c:	2038      	movs	r0, #56	@ 0x38
 8000f5e:	f003 ffc2 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	58024400 	.word	0x58024400

08000f70 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <MX_MDMA_Init+0x3c>)
 8000f78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <MX_MDMA_Init+0x3c>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_MDMA_Init+0x3c>)
 8000f88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	207a      	movs	r0, #122	@ 0x7a
 8000f9a:	f003 ff8a 	bl	8004eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000f9e:	207a      	movs	r0, #122	@ 0x7a
 8000fa0:	f003 ffa1 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	58024400 	.word	0x58024400

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001100 <MX_GPIO_Init+0x150>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8001100 <MX_GPIO_Init+0x150>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <MX_GPIO_Init+0x150>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe4:	4b46      	ldr	r3, [pc, #280]	@ (8001100 <MX_GPIO_Init+0x150>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	4a45      	ldr	r2, [pc, #276]	@ (8001100 <MX_GPIO_Init+0x150>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff4:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <MX_GPIO_Init+0x150>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b3f      	ldr	r3, [pc, #252]	@ (8001100 <MX_GPIO_Init+0x150>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	4a3d      	ldr	r2, [pc, #244]	@ (8001100 <MX_GPIO_Init+0x150>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001012:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <MX_GPIO_Init+0x150>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001020:	4b37      	ldr	r3, [pc, #220]	@ (8001100 <MX_GPIO_Init+0x150>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	4a36      	ldr	r2, [pc, #216]	@ (8001100 <MX_GPIO_Init+0x150>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001030:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <MX_GPIO_Init+0x150>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <MX_GPIO_Init+0x150>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <MX_GPIO_Init+0x150>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <MX_GPIO_Init+0x150>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2120      	movs	r1, #32
 8001060:	4828      	ldr	r0, [pc, #160]	@ (8001104 <MX_GPIO_Init+0x154>)
 8001062:	f006 fff1 	bl	8008048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106c:	4826      	ldr	r0, [pc, #152]	@ (8001108 <MX_GPIO_Init+0x158>)
 800106e:	f006 ffeb 	bl	8008048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 8001072:	2320      	movs	r3, #32
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	481e      	ldr	r0, [pc, #120]	@ (8001104 <MX_GPIO_Init+0x154>)
 800108a:	f006 fe15 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LB_Pin */
  GPIO_InitStruct.Pin = BTN_LB_Pin;
 800108e:	2320      	movs	r3, #32
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_LB_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	481a      	ldr	r0, [pc, #104]	@ (800110c <MX_GPIO_Init+0x15c>)
 80010a2:	f006 fe09 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RB_Pin */
  GPIO_InitStruct.Pin = BTN_RB_Pin;
 80010a6:	2320      	movs	r3, #32
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_RB_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4813      	ldr	r0, [pc, #76]	@ (8001108 <MX_GPIO_Init+0x158>)
 80010ba:	f006 fdfd 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LF_Pin BTN_RF_Pin */
  GPIO_InitStruct.Pin = BTN_LF_Pin|BTN_RF_Pin;
 80010be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	480d      	ldr	r0, [pc, #52]	@ (8001108 <MX_GPIO_Init+0x158>)
 80010d4:	f006 fdf0 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 80010d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_GPIO_Init+0x158>)
 80010f2:	f006 fde1 	bl	8007cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	@ 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	58024400 	.word	0x58024400
 8001104:	58021000 	.word	0x58021000
 8001108:	58020800 	.word	0x58020800
 800110c:	58020000 	.word	0x58020000

08001110 <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	if (wdog_network < WDOG_NETWORK_CUTOFF) {
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <NetworkTimeout+0x30>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d80f      	bhi.n	800113c <NetworkTimeout+0x2c>
		// Increment the timeout ctr
		wdog_network++;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <NetworkTimeout+0x30>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <NetworkTimeout+0x30>)
 8001126:	701a      	strb	r2, [r3, #0]

		// A timeout occurs when wdog_network == the Cutoff
		if (wdog_network == WDOG_NETWORK_CUTOFF) {
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <NetworkTimeout+0x30>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d105      	bne.n	800113c <NetworkTimeout+0x2c>
			ST7789_Draw_NOSIG(&hst7789); // Draw the NOSIG symbol
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <NetworkTimeout+0x34>)
 8001132:	f002 f879 	bl	8003228 <ST7789_Draw_NOSIG>
			st7789_state = 1;			 // Flag LCD as requested
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <NetworkTimeout+0x38>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	240009ac 	.word	0x240009ac
 8001144:	240012dc 	.word	0x240012dc
 8001148:	24026af4 	.word	0x24026af4

0800114c <ParsePacket_JPEG_IMAGE>:

//  Scoping Funtions
void ParsePacket_JPEG_IMAGE(uint8_t* packet, uint16_t byte_num) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
	// Data was fully sent
	if (byte_num < jpeg_img_lastRcvPkt && jpeg_state == 0) {
 8001158:	4b48      	ldr	r3, [pc, #288]	@ (800127c <ParsePacket_JPEG_IMAGE+0x130>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	429a      	cmp	r2, r3
 8001160:	d269      	bcs.n	8001236 <ParsePacket_JPEG_IMAGE+0xea>
 8001162:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <ParsePacket_JPEG_IMAGE+0x134>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d165      	bne.n	8001236 <ParsePacket_JPEG_IMAGE+0xea>
		// Start the jpeg decode
		jpeg_size = jpeg_img_lastRcvPkt*PKT_DATASIZE + JPEG_HEADERSIZE;
 800116a:	4b44      	ldr	r3, [pc, #272]	@ (800127c <ParsePacket_JPEG_IMAGE+0x130>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	019b      	lsls	r3, r3, #6
 8001170:	b29b      	uxth	r3, r3
 8001172:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b42      	ldr	r3, [pc, #264]	@ (8001284 <ParsePacket_JPEG_IMAGE+0x138>)
 800117a:	801a      	strh	r2, [r3, #0]
		HAL_StatusTypeDef ret;
		if (jpeg_currentraw)
 800117c:	4b42      	ldr	r3, [pc, #264]	@ (8001288 <ParsePacket_JPEG_IMAGE+0x13c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01c      	beq.n	80011be <ParsePacket_JPEG_IMAGE+0x72>
			ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw1, jpeg_size, jpeg_out, jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]*64);
 8001184:	4b3f      	ldr	r3, [pc, #252]	@ (8001284 <ParsePacket_JPEG_IMAGE+0x138>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	4b40      	ldr	r3, [pc, #256]	@ (800128c <ParsePacket_JPEG_IMAGE+0x140>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b3f      	ldr	r3, [pc, #252]	@ (8001290 <ParsePacket_JPEG_IMAGE+0x144>)
 8001192:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001196:	461a      	mov	r2, r3
 8001198:	4b3c      	ldr	r3, [pc, #240]	@ (800128c <ParsePacket_JPEG_IMAGE+0x140>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	4b3d      	ldr	r3, [pc, #244]	@ (8001294 <ParsePacket_JPEG_IMAGE+0x148>)
 80011a0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001298 <ParsePacket_JPEG_IMAGE+0x14c>)
 80011ae:	4602      	mov	r2, r0
 80011b0:	493a      	ldr	r1, [pc, #232]	@ (800129c <ParsePacket_JPEG_IMAGE+0x150>)
 80011b2:	483b      	ldr	r0, [pc, #236]	@ (80012a0 <ParsePacket_JPEG_IMAGE+0x154>)
 80011b4:	f009 fd4b 	bl	800ac4e <HAL_JPEG_Decode_DMA>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e01b      	b.n	80011f6 <ParsePacket_JPEG_IMAGE+0xaa>
		else {
			ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw2, jpeg_size, jpeg_out, jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]*64);
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <ParsePacket_JPEG_IMAGE+0x138>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	4b31      	ldr	r3, [pc, #196]	@ (800128c <ParsePacket_JPEG_IMAGE+0x140>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <ParsePacket_JPEG_IMAGE+0x144>)
 80011cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b2e      	ldr	r3, [pc, #184]	@ (800128c <ParsePacket_JPEG_IMAGE+0x140>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <ParsePacket_JPEG_IMAGE+0x148>)
 80011da:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	019b      	lsls	r3, r3, #6
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <ParsePacket_JPEG_IMAGE+0x14c>)
 80011e8:	4602      	mov	r2, r0
 80011ea:	492e      	ldr	r1, [pc, #184]	@ (80012a4 <ParsePacket_JPEG_IMAGE+0x158>)
 80011ec:	482c      	ldr	r0, [pc, #176]	@ (80012a0 <ParsePacket_JPEG_IMAGE+0x154>)
 80011ee:	f009 fd2e 	bl	800ac4e <HAL_JPEG_Decode_DMA>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
		}
		jpeg_currentraw = !jpeg_currentraw;
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <ParsePacket_JPEG_IMAGE+0x13c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <ParsePacket_JPEG_IMAGE+0x13c>)
 8001208:	701a      	strb	r2, [r3, #0]

		if (ret) {
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00f      	beq.n	8001230 <ParsePacket_JPEG_IMAGE+0xe4>
			sprintf(ssd_msg, " JPEG FAIL %d", ret);
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	461a      	mov	r2, r3
 8001214:	4924      	ldr	r1, [pc, #144]	@ (80012a8 <ParsePacket_JPEG_IMAGE+0x15c>)
 8001216:	4825      	ldr	r0, [pc, #148]	@ (80012ac <ParsePacket_JPEG_IMAGE+0x160>)
 8001218:	f019 fbac 	bl	801a974 <siprintf>
			WriteDebug(ssd_msg, strlen(ssd_msg));
 800121c:	4823      	ldr	r0, [pc, #140]	@ (80012ac <ParsePacket_JPEG_IMAGE+0x160>)
 800121e:	f7ff f85f 	bl	80002e0 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4619      	mov	r1, r3
 8001228:	4820      	ldr	r0, [pc, #128]	@ (80012ac <ParsePacket_JPEG_IMAGE+0x160>)
 800122a:	f000 fee9 	bl	8002000 <WriteDebug>
 800122e:	e002      	b.n	8001236 <ParsePacket_JPEG_IMAGE+0xea>
		} else {
			jpeg_state = 1;	// Flag JPEG as busy
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <ParsePacket_JPEG_IMAGE+0x134>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
		}
	}
	jpeg_img_lastRcvPkt = byte_num;
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <ParsePacket_JPEG_IMAGE+0x130>)
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	8013      	strh	r3, [r2, #0]

	// fill in the received data
	if (jpeg_currentraw)
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <ParsePacket_JPEG_IMAGE+0x13c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <ParsePacket_JPEG_IMAGE+0x110>
		memcpy(jpeg_raw1 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 800124c:	4a13      	ldr	r2, [pc, #76]	@ (800129c <ParsePacket_JPEG_IMAGE+0x150>)
 800124e:	4413      	add	r3, r2
 8001250:	2240      	movs	r2, #64	@ 0x40
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f019 fbfb 	bl	801aa50 <memcpy>
	else {
		memcpy(jpeg_raw2 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
	}
}
 800125a:	e00a      	b.n	8001272 <ParsePacket_JPEG_IMAGE+0x126>
		memcpy(jpeg_raw2 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	019b      	lsls	r3, r3, #6
 8001260:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001264:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <ParsePacket_JPEG_IMAGE+0x158>)
 8001266:	4413      	add	r3, r2
 8001268:	2240      	movs	r2, #64	@ 0x40
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f019 fbef 	bl	801aa50 <memcpy>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24026b50 	.word	0x24026b50
 8001280:	240470e2 	.word	0x240470e2
 8001284:	240470e0 	.word	0x240470e0
 8001288:	24026b5d 	.word	0x24026b5d
 800128c:	24026b5c 	.word	0x24026b5c
 8001290:	2400001c 	.word	0x2400001c
 8001294:	24000024 	.word	0x24000024
 8001298:	2403c460 	.word	0x2403c460
 800129c:	24026b60 	.word	0x24026b60
 80012a0:	24000624 	.word	0x24000624
 80012a4:	240317e0 	.word	0x240317e0
 80012a8:	0801b208 	.word	0x0801b208
 80012ac:	240011f8 	.word	0x240011f8

080012b0 <ParsePacket_JPEG_HEADER>:

void ParsePacket_JPEG_HEADER(uint8_t* packet, uint16_t byte_num) {
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
	uint16_t byte_num_conv = (0xFFFF - byte_num) - 1;
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80012c2:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80012c6:	33fe      	adds	r3, #254	@ 0xfe
 80012c8:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 0; i < PKT_DATASIZE; i++) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e01e      	b.n	800130e <ParsePacket_JPEG_HEADER+0x5e>
		// Bounds check on last packet
		if (byte_num*PKT_DATASIZE + i >= JPEG_HEADERSIZE)
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	019a      	lsls	r2, r3, #6
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	4413      	add	r3, r2
 80012d8:	f240 220d 	movw	r2, #525	@ 0x20d
 80012dc:	4293      	cmp	r3, r2
 80012de:	dc1a      	bgt.n	8001316 <ParsePacket_JPEG_HEADER+0x66>
			return;

		// Update both buffers' headers
		jpeg_raw1[byte_num*PKT_DATASIZE + i] = packet[i];
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	441a      	add	r2, r3
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	0199      	lsls	r1, r3, #6
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	440b      	add	r3, r1
 80012ee:	7811      	ldrb	r1, [r2, #0]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <ParsePacket_JPEG_HEADER+0x74>)
 80012f2:	54d1      	strb	r1, [r2, r3]
		jpeg_raw2[byte_num*PKT_DATASIZE + i] = packet[i];
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	441a      	add	r2, r3
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	0199      	lsls	r1, r3, #6
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	440b      	add	r3, r1
 8001302:	7811      	ldrb	r1, [r2, #0]
 8001304:	4a08      	ldr	r2, [pc, #32]	@ (8001328 <ParsePacket_JPEG_HEADER+0x78>)
 8001306:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < PKT_DATASIZE; i++) {
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	3301      	adds	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b3f      	cmp	r3, #63	@ 0x3f
 8001312:	d9dd      	bls.n	80012d0 <ParsePacket_JPEG_HEADER+0x20>
 8001314:	e000      	b.n	8001318 <ParsePacket_JPEG_HEADER+0x68>
			return;
 8001316:	bf00      	nop
	}
}
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	24026b60 	.word	0x24026b60
 8001328:	240317e0 	.word	0x240317e0

0800132c <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	// If there's a packet, process it
	// If the packet is good, push it to the screen
	uint16_t rx_byte;
	uint8_t *rx_packet;
	uint8_t ret = XBEE_RXPacket(&hxbee, &rx_packet, &rx_byte);
 8001332:	1d3a      	adds	r2, r7, #4
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4831      	ldr	r0, [pc, #196]	@ (8001400 <SCH_XBeeRX+0xd4>)
 800133a:	f015 fe89 	bl	8017050 <XBEE_RXPacket>
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	if (ret == 0) {
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d158      	bne.n	80013fa <SCH_XBeeRX+0xce>
		// Network is active, reset the watchdog
		wdog_network = 0;
 8001348:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <SCH_XBeeRX+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]

		// Packet contains telemetry
		if (rx_byte == 0xFFFF) {
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001354:	4293      	cmp	r3, r2
 8001356:	d04f      	beq.n	80013f8 <SCH_XBeeRX+0xcc>
			// TODO: Parse Telemetry
			return;
		}

		// Packet contains JPEG HEADER data
		if (GetState(OP_CAMERA_ENCODING) == 0 && rx_byte > 0xFFF0) {
 8001358:	2000      	movs	r0, #0
 800135a:	f000 fad9 	bl	8001910 <GetState>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10b      	bne.n	800137c <SCH_XBeeRX+0x50>
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800136a:	4293      	cmp	r3, r2
 800136c:	d906      	bls.n	800137c <SCH_XBeeRX+0x50>
			ParsePacket_JPEG_HEADER(rx_packet, rx_byte);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	88ba      	ldrh	r2, [r7, #4]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff9b 	bl	80012b0 <ParsePacket_JPEG_HEADER>
			return;
 800137a:	e03e      	b.n	80013fa <SCH_XBeeRX+0xce>
		}

		// Packet contains JPEG IMAGE data
		if (GetState(OP_CAMERA_ENCODING) == 0 && rx_byte < jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality] + 1) {
 800137c:	2000      	movs	r0, #0
 800137e:	f000 fac7 	bl	8001910 <GetState>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d118      	bne.n	80013ba <SCH_XBeeRX+0x8e>
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <SCH_XBeeRX+0xdc>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <SCH_XBeeRX+0xe0>)
 8001390:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001394:	461a      	mov	r2, r3
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <SCH_XBeeRX+0xdc>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <SCH_XBeeRX+0xe4>)
 800139e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	88ba      	ldrh	r2, [r7, #4]
 80013a8:	4293      	cmp	r3, r2
 80013aa:	db06      	blt.n	80013ba <SCH_XBeeRX+0x8e>
			ParsePacket_JPEG_IMAGE(rx_packet, rx_byte);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff feca 	bl	800114c <ParsePacket_JPEG_IMAGE>
			return;
 80013b8:	e01f      	b.n	80013fa <SCH_XBeeRX+0xce>
		}

		// Packet contains RAW image data
		if (GetState(OP_CAMERA_ENCODING) == 1 && rx_byte < jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality] + 1) {
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 faa8 	bl	8001910 <GetState>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d119      	bne.n	80013fa <SCH_XBeeRX+0xce>
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <SCH_XBeeRX+0xdc>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <SCH_XBeeRX+0xe0>)
 80013ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <SCH_XBeeRX+0xdc>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <SCH_XBeeRX+0xe4>)
 80013dc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	88ba      	ldrh	r2, [r7, #4]
 80013e6:	4293      	cmp	r3, r2
 80013e8:	db07      	blt.n	80013fa <SCH_XBeeRX+0xce>
			ParsePacket_JPEG_IMAGE(rx_packet, rx_byte);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	88ba      	ldrh	r2, [r7, #4]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff feab 	bl	800114c <ParsePacket_JPEG_IMAGE>
			return;
 80013f6:	e000      	b.n	80013fa <SCH_XBeeRX+0xce>
			return;
 80013f8:	bf00      	nop
		}

		// TODO: Parse JPEG Header data
	}
}
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	24026b2c 	.word	0x24026b2c
 8001404:	240009ac 	.word	0x240009ac
 8001408:	24026b5c 	.word	0x24026b5c
 800140c:	2400001c 	.word	0x2400001c
 8001410:	24000024 	.word	0x24000024

08001414 <SCH_XBeeTX>:

void SCH_XBeeTX() {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <SCH_XBeeTX+0x78>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fa5e 	bl	80018e0 <DeltaTime>
 8001424:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX) return;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b63      	cmp	r3, #99	@ 0x63
 800142a:	d928      	bls.n	800147e <SCH_XBeeTX+0x6a>

	// Set the tank controls just before send, minimize latency
	hmenu.state_packet[RESERVE_LTRACK_MAG] = slider_magnitude[0];
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <SCH_XBeeTX+0x7c>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	3307      	adds	r3, #7
 8001432:	4a18      	ldr	r2, [pc, #96]	@ (8001494 <SCH_XBeeTX+0x80>)
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_RTRACK_MAG] = slider_magnitude[1];
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <SCH_XBeeTX+0x7c>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	3308      	adds	r3, #8
 800143e:	4a15      	ldr	r2, [pc, #84]	@ (8001494 <SCH_XBeeTX+0x80>)
 8001440:	7852      	ldrb	r2, [r2, #1]
 8001442:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_LTRACK_DIR] = slider_direction[0];
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <SCH_XBeeTX+0x7c>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	3309      	adds	r3, #9
 800144a:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <SCH_XBeeTX+0x84>)
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_RTRACK_DIR] = slider_direction[1];
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <SCH_XBeeTX+0x7c>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	330a      	adds	r3, #10
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <SCH_XBeeTX+0x84>)
 8001458:	7852      	ldrb	r2, [r2, #1]
 800145a:	701a      	strb	r2, [r3, #0]

	if (XBEE_TXPacket(&hxbee, hmenu.state_packet, 0xFFFF))  {
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <SCH_XBeeTX+0x7c>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001464:	4619      	mov	r1, r3
 8001466:	480d      	ldr	r0, [pc, #52]	@ (800149c <SCH_XBeeTX+0x88>)
 8001468:	f015 fe62 	bl	8017130 <XBEE_TXPacket>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d107      	bne.n	8001482 <SCH_XBeeTX+0x6e>
		// Line busy, retry ASAP
		return;
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 8001472:	f002 f955 	bl	8003720 <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <SCH_XBeeTX+0x78>)
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e002      	b.n	8001484 <SCH_XBeeTX+0x70>
	if (delta_t < SCH_MS_TX) return;
 800147e:	bf00      	nop
 8001480:	e000      	b.n	8001484 <SCH_XBeeTX+0x70>
		return;
 8001482:	bf00      	nop
}
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	240009b4 	.word	0x240009b4
 8001490:	240012c0 	.word	0x240012c0
 8001494:	24026b24 	.word	0x24026b24
 8001498:	24026b28 	.word	0x24026b28
 800149c:	24026b2c 	.word	0x24026b2c

080014a0 <SCH_ImageDecode>:

void SCH_ImageDecode() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
	if (jpeg_state != 2) return;
 80014a6:	4b9c      	ldr	r3, [pc, #624]	@ (8001718 <SCH_ImageDecode+0x278>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	f040 8126 	bne.w	80016fc <SCH_ImageDecode+0x25c>
		// Loop through every mcu block

		for (uint16_t mcu_x = 0; mcu_x < jpeg_mcu_widths[jpeg_quality]; mcu_x++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	83fb      	strh	r3, [r7, #30]
 80014b4:	e0b7      	b.n	8001626 <SCH_ImageDecode+0x186>
			uint16_t mcu_idx = current_mcu_y*jpeg_mcu_widths[jpeg_quality] + mcu_x;
 80014b6:	4b99      	ldr	r3, [pc, #612]	@ (800171c <SCH_ImageDecode+0x27c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b98      	ldr	r3, [pc, #608]	@ (8001720 <SCH_ImageDecode+0x280>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4b98      	ldr	r3, [pc, #608]	@ (8001724 <SCH_ImageDecode+0x284>)
 80014c4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014c8:	fb12 f303 	smulbb	r3, r2, r3
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	8bfb      	ldrh	r3, [r7, #30]
 80014d0:	4413      	add	r3, r2
 80014d2:	82bb      	strh	r3, [r7, #20]

			for (uint16_t y = 0; y < 8; y++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	83bb      	strh	r3, [r7, #28]
 80014d8:	e09e      	b.n	8001618 <SCH_ImageDecode+0x178>
				for (uint16_t x = 0; x < 8; x++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	837b      	strh	r3, [r7, #26]
 80014de:	e094      	b.n	800160a <SCH_ImageDecode+0x16a>
					// Bounds check
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 80014e0:	8bfb      	ldrh	r3, [r7, #30]
 80014e2:	00da      	lsls	r2, r3, #3
 80014e4:	8b7b      	ldrh	r3, [r7, #26]
 80014e6:	4413      	add	r3, r2
 80014e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80014ea:	f300 8086 	bgt.w	80015fa <SCH_ImageDecode+0x15a>
					// COLOR FORMAT
					// |RRRRR GGG|GGG BBBBB|

					uint32_t pix_x = (mcu_x*8 + x)*jpeg_scaleFactors[jpeg_quality];
 80014ee:	8bfb      	ldrh	r3, [r7, #30]
 80014f0:	00da      	lsls	r2, r3, #3
 80014f2:	8b7b      	ldrh	r3, [r7, #26]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a8a      	ldr	r2, [pc, #552]	@ (8001720 <SCH_ImageDecode+0x280>)
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4a8a      	ldr	r2, [pc, #552]	@ (8001728 <SCH_ImageDecode+0x288>)
 80014fe:	5c52      	ldrb	r2, [r2, r1]
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	613b      	str	r3, [r7, #16]
					if (pix_x >= LCD_WIDTH-1) continue;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2bee      	cmp	r3, #238	@ 0xee
 800150a:	d878      	bhi.n	80015fe <SCH_ImageDecode+0x15e>
					pix_x = LCD_WIDTH - pix_x - 1;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001512:	613b      	str	r3, [r7, #16]
					uint32_t pix_y = (current_mcu_y*8 + y)*jpeg_scaleFactors[jpeg_quality];
 8001514:	4b81      	ldr	r3, [pc, #516]	@ (800171c <SCH_ImageDecode+0x27c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	00da      	lsls	r2, r3, #3
 800151a:	8bbb      	ldrh	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	4a80      	ldr	r2, [pc, #512]	@ (8001720 <SCH_ImageDecode+0x280>)
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	4611      	mov	r1, r2
 8001524:	4a80      	ldr	r2, [pc, #512]	@ (8001728 <SCH_ImageDecode+0x288>)
 8001526:	5c52      	ldrb	r2, [r2, r1]
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	60fb      	str	r3, [r7, #12]
					if (pix_y >= LCD_HEIGHT-2) continue;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001534:	d265      	bcs.n	8001602 <SCH_ImageDecode+0x162>

					uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 8001536:	8abb      	ldrh	r3, [r7, #20]
 8001538:	00da      	lsls	r2, r3, #3
 800153a:	8bbb      	ldrh	r3, [r7, #28]
 800153c:	4413      	add	r3, r2
 800153e:	00da      	lsls	r2, r3, #3
 8001540:	8b7b      	ldrh	r3, [r7, #26]
 8001542:	4413      	add	r3, r2
 8001544:	4a79      	ldr	r2, [pc, #484]	@ (800172c <SCH_ImageDecode+0x28c>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	72fb      	strb	r3, [r7, #11]
					uint8_t msb = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 800154a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800154e:	f023 0307 	bic.w	r3, r3, #7
 8001552:	b25a      	sxtb	r2, r3
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	b2db      	uxtb	r3, r3
 800155a:	b25b      	sxtb	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b25b      	sxtb	r3, r3
 8001560:	72bb      	strb	r3, [r7, #10]
					uint8_t lsb = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	b25a      	sxtb	r2, r3
 800156a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	b25b      	sxtb	r3, r3
 8001572:	f023 031f 	bic.w	r3, r3, #31
 8001576:	b25b      	sxtb	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b25b      	sxtb	r3, r3
 800157c:	727b      	strb	r3, [r7, #9]

					// TODO: Speed this up as much as possible, even if it means skipping lines
					// Loop through the pixels in a box
					uint8_t perfScaleFac = jpeg_scaleFactors[jpeg_quality];
 800157e:	4b68      	ldr	r3, [pc, #416]	@ (8001720 <SCH_ImageDecode+0x280>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4b68      	ldr	r3, [pc, #416]	@ (8001728 <SCH_ImageDecode+0x288>)
 8001586:	5c9b      	ldrb	r3, [r3, r2]
 8001588:	767b      	strb	r3, [r7, #25]
					if (perfScaleFac == 0)
 800158a:	7e7b      	ldrb	r3, [r7, #25]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <SCH_ImageDecode+0xf4>
						perfScaleFac = 1;
 8001590:	2301      	movs	r3, #1
 8001592:	767b      	strb	r3, [r7, #25]

					for (uint8_t yOff = 0; yOff < perfScaleFac; yOff++) {
 8001594:	2300      	movs	r3, #0
 8001596:	763b      	strb	r3, [r7, #24]
 8001598:	e02a      	b.n	80015f0 <SCH_ImageDecode+0x150>
						uint32_t cached_yOff = (pix_y+yOff)*LCD_WIDTH*2;	// Cache the Y offset so we don't compute it every loop
 800159a:	7e3a      	ldrb	r2, [r7, #24]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	441a      	add	r2, r3
 80015a0:	4613      	mov	r3, r2
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	015b      	lsls	r3, r3, #5
 80015a8:	607b      	str	r3, [r7, #4]

						for (uint8_t xOff = 0; xOff < perfScaleFac; xOff++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
 80015ae:	e018      	b.n	80015e2 <SCH_ImageDecode+0x142>
							uint32_t cached_xOff = (pix_x+xOff)*2;
 80015b0:	7dfa      	ldrb	r2, [r7, #23]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	603b      	str	r3, [r7, #0]

							hst7789.vram[cached_yOff + cached_xOff    ] = msb;
 80015ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <SCH_ImageDecode+0x290>)
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	440b      	add	r3, r1
 80015c4:	4413      	add	r3, r2
 80015c6:	7aba      	ldrb	r2, [r7, #10]
 80015c8:	701a      	strb	r2, [r3, #0]
							hst7789.vram[cached_yOff + cached_xOff + 1] = lsb;
 80015ca:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <SCH_ImageDecode+0x290>)
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	3301      	adds	r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	7a7a      	ldrb	r2, [r7, #9]
 80015da:	701a      	strb	r2, [r3, #0]
						for (uint8_t xOff = 0; xOff < perfScaleFac; xOff++) {
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	3301      	adds	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
 80015e2:	7dfa      	ldrb	r2, [r7, #23]
 80015e4:	7e7b      	ldrb	r3, [r7, #25]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3e2      	bcc.n	80015b0 <SCH_ImageDecode+0x110>
					for (uint8_t yOff = 0; yOff < perfScaleFac; yOff++) {
 80015ea:	7e3b      	ldrb	r3, [r7, #24]
 80015ec:	3301      	adds	r3, #1
 80015ee:	763b      	strb	r3, [r7, #24]
 80015f0:	7e3a      	ldrb	r2, [r7, #24]
 80015f2:	7e7b      	ldrb	r3, [r7, #25]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3d0      	bcc.n	800159a <SCH_ImageDecode+0xfa>
 80015f8:	e004      	b.n	8001604 <SCH_ImageDecode+0x164>
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 80015fa:	bf00      	nop
 80015fc:	e002      	b.n	8001604 <SCH_ImageDecode+0x164>
					if (pix_x >= LCD_WIDTH-1) continue;
 80015fe:	bf00      	nop
 8001600:	e000      	b.n	8001604 <SCH_ImageDecode+0x164>
					if (pix_y >= LCD_HEIGHT-2) continue;
 8001602:	bf00      	nop
				for (uint16_t x = 0; x < 8; x++) {
 8001604:	8b7b      	ldrh	r3, [r7, #26]
 8001606:	3301      	adds	r3, #1
 8001608:	837b      	strh	r3, [r7, #26]
 800160a:	8b7b      	ldrh	r3, [r7, #26]
 800160c:	2b07      	cmp	r3, #7
 800160e:	f67f af67 	bls.w	80014e0 <SCH_ImageDecode+0x40>
			for (uint16_t y = 0; y < 8; y++) {
 8001612:	8bbb      	ldrh	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	83bb      	strh	r3, [r7, #28]
 8001618:	8bbb      	ldrh	r3, [r7, #28]
 800161a:	2b07      	cmp	r3, #7
 800161c:	f67f af5d 	bls.w	80014da <SCH_ImageDecode+0x3a>
		for (uint16_t mcu_x = 0; mcu_x < jpeg_mcu_widths[jpeg_quality]; mcu_x++) {
 8001620:	8bfb      	ldrh	r3, [r7, #30]
 8001622:	3301      	adds	r3, #1
 8001624:	83fb      	strh	r3, [r7, #30]
 8001626:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <SCH_ImageDecode+0x280>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b3d      	ldr	r3, [pc, #244]	@ (8001724 <SCH_ImageDecode+0x284>)
 800162e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001632:	8bfa      	ldrh	r2, [r7, #30]
 8001634:	429a      	cmp	r2, r3
 8001636:	f4ff af3e 	bcc.w	80014b6 <SCH_ImageDecode+0x16>
					}
				}
			}
		}

		current_mcu_y++;
 800163a:	4b38      	ldr	r3, [pc, #224]	@ (800171c <SCH_ImageDecode+0x27c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b36      	ldr	r3, [pc, #216]	@ (800171c <SCH_ImageDecode+0x27c>)
 8001644:	701a      	strb	r2, [r3, #0]

		if (current_mcu_y >= jpeg_mcu_heights[jpeg_quality]) {
 8001646:	4b35      	ldr	r3, [pc, #212]	@ (800171c <SCH_ImageDecode+0x27c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <SCH_ImageDecode+0x280>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	4b38      	ldr	r3, [pc, #224]	@ (8001734 <SCH_ImageDecode+0x294>)
 8001654:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001658:	429a      	cmp	r2, r3
 800165a:	d350      	bcc.n	80016fe <SCH_ImageDecode+0x25e>
			current_mcu_y = 0;	// Reset the V-MCU counter
 800165c:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <SCH_ImageDecode+0x27c>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]

			avg_ms_imgRecv *= 0.8;
 8001662:	4b35      	ldr	r3, [pc, #212]	@ (8001738 <SCH_ImageDecode+0x298>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800166e:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001708 <SCH_ImageDecode+0x268>
 8001672:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001676:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800167a:	ee17 2a90 	vmov	r2, s15
 800167e:	4b2e      	ldr	r3, [pc, #184]	@ (8001738 <SCH_ImageDecode+0x298>)
 8001680:	601a      	str	r2, [r3, #0]
			avg_ms_imgRecv += DeltaTime(tim_ms_imgRecv)*0.2;	// Get the time since last frame
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <SCH_ImageDecode+0x29c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f92a 	bl	80018e0 <DeltaTime>
 800168c:	ee07 0a90 	vmov	s15, r0
 8001690:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001694:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001710 <SCH_ImageDecode+0x270>
 8001698:	ee27 6b06 	vmul.f64	d6, d7, d6
 800169c:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <SCH_ImageDecode+0x298>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016b0:	ee17 2a90 	vmov	r2, s15
 80016b4:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <SCH_ImageDecode+0x298>)
 80016b6:	601a      	str	r2, [r3, #0]
			tim_ms_imgRecv = HAL_GetTick();						// start the frame-timer
 80016b8:	f002 f832 	bl	8003720 <HAL_GetTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a1f      	ldr	r2, [pc, #124]	@ (800173c <SCH_ImageDecode+0x29c>)
 80016c0:	6013      	str	r3, [r2, #0]

			// Plaster the FPS on top of VRAM
			if (!GetState(OP_CAMERA_FRAMETIME))
 80016c2:	2002      	movs	r0, #2
 80016c4:	f000 f924 	bl	8001910 <GetState>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <SCH_ImageDecode+0x23a>
				ST7789_Draw_DATA(&hst7789, avg_ms_imgRecv);
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <SCH_ImageDecode+0x298>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	4816      	ldr	r0, [pc, #88]	@ (8001730 <SCH_ImageDecode+0x290>)
 80016d6:	f001 fe3f 	bl	8003358 <ST7789_Draw_DATA>

			jpeg_state = 0;		// Flag JPEG as idle
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <SCH_ImageDecode+0x278>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
			st7789_state = 1;	// Flag LCD as requested
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <SCH_ImageDecode+0x2a0>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]

			st_interlacing = !st_interlacing; // Toggle interlacing
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <SCH_ImageDecode+0x2a4>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf0c      	ite	eq
 80016ee:	2301      	moveq	r3, #1
 80016f0:	2300      	movne	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <SCH_ImageDecode+0x2a4>)
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e000      	b.n	80016fe <SCH_ImageDecode+0x25e>
	if (jpeg_state != 2) return;
 80016fc:	bf00      	nop
		}
}
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	f3af 8000 	nop.w
 8001708:	9999999a 	.word	0x9999999a
 800170c:	3fe99999 	.word	0x3fe99999
 8001710:	9999999a 	.word	0x9999999a
 8001714:	3fc99999 	.word	0x3fc99999
 8001718:	240470e2 	.word	0x240470e2
 800171c:	240470e3 	.word	0x240470e3
 8001720:	24026b5c 	.word	0x24026b5c
 8001724:	2400001c 	.word	0x2400001c
 8001728:	2400002c 	.word	0x2400002c
 800172c:	2403c460 	.word	0x2403c460
 8001730:	240012dc 	.word	0x240012dc
 8001734:	24000024 	.word	0x24000024
 8001738:	24026b54 	.word	0x24026b54
 800173c:	24026b58 	.word	0x24026b58
 8001740:	24026af4 	.word	0x24026af4
 8001744:	24026af5 	.word	0x24026af5

08001748 <SCH_OLEDUpdate>:

void SCH_OLEDUpdate() {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_oled);
 800174e:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <SCH_OLEDUpdate+0x58>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f8c4 	bl	80018e0 <DeltaTime>
 8001758:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_OLED) return;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b20      	cmp	r3, #32
 800175e:	d91b      	bls.n	8001798 <SCH_OLEDUpdate+0x50>

	// Update the timer for the next DT period
	sch_tim_oled = HAL_GetTick();
 8001760:	f001 ffde 	bl	8003720 <HAL_GetTick>
 8001764:	4603      	mov	r3, r0
 8001766:	4a0e      	ldr	r2, [pc, #56]	@ (80017a0 <SCH_OLEDUpdate+0x58>)
 8001768:	6013      	str	r3, [r2, #0]

	// Display the screen contents
	// Clear existing VRAM
	SSD1306_Clear(&hssd1);
 800176a:	480e      	ldr	r0, [pc, #56]	@ (80017a4 <SCH_OLEDUpdate+0x5c>)
 800176c:	f001 fb12 	bl	8002d94 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <SCH_OLEDUpdate+0x60>)
 8001772:	f001 fb0f 	bl	8002d94 <SSD1306_Clear>

	// Draw the sliders
	Draw_Slider(0);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f9ae 	bl	8001ad8 <Draw_Slider>
	Draw_Slider(1);
 800177c:	2001      	movs	r0, #1
 800177e:	f000 f9ab 	bl	8001ad8 <Draw_Slider>

	MENU_Draw(&hmenu, delta_t);
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4809      	ldr	r0, [pc, #36]	@ (80017ac <SCH_OLEDUpdate+0x64>)
 8001786:	f016 f8a5 	bl	80178d4 <MENU_Draw>

	// Update the screens
	SSD1306_Update(&hssd1);
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <SCH_OLEDUpdate+0x5c>)
 800178c:	f001 fb16 	bl	8002dbc <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <SCH_OLEDUpdate+0x60>)
 8001792:	f001 fb13 	bl	8002dbc <SSD1306_Update>
 8001796:	e000      	b.n	800179a <SCH_OLEDUpdate+0x52>
	if (delta_t < SCH_MS_OLED) return;
 8001798:	bf00      	nop
}
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	240009b0 	.word	0x240009b0
 80017a4:	240009d0 	.word	0x240009d0
 80017a8:	240009e4 	.word	0x240009e4
 80017ac:	240012c0 	.word	0x240012c0

080017b0 <SCH_LCDUpdate>:

void SCH_LCDUpdate() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	// Update the displays
	if (hst7789.spi_state == 0 && st7789_state == 1) {
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <SCH_LCDUpdate+0x24>)
 80017b6:	791b      	ldrb	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d109      	bne.n	80017d0 <SCH_LCDUpdate+0x20>
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <SCH_LCDUpdate+0x28>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <SCH_LCDUpdate+0x20>
		ST7789_UpdateAutomatic(&hst7789);
 80017c4:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <SCH_LCDUpdate+0x24>)
 80017c6:	f001 fd06 	bl	80031d6 <ST7789_UpdateAutomatic>
		st7789_state = 0;
 80017ca:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <SCH_LCDUpdate+0x28>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
	}
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	240012dc 	.word	0x240012dc
 80017d8:	24026af4 	.word	0x24026af4

080017dc <SCH_GetInputs>:

void SCH_GetInputs() {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	e041      	b.n	800186c <SCH_GetInputs+0x90>
		// Debounce timer
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4a35      	ldr	r2, [pc, #212]	@ (80018c0 <SCH_GetInputs+0xe4>)
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f875 	bl	80018e0 <DeltaTime>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b13      	cmp	r3, #19
 80017fa:	d933      	bls.n	8001864 <SCH_GetInputs+0x88>

		// Get input
		uint8_t i_new = !HAL_GPIO_ReadPin(i_ports[i], i_pins[i]);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a31      	ldr	r2, [pc, #196]	@ (80018c4 <SCH_GetInputs+0xe8>)
 8001800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4930      	ldr	r1, [pc, #192]	@ (80018c8 <SCH_GetInputs+0xec>)
 8001808:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800180c:	4619      	mov	r1, r3
 800180e:	4610      	mov	r0, r2
 8001810:	f006 fc02 	bl	8008018 <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	71bb      	strb	r3, [r7, #6]

		// Update debounce timer
		if (i_new != istate_hold[i])
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4a29      	ldr	r2, [pc, #164]	@ (80018cc <SCH_GetInputs+0xf0>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	79ba      	ldrb	r2, [r7, #6]
 800182a:	429a      	cmp	r2, r3
 800182c:	d006      	beq.n	800183c <SCH_GetInputs+0x60>
			istate_time[i] = HAL_GetTick();
 800182e:	79fc      	ldrb	r4, [r7, #7]
 8001830:	f001 ff76 	bl	8003720 <HAL_GetTick>
 8001834:	4603      	mov	r3, r0
 8001836:	4a22      	ldr	r2, [pc, #136]	@ (80018c0 <SCH_GetInputs+0xe4>)
 8001838:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

		istate_pressed[i] = i_new && !istate_hold[i];	// Just pressed
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <SCH_GetInputs+0x74>
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <SCH_GetInputs+0xf0>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <SCH_GetInputs+0x74>
 800184c:	2201      	movs	r2, #1
 800184e:	e000      	b.n	8001852 <SCH_GetInputs+0x76>
 8001850:	2200      	movs	r2, #0
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	b2d1      	uxtb	r1, r2
 8001856:	4a1e      	ldr	r2, [pc, #120]	@ (80018d0 <SCH_GetInputs+0xf4>)
 8001858:	54d1      	strb	r1, [r2, r3]
		istate_hold[i] = i_new;							// Update sotred val
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	491b      	ldr	r1, [pc, #108]	@ (80018cc <SCH_GetInputs+0xf0>)
 800185e:	79ba      	ldrb	r2, [r7, #6]
 8001860:	54ca      	strb	r2, [r1, r3]
 8001862:	e000      	b.n	8001866 <SCH_GetInputs+0x8a>
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 8001864:	bf00      	nop
	for (uint8_t i = 0; i < 4; i++) {
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	3301      	adds	r3, #1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d9ba      	bls.n	80017e8 <SCH_GetInputs+0xc>
//			test_vals[i]++;
//		}
	}

	// Update the menu state
	MENU_ParseInput(&hmenu, istate_pressed);
 8001872:	4917      	ldr	r1, [pc, #92]	@ (80018d0 <SCH_GetInputs+0xf4>)
 8001874:	4817      	ldr	r0, [pc, #92]	@ (80018d4 <SCH_GetInputs+0xf8>)
 8001876:	f016 f999 	bl	8017bac <MENU_ParseInput>
	istate_pressed[0] = 0;
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <SCH_GetInputs+0xf4>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
	istate_pressed[1] = 0;
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <SCH_GetInputs+0xf4>)
 8001882:	2200      	movs	r2, #0
 8001884:	705a      	strb	r2, [r3, #1]
	istate_pressed[2] = 0;
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <SCH_GetInputs+0xf4>)
 8001888:	2200      	movs	r2, #0
 800188a:	709a      	strb	r2, [r3, #2]
	istate_pressed[3] = 0;
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <SCH_GetInputs+0xf4>)
 800188e:	2200      	movs	r2, #0
 8001890:	70da      	strb	r2, [r3, #3]

	// Update the JPEG settings
	if (jpeg_quality != GetState(OP_CAMERA_QUALITY)) {
 8001892:	2001      	movs	r0, #1
 8001894:	f000 f83c 	bl	8001910 <GetState>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <SCH_GetInputs+0xfc>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d009      	beq.n	80018b8 <SCH_GetInputs+0xdc>
		jpeg_quality = GetState(OP_CAMERA_QUALITY);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f000 f833 	bl	8001910 <GetState>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <SCH_GetInputs+0xfc>)
 80018b0:	701a      	strb	r2, [r3, #0]
		// Clear the screen
		ST7789_Clear(&hst7789);
 80018b2:	480a      	ldr	r0, [pc, #40]	@ (80018dc <SCH_GetInputs+0x100>)
 80018b4:	f001 fca6 	bl	8003204 <ST7789_Clear>
	}

}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	240009bc 	.word	0x240009bc
 80018c4:	24000000 	.word	0x24000000
 80018c8:	24000010 	.word	0x24000010
 80018cc:	240009b8 	.word	0x240009b8
 80018d0:	240009cc 	.word	0x240009cc
 80018d4:	240012c0 	.word	0x240012c0
 80018d8:	24026b5c 	.word	0x24026b5c
 80018dc:	240012dc 	.word	0x240012dc

080018e0 <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //

uint32_t DeltaTime(uint32_t start_t) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 80018e8:	f001 ff1a 	bl	8003720 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d204      	bcs.n	8001900 <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	e002      	b.n	8001906 <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	1ad3      	subs	r3, r2, r3
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <GetState>:

uint8_t GetState(uint8_t byte_num) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
	if (byte_num >= 64) return 0;
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b3f      	cmp	r3, #63	@ 0x3f
 800191e:	d901      	bls.n	8001924 <GetState+0x14>
 8001920:	2300      	movs	r3, #0
 8001922:	e004      	b.n	800192e <GetState+0x1e>
	return hmenu.state_packet[byte_num];
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <GetState+0x2c>)
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	240012c0 	.word	0x240012c0

08001940 <HAL_UART_RxCpltCallback>:

// DEBUG FUNCTIONS

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	uint8_t ret = XBEE_RX_DMACallback(&hxbee);
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <HAL_UART_RxCpltCallback+0x1c>)
 800194a:	f015 fc5b 	bl	8017204 <XBEE_RX_DMACallback>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
	if (ret) {
//		sprintf(ssd_msg, " PKT Err: %d", ret);
//		WriteDebug(ssd_msg, strlen(ssd_msg));
	}
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24026b2c 	.word	0x24026b2c

08001960 <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT %d", hjpeg->OutDataLength);
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800196a:	2202      	movs	r2, #2
 800196c:	701a      	strb	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	240470e2 	.word	0x240470e2

08001980 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <HAL_JPEG_ErrorCallback+0x1c>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	240470e2 	.word	0x240470e2

080019a0 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	// Abort if it's too long
	if (OutDataLength > JPEG_MAX_WIDTH*JPEG_MAX_HEIGHT) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f64a 4280 	movw	r2, #44160	@ 0xac80
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d906      	bls.n	80019c4 <HAL_JPEG_DataReadyCallback+0x24>
		HAL_JPEG_Abort(hjpeg);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f009 fa04 	bl	800adc4 <HAL_JPEG_Abort>
		jpeg_state = 2;
 80019bc:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <HAL_JPEG_DataReadyCallback+0x30>)
 80019be:	2202      	movs	r2, #2
 80019c0:	701a      	strb	r2, [r3, #0]
		return;
 80019c2:	e002      	b.n	80019ca <HAL_JPEG_DataReadyCallback+0x2a>
	}

	jpeg_state = 2;
 80019c4:	4b02      	ldr	r3, [pc, #8]	@ (80019d0 <HAL_JPEG_DataReadyCallback+0x30>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	701a      	strb	r2, [r3, #0]
}
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	240470e2 	.word	0x240470e2

080019d4 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 80019dc:	4803      	ldr	r0, [pc, #12]	@ (80019ec <HAL_SPI_TxCpltCallback+0x18>)
 80019de:	f001 fdfd 	bl	80035dc <ST7789_DMATransmitCplt>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	240012dc 	.word	0x240012dc

080019f0 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
//		// Accumulate the samples
//		// Have to pre-divide so the result fits in a uint16
//		adc_average[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
//	}

	for (int i = 0; i < 2; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e053      	b.n	8001aa6 <HAL_ADC_ConvCpltCallback+0xb6>

		adc_average[i] = adc_buffer[i]; // Skip the averaging process
 80019fe:	4a2f      	ldr	r2, [pc, #188]	@ (8001abc <HAL_ADC_ConvCpltCallback+0xcc>)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a06:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 8001a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	0bdb      	lsrs	r3, r3, #15
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	460a      	mov	r2, r1
 8001a2a:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a34:	09db      	lsrs	r3, r3, #7
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b2d9      	uxtb	r1, r3
 8001a3a:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	460a      	mov	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 8001a44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00a      	beq.n	8001a66 <HAL_ADC_ConvCpltCallback+0x76>
 8001a50:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	b2d9      	uxtb	r1, r3
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4413      	add	r3, r2
 8001a62:	460a      	mov	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 8001a66:	4a18      	ldr	r2, [pc, #96]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <HAL_ADC_ConvCpltCallback+0xdc>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d204      	bcs.n	8001a80 <HAL_ADC_ConvCpltCallback+0x90>
			slider_magnitude[i] = 0;
 8001a76:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001a80:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dd04      	ble.n	8001aa0 <HAL_ADC_ConvCpltCallback+0xb0>
			slider_magnitude[i] = 0xFF;
 8001a96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	22ff      	movs	r2, #255	@ 0xff
 8001a9e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	dda8      	ble.n	80019fe <HAL_ADC_ConvCpltCallback+0xe>

	}
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	24026af8 	.word	0x24026af8
 8001ac0:	24026b20 	.word	0x24026b20
 8001ac4:	24026b28 	.word	0x24026b28
 8001ac8:	24026b24 	.word	0x24026b24
 8001acc:	24000018 	.word	0x24000018
 8001ad0:	24000019 	.word	0x24000019
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <Draw_Slider>:

// ------------------------------------------------------------ DRAW COMMANDS -- //
void Draw_Slider(uint8_t slider_id) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b092      	sub	sp, #72	@ 0x48
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t byte_sel = slider_magnitude[slider_id] >> 5;					// Byte threshold
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	4ab0      	ldr	r2, [pc, #704]	@ (8001da8 <Draw_Slider+0x2d0>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t bit_sel = (slider_magnitude[slider_id] >> 2) & 0b00000111;		// Partial byte threshold
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4aad      	ldr	r2, [pc, #692]	@ (8001da8 <Draw_Slider+0x2d0>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t subbit_sel = (slider_magnitude[slider_id]) & 0b00000111;	// Fine control display
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	4aa9      	ldr	r2, [pc, #676]	@ (8001da8 <Draw_Slider+0x2d0>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	77fb      	strb	r3, [r7, #31]

	uint8_t slider_vram[8] = {0};
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]

	if (slider_direction[slider_id]) {
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4aa4      	ldr	r2, [pc, #656]	@ (8001dac <Draw_Slider+0x2d4>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d036      	beq.n	8001b8e <Draw_Slider+0xb6>
		for (int i = 0; i < 8; i++) {
 8001b20:	2300      	movs	r3, #0
 8001b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b24:	e02f      	b.n	8001b86 <Draw_Slider+0xae>
			if (i < byte_sel) slider_vram[7-i] = 0xFF;	// Before partial byte, fill
 8001b26:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	da07      	bge.n	8001b40 <Draw_Slider+0x68>
 8001b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	3348      	adds	r3, #72	@ 0x48
 8001b38:	443b      	add	r3, r7
 8001b3a:	22ff      	movs	r2, #255	@ 0xff
 8001b3c:	f803 2c38 	strb.w	r2, [r3, #-56]
			if (i > byte_sel) slider_vram[7-i] = 0x00;	// After partial byte, empty
 8001b40:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dd07      	ble.n	8001b5a <Draw_Slider+0x82>
 8001b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b4c:	f1c3 0307 	rsb	r3, r3, #7
 8001b50:	3348      	adds	r3, #72	@ 0x48
 8001b52:	443b      	add	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	f803 2c38 	strb.w	r2, [r3, #-56]
			if (i == byte_sel) slider_vram[7-i] = 0xFF << (7-bit_sel);	// Partial byte
 8001b5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d10d      	bne.n	8001b80 <Draw_Slider+0xa8>
 8001b64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b68:	f1c3 0307 	rsb	r3, r3, #7
 8001b6c:	22ff      	movs	r2, #255	@ 0xff
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	3348      	adds	r3, #72	@ 0x48
 8001b7a:	443b      	add	r3, r7
 8001b7c:	f803 2c38 	strb.w	r2, [r3, #-56]
		for (int i = 0; i < 8; i++) {
 8001b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b82:	3301      	adds	r3, #1
 8001b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b88:	2b07      	cmp	r3, #7
 8001b8a:	ddcc      	ble.n	8001b26 <Draw_Slider+0x4e>
 8001b8c:	e031      	b.n	8001bf2 <Draw_Slider+0x11a>
		}
	} else {
		for (int i = 0; i < 8; i++) {
 8001b8e:	2300      	movs	r3, #0
 8001b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b92:	e02b      	b.n	8001bec <Draw_Slider+0x114>
			if (i < byte_sel) slider_vram[i] = 0xFF;
 8001b94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	da05      	bge.n	8001baa <Draw_Slider+0xd2>
 8001b9e:	f107 0210 	add.w	r2, r7, #16
 8001ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ba4:	4413      	add	r3, r2
 8001ba6:	22ff      	movs	r2, #255	@ 0xff
 8001ba8:	701a      	strb	r2, [r3, #0]
			if (i > byte_sel) slider_vram[i] = 0x00;
 8001baa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dd05      	ble.n	8001bc0 <Draw_Slider+0xe8>
 8001bb4:	f107 0210 	add.w	r2, r7, #16
 8001bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bba:	4413      	add	r3, r2
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
			if (i == byte_sel) slider_vram[i] = 0xFF >> (7-bit_sel);
 8001bc0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001bc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d10d      	bne.n	8001be6 <Draw_Slider+0x10e>
 8001bca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	22ff      	movs	r2, #255	@ 0xff
 8001bd4:	fa42 f303 	asr.w	r3, r2, r3
 8001bd8:	b2d9      	uxtb	r1, r3
 8001bda:	f107 0210 	add.w	r2, r7, #16
 8001bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001be0:	4413      	add	r3, r2
 8001be2:	460a      	mov	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8001be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001be8:	3301      	adds	r3, #1
 8001bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bee:	2b07      	cmp	r3, #7
 8001bf0:	ddd0      	ble.n	8001b94 <Draw_Slider+0xbc>
		}
	}

	uint8_t slider_str[4] = {0};
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
	sprintf(slider_str, "%03d", (uint8_t)(slider_magnitude[slider_id] / 2.55));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8001da8 <Draw_Slider+0x2d0>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c04:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001da0 <Draw_Slider+0x2c8>
 8001c08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c10:	edc7 7a00 	vstr	s15, [r7]
 8001c14:	783b      	ldrb	r3, [r7, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4964      	ldr	r1, [pc, #400]	@ (8001db0 <Draw_Slider+0x2d8>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f018 fea7 	bl	801a974 <siprintf>

	if (slider_id == 0) {
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 80f4 	bne.w	8001e16 <Draw_Slider+0x33e>
		uint16_t curs = 1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	837b      	strh	r3, [r7, #26]
		for (int y = 0; y < 8; y++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c36:	e02f      	b.n	8001c98 <Draw_Slider+0x1c0>
			for (int x = 3; x < 8; x++)
 8001c38:	2303      	movs	r3, #3
 8001c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c3c:	e00f      	b.n	8001c5e <Draw_Slider+0x186>
				ssd1_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 8001c3e:	8b7a      	ldrh	r2, [r7, #26]
 8001c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c42:	01db      	lsls	r3, r3, #7
 8001c44:	441a      	add	r2, r3
 8001c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c48:	4413      	add	r3, r2
 8001c4a:	f107 0110 	add.w	r1, r7, #16
 8001c4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c50:	440a      	add	r2, r1
 8001c52:	7811      	ldrb	r1, [r2, #0]
 8001c54:	4a57      	ldr	r2, [pc, #348]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001c56:	54d1      	strb	r1, [r2, r3]
			for (int x = 3; x < 8; x++)
 8001c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c60:	2b07      	cmp	r3, #7
 8001c62:	ddec      	ble.n	8001c3e <Draw_Slider+0x166>
			ssd1_vram[curs + y*128 + 0] = 0x80 >> subbit_sel;	// Set the fine control disp.
 8001c64:	7ffb      	ldrb	r3, [r7, #31]
 8001c66:	2280      	movs	r2, #128	@ 0x80
 8001c68:	fa42 f103 	asr.w	r1, r2, r3
 8001c6c:	8b7a      	ldrh	r2, [r7, #26]
 8001c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c70:	01db      	lsls	r3, r3, #7
 8001c72:	4413      	add	r3, r2
 8001c74:	b2c9      	uxtb	r1, r1
 8001c76:	4a4f      	ldr	r2, [pc, #316]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001c78:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[curs + y*128 + 1] = 0x80 >> subbit_sel;
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	2280      	movs	r2, #128	@ 0x80
 8001c7e:	fa42 f103 	asr.w	r1, r2, r3
 8001c82:	8b7a      	ldrh	r2, [r7, #26]
 8001c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c86:	01db      	lsls	r3, r3, #7
 8001c88:	4413      	add	r3, r2
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b2c9      	uxtb	r1, r1
 8001c8e:	4a49      	ldr	r2, [pc, #292]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001c90:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 8001c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c94:	3301      	adds	r3, #1
 8001c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	ddcc      	ble.n	8001c38 <Draw_Slider+0x160>
		}
		hssd1.str_cursor = 10;
 8001c9e:	4b46      	ldr	r3, [pc, #280]	@ (8001db8 <Draw_Slider+0x2e0>)
 8001ca0:	220a      	movs	r2, #10
 8001ca2:	821a      	strh	r2, [r3, #16]
		hssd1.draw_inverted = 1;
 8001ca4:	4b44      	ldr	r3, [pc, #272]	@ (8001db8 <Draw_Slider+0x2e0>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	749a      	strb	r2, [r3, #18]
		SSD1306_DrawString(&hssd1, slider_str, strlen(slider_str));
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fb16 	bl	80002e0 <strlen>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	483e      	ldr	r0, [pc, #248]	@ (8001db8 <Draw_Slider+0x2e0>)
 8001cc0:	f001 f908 	bl	8002ed4 <SSD1306_DrawString>
		hssd1.draw_inverted = 0;
 8001cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8001db8 <Draw_Slider+0x2e0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	749a      	strb	r2, [r3, #18]

		// Draw the strip on top
		for (uint8_t i = 10; i <= 128; i++) {
 8001cca:	230a      	movs	r3, #10
 8001ccc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001cd0:	e018      	b.n	8001d04 <Draw_Slider+0x22c>
			if (i%2 == 0)
 8001cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <Draw_Slider+0x216>
				ssd1_vram[128 + i] = 0b00010110;
 8001ce0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ce4:	3380      	adds	r3, #128	@ 0x80
 8001ce6:	4a33      	ldr	r2, [pc, #204]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001ce8:	2116      	movs	r1, #22
 8001cea:	54d1      	strb	r1, [r2, r3]
 8001cec:	e005      	b.n	8001cfa <Draw_Slider+0x222>
			else
				ssd1_vram[128 + i] = 0b00001110;
 8001cee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cf2:	3380      	adds	r3, #128	@ 0x80
 8001cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001cf6:	210e      	movs	r1, #14
 8001cf8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 10; i <= 128; i++) {
 8001cfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001d04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d08:	2b80      	cmp	r3, #128	@ 0x80
 8001d0a:	d9e2      	bls.n	8001cd2 <Draw_Slider+0x1fa>
		}

		// Pad the inverted number
		ssd1_vram[10] = 0xFF;
 8001d0c:	4b29      	ldr	r3, [pc, #164]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001d0e:	22ff      	movs	r2, #255	@ 0xff
 8001d10:	729a      	strb	r2, [r3, #10]
		ssd1_vram[29] = 0xFF;
 8001d12:	4b28      	ldr	r3, [pc, #160]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001d14:	22ff      	movs	r2, #255	@ 0xff
 8001d16:	775a      	strb	r2, [r3, #29]
		for (uint8_t i = 10; i < 30; i++) {
 8001d18:	230a      	movs	r3, #10
 8001d1a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001d1e:	e011      	b.n	8001d44 <Draw_Slider+0x26c>
			ssd1_vram[128 + i] |= 0b00000011;
 8001d20:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d24:	3380      	adds	r3, #128	@ 0x80
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001d28:	5cd2      	ldrb	r2, [r2, r3]
 8001d2a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d2e:	3380      	adds	r3, #128	@ 0x80
 8001d30:	f042 0203 	orr.w	r2, r2, #3
 8001d34:	b2d1      	uxtb	r1, r2
 8001d36:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001d38:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 10; i < 30; i++) {
 8001d3a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001d44:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d48:	2b1d      	cmp	r3, #29
 8001d4a:	d9e9      	bls.n	8001d20 <Draw_Slider+0x248>
		}

		// Draw the cool bars
		for (uint8_t i = 0; i <= 4; i++) {
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001d52:	e01e      	b.n	8001d92 <Draw_Slider+0x2ba>
			ssd1_vram[30+i*2] = 0xFF << i;
 8001d54:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d58:	22ff      	movs	r2, #255	@ 0xff
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d60:	330f      	adds	r3, #15
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	b2d1      	uxtb	r1, r2
 8001d66:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001d68:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[30+i*2 + 128] |= 0b00000011;
 8001d6a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d6e:	334f      	adds	r3, #79	@ 0x4f
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001d74:	5cd2      	ldrb	r2, [r2, r3]
 8001d76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d7a:	334f      	adds	r3, #79	@ 0x4f
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	f042 0203 	orr.w	r2, r2, #3
 8001d82:	b2d1      	uxtb	r1, r2
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <Draw_Slider+0x2dc>)
 8001d86:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 4; i++) {
 8001d88:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001d92:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d9dc      	bls.n	8001d54 <Draw_Slider+0x27c>
		}

		for (uint16_t i = 1; i <= 7; i++) {
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001d9e:	e036      	b.n	8001e0e <Draw_Slider+0x336>
 8001da0:	66666666 	.word	0x66666666
 8001da4:	40046666 	.word	0x40046666
 8001da8:	24026b24 	.word	0x24026b24
 8001dac:	24026b28 	.word	0x24026b28
 8001db0:	0801b218 	.word	0x0801b218
 8001db4:	240009f8 	.word	0x240009f8
 8001db8:	240009d0 	.word	0x240009d0
			ssd1_vram[i*128 + 10] = 0xFF;
 8001dbc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001dbe:	01db      	lsls	r3, r3, #7
 8001dc0:	330a      	adds	r3, #10
 8001dc2:	4a8c      	ldr	r2, [pc, #560]	@ (8001ff4 <Draw_Slider+0x51c>)
 8001dc4:	21ff      	movs	r1, #255	@ 0xff
 8001dc6:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 11] = 0xFF;
 8001dc8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001dca:	01db      	lsls	r3, r3, #7
 8001dcc:	330b      	adds	r3, #11
 8001dce:	4a89      	ldr	r2, [pc, #548]	@ (8001ff4 <Draw_Slider+0x51c>)
 8001dd0:	21ff      	movs	r1, #255	@ 0xff
 8001dd2:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 12] |= 0x55;
 8001dd4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	330c      	adds	r3, #12
 8001dda:	4a86      	ldr	r2, [pc, #536]	@ (8001ff4 <Draw_Slider+0x51c>)
 8001ddc:	5cd2      	ldrb	r2, [r2, r3]
 8001dde:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001de0:	01db      	lsls	r3, r3, #7
 8001de2:	330c      	adds	r3, #12
 8001de4:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8001de8:	b2d1      	uxtb	r1, r2
 8001dea:	4a82      	ldr	r2, [pc, #520]	@ (8001ff4 <Draw_Slider+0x51c>)
 8001dec:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 13] |= 0xAA;
 8001dee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001df0:	01db      	lsls	r3, r3, #7
 8001df2:	330d      	adds	r3, #13
 8001df4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ff4 <Draw_Slider+0x51c>)
 8001df6:	5cd2      	ldrb	r2, [r2, r3]
 8001df8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001dfa:	01db      	lsls	r3, r3, #7
 8001dfc:	330d      	adds	r3, #13
 8001dfe:	f062 0255 	orn	r2, r2, #85	@ 0x55
 8001e02:	b2d1      	uxtb	r1, r2
 8001e04:	4a7b      	ldr	r2, [pc, #492]	@ (8001ff4 <Draw_Slider+0x51c>)
 8001e06:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 1; i <= 7; i++) {
 8001e08:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001e0e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e10:	2b07      	cmp	r3, #7
 8001e12:	d9d3      	bls.n	8001dbc <Draw_Slider+0x2e4>
			ssd2_vram[i*128 + 117] = 0xFF;
			ssd2_vram[i*128 + 116] |= 0x55;
			ssd2_vram[i*128 + 115] |= 0xAA;
		}
	}
}
 8001e14:	e0ea      	b.n	8001fec <Draw_Slider+0x514>
		uint16_t curs = 120;
 8001e16:	2378      	movs	r3, #120	@ 0x78
 8001e18:	83bb      	strh	r3, [r7, #28]
		for (int y = 0; y < 8; y++) {
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e1e:	e030      	b.n	8001e82 <Draw_Slider+0x3aa>
			for (int x = 0; x < 5; x++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e24:	e00f      	b.n	8001e46 <Draw_Slider+0x36e>
				ssd2_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 8001e26:	8bba      	ldrh	r2, [r7, #28]
 8001e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2a:	01db      	lsls	r3, r3, #7
 8001e2c:	441a      	add	r2, r3
 8001e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e30:	4413      	add	r3, r2
 8001e32:	f107 0110 	add.w	r1, r7, #16
 8001e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e38:	440a      	add	r2, r1
 8001e3a:	7811      	ldrb	r1, [r2, #0]
 8001e3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff8 <Draw_Slider+0x520>)
 8001e3e:	54d1      	strb	r1, [r2, r3]
			for (int x = 0; x < 5; x++)
 8001e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e42:	3301      	adds	r3, #1
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	ddec      	ble.n	8001e26 <Draw_Slider+0x34e>
			ssd2_vram[curs + y*128 + 6] = 0x80 >> subbit_sel;	// Set the fine control disp.
 8001e4c:	7ffb      	ldrb	r3, [r7, #31]
 8001e4e:	2280      	movs	r2, #128	@ 0x80
 8001e50:	fa42 f103 	asr.w	r1, r2, r3
 8001e54:	8bba      	ldrh	r2, [r7, #28]
 8001e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3306      	adds	r3, #6
 8001e5e:	b2c9      	uxtb	r1, r1
 8001e60:	4a65      	ldr	r2, [pc, #404]	@ (8001ff8 <Draw_Slider+0x520>)
 8001e62:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[curs + y*128 + 7] = 0x80 >> subbit_sel;
 8001e64:	7ffb      	ldrb	r3, [r7, #31]
 8001e66:	2280      	movs	r2, #128	@ 0x80
 8001e68:	fa42 f103 	asr.w	r1, r2, r3
 8001e6c:	8bba      	ldrh	r2, [r7, #28]
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	01db      	lsls	r3, r3, #7
 8001e72:	4413      	add	r3, r2
 8001e74:	3307      	adds	r3, #7
 8001e76:	b2c9      	uxtb	r1, r1
 8001e78:	4a5f      	ldr	r2, [pc, #380]	@ (8001ff8 <Draw_Slider+0x520>)
 8001e7a:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 8001e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7e:	3301      	adds	r3, #1
 8001e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e84:	2b07      	cmp	r3, #7
 8001e86:	ddcb      	ble.n	8001e20 <Draw_Slider+0x348>
		hssd2.str_cursor = 98;
 8001e88:	4b5c      	ldr	r3, [pc, #368]	@ (8001ffc <Draw_Slider+0x524>)
 8001e8a:	2262      	movs	r2, #98	@ 0x62
 8001e8c:	821a      	strh	r2, [r3, #16]
		hssd2.draw_inverted = 1;
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ffc <Draw_Slider+0x524>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	749a      	strb	r2, [r3, #18]
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fa21 	bl	80002e0 <strlen>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4854      	ldr	r0, [pc, #336]	@ (8001ffc <Draw_Slider+0x524>)
 8001eaa:	f001 f813 	bl	8002ed4 <SSD1306_DrawString>
		hssd2.draw_inverted = 0;
 8001eae:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <Draw_Slider+0x524>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	749a      	strb	r2, [r3, #18]
		for (uint8_t i = 0; i <= 128-10; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001eba:	e018      	b.n	8001eee <Draw_Slider+0x416>
			if (i%2 == 0)
 8001ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <Draw_Slider+0x400>
				ssd2_vram[128 + i] = 0b00010110;
 8001eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ece:	3380      	adds	r3, #128	@ 0x80
 8001ed0:	4a49      	ldr	r2, [pc, #292]	@ (8001ff8 <Draw_Slider+0x520>)
 8001ed2:	2116      	movs	r1, #22
 8001ed4:	54d1      	strb	r1, [r2, r3]
 8001ed6:	e005      	b.n	8001ee4 <Draw_Slider+0x40c>
				ssd2_vram[128 + i] = 0b00001110;
 8001ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001edc:	3380      	adds	r3, #128	@ 0x80
 8001ede:	4a46      	ldr	r2, [pc, #280]	@ (8001ff8 <Draw_Slider+0x520>)
 8001ee0:	210e      	movs	r1, #14
 8001ee2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 128-10; i++) {
 8001ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ef2:	2b76      	cmp	r3, #118	@ 0x76
 8001ef4:	d9e2      	bls.n	8001ebc <Draw_Slider+0x3e4>
		ssd2_vram[128-10] = 0xFF;
 8001ef6:	4b40      	ldr	r3, [pc, #256]	@ (8001ff8 <Draw_Slider+0x520>)
 8001ef8:	22ff      	movs	r2, #255	@ 0xff
 8001efa:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
		ssd2_vram[128-11] = 0xFF;
 8001efe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff8 <Draw_Slider+0x520>)
 8001f00:	22ff      	movs	r2, #255	@ 0xff
 8001f02:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
		for (uint8_t i = 128-30; i < 128-10; i++) {
 8001f06:	2362      	movs	r3, #98	@ 0x62
 8001f08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f0c:	e011      	b.n	8001f32 <Draw_Slider+0x45a>
			ssd2_vram[128 + i] |= 0b00000011;
 8001f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f12:	3380      	adds	r3, #128	@ 0x80
 8001f14:	4a38      	ldr	r2, [pc, #224]	@ (8001ff8 <Draw_Slider+0x520>)
 8001f16:	5cd2      	ldrb	r2, [r2, r3]
 8001f18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f1c:	3380      	adds	r3, #128	@ 0x80
 8001f1e:	f042 0203 	orr.w	r2, r2, #3
 8001f22:	b2d1      	uxtb	r1, r2
 8001f24:	4a34      	ldr	r2, [pc, #208]	@ (8001ff8 <Draw_Slider+0x520>)
 8001f26:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 128-30; i < 128-10; i++) {
 8001f28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f36:	2b75      	cmp	r3, #117	@ 0x75
 8001f38:	d9e9      	bls.n	8001f0e <Draw_Slider+0x436>
		for (uint8_t i = 0; i <= 4; i++) {
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001f40:	e021      	b.n	8001f86 <Draw_Slider+0x4ae>
			ssd2_vram[128 - (30+i*2)] = 0xFF << i;
 8001f42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f46:	22ff      	movs	r2, #255	@ 0xff
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f4e:	f1c3 0331 	rsb	r3, r3, #49	@ 0x31
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	b2d1      	uxtb	r1, r2
 8001f56:	4a28      	ldr	r2, [pc, #160]	@ (8001ff8 <Draw_Slider+0x520>)
 8001f58:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[128 - (30+i*2) + 128] |= 0b00000011;
 8001f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f5e:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4a24      	ldr	r2, [pc, #144]	@ (8001ff8 <Draw_Slider+0x520>)
 8001f66:	5cd2      	ldrb	r2, [r2, r3]
 8001f68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f6c:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	f042 0203 	orr.w	r2, r2, #3
 8001f76:	b2d1      	uxtb	r1, r2
 8001f78:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <Draw_Slider+0x520>)
 8001f7a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 4; i++) {
 8001f7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f80:	3301      	adds	r3, #1
 8001f82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001f86:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d9d9      	bls.n	8001f42 <Draw_Slider+0x46a>
		for (uint16_t i = 1; i <= 7; i++) {
 8001f8e:	2301      	movs	r3, #1
 8001f90:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001f92:	e028      	b.n	8001fe6 <Draw_Slider+0x50e>
			ssd2_vram[i*128 + 118] = 0xFF;
 8001f94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f96:	01db      	lsls	r3, r3, #7
 8001f98:	3376      	adds	r3, #118	@ 0x76
 8001f9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ff8 <Draw_Slider+0x520>)
 8001f9c:	21ff      	movs	r1, #255	@ 0xff
 8001f9e:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 117] = 0xFF;
 8001fa0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fa2:	01db      	lsls	r3, r3, #7
 8001fa4:	3375      	adds	r3, #117	@ 0x75
 8001fa6:	4a14      	ldr	r2, [pc, #80]	@ (8001ff8 <Draw_Slider+0x520>)
 8001fa8:	21ff      	movs	r1, #255	@ 0xff
 8001faa:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 116] |= 0x55;
 8001fac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fae:	01db      	lsls	r3, r3, #7
 8001fb0:	3374      	adds	r3, #116	@ 0x74
 8001fb2:	4a11      	ldr	r2, [pc, #68]	@ (8001ff8 <Draw_Slider+0x520>)
 8001fb4:	5cd2      	ldrb	r2, [r2, r3]
 8001fb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fb8:	01db      	lsls	r3, r3, #7
 8001fba:	3374      	adds	r3, #116	@ 0x74
 8001fbc:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8001fc0:	b2d1      	uxtb	r1, r2
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff8 <Draw_Slider+0x520>)
 8001fc4:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 115] |= 0xAA;
 8001fc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fc8:	01db      	lsls	r3, r3, #7
 8001fca:	3373      	adds	r3, #115	@ 0x73
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <Draw_Slider+0x520>)
 8001fce:	5cd2      	ldrb	r2, [r2, r3]
 8001fd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fd2:	01db      	lsls	r3, r3, #7
 8001fd4:	3373      	adds	r3, #115	@ 0x73
 8001fd6:	f062 0255 	orn	r2, r2, #85	@ 0x55
 8001fda:	b2d1      	uxtb	r1, r2
 8001fdc:	4a06      	ldr	r2, [pc, #24]	@ (8001ff8 <Draw_Slider+0x520>)
 8001fde:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 1; i <= 7; i++) {
 8001fe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001fe6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	d9d3      	bls.n	8001f94 <Draw_Slider+0x4bc>
}
 8001fec:	bf00      	nop
 8001fee:	3748      	adds	r7, #72	@ 0x48
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	240009f8 	.word	0x240009f8
 8001ff8:	24000df8 	.word	0x24000df8
 8001ffc:	240009e4 	.word	0x240009e4

08002000 <WriteDebug>:

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 800200c:	480d      	ldr	r0, [pc, #52]	@ (8002044 <WriteDebug+0x44>)
 800200e:	f000 fec1 	bl	8002d94 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8002012:	480d      	ldr	r0, [pc, #52]	@ (8002048 <WriteDebug+0x48>)
 8002014:	f000 febe 	bl	8002d94 <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	461a      	mov	r2, r3
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4809      	ldr	r0, [pc, #36]	@ (8002044 <WriteDebug+0x44>)
 8002020:	f000 ff58 	bl	8002ed4 <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	461a      	mov	r2, r3
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4807      	ldr	r0, [pc, #28]	@ (8002048 <WriteDebug+0x48>)
 800202c:	f000 ff52 	bl	8002ed4 <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 8002030:	4804      	ldr	r0, [pc, #16]	@ (8002044 <WriteDebug+0x44>)
 8002032:	f000 fec3 	bl	8002dbc <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8002036:	4804      	ldr	r0, [pc, #16]	@ (8002048 <WriteDebug+0x48>)
 8002038:	f000 fec0 	bl	8002dbc <SSD1306_Update>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	240009d0 	.word	0x240009d0
 8002048:	240009e4 	.word	0x240009e4

0800204c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002052:	463b      	mov	r3, r7
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800205e:	f002 ff5d 	bl	8004f1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002062:	2301      	movs	r3, #1
 8002064:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002066:	2300      	movs	r3, #0
 8002068:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800206e:	231f      	movs	r3, #31
 8002070:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002072:	2387      	movs	r3, #135	@ 0x87
 8002074:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002076:	2300      	movs	r3, #0
 8002078:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800207a:	2300      	movs	r3, #0
 800207c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800207e:	2301      	movs	r3, #1
 8002080:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800208e:	463b      	mov	r3, r7
 8002090:	4618      	mov	r0, r3
 8002092:	f002 ff7b 	bl	8004f8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002096:	2004      	movs	r0, #4
 8002098:	f002 ff58 	bl	8004f4c <HAL_MPU_Enable>

}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <Error_Handler+0x8>

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_MspInit+0x30>)
 80020b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020bc:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <HAL_MspInit+0x30>)
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_MspInit+0x30>)
 80020c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	58024400 	.word	0x58024400

080020e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	@ 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3e      	ldr	r2, [pc, #248]	@ (80021fc <HAL_ADC_MspInit+0x118>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d175      	bne.n	80021f2 <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002106:	4b3e      	ldr	r3, [pc, #248]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 8002108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800210c:	4a3c      	ldr	r2, [pc, #240]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 800210e:	f043 0320 	orr.w	r3, r3, #32
 8002112:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002116:	4b3a      	ldr	r3, [pc, #232]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 8002118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212a:	4a35      	ldr	r2, [pc, #212]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002134:	4b32      	ldr	r3, [pc, #200]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b2f      	ldr	r3, [pc, #188]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002148:	4a2d      	ldr	r2, [pc, #180]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002152:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <HAL_ADC_MspInit+0x11c>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8002160:	2340      	movs	r3, #64	@ 0x40
 8002162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002164:	2303      	movs	r3, #3
 8002166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4824      	ldr	r0, [pc, #144]	@ (8002204 <HAL_ADC_MspInit+0x120>)
 8002174:	f005 fda0 	bl	8007cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8002178:	2310      	movs	r3, #16
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217c:	2303      	movs	r3, #3
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	481f      	ldr	r0, [pc, #124]	@ (8002208 <HAL_ADC_MspInit+0x124>)
 800218c:	f005 fd94 	bl	8007cb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 8002190:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <HAL_ADC_MspInit+0x128>)
 8002192:	4a1f      	ldr	r2, [pc, #124]	@ (8002210 <HAL_ADC_MspInit+0x12c>)
 8002194:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002196:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_ADC_MspInit+0x128>)
 8002198:	2209      	movs	r2, #9
 800219a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_ADC_MspInit+0x128>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021b0:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80021c8:	4b10      	ldr	r3, [pc, #64]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021d0:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021d6:	480d      	ldr	r0, [pc, #52]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021d8:	f002 ff18 	bl	800500c <HAL_DMA_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80021e2:	f7ff ff5f 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a08      	ldr	r2, [pc, #32]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80021ec:	4a07      	ldr	r2, [pc, #28]	@ (800220c <HAL_ADC_MspInit+0x128>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	@ 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40022000 	.word	0x40022000
 8002200:	58024400 	.word	0x58024400
 8002204:	58020000 	.word	0x58020000
 8002208:	58020800 	.word	0x58020800
 800220c:	24000414 	.word	0x24000414
 8002210:	40020058 	.word	0x40020058

08002214 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a73      	ldr	r2, [pc, #460]	@ (8002400 <HAL_I2C_MspInit+0x1ec>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d16d      	bne.n	8002312 <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b73      	ldr	r3, [pc, #460]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223c:	4a71      	ldr	r2, [pc, #452]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002246:	4b6f      	ldr	r3, [pc, #444]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002254:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225a:	2312      	movs	r3, #18
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002266:	2304      	movs	r3, #4
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	4865      	ldr	r0, [pc, #404]	@ (8002408 <HAL_I2C_MspInit+0x1f4>)
 8002272:	f005 fd21 	bl	8007cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002276:	4b63      	ldr	r3, [pc, #396]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 8002278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800227c:	4a61      	ldr	r2, [pc, #388]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 800227e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002282:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002286:	4b5f      	ldr	r3, [pc, #380]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 8002288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8002294:	4b5d      	ldr	r3, [pc, #372]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 8002296:	4a5e      	ldr	r2, [pc, #376]	@ (8002410 <HAL_I2C_MspInit+0x1fc>)
 8002298:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800229a:	4b5c      	ldr	r3, [pc, #368]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 800229c:	2222      	movs	r2, #34	@ 0x22
 800229e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a0:	4b5a      	ldr	r3, [pc, #360]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022a2:	2240      	movs	r2, #64	@ 0x40
 80022a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a6:	4b59      	ldr	r3, [pc, #356]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ac:	4b57      	ldr	r3, [pc, #348]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022b4:	4b55      	ldr	r3, [pc, #340]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ba:	4b54      	ldr	r3, [pc, #336]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80022c0:	4b52      	ldr	r3, [pc, #328]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80022c6:	4b51      	ldr	r3, [pc, #324]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022cc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ce:	4b4f      	ldr	r3, [pc, #316]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80022d4:	484d      	ldr	r0, [pc, #308]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022d6:	f002 fe99 	bl	800500c <HAL_DMA_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80022e0:	f7ff fee0 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a49      	ldr	r2, [pc, #292]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80022ea:	4a48      	ldr	r2, [pc, #288]	@ (800240c <HAL_I2C_MspInit+0x1f8>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	201f      	movs	r0, #31
 80022f6:	f002 fddc 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022fa:	201f      	movs	r0, #31
 80022fc:	f002 fdf3 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	2020      	movs	r0, #32
 8002306:	f002 fdd4 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800230a:	2020      	movs	r0, #32
 800230c:	f002 fdeb 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002310:	e071      	b.n	80023f6 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3f      	ldr	r2, [pc, #252]	@ (8002414 <HAL_I2C_MspInit+0x200>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d16c      	bne.n	80023f6 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 800231e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002322:	4a38      	ldr	r2, [pc, #224]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800232c:	4b35      	ldr	r3, [pc, #212]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 800232e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800233a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002340:	2312      	movs	r3, #18
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002344:	2301      	movs	r3, #1
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800234c:	2304      	movs	r3, #4
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	4619      	mov	r1, r3
 8002356:	482c      	ldr	r0, [pc, #176]	@ (8002408 <HAL_I2C_MspInit+0x1f4>)
 8002358:	f005 fcae 	bl	8007cb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800235c:	4b29      	ldr	r3, [pc, #164]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 800235e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002362:	4a28      	ldr	r2, [pc, #160]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 8002364:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002368:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800236c:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <HAL_I2C_MspInit+0x1f0>)
 800236e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800237a:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 800237c:	4a27      	ldr	r2, [pc, #156]	@ (800241c <HAL_I2C_MspInit+0x208>)
 800237e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8002380:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 8002382:	2224      	movs	r2, #36	@ 0x24
 8002384:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002386:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 8002388:	2240      	movs	r2, #64	@ 0x40
 800238a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800238c:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002392:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 8002394:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002398:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800239a:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 80023ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023b2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023b4:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80023ba:	4817      	ldr	r0, [pc, #92]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 80023bc:	f002 fe26 	bl	800500c <HAL_DMA_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80023c6:	f7ff fe6d 	bl	80020a4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a12      	ldr	r2, [pc, #72]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 80023ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80023d0:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <HAL_I2C_MspInit+0x204>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2021      	movs	r0, #33	@ 0x21
 80023dc:	f002 fd69 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80023e0:	2021      	movs	r0, #33	@ 0x21
 80023e2:	f002 fd80 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2022      	movs	r0, #34	@ 0x22
 80023ec:	f002 fd61 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80023f0:	2022      	movs	r0, #34	@ 0x22
 80023f2:	f002 fd78 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3730      	adds	r7, #48	@ 0x30
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40005400 	.word	0x40005400
 8002404:	58024400 	.word	0x58024400
 8002408:	58020400 	.word	0x58020400
 800240c:	24000534 	.word	0x24000534
 8002410:	40020040 	.word	0x40020040
 8002414:	40005800 	.word	0x40005800
 8002418:	240005ac 	.word	0x240005ac
 800241c:	40020028 	.word	0x40020028

08002420 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a55      	ldr	r2, [pc, #340]	@ (8002584 <HAL_JPEG_MspInit+0x164>)
 800242e:	4293      	cmp	r3, r2
 8002430:	f040 80a3 	bne.w	800257a <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8002434:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <HAL_JPEG_MspInit+0x168>)
 8002436:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800243a:	4a53      	ldr	r2, [pc, #332]	@ (8002588 <HAL_JPEG_MspInit+0x168>)
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002444:	4b50      	ldr	r3, [pc, #320]	@ (8002588 <HAL_JPEG_MspInit+0x168>)
 8002446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8002452:	4b4e      	ldr	r3, [pc, #312]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 8002454:	4a4e      	ldr	r2, [pc, #312]	@ (8002590 <HAL_JPEG_MspInit+0x170>)
 8002456:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8002458:	4b4c      	ldr	r3, [pc, #304]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 800245a:	2211      	movs	r2, #17
 800245c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800245e:	4b4b      	ldr	r3, [pc, #300]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002464:	4b49      	ldr	r3, [pc, #292]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 8002466:	2240      	movs	r2, #64	@ 0x40
 8002468:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800246a:	4b48      	ldr	r3, [pc, #288]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8002470:	4b46      	ldr	r3, [pc, #280]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 8002472:	2202      	movs	r2, #2
 8002474:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8002476:	4b45      	ldr	r3, [pc, #276]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 800247c:	4b43      	ldr	r3, [pc, #268]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8002482:	4b42      	ldr	r3, [pc, #264]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 8002484:	2280      	movs	r2, #128	@ 0x80
 8002486:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002488:	4b40      	ldr	r3, [pc, #256]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 800248a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8002490:	4b3e      	ldr	r3, [pc, #248]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 8002492:	2220      	movs	r2, #32
 8002494:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002496:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 8002498:	2200      	movs	r2, #0
 800249a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800249c:	4b3b      	ldr	r3, [pc, #236]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80024a2:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80024a8:	4b38      	ldr	r3, [pc, #224]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80024ae:	4837      	ldr	r0, [pc, #220]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 80024b0:	f00a f9d4 	bl	800c85c <HAL_MDMA_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 80024ba:	f7ff fdf3 	bl	80020a4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	4832      	ldr	r0, [pc, #200]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 80024c4:	f00a fa16 	bl	800c8f4 <HAL_MDMA_ConfigPostRequestMask>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 80024ce:	f7ff fde9 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a2d      	ldr	r2, [pc, #180]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024d8:	4a2c      	ldr	r2, [pc, #176]	@ (800258c <HAL_JPEG_MspInit+0x16c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 80024de:	4b2d      	ldr	r3, [pc, #180]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 80024e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002598 <HAL_JPEG_MspInit+0x178>)
 80024e2:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 80024e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 80024e6:	2214      	movs	r2, #20
 80024e8:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80024ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80024f0:	4b28      	ldr	r3, [pc, #160]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 80024f2:	2240      	movs	r2, #64	@ 0x40
 80024f4:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80024f6:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80024fc:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002504:	2208      	movs	r2, #8
 8002506:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8002508:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 800250a:	2220      	movs	r2, #32
 800250c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002516:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 800251e:	2204      	movs	r2, #4
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002524:	2200      	movs	r2, #0
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002528:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 800252a:	2200      	movs	r2, #0
 800252c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002530:	2200      	movs	r2, #0
 8002532:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002536:	2200      	movs	r2, #0
 8002538:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 800253a:	4816      	ldr	r0, [pc, #88]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 800253c:	f00a f98e 	bl	800c85c <HAL_MDMA_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8002546:	f7ff fdad 	bl	80020a4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	4811      	ldr	r0, [pc, #68]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002550:	f00a f9d0 	bl	800c8f4 <HAL_MDMA_ConfigPostRequestMask>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 800255a:	f7ff fda3 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a0c      	ldr	r2, [pc, #48]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002562:	635a      	str	r2, [r3, #52]	@ 0x34
 8002564:	4a0b      	ldr	r2, [pc, #44]	@ (8002594 <HAL_JPEG_MspInit+0x174>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	2079      	movs	r0, #121	@ 0x79
 8002570:	f002 fc9f 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002574:	2079      	movs	r0, #121	@ 0x79
 8002576:	f002 fcb6 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	52003000 	.word	0x52003000
 8002588:	58024400 	.word	0x58024400
 800258c:	2400067c 	.word	0x2400067c
 8002590:	52000040 	.word	0x52000040
 8002594:	240006e8 	.word	0x240006e8
 8002598:	52000080 	.word	0x52000080

0800259c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0ba      	sub	sp, #232	@ 0xe8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	22c0      	movs	r2, #192	@ 0xc0
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f018 f9fb 	bl	801a9b8 <memset>
  if(hspi->Instance==SPI4)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a54      	ldr	r2, [pc, #336]	@ (8002718 <HAL_SPI_MspInit+0x17c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	f040 80a1 	bne.w	8002710 <HAL_SPI_MspInit+0x174>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80025ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 80025da:	2310      	movs	r3, #16
 80025dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 80025de:	2380      	movs	r3, #128	@ 0x80
 80025e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 80;
 80025e2:	2350      	movs	r3, #80	@ 0x50
 80025e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80025e6:	2302      	movs	r3, #2
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80025ea:	2302      	movs	r3, #2
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80025fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025fe:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f00c fff7 	bl	800f5f8 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8002610:	f7ff fd48 	bl	80020a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002614:	4b41      	ldr	r3, [pc, #260]	@ (800271c <HAL_SPI_MspInit+0x180>)
 8002616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800261a:	4a40      	ldr	r2, [pc, #256]	@ (800271c <HAL_SPI_MspInit+0x180>)
 800261c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002620:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002624:	4b3d      	ldr	r3, [pc, #244]	@ (800271c <HAL_SPI_MspInit+0x180>)
 8002626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800262a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002632:	4b3a      	ldr	r3, [pc, #232]	@ (800271c <HAL_SPI_MspInit+0x180>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002638:	4a38      	ldr	r2, [pc, #224]	@ (800271c <HAL_SPI_MspInit+0x180>)
 800263a:	f043 0310 	orr.w	r3, r3, #16
 800263e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002642:	4b36      	ldr	r3, [pc, #216]	@ (800271c <HAL_SPI_MspInit+0x180>)
 8002644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002650:	2344      	movs	r3, #68	@ 0x44
 8002652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002668:	2305      	movs	r3, #5
 800266a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800266e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002672:	4619      	mov	r1, r3
 8002674:	482a      	ldr	r0, [pc, #168]	@ (8002720 <HAL_SPI_MspInit+0x184>)
 8002676:	f005 fb1f 	bl	8007cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800267a:	2310      	movs	r3, #16
 800267c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002692:	2305      	movs	r3, #5
 8002694:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002698:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800269c:	4619      	mov	r1, r3
 800269e:	4820      	ldr	r0, [pc, #128]	@ (8002720 <HAL_SPI_MspInit+0x184>)
 80026a0:	f005 fb0a 	bl	8007cb8 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 80026a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026a6:	4a20      	ldr	r2, [pc, #128]	@ (8002728 <HAL_SPI_MspInit+0x18c>)
 80026a8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80026aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026ac:	2254      	movs	r2, #84	@ 0x54
 80026ae:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026b2:	2240      	movs	r2, #64	@ 0x40
 80026b4:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026c2:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c4:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80026d0:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026dc:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80026e4:	480f      	ldr	r0, [pc, #60]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026e6:	f002 fc91 	bl	800500c <HAL_DMA_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80026f0:	f7ff fcd8 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026f8:	679a      	str	r2, [r3, #120]	@ 0x78
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <HAL_SPI_MspInit+0x188>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2054      	movs	r0, #84	@ 0x54
 8002706:	f002 fbd4 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800270a:	2054      	movs	r0, #84	@ 0x54
 800270c:	f002 fbeb 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002710:	bf00      	nop
 8002712:	37e8      	adds	r7, #232	@ 0xe8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40013400 	.word	0x40013400
 800271c:	58024400 	.word	0x58024400
 8002720:	58021000 	.word	0x58021000
 8002724:	240007dc 	.word	0x240007dc
 8002728:	40020010 	.word	0x40020010

0800272c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0e      	ldr	r2, [pc, #56]	@ (8002774 <HAL_TIM_Base_MspInit+0x48>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d116      	bne.n	800276c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800273e:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <HAL_TIM_Base_MspInit+0x4c>)
 8002740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002744:	4a0c      	ldr	r2, [pc, #48]	@ (8002778 <HAL_TIM_Base_MspInit+0x4c>)
 8002746:	f043 0308 	orr.w	r3, r3, #8
 800274a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_TIM_Base_MspInit+0x4c>)
 8002750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	2032      	movs	r0, #50	@ 0x32
 8002762:	f002 fba6 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002766:	2032      	movs	r0, #50	@ 0x32
 8002768:	f002 fbbd 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40000c00 	.word	0x40000c00
 8002778:	58024400 	.word	0x58024400

0800277c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0ba      	sub	sp, #232	@ 0xe8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	22c0      	movs	r2, #192	@ 0xc0
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f018 f90b 	bl	801a9b8 <memset>
  if(huart->Instance==USART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a43      	ldr	r2, [pc, #268]	@ (80028b4 <HAL_UART_MspInit+0x138>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d17e      	bne.n	80028aa <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027ac:	f04f 0201 	mov.w	r2, #1
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00c ff18 	bl	800f5f8 <HAL_RCCEx_PeriphCLKConfig>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80027ce:	f7ff fc69 	bl	80020a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d2:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <HAL_UART_MspInit+0x13c>)
 80027d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027d8:	4a37      	ldr	r2, [pc, #220]	@ (80028b8 <HAL_UART_MspInit+0x13c>)
 80027da:	f043 0310 	orr.w	r3, r3, #16
 80027de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027e2:	4b35      	ldr	r3, [pc, #212]	@ (80028b8 <HAL_UART_MspInit+0x13c>)
 80027e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_UART_MspInit+0x13c>)
 80027f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f6:	4a30      	ldr	r2, [pc, #192]	@ (80028b8 <HAL_UART_MspInit+0x13c>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002800:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <HAL_UART_MspInit+0x13c>)
 8002802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800280e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002828:	2304      	movs	r3, #4
 800282a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002832:	4619      	mov	r1, r3
 8002834:	4821      	ldr	r0, [pc, #132]	@ (80028bc <HAL_UART_MspInit+0x140>)
 8002836:	f005 fa3f 	bl	8007cb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800283a:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 800283c:	4a21      	ldr	r2, [pc, #132]	@ (80028c4 <HAL_UART_MspInit+0x148>)
 800283e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002840:	4b1f      	ldr	r3, [pc, #124]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002842:	2229      	movs	r2, #41	@ 0x29
 8002844:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002846:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284c:	4b1c      	ldr	r3, [pc, #112]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002858:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800285a:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800286c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002870:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002874:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002876:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002878:	2200      	movs	r2, #0
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800287c:	4810      	ldr	r0, [pc, #64]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 800287e:	f002 fbc5 	bl	800500c <HAL_DMA_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002888:	f7ff fc0c 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a0c      	ldr	r2, [pc, #48]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002890:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002894:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <HAL_UART_MspInit+0x144>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2025      	movs	r0, #37	@ 0x25
 80028a0:	f002 fb07 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028a4:	2025      	movs	r0, #37	@ 0x25
 80028a6:	f002 fb1e 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80028aa:	bf00      	nop
 80028ac:	37e8      	adds	r7, #232	@ 0xe8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40011000 	.word	0x40011000
 80028b8:	58024400 	.word	0x58024400
 80028bc:	58020400 	.word	0x58020400
 80028c0:	24000934 	.word	0x24000934
 80028c4:	40020410 	.word	0x40020410

080028c8 <__NVIC_SystemReset>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80028cc:	f3bf 8f4f 	dsb	sy
}
 80028d0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <__NVIC_SystemReset+0x24>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80028da:	4904      	ldr	r1, [pc, #16]	@ (80028ec <__NVIC_SystemReset+0x24>)
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <__NVIC_SystemReset+0x28>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80028e2:	f3bf 8f4f 	dsb	sy
}
 80028e6:	bf00      	nop
    __NOP();
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <__NVIC_SystemReset+0x20>
 80028ec:	e000ed00 	.word	0xe000ed00
 80028f0:	05fa0004 	.word	0x05fa0004

080028f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <NMI_Handler+0x4>

080028fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// ON HARDFAULT:
	// Reset the system
	NVIC_SystemReset();
 8002900:	f7ff ffe2 	bl	80028c8 <__NVIC_SystemReset>

08002904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <MemManage_Handler+0x4>

0800290c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <BusFault_Handler+0x4>

08002914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <UsageFault_Handler+0x4>

0800291c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800294a:	f000 fed5 	bl	80036f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <DMA1_Stream0_IRQHandler+0x10>)
 800295a:	f003 fe81 	bl	8006660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	240007dc 	.word	0x240007dc

08002968 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800296c:	4802      	ldr	r0, [pc, #8]	@ (8002978 <DMA1_Stream1_IRQHandler+0x10>)
 800296e:	f003 fe77 	bl	8006660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	240005ac 	.word	0x240005ac

0800297c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <DMA1_Stream2_IRQHandler+0x10>)
 8002982:	f003 fe6d 	bl	8006660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	24000534 	.word	0x24000534

08002990 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <DMA1_Stream3_IRQHandler+0x10>)
 8002996:	f003 fe63 	bl	8006660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	24000414 	.word	0x24000414

080029a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <I2C1_EV_IRQHandler+0x10>)
 80029aa:	f005 fe2f 	bl	800860c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2400048c 	.word	0x2400048c

080029b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <I2C1_ER_IRQHandler+0x10>)
 80029be:	f005 fe3f 	bl	8008640 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2400048c 	.word	0x2400048c

080029cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <I2C2_EV_IRQHandler+0x10>)
 80029d2:	f005 fe1b 	bl	800860c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	240004e0 	.word	0x240004e0

080029e0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <I2C2_ER_IRQHandler+0x10>)
 80029e6:	f005 fe2b 	bl	8008640 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	240004e0 	.word	0x240004e0

080029f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <USART1_IRQHandler+0x10>)
 80029fa:	f011 f8bb 	bl	8013b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	240008a0 	.word	0x240008a0

08002a08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 8002a0c:	f7fe fb80 	bl	8001110 <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a10:	4802      	ldr	r0, [pc, #8]	@ (8002a1c <TIM5_IRQHandler+0x14>)
 8002a12:	f010 fb69 	bl	80130e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	24000854 	.word	0x24000854

08002a20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a24:	4802      	ldr	r0, [pc, #8]	@ (8002a30 <DMA2_Stream0_IRQHandler+0x10>)
 8002a26:	f003 fe1b 	bl	8006660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	24000934 	.word	0x24000934

08002a34 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002a38:	4802      	ldr	r0, [pc, #8]	@ (8002a44 <SPI4_IRQHandler+0x10>)
 8002a3a:	f00f ff2f 	bl	801289c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	24000754 	.word	0x24000754

08002a48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <OTG_FS_IRQHandler+0x10>)
 8002a4e:	f00a fc44 	bl	800d2da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	240485d4 	.word	0x240485d4

08002a5c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <JPEG_IRQHandler+0x10>)
 8002a62:	f008 fa77 	bl	800af54 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	24000624 	.word	0x24000624

08002a70 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002a74:	4803      	ldr	r0, [pc, #12]	@ (8002a84 <MDMA_IRQHandler+0x14>)
 8002a76:	f00a f893 	bl	800cba0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002a7a:	4803      	ldr	r0, [pc, #12]	@ (8002a88 <MDMA_IRQHandler+0x18>)
 8002a7c:	f00a f890 	bl	800cba0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2400067c 	.word	0x2400067c
 8002a88:	240006e8 	.word	0x240006e8

08002a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a94:	4a14      	ldr	r2, [pc, #80]	@ (8002ae8 <_sbrk+0x5c>)
 8002a96:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <_sbrk+0x60>)
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa0:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <_sbrk+0x64>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <_sbrk+0x64>)
 8002aaa:	4a12      	ldr	r2, [pc, #72]	@ (8002af4 <_sbrk+0x68>)
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <_sbrk+0x64>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d207      	bcs.n	8002acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002abc:	f017 ff94 	bl	801a9e8 <__errno>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	e009      	b.n	8002ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ad2:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <_sbrk+0x64>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a05      	ldr	r2, [pc, #20]	@ (8002af0 <_sbrk+0x64>)
 8002adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	24080000 	.word	0x24080000
 8002aec:	00000400 	.word	0x00000400
 8002af0:	240470e8 	.word	0x240470e8
 8002af4:	24048e20 	.word	0x24048e20

08002af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002afc:	4b43      	ldr	r3, [pc, #268]	@ (8002c0c <SystemInit+0x114>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	4a42      	ldr	r2, [pc, #264]	@ (8002c0c <SystemInit+0x114>)
 8002b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b0c:	4b40      	ldr	r3, [pc, #256]	@ (8002c10 <SystemInit+0x118>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	2b06      	cmp	r3, #6
 8002b16:	d807      	bhi.n	8002b28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b18:	4b3d      	ldr	r3, [pc, #244]	@ (8002c10 <SystemInit+0x118>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 030f 	bic.w	r3, r3, #15
 8002b20:	4a3b      	ldr	r2, [pc, #236]	@ (8002c10 <SystemInit+0x118>)
 8002b22:	f043 0307 	orr.w	r3, r3, #7
 8002b26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b28:	4b3a      	ldr	r3, [pc, #232]	@ (8002c14 <SystemInit+0x11c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a39      	ldr	r2, [pc, #228]	@ (8002c14 <SystemInit+0x11c>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b34:	4b37      	ldr	r3, [pc, #220]	@ (8002c14 <SystemInit+0x11c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b3a:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <SystemInit+0x11c>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4935      	ldr	r1, [pc, #212]	@ (8002c14 <SystemInit+0x11c>)
 8002b40:	4b35      	ldr	r3, [pc, #212]	@ (8002c18 <SystemInit+0x120>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b46:	4b32      	ldr	r3, [pc, #200]	@ (8002c10 <SystemInit+0x118>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b52:	4b2f      	ldr	r3, [pc, #188]	@ (8002c10 <SystemInit+0x118>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 030f 	bic.w	r3, r3, #15
 8002b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c10 <SystemInit+0x118>)
 8002b5c:	f043 0307 	orr.w	r3, r3, #7
 8002b60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b62:	4b2c      	ldr	r3, [pc, #176]	@ (8002c14 <SystemInit+0x11c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b68:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <SystemInit+0x11c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b6e:	4b29      	ldr	r3, [pc, #164]	@ (8002c14 <SystemInit+0x11c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b74:	4b27      	ldr	r3, [pc, #156]	@ (8002c14 <SystemInit+0x11c>)
 8002b76:	4a29      	ldr	r2, [pc, #164]	@ (8002c1c <SystemInit+0x124>)
 8002b78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b7a:	4b26      	ldr	r3, [pc, #152]	@ (8002c14 <SystemInit+0x11c>)
 8002b7c:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <SystemInit+0x128>)
 8002b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b80:	4b24      	ldr	r3, [pc, #144]	@ (8002c14 <SystemInit+0x11c>)
 8002b82:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <SystemInit+0x12c>)
 8002b84:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b86:	4b23      	ldr	r3, [pc, #140]	@ (8002c14 <SystemInit+0x11c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b8c:	4b21      	ldr	r3, [pc, #132]	@ (8002c14 <SystemInit+0x11c>)
 8002b8e:	4a25      	ldr	r2, [pc, #148]	@ (8002c24 <SystemInit+0x12c>)
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b92:	4b20      	ldr	r3, [pc, #128]	@ (8002c14 <SystemInit+0x11c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b98:	4b1e      	ldr	r3, [pc, #120]	@ (8002c14 <SystemInit+0x11c>)
 8002b9a:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <SystemInit+0x12c>)
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c14 <SystemInit+0x11c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <SystemInit+0x11c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8002c14 <SystemInit+0x11c>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bb0:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <SystemInit+0x11c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <SystemInit+0x130>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <SystemInit+0x134>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bc2:	d202      	bcs.n	8002bca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <SystemInit+0x138>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <SystemInit+0x11c>)
 8002bcc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d113      	bne.n	8002c00 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <SystemInit+0x11c>)
 8002bda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002bde:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <SystemInit+0x11c>)
 8002be0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002be4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002be8:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <SystemInit+0x13c>)
 8002bea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002bee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <SystemInit+0x11c>)
 8002bf2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002bf6:	4a07      	ldr	r2, [pc, #28]	@ (8002c14 <SystemInit+0x11c>)
 8002bf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bfc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00
 8002c10:	52002000 	.word	0x52002000
 8002c14:	58024400 	.word	0x58024400
 8002c18:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c1c:	02020200 	.word	0x02020200
 8002c20:	01ff0000 	.word	0x01ff0000
 8002c24:	01010280 	.word	0x01010280
 8002c28:	5c001000 	.word	0x5c001000
 8002c2c:	ffff0000 	.word	0xffff0000
 8002c30:	51008108 	.word	0x51008108
 8002c34:	52004000 	.word	0x52004000

08002c38 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <ExitRun0Mode+0x2c>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <ExitRun0Mode+0x2c>)
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002c48:	bf00      	nop
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <ExitRun0Mode+0x2c>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f9      	beq.n	8002c4a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	58024800 	.word	0x58024800

08002c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c68:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002ca4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002c6c:	f7ff ffe4 	bl	8002c38 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c70:	f7ff ff42 	bl	8002af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c74:	480c      	ldr	r0, [pc, #48]	@ (8002ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c76:	490d      	ldr	r1, [pc, #52]	@ (8002cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c78:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c9a:	f017 feab 	bl	801a9f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c9e:	f7fd fd23 	bl	80006e8 <main>
  bx  lr
 8002ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002ca8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cac:	24000394 	.word	0x24000394
  ldr r2, =_sidata
 8002cb0:	0801b990 	.word	0x0801b990
  ldr r2, =_sbss
 8002cb4:	24000394 	.word	0x24000394
  ldr r4, =_ebss
 8002cb8:	24048e20 	.word	0x24048e20

08002cbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cbc:	e7fe      	b.n	8002cbc <ADC3_IRQHandler>

08002cbe <SSD1306_SendCommand>:
	0x06, 0x00,       0xFF,       0x00,       0xFF,       0x00,       0xFF,       0x00        // ------ 131 - \x84 (|||)
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af02      	add	r7, sp, #8
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8002cca:	2380      	movs	r3, #128	@ 0x80
 8002ccc:	733b      	strb	r3, [r7, #12]
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	b299      	uxth	r1, r3
 8002cde:	f107 020c 	add.w	r2, r7, #12
 8002ce2:	2364      	movs	r3, #100	@ 0x64
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	f005 fa64 	bl	80081b4 <HAL_I2C_Master_Transmit>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <SSD1306_SendCommand+0x38>
		return ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8002d18:	2312      	movs	r3, #18
 8002d1a:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002d20:	e02c      	b.n	8002d7c <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8002d22:	897b      	ldrh	r3, [r7, #10]
 8002d24:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <SSD1306_Init+0x90>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002d30:	897b      	ldrh	r3, [r7, #10]
 8002d32:	4a17      	ldr	r2, [pc, #92]	@ (8002d90 <SSD1306_Init+0x90>)
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ffc0 	bl	8002cbe <SSD1306_SendCommand>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <SSD1306_Init+0x4a>
 8002d44:	897b      	ldrh	r3, [r7, #10]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	e01e      	b.n	8002d88 <SSD1306_Init+0x88>
	        cmd_idx++;
 8002d4a:	897b      	ldrh	r3, [r7, #10]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8002d50:	e00f      	b.n	8002d72 <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	4a0e      	ldr	r2, [pc, #56]	@ (8002d90 <SSD1306_Init+0x90>)
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ffaf 	bl	8002cbe <SSD1306_SendCommand>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <SSD1306_Init+0x6c>
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e00d      	b.n	8002d88 <SSD1306_Init+0x88>
	            cmd_idx++;
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8002d72:	89bb      	ldrh	r3, [r7, #12]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	81ba      	strh	r2, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ea      	bne.n	8002d52 <SSD1306_Init+0x52>
	while (n_commands--) {
 8002d7c:	89fb      	ldrh	r3, [r7, #14]
 8002d7e:	1e5a      	subs	r2, r3, #1
 8002d80:	81fa      	strh	r2, [r7, #14]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1cd      	bne.n	8002d22 <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	0801b334 	.word	0x0801b334

08002d94 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f017 fe03 	bl	801a9b8 <memset>
	return 0;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2240      	movs	r2, #64	@ 0x40
 8002dca:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	b299      	uxth	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	f240 4301 	movw	r3, #1025	@ 0x401
 8002de0:	f005 fb00 	bl	80083e4 <HAL_I2C_Master_Transmit_DMA>
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	2b0a      	cmp	r3, #10
 8002e00:	d109      	bne.n	8002e16 <SSD1306_DrawChar+0x26>
		hssd->str_cursor = (hssd->str_cursor/128)*128;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8a1b      	ldrh	r3, [r3, #16]
 8002e06:	09db      	lsrs	r3, r3, #7
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	01db      	lsls	r3, r3, #7
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	821a      	strh	r2, [r3, #16]
		return SUCCESS;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e055      	b.n	8002ec2 <SSD1306_DrawChar+0xd2>
	}

	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	3b20      	subs	r3, #32
 8002e1a:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	2b60      	cmp	r3, #96	@ 0x60
 8002e20:	d905      	bls.n	8002e2e <SSD1306_DrawChar+0x3e>
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	2b7a      	cmp	r3, #122	@ 0x7a
 8002e26:	d802      	bhi.n	8002e2e <SSD1306_DrawChar+0x3e>
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	3b20      	subs	r3, #32
 8002e2c:	73fb      	strb	r3, [r7, #15]
	if (ch >= 123)             newC -= 26;	// remap the rest to align with the font table
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	2b7a      	cmp	r3, #122	@ 0x7a
 8002e32:	d902      	bls.n	8002e3a <SSD1306_DrawChar+0x4a>
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	3b1a      	subs	r3, #26
 8002e38:	73fb      	strb	r3, [r7, #15]

	if (newC > 126) return ERROR;	// char is unable to be rendered
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b7e      	cmp	r3, #126	@ 0x7e
 8002e3e:	d901      	bls.n	8002e44 <SSD1306_DrawChar+0x54>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e03e      	b.n	8002ec2 <SSD1306_DrawChar+0xd2>

	uint8_t len = ALPHNUM[newC*8];
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4a21      	ldr	r2, [pc, #132]	@ (8002ed0 <SSD1306_DrawChar+0xe0>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < len; i++) {
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73bb      	strb	r3, [r7, #14]
 8002e52:	e029      	b.n	8002ea8 <SSD1306_DrawChar+0xb8>
		if (!hssd->draw_inverted)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	7c9b      	ldrb	r3, [r3, #18]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d110      	bne.n	8002e7e <SSD1306_DrawChar+0x8e>
			hssd->vram[hssd->str_cursor + i] = ALPHNUM[(newC*8)+1 + i];
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	7bbb      	ldrb	r3, [r7, #14]
 8002e64:	441a      	add	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	8a09      	ldrh	r1, [r1, #16]
 8002e6e:	4608      	mov	r0, r1
 8002e70:	7bb9      	ldrb	r1, [r7, #14]
 8002e72:	4401      	add	r1, r0
 8002e74:	440b      	add	r3, r1
 8002e76:	4916      	ldr	r1, [pc, #88]	@ (8002ed0 <SSD1306_DrawChar+0xe0>)
 8002e78:	5c8a      	ldrb	r2, [r1, r2]
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e011      	b.n	8002ea2 <SSD1306_DrawChar+0xb2>
		else
			hssd->vram[hssd->str_cursor + i] = ALPHNUM[(newC*8)+1 + i] ^ 0xFF;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	7bbb      	ldrb	r3, [r7, #14]
 8002e86:	4413      	add	r3, r2
 8002e88:	4a11      	ldr	r2, [pc, #68]	@ (8002ed0 <SSD1306_DrawChar+0xe0>)
 8002e8a:	5cd2      	ldrb	r2, [r2, r3]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	8a09      	ldrh	r1, [r1, #16]
 8002e94:	4608      	mov	r0, r1
 8002e96:	7bb9      	ldrb	r1, [r7, #14]
 8002e98:	4401      	add	r1, r0
 8002e9a:	440b      	add	r3, r1
 8002e9c:	43d2      	mvns	r2, r2
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	73bb      	strb	r3, [r7, #14]
 8002ea8:	7bba      	ldrb	r2, [r7, #14]
 8002eaa:	7b7b      	ldrb	r3, [r7, #13]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d3d1      	bcc.n	8002e54 <SSD1306_DrawChar+0x64>
	}
	//memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
	hssd->str_cursor += len;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8a1a      	ldrh	r2, [r3, #16]
 8002eb4:	7b7b      	ldrb	r3, [r7, #13]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	0801b368 	.word	0x0801b368

08002ed4 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	71fb      	strb	r3, [r7, #7]
	uint8_t start_line = hssd->str_cursor / 120;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8a1b      	ldrh	r3, [r3, #16]
 8002ee6:	4a17      	ldr	r2, [pc, #92]	@ (8002f44 <SSD1306_DrawString+0x70>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < length; i++) {
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
 8002ef6:	e019      	b.n	8002f2c <SSD1306_DrawString+0x58>
		if (hssd->str_cursor / 128 > start_line) break;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8a1b      	ldrh	r3, [r3, #16]
 8002efc:	09db      	lsrs	r3, r3, #7
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	7dbb      	ldrb	r3, [r7, #22]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d816      	bhi.n	8002f36 <SSD1306_DrawString+0x62>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x00;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff6c 	bl	8002df0 <SSD1306_DrawChar>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <SSD1306_DrawString+0x52>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8a1a      	ldrh	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	75fb      	strb	r3, [r7, #23]
 8002f2c:	7dfa      	ldrb	r2, [r7, #23]
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d3e1      	bcc.n	8002ef8 <SSD1306_DrawString+0x24>
 8002f34:	e000      	b.n	8002f38 <SSD1306_DrawString+0x64>
		if (hssd->str_cursor / 128 > start_line) break;
 8002f36:	bf00      	nop
	}

	return SUCCESS;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	88888889 	.word	0x88888889

08002f48 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6898      	ldr	r0, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	899b      	ldrh	r3, [r3, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f005 f872 	bl	8008048 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	1cf9      	adds	r1, r7, #3
 8002f6a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f00f f964 	bl	801223c <HAL_SPI_Transmit>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <ST7789_SendByte_Command+0x36>
		return ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6898      	ldr	r0, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	899b      	ldrh	r3, [r3, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f005 f852 	bl	8008048 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	1cf9      	adds	r1, r7, #3
 8002faa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f00f f944 	bl	801223c <HAL_SPI_Transmit>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <ST7789_SendByte_Data+0x36>
		return ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

	hst7789->update_sequence = 2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	751a      	strb	r2, [r3, #20]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f107 0109 	add.w	r1, r7, #9
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f00f fb17 	bl	8012618 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 8002fea:	200a      	movs	r0, #10
 8002fec:	f000 fba4 	bl	8003738 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 8002ff0:	2313      	movs	r3, #19
 8002ff2:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002ff8:	e02c      	b.n	8003054 <ST7789_Init+0x8c>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 8002ffa:	897b      	ldrh	r3, [r7, #10]
 8002ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <ST7789_Init+0xa0>)
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	3301      	adds	r3, #1
 8003006:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8003008:	897b      	ldrh	r3, [r7, #10]
 800300a:	4a17      	ldr	r2, [pc, #92]	@ (8003068 <ST7789_Init+0xa0>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff99 	bl	8002f48 <ST7789_SendByte_Command>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <ST7789_Init+0x5a>
 800301c:	897b      	ldrh	r3, [r7, #10]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e01e      	b.n	8003060 <ST7789_Init+0x98>
	    cmd_idx++;
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	3301      	adds	r3, #1
 8003026:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 8003028:	e00f      	b.n	800304a <ST7789_Init+0x82>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 800302a:	897b      	ldrh	r3, [r7, #10]
 800302c:	4a0e      	ldr	r2, [pc, #56]	@ (8003068 <ST7789_Init+0xa0>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ffa8 	bl	8002f88 <ST7789_SendByte_Data>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <ST7789_Init+0x7c>
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e00d      	b.n	8003060 <ST7789_Init+0x98>
				cmd_idx++;
 8003044:	897b      	ldrh	r3, [r7, #10]
 8003046:	3301      	adds	r3, #1
 8003048:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 800304a:	89bb      	ldrh	r3, [r7, #12]
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	81ba      	strh	r2, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ea      	bne.n	800302a <ST7789_Init+0x62>
	while (n_commands--) {
 8003054:	89fb      	ldrh	r3, [r7, #14]
 8003056:	1e5a      	subs	r2, r3, #1
 8003058:	81fa      	strh	r2, [r7, #14]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1cd      	bne.n	8002ffa <ST7789_Init+0x32>
	    }
	}
	return SUCCESS;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	0801b5c0 	.word	0x0801b5c0

0800306c <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	817b      	strh	r3, [r7, #10]
 800307e:	460b      	mov	r3, r1
 8003080:	813b      	strh	r3, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 8003086:	212a      	movs	r1, #42	@ 0x2a
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff ff5d 	bl	8002f48 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	b29b      	uxth	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	4619      	mov	r1, r3
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff ff75 	bl	8002f88 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	4619      	mov	r1, r3
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff ff6f 	bl	8002f88 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	121b      	asrs	r3, r3, #8
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4619      	mov	r1, r3
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff ff67 	bl	8002f88 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4619      	mov	r1, r3
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff ff5f 	bl	8002f88 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 80030ca:	212b      	movs	r1, #43	@ 0x2b
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff3b 	bl	8002f48 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 80030d2:	893b      	ldrh	r3, [r7, #8]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4619      	mov	r1, r3
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7ff ff53 	bl	8002f88 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 80030e2:	893b      	ldrh	r3, [r7, #8]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	4619      	mov	r1, r3
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff ff4d 	bl	8002f88 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 80030ee:	8b3b      	ldrh	r3, [r7, #24]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	121b      	asrs	r3, r3, #8
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4619      	mov	r1, r3
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ff45 	bl	8002f88 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 80030fe:	8b3b      	ldrh	r3, [r7, #24]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff ff3d 	bl	8002f88 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 800310e:	212c      	movs	r1, #44	@ 0x2c
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff ff19 	bl	8002f48 <ST7789_SendByte_Command>
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <ST7789_UpdateSector>:

uint8_t ST7789_UpdateSector(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af02      	add	r7, sp, #8
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	70fb      	strb	r3, [r7, #3]
	// Check for bounds/busy
	if (hst7789->spi_state == 1) return ERROR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	791b      	ldrb	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <ST7789_UpdateSector+0x18>
 8003132:	2301      	movs	r3, #1
 8003134:	e04b      	b.n	80031ce <ST7789_UpdateSector+0xb0>
	if (screen_section > 2) return ERROR;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <ST7789_UpdateSector+0x22>
 800313c:	2301      	movs	r3, #1
 800313e:	e046      	b.n	80031ce <ST7789_UpdateSector+0xb0>

	// Flag as busy
	hst7789->spi_state = 1;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	b29b      	uxth	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	0152      	lsls	r2, r2, #5
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	4413      	add	r3, r2
 8003154:	b29a      	uxth	r2, r3
 8003156:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	23f0      	movs	r3, #240	@ 0xf0
 800315e:	2100      	movs	r1, #0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff83 	bl	800306c <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6898      	ldr	r0, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	899b      	ldrh	r3, [r3, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	4619      	mov	r1, r3
 8003172:	f004 ff69 	bl	8008048 <HAL_GPIO_WritePin>


	if (screen_section != 2) {
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d013      	beq.n	80031a4 <ST7789_UpdateSector+0x86>
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800318a:	fb01 f202 	mul.w	r2, r1, r2
 800318e:	4413      	add	r3, r2
 8003190:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003194:	4619      	mov	r1, r3
 8003196:	f00f fa3f 	bl	8012618 <HAL_SPI_Transmit_DMA>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d015      	beq.n	80031cc <ST7789_UpdateSector+0xae>
			return ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e014      	b.n	80031ce <ST7789_UpdateSector+0xb0>
	} else {
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0x8340))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80031b2:	fb01 f202 	mul.w	r2, r1, r2
 80031b6:	4413      	add	r3, r2
 80031b8:	f248 3240 	movw	r2, #33600	@ 0x8340
 80031bc:	4619      	mov	r1, r3
 80031be:	f00f fa2b 	bl	8012618 <HAL_SPI_Transmit_DMA>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <ST7789_UpdateSector+0xae>
			return ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <ST7789_UpdateSector+0xb0>
	}
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <ST7789_UpdateAutomatic>:

uint8_t ST7789_UpdateAutomatic(ST7789_HandleTypeDef *hst7789) {
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
	// Reset the sector counter
	hst7789->update_sequence = 0;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	751a      	strb	r2, [r3, #20]

	// perform a screen update
	if (ST7789_UpdateSector(hst7789, hst7789->update_sequence)) return ERROR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7d1b      	ldrb	r3, [r3, #20]
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff97 	bl	800311e <ST7789_UpdateSector>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <ST7789_UpdateAutomatic+0x24>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <ST7789_UpdateAutomatic+0x26>

	return SUCCESS;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	// fill VRAM with black
	memset(hst7789->vram, 0x00, LCD_WIDTH*LCD_HEIGHT*2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f017 fbce 	bl	801a9b8 <memset>
	return SUCCESS;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <ST7789_Draw_NOSIG>:

uint8_t ST7789_Draw_NOSIG(ST7789_HandleTypeDef *hst7789) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

	// Clear the area
	uint32_t cursor = LCD_WIDTH*(LCD_HEIGHT - 7*FONTSCALE_NOSIGNAL)*2 + (LCD_WIDTH - 7*FONTSCALE_NOSIGNAL);
 8003230:	4b46      	ldr	r3, [pc, #280]	@ (800334c <ST7789_Draw_NOSIG+0x124>)
 8003232:	617b      	str	r3, [r7, #20]
	for (uint32_t x = 0; x < 66*FONTSCALE_NOSIGNAL; x++) {
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	e012      	b.n	8003260 <ST7789_Draw_NOSIG+0x38>
		memset(hst7789->vram + cursor - x*LCD_WIDTH*2, 0x00, 24*FONTSCALE_NOSIGNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6919      	ldr	r1, [r3, #16]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	015b      	lsls	r3, r3, #5
 8003248:	461a      	mov	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	440b      	add	r3, r1
 8003250:	2260      	movs	r2, #96	@ 0x60
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f017 fbaf 	bl	801a9b8 <memset>
	for (uint32_t x = 0; x < 66*FONTSCALE_NOSIGNAL; x++) {
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	3301      	adds	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8003266:	d3e8      	bcc.n	800323a <ST7789_Draw_NOSIG+0x12>
	}

	// Draw the NO SIGNAL symbol
		cursor = LCD_WIDTH*(LCD_HEIGHT - 9*FONTSCALE_NOSIGNAL)*2 + (LCD_WIDTH - 4*FONTSCALE_NOSIGNAL);
 8003268:	4b39      	ldr	r3, [pc, #228]	@ (8003350 <ST7789_Draw_NOSIG+0x128>)
 800326a:	617b      	str	r3, [r7, #20]
		for (uint8_t c = 0; c < 9; c++) {		// Loop chars
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e064      	b.n	800333c <ST7789_Draw_NOSIG+0x114>
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003272:	2300      	movs	r3, #0
 8003274:	73bb      	strb	r3, [r7, #14]
 8003276:	e05b      	b.n	8003330 <ST7789_Draw_NOSIG+0x108>
				uint8_t line_byte = TXT_NOSIGNAL[c*7 + l];
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9a      	subs	r2, r3, r2
 8003280:	7bbb      	ldrb	r3, [r7, #14]
 8003282:	4413      	add	r3, r2
 8003284:	4a33      	ldr	r2, [pc, #204]	@ (8003354 <ST7789_Draw_NOSIG+0x12c>)
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	72bb      	strb	r3, [r7, #10]

				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800328a:	2300      	movs	r3, #0
 800328c:	737b      	strb	r3, [r7, #13]
 800328e:	e045      	b.n	800331c <ST7789_Draw_NOSIG+0xf4>
					if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 8003290:	7aba      	ldrb	r2, [r7, #10]
 8003292:	7b7b      	ldrb	r3, [r7, #13]
 8003294:	fa42 f303 	asr.w	r3, r2, r3
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03a      	beq.n	8003316 <ST7789_Draw_NOSIG+0xee>
						for (uint8_t y = 0; y < FONTSCALE_NOSIGNAL; y++) {
 80032a0:	2300      	movs	r3, #0
 80032a2:	733b      	strb	r3, [r7, #12]
 80032a4:	e034      	b.n	8003310 <ST7789_Draw_NOSIG+0xe8>
							for (uint8_t x = 0; x < FONTSCALE_NOSIGNAL; x++) {
 80032a6:	2300      	movs	r3, #0
 80032a8:	72fb      	strb	r3, [r7, #11]
 80032aa:	e02b      	b.n	8003304 <ST7789_Draw_NOSIG+0xdc>
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_NOSIGNAL)*2 + cursor    ] = 0xFF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6919      	ldr	r1, [r3, #16]
 80032b0:	7afa      	ldrb	r2, [r7, #11]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	461a      	mov	r2, r3
 80032bc:	7b3b      	ldrb	r3, [r7, #12]
 80032be:	441a      	add	r2, r3
 80032c0:	7b7b      	ldrb	r3, [r7, #13]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	461a      	mov	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	4413      	add	r3, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	22ff      	movs	r2, #255	@ 0xff
 80032d2:	701a      	strb	r2, [r3, #0]
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_NOSIGNAL)*2 + cursor + 1] = 0xFF;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6919      	ldr	r1, [r3, #16]
 80032d8:	7afa      	ldrb	r2, [r7, #11]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	461a      	mov	r2, r3
 80032e4:	7b3b      	ldrb	r3, [r7, #12]
 80032e6:	441a      	add	r2, r3
 80032e8:	7b7b      	ldrb	r3, [r7, #13]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	461a      	mov	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	4413      	add	r3, r2
 80032f6:	3301      	adds	r3, #1
 80032f8:	440b      	add	r3, r1
 80032fa:	22ff      	movs	r2, #255	@ 0xff
 80032fc:	701a      	strb	r2, [r3, #0]
							for (uint8_t x = 0; x < FONTSCALE_NOSIGNAL; x++) {
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	3301      	adds	r3, #1
 8003302:	72fb      	strb	r3, [r7, #11]
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d9d0      	bls.n	80032ac <ST7789_Draw_NOSIG+0x84>
						for (uint8_t y = 0; y < FONTSCALE_NOSIGNAL; y++) {
 800330a:	7b3b      	ldrb	r3, [r7, #12]
 800330c:	3301      	adds	r3, #1
 800330e:	733b      	strb	r3, [r7, #12]
 8003310:	7b3b      	ldrb	r3, [r7, #12]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d9c7      	bls.n	80032a6 <ST7789_Draw_NOSIG+0x7e>
				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 8003316:	7b7b      	ldrb	r3, [r7, #13]
 8003318:	3301      	adds	r3, #1
 800331a:	737b      	strb	r3, [r7, #13]
 800331c:	7b7b      	ldrb	r3, [r7, #13]
 800331e:	2b07      	cmp	r3, #7
 8003320:	d9b6      	bls.n	8003290 <ST7789_Draw_NOSIG+0x68>
							}
						}
					}
				}
				cursor -= LCD_WIDTH*FONTSCALE_NOSIGNAL*2;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8003328:	617b      	str	r3, [r7, #20]
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 800332a:	7bbb      	ldrb	r3, [r7, #14]
 800332c:	3301      	adds	r3, #1
 800332e:	73bb      	strb	r3, [r7, #14]
 8003330:	7bbb      	ldrb	r3, [r7, #14]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d9a0      	bls.n	8003278 <ST7789_Draw_NOSIG+0x50>
		for (uint8_t c = 0; c < 9; c++) {		// Loop chars
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	3301      	adds	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d997      	bls.n	8003272 <ST7789_Draw_NOSIG+0x4a>
			}
		}

		return SUCCESS;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	00022454 	.word	0x00022454
 8003350:	00021560 	.word	0x00021560
 8003354:	0801b61c 	.word	0x0801b61c

08003358 <ST7789_Draw_DATA>:

uint8_t ST7789_Draw_DATA(ST7789_HandleTypeDef *hst7789, uint32_t frametime_ms) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	@ 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]

	uint16_t ms = frametime_ms;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if (ms > 999)
 8003366:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003368:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800336c:	d302      	bcc.n	8003374 <ST7789_Draw_DATA+0x1c>
		ms = 999;
 800336e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8003372:	84fb      	strh	r3, [r7, #38]	@ 0x26

	uint8_t digits[3] = {
 8003374:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003376:	4a94      	ldr	r2, [pc, #592]	@ (80035c8 <ST7789_Draw_DATA+0x270>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	b29a      	uxth	r2, r3
 8003380:	4b92      	ldr	r3, [pc, #584]	@ (80035cc <ST7789_Draw_DATA+0x274>)
 8003382:	fba3 1302 	umull	r1, r3, r3, r2
 8003386:	08d9      	lsrs	r1, r3, #3
 8003388:	460b      	mov	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	733b      	strb	r3, [r7, #12]
 8003398:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800339a:	4a8c      	ldr	r2, [pc, #560]	@ (80035cc <ST7789_Draw_DATA+0x274>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	08db      	lsrs	r3, r3, #3
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	4b89      	ldr	r3, [pc, #548]	@ (80035cc <ST7789_Draw_DATA+0x274>)
 80033a6:	fba3 1302 	umull	r1, r3, r3, r2
 80033aa:	08d9      	lsrs	r1, r3, #3
 80033ac:	460b      	mov	r3, r1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	737b      	strb	r3, [r7, #13]
 80033bc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80033be:	4b83      	ldr	r3, [pc, #524]	@ (80035cc <ST7789_Draw_DATA+0x274>)
 80033c0:	fba3 1302 	umull	r1, r3, r3, r2
 80033c4:	08d9      	lsrs	r1, r3, #3
 80033c6:	460b      	mov	r3, r1
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	73bb      	strb	r3, [r7, #14]
			(ms / 10)  % 10,
			 ms        % 10
	};

	// Clear the corner
	uint32_t cursor = (LCD_WIDTH*(LCD_HEIGHT-2) + 2)*2;
 80033d6:	4b7e      	ldr	r3, [pc, #504]	@ (80035d0 <ST7789_Draw_DATA+0x278>)
 80033d8:	623b      	str	r3, [r7, #32]
	for (uint32_t x = 0; x < 44*FONTSCALE_FRAMETIME; x++) {
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e012      	b.n	8003406 <ST7789_Draw_DATA+0xae>
		memset(hst7789->vram + cursor - x*LCD_WIDTH*2, 0x00, 24*FONTSCALE_FRAMETIME);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6919      	ldr	r1, [r3, #16]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	015b      	lsls	r3, r3, #5
 80033ee:	461a      	mov	r2, r3
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	440b      	add	r3, r1
 80033f6:	2218      	movs	r2, #24
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f017 fadc 	bl	801a9b8 <memset>
	for (uint32_t x = 0; x < 44*FONTSCALE_FRAMETIME; x++) {
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	3301      	adds	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2b2b      	cmp	r3, #43	@ 0x2b
 800340a:	d9e9      	bls.n	80033e0 <ST7789_Draw_DATA+0x88>
	}


	// Draw the MS symbol
	cursor = (LCD_WIDTH*(LCD_HEIGHT-2) + 2)*2;
 800340c:	4b70      	ldr	r3, [pc, #448]	@ (80035d0 <ST7789_Draw_DATA+0x278>)
 800340e:	623b      	str	r3, [r7, #32]
	for (uint8_t c = 0; c < 3; c++) {		// Loop chars
 8003410:	2300      	movs	r3, #0
 8003412:	76fb      	strb	r3, [r7, #27]
 8003414:	e062      	b.n	80034dc <ST7789_Draw_DATA+0x184>
		for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003416:	2300      	movs	r3, #0
 8003418:	76bb      	strb	r3, [r7, #26]
 800341a:	e059      	b.n	80034d0 <ST7789_Draw_DATA+0x178>
			uint8_t line_byte = TXT_MS[c*7 + l];
 800341c:	7efa      	ldrb	r2, [r7, #27]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	1a9a      	subs	r2, r3, r2
 8003424:	7ebb      	ldrb	r3, [r7, #26]
 8003426:	4413      	add	r3, r2
 8003428:	4a6a      	ldr	r2, [pc, #424]	@ (80035d4 <ST7789_Draw_DATA+0x27c>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	743b      	strb	r3, [r7, #16]

			for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800342e:	2300      	movs	r3, #0
 8003430:	767b      	strb	r3, [r7, #25]
 8003432:	e043      	b.n	80034bc <ST7789_Draw_DATA+0x164>
				if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 8003434:	7c3a      	ldrb	r2, [r7, #16]
 8003436:	7e7b      	ldrb	r3, [r7, #25]
 8003438:	fa42 f303 	asr.w	r3, r2, r3
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d038      	beq.n	80034b6 <ST7789_Draw_DATA+0x15e>
					for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003444:	2300      	movs	r3, #0
 8003446:	763b      	strb	r3, [r7, #24]
 8003448:	e032      	b.n	80034b0 <ST7789_Draw_DATA+0x158>
						for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]
 800344e:	e029      	b.n	80034a4 <ST7789_Draw_DATA+0x14c>
							hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor    ] = 0xFF;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6919      	ldr	r1, [r3, #16]
 8003454:	7dfa      	ldrb	r2, [r7, #23]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	461a      	mov	r2, r3
 8003460:	7e3b      	ldrb	r3, [r7, #24]
 8003462:	441a      	add	r2, r3
 8003464:	7e7b      	ldrb	r3, [r7, #25]
 8003466:	4413      	add	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	461a      	mov	r2, r3
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	4413      	add	r3, r2
 8003470:	440b      	add	r3, r1
 8003472:	22ff      	movs	r2, #255	@ 0xff
 8003474:	701a      	strb	r2, [r3, #0]
							hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor + 1] = 0xFF;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	7dfa      	ldrb	r2, [r7, #23]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	461a      	mov	r2, r3
 8003486:	7e3b      	ldrb	r3, [r7, #24]
 8003488:	441a      	add	r2, r3
 800348a:	7e7b      	ldrb	r3, [r7, #25]
 800348c:	4413      	add	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	461a      	mov	r2, r3
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	4413      	add	r3, r2
 8003496:	3301      	adds	r3, #1
 8003498:	440b      	add	r3, r1
 800349a:	22ff      	movs	r2, #255	@ 0xff
 800349c:	701a      	strb	r2, [r3, #0]
						for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	3301      	adds	r3, #1
 80034a2:	75fb      	strb	r3, [r7, #23]
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0d2      	beq.n	8003450 <ST7789_Draw_DATA+0xf8>
					for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 80034aa:	7e3b      	ldrb	r3, [r7, #24]
 80034ac:	3301      	adds	r3, #1
 80034ae:	763b      	strb	r3, [r7, #24]
 80034b0:	7e3b      	ldrb	r3, [r7, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0c9      	beq.n	800344a <ST7789_Draw_DATA+0xf2>
			for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 80034b6:	7e7b      	ldrb	r3, [r7, #25]
 80034b8:	3301      	adds	r3, #1
 80034ba:	767b      	strb	r3, [r7, #25]
 80034bc:	7e7b      	ldrb	r3, [r7, #25]
 80034be:	2b07      	cmp	r3, #7
 80034c0:	d9b8      	bls.n	8003434 <ST7789_Draw_DATA+0xdc>
						}
					}
				}
			}
			cursor -= LCD_WIDTH*FONTSCALE_FRAMETIME*2;
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034c8:	623b      	str	r3, [r7, #32]
		for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80034ca:	7ebb      	ldrb	r3, [r7, #26]
 80034cc:	3301      	adds	r3, #1
 80034ce:	76bb      	strb	r3, [r7, #26]
 80034d0:	7ebb      	ldrb	r3, [r7, #26]
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d9a2      	bls.n	800341c <ST7789_Draw_DATA+0xc4>
	for (uint8_t c = 0; c < 3; c++) {		// Loop chars
 80034d6:	7efb      	ldrb	r3, [r7, #27]
 80034d8:	3301      	adds	r3, #1
 80034da:	76fb      	strb	r3, [r7, #27]
 80034dc:	7efb      	ldrb	r3, [r7, #27]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d999      	bls.n	8003416 <ST7789_Draw_DATA+0xbe>
		}
	}

	// Draw the Digits
	for (uint8_t c = 0; c < 3; c++) {		// Loop digits
 80034e2:	2300      	movs	r3, #0
 80034e4:	75bb      	strb	r3, [r7, #22]
 80034e6:	e067      	b.n	80035b8 <ST7789_Draw_DATA+0x260>
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80034e8:	2300      	movs	r3, #0
 80034ea:	757b      	strb	r3, [r7, #21]
 80034ec:	e05e      	b.n	80035ac <ST7789_Draw_DATA+0x254>
				uint8_t line_byte = TXT_NUM[digits[c]*7 + l];
 80034ee:	7dbb      	ldrb	r3, [r7, #22]
 80034f0:	3328      	adds	r3, #40	@ 0x28
 80034f2:	443b      	add	r3, r7
 80034f4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	1a9a      	subs	r2, r3, r2
 8003500:	7d7b      	ldrb	r3, [r7, #21]
 8003502:	4413      	add	r3, r2
 8003504:	4a34      	ldr	r2, [pc, #208]	@ (80035d8 <ST7789_Draw_DATA+0x280>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	747b      	strb	r3, [r7, #17]

				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800350a:	2300      	movs	r3, #0
 800350c:	753b      	strb	r3, [r7, #20]
 800350e:	e043      	b.n	8003598 <ST7789_Draw_DATA+0x240>
					if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 8003510:	7c7a      	ldrb	r2, [r7, #17]
 8003512:	7d3b      	ldrb	r3, [r7, #20]
 8003514:	fa42 f303 	asr.w	r3, r2, r3
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d038      	beq.n	8003592 <ST7789_Draw_DATA+0x23a>
						for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003520:	2300      	movs	r3, #0
 8003522:	74fb      	strb	r3, [r7, #19]
 8003524:	e032      	b.n	800358c <ST7789_Draw_DATA+0x234>
							for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 8003526:	2300      	movs	r3, #0
 8003528:	74bb      	strb	r3, [r7, #18]
 800352a:	e029      	b.n	8003580 <ST7789_Draw_DATA+0x228>
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor    ] = 0xFF;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6919      	ldr	r1, [r3, #16]
 8003530:	7cba      	ldrb	r2, [r7, #18]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	461a      	mov	r2, r3
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	441a      	add	r2, r3
 8003540:	7d3b      	ldrb	r3, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	461a      	mov	r2, r3
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	4413      	add	r3, r2
 800354c:	440b      	add	r3, r1
 800354e:	22ff      	movs	r2, #255	@ 0xff
 8003550:	701a      	strb	r2, [r3, #0]
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor + 1] = 0xFF;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6919      	ldr	r1, [r3, #16]
 8003556:	7cba      	ldrb	r2, [r7, #18]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	461a      	mov	r2, r3
 8003562:	7cfb      	ldrb	r3, [r7, #19]
 8003564:	441a      	add	r2, r3
 8003566:	7d3b      	ldrb	r3, [r7, #20]
 8003568:	4413      	add	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	461a      	mov	r2, r3
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	4413      	add	r3, r2
 8003572:	3301      	adds	r3, #1
 8003574:	440b      	add	r3, r1
 8003576:	22ff      	movs	r2, #255	@ 0xff
 8003578:	701a      	strb	r2, [r3, #0]
							for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 800357a:	7cbb      	ldrb	r3, [r7, #18]
 800357c:	3301      	adds	r3, #1
 800357e:	74bb      	strb	r3, [r7, #18]
 8003580:	7cbb      	ldrb	r3, [r7, #18]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0d2      	beq.n	800352c <ST7789_Draw_DATA+0x1d4>
						for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	3301      	adds	r3, #1
 800358a:	74fb      	strb	r3, [r7, #19]
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0c9      	beq.n	8003526 <ST7789_Draw_DATA+0x1ce>
				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 8003592:	7d3b      	ldrb	r3, [r7, #20]
 8003594:	3301      	adds	r3, #1
 8003596:	753b      	strb	r3, [r7, #20]
 8003598:	7d3b      	ldrb	r3, [r7, #20]
 800359a:	2b07      	cmp	r3, #7
 800359c:	d9b8      	bls.n	8003510 <ST7789_Draw_DATA+0x1b8>
							}
						}
					}
				}
				cursor -= LCD_WIDTH*FONTSCALE_FRAMETIME*2;
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80035a4:	623b      	str	r3, [r7, #32]
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80035a6:	7d7b      	ldrb	r3, [r7, #21]
 80035a8:	3301      	adds	r3, #1
 80035aa:	757b      	strb	r3, [r7, #21]
 80035ac:	7d7b      	ldrb	r3, [r7, #21]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d99d      	bls.n	80034ee <ST7789_Draw_DATA+0x196>
	for (uint8_t c = 0; c < 3; c++) {		// Loop digits
 80035b2:	7dbb      	ldrb	r3, [r7, #22]
 80035b4:	3301      	adds	r3, #1
 80035b6:	75bb      	strb	r3, [r7, #22]
 80035b8:	7dbb      	ldrb	r3, [r7, #22]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d994      	bls.n	80034e8 <ST7789_Draw_DATA+0x190>
			}
		}

	return SUCCESS;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3728      	adds	r7, #40	@ 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	51eb851f 	.word	0x51eb851f
 80035cc:	cccccccd 	.word	0xcccccccd
 80035d0:	00025444 	.word	0x00025444
 80035d4:	0801b65c 	.word	0x0801b65c
 80035d8:	0801b674 	.word	0x0801b674

080035dc <ST7789_DMATransmitCplt>:

void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	// Flag idle
	hst7789->spi_state = 0;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	711a      	strb	r2, [r3, #4]

	// Check the state of the update sequence
	if (hst7789->update_sequence < 2) {
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7d1b      	ldrb	r3, [r3, #20]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d80b      	bhi.n	800360a <ST7789_DMATransmitCplt+0x2e>
		// Immediately start the next update in the sequence
		hst7789->update_sequence++;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7d1b      	ldrb	r3, [r3, #20]
 80035f6:	3301      	adds	r3, #1
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	751a      	strb	r2, [r3, #20]
		ST7789_UpdateSector(hst7789, hst7789->update_sequence);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7d1b      	ldrb	r3, [r3, #20]
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff fd8a 	bl	800311e <ST7789_UpdateSector>
	}
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361a:	2003      	movs	r0, #3
 800361c:	f001 fc3e 	bl	8004e9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003620:	f00b fe14 	bl	800f24c <HAL_RCC_GetSysClockFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <HAL_Init+0x68>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	4913      	ldr	r1, [pc, #76]	@ (8003680 <HAL_Init+0x6c>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
 800363c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800363e:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <HAL_Init+0x68>)
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	4a0e      	ldr	r2, [pc, #56]	@ (8003680 <HAL_Init+0x6c>)
 8003648:	5cd3      	ldrb	r3, [r2, r3]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	4a0b      	ldr	r2, [pc, #44]	@ (8003684 <HAL_Init+0x70>)
 8003656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003658:	4a0b      	ldr	r2, [pc, #44]	@ (8003688 <HAL_Init+0x74>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800365e:	200f      	movs	r0, #15
 8003660:	f000 f814 	bl	800368c <HAL_InitTick>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e002      	b.n	8003674 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800366e:	f7fe fd1f 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	58024400 	.word	0x58024400
 8003680:	0801b324 	.word	0x0801b324
 8003684:	24000244 	.word	0x24000244
 8003688:	24000240 	.word	0x24000240

0800368c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003694:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_InitTick+0x60>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e021      	b.n	80036e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80036a0:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <HAL_InitTick+0x64>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <HAL_InitTick+0x60>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fc23 	bl	8004f02 <HAL_SYSTICK_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e00e      	b.n	80036e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b0f      	cmp	r3, #15
 80036ca:	d80a      	bhi.n	80036e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036cc:	2200      	movs	r2, #0
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	f001 fbed 	bl	8004eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d8:	4a06      	ldr	r2, [pc, #24]	@ (80036f4 <HAL_InitTick+0x68>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	2400024c 	.word	0x2400024c
 80036f0:	24000240 	.word	0x24000240
 80036f4:	24000248 	.word	0x24000248

080036f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_IncTick+0x20>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_IncTick+0x24>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4413      	add	r3, r2
 8003708:	4a04      	ldr	r2, [pc, #16]	@ (800371c <HAL_IncTick+0x24>)
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2400024c 	.word	0x2400024c
 800371c:	240470ec 	.word	0x240470ec

08003720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return uwTick;
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <HAL_GetTick+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	240470ec 	.word	0x240470ec

08003738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003740:	f7ff ffee 	bl	8003720 <HAL_GetTick>
 8003744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d005      	beq.n	800375e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <HAL_Delay+0x44>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800375e:	bf00      	nop
 8003760:	f7ff ffde 	bl	8003720 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	429a      	cmp	r2, r3
 800376e:	d8f7      	bhi.n	8003760 <HAL_Delay+0x28>
  {
  }
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2400024c 	.word	0x2400024c

08003780 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_GetREVID+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0c1b      	lsrs	r3, r3, #16
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	5c001000 	.word	0x5c001000

08003798 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	609a      	str	r2, [r3, #8]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <LL_ADC_SetChannelPreselection+0x24>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	0e9b      	lsrs	r3, r3, #26
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	2201      	movs	r2, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	e015      	b.n	8003850 <LL_ADC_SetChannelPreselection+0x50>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800383a:	2320      	movs	r3, #32
 800383c:	e003      	b.n	8003846 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2201      	movs	r2, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	69d2      	ldr	r2, [r2, #28]
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003866:	b480      	push	{r7}
 8003868:	b087      	sub	sp, #28
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3360      	adds	r3, #96	@ 0x60
 8003878:	461a      	mov	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	430b      	orrs	r3, r1
 8003894:	431a      	orrs	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	611a      	str	r2, [r3, #16]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3360      	adds	r3, #96	@ 0x60
 80038e8:	461a      	mov	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	601a      	str	r2, [r3, #0]
  }
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3330      	adds	r3, #48	@ 0x30
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	4413      	add	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	211f      	movs	r1, #31
 8003960:	fa01 f303 	lsl.w	r3, r1, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	401a      	ands	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	0e9b      	lsrs	r3, r3, #26
 800396c:	f003 011f 	and.w	r1, r3, #31
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	431a      	orrs	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003980:	bf00      	nop
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b087      	sub	sp, #28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3314      	adds	r3, #20
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	0e5b      	lsrs	r3, r3, #25
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	4413      	add	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	0d1b      	lsrs	r3, r3, #20
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2107      	movs	r1, #7
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	401a      	ands	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	0d1b      	lsrs	r3, r3, #20
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	431a      	orrs	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a20:	43db      	mvns	r3, r3
 8003a22:	401a      	ands	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f003 0318 	and.w	r3, r3, #24
 8003a2a:	4908      	ldr	r1, [pc, #32]	@ (8003a4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a2c:	40d9      	lsrs	r1, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	400b      	ands	r3, r1
 8003a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a36:	431a      	orrs	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	000fffff 	.word	0x000fffff

08003a50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6093      	str	r3, [r2, #8]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	5fffffc0 	.word	0x5fffffc0

08003a90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa4:	d101      	bne.n	8003aaa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <LL_ADC_EnableInternalRegulator+0x24>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	6fffffc0 	.word	0x6fffffc0

08003ae0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af4:	d101      	bne.n	8003afa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <LL_ADC_Enable+0x24>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	f043 0201 	orr.w	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	7fffffc0 	.word	0x7fffffc0

08003b30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <LL_ADC_IsEnabled+0x18>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <LL_ADC_IsEnabled+0x1a>
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <LL_ADC_REG_StartConversion+0x24>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	f043 0204 	orr.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	7fffffc0 	.word	0x7fffffc0

08003b80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d101      	bne.n	8003b98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d101      	bne.n	8003bbe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b089      	sub	sp, #36	@ 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e18f      	b.n	8003f06 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d109      	bne.n	8003c08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fe fa75 	bl	80020e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff3f 	bl	8003a90 <LL_ADC_IsDeepPowerDownEnabled>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff25 	bl	8003a6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ff5a 	bl	8003ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d114      	bne.n	8003c5c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff3e 	bl	8003ab8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c3c:	4b87      	ldr	r3, [pc, #540]	@ (8003e5c <HAL_ADC_Init+0x290>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	4a87      	ldr	r2, [pc, #540]	@ (8003e60 <HAL_ADC_Init+0x294>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c4e:	e002      	b.n	8003c56 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff3d 	bl	8003ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff77 	bl	8003b80 <LL_ADC_REG_IsConversionOngoing>
 8003c92:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 8129 	bne.w	8003ef4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f040 8125 	bne.w	8003ef4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cae:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff36 	bl	8003b30 <LL_ADC_IsEnabled>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d136      	bne.n	8003d38 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a65      	ldr	r2, [pc, #404]	@ (8003e64 <HAL_ADC_Init+0x298>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_ADC_Init+0x112>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a63      	ldr	r2, [pc, #396]	@ (8003e68 <HAL_ADC_Init+0x29c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10e      	bne.n	8003cfc <HAL_ADC_Init+0x130>
 8003cde:	4861      	ldr	r0, [pc, #388]	@ (8003e64 <HAL_ADC_Init+0x298>)
 8003ce0:	f7ff ff26 	bl	8003b30 <LL_ADC_IsEnabled>
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	4860      	ldr	r0, [pc, #384]	@ (8003e68 <HAL_ADC_Init+0x29c>)
 8003ce8:	f7ff ff22 	bl	8003b30 <LL_ADC_IsEnabled>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4323      	orrs	r3, r4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e008      	b.n	8003d0e <HAL_ADC_Init+0x142>
 8003cfc:	485b      	ldr	r0, [pc, #364]	@ (8003e6c <HAL_ADC_Init+0x2a0>)
 8003cfe:	f7ff ff17 	bl	8003b30 <LL_ADC_IsEnabled>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d012      	beq.n	8003d38 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a53      	ldr	r2, [pc, #332]	@ (8003e64 <HAL_ADC_Init+0x298>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_ADC_Init+0x15a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a51      	ldr	r2, [pc, #324]	@ (8003e68 <HAL_ADC_Init+0x29c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_Init+0x15e>
 8003d26:	4a52      	ldr	r2, [pc, #328]	@ (8003e70 <HAL_ADC_Init+0x2a4>)
 8003d28:	e000      	b.n	8003d2c <HAL_ADC_Init+0x160>
 8003d2a:	4a52      	ldr	r2, [pc, #328]	@ (8003e74 <HAL_ADC_Init+0x2a8>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f7ff fd30 	bl	8003798 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003d38:	f7ff fd22 	bl	8003780 <HAL_GetREVID>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d914      	bls.n	8003d70 <HAL_ADC_Init+0x1a4>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d110      	bne.n	8003d70 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7d5b      	ldrb	r3, [r3, #21]
 8003d52:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d58:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d5e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7f1b      	ldrb	r3, [r3, #28]
 8003d64:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d66:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d68:	f043 030c 	orr.w	r3, r3, #12
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e00d      	b.n	8003d8c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7d5b      	ldrb	r3, [r3, #21]
 8003d74:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d7a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d80:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7f1b      	ldrb	r3, [r3, #28]
 8003d86:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7f1b      	ldrb	r3, [r3, #28]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	045b      	lsls	r3, r3, #17
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8003e78 <HAL_ADC_Init+0x2ac>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	69b9      	ldr	r1, [r7, #24]
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fed2 	bl	8003b80 <LL_ADC_REG_IsConversionOngoing>
 8003ddc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fedf 	bl	8003ba6 <LL_ADC_INJ_IsConversionOngoing>
 8003de8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d15f      	bne.n	8003eb0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d15c      	bne.n	8003eb0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7d1b      	ldrb	r3, [r3, #20]
 8003dfa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <HAL_ADC_Init+0x2b0>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d130      	bne.n	8003e84 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <HAL_ADC_Init+0x2b4>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e36:	3a01      	subs	r2, #1
 8003e38:	0411      	lsls	r1, r2, #16
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003e44:	4311      	orrs	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	611a      	str	r2, [r3, #16]
 8003e58:	e01c      	b.n	8003e94 <HAL_ADC_Init+0x2c8>
 8003e5a:	bf00      	nop
 8003e5c:	24000240 	.word	0x24000240
 8003e60:	053e2d63 	.word	0x053e2d63
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40022100 	.word	0x40022100
 8003e6c:	58026000 	.word	0x58026000
 8003e70:	40022300 	.word	0x40022300
 8003e74:	58026300 	.word	0x58026300
 8003e78:	fff0c003 	.word	0xfff0c003
 8003e7c:	ffffbffc 	.word	0xffffbffc
 8003e80:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fd16 	bl	80048dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f023 010f 	bic.w	r1, r3, #15
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	1e5a      	subs	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ed0:	e007      	b.n	8003ee2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 020f 	bic.w	r2, r2, #15
 8003ee0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	f023 0303 	bic.w	r3, r3, #3
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ef2:	e007      	b.n	8003f04 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef8:	f043 0210 	orr.w	r2, r3, #16
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3724      	adds	r7, #36	@ 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd90      	pop	{r4, r7, pc}
 8003f0e:	bf00      	nop

08003f10 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a55      	ldr	r2, [pc, #340]	@ (8004078 <HAL_ADC_Start_DMA+0x168>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <HAL_ADC_Start_DMA+0x20>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a54      	ldr	r2, [pc, #336]	@ (800407c <HAL_ADC_Start_DMA+0x16c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_Start_DMA+0x24>
 8003f30:	4b53      	ldr	r3, [pc, #332]	@ (8004080 <HAL_ADC_Start_DMA+0x170>)
 8003f32:	e000      	b.n	8003f36 <HAL_ADC_Start_DMA+0x26>
 8003f34:	4b53      	ldr	r3, [pc, #332]	@ (8004084 <HAL_ADC_Start_DMA+0x174>)
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fd8a 	bl	8003a50 <LL_ADC_GetMultimode>
 8003f3c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fe1c 	bl	8003b80 <LL_ADC_REG_IsConversionOngoing>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 808c 	bne.w	8004068 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_ADC_Start_DMA+0x4e>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e087      	b.n	800406e <HAL_ADC_Start_DMA+0x15e>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d002      	beq.n	8003f78 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b09      	cmp	r3, #9
 8003f76:	d170      	bne.n	800405a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fb91 	bl	80046a0 <ADC_Enable>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d163      	bne.n	8004050 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <HAL_ADC_Start_DMA+0x178>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a37      	ldr	r2, [pc, #220]	@ (800407c <HAL_ADC_Start_DMA+0x16c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d002      	beq.n	8003fa8 <HAL_ADC_Start_DMA+0x98>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	e000      	b.n	8003faa <HAL_ADC_Start_DMA+0x9a>
 8003fa8:	4b33      	ldr	r3, [pc, #204]	@ (8004078 <HAL_ADC_Start_DMA+0x168>)
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d002      	beq.n	8003fb8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d006      	beq.n	8003fde <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	f023 0206 	bic.w	r2, r3, #6
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fdc:	e002      	b.n	8003fe4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe8:	4a28      	ldr	r2, [pc, #160]	@ (800408c <HAL_ADC_Start_DMA+0x17c>)
 8003fea:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff0:	4a27      	ldr	r2, [pc, #156]	@ (8004090 <HAL_ADC_Start_DMA+0x180>)
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff8:	4a26      	ldr	r2, [pc, #152]	@ (8004094 <HAL_ADC_Start_DMA+0x184>)
 8003ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	221c      	movs	r2, #28
 8004002:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0210 	orr.w	r2, r2, #16
 800401a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f7ff fcb0 	bl	800398c <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3340      	adds	r3, #64	@ 0x40
 8004036:	4619      	mov	r1, r3
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f001 fb42 	bl	80056c4 <HAL_DMA_Start_IT>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fd85 	bl	8003b58 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800404e:	e00d      	b.n	800406c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8004058:	e008      	b.n	800406c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004066:	e001      	b.n	800406c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004068:	2302      	movs	r3, #2
 800406a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800406c:	7dfb      	ldrb	r3, [r7, #23]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40022000 	.word	0x40022000
 800407c:	40022100 	.word	0x40022100
 8004080:	40022300 	.word	0x40022300
 8004084:	58026300 	.word	0x58026300
 8004088:	fffff0fe 	.word	0xfffff0fe
 800408c:	080047b5 	.word	0x080047b5
 8004090:	0800488d 	.word	0x0800488d
 8004094:	080048a9 	.word	0x080048a9

08004098 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b08d      	sub	sp, #52	@ 0x34
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a65      	ldr	r2, [pc, #404]	@ (8004270 <HAL_ADC_ConfigChannel+0x1b0>)
 80040da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x2a>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e2c7      	b.n	800467a <HAL_ADC_ConfigChannel+0x5ba>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fd42 	bl	8003b80 <LL_ADC_REG_IsConversionOngoing>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 82ac 	bne.w	800465c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	db2c      	blt.n	8004166 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004114:	2b00      	cmp	r3, #0
 8004116:	d108      	bne.n	800412a <HAL_ADC_ConfigChannel+0x6a>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2201      	movs	r2, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	e016      	b.n	8004158 <HAL_ADC_ConfigChannel+0x98>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	613b      	str	r3, [r7, #16]
  return result;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8004142:	2320      	movs	r3, #32
 8004144:	e003      	b.n	800414e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2201      	movs	r2, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	69d1      	ldr	r1, [r2, #28]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	430b      	orrs	r3, r1
 8004164:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	f7ff fbde 	bl	8003934 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fcff 	bl	8003b80 <LL_ADC_REG_IsConversionOngoing>
 8004182:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fd0c 	bl	8003ba6 <LL_ADC_INJ_IsConversionOngoing>
 800418e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 80b8 	bne.w	8004308 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	f040 80b4 	bne.w	8004308 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f7ff fc00 	bl	80039b2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041b2:	4b30      	ldr	r3, [pc, #192]	@ (8004274 <HAL_ADC_ConfigChannel+0x1b4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041be:	d10b      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x118>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	e01d      	b.n	8004214 <HAL_ADC_ConfigChannel+0x154>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10b      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x13e>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	e00a      	b.n	8004214 <HAL_ADC_ConfigChannel+0x154>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	089b      	lsrs	r3, r3, #2
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b04      	cmp	r3, #4
 800421c:	d02c      	beq.n	8004278 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6919      	ldr	r1, [r3, #16]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	f7ff fb1b 	bl	8003866 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6919      	ldr	r1, [r3, #16]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7e5b      	ldrb	r3, [r3, #25]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d102      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x186>
 8004240:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004244:	e000      	b.n	8004248 <HAL_ADC_ConfigChannel+0x188>
 8004246:	2300      	movs	r3, #0
 8004248:	461a      	mov	r2, r3
 800424a:	f7ff fb45 	bl	80038d8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6919      	ldr	r1, [r3, #16]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	7e1b      	ldrb	r3, [r3, #24]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x1a4>
 800425e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004262:	e000      	b.n	8004266 <HAL_ADC_ConfigChannel+0x1a6>
 8004264:	2300      	movs	r3, #0
 8004266:	461a      	mov	r2, r3
 8004268:	f7ff fb1d 	bl	80038a6 <LL_ADC_SetDataRightShift>
 800426c:	e04c      	b.n	8004308 <HAL_ADC_ConfigChannel+0x248>
 800426e:	bf00      	nop
 8004270:	47ff0000 	.word	0x47ff0000
 8004274:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	069b      	lsls	r3, r3, #26
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800429a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	069b      	lsls	r3, r3, #26
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d107      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042be:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d107      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042e2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	069b      	lsls	r3, r3, #26
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d107      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004306:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fc0f 	bl	8003b30 <LL_ADC_IsEnabled>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 81aa 	bne.w	800466e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f7ff fb6e 	bl	8003a08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a87      	ldr	r2, [pc, #540]	@ (8004550 <HAL_ADC_ConfigChannel+0x490>)
 8004332:	4293      	cmp	r3, r2
 8004334:	f040 809a 	bne.w	800446c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4984      	ldr	r1, [pc, #528]	@ (8004554 <HAL_ADC_ConfigChannel+0x494>)
 8004342:	428b      	cmp	r3, r1
 8004344:	d147      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x316>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4983      	ldr	r1, [pc, #524]	@ (8004558 <HAL_ADC_ConfigChannel+0x498>)
 800434c:	428b      	cmp	r3, r1
 800434e:	d040      	beq.n	80043d2 <HAL_ADC_ConfigChannel+0x312>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4981      	ldr	r1, [pc, #516]	@ (800455c <HAL_ADC_ConfigChannel+0x49c>)
 8004356:	428b      	cmp	r3, r1
 8004358:	d039      	beq.n	80043ce <HAL_ADC_ConfigChannel+0x30e>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4980      	ldr	r1, [pc, #512]	@ (8004560 <HAL_ADC_ConfigChannel+0x4a0>)
 8004360:	428b      	cmp	r3, r1
 8004362:	d032      	beq.n	80043ca <HAL_ADC_ConfigChannel+0x30a>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	497e      	ldr	r1, [pc, #504]	@ (8004564 <HAL_ADC_ConfigChannel+0x4a4>)
 800436a:	428b      	cmp	r3, r1
 800436c:	d02b      	beq.n	80043c6 <HAL_ADC_ConfigChannel+0x306>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	497d      	ldr	r1, [pc, #500]	@ (8004568 <HAL_ADC_ConfigChannel+0x4a8>)
 8004374:	428b      	cmp	r3, r1
 8004376:	d024      	beq.n	80043c2 <HAL_ADC_ConfigChannel+0x302>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	497b      	ldr	r1, [pc, #492]	@ (800456c <HAL_ADC_ConfigChannel+0x4ac>)
 800437e:	428b      	cmp	r3, r1
 8004380:	d01d      	beq.n	80043be <HAL_ADC_ConfigChannel+0x2fe>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	497a      	ldr	r1, [pc, #488]	@ (8004570 <HAL_ADC_ConfigChannel+0x4b0>)
 8004388:	428b      	cmp	r3, r1
 800438a:	d016      	beq.n	80043ba <HAL_ADC_ConfigChannel+0x2fa>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4978      	ldr	r1, [pc, #480]	@ (8004574 <HAL_ADC_ConfigChannel+0x4b4>)
 8004392:	428b      	cmp	r3, r1
 8004394:	d00f      	beq.n	80043b6 <HAL_ADC_ConfigChannel+0x2f6>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4977      	ldr	r1, [pc, #476]	@ (8004578 <HAL_ADC_ConfigChannel+0x4b8>)
 800439c:	428b      	cmp	r3, r1
 800439e:	d008      	beq.n	80043b2 <HAL_ADC_ConfigChannel+0x2f2>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4975      	ldr	r1, [pc, #468]	@ (800457c <HAL_ADC_ConfigChannel+0x4bc>)
 80043a6:	428b      	cmp	r3, r1
 80043a8:	d101      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x2ee>
 80043aa:	4b75      	ldr	r3, [pc, #468]	@ (8004580 <HAL_ADC_ConfigChannel+0x4c0>)
 80043ac:	e05a      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043ae:	2300      	movs	r3, #0
 80043b0:	e058      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043b2:	4b74      	ldr	r3, [pc, #464]	@ (8004584 <HAL_ADC_ConfigChannel+0x4c4>)
 80043b4:	e056      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043b6:	4b74      	ldr	r3, [pc, #464]	@ (8004588 <HAL_ADC_ConfigChannel+0x4c8>)
 80043b8:	e054      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004574 <HAL_ADC_ConfigChannel+0x4b4>)
 80043bc:	e052      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043be:	4b6c      	ldr	r3, [pc, #432]	@ (8004570 <HAL_ADC_ConfigChannel+0x4b0>)
 80043c0:	e050      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043c2:	4b72      	ldr	r3, [pc, #456]	@ (800458c <HAL_ADC_ConfigChannel+0x4cc>)
 80043c4:	e04e      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043c6:	4b72      	ldr	r3, [pc, #456]	@ (8004590 <HAL_ADC_ConfigChannel+0x4d0>)
 80043c8:	e04c      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043ca:	4b72      	ldr	r3, [pc, #456]	@ (8004594 <HAL_ADC_ConfigChannel+0x4d4>)
 80043cc:	e04a      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043ce:	4b72      	ldr	r3, [pc, #456]	@ (8004598 <HAL_ADC_ConfigChannel+0x4d8>)
 80043d0:	e048      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e046      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4970      	ldr	r1, [pc, #448]	@ (800459c <HAL_ADC_ConfigChannel+0x4dc>)
 80043dc:	428b      	cmp	r3, r1
 80043de:	d140      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x3a2>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	495c      	ldr	r1, [pc, #368]	@ (8004558 <HAL_ADC_ConfigChannel+0x498>)
 80043e6:	428b      	cmp	r3, r1
 80043e8:	d039      	beq.n	800445e <HAL_ADC_ConfigChannel+0x39e>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	495b      	ldr	r1, [pc, #364]	@ (800455c <HAL_ADC_ConfigChannel+0x49c>)
 80043f0:	428b      	cmp	r3, r1
 80043f2:	d032      	beq.n	800445a <HAL_ADC_ConfigChannel+0x39a>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4959      	ldr	r1, [pc, #356]	@ (8004560 <HAL_ADC_ConfigChannel+0x4a0>)
 80043fa:	428b      	cmp	r3, r1
 80043fc:	d02b      	beq.n	8004456 <HAL_ADC_ConfigChannel+0x396>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4958      	ldr	r1, [pc, #352]	@ (8004564 <HAL_ADC_ConfigChannel+0x4a4>)
 8004404:	428b      	cmp	r3, r1
 8004406:	d024      	beq.n	8004452 <HAL_ADC_ConfigChannel+0x392>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4956      	ldr	r1, [pc, #344]	@ (8004568 <HAL_ADC_ConfigChannel+0x4a8>)
 800440e:	428b      	cmp	r3, r1
 8004410:	d01d      	beq.n	800444e <HAL_ADC_ConfigChannel+0x38e>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4955      	ldr	r1, [pc, #340]	@ (800456c <HAL_ADC_ConfigChannel+0x4ac>)
 8004418:	428b      	cmp	r3, r1
 800441a:	d016      	beq.n	800444a <HAL_ADC_ConfigChannel+0x38a>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4953      	ldr	r1, [pc, #332]	@ (8004570 <HAL_ADC_ConfigChannel+0x4b0>)
 8004422:	428b      	cmp	r3, r1
 8004424:	d00f      	beq.n	8004446 <HAL_ADC_ConfigChannel+0x386>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4952      	ldr	r1, [pc, #328]	@ (8004574 <HAL_ADC_ConfigChannel+0x4b4>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d008      	beq.n	8004442 <HAL_ADC_ConfigChannel+0x382>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4951      	ldr	r1, [pc, #324]	@ (800457c <HAL_ADC_ConfigChannel+0x4bc>)
 8004436:	428b      	cmp	r3, r1
 8004438:	d101      	bne.n	800443e <HAL_ADC_ConfigChannel+0x37e>
 800443a:	4b51      	ldr	r3, [pc, #324]	@ (8004580 <HAL_ADC_ConfigChannel+0x4c0>)
 800443c:	e012      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 800443e:	2300      	movs	r3, #0
 8004440:	e010      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 8004442:	4b51      	ldr	r3, [pc, #324]	@ (8004588 <HAL_ADC_ConfigChannel+0x4c8>)
 8004444:	e00e      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 8004446:	4b4b      	ldr	r3, [pc, #300]	@ (8004574 <HAL_ADC_ConfigChannel+0x4b4>)
 8004448:	e00c      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 800444a:	4b49      	ldr	r3, [pc, #292]	@ (8004570 <HAL_ADC_ConfigChannel+0x4b0>)
 800444c:	e00a      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 800444e:	4b4f      	ldr	r3, [pc, #316]	@ (800458c <HAL_ADC_ConfigChannel+0x4cc>)
 8004450:	e008      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 8004452:	4b4f      	ldr	r3, [pc, #316]	@ (8004590 <HAL_ADC_ConfigChannel+0x4d0>)
 8004454:	e006      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 8004456:	4b4f      	ldr	r3, [pc, #316]	@ (8004594 <HAL_ADC_ConfigChannel+0x4d4>)
 8004458:	e004      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 800445a:	4b4f      	ldr	r3, [pc, #316]	@ (8004598 <HAL_ADC_ConfigChannel+0x4d8>)
 800445c:	e002      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_ADC_ConfigChannel+0x3a4>
 8004462:	2300      	movs	r3, #0
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7ff f9ca 	bl	8003800 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f280 80fc 	bge.w	800466e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a36      	ldr	r2, [pc, #216]	@ (8004554 <HAL_ADC_ConfigChannel+0x494>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_ADC_ConfigChannel+0x3ca>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a45      	ldr	r2, [pc, #276]	@ (800459c <HAL_ADC_ConfigChannel+0x4dc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0x3ce>
 800448a:	4b45      	ldr	r3, [pc, #276]	@ (80045a0 <HAL_ADC_ConfigChannel+0x4e0>)
 800448c:	e000      	b.n	8004490 <HAL_ADC_ConfigChannel+0x3d0>
 800448e:	4b45      	ldr	r3, [pc, #276]	@ (80045a4 <HAL_ADC_ConfigChannel+0x4e4>)
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff f9a7 	bl	80037e4 <LL_ADC_GetCommonPathInternalCh>
 8004496:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2d      	ldr	r2, [pc, #180]	@ (8004554 <HAL_ADC_ConfigChannel+0x494>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_ADC_ConfigChannel+0x3ec>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3d      	ldr	r2, [pc, #244]	@ (800459c <HAL_ADC_ConfigChannel+0x4dc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d10e      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x40a>
 80044ac:	4829      	ldr	r0, [pc, #164]	@ (8004554 <HAL_ADC_ConfigChannel+0x494>)
 80044ae:	f7ff fb3f 	bl	8003b30 <LL_ADC_IsEnabled>
 80044b2:	4604      	mov	r4, r0
 80044b4:	4839      	ldr	r0, [pc, #228]	@ (800459c <HAL_ADC_ConfigChannel+0x4dc>)
 80044b6:	f7ff fb3b 	bl	8003b30 <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4323      	orrs	r3, r4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e008      	b.n	80044dc <HAL_ADC_ConfigChannel+0x41c>
 80044ca:	4837      	ldr	r0, [pc, #220]	@ (80045a8 <HAL_ADC_ConfigChannel+0x4e8>)
 80044cc:	f7ff fb30 	bl	8003b30 <LL_ADC_IsEnabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf0c      	ite	eq
 80044d6:	2301      	moveq	r3, #1
 80044d8:	2300      	movne	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80b3 	beq.w	8004648 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a31      	ldr	r2, [pc, #196]	@ (80045ac <HAL_ADC_ConfigChannel+0x4ec>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d165      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x4f8>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d160      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a2b      	ldr	r2, [pc, #172]	@ (80045a8 <HAL_ADC_ConfigChannel+0x4e8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	f040 80b6 	bne.w	800466e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a13      	ldr	r2, [pc, #76]	@ (8004554 <HAL_ADC_ConfigChannel+0x494>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_ADC_ConfigChannel+0x456>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a22      	ldr	r2, [pc, #136]	@ (800459c <HAL_ADC_ConfigChannel+0x4dc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_ADC_ConfigChannel+0x45a>
 8004516:	4a22      	ldr	r2, [pc, #136]	@ (80045a0 <HAL_ADC_ConfigChannel+0x4e0>)
 8004518:	e000      	b.n	800451c <HAL_ADC_ConfigChannel+0x45c>
 800451a:	4a22      	ldr	r2, [pc, #136]	@ (80045a4 <HAL_ADC_ConfigChannel+0x4e4>)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f7ff f94a 	bl	80037be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800452a:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <HAL_ADC_ConfigChannel+0x4f0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	099b      	lsrs	r3, r3, #6
 8004530:	4a20      	ldr	r2, [pc, #128]	@ (80045b4 <HAL_ADC_ConfigChannel+0x4f4>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	3301      	adds	r3, #1
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800453e:	e002      	b.n	8004546 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3b01      	subs	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f9      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800454c:	e08f      	b.n	800466e <HAL_ADC_ConfigChannel+0x5ae>
 800454e:	bf00      	nop
 8004550:	47ff0000 	.word	0x47ff0000
 8004554:	40022000 	.word	0x40022000
 8004558:	04300002 	.word	0x04300002
 800455c:	08600004 	.word	0x08600004
 8004560:	0c900008 	.word	0x0c900008
 8004564:	10c00010 	.word	0x10c00010
 8004568:	14f00020 	.word	0x14f00020
 800456c:	2a000400 	.word	0x2a000400
 8004570:	2e300800 	.word	0x2e300800
 8004574:	32601000 	.word	0x32601000
 8004578:	43210000 	.word	0x43210000
 800457c:	4b840000 	.word	0x4b840000
 8004580:	4fb80000 	.word	0x4fb80000
 8004584:	47520000 	.word	0x47520000
 8004588:	36902000 	.word	0x36902000
 800458c:	25b00200 	.word	0x25b00200
 8004590:	21800100 	.word	0x21800100
 8004594:	1d500080 	.word	0x1d500080
 8004598:	19200040 	.word	0x19200040
 800459c:	40022100 	.word	0x40022100
 80045a0:	40022300 	.word	0x40022300
 80045a4:	58026300 	.word	0x58026300
 80045a8:	58026000 	.word	0x58026000
 80045ac:	cb840000 	.word	0xcb840000
 80045b0:	24000240 	.word	0x24000240
 80045b4:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a31      	ldr	r2, [pc, #196]	@ (8004684 <HAL_ADC_ConfigChannel+0x5c4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d11e      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x540>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d119      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004688 <HAL_ADC_ConfigChannel+0x5c8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d14b      	bne.n	800466e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a2c      	ldr	r2, [pc, #176]	@ (800468c <HAL_ADC_ConfigChannel+0x5cc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_ADC_ConfigChannel+0x52a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004690 <HAL_ADC_ConfigChannel+0x5d0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x52e>
 80045ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004694 <HAL_ADC_ConfigChannel+0x5d4>)
 80045ec:	e000      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x530>
 80045ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004698 <HAL_ADC_ConfigChannel+0x5d8>)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7ff f8e0 	bl	80037be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045fe:	e036      	b.n	800466e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a25      	ldr	r2, [pc, #148]	@ (800469c <HAL_ADC_ConfigChannel+0x5dc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d131      	bne.n	800466e <HAL_ADC_ConfigChannel+0x5ae>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d12c      	bne.n	800466e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1b      	ldr	r2, [pc, #108]	@ (8004688 <HAL_ADC_ConfigChannel+0x5c8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d127      	bne.n	800466e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1a      	ldr	r2, [pc, #104]	@ (800468c <HAL_ADC_ConfigChannel+0x5cc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_ADC_ConfigChannel+0x572>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a18      	ldr	r2, [pc, #96]	@ (8004690 <HAL_ADC_ConfigChannel+0x5d0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x576>
 8004632:	4a18      	ldr	r2, [pc, #96]	@ (8004694 <HAL_ADC_ConfigChannel+0x5d4>)
 8004634:	e000      	b.n	8004638 <HAL_ADC_ConfigChannel+0x578>
 8004636:	4a18      	ldr	r2, [pc, #96]	@ (8004698 <HAL_ADC_ConfigChannel+0x5d8>)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f7ff f8bc 	bl	80037be <LL_ADC_SetCommonPathInternalCh>
 8004646:	e012      	b.n	800466e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464c:	f043 0220 	orr.w	r2, r3, #32
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800465a:	e008      	b.n	800466e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004676:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800467a:	4618      	mov	r0, r3
 800467c:	3734      	adds	r7, #52	@ 0x34
 800467e:	46bd      	mov	sp, r7
 8004680:	bd90      	pop	{r4, r7, pc}
 8004682:	bf00      	nop
 8004684:	c7520000 	.word	0xc7520000
 8004688:	58026000 	.word	0x58026000
 800468c:	40022000 	.word	0x40022000
 8004690:	40022100 	.word	0x40022100
 8004694:	40022300 	.word	0x40022300
 8004698:	58026300 	.word	0x58026300
 800469c:	cfb80000 	.word	0xcfb80000

080046a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fa3f 	bl	8003b30 <LL_ADC_IsEnabled>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d16e      	bne.n	8004796 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	4b38      	ldr	r3, [pc, #224]	@ (80047a0 <ADC_Enable+0x100>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	f043 0210 	orr.w	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e05a      	b.n	8004798 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fa0e 	bl	8003b08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046ec:	f7ff f818 	bl	8003720 <HAL_GetTick>
 80046f0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2b      	ldr	r2, [pc, #172]	@ (80047a4 <ADC_Enable+0x104>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <ADC_Enable+0x66>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a29      	ldr	r2, [pc, #164]	@ (80047a8 <ADC_Enable+0x108>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <ADC_Enable+0x6a>
 8004706:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <ADC_Enable+0x10c>)
 8004708:	e000      	b.n	800470c <ADC_Enable+0x6c>
 800470a:	4b29      	ldr	r3, [pc, #164]	@ (80047b0 <ADC_Enable+0x110>)
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff f99f 	bl	8003a50 <LL_ADC_GetMultimode>
 8004712:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a23      	ldr	r2, [pc, #140]	@ (80047a8 <ADC_Enable+0x108>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d002      	beq.n	8004724 <ADC_Enable+0x84>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	e000      	b.n	8004726 <ADC_Enable+0x86>
 8004724:	4b1f      	ldr	r3, [pc, #124]	@ (80047a4 <ADC_Enable+0x104>)
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	4293      	cmp	r3, r2
 800472c:	d02c      	beq.n	8004788 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d130      	bne.n	8004796 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004734:	e028      	b.n	8004788 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f9f8 	bl	8003b30 <LL_ADC_IsEnabled>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff f9dc 	bl	8003b08 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004750:	f7fe ffe6 	bl	8003720 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d914      	bls.n	8004788 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d00d      	beq.n	8004788 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004770:	f043 0210 	orr.w	r2, r3, #16
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	f043 0201 	orr.w	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e007      	b.n	8004798 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d1cf      	bne.n	8004736 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	8000003f 	.word	0x8000003f
 80047a4:	40022000 	.word	0x40022000
 80047a8:	40022100 	.word	0x40022100
 80047ac:	40022300 	.word	0x40022300
 80047b0:	58026300 	.word	0x58026300

080047b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d14b      	bne.n	8004866 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d021      	beq.n	800482c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff f88e 	bl	800390e <LL_ADC_REG_IsTriggerSourceSWStart>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d032      	beq.n	800485e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d12b      	bne.n	800485e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d11f      	bne.n	800485e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	655a      	str	r2, [r3, #84]	@ 0x54
 800482a:	e018      	b.n	800485e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d111      	bne.n	800485e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d105      	bne.n	800485e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	f043 0201 	orr.w	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7fd f8c6 	bl	80019f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004864:	e00e      	b.n	8004884 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff fc1a 	bl	80040ac <HAL_ADC_ErrorCallback>
}
 8004878:	e004      	b.n	8004884 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff fbfc 	bl	8004098 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c6:	f043 0204 	orr.w	r2, r3, #4
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff fbec 	bl	80040ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ad4 <ADC_ConfigureBoostMode+0x1f8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <ADC_ConfigureBoostMode+0x1c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a79      	ldr	r2, [pc, #484]	@ (8004ad8 <ADC_ConfigureBoostMode+0x1fc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d109      	bne.n	800490c <ADC_ConfigureBoostMode+0x30>
 80048f8:	4b78      	ldr	r3, [pc, #480]	@ (8004adc <ADC_ConfigureBoostMode+0x200>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e008      	b.n	800491e <ADC_ConfigureBoostMode+0x42>
 800490c:	4b74      	ldr	r3, [pc, #464]	@ (8004ae0 <ADC_ConfigureBoostMode+0x204>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01c      	beq.n	800495c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004922:	f00a fe0d 	bl	800f540 <HAL_RCC_GetHCLKFreq>
 8004926:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004930:	d010      	beq.n	8004954 <ADC_ConfigureBoostMode+0x78>
 8004932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004936:	d873      	bhi.n	8004a20 <ADC_ConfigureBoostMode+0x144>
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800493c:	d002      	beq.n	8004944 <ADC_ConfigureBoostMode+0x68>
 800493e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004942:	d16d      	bne.n	8004a20 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	60fb      	str	r3, [r7, #12]
        break;
 8004952:	e068      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	60fb      	str	r3, [r7, #12]
        break;
 800495a:	e064      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800495c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004960:	f04f 0100 	mov.w	r1, #0
 8004964:	f00c f852 	bl	8010a0c <HAL_RCCEx_GetPeriphCLKFreq>
 8004968:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004972:	d051      	beq.n	8004a18 <ADC_ConfigureBoostMode+0x13c>
 8004974:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004978:	d854      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 800497a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800497e:	d047      	beq.n	8004a10 <ADC_ConfigureBoostMode+0x134>
 8004980:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004984:	d84e      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 8004986:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800498a:	d03d      	beq.n	8004a08 <ADC_ConfigureBoostMode+0x12c>
 800498c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004990:	d848      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 8004992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004996:	d033      	beq.n	8004a00 <ADC_ConfigureBoostMode+0x124>
 8004998:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800499c:	d842      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 800499e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049a2:	d029      	beq.n	80049f8 <ADC_ConfigureBoostMode+0x11c>
 80049a4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049a8:	d83c      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 80049aa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80049ae:	d01a      	beq.n	80049e6 <ADC_ConfigureBoostMode+0x10a>
 80049b0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80049b4:	d836      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 80049b6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049ba:	d014      	beq.n	80049e6 <ADC_ConfigureBoostMode+0x10a>
 80049bc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049c0:	d830      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 80049c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049c6:	d00e      	beq.n	80049e6 <ADC_ConfigureBoostMode+0x10a>
 80049c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049cc:	d82a      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 80049ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049d2:	d008      	beq.n	80049e6 <ADC_ConfigureBoostMode+0x10a>
 80049d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049d8:	d824      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x148>
 80049da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049de:	d002      	beq.n	80049e6 <ADC_ConfigureBoostMode+0x10a>
 80049e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049e4:	d11e      	bne.n	8004a24 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	0c9b      	lsrs	r3, r3, #18
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	60fb      	str	r3, [r7, #12]
        break;
 80049f6:	e016      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	60fb      	str	r3, [r7, #12]
        break;
 80049fe:	e012      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	60fb      	str	r3, [r7, #12]
        break;
 8004a06:	e00e      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	099b      	lsrs	r3, r3, #6
 8004a0c:	60fb      	str	r3, [r7, #12]
        break;
 8004a0e:	e00a      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	09db      	lsrs	r3, r3, #7
 8004a14:	60fb      	str	r3, [r7, #12]
        break;
 8004a16:	e006      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	60fb      	str	r3, [r7, #12]
        break;
 8004a1e:	e002      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a24:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004a26:	f7fe feab 	bl	8003780 <HAL_GetREVID>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d815      	bhi.n	8004a60 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae4 <ADC_ConfigureBoostMode+0x208>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d908      	bls.n	8004a4e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a4c:	e03e      	b.n	8004acc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a5c:	609a      	str	r2, [r3, #8]
}
 8004a5e:	e035      	b.n	8004acc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae8 <ADC_ConfigureBoostMode+0x20c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d808      	bhi.n	8004a80 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	e025      	b.n	8004acc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a1a      	ldr	r2, [pc, #104]	@ (8004aec <ADC_ConfigureBoostMode+0x210>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d80a      	bhi.n	8004a9e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	e016      	b.n	8004acc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	@ (8004af0 <ADC_ConfigureBoostMode+0x214>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d80a      	bhi.n	8004abc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab8:	609a      	str	r2, [r3, #8]
}
 8004aba:	e007      	b.n	8004acc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40022100 	.word	0x40022100
 8004adc:	40022300 	.word	0x40022300
 8004ae0:	58026300 	.word	0x58026300
 8004ae4:	01312d00 	.word	0x01312d00
 8004ae8:	005f5e10 	.word	0x005f5e10
 8004aec:	00bebc20 	.word	0x00bebc20
 8004af0:	017d7840 	.word	0x017d7840

08004af4 <LL_ADC_IsEnabled>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <LL_ADC_IsEnabled+0x18>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <LL_ADC_IsEnabled+0x1a>
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d101      	bne.n	8004b32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b09f      	sub	sp, #124	@ 0x7c
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e0be      	b.n	8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a5c      	ldr	r2, [pc, #368]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d102      	bne.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b78:	4b5b      	ldr	r3, [pc, #364]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	e001      	b.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10b      	bne.n	8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e09d      	b.n	8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ffb9 	bl	8004b1a <LL_ADC_REG_IsConversionOngoing>
 8004ba8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ffb3 	bl	8004b1a <LL_ADC_REG_IsConversionOngoing>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d17f      	bne.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d17c      	bne.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a47      	ldr	r2, [pc, #284]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a46      	ldr	r2, [pc, #280]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004bd4:	4b45      	ldr	r3, [pc, #276]	@ (8004cec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bd6:	e000      	b.n	8004bda <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004bd8:	4b45      	ldr	r3, [pc, #276]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bda:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d039      	beq.n	8004c58 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3a      	ldr	r2, [pc, #232]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a38      	ldr	r2, [pc, #224]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10e      	bne.n	8004c28 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004c0a:	4836      	ldr	r0, [pc, #216]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c0c:	f7ff ff72 	bl	8004af4 <LL_ADC_IsEnabled>
 8004c10:	4604      	mov	r4, r0
 8004c12:	4835      	ldr	r0, [pc, #212]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c14:	f7ff ff6e 	bl	8004af4 <LL_ADC_IsEnabled>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4323      	orrs	r3, r4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	e008      	b.n	8004c3a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004c28:	4832      	ldr	r0, [pc, #200]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c2a:	f7ff ff63 	bl	8004af4 <LL_ADC_IsEnabled>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d047      	beq.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	6811      	ldr	r1, [r2, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	6892      	ldr	r2, [r2, #8]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	431a      	orrs	r2, r3
 8004c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c54:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c56:	e03a      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d10e      	bne.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004c78:	481a      	ldr	r0, [pc, #104]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c7a:	f7ff ff3b 	bl	8004af4 <LL_ADC_IsEnabled>
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4819      	ldr	r0, [pc, #100]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c82:	f7ff ff37 	bl	8004af4 <LL_ADC_IsEnabled>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4323      	orrs	r3, r4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bf0c      	ite	eq
 8004c8e:	2301      	moveq	r3, #1
 8004c90:	2300      	movne	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	e008      	b.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004c96:	4817      	ldr	r0, [pc, #92]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c98:	f7ff ff2c 	bl	8004af4 <LL_ADC_IsEnabled>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d010      	beq.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cb6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cb8:	e009      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004ccc:	e000      	b.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004cd8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	377c      	adds	r7, #124	@ 0x7c
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd90      	pop	{r4, r7, pc}
 8004ce4:	40022000 	.word	0x40022000
 8004ce8:	40022100 	.word	0x40022100
 8004cec:	40022300 	.word	0x40022300
 8004cf0:	58026300 	.word	0x58026300
 8004cf4:	58026000 	.word	0x58026000
 8004cf8:	fffff0e0 	.word	0xfffff0e0

08004cfc <__NVIC_SetPriorityGrouping>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <__NVIC_SetPriorityGrouping+0x40>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d18:	4013      	ands	r3, r2
 8004d1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d24:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <__NVIC_SetPriorityGrouping+0x44>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d2a:	4a04      	ldr	r2, [pc, #16]	@ (8004d3c <__NVIC_SetPriorityGrouping+0x40>)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	60d3      	str	r3, [r2, #12]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00
 8004d40:	05fa0000 	.word	0x05fa0000

08004d44 <__NVIC_GetPriorityGrouping>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <__NVIC_GetPriorityGrouping+0x18>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	0a1b      	lsrs	r3, r3, #8
 8004d4e:	f003 0307 	and.w	r3, r3, #7
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <__NVIC_EnableIRQ>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	db0b      	blt.n	8004d8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	f003 021f 	and.w	r2, r3, #31
 8004d78:	4907      	ldr	r1, [pc, #28]	@ (8004d98 <__NVIC_EnableIRQ+0x38>)
 8004d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2001      	movs	r0, #1
 8004d82:	fa00 f202 	lsl.w	r2, r0, r2
 8004d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	e000e100 	.word	0xe000e100

08004d9c <__NVIC_SetPriority>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	6039      	str	r1, [r7, #0]
 8004da6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	db0a      	blt.n	8004dc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	490c      	ldr	r1, [pc, #48]	@ (8004de8 <__NVIC_SetPriority+0x4c>)
 8004db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dba:	0112      	lsls	r2, r2, #4
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004dc4:	e00a      	b.n	8004ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	4908      	ldr	r1, [pc, #32]	@ (8004dec <__NVIC_SetPriority+0x50>)
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	3b04      	subs	r3, #4
 8004dd4:	0112      	lsls	r2, r2, #4
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	440b      	add	r3, r1
 8004dda:	761a      	strb	r2, [r3, #24]
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000e100 	.word	0xe000e100
 8004dec:	e000ed00 	.word	0xe000ed00

08004df0 <NVIC_EncodePriority>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	@ 0x24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f1c3 0307 	rsb	r3, r3, #7
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	bf28      	it	cs
 8004e0e:	2304      	movcs	r3, #4
 8004e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	d902      	bls.n	8004e20 <NVIC_EncodePriority+0x30>
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3b03      	subs	r3, #3
 8004e1e:	e000      	b.n	8004e22 <NVIC_EncodePriority+0x32>
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e24:	f04f 32ff 	mov.w	r2, #4294967295
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	401a      	ands	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e38:	f04f 31ff 	mov.w	r1, #4294967295
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	43d9      	mvns	r1, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e48:	4313      	orrs	r3, r2
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3724      	adds	r7, #36	@ 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e68:	d301      	bcc.n	8004e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e00f      	b.n	8004e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e98 <SysTick_Config+0x40>)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e76:	210f      	movs	r1, #15
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	f7ff ff8e 	bl	8004d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <SysTick_Config+0x40>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e86:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <SysTick_Config+0x40>)
 8004e88:	2207      	movs	r2, #7
 8004e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	e000e010 	.word	0xe000e010

08004e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ff29 	bl	8004cfc <__NVIC_SetPriorityGrouping>
}
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b086      	sub	sp, #24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	4603      	mov	r3, r0
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ec0:	f7ff ff40 	bl	8004d44 <__NVIC_GetPriorityGrouping>
 8004ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	6978      	ldr	r0, [r7, #20]
 8004ecc:	f7ff ff90 	bl	8004df0 <NVIC_EncodePriority>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ff5f 	bl	8004d9c <__NVIC_SetPriority>
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	4603      	mov	r3, r0
 8004eee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ff33 	bl	8004d60 <__NVIC_EnableIRQ>
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff ffa4 	bl	8004e58 <SysTick_Config>
 8004f10:	4603      	mov	r3, r0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004f20:	f3bf 8f5f 	dmb	sy
}
 8004f24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004f26:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <HAL_MPU_Disable+0x28>)
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	4a06      	ldr	r2, [pc, #24]	@ (8004f44 <HAL_MPU_Disable+0x28>)
 8004f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f30:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004f32:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <HAL_MPU_Disable+0x2c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	605a      	str	r2, [r3, #4]
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	e000ed00 	.word	0xe000ed00
 8004f48:	e000ed90 	.word	0xe000ed90

08004f4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004f54:	4a0b      	ldr	r2, [pc, #44]	@ (8004f84 <HAL_MPU_Enable+0x38>)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <HAL_MPU_Enable+0x3c>)
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	4a09      	ldr	r2, [pc, #36]	@ (8004f88 <HAL_MPU_Enable+0x3c>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f68:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004f6a:	f3bf 8f4f 	dsb	sy
}
 8004f6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f70:	f3bf 8f6f 	isb	sy
}
 8004f74:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	e000ed90 	.word	0xe000ed90
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	785a      	ldrb	r2, [r3, #1]
 8004f98:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <HAL_MPU_ConfigRegion+0x7c>)
 8004f9a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005008 <HAL_MPU_ConfigRegion+0x7c>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <HAL_MPU_ConfigRegion+0x7c>)
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004fa8:	4a17      	ldr	r2, [pc, #92]	@ (8005008 <HAL_MPU_ConfigRegion+0x7c>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7b1b      	ldrb	r3, [r3, #12]
 8004fb4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	7adb      	ldrb	r3, [r3, #11]
 8004fba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	7a9b      	ldrb	r3, [r3, #10]
 8004fc2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7b5b      	ldrb	r3, [r3, #13]
 8004fca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7b9b      	ldrb	r3, [r3, #14]
 8004fd2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7bdb      	ldrb	r3, [r3, #15]
 8004fda:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	7a5b      	ldrb	r3, [r3, #9]
 8004fe2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	7a1b      	ldrb	r3, [r3, #8]
 8004fea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ff4:	4a04      	ldr	r2, [pc, #16]	@ (8005008 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004ff6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ff8:	6113      	str	r3, [r2, #16]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	e000ed90 	.word	0xe000ed90

0800500c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005014:	f7fe fb84 	bl	8003720 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e316      	b.n	8005652 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a66      	ldr	r2, [pc, #408]	@ (80051c4 <HAL_DMA_Init+0x1b8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d04a      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a65      	ldr	r2, [pc, #404]	@ (80051c8 <HAL_DMA_Init+0x1bc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d045      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a63      	ldr	r2, [pc, #396]	@ (80051cc <HAL_DMA_Init+0x1c0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d040      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a62      	ldr	r2, [pc, #392]	@ (80051d0 <HAL_DMA_Init+0x1c4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d03b      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a60      	ldr	r2, [pc, #384]	@ (80051d4 <HAL_DMA_Init+0x1c8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d036      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a5f      	ldr	r2, [pc, #380]	@ (80051d8 <HAL_DMA_Init+0x1cc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d031      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a5d      	ldr	r2, [pc, #372]	@ (80051dc <HAL_DMA_Init+0x1d0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d02c      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a5c      	ldr	r2, [pc, #368]	@ (80051e0 <HAL_DMA_Init+0x1d4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d027      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a5a      	ldr	r2, [pc, #360]	@ (80051e4 <HAL_DMA_Init+0x1d8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d022      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a59      	ldr	r2, [pc, #356]	@ (80051e8 <HAL_DMA_Init+0x1dc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01d      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a57      	ldr	r2, [pc, #348]	@ (80051ec <HAL_DMA_Init+0x1e0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a56      	ldr	r2, [pc, #344]	@ (80051f0 <HAL_DMA_Init+0x1e4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a54      	ldr	r2, [pc, #336]	@ (80051f4 <HAL_DMA_Init+0x1e8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a53      	ldr	r2, [pc, #332]	@ (80051f8 <HAL_DMA_Init+0x1ec>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a51      	ldr	r2, [pc, #324]	@ (80051fc <HAL_DMA_Init+0x1f0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_DMA_Init+0xb8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a50      	ldr	r2, [pc, #320]	@ (8005200 <HAL_DMA_Init+0x1f4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d101      	bne.n	80050c8 <HAL_DMA_Init+0xbc>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_DMA_Init+0xbe>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 813b 	beq.w	8005346 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a37      	ldr	r2, [pc, #220]	@ (80051c4 <HAL_DMA_Init+0x1b8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04a      	beq.n	8005180 <HAL_DMA_Init+0x174>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a36      	ldr	r2, [pc, #216]	@ (80051c8 <HAL_DMA_Init+0x1bc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d045      	beq.n	8005180 <HAL_DMA_Init+0x174>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a34      	ldr	r2, [pc, #208]	@ (80051cc <HAL_DMA_Init+0x1c0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d040      	beq.n	8005180 <HAL_DMA_Init+0x174>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a33      	ldr	r2, [pc, #204]	@ (80051d0 <HAL_DMA_Init+0x1c4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d03b      	beq.n	8005180 <HAL_DMA_Init+0x174>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a31      	ldr	r2, [pc, #196]	@ (80051d4 <HAL_DMA_Init+0x1c8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d036      	beq.n	8005180 <HAL_DMA_Init+0x174>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a30      	ldr	r2, [pc, #192]	@ (80051d8 <HAL_DMA_Init+0x1cc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d031      	beq.n	8005180 <HAL_DMA_Init+0x174>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2e      	ldr	r2, [pc, #184]	@ (80051dc <HAL_DMA_Init+0x1d0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02c      	beq.n	8005180 <HAL_DMA_Init+0x174>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2d      	ldr	r2, [pc, #180]	@ (80051e0 <HAL_DMA_Init+0x1d4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d027      	beq.n	8005180 <HAL_DMA_Init+0x174>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2b      	ldr	r2, [pc, #172]	@ (80051e4 <HAL_DMA_Init+0x1d8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_DMA_Init+0x174>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2a      	ldr	r2, [pc, #168]	@ (80051e8 <HAL_DMA_Init+0x1dc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d01d      	beq.n	8005180 <HAL_DMA_Init+0x174>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a28      	ldr	r2, [pc, #160]	@ (80051ec <HAL_DMA_Init+0x1e0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_DMA_Init+0x174>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a27      	ldr	r2, [pc, #156]	@ (80051f0 <HAL_DMA_Init+0x1e4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_DMA_Init+0x174>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a25      	ldr	r2, [pc, #148]	@ (80051f4 <HAL_DMA_Init+0x1e8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_DMA_Init+0x174>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a24      	ldr	r2, [pc, #144]	@ (80051f8 <HAL_DMA_Init+0x1ec>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_DMA_Init+0x174>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a22      	ldr	r2, [pc, #136]	@ (80051fc <HAL_DMA_Init+0x1f0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_DMA_Init+0x174>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a21      	ldr	r2, [pc, #132]	@ (8005200 <HAL_DMA_Init+0x1f4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d108      	bne.n	8005192 <HAL_DMA_Init+0x186>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e007      	b.n	80051a2 <HAL_DMA_Init+0x196>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051a2:	e02f      	b.n	8005204 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051a4:	f7fe fabc 	bl	8003720 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d928      	bls.n	8005204 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2203      	movs	r2, #3
 80051bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e246      	b.n	8005652 <HAL_DMA_Init+0x646>
 80051c4:	40020010 	.word	0x40020010
 80051c8:	40020028 	.word	0x40020028
 80051cc:	40020040 	.word	0x40020040
 80051d0:	40020058 	.word	0x40020058
 80051d4:	40020070 	.word	0x40020070
 80051d8:	40020088 	.word	0x40020088
 80051dc:	400200a0 	.word	0x400200a0
 80051e0:	400200b8 	.word	0x400200b8
 80051e4:	40020410 	.word	0x40020410
 80051e8:	40020428 	.word	0x40020428
 80051ec:	40020440 	.word	0x40020440
 80051f0:	40020458 	.word	0x40020458
 80051f4:	40020470 	.word	0x40020470
 80051f8:	40020488 	.word	0x40020488
 80051fc:	400204a0 	.word	0x400204a0
 8005200:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1c8      	bne.n	80051a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4b83      	ldr	r3, [pc, #524]	@ (800542c <HAL_DMA_Init+0x420>)
 800521e:	4013      	ands	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800522a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005236:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005242:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	2b04      	cmp	r3, #4
 8005256:	d107      	bne.n	8005268 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	4313      	orrs	r3, r2
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005268:	4b71      	ldr	r3, [pc, #452]	@ (8005430 <HAL_DMA_Init+0x424>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b71      	ldr	r3, [pc, #452]	@ (8005434 <HAL_DMA_Init+0x428>)
 800526e:	4013      	ands	r3, r2
 8005270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005274:	d328      	bcc.n	80052c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b28      	cmp	r3, #40	@ 0x28
 800527c:	d903      	bls.n	8005286 <HAL_DMA_Init+0x27a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b2e      	cmp	r3, #46	@ 0x2e
 8005284:	d917      	bls.n	80052b6 <HAL_DMA_Init+0x2aa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b3e      	cmp	r3, #62	@ 0x3e
 800528c:	d903      	bls.n	8005296 <HAL_DMA_Init+0x28a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b42      	cmp	r3, #66	@ 0x42
 8005294:	d90f      	bls.n	80052b6 <HAL_DMA_Init+0x2aa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b46      	cmp	r3, #70	@ 0x46
 800529c:	d903      	bls.n	80052a6 <HAL_DMA_Init+0x29a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b48      	cmp	r3, #72	@ 0x48
 80052a4:	d907      	bls.n	80052b6 <HAL_DMA_Init+0x2aa>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80052ac:	d905      	bls.n	80052ba <HAL_DMA_Init+0x2ae>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b52      	cmp	r3, #82	@ 0x52
 80052b4:	d801      	bhi.n	80052ba <HAL_DMA_Init+0x2ae>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <HAL_DMA_Init+0x2b0>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d117      	bne.n	8005322 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f002 fb4d 	bl	80079a4 <DMA_CheckFifoParam>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2240      	movs	r2, #64	@ 0x40
 8005314:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e197      	b.n	8005652 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f002 fa88 	bl	8007840 <DMA_CalcBaseAndBitshift>
 8005330:	4603      	mov	r3, r0
 8005332:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	223f      	movs	r2, #63	@ 0x3f
 800533e:	409a      	lsls	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	609a      	str	r2, [r3, #8]
 8005344:	e0cd      	b.n	80054e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a3b      	ldr	r2, [pc, #236]	@ (8005438 <HAL_DMA_Init+0x42c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d022      	beq.n	8005396 <HAL_DMA_Init+0x38a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a39      	ldr	r2, [pc, #228]	@ (800543c <HAL_DMA_Init+0x430>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01d      	beq.n	8005396 <HAL_DMA_Init+0x38a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a38      	ldr	r2, [pc, #224]	@ (8005440 <HAL_DMA_Init+0x434>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_DMA_Init+0x38a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a36      	ldr	r2, [pc, #216]	@ (8005444 <HAL_DMA_Init+0x438>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_DMA_Init+0x38a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a35      	ldr	r2, [pc, #212]	@ (8005448 <HAL_DMA_Init+0x43c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_DMA_Init+0x38a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a33      	ldr	r2, [pc, #204]	@ (800544c <HAL_DMA_Init+0x440>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_DMA_Init+0x38a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a32      	ldr	r2, [pc, #200]	@ (8005450 <HAL_DMA_Init+0x444>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_DMA_Init+0x38a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a30      	ldr	r2, [pc, #192]	@ (8005454 <HAL_DMA_Init+0x448>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d101      	bne.n	800539a <HAL_DMA_Init+0x38e>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_DMA_Init+0x390>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8097 	beq.w	80054d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a24      	ldr	r2, [pc, #144]	@ (8005438 <HAL_DMA_Init+0x42c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d021      	beq.n	80053f0 <HAL_DMA_Init+0x3e4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a22      	ldr	r2, [pc, #136]	@ (800543c <HAL_DMA_Init+0x430>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01c      	beq.n	80053f0 <HAL_DMA_Init+0x3e4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	@ (8005440 <HAL_DMA_Init+0x434>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d017      	beq.n	80053f0 <HAL_DMA_Init+0x3e4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005444 <HAL_DMA_Init+0x438>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d012      	beq.n	80053f0 <HAL_DMA_Init+0x3e4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005448 <HAL_DMA_Init+0x43c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00d      	beq.n	80053f0 <HAL_DMA_Init+0x3e4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <HAL_DMA_Init+0x440>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d008      	beq.n	80053f0 <HAL_DMA_Init+0x3e4>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005450 <HAL_DMA_Init+0x444>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <HAL_DMA_Init+0x3e4>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a19      	ldr	r2, [pc, #100]	@ (8005454 <HAL_DMA_Init+0x448>)
 80053ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4b13      	ldr	r3, [pc, #76]	@ (8005458 <HAL_DMA_Init+0x44c>)
 800540c:	4013      	ands	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d021      	beq.n	800545c <HAL_DMA_Init+0x450>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b80      	cmp	r3, #128	@ 0x80
 800541e:	d102      	bne.n	8005426 <HAL_DMA_Init+0x41a>
 8005420:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005424:	e01b      	b.n	800545e <HAL_DMA_Init+0x452>
 8005426:	2300      	movs	r3, #0
 8005428:	e019      	b.n	800545e <HAL_DMA_Init+0x452>
 800542a:	bf00      	nop
 800542c:	fe10803f 	.word	0xfe10803f
 8005430:	5c001000 	.word	0x5c001000
 8005434:	ffff0000 	.word	0xffff0000
 8005438:	58025408 	.word	0x58025408
 800543c:	5802541c 	.word	0x5802541c
 8005440:	58025430 	.word	0x58025430
 8005444:	58025444 	.word	0x58025444
 8005448:	58025458 	.word	0x58025458
 800544c:	5802546c 	.word	0x5802546c
 8005450:	58025480 	.word	0x58025480
 8005454:	58025494 	.word	0x58025494
 8005458:	fffe000f 	.word	0xfffe000f
 800545c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68d2      	ldr	r2, [r2, #12]
 8005462:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800546c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800547c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800548c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	4b6e      	ldr	r3, [pc, #440]	@ (800565c <HAL_DMA_Init+0x650>)
 80054a4:	4413      	add	r3, r2
 80054a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005660 <HAL_DMA_Init+0x654>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	009a      	lsls	r2, r3, #2
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f002 f9c3 	bl	8007840 <DMA_CalcBaseAndBitshift>
 80054ba:	4603      	mov	r3, r0
 80054bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2201      	movs	r2, #1
 80054c8:	409a      	lsls	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	e008      	b.n	80054e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2240      	movs	r2, #64	@ 0x40
 80054d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2203      	movs	r2, #3
 80054da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e0b7      	b.n	8005652 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005664 <HAL_DMA_Init+0x658>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d072      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005668 <HAL_DMA_Init+0x65c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d06d      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a5c      	ldr	r2, [pc, #368]	@ (800566c <HAL_DMA_Init+0x660>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d068      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a5a      	ldr	r2, [pc, #360]	@ (8005670 <HAL_DMA_Init+0x664>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d063      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a59      	ldr	r2, [pc, #356]	@ (8005674 <HAL_DMA_Init+0x668>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d05e      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a57      	ldr	r2, [pc, #348]	@ (8005678 <HAL_DMA_Init+0x66c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d059      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a56      	ldr	r2, [pc, #344]	@ (800567c <HAL_DMA_Init+0x670>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d054      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a54      	ldr	r2, [pc, #336]	@ (8005680 <HAL_DMA_Init+0x674>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d04f      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a53      	ldr	r2, [pc, #332]	@ (8005684 <HAL_DMA_Init+0x678>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d04a      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a51      	ldr	r2, [pc, #324]	@ (8005688 <HAL_DMA_Init+0x67c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d045      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a50      	ldr	r2, [pc, #320]	@ (800568c <HAL_DMA_Init+0x680>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d040      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a4e      	ldr	r2, [pc, #312]	@ (8005690 <HAL_DMA_Init+0x684>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d03b      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a4d      	ldr	r2, [pc, #308]	@ (8005694 <HAL_DMA_Init+0x688>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d036      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a4b      	ldr	r2, [pc, #300]	@ (8005698 <HAL_DMA_Init+0x68c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d031      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4a      	ldr	r2, [pc, #296]	@ (800569c <HAL_DMA_Init+0x690>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d02c      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a48      	ldr	r2, [pc, #288]	@ (80056a0 <HAL_DMA_Init+0x694>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d027      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a47      	ldr	r2, [pc, #284]	@ (80056a4 <HAL_DMA_Init+0x698>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a45      	ldr	r2, [pc, #276]	@ (80056a8 <HAL_DMA_Init+0x69c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01d      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a44      	ldr	r2, [pc, #272]	@ (80056ac <HAL_DMA_Init+0x6a0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a42      	ldr	r2, [pc, #264]	@ (80056b0 <HAL_DMA_Init+0x6a4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a41      	ldr	r2, [pc, #260]	@ (80056b4 <HAL_DMA_Init+0x6a8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a3f      	ldr	r2, [pc, #252]	@ (80056b8 <HAL_DMA_Init+0x6ac>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a3e      	ldr	r2, [pc, #248]	@ (80056bc <HAL_DMA_Init+0x6b0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_DMA_Init+0x5c6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3c      	ldr	r2, [pc, #240]	@ (80056c0 <HAL_DMA_Init+0x6b4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d101      	bne.n	80055d6 <HAL_DMA_Init+0x5ca>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <HAL_DMA_Init+0x5cc>
 80055d6:	2300      	movs	r3, #0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d032      	beq.n	8005642 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f002 fa5d 	bl	8007a9c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d102      	bne.n	80055f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005604:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_DMA_Init+0x624>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b08      	cmp	r3, #8
 8005614:	d80c      	bhi.n	8005630 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f002 fada 	bl	8007bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800562c:	605a      	str	r2, [r3, #4]
 800562e:	e008      	b.n	8005642 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	a7fdabf8 	.word	0xa7fdabf8
 8005660:	cccccccd 	.word	0xcccccccd
 8005664:	40020010 	.word	0x40020010
 8005668:	40020028 	.word	0x40020028
 800566c:	40020040 	.word	0x40020040
 8005670:	40020058 	.word	0x40020058
 8005674:	40020070 	.word	0x40020070
 8005678:	40020088 	.word	0x40020088
 800567c:	400200a0 	.word	0x400200a0
 8005680:	400200b8 	.word	0x400200b8
 8005684:	40020410 	.word	0x40020410
 8005688:	40020428 	.word	0x40020428
 800568c:	40020440 	.word	0x40020440
 8005690:	40020458 	.word	0x40020458
 8005694:	40020470 	.word	0x40020470
 8005698:	40020488 	.word	0x40020488
 800569c:	400204a0 	.word	0x400204a0
 80056a0:	400204b8 	.word	0x400204b8
 80056a4:	58025408 	.word	0x58025408
 80056a8:	5802541c 	.word	0x5802541c
 80056ac:	58025430 	.word	0x58025430
 80056b0:	58025444 	.word	0x58025444
 80056b4:	58025458 	.word	0x58025458
 80056b8:	5802546c 	.word	0x5802546c
 80056bc:	58025480 	.word	0x58025480
 80056c0:	58025494 	.word	0x58025494

080056c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e226      	b.n	8005b2e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_DMA_Start_IT+0x2a>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e21f      	b.n	8005b2e <HAL_DMA_Start_IT+0x46a>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	f040 820a 	bne.w	8005b18 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a68      	ldr	r2, [pc, #416]	@ (80058b8 <HAL_DMA_Start_IT+0x1f4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d04a      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a66      	ldr	r2, [pc, #408]	@ (80058bc <HAL_DMA_Start_IT+0x1f8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d045      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a65      	ldr	r2, [pc, #404]	@ (80058c0 <HAL_DMA_Start_IT+0x1fc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d040      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a63      	ldr	r2, [pc, #396]	@ (80058c4 <HAL_DMA_Start_IT+0x200>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d03b      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a62      	ldr	r2, [pc, #392]	@ (80058c8 <HAL_DMA_Start_IT+0x204>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d036      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a60      	ldr	r2, [pc, #384]	@ (80058cc <HAL_DMA_Start_IT+0x208>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a5f      	ldr	r2, [pc, #380]	@ (80058d0 <HAL_DMA_Start_IT+0x20c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d02c      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a5d      	ldr	r2, [pc, #372]	@ (80058d4 <HAL_DMA_Start_IT+0x210>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d027      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a5c      	ldr	r2, [pc, #368]	@ (80058d8 <HAL_DMA_Start_IT+0x214>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a5a      	ldr	r2, [pc, #360]	@ (80058dc <HAL_DMA_Start_IT+0x218>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01d      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a59      	ldr	r2, [pc, #356]	@ (80058e0 <HAL_DMA_Start_IT+0x21c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a57      	ldr	r2, [pc, #348]	@ (80058e4 <HAL_DMA_Start_IT+0x220>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a56      	ldr	r2, [pc, #344]	@ (80058e8 <HAL_DMA_Start_IT+0x224>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a54      	ldr	r2, [pc, #336]	@ (80058ec <HAL_DMA_Start_IT+0x228>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a53      	ldr	r2, [pc, #332]	@ (80058f0 <HAL_DMA_Start_IT+0x22c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_DMA_Start_IT+0xee>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a51      	ldr	r2, [pc, #324]	@ (80058f4 <HAL_DMA_Start_IT+0x230>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d108      	bne.n	80057c4 <HAL_DMA_Start_IT+0x100>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0201 	bic.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	e007      	b.n	80057d4 <HAL_DMA_Start_IT+0x110>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0201 	bic.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f001 fe84 	bl	80074e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a34      	ldr	r2, [pc, #208]	@ (80058b8 <HAL_DMA_Start_IT+0x1f4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04a      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a33      	ldr	r2, [pc, #204]	@ (80058bc <HAL_DMA_Start_IT+0x1f8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d045      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a31      	ldr	r2, [pc, #196]	@ (80058c0 <HAL_DMA_Start_IT+0x1fc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d040      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a30      	ldr	r2, [pc, #192]	@ (80058c4 <HAL_DMA_Start_IT+0x200>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d03b      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2e      	ldr	r2, [pc, #184]	@ (80058c8 <HAL_DMA_Start_IT+0x204>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d036      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2d      	ldr	r2, [pc, #180]	@ (80058cc <HAL_DMA_Start_IT+0x208>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d031      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2b      	ldr	r2, [pc, #172]	@ (80058d0 <HAL_DMA_Start_IT+0x20c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d02c      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2a      	ldr	r2, [pc, #168]	@ (80058d4 <HAL_DMA_Start_IT+0x210>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d027      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a28      	ldr	r2, [pc, #160]	@ (80058d8 <HAL_DMA_Start_IT+0x214>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d022      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a27      	ldr	r2, [pc, #156]	@ (80058dc <HAL_DMA_Start_IT+0x218>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d01d      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a25      	ldr	r2, [pc, #148]	@ (80058e0 <HAL_DMA_Start_IT+0x21c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a24      	ldr	r2, [pc, #144]	@ (80058e4 <HAL_DMA_Start_IT+0x220>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a22      	ldr	r2, [pc, #136]	@ (80058e8 <HAL_DMA_Start_IT+0x224>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a21      	ldr	r2, [pc, #132]	@ (80058ec <HAL_DMA_Start_IT+0x228>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1f      	ldr	r2, [pc, #124]	@ (80058f0 <HAL_DMA_Start_IT+0x22c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_DMA_Start_IT+0x1bc>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1e      	ldr	r2, [pc, #120]	@ (80058f4 <HAL_DMA_Start_IT+0x230>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d101      	bne.n	8005884 <HAL_DMA_Start_IT+0x1c0>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_DMA_Start_IT+0x1c2>
 8005884:	2300      	movs	r3, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d036      	beq.n	80058f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f023 021e 	bic.w	r2, r3, #30
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0216 	orr.w	r2, r2, #22
 800589c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d03e      	beq.n	8005924 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0208 	orr.w	r2, r2, #8
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e035      	b.n	8005924 <HAL_DMA_Start_IT+0x260>
 80058b8:	40020010 	.word	0x40020010
 80058bc:	40020028 	.word	0x40020028
 80058c0:	40020040 	.word	0x40020040
 80058c4:	40020058 	.word	0x40020058
 80058c8:	40020070 	.word	0x40020070
 80058cc:	40020088 	.word	0x40020088
 80058d0:	400200a0 	.word	0x400200a0
 80058d4:	400200b8 	.word	0x400200b8
 80058d8:	40020410 	.word	0x40020410
 80058dc:	40020428 	.word	0x40020428
 80058e0:	40020440 	.word	0x40020440
 80058e4:	40020458 	.word	0x40020458
 80058e8:	40020470 	.word	0x40020470
 80058ec:	40020488 	.word	0x40020488
 80058f0:	400204a0 	.word	0x400204a0
 80058f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f023 020e 	bic.w	r2, r3, #14
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 020a 	orr.w	r2, r2, #10
 800590a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0204 	orr.w	r2, r2, #4
 8005922:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a83      	ldr	r2, [pc, #524]	@ (8005b38 <HAL_DMA_Start_IT+0x474>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d072      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a82      	ldr	r2, [pc, #520]	@ (8005b3c <HAL_DMA_Start_IT+0x478>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d06d      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a80      	ldr	r2, [pc, #512]	@ (8005b40 <HAL_DMA_Start_IT+0x47c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d068      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a7f      	ldr	r2, [pc, #508]	@ (8005b44 <HAL_DMA_Start_IT+0x480>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d063      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a7d      	ldr	r2, [pc, #500]	@ (8005b48 <HAL_DMA_Start_IT+0x484>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d05e      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a7c      	ldr	r2, [pc, #496]	@ (8005b4c <HAL_DMA_Start_IT+0x488>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d059      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a7a      	ldr	r2, [pc, #488]	@ (8005b50 <HAL_DMA_Start_IT+0x48c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d054      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a79      	ldr	r2, [pc, #484]	@ (8005b54 <HAL_DMA_Start_IT+0x490>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d04f      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a77      	ldr	r2, [pc, #476]	@ (8005b58 <HAL_DMA_Start_IT+0x494>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d04a      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a76      	ldr	r2, [pc, #472]	@ (8005b5c <HAL_DMA_Start_IT+0x498>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d045      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a74      	ldr	r2, [pc, #464]	@ (8005b60 <HAL_DMA_Start_IT+0x49c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d040      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a73      	ldr	r2, [pc, #460]	@ (8005b64 <HAL_DMA_Start_IT+0x4a0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d03b      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a71      	ldr	r2, [pc, #452]	@ (8005b68 <HAL_DMA_Start_IT+0x4a4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d036      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a70      	ldr	r2, [pc, #448]	@ (8005b6c <HAL_DMA_Start_IT+0x4a8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d031      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005b70 <HAL_DMA_Start_IT+0x4ac>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d02c      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a6d      	ldr	r2, [pc, #436]	@ (8005b74 <HAL_DMA_Start_IT+0x4b0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d027      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6b      	ldr	r2, [pc, #428]	@ (8005b78 <HAL_DMA_Start_IT+0x4b4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d022      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6a      	ldr	r2, [pc, #424]	@ (8005b7c <HAL_DMA_Start_IT+0x4b8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d01d      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a68      	ldr	r2, [pc, #416]	@ (8005b80 <HAL_DMA_Start_IT+0x4bc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d018      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a67      	ldr	r2, [pc, #412]	@ (8005b84 <HAL_DMA_Start_IT+0x4c0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a65      	ldr	r2, [pc, #404]	@ (8005b88 <HAL_DMA_Start_IT+0x4c4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a64      	ldr	r2, [pc, #400]	@ (8005b8c <HAL_DMA_Start_IT+0x4c8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d009      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a62      	ldr	r2, [pc, #392]	@ (8005b90 <HAL_DMA_Start_IT+0x4cc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_DMA_Start_IT+0x350>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a61      	ldr	r2, [pc, #388]	@ (8005b94 <HAL_DMA_Start_IT+0x4d0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_DMA_Start_IT+0x354>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_DMA_Start_IT+0x356>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01a      	beq.n	8005a54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a37      	ldr	r2, [pc, #220]	@ (8005b38 <HAL_DMA_Start_IT+0x474>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d04a      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a36      	ldr	r2, [pc, #216]	@ (8005b3c <HAL_DMA_Start_IT+0x478>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d045      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a34      	ldr	r2, [pc, #208]	@ (8005b40 <HAL_DMA_Start_IT+0x47c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d040      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a33      	ldr	r2, [pc, #204]	@ (8005b44 <HAL_DMA_Start_IT+0x480>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d03b      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a31      	ldr	r2, [pc, #196]	@ (8005b48 <HAL_DMA_Start_IT+0x484>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d036      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a30      	ldr	r2, [pc, #192]	@ (8005b4c <HAL_DMA_Start_IT+0x488>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d031      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a2e      	ldr	r2, [pc, #184]	@ (8005b50 <HAL_DMA_Start_IT+0x48c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d02c      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005b54 <HAL_DMA_Start_IT+0x490>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d027      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b58 <HAL_DMA_Start_IT+0x494>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d022      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b5c <HAL_DMA_Start_IT+0x498>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d01d      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a28      	ldr	r2, [pc, #160]	@ (8005b60 <HAL_DMA_Start_IT+0x49c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d018      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a27      	ldr	r2, [pc, #156]	@ (8005b64 <HAL_DMA_Start_IT+0x4a0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d013      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a25      	ldr	r2, [pc, #148]	@ (8005b68 <HAL_DMA_Start_IT+0x4a4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00e      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a24      	ldr	r2, [pc, #144]	@ (8005b6c <HAL_DMA_Start_IT+0x4a8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d009      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a22      	ldr	r2, [pc, #136]	@ (8005b70 <HAL_DMA_Start_IT+0x4ac>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d004      	beq.n	8005af4 <HAL_DMA_Start_IT+0x430>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a21      	ldr	r2, [pc, #132]	@ (8005b74 <HAL_DMA_Start_IT+0x4b0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d108      	bne.n	8005b06 <HAL_DMA_Start_IT+0x442>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	e012      	b.n	8005b2c <HAL_DMA_Start_IT+0x468>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e009      	b.n	8005b2c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40020010 	.word	0x40020010
 8005b3c:	40020028 	.word	0x40020028
 8005b40:	40020040 	.word	0x40020040
 8005b44:	40020058 	.word	0x40020058
 8005b48:	40020070 	.word	0x40020070
 8005b4c:	40020088 	.word	0x40020088
 8005b50:	400200a0 	.word	0x400200a0
 8005b54:	400200b8 	.word	0x400200b8
 8005b58:	40020410 	.word	0x40020410
 8005b5c:	40020428 	.word	0x40020428
 8005b60:	40020440 	.word	0x40020440
 8005b64:	40020458 	.word	0x40020458
 8005b68:	40020470 	.word	0x40020470
 8005b6c:	40020488 	.word	0x40020488
 8005b70:	400204a0 	.word	0x400204a0
 8005b74:	400204b8 	.word	0x400204b8
 8005b78:	58025408 	.word	0x58025408
 8005b7c:	5802541c 	.word	0x5802541c
 8005b80:	58025430 	.word	0x58025430
 8005b84:	58025444 	.word	0x58025444
 8005b88:	58025458 	.word	0x58025458
 8005b8c:	5802546c 	.word	0x5802546c
 8005b90:	58025480 	.word	0x58025480
 8005b94:	58025494 	.word	0x58025494

08005b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005ba0:	f7fd fdbe 	bl	8003720 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e2dc      	b.n	800616a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d008      	beq.n	8005bce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2280      	movs	r2, #128	@ 0x80
 8005bc0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e2cd      	b.n	800616a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a76      	ldr	r2, [pc, #472]	@ (8005dac <HAL_DMA_Abort+0x214>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d04a      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a74      	ldr	r2, [pc, #464]	@ (8005db0 <HAL_DMA_Abort+0x218>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d045      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a73      	ldr	r2, [pc, #460]	@ (8005db4 <HAL_DMA_Abort+0x21c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d040      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a71      	ldr	r2, [pc, #452]	@ (8005db8 <HAL_DMA_Abort+0x220>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d03b      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a70      	ldr	r2, [pc, #448]	@ (8005dbc <HAL_DMA_Abort+0x224>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d036      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a6e      	ldr	r2, [pc, #440]	@ (8005dc0 <HAL_DMA_Abort+0x228>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d031      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8005dc4 <HAL_DMA_Abort+0x22c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d02c      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a6b      	ldr	r2, [pc, #428]	@ (8005dc8 <HAL_DMA_Abort+0x230>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d027      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a6a      	ldr	r2, [pc, #424]	@ (8005dcc <HAL_DMA_Abort+0x234>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a68      	ldr	r2, [pc, #416]	@ (8005dd0 <HAL_DMA_Abort+0x238>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01d      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a67      	ldr	r2, [pc, #412]	@ (8005dd4 <HAL_DMA_Abort+0x23c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a65      	ldr	r2, [pc, #404]	@ (8005dd8 <HAL_DMA_Abort+0x240>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a64      	ldr	r2, [pc, #400]	@ (8005ddc <HAL_DMA_Abort+0x244>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a62      	ldr	r2, [pc, #392]	@ (8005de0 <HAL_DMA_Abort+0x248>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a61      	ldr	r2, [pc, #388]	@ (8005de4 <HAL_DMA_Abort+0x24c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_DMA_Abort+0xd6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5f      	ldr	r2, [pc, #380]	@ (8005de8 <HAL_DMA_Abort+0x250>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <HAL_DMA_Abort+0xda>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <HAL_DMA_Abort+0xdc>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d013      	beq.n	8005ca0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 021e 	bic.w	r2, r2, #30
 8005c86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695a      	ldr	r2, [r3, #20]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e00a      	b.n	8005cb6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 020e 	bic.w	r2, r2, #14
 8005cae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a3c      	ldr	r2, [pc, #240]	@ (8005dac <HAL_DMA_Abort+0x214>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d072      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8005db0 <HAL_DMA_Abort+0x218>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d06d      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a39      	ldr	r2, [pc, #228]	@ (8005db4 <HAL_DMA_Abort+0x21c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d068      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a37      	ldr	r2, [pc, #220]	@ (8005db8 <HAL_DMA_Abort+0x220>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d063      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a36      	ldr	r2, [pc, #216]	@ (8005dbc <HAL_DMA_Abort+0x224>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d05e      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a34      	ldr	r2, [pc, #208]	@ (8005dc0 <HAL_DMA_Abort+0x228>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d059      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a33      	ldr	r2, [pc, #204]	@ (8005dc4 <HAL_DMA_Abort+0x22c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d054      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a31      	ldr	r2, [pc, #196]	@ (8005dc8 <HAL_DMA_Abort+0x230>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d04f      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a30      	ldr	r2, [pc, #192]	@ (8005dcc <HAL_DMA_Abort+0x234>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d04a      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2e      	ldr	r2, [pc, #184]	@ (8005dd0 <HAL_DMA_Abort+0x238>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d045      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd4 <HAL_DMA_Abort+0x23c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d040      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd8 <HAL_DMA_Abort+0x240>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d03b      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2a      	ldr	r2, [pc, #168]	@ (8005ddc <HAL_DMA_Abort+0x244>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d036      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a28      	ldr	r2, [pc, #160]	@ (8005de0 <HAL_DMA_Abort+0x248>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d031      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a27      	ldr	r2, [pc, #156]	@ (8005de4 <HAL_DMA_Abort+0x24c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d02c      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a25      	ldr	r2, [pc, #148]	@ (8005de8 <HAL_DMA_Abort+0x250>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d027      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a24      	ldr	r2, [pc, #144]	@ (8005dec <HAL_DMA_Abort+0x254>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d022      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a22      	ldr	r2, [pc, #136]	@ (8005df0 <HAL_DMA_Abort+0x258>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01d      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a21      	ldr	r2, [pc, #132]	@ (8005df4 <HAL_DMA_Abort+0x25c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d018      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1f      	ldr	r2, [pc, #124]	@ (8005df8 <HAL_DMA_Abort+0x260>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1e      	ldr	r2, [pc, #120]	@ (8005dfc <HAL_DMA_Abort+0x264>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e00 <HAL_DMA_Abort+0x268>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <HAL_DMA_Abort+0x26c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_DMA_Abort+0x20e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a19      	ldr	r2, [pc, #100]	@ (8005e08 <HAL_DMA_Abort+0x270>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d132      	bne.n	8005e0c <HAL_DMA_Abort+0x274>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e031      	b.n	8005e0e <HAL_DMA_Abort+0x276>
 8005daa:	bf00      	nop
 8005dac:	40020010 	.word	0x40020010
 8005db0:	40020028 	.word	0x40020028
 8005db4:	40020040 	.word	0x40020040
 8005db8:	40020058 	.word	0x40020058
 8005dbc:	40020070 	.word	0x40020070
 8005dc0:	40020088 	.word	0x40020088
 8005dc4:	400200a0 	.word	0x400200a0
 8005dc8:	400200b8 	.word	0x400200b8
 8005dcc:	40020410 	.word	0x40020410
 8005dd0:	40020428 	.word	0x40020428
 8005dd4:	40020440 	.word	0x40020440
 8005dd8:	40020458 	.word	0x40020458
 8005ddc:	40020470 	.word	0x40020470
 8005de0:	40020488 	.word	0x40020488
 8005de4:	400204a0 	.word	0x400204a0
 8005de8:	400204b8 	.word	0x400204b8
 8005dec:	58025408 	.word	0x58025408
 8005df0:	5802541c 	.word	0x5802541c
 8005df4:	58025430 	.word	0x58025430
 8005df8:	58025444 	.word	0x58025444
 8005dfc:	58025458 	.word	0x58025458
 8005e00:	5802546c 	.word	0x5802546c
 8005e04:	58025480 	.word	0x58025480
 8005e08:	58025494 	.word	0x58025494
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a6d      	ldr	r2, [pc, #436]	@ (8005fdc <HAL_DMA_Abort+0x444>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d04a      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a6b      	ldr	r2, [pc, #428]	@ (8005fe0 <HAL_DMA_Abort+0x448>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d045      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a6a      	ldr	r2, [pc, #424]	@ (8005fe4 <HAL_DMA_Abort+0x44c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d040      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a68      	ldr	r2, [pc, #416]	@ (8005fe8 <HAL_DMA_Abort+0x450>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d03b      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a67      	ldr	r2, [pc, #412]	@ (8005fec <HAL_DMA_Abort+0x454>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d036      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a65      	ldr	r2, [pc, #404]	@ (8005ff0 <HAL_DMA_Abort+0x458>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d031      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a64      	ldr	r2, [pc, #400]	@ (8005ff4 <HAL_DMA_Abort+0x45c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d02c      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a62      	ldr	r2, [pc, #392]	@ (8005ff8 <HAL_DMA_Abort+0x460>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d027      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a61      	ldr	r2, [pc, #388]	@ (8005ffc <HAL_DMA_Abort+0x464>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a5f      	ldr	r2, [pc, #380]	@ (8006000 <HAL_DMA_Abort+0x468>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01d      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8006004 <HAL_DMA_Abort+0x46c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a5c      	ldr	r2, [pc, #368]	@ (8006008 <HAL_DMA_Abort+0x470>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800600c <HAL_DMA_Abort+0x474>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a59      	ldr	r2, [pc, #356]	@ (8006010 <HAL_DMA_Abort+0x478>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a58      	ldr	r2, [pc, #352]	@ (8006014 <HAL_DMA_Abort+0x47c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_DMA_Abort+0x32a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a56      	ldr	r2, [pc, #344]	@ (8006018 <HAL_DMA_Abort+0x480>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d108      	bne.n	8005ed4 <HAL_DMA_Abort+0x33c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e007      	b.n	8005ee4 <HAL_DMA_Abort+0x34c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ee4:	e013      	b.n	8005f0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ee6:	f7fd fc1b 	bl	8003720 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	d90c      	bls.n	8005f0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2203      	movs	r2, #3
 8005efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e12d      	b.n	800616a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e5      	bne.n	8005ee6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8005fdc <HAL_DMA_Abort+0x444>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d04a      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe0 <HAL_DMA_Abort+0x448>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d045      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe4 <HAL_DMA_Abort+0x44c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d040      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe8 <HAL_DMA_Abort+0x450>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d03b      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a29      	ldr	r2, [pc, #164]	@ (8005fec <HAL_DMA_Abort+0x454>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d036      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a27      	ldr	r2, [pc, #156]	@ (8005ff0 <HAL_DMA_Abort+0x458>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d031      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a26      	ldr	r2, [pc, #152]	@ (8005ff4 <HAL_DMA_Abort+0x45c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d02c      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a24      	ldr	r2, [pc, #144]	@ (8005ff8 <HAL_DMA_Abort+0x460>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d027      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a23      	ldr	r2, [pc, #140]	@ (8005ffc <HAL_DMA_Abort+0x464>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d022      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a21      	ldr	r2, [pc, #132]	@ (8006000 <HAL_DMA_Abort+0x468>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d01d      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a20      	ldr	r2, [pc, #128]	@ (8006004 <HAL_DMA_Abort+0x46c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d018      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006008 <HAL_DMA_Abort+0x470>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d013      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1d      	ldr	r2, [pc, #116]	@ (800600c <HAL_DMA_Abort+0x474>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00e      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8006010 <HAL_DMA_Abort+0x478>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d009      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1a      	ldr	r2, [pc, #104]	@ (8006014 <HAL_DMA_Abort+0x47c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d004      	beq.n	8005fba <HAL_DMA_Abort+0x422>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a18      	ldr	r2, [pc, #96]	@ (8006018 <HAL_DMA_Abort+0x480>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <HAL_DMA_Abort+0x426>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <HAL_DMA_Abort+0x428>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d02b      	beq.n	800601c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	223f      	movs	r2, #63	@ 0x3f
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	609a      	str	r2, [r3, #8]
 8005fda:	e02a      	b.n	8006032 <HAL_DMA_Abort+0x49a>
 8005fdc:	40020010 	.word	0x40020010
 8005fe0:	40020028 	.word	0x40020028
 8005fe4:	40020040 	.word	0x40020040
 8005fe8:	40020058 	.word	0x40020058
 8005fec:	40020070 	.word	0x40020070
 8005ff0:	40020088 	.word	0x40020088
 8005ff4:	400200a0 	.word	0x400200a0
 8005ff8:	400200b8 	.word	0x400200b8
 8005ffc:	40020410 	.word	0x40020410
 8006000:	40020428 	.word	0x40020428
 8006004:	40020440 	.word	0x40020440
 8006008:	40020458 	.word	0x40020458
 800600c:	40020470 	.word	0x40020470
 8006010:	40020488 	.word	0x40020488
 8006014:	400204a0 	.word	0x400204a0
 8006018:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006020:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2201      	movs	r2, #1
 800602c:	409a      	lsls	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a4f      	ldr	r2, [pc, #316]	@ (8006174 <HAL_DMA_Abort+0x5dc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d072      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a4d      	ldr	r2, [pc, #308]	@ (8006178 <HAL_DMA_Abort+0x5e0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d06d      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a4c      	ldr	r2, [pc, #304]	@ (800617c <HAL_DMA_Abort+0x5e4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d068      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a4a      	ldr	r2, [pc, #296]	@ (8006180 <HAL_DMA_Abort+0x5e8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d063      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a49      	ldr	r2, [pc, #292]	@ (8006184 <HAL_DMA_Abort+0x5ec>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d05e      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a47      	ldr	r2, [pc, #284]	@ (8006188 <HAL_DMA_Abort+0x5f0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d059      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a46      	ldr	r2, [pc, #280]	@ (800618c <HAL_DMA_Abort+0x5f4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d054      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a44      	ldr	r2, [pc, #272]	@ (8006190 <HAL_DMA_Abort+0x5f8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d04f      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a43      	ldr	r2, [pc, #268]	@ (8006194 <HAL_DMA_Abort+0x5fc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d04a      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a41      	ldr	r2, [pc, #260]	@ (8006198 <HAL_DMA_Abort+0x600>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d045      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a40      	ldr	r2, [pc, #256]	@ (800619c <HAL_DMA_Abort+0x604>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d040      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a3e      	ldr	r2, [pc, #248]	@ (80061a0 <HAL_DMA_Abort+0x608>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d03b      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a3d      	ldr	r2, [pc, #244]	@ (80061a4 <HAL_DMA_Abort+0x60c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d036      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a3b      	ldr	r2, [pc, #236]	@ (80061a8 <HAL_DMA_Abort+0x610>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d031      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3a      	ldr	r2, [pc, #232]	@ (80061ac <HAL_DMA_Abort+0x614>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d02c      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a38      	ldr	r2, [pc, #224]	@ (80061b0 <HAL_DMA_Abort+0x618>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d027      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a37      	ldr	r2, [pc, #220]	@ (80061b4 <HAL_DMA_Abort+0x61c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d022      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a35      	ldr	r2, [pc, #212]	@ (80061b8 <HAL_DMA_Abort+0x620>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01d      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a34      	ldr	r2, [pc, #208]	@ (80061bc <HAL_DMA_Abort+0x624>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a32      	ldr	r2, [pc, #200]	@ (80061c0 <HAL_DMA_Abort+0x628>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a31      	ldr	r2, [pc, #196]	@ (80061c4 <HAL_DMA_Abort+0x62c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2f      	ldr	r2, [pc, #188]	@ (80061c8 <HAL_DMA_Abort+0x630>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2e      	ldr	r2, [pc, #184]	@ (80061cc <HAL_DMA_Abort+0x634>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_DMA_Abort+0x58a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2c      	ldr	r2, [pc, #176]	@ (80061d0 <HAL_DMA_Abort+0x638>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d101      	bne.n	8006126 <HAL_DMA_Abort+0x58e>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <HAL_DMA_Abort+0x590>
 8006126:	2300      	movs	r3, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006134:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800614c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006156:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40020010 	.word	0x40020010
 8006178:	40020028 	.word	0x40020028
 800617c:	40020040 	.word	0x40020040
 8006180:	40020058 	.word	0x40020058
 8006184:	40020070 	.word	0x40020070
 8006188:	40020088 	.word	0x40020088
 800618c:	400200a0 	.word	0x400200a0
 8006190:	400200b8 	.word	0x400200b8
 8006194:	40020410 	.word	0x40020410
 8006198:	40020428 	.word	0x40020428
 800619c:	40020440 	.word	0x40020440
 80061a0:	40020458 	.word	0x40020458
 80061a4:	40020470 	.word	0x40020470
 80061a8:	40020488 	.word	0x40020488
 80061ac:	400204a0 	.word	0x400204a0
 80061b0:	400204b8 	.word	0x400204b8
 80061b4:	58025408 	.word	0x58025408
 80061b8:	5802541c 	.word	0x5802541c
 80061bc:	58025430 	.word	0x58025430
 80061c0:	58025444 	.word	0x58025444
 80061c4:	58025458 	.word	0x58025458
 80061c8:	5802546c 	.word	0x5802546c
 80061cc:	58025480 	.word	0x58025480
 80061d0:	58025494 	.word	0x58025494

080061d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e237      	b.n	8006656 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d004      	beq.n	80061fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2280      	movs	r2, #128	@ 0x80
 80061f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e22c      	b.n	8006656 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a5c      	ldr	r2, [pc, #368]	@ (8006374 <HAL_DMA_Abort_IT+0x1a0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d04a      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a5b      	ldr	r2, [pc, #364]	@ (8006378 <HAL_DMA_Abort_IT+0x1a4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d045      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a59      	ldr	r2, [pc, #356]	@ (800637c <HAL_DMA_Abort_IT+0x1a8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d040      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a58      	ldr	r2, [pc, #352]	@ (8006380 <HAL_DMA_Abort_IT+0x1ac>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d03b      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a56      	ldr	r2, [pc, #344]	@ (8006384 <HAL_DMA_Abort_IT+0x1b0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d036      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a55      	ldr	r2, [pc, #340]	@ (8006388 <HAL_DMA_Abort_IT+0x1b4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d031      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a53      	ldr	r2, [pc, #332]	@ (800638c <HAL_DMA_Abort_IT+0x1b8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d02c      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a52      	ldr	r2, [pc, #328]	@ (8006390 <HAL_DMA_Abort_IT+0x1bc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d027      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a50      	ldr	r2, [pc, #320]	@ (8006394 <HAL_DMA_Abort_IT+0x1c0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d022      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a4f      	ldr	r2, [pc, #316]	@ (8006398 <HAL_DMA_Abort_IT+0x1c4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d01d      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a4d      	ldr	r2, [pc, #308]	@ (800639c <HAL_DMA_Abort_IT+0x1c8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d018      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a4c      	ldr	r2, [pc, #304]	@ (80063a0 <HAL_DMA_Abort_IT+0x1cc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a4a      	ldr	r2, [pc, #296]	@ (80063a4 <HAL_DMA_Abort_IT+0x1d0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00e      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a49      	ldr	r2, [pc, #292]	@ (80063a8 <HAL_DMA_Abort_IT+0x1d4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d009      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a47      	ldr	r2, [pc, #284]	@ (80063ac <HAL_DMA_Abort_IT+0x1d8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_DMA_Abort_IT+0xc8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a46      	ldr	r2, [pc, #280]	@ (80063b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d101      	bne.n	80062a0 <HAL_DMA_Abort_IT+0xcc>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <HAL_DMA_Abort_IT+0xce>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8086 	beq.w	80063b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2204      	movs	r2, #4
 80062ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006374 <HAL_DMA_Abort_IT+0x1a0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d04a      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2e      	ldr	r2, [pc, #184]	@ (8006378 <HAL_DMA_Abort_IT+0x1a4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d045      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a2c      	ldr	r2, [pc, #176]	@ (800637c <HAL_DMA_Abort_IT+0x1a8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d040      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006380 <HAL_DMA_Abort_IT+0x1ac>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d03b      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a29      	ldr	r2, [pc, #164]	@ (8006384 <HAL_DMA_Abort_IT+0x1b0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d036      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a28      	ldr	r2, [pc, #160]	@ (8006388 <HAL_DMA_Abort_IT+0x1b4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d031      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a26      	ldr	r2, [pc, #152]	@ (800638c <HAL_DMA_Abort_IT+0x1b8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d02c      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a25      	ldr	r2, [pc, #148]	@ (8006390 <HAL_DMA_Abort_IT+0x1bc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d027      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a23      	ldr	r2, [pc, #140]	@ (8006394 <HAL_DMA_Abort_IT+0x1c0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d022      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a22      	ldr	r2, [pc, #136]	@ (8006398 <HAL_DMA_Abort_IT+0x1c4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d01d      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a20      	ldr	r2, [pc, #128]	@ (800639c <HAL_DMA_Abort_IT+0x1c8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d018      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1f      	ldr	r2, [pc, #124]	@ (80063a0 <HAL_DMA_Abort_IT+0x1cc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1d      	ldr	r2, [pc, #116]	@ (80063a4 <HAL_DMA_Abort_IT+0x1d0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1c      	ldr	r2, [pc, #112]	@ (80063a8 <HAL_DMA_Abort_IT+0x1d4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d009      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1a      	ldr	r2, [pc, #104]	@ (80063ac <HAL_DMA_Abort_IT+0x1d8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_DMA_Abort_IT+0x17c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a19      	ldr	r2, [pc, #100]	@ (80063b0 <HAL_DMA_Abort_IT+0x1dc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d108      	bne.n	8006362 <HAL_DMA_Abort_IT+0x18e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	e178      	b.n	8006654 <HAL_DMA_Abort_IT+0x480>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e16f      	b.n	8006654 <HAL_DMA_Abort_IT+0x480>
 8006374:	40020010 	.word	0x40020010
 8006378:	40020028 	.word	0x40020028
 800637c:	40020040 	.word	0x40020040
 8006380:	40020058 	.word	0x40020058
 8006384:	40020070 	.word	0x40020070
 8006388:	40020088 	.word	0x40020088
 800638c:	400200a0 	.word	0x400200a0
 8006390:	400200b8 	.word	0x400200b8
 8006394:	40020410 	.word	0x40020410
 8006398:	40020428 	.word	0x40020428
 800639c:	40020440 	.word	0x40020440
 80063a0:	40020458 	.word	0x40020458
 80063a4:	40020470 	.word	0x40020470
 80063a8:	40020488 	.word	0x40020488
 80063ac:	400204a0 	.word	0x400204a0
 80063b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 020e 	bic.w	r2, r2, #14
 80063c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a6c      	ldr	r2, [pc, #432]	@ (800657c <HAL_DMA_Abort_IT+0x3a8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d04a      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a6b      	ldr	r2, [pc, #428]	@ (8006580 <HAL_DMA_Abort_IT+0x3ac>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d045      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a69      	ldr	r2, [pc, #420]	@ (8006584 <HAL_DMA_Abort_IT+0x3b0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d040      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a68      	ldr	r2, [pc, #416]	@ (8006588 <HAL_DMA_Abort_IT+0x3b4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d03b      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a66      	ldr	r2, [pc, #408]	@ (800658c <HAL_DMA_Abort_IT+0x3b8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d036      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a65      	ldr	r2, [pc, #404]	@ (8006590 <HAL_DMA_Abort_IT+0x3bc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d031      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a63      	ldr	r2, [pc, #396]	@ (8006594 <HAL_DMA_Abort_IT+0x3c0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d02c      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a62      	ldr	r2, [pc, #392]	@ (8006598 <HAL_DMA_Abort_IT+0x3c4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d027      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a60      	ldr	r2, [pc, #384]	@ (800659c <HAL_DMA_Abort_IT+0x3c8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d022      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a5f      	ldr	r2, [pc, #380]	@ (80065a0 <HAL_DMA_Abort_IT+0x3cc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d01d      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a5d      	ldr	r2, [pc, #372]	@ (80065a4 <HAL_DMA_Abort_IT+0x3d0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d018      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a5c      	ldr	r2, [pc, #368]	@ (80065a8 <HAL_DMA_Abort_IT+0x3d4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d013      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a5a      	ldr	r2, [pc, #360]	@ (80065ac <HAL_DMA_Abort_IT+0x3d8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00e      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a59      	ldr	r2, [pc, #356]	@ (80065b0 <HAL_DMA_Abort_IT+0x3dc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d009      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a57      	ldr	r2, [pc, #348]	@ (80065b4 <HAL_DMA_Abort_IT+0x3e0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <HAL_DMA_Abort_IT+0x290>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a56      	ldr	r2, [pc, #344]	@ (80065b8 <HAL_DMA_Abort_IT+0x3e4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d108      	bne.n	8006476 <HAL_DMA_Abort_IT+0x2a2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	e007      	b.n	8006486 <HAL_DMA_Abort_IT+0x2b2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0201 	bic.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a3c      	ldr	r2, [pc, #240]	@ (800657c <HAL_DMA_Abort_IT+0x3a8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d072      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a3a      	ldr	r2, [pc, #232]	@ (8006580 <HAL_DMA_Abort_IT+0x3ac>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d06d      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a39      	ldr	r2, [pc, #228]	@ (8006584 <HAL_DMA_Abort_IT+0x3b0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d068      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a37      	ldr	r2, [pc, #220]	@ (8006588 <HAL_DMA_Abort_IT+0x3b4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d063      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a36      	ldr	r2, [pc, #216]	@ (800658c <HAL_DMA_Abort_IT+0x3b8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d05e      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a34      	ldr	r2, [pc, #208]	@ (8006590 <HAL_DMA_Abort_IT+0x3bc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d059      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a33      	ldr	r2, [pc, #204]	@ (8006594 <HAL_DMA_Abort_IT+0x3c0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d054      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a31      	ldr	r2, [pc, #196]	@ (8006598 <HAL_DMA_Abort_IT+0x3c4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d04f      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a30      	ldr	r2, [pc, #192]	@ (800659c <HAL_DMA_Abort_IT+0x3c8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d04a      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2e      	ldr	r2, [pc, #184]	@ (80065a0 <HAL_DMA_Abort_IT+0x3cc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d045      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2d      	ldr	r2, [pc, #180]	@ (80065a4 <HAL_DMA_Abort_IT+0x3d0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d040      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2b      	ldr	r2, [pc, #172]	@ (80065a8 <HAL_DMA_Abort_IT+0x3d4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d03b      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a2a      	ldr	r2, [pc, #168]	@ (80065ac <HAL_DMA_Abort_IT+0x3d8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d036      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a28      	ldr	r2, [pc, #160]	@ (80065b0 <HAL_DMA_Abort_IT+0x3dc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d031      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a27      	ldr	r2, [pc, #156]	@ (80065b4 <HAL_DMA_Abort_IT+0x3e0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d02c      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a25      	ldr	r2, [pc, #148]	@ (80065b8 <HAL_DMA_Abort_IT+0x3e4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d027      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a24      	ldr	r2, [pc, #144]	@ (80065bc <HAL_DMA_Abort_IT+0x3e8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d022      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a22      	ldr	r2, [pc, #136]	@ (80065c0 <HAL_DMA_Abort_IT+0x3ec>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01d      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a21      	ldr	r2, [pc, #132]	@ (80065c4 <HAL_DMA_Abort_IT+0x3f0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d018      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1f      	ldr	r2, [pc, #124]	@ (80065c8 <HAL_DMA_Abort_IT+0x3f4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1e      	ldr	r2, [pc, #120]	@ (80065cc <HAL_DMA_Abort_IT+0x3f8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00e      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1c      	ldr	r2, [pc, #112]	@ (80065d0 <HAL_DMA_Abort_IT+0x3fc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1b      	ldr	r2, [pc, #108]	@ (80065d4 <HAL_DMA_Abort_IT+0x400>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_DMA_Abort_IT+0x3a2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <HAL_DMA_Abort_IT+0x404>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d132      	bne.n	80065dc <HAL_DMA_Abort_IT+0x408>
 8006576:	2301      	movs	r3, #1
 8006578:	e031      	b.n	80065de <HAL_DMA_Abort_IT+0x40a>
 800657a:	bf00      	nop
 800657c:	40020010 	.word	0x40020010
 8006580:	40020028 	.word	0x40020028
 8006584:	40020040 	.word	0x40020040
 8006588:	40020058 	.word	0x40020058
 800658c:	40020070 	.word	0x40020070
 8006590:	40020088 	.word	0x40020088
 8006594:	400200a0 	.word	0x400200a0
 8006598:	400200b8 	.word	0x400200b8
 800659c:	40020410 	.word	0x40020410
 80065a0:	40020428 	.word	0x40020428
 80065a4:	40020440 	.word	0x40020440
 80065a8:	40020458 	.word	0x40020458
 80065ac:	40020470 	.word	0x40020470
 80065b0:	40020488 	.word	0x40020488
 80065b4:	400204a0 	.word	0x400204a0
 80065b8:	400204b8 	.word	0x400204b8
 80065bc:	58025408 	.word	0x58025408
 80065c0:	5802541c 	.word	0x5802541c
 80065c4:	58025430 	.word	0x58025430
 80065c8:	58025444 	.word	0x58025444
 80065cc:	58025458 	.word	0x58025458
 80065d0:	5802546c 	.word	0x5802546c
 80065d4:	58025480 	.word	0x58025480
 80065d8:	58025494 	.word	0x58025494
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d028      	beq.n	8006634 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2201      	movs	r2, #1
 8006602:	409a      	lsls	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006610:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00c      	beq.n	8006634 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006628:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006632:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop

08006660 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	@ 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800666c:	4b67      	ldr	r3, [pc, #412]	@ (800680c <HAL_DMA_IRQHandler+0x1ac>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a67      	ldr	r2, [pc, #412]	@ (8006810 <HAL_DMA_IRQHandler+0x1b0>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	0a9b      	lsrs	r3, r3, #10
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006684:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a5f      	ldr	r2, [pc, #380]	@ (8006814 <HAL_DMA_IRQHandler+0x1b4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d04a      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a5d      	ldr	r2, [pc, #372]	@ (8006818 <HAL_DMA_IRQHandler+0x1b8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d045      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a5c      	ldr	r2, [pc, #368]	@ (800681c <HAL_DMA_IRQHandler+0x1bc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d040      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a5a      	ldr	r2, [pc, #360]	@ (8006820 <HAL_DMA_IRQHandler+0x1c0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d03b      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a59      	ldr	r2, [pc, #356]	@ (8006824 <HAL_DMA_IRQHandler+0x1c4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d036      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a57      	ldr	r2, [pc, #348]	@ (8006828 <HAL_DMA_IRQHandler+0x1c8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d031      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a56      	ldr	r2, [pc, #344]	@ (800682c <HAL_DMA_IRQHandler+0x1cc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d02c      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a54      	ldr	r2, [pc, #336]	@ (8006830 <HAL_DMA_IRQHandler+0x1d0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d027      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a53      	ldr	r2, [pc, #332]	@ (8006834 <HAL_DMA_IRQHandler+0x1d4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a51      	ldr	r2, [pc, #324]	@ (8006838 <HAL_DMA_IRQHandler+0x1d8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01d      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a50      	ldr	r2, [pc, #320]	@ (800683c <HAL_DMA_IRQHandler+0x1dc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d018      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a4e      	ldr	r2, [pc, #312]	@ (8006840 <HAL_DMA_IRQHandler+0x1e0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a4d      	ldr	r2, [pc, #308]	@ (8006844 <HAL_DMA_IRQHandler+0x1e4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a4b      	ldr	r2, [pc, #300]	@ (8006848 <HAL_DMA_IRQHandler+0x1e8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a4a      	ldr	r2, [pc, #296]	@ (800684c <HAL_DMA_IRQHandler+0x1ec>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_DMA_IRQHandler+0xd2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a48      	ldr	r2, [pc, #288]	@ (8006850 <HAL_DMA_IRQHandler+0x1f0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d101      	bne.n	8006736 <HAL_DMA_IRQHandler+0xd6>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <HAL_DMA_IRQHandler+0xd8>
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 842b 	beq.w	8006f94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2208      	movs	r2, #8
 8006748:	409a      	lsls	r2, r3
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 80a2 	beq.w	8006898 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a2e      	ldr	r2, [pc, #184]	@ (8006814 <HAL_DMA_IRQHandler+0x1b4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d04a      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a2d      	ldr	r2, [pc, #180]	@ (8006818 <HAL_DMA_IRQHandler+0x1b8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d045      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a2b      	ldr	r2, [pc, #172]	@ (800681c <HAL_DMA_IRQHandler+0x1bc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d040      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a2a      	ldr	r2, [pc, #168]	@ (8006820 <HAL_DMA_IRQHandler+0x1c0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d03b      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a28      	ldr	r2, [pc, #160]	@ (8006824 <HAL_DMA_IRQHandler+0x1c4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d036      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a27      	ldr	r2, [pc, #156]	@ (8006828 <HAL_DMA_IRQHandler+0x1c8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d031      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a25      	ldr	r2, [pc, #148]	@ (800682c <HAL_DMA_IRQHandler+0x1cc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d02c      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a24      	ldr	r2, [pc, #144]	@ (8006830 <HAL_DMA_IRQHandler+0x1d0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d027      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a22      	ldr	r2, [pc, #136]	@ (8006834 <HAL_DMA_IRQHandler+0x1d4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d022      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a21      	ldr	r2, [pc, #132]	@ (8006838 <HAL_DMA_IRQHandler+0x1d8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d01d      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <HAL_DMA_IRQHandler+0x1dc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d018      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006840 <HAL_DMA_IRQHandler+0x1e0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d013      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006844 <HAL_DMA_IRQHandler+0x1e4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00e      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <HAL_DMA_IRQHandler+0x1e8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d009      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a19      	ldr	r2, [pc, #100]	@ (800684c <HAL_DMA_IRQHandler+0x1ec>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x194>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a18      	ldr	r2, [pc, #96]	@ (8006850 <HAL_DMA_IRQHandler+0x1f0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d12f      	bne.n	8006854 <HAL_DMA_IRQHandler+0x1f4>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bf14      	ite	ne
 8006802:	2301      	movne	r3, #1
 8006804:	2300      	moveq	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	e02e      	b.n	8006868 <HAL_DMA_IRQHandler+0x208>
 800680a:	bf00      	nop
 800680c:	24000240 	.word	0x24000240
 8006810:	1b4e81b5 	.word	0x1b4e81b5
 8006814:	40020010 	.word	0x40020010
 8006818:	40020028 	.word	0x40020028
 800681c:	40020040 	.word	0x40020040
 8006820:	40020058 	.word	0x40020058
 8006824:	40020070 	.word	0x40020070
 8006828:	40020088 	.word	0x40020088
 800682c:	400200a0 	.word	0x400200a0
 8006830:	400200b8 	.word	0x400200b8
 8006834:	40020410 	.word	0x40020410
 8006838:	40020428 	.word	0x40020428
 800683c:	40020440 	.word	0x40020440
 8006840:	40020458 	.word	0x40020458
 8006844:	40020470 	.word	0x40020470
 8006848:	40020488 	.word	0x40020488
 800684c:	400204a0 	.word	0x400204a0
 8006850:	400204b8 	.word	0x400204b8
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	bf14      	ite	ne
 8006862:	2301      	movne	r3, #1
 8006864:	2300      	moveq	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d015      	beq.n	8006898 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0204 	bic.w	r2, r2, #4
 800687a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	2208      	movs	r2, #8
 8006886:	409a      	lsls	r2, r3
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006890:	f043 0201 	orr.w	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	fa22 f303 	lsr.w	r3, r2, r3
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d06e      	beq.n	800698c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a69      	ldr	r2, [pc, #420]	@ (8006a58 <HAL_DMA_IRQHandler+0x3f8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d04a      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a67      	ldr	r2, [pc, #412]	@ (8006a5c <HAL_DMA_IRQHandler+0x3fc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d045      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a66      	ldr	r2, [pc, #408]	@ (8006a60 <HAL_DMA_IRQHandler+0x400>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d040      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a64      	ldr	r2, [pc, #400]	@ (8006a64 <HAL_DMA_IRQHandler+0x404>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d03b      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a63      	ldr	r2, [pc, #396]	@ (8006a68 <HAL_DMA_IRQHandler+0x408>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d036      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a61      	ldr	r2, [pc, #388]	@ (8006a6c <HAL_DMA_IRQHandler+0x40c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d031      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a60      	ldr	r2, [pc, #384]	@ (8006a70 <HAL_DMA_IRQHandler+0x410>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d02c      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a5e      	ldr	r2, [pc, #376]	@ (8006a74 <HAL_DMA_IRQHandler+0x414>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d027      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a5d      	ldr	r2, [pc, #372]	@ (8006a78 <HAL_DMA_IRQHandler+0x418>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d022      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a5b      	ldr	r2, [pc, #364]	@ (8006a7c <HAL_DMA_IRQHandler+0x41c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01d      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a5a      	ldr	r2, [pc, #360]	@ (8006a80 <HAL_DMA_IRQHandler+0x420>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d018      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a58      	ldr	r2, [pc, #352]	@ (8006a84 <HAL_DMA_IRQHandler+0x424>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a57      	ldr	r2, [pc, #348]	@ (8006a88 <HAL_DMA_IRQHandler+0x428>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00e      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a55      	ldr	r2, [pc, #340]	@ (8006a8c <HAL_DMA_IRQHandler+0x42c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d009      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a54      	ldr	r2, [pc, #336]	@ (8006a90 <HAL_DMA_IRQHandler+0x430>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d004      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ee>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a52      	ldr	r2, [pc, #328]	@ (8006a94 <HAL_DMA_IRQHandler+0x434>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10a      	bne.n	8006964 <HAL_DMA_IRQHandler+0x304>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf14      	ite	ne
 800695c:	2301      	movne	r3, #1
 800695e:	2300      	moveq	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	e003      	b.n	800696c <HAL_DMA_IRQHandler+0x30c>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00d      	beq.n	800698c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	2201      	movs	r2, #1
 800697a:	409a      	lsls	r2, r3
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006984:	f043 0202 	orr.w	r2, r3, #2
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	2204      	movs	r2, #4
 8006996:	409a      	lsls	r2, r3
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 808f 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a58 <HAL_DMA_IRQHandler+0x3f8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d04a      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a5c <HAL_DMA_IRQHandler+0x3fc>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d045      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a29      	ldr	r2, [pc, #164]	@ (8006a60 <HAL_DMA_IRQHandler+0x400>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d040      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a27      	ldr	r2, [pc, #156]	@ (8006a64 <HAL_DMA_IRQHandler+0x404>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d03b      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a26      	ldr	r2, [pc, #152]	@ (8006a68 <HAL_DMA_IRQHandler+0x408>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d036      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a24      	ldr	r2, [pc, #144]	@ (8006a6c <HAL_DMA_IRQHandler+0x40c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d031      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a23      	ldr	r2, [pc, #140]	@ (8006a70 <HAL_DMA_IRQHandler+0x410>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d02c      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a21      	ldr	r2, [pc, #132]	@ (8006a74 <HAL_DMA_IRQHandler+0x414>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d027      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a20      	ldr	r2, [pc, #128]	@ (8006a78 <HAL_DMA_IRQHandler+0x418>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d022      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1e      	ldr	r2, [pc, #120]	@ (8006a7c <HAL_DMA_IRQHandler+0x41c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01d      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a80 <HAL_DMA_IRQHandler+0x420>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d018      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1b      	ldr	r2, [pc, #108]	@ (8006a84 <HAL_DMA_IRQHandler+0x424>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a88 <HAL_DMA_IRQHandler+0x428>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00e      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a18      	ldr	r2, [pc, #96]	@ (8006a8c <HAL_DMA_IRQHandler+0x42c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d009      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a17      	ldr	r2, [pc, #92]	@ (8006a90 <HAL_DMA_IRQHandler+0x430>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3e2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a15      	ldr	r2, [pc, #84]	@ (8006a94 <HAL_DMA_IRQHandler+0x434>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d12a      	bne.n	8006a98 <HAL_DMA_IRQHandler+0x438>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bf14      	ite	ne
 8006a50:	2301      	movne	r3, #1
 8006a52:	2300      	moveq	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	e023      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x440>
 8006a58:	40020010 	.word	0x40020010
 8006a5c:	40020028 	.word	0x40020028
 8006a60:	40020040 	.word	0x40020040
 8006a64:	40020058 	.word	0x40020058
 8006a68:	40020070 	.word	0x40020070
 8006a6c:	40020088 	.word	0x40020088
 8006a70:	400200a0 	.word	0x400200a0
 8006a74:	400200b8 	.word	0x400200b8
 8006a78:	40020410 	.word	0x40020410
 8006a7c:	40020428 	.word	0x40020428
 8006a80:	40020440 	.word	0x40020440
 8006a84:	40020458 	.word	0x40020458
 8006a88:	40020470 	.word	0x40020470
 8006a8c:	40020488 	.word	0x40020488
 8006a90:	400204a0 	.word	0x400204a0
 8006a94:	400204b8 	.word	0x400204b8
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	2204      	movs	r2, #4
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab8:	f043 0204 	orr.w	r2, r3, #4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2210      	movs	r2, #16
 8006aca:	409a      	lsls	r2, r3
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80a6 	beq.w	8006c22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a85      	ldr	r2, [pc, #532]	@ (8006cf0 <HAL_DMA_IRQHandler+0x690>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04a      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a83      	ldr	r2, [pc, #524]	@ (8006cf4 <HAL_DMA_IRQHandler+0x694>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d045      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a82      	ldr	r2, [pc, #520]	@ (8006cf8 <HAL_DMA_IRQHandler+0x698>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d040      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a80      	ldr	r2, [pc, #512]	@ (8006cfc <HAL_DMA_IRQHandler+0x69c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d03b      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7f      	ldr	r2, [pc, #508]	@ (8006d00 <HAL_DMA_IRQHandler+0x6a0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d036      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a7d      	ldr	r2, [pc, #500]	@ (8006d04 <HAL_DMA_IRQHandler+0x6a4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7c      	ldr	r2, [pc, #496]	@ (8006d08 <HAL_DMA_IRQHandler+0x6a8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d02c      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a7a      	ldr	r2, [pc, #488]	@ (8006d0c <HAL_DMA_IRQHandler+0x6ac>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d027      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a79      	ldr	r2, [pc, #484]	@ (8006d10 <HAL_DMA_IRQHandler+0x6b0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a77      	ldr	r2, [pc, #476]	@ (8006d14 <HAL_DMA_IRQHandler+0x6b4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a76      	ldr	r2, [pc, #472]	@ (8006d18 <HAL_DMA_IRQHandler+0x6b8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a74      	ldr	r2, [pc, #464]	@ (8006d1c <HAL_DMA_IRQHandler+0x6bc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a73      	ldr	r2, [pc, #460]	@ (8006d20 <HAL_DMA_IRQHandler+0x6c0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a71      	ldr	r2, [pc, #452]	@ (8006d24 <HAL_DMA_IRQHandler+0x6c4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a70      	ldr	r2, [pc, #448]	@ (8006d28 <HAL_DMA_IRQHandler+0x6c8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x516>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a6e      	ldr	r2, [pc, #440]	@ (8006d2c <HAL_DMA_IRQHandler+0x6cc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d10a      	bne.n	8006b8c <HAL_DMA_IRQHandler+0x52c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bf14      	ite	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	2300      	moveq	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e009      	b.n	8006ba0 <HAL_DMA_IRQHandler+0x540>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bf14      	ite	ne
 8006b9a:	2301      	movne	r3, #1
 8006b9c:	2300      	moveq	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d03e      	beq.n	8006c22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	2210      	movs	r2, #16
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d018      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d108      	bne.n	8006be2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d024      	beq.n	8006c22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
 8006be0:	e01f      	b.n	8006c22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01b      	beq.n	8006c22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
 8006bf2:	e016      	b.n	8006c22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d107      	bne.n	8006c12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0208 	bic.w	r2, r2, #8
 8006c10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	409a      	lsls	r2, r3
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	4013      	ands	r3, r2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8110 	beq.w	8006e58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8006cf0 <HAL_DMA_IRQHandler+0x690>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d04a      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf4 <HAL_DMA_IRQHandler+0x694>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d045      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a29      	ldr	r2, [pc, #164]	@ (8006cf8 <HAL_DMA_IRQHandler+0x698>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d040      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a28      	ldr	r2, [pc, #160]	@ (8006cfc <HAL_DMA_IRQHandler+0x69c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d03b      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a26      	ldr	r2, [pc, #152]	@ (8006d00 <HAL_DMA_IRQHandler+0x6a0>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d036      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a25      	ldr	r2, [pc, #148]	@ (8006d04 <HAL_DMA_IRQHandler+0x6a4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d031      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a23      	ldr	r2, [pc, #140]	@ (8006d08 <HAL_DMA_IRQHandler+0x6a8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d02c      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a22      	ldr	r2, [pc, #136]	@ (8006d0c <HAL_DMA_IRQHandler+0x6ac>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d027      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a20      	ldr	r2, [pc, #128]	@ (8006d10 <HAL_DMA_IRQHandler+0x6b0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d022      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1f      	ldr	r2, [pc, #124]	@ (8006d14 <HAL_DMA_IRQHandler+0x6b4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d01d      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d18 <HAL_DMA_IRQHandler+0x6b8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d018      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1c      	ldr	r2, [pc, #112]	@ (8006d1c <HAL_DMA_IRQHandler+0x6bc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d013      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8006d20 <HAL_DMA_IRQHandler+0x6c0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a19      	ldr	r2, [pc, #100]	@ (8006d24 <HAL_DMA_IRQHandler+0x6c4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a17      	ldr	r2, [pc, #92]	@ (8006d28 <HAL_DMA_IRQHandler+0x6c8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x678>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	@ (8006d2c <HAL_DMA_IRQHandler+0x6cc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d12b      	bne.n	8006d30 <HAL_DMA_IRQHandler+0x6d0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bf14      	ite	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	2300      	moveq	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	e02a      	b.n	8006d44 <HAL_DMA_IRQHandler+0x6e4>
 8006cee:	bf00      	nop
 8006cf0:	40020010 	.word	0x40020010
 8006cf4:	40020028 	.word	0x40020028
 8006cf8:	40020040 	.word	0x40020040
 8006cfc:	40020058 	.word	0x40020058
 8006d00:	40020070 	.word	0x40020070
 8006d04:	40020088 	.word	0x40020088
 8006d08:	400200a0 	.word	0x400200a0
 8006d0c:	400200b8 	.word	0x400200b8
 8006d10:	40020410 	.word	0x40020410
 8006d14:	40020428 	.word	0x40020428
 8006d18:	40020440 	.word	0x40020440
 8006d1c:	40020458 	.word	0x40020458
 8006d20:	40020470 	.word	0x40020470
 8006d24:	40020488 	.word	0x40020488
 8006d28:	400204a0 	.word	0x400204a0
 8006d2c:	400204b8 	.word	0x400204b8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2301      	movne	r3, #1
 8006d40:	2300      	moveq	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8087 	beq.w	8006e58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2220      	movs	r2, #32
 8006d54:	409a      	lsls	r2, r3
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d139      	bne.n	8006dda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0216 	bic.w	r2, r2, #22
 8006d74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d103      	bne.n	8006d96 <HAL_DMA_IRQHandler+0x736>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0208 	bic.w	r2, r2, #8
 8006da4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	223f      	movs	r2, #63	@ 0x3f
 8006db0:	409a      	lsls	r2, r3
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 834a 	beq.w	8007464 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
          }
          return;
 8006dd8:	e344      	b.n	8007464 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d018      	beq.n	8006e1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d108      	bne.n	8006e08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d02c      	beq.n	8006e58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
 8006e06:	e027      	b.n	8006e58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d023      	beq.n	8006e58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	4798      	blx	r3
 8006e18:	e01e      	b.n	8006e58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10f      	bne.n	8006e48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0210 	bic.w	r2, r2, #16
 8006e36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8306 	beq.w	800746e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 8088 	beq.w	8006f80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2204      	movs	r2, #4
 8006e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a7a      	ldr	r2, [pc, #488]	@ (8007068 <HAL_DMA_IRQHandler+0xa08>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d04a      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a79      	ldr	r2, [pc, #484]	@ (800706c <HAL_DMA_IRQHandler+0xa0c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d045      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a77      	ldr	r2, [pc, #476]	@ (8007070 <HAL_DMA_IRQHandler+0xa10>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d040      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a76      	ldr	r2, [pc, #472]	@ (8007074 <HAL_DMA_IRQHandler+0xa14>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d03b      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a74      	ldr	r2, [pc, #464]	@ (8007078 <HAL_DMA_IRQHandler+0xa18>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d036      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a73      	ldr	r2, [pc, #460]	@ (800707c <HAL_DMA_IRQHandler+0xa1c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d031      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a71      	ldr	r2, [pc, #452]	@ (8007080 <HAL_DMA_IRQHandler+0xa20>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d02c      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a70      	ldr	r2, [pc, #448]	@ (8007084 <HAL_DMA_IRQHandler+0xa24>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d027      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8007088 <HAL_DMA_IRQHandler+0xa28>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d022      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a6d      	ldr	r2, [pc, #436]	@ (800708c <HAL_DMA_IRQHandler+0xa2c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d01d      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8007090 <HAL_DMA_IRQHandler+0xa30>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d018      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a6a      	ldr	r2, [pc, #424]	@ (8007094 <HAL_DMA_IRQHandler+0xa34>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d013      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a68      	ldr	r2, [pc, #416]	@ (8007098 <HAL_DMA_IRQHandler+0xa38>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00e      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a67      	ldr	r2, [pc, #412]	@ (800709c <HAL_DMA_IRQHandler+0xa3c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d009      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a65      	ldr	r2, [pc, #404]	@ (80070a0 <HAL_DMA_IRQHandler+0xa40>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x8b8>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a64      	ldr	r2, [pc, #400]	@ (80070a4 <HAL_DMA_IRQHandler+0xa44>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d108      	bne.n	8006f2a <HAL_DMA_IRQHandler+0x8ca>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	e007      	b.n	8006f3a <HAL_DMA_IRQHandler+0x8da>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0201 	bic.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d307      	bcc.n	8006f56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f2      	bne.n	8006f3a <HAL_DMA_IRQHandler+0x8da>
 8006f54:	e000      	b.n	8006f58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006f6e:	e003      	b.n	8006f78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8272 	beq.w	800746e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	e26c      	b.n	800746e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a43      	ldr	r2, [pc, #268]	@ (80070a8 <HAL_DMA_IRQHandler+0xa48>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d022      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x984>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a42      	ldr	r2, [pc, #264]	@ (80070ac <HAL_DMA_IRQHandler+0xa4c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d01d      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x984>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a40      	ldr	r2, [pc, #256]	@ (80070b0 <HAL_DMA_IRQHandler+0xa50>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d018      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x984>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a3f      	ldr	r2, [pc, #252]	@ (80070b4 <HAL_DMA_IRQHandler+0xa54>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d013      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x984>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a3d      	ldr	r2, [pc, #244]	@ (80070b8 <HAL_DMA_IRQHandler+0xa58>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00e      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x984>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3c      	ldr	r2, [pc, #240]	@ (80070bc <HAL_DMA_IRQHandler+0xa5c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d009      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x984>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80070c0 <HAL_DMA_IRQHandler+0xa60>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x984>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a39      	ldr	r2, [pc, #228]	@ (80070c4 <HAL_DMA_IRQHandler+0xa64>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d101      	bne.n	8006fe8 <HAL_DMA_IRQHandler+0x988>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e000      	b.n	8006fea <HAL_DMA_IRQHandler+0x98a>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 823f 	beq.w	800746e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2204      	movs	r2, #4
 8007002:	409a      	lsls	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 80cd 	beq.w	80071a8 <HAL_DMA_IRQHandler+0xb48>
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80c7 	beq.w	80071a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800701e:	f003 031f 	and.w	r3, r3, #31
 8007022:	2204      	movs	r2, #4
 8007024:	409a      	lsls	r2, r3
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d049      	beq.n	80070c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8210 	beq.w	8007468 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007050:	e20a      	b.n	8007468 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8206 	beq.w	8007468 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007064:	e200      	b.n	8007468 <HAL_DMA_IRQHandler+0xe08>
 8007066:	bf00      	nop
 8007068:	40020010 	.word	0x40020010
 800706c:	40020028 	.word	0x40020028
 8007070:	40020040 	.word	0x40020040
 8007074:	40020058 	.word	0x40020058
 8007078:	40020070 	.word	0x40020070
 800707c:	40020088 	.word	0x40020088
 8007080:	400200a0 	.word	0x400200a0
 8007084:	400200b8 	.word	0x400200b8
 8007088:	40020410 	.word	0x40020410
 800708c:	40020428 	.word	0x40020428
 8007090:	40020440 	.word	0x40020440
 8007094:	40020458 	.word	0x40020458
 8007098:	40020470 	.word	0x40020470
 800709c:	40020488 	.word	0x40020488
 80070a0:	400204a0 	.word	0x400204a0
 80070a4:	400204b8 	.word	0x400204b8
 80070a8:	58025408 	.word	0x58025408
 80070ac:	5802541c 	.word	0x5802541c
 80070b0:	58025430 	.word	0x58025430
 80070b4:	58025444 	.word	0x58025444
 80070b8:	58025458 	.word	0x58025458
 80070bc:	5802546c 	.word	0x5802546c
 80070c0:	58025480 	.word	0x58025480
 80070c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d160      	bne.n	8007194 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a7f      	ldr	r2, [pc, #508]	@ (80072d4 <HAL_DMA_IRQHandler+0xc74>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d04a      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a7d      	ldr	r2, [pc, #500]	@ (80072d8 <HAL_DMA_IRQHandler+0xc78>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d045      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a7c      	ldr	r2, [pc, #496]	@ (80072dc <HAL_DMA_IRQHandler+0xc7c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d040      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a7a      	ldr	r2, [pc, #488]	@ (80072e0 <HAL_DMA_IRQHandler+0xc80>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d03b      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a79      	ldr	r2, [pc, #484]	@ (80072e4 <HAL_DMA_IRQHandler+0xc84>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d036      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a77      	ldr	r2, [pc, #476]	@ (80072e8 <HAL_DMA_IRQHandler+0xc88>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d031      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a76      	ldr	r2, [pc, #472]	@ (80072ec <HAL_DMA_IRQHandler+0xc8c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d02c      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a74      	ldr	r2, [pc, #464]	@ (80072f0 <HAL_DMA_IRQHandler+0xc90>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d027      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a73      	ldr	r2, [pc, #460]	@ (80072f4 <HAL_DMA_IRQHandler+0xc94>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d022      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a71      	ldr	r2, [pc, #452]	@ (80072f8 <HAL_DMA_IRQHandler+0xc98>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01d      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a70      	ldr	r2, [pc, #448]	@ (80072fc <HAL_DMA_IRQHandler+0xc9c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d018      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a6e      	ldr	r2, [pc, #440]	@ (8007300 <HAL_DMA_IRQHandler+0xca0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a6d      	ldr	r2, [pc, #436]	@ (8007304 <HAL_DMA_IRQHandler+0xca4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a6b      	ldr	r2, [pc, #428]	@ (8007308 <HAL_DMA_IRQHandler+0xca8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a6a      	ldr	r2, [pc, #424]	@ (800730c <HAL_DMA_IRQHandler+0xcac>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_DMA_IRQHandler+0xb12>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a68      	ldr	r2, [pc, #416]	@ (8007310 <HAL_DMA_IRQHandler+0xcb0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d108      	bne.n	8007184 <HAL_DMA_IRQHandler+0xb24>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0208 	bic.w	r2, r2, #8
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e007      	b.n	8007194 <HAL_DMA_IRQHandler+0xb34>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0204 	bic.w	r2, r2, #4
 8007192:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8165 	beq.w	8007468 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071a6:	e15f      	b.n	8007468 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	2202      	movs	r2, #2
 80071b2:	409a      	lsls	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	4013      	ands	r3, r2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 80c5 	beq.w	8007348 <HAL_DMA_IRQHandler+0xce8>
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80bf 	beq.w	8007348 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	2202      	movs	r2, #2
 80071d4:	409a      	lsls	r2, r3
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d018      	beq.n	8007216 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 813a 	beq.w	800746c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007200:	e134      	b.n	800746c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8130 	beq.w	800746c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007214:	e12a      	b.n	800746c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 8089 	bne.w	8007334 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2b      	ldr	r2, [pc, #172]	@ (80072d4 <HAL_DMA_IRQHandler+0xc74>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d04a      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a29      	ldr	r2, [pc, #164]	@ (80072d8 <HAL_DMA_IRQHandler+0xc78>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d045      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a28      	ldr	r2, [pc, #160]	@ (80072dc <HAL_DMA_IRQHandler+0xc7c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d040      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a26      	ldr	r2, [pc, #152]	@ (80072e0 <HAL_DMA_IRQHandler+0xc80>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d03b      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a25      	ldr	r2, [pc, #148]	@ (80072e4 <HAL_DMA_IRQHandler+0xc84>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d036      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a23      	ldr	r2, [pc, #140]	@ (80072e8 <HAL_DMA_IRQHandler+0xc88>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d031      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a22      	ldr	r2, [pc, #136]	@ (80072ec <HAL_DMA_IRQHandler+0xc8c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d02c      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a20      	ldr	r2, [pc, #128]	@ (80072f0 <HAL_DMA_IRQHandler+0xc90>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d027      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1f      	ldr	r2, [pc, #124]	@ (80072f4 <HAL_DMA_IRQHandler+0xc94>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1d      	ldr	r2, [pc, #116]	@ (80072f8 <HAL_DMA_IRQHandler+0xc98>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d01d      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1c      	ldr	r2, [pc, #112]	@ (80072fc <HAL_DMA_IRQHandler+0xc9c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1a      	ldr	r2, [pc, #104]	@ (8007300 <HAL_DMA_IRQHandler+0xca0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a19      	ldr	r2, [pc, #100]	@ (8007304 <HAL_DMA_IRQHandler+0xca4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a17      	ldr	r2, [pc, #92]	@ (8007308 <HAL_DMA_IRQHandler+0xca8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a16      	ldr	r2, [pc, #88]	@ (800730c <HAL_DMA_IRQHandler+0xcac>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xc62>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a14      	ldr	r2, [pc, #80]	@ (8007310 <HAL_DMA_IRQHandler+0xcb0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d128      	bne.n	8007314 <HAL_DMA_IRQHandler+0xcb4>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0214 	bic.w	r2, r2, #20
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	e027      	b.n	8007324 <HAL_DMA_IRQHandler+0xcc4>
 80072d4:	40020010 	.word	0x40020010
 80072d8:	40020028 	.word	0x40020028
 80072dc:	40020040 	.word	0x40020040
 80072e0:	40020058 	.word	0x40020058
 80072e4:	40020070 	.word	0x40020070
 80072e8:	40020088 	.word	0x40020088
 80072ec:	400200a0 	.word	0x400200a0
 80072f0:	400200b8 	.word	0x400200b8
 80072f4:	40020410 	.word	0x40020410
 80072f8:	40020428 	.word	0x40020428
 80072fc:	40020440 	.word	0x40020440
 8007300:	40020458 	.word	0x40020458
 8007304:	40020470 	.word	0x40020470
 8007308:	40020488 	.word	0x40020488
 800730c:	400204a0 	.word	0x400204a0
 8007310:	400204b8 	.word	0x400204b8
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 020a 	bic.w	r2, r2, #10
 8007322:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8097 	beq.w	800746c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007346:	e091      	b.n	800746c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	2208      	movs	r2, #8
 8007352:	409a      	lsls	r2, r3
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8088 	beq.w	800746e <HAL_DMA_IRQHandler+0xe0e>
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8082 	beq.w	800746e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a41      	ldr	r2, [pc, #260]	@ (8007474 <HAL_DMA_IRQHandler+0xe14>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d04a      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a3f      	ldr	r2, [pc, #252]	@ (8007478 <HAL_DMA_IRQHandler+0xe18>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d045      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a3e      	ldr	r2, [pc, #248]	@ (800747c <HAL_DMA_IRQHandler+0xe1c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d040      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a3c      	ldr	r2, [pc, #240]	@ (8007480 <HAL_DMA_IRQHandler+0xe20>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d03b      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a3b      	ldr	r2, [pc, #236]	@ (8007484 <HAL_DMA_IRQHandler+0xe24>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d036      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a39      	ldr	r2, [pc, #228]	@ (8007488 <HAL_DMA_IRQHandler+0xe28>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d031      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a38      	ldr	r2, [pc, #224]	@ (800748c <HAL_DMA_IRQHandler+0xe2c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d02c      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a36      	ldr	r2, [pc, #216]	@ (8007490 <HAL_DMA_IRQHandler+0xe30>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d027      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a35      	ldr	r2, [pc, #212]	@ (8007494 <HAL_DMA_IRQHandler+0xe34>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d022      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a33      	ldr	r2, [pc, #204]	@ (8007498 <HAL_DMA_IRQHandler+0xe38>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01d      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a32      	ldr	r2, [pc, #200]	@ (800749c <HAL_DMA_IRQHandler+0xe3c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d018      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a30      	ldr	r2, [pc, #192]	@ (80074a0 <HAL_DMA_IRQHandler+0xe40>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a2f      	ldr	r2, [pc, #188]	@ (80074a4 <HAL_DMA_IRQHandler+0xe44>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a2d      	ldr	r2, [pc, #180]	@ (80074a8 <HAL_DMA_IRQHandler+0xe48>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a2c      	ldr	r2, [pc, #176]	@ (80074ac <HAL_DMA_IRQHandler+0xe4c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_DMA_IRQHandler+0xdaa>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a2a      	ldr	r2, [pc, #168]	@ (80074b0 <HAL_DMA_IRQHandler+0xe50>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d108      	bne.n	800741c <HAL_DMA_IRQHandler+0xdbc>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 021c 	bic.w	r2, r2, #28
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e007      	b.n	800742c <HAL_DMA_IRQHandler+0xdcc>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 020e 	bic.w	r2, r2, #14
 800742a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007430:	f003 031f 	and.w	r3, r3, #31
 8007434:	2201      	movs	r2, #1
 8007436:	409a      	lsls	r2, r3
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d009      	beq.n	800746e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
 8007462:	e004      	b.n	800746e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007464:	bf00      	nop
 8007466:	e002      	b.n	800746e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007468:	bf00      	nop
 800746a:	e000      	b.n	800746e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800746c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800746e:	3728      	adds	r7, #40	@ 0x28
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	40020010 	.word	0x40020010
 8007478:	40020028 	.word	0x40020028
 800747c:	40020040 	.word	0x40020040
 8007480:	40020058 	.word	0x40020058
 8007484:	40020070 	.word	0x40020070
 8007488:	40020088 	.word	0x40020088
 800748c:	400200a0 	.word	0x400200a0
 8007490:	400200b8 	.word	0x400200b8
 8007494:	40020410 	.word	0x40020410
 8007498:	40020428 	.word	0x40020428
 800749c:	40020440 	.word	0x40020440
 80074a0:	40020458 	.word	0x40020458
 80074a4:	40020470 	.word	0x40020470
 80074a8:	40020488 	.word	0x40020488
 80074ac:	400204a0 	.word	0x400204a0
 80074b0:	400204b8 	.word	0x400204b8

080074b4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074c2:	b2db      	uxtb	r3, r3
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007500:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a7f      	ldr	r2, [pc, #508]	@ (8007704 <DMA_SetConfig+0x21c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d072      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a7d      	ldr	r2, [pc, #500]	@ (8007708 <DMA_SetConfig+0x220>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d06d      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a7c      	ldr	r2, [pc, #496]	@ (800770c <DMA_SetConfig+0x224>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d068      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a7a      	ldr	r2, [pc, #488]	@ (8007710 <DMA_SetConfig+0x228>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d063      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a79      	ldr	r2, [pc, #484]	@ (8007714 <DMA_SetConfig+0x22c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d05e      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a77      	ldr	r2, [pc, #476]	@ (8007718 <DMA_SetConfig+0x230>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d059      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a76      	ldr	r2, [pc, #472]	@ (800771c <DMA_SetConfig+0x234>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d054      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a74      	ldr	r2, [pc, #464]	@ (8007720 <DMA_SetConfig+0x238>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d04f      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a73      	ldr	r2, [pc, #460]	@ (8007724 <DMA_SetConfig+0x23c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d04a      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a71      	ldr	r2, [pc, #452]	@ (8007728 <DMA_SetConfig+0x240>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d045      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a70      	ldr	r2, [pc, #448]	@ (800772c <DMA_SetConfig+0x244>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d040      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a6e      	ldr	r2, [pc, #440]	@ (8007730 <DMA_SetConfig+0x248>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d03b      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a6d      	ldr	r2, [pc, #436]	@ (8007734 <DMA_SetConfig+0x24c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d036      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a6b      	ldr	r2, [pc, #428]	@ (8007738 <DMA_SetConfig+0x250>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d031      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a6a      	ldr	r2, [pc, #424]	@ (800773c <DMA_SetConfig+0x254>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d02c      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a68      	ldr	r2, [pc, #416]	@ (8007740 <DMA_SetConfig+0x258>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d027      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a67      	ldr	r2, [pc, #412]	@ (8007744 <DMA_SetConfig+0x25c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d022      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a65      	ldr	r2, [pc, #404]	@ (8007748 <DMA_SetConfig+0x260>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01d      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a64      	ldr	r2, [pc, #400]	@ (800774c <DMA_SetConfig+0x264>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d018      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a62      	ldr	r2, [pc, #392]	@ (8007750 <DMA_SetConfig+0x268>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a61      	ldr	r2, [pc, #388]	@ (8007754 <DMA_SetConfig+0x26c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00e      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a5f      	ldr	r2, [pc, #380]	@ (8007758 <DMA_SetConfig+0x270>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d009      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a5e      	ldr	r2, [pc, #376]	@ (800775c <DMA_SetConfig+0x274>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d004      	beq.n	80075f2 <DMA_SetConfig+0x10a>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a5c      	ldr	r2, [pc, #368]	@ (8007760 <DMA_SetConfig+0x278>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d101      	bne.n	80075f6 <DMA_SetConfig+0x10e>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <DMA_SetConfig+0x110>
 80075f6:	2300      	movs	r3, #0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00d      	beq.n	8007618 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007604:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d004      	beq.n	8007618 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007616:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a39      	ldr	r2, [pc, #228]	@ (8007704 <DMA_SetConfig+0x21c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d04a      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a38      	ldr	r2, [pc, #224]	@ (8007708 <DMA_SetConfig+0x220>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d045      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a36      	ldr	r2, [pc, #216]	@ (800770c <DMA_SetConfig+0x224>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d040      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a35      	ldr	r2, [pc, #212]	@ (8007710 <DMA_SetConfig+0x228>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d03b      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a33      	ldr	r2, [pc, #204]	@ (8007714 <DMA_SetConfig+0x22c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d036      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a32      	ldr	r2, [pc, #200]	@ (8007718 <DMA_SetConfig+0x230>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d031      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a30      	ldr	r2, [pc, #192]	@ (800771c <DMA_SetConfig+0x234>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d02c      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2f      	ldr	r2, [pc, #188]	@ (8007720 <DMA_SetConfig+0x238>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d027      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a2d      	ldr	r2, [pc, #180]	@ (8007724 <DMA_SetConfig+0x23c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d022      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2c      	ldr	r2, [pc, #176]	@ (8007728 <DMA_SetConfig+0x240>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d01d      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a2a      	ldr	r2, [pc, #168]	@ (800772c <DMA_SetConfig+0x244>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d018      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a29      	ldr	r2, [pc, #164]	@ (8007730 <DMA_SetConfig+0x248>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a27      	ldr	r2, [pc, #156]	@ (8007734 <DMA_SetConfig+0x24c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00e      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a26      	ldr	r2, [pc, #152]	@ (8007738 <DMA_SetConfig+0x250>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d009      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a24      	ldr	r2, [pc, #144]	@ (800773c <DMA_SetConfig+0x254>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <DMA_SetConfig+0x1d0>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a23      	ldr	r2, [pc, #140]	@ (8007740 <DMA_SetConfig+0x258>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d101      	bne.n	80076bc <DMA_SetConfig+0x1d4>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <DMA_SetConfig+0x1d6>
 80076bc:	2300      	movs	r3, #0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d059      	beq.n	8007776 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c6:	f003 031f 	and.w	r3, r3, #31
 80076ca:	223f      	movs	r2, #63	@ 0x3f
 80076cc:	409a      	lsls	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80076e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b40      	cmp	r3, #64	@ 0x40
 80076f0:	d138      	bne.n	8007764 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007702:	e086      	b.n	8007812 <DMA_SetConfig+0x32a>
 8007704:	40020010 	.word	0x40020010
 8007708:	40020028 	.word	0x40020028
 800770c:	40020040 	.word	0x40020040
 8007710:	40020058 	.word	0x40020058
 8007714:	40020070 	.word	0x40020070
 8007718:	40020088 	.word	0x40020088
 800771c:	400200a0 	.word	0x400200a0
 8007720:	400200b8 	.word	0x400200b8
 8007724:	40020410 	.word	0x40020410
 8007728:	40020428 	.word	0x40020428
 800772c:	40020440 	.word	0x40020440
 8007730:	40020458 	.word	0x40020458
 8007734:	40020470 	.word	0x40020470
 8007738:	40020488 	.word	0x40020488
 800773c:	400204a0 	.word	0x400204a0
 8007740:	400204b8 	.word	0x400204b8
 8007744:	58025408 	.word	0x58025408
 8007748:	5802541c 	.word	0x5802541c
 800774c:	58025430 	.word	0x58025430
 8007750:	58025444 	.word	0x58025444
 8007754:	58025458 	.word	0x58025458
 8007758:	5802546c 	.word	0x5802546c
 800775c:	58025480 	.word	0x58025480
 8007760:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	60da      	str	r2, [r3, #12]
}
 8007774:	e04d      	b.n	8007812 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a29      	ldr	r2, [pc, #164]	@ (8007820 <DMA_SetConfig+0x338>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <DMA_SetConfig+0x2de>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a27      	ldr	r2, [pc, #156]	@ (8007824 <DMA_SetConfig+0x33c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d01d      	beq.n	80077c6 <DMA_SetConfig+0x2de>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a26      	ldr	r2, [pc, #152]	@ (8007828 <DMA_SetConfig+0x340>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <DMA_SetConfig+0x2de>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a24      	ldr	r2, [pc, #144]	@ (800782c <DMA_SetConfig+0x344>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <DMA_SetConfig+0x2de>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a23      	ldr	r2, [pc, #140]	@ (8007830 <DMA_SetConfig+0x348>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <DMA_SetConfig+0x2de>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a21      	ldr	r2, [pc, #132]	@ (8007834 <DMA_SetConfig+0x34c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <DMA_SetConfig+0x2de>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a20      	ldr	r2, [pc, #128]	@ (8007838 <DMA_SetConfig+0x350>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <DMA_SetConfig+0x2de>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1e      	ldr	r2, [pc, #120]	@ (800783c <DMA_SetConfig+0x354>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d101      	bne.n	80077ca <DMA_SetConfig+0x2e2>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <DMA_SetConfig+0x2e4>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d020      	beq.n	8007812 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	2201      	movs	r2, #1
 80077da:	409a      	lsls	r2, r3
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b40      	cmp	r3, #64	@ 0x40
 80077ee:	d108      	bne.n	8007802 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	60da      	str	r2, [r3, #12]
}
 8007800:	e007      	b.n	8007812 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	60da      	str	r2, [r3, #12]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	58025408 	.word	0x58025408
 8007824:	5802541c 	.word	0x5802541c
 8007828:	58025430 	.word	0x58025430
 800782c:	58025444 	.word	0x58025444
 8007830:	58025458 	.word	0x58025458
 8007834:	5802546c 	.word	0x5802546c
 8007838:	58025480 	.word	0x58025480
 800783c:	58025494 	.word	0x58025494

08007840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a42      	ldr	r2, [pc, #264]	@ (8007958 <DMA_CalcBaseAndBitshift+0x118>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d04a      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a41      	ldr	r2, [pc, #260]	@ (800795c <DMA_CalcBaseAndBitshift+0x11c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d045      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a3f      	ldr	r2, [pc, #252]	@ (8007960 <DMA_CalcBaseAndBitshift+0x120>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d040      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a3e      	ldr	r2, [pc, #248]	@ (8007964 <DMA_CalcBaseAndBitshift+0x124>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d03b      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a3c      	ldr	r2, [pc, #240]	@ (8007968 <DMA_CalcBaseAndBitshift+0x128>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d036      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a3b      	ldr	r2, [pc, #236]	@ (800796c <DMA_CalcBaseAndBitshift+0x12c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d031      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a39      	ldr	r2, [pc, #228]	@ (8007970 <DMA_CalcBaseAndBitshift+0x130>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d02c      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a38      	ldr	r2, [pc, #224]	@ (8007974 <DMA_CalcBaseAndBitshift+0x134>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d027      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a36      	ldr	r2, [pc, #216]	@ (8007978 <DMA_CalcBaseAndBitshift+0x138>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d022      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a35      	ldr	r2, [pc, #212]	@ (800797c <DMA_CalcBaseAndBitshift+0x13c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d01d      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a33      	ldr	r2, [pc, #204]	@ (8007980 <DMA_CalcBaseAndBitshift+0x140>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d018      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a32      	ldr	r2, [pc, #200]	@ (8007984 <DMA_CalcBaseAndBitshift+0x144>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d013      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a30      	ldr	r2, [pc, #192]	@ (8007988 <DMA_CalcBaseAndBitshift+0x148>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d00e      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a2f      	ldr	r2, [pc, #188]	@ (800798c <DMA_CalcBaseAndBitshift+0x14c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d009      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007990 <DMA_CalcBaseAndBitshift+0x150>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d004      	beq.n	80078e8 <DMA_CalcBaseAndBitshift+0xa8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007994 <DMA_CalcBaseAndBitshift+0x154>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d101      	bne.n	80078ec <DMA_CalcBaseAndBitshift+0xac>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <DMA_CalcBaseAndBitshift+0xae>
 80078ec:	2300      	movs	r3, #0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d024      	beq.n	800793c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	3b10      	subs	r3, #16
 80078fa:	4a27      	ldr	r2, [pc, #156]	@ (8007998 <DMA_CalcBaseAndBitshift+0x158>)
 80078fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007900:	091b      	lsrs	r3, r3, #4
 8007902:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	4a24      	ldr	r2, [pc, #144]	@ (800799c <DMA_CalcBaseAndBitshift+0x15c>)
 800790c:	5cd3      	ldrb	r3, [r2, r3]
 800790e:	461a      	mov	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b03      	cmp	r3, #3
 8007918:	d908      	bls.n	800792c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	4b1f      	ldr	r3, [pc, #124]	@ (80079a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007922:	4013      	ands	r3, r2
 8007924:	1d1a      	adds	r2, r3, #4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	659a      	str	r2, [r3, #88]	@ 0x58
 800792a:	e00d      	b.n	8007948 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	4b1b      	ldr	r3, [pc, #108]	@ (80079a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007934:	4013      	ands	r3, r2
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6593      	str	r3, [r2, #88]	@ 0x58
 800793a:	e005      	b.n	8007948 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	40020010 	.word	0x40020010
 800795c:	40020028 	.word	0x40020028
 8007960:	40020040 	.word	0x40020040
 8007964:	40020058 	.word	0x40020058
 8007968:	40020070 	.word	0x40020070
 800796c:	40020088 	.word	0x40020088
 8007970:	400200a0 	.word	0x400200a0
 8007974:	400200b8 	.word	0x400200b8
 8007978:	40020410 	.word	0x40020410
 800797c:	40020428 	.word	0x40020428
 8007980:	40020440 	.word	0x40020440
 8007984:	40020458 	.word	0x40020458
 8007988:	40020470 	.word	0x40020470
 800798c:	40020488 	.word	0x40020488
 8007990:	400204a0 	.word	0x400204a0
 8007994:	400204b8 	.word	0x400204b8
 8007998:	aaaaaaab 	.word	0xaaaaaaab
 800799c:	0801b6bc 	.word	0x0801b6bc
 80079a0:	fffffc00 	.word	0xfffffc00

080079a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d120      	bne.n	80079fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d858      	bhi.n	8007a72 <DMA_CheckFifoParam+0xce>
 80079c0:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <DMA_CheckFifoParam+0x24>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	080079eb 	.word	0x080079eb
 80079d0:	080079d9 	.word	0x080079d9
 80079d4:	08007a73 	.word	0x08007a73
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d048      	beq.n	8007a76 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079e8:	e045      	b.n	8007a76 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80079f2:	d142      	bne.n	8007a7a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079f8:	e03f      	b.n	8007a7a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a02:	d123      	bne.n	8007a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d838      	bhi.n	8007a7e <DMA_CheckFifoParam+0xda>
 8007a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <DMA_CheckFifoParam+0x70>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a25 	.word	0x08007a25
 8007a18:	08007a2b 	.word	0x08007a2b
 8007a1c:	08007a25 	.word	0x08007a25
 8007a20:	08007a3d 	.word	0x08007a3d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
        break;
 8007a28:	e030      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d025      	beq.n	8007a82 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a3a:	e022      	b.n	8007a82 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a44:	d11f      	bne.n	8007a86 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a4a:	e01c      	b.n	8007a86 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d902      	bls.n	8007a5a <DMA_CheckFifoParam+0xb6>
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d003      	beq.n	8007a60 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a58:	e018      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a5e:	e015      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00e      	beq.n	8007a8a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a70:	e00b      	b.n	8007a8a <DMA_CheckFifoParam+0xe6>
        break;
 8007a72:	bf00      	nop
 8007a74:	e00a      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>
        break;
 8007a76:	bf00      	nop
 8007a78:	e008      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>
        break;
 8007a7a:	bf00      	nop
 8007a7c:	e006      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>
        break;
 8007a7e:	bf00      	nop
 8007a80:	e004      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>
        break;
 8007a82:	bf00      	nop
 8007a84:	e002      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>
        break;
 8007a86:	bf00      	nop
 8007a88:	e000      	b.n	8007a8c <DMA_CheckFifoParam+0xe8>
    break;
 8007a8a:	bf00      	nop
    }
  }

  return status;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop

08007a9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a38      	ldr	r2, [pc, #224]	@ (8007b90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d022      	beq.n	8007afa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a36      	ldr	r2, [pc, #216]	@ (8007b94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d01d      	beq.n	8007afa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a35      	ldr	r2, [pc, #212]	@ (8007b98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d018      	beq.n	8007afa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a33      	ldr	r2, [pc, #204]	@ (8007b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d013      	beq.n	8007afa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a32      	ldr	r2, [pc, #200]	@ (8007ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00e      	beq.n	8007afa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a30      	ldr	r2, [pc, #192]	@ (8007ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d009      	beq.n	8007afa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a2f      	ldr	r2, [pc, #188]	@ (8007ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d004      	beq.n	8007afa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a2d      	ldr	r2, [pc, #180]	@ (8007bac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d101      	bne.n	8007afe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007afe:	2300      	movs	r3, #0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01a      	beq.n	8007b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	3b08      	subs	r3, #8
 8007b0c:	4a28      	ldr	r2, [pc, #160]	@ (8007bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b12:	091b      	lsrs	r3, r3, #4
 8007b14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4b26      	ldr	r3, [pc, #152]	@ (8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	461a      	mov	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a24      	ldr	r2, [pc, #144]	@ (8007bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b28:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	2201      	movs	r2, #1
 8007b32:	409a      	lsls	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b38:	e024      	b.n	8007b84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	3b10      	subs	r3, #16
 8007b42:	4a1e      	ldr	r2, [pc, #120]	@ (8007bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d806      	bhi.n	8007b62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d902      	bls.n	8007b62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4b18      	ldr	r3, [pc, #96]	@ (8007bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a16      	ldr	r2, [pc, #88]	@ (8007bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	409a      	lsls	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	58025408 	.word	0x58025408
 8007b94:	5802541c 	.word	0x5802541c
 8007b98:	58025430 	.word	0x58025430
 8007b9c:	58025444 	.word	0x58025444
 8007ba0:	58025458 	.word	0x58025458
 8007ba4:	5802546c 	.word	0x5802546c
 8007ba8:	58025480 	.word	0x58025480
 8007bac:	58025494 	.word	0x58025494
 8007bb0:	cccccccd 	.word	0xcccccccd
 8007bb4:	16009600 	.word	0x16009600
 8007bb8:	58025880 	.word	0x58025880
 8007bbc:	aaaaaaab 	.word	0xaaaaaaab
 8007bc0:	400204b8 	.word	0x400204b8
 8007bc4:	4002040f 	.word	0x4002040f
 8007bc8:	10008200 	.word	0x10008200
 8007bcc:	40020880 	.word	0x40020880

08007bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d04a      	beq.n	8007c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d847      	bhi.n	8007c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a25      	ldr	r2, [pc, #148]	@ (8007c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d022      	beq.n	8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a24      	ldr	r2, [pc, #144]	@ (8007c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d01d      	beq.n	8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a22      	ldr	r2, [pc, #136]	@ (8007c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d018      	beq.n	8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a21      	ldr	r2, [pc, #132]	@ (8007c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a1f      	ldr	r2, [pc, #124]	@ (8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00e      	beq.n	8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a1e      	ldr	r2, [pc, #120]	@ (8007c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d009      	beq.n	8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d101      	bne.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c40:	2300      	movs	r3, #0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4b17      	ldr	r3, [pc, #92]	@ (8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a15      	ldr	r2, [pc, #84]	@ (8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c58:	671a      	str	r2, [r3, #112]	@ 0x70
 8007c5a:	e009      	b.n	8007c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4b14      	ldr	r3, [pc, #80]	@ (8007cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	461a      	mov	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a11      	ldr	r2, [pc, #68]	@ (8007cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c6e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2201      	movs	r2, #1
 8007c76:	409a      	lsls	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	58025408 	.word	0x58025408
 8007c8c:	5802541c 	.word	0x5802541c
 8007c90:	58025430 	.word	0x58025430
 8007c94:	58025444 	.word	0x58025444
 8007c98:	58025458 	.word	0x58025458
 8007c9c:	5802546c 	.word	0x5802546c
 8007ca0:	58025480 	.word	0x58025480
 8007ca4:	58025494 	.word	0x58025494
 8007ca8:	1600963f 	.word	0x1600963f
 8007cac:	58025940 	.word	0x58025940
 8007cb0:	1000823f 	.word	0x1000823f
 8007cb4:	40020940 	.word	0x40020940

08007cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b089      	sub	sp, #36	@ 0x24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cc6:	4b89      	ldr	r3, [pc, #548]	@ (8007eec <HAL_GPIO_Init+0x234>)
 8007cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cca:	e194      	b.n	8007ff6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd8:	4013      	ands	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 8186 	beq.w	8007ff0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d005      	beq.n	8007cfc <HAL_GPIO_Init+0x44>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d130      	bne.n	8007d5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	2203      	movs	r2, #3
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	4013      	ands	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d32:	2201      	movs	r2, #1
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	091b      	lsrs	r3, r3, #4
 8007d48:	f003 0201 	and.w	r2, r3, #1
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d017      	beq.n	8007d9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	2203      	movs	r2, #3
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	43db      	mvns	r3, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d123      	bne.n	8007dee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	08da      	lsrs	r2, r3, #3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3208      	adds	r2, #8
 8007dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	220f      	movs	r2, #15
 8007dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc2:	43db      	mvns	r3, r3
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	08da      	lsrs	r2, r3, #3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3208      	adds	r2, #8
 8007de8:	69b9      	ldr	r1, [r7, #24]
 8007dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	2203      	movs	r2, #3
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4013      	ands	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f003 0203 	and.w	r2, r3, #3
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 80e0 	beq.w	8007ff0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e30:	4b2f      	ldr	r3, [pc, #188]	@ (8007ef0 <HAL_GPIO_Init+0x238>)
 8007e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e36:	4a2e      	ldr	r2, [pc, #184]	@ (8007ef0 <HAL_GPIO_Init+0x238>)
 8007e38:	f043 0302 	orr.w	r3, r3, #2
 8007e3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007e40:	4b2b      	ldr	r3, [pc, #172]	@ (8007ef0 <HAL_GPIO_Init+0x238>)
 8007e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e4e:	4a29      	ldr	r2, [pc, #164]	@ (8007ef4 <HAL_GPIO_Init+0x23c>)
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	089b      	lsrs	r3, r3, #2
 8007e54:	3302      	adds	r3, #2
 8007e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	220f      	movs	r2, #15
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a20      	ldr	r2, [pc, #128]	@ (8007ef8 <HAL_GPIO_Init+0x240>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d052      	beq.n	8007f20 <HAL_GPIO_Init+0x268>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007efc <HAL_GPIO_Init+0x244>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d031      	beq.n	8007ee6 <HAL_GPIO_Init+0x22e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a1e      	ldr	r2, [pc, #120]	@ (8007f00 <HAL_GPIO_Init+0x248>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d02b      	beq.n	8007ee2 <HAL_GPIO_Init+0x22a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f04 <HAL_GPIO_Init+0x24c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d025      	beq.n	8007ede <HAL_GPIO_Init+0x226>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a1c      	ldr	r2, [pc, #112]	@ (8007f08 <HAL_GPIO_Init+0x250>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d01f      	beq.n	8007eda <HAL_GPIO_Init+0x222>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8007f0c <HAL_GPIO_Init+0x254>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d019      	beq.n	8007ed6 <HAL_GPIO_Init+0x21e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8007f10 <HAL_GPIO_Init+0x258>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d013      	beq.n	8007ed2 <HAL_GPIO_Init+0x21a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a19      	ldr	r2, [pc, #100]	@ (8007f14 <HAL_GPIO_Init+0x25c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00d      	beq.n	8007ece <HAL_GPIO_Init+0x216>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a18      	ldr	r2, [pc, #96]	@ (8007f18 <HAL_GPIO_Init+0x260>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d007      	beq.n	8007eca <HAL_GPIO_Init+0x212>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a17      	ldr	r2, [pc, #92]	@ (8007f1c <HAL_GPIO_Init+0x264>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d101      	bne.n	8007ec6 <HAL_GPIO_Init+0x20e>
 8007ec2:	2309      	movs	r3, #9
 8007ec4:	e02d      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007ec6:	230a      	movs	r3, #10
 8007ec8:	e02b      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007eca:	2308      	movs	r3, #8
 8007ecc:	e029      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007ece:	2307      	movs	r3, #7
 8007ed0:	e027      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007ed2:	2306      	movs	r3, #6
 8007ed4:	e025      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007ed6:	2305      	movs	r3, #5
 8007ed8:	e023      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007eda:	2304      	movs	r3, #4
 8007edc:	e021      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e01f      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e01d      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e01b      	b.n	8007f22 <HAL_GPIO_Init+0x26a>
 8007eea:	bf00      	nop
 8007eec:	58000080 	.word	0x58000080
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	58000400 	.word	0x58000400
 8007ef8:	58020000 	.word	0x58020000
 8007efc:	58020400 	.word	0x58020400
 8007f00:	58020800 	.word	0x58020800
 8007f04:	58020c00 	.word	0x58020c00
 8007f08:	58021000 	.word	0x58021000
 8007f0c:	58021400 	.word	0x58021400
 8007f10:	58021800 	.word	0x58021800
 8007f14:	58021c00 	.word	0x58021c00
 8007f18:	58022000 	.word	0x58022000
 8007f1c:	58022400 	.word	0x58022400
 8007f20:	2300      	movs	r3, #0
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	f002 0203 	and.w	r2, r2, #3
 8007f28:	0092      	lsls	r2, r2, #2
 8007f2a:	4093      	lsls	r3, r2
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f32:	4938      	ldr	r1, [pc, #224]	@ (8008014 <HAL_GPIO_Init+0x35c>)
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	089b      	lsrs	r3, r3, #2
 8007f38:	3302      	adds	r3, #2
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	43db      	mvns	r3, r3
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	43db      	mvns	r3, r3
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	43db      	mvns	r3, r3
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	4013      	ands	r3, r2
 8007faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	f47f ae63 	bne.w	8007ccc <HAL_GPIO_Init+0x14>
  }
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	3724      	adds	r7, #36	@ 0x24
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	58000400 	.word	0x58000400

08008018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	887b      	ldrh	r3, [r7, #2]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008030:	2301      	movs	r3, #1
 8008032:	73fb      	strb	r3, [r7, #15]
 8008034:	e001      	b.n	800803a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	807b      	strh	r3, [r7, #2]
 8008054:	4613      	mov	r3, r2
 8008056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008058:	787b      	ldrb	r3, [r7, #1]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800805e:	887a      	ldrh	r2, [r7, #2]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008064:	e003      	b.n	800806e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008066:	887b      	ldrh	r3, [r7, #2]
 8008068:	041a      	lsls	r2, r3, #16
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	619a      	str	r2, [r3, #24]
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e08b      	b.n	80081a6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fa f8b6 	bl	8002214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2224      	movs	r2, #36	@ 0x24
 80080ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0201 	bic.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80080cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d107      	bne.n	80080f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080f2:	609a      	str	r2, [r3, #8]
 80080f4:	e006      	b.n	8008104 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008102:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d108      	bne.n	800811e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800811a:	605a      	str	r2, [r3, #4]
 800811c:	e007      	b.n	800812e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800812c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6859      	ldr	r1, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	4b1d      	ldr	r3, [pc, #116]	@ (80081b0 <HAL_I2C_Init+0x134>)
 800813a:	430b      	orrs	r3, r1
 800813c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800814c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691a      	ldr	r2, [r3, #16]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	69d9      	ldr	r1, [r3, #28]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1a      	ldr	r2, [r3, #32]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	02008000 	.word	0x02008000

080081b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	461a      	mov	r2, r3
 80081c0:	460b      	mov	r3, r1
 80081c2:	817b      	strh	r3, [r7, #10]
 80081c4:	4613      	mov	r3, r2
 80081c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	f040 80fd 	bne.w	80083d0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_I2C_Master_Transmit+0x30>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e0f6      	b.n	80083d2 <HAL_I2C_Master_Transmit+0x21e>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081ec:	f7fb fa98 	bl	8003720 <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	2319      	movs	r3, #25
 80081f8:	2201      	movs	r2, #1
 80081fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f002 f89e 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e0e1      	b.n	80083d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2221      	movs	r2, #33	@ 0x21
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2210      	movs	r2, #16
 800821a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	893a      	ldrh	r2, [r7, #8]
 800822e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800823a:	b29b      	uxth	r3, r3
 800823c:	2bff      	cmp	r3, #255	@ 0xff
 800823e:	d906      	bls.n	800824e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	22ff      	movs	r2, #255	@ 0xff
 8008244:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008246:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	e007      	b.n	800825e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008252:	b29a      	uxth	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008258:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800825c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	d024      	beq.n	80082b0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800829a:	b2db      	uxtb	r3, r3
 800829c:	3301      	adds	r3, #1
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	8979      	ldrh	r1, [r7, #10]
 80082a2:	4b4e      	ldr	r3, [pc, #312]	@ (80083dc <HAL_I2C_Master_Transmit+0x228>)
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f002 fa0d 	bl	800a6c8 <I2C_TransferConfig>
 80082ae:	e066      	b.n	800837e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	8979      	ldrh	r1, [r7, #10]
 80082b8:	4b48      	ldr	r3, [pc, #288]	@ (80083dc <HAL_I2C_Master_Transmit+0x228>)
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f002 fa02 	bl	800a6c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80082c4:	e05b      	b.n	800837e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	6a39      	ldr	r1, [r7, #32]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f002 f891 	bl	800a3f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e07b      	b.n	80083d2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008302:	3b01      	subs	r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800830e:	b29b      	uxth	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	d034      	beq.n	800837e <HAL_I2C_Master_Transmit+0x1ca>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008318:	2b00      	cmp	r3, #0
 800831a:	d130      	bne.n	800837e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	2200      	movs	r2, #0
 8008324:	2180      	movs	r1, #128	@ 0x80
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f002 f80a 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e04d      	b.n	80083d2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800833a:	b29b      	uxth	r3, r3
 800833c:	2bff      	cmp	r3, #255	@ 0xff
 800833e:	d90e      	bls.n	800835e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	22ff      	movs	r2, #255	@ 0xff
 8008344:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800834a:	b2da      	uxtb	r2, r3
 800834c:	8979      	ldrh	r1, [r7, #10]
 800834e:	2300      	movs	r3, #0
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f002 f9b6 	bl	800a6c8 <I2C_TransferConfig>
 800835c:	e00f      	b.n	800837e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008362:	b29a      	uxth	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800836c:	b2da      	uxtb	r2, r3
 800836e:	8979      	ldrh	r1, [r7, #10]
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f002 f9a5 	bl	800a6c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d19e      	bne.n	80082c6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	6a39      	ldr	r1, [r7, #32]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f002 f877 	bl	800a480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e01a      	b.n	80083d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2220      	movs	r2, #32
 80083a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6859      	ldr	r1, [r3, #4]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b0c      	ldr	r3, [pc, #48]	@ (80083e0 <HAL_I2C_Master_Transmit+0x22c>)
 80083b0:	400b      	ands	r3, r1
 80083b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	e000      	b.n	80083d2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80083d0:	2302      	movs	r3, #2
  }
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	80002000 	.word	0x80002000
 80083e0:	fe00e800 	.word	0xfe00e800

080083e4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	@ 0x28
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	461a      	mov	r2, r3
 80083f0:	460b      	mov	r3, r1
 80083f2:	817b      	strh	r3, [r7, #10]
 80083f4:	4613      	mov	r3, r2
 80083f6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b20      	cmp	r3, #32
 8008406:	f040 80ef 	bne.w	80085e8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008418:	d101      	bne.n	800841e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800841a:	2302      	movs	r3, #2
 800841c:	e0e5      	b.n	80085ea <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_I2C_Master_Transmit_DMA+0x48>
 8008428:	2302      	movs	r3, #2
 800842a:	e0de      	b.n	80085ea <HAL_I2C_Master_Transmit_DMA+0x206>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2221      	movs	r2, #33	@ 0x21
 8008438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2210      	movs	r2, #16
 8008440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	893a      	ldrh	r2, [r7, #8]
 8008454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4a66      	ldr	r2, [pc, #408]	@ (80085f4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800845a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4a66      	ldr	r2, [pc, #408]	@ (80085f8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8008460:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008466:	b29b      	uxth	r3, r3
 8008468:	2bff      	cmp	r3, #255	@ 0xff
 800846a:	d906      	bls.n	800847a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	22ff      	movs	r2, #255	@ 0xff
 8008470:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008472:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	e007      	b.n	800848a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008484:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008488:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800848e:	2b00      	cmp	r3, #0
 8008490:	d01a      	beq.n	80084c8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008496:	781a      	ldrb	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ac:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d074      	beq.n	80085ba <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d022      	beq.n	800851e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084dc:	4a47      	ldr	r2, [pc, #284]	@ (80085fc <HAL_I2C_Master_Transmit_DMA+0x218>)
 80084de:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	4a46      	ldr	r2, [pc, #280]	@ (8008600 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80084e6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ec:	2200      	movs	r2, #0
 80084ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f4:	2200      	movs	r2, #0
 80084f6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008508:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800850e:	f7fd f8d9 	bl	80056c4 <HAL_DMA_Start_IT>
 8008512:	4603      	mov	r3, r0
 8008514:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008516:	7dfb      	ldrb	r3, [r7, #23]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d13a      	bne.n	8008592 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800851c:	e013      	b.n	8008546 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008532:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e051      	b.n	80085ea <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800854a:	b2db      	uxtb	r3, r3
 800854c:	3301      	adds	r3, #1
 800854e:	b2da      	uxtb	r2, r3
 8008550:	8979      	ldrh	r1, [r7, #10]
 8008552:	4b2c      	ldr	r3, [pc, #176]	@ (8008604 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f002 f8b5 	bl	800a6c8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008578:	2110      	movs	r1, #16
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f002 f8d6 	bl	800a72c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	e028      	b.n	80085e4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2220      	movs	r2, #32
 8008596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a6:	f043 0210 	orr.w	r2, r3, #16
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e017      	b.n	80085ea <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4a12      	ldr	r2, [pc, #72]	@ (8008608 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80085be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	8979      	ldrh	r1, [r7, #10]
 80085c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008604 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f002 f87a 	bl	800a6c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80085dc:	2101      	movs	r1, #1
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f002 f8a4 	bl	800a72c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e000      	b.n	80085ea <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80085e8:	2302      	movs	r3, #2
  }
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	ffff0000 	.word	0xffff0000
 80085f8:	08008c43 	.word	0x08008c43
 80085fc:	08009ffb 	.word	0x08009ffb
 8008600:	0800a091 	.word	0x0800a091
 8008604:	80002000 	.word	0x80002000
 8008608:	080087d3 	.word	0x080087d3

0800860c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	4798      	blx	r3
  }
}
 8008638:	bf00      	nop
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	0a1b      	lsrs	r3, r3, #8
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d010      	beq.n	8008686 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	09db      	lsrs	r3, r3, #7
 8008668:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008674:	f043 0201 	orr.w	r2, r3, #1
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008684:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	0a9b      	lsrs	r3, r3, #10
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d010      	beq.n	80086b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	09db      	lsrs	r3, r3, #7
 8008696:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a2:	f043 0208 	orr.w	r2, r3, #8
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80086b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	0a5b      	lsrs	r3, r3, #9
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d010      	beq.n	80086e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	09db      	lsrs	r3, r3, #7
 80086c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d0:	f043 0202 	orr.w	r2, r3, #2
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f003 030b 	and.w	r3, r3, #11
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 fb45 	bl	8009d84 <I2C_ITError>
  }
}
 80086fa:	bf00      	nop
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	70fb      	strb	r3, [r7, #3]
 800875e:	4613      	mov	r3, r2
 8008760:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b088      	sub	sp, #32
 80087d6:	af02      	add	r7, sp, #8
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <I2C_Master_ISR_IT+0x1e>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e120      	b.n	8008a32 <I2C_Master_ISR_IT+0x260>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	091b      	lsrs	r3, r3, #4
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d013      	beq.n	800882c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	091b      	lsrs	r3, r3, #4
 8008808:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00d      	beq.n	800882c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2210      	movs	r2, #16
 8008816:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881c:	f043 0204 	orr.w	r2, r3, #4
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f001 fbc4 	bl	8009fb2 <I2C_Flush_TXDR>
 800882a:	e0ed      	b.n	8008a08 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	089b      	lsrs	r3, r3, #2
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d023      	beq.n	8008880 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	089b      	lsrs	r3, r3, #2
 800883c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01d      	beq.n	8008880 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0304 	bic.w	r3, r3, #4
 800884a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	b29a      	uxth	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800887e:	e0c3      	b.n	8008a08 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	099b      	lsrs	r3, r3, #6
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d12a      	bne.n	80088e2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008894:	2b00      	cmp	r3, #0
 8008896:	d024      	beq.n	80088e2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01e      	beq.n	80088e2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 80ac 	beq.w	8008a08 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80088e0:	e092      	b.n	8008a08 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	09db      	lsrs	r3, r3, #7
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d05d      	beq.n	80089aa <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	099b      	lsrs	r3, r3, #6
 80088f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d057      	beq.n	80089aa <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d040      	beq.n	8008986 <I2C_Master_ISR_IT+0x1b4>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008908:	2b00      	cmp	r3, #0
 800890a:	d13c      	bne.n	8008986 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	b29b      	uxth	r3, r3
 8008914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008918:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800891e:	b29b      	uxth	r3, r3
 8008920:	2bff      	cmp	r3, #255	@ 0xff
 8008922:	d90e      	bls.n	8008942 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	22ff      	movs	r2, #255	@ 0xff
 8008928:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800892e:	b2da      	uxtb	r2, r3
 8008930:	8a79      	ldrh	r1, [r7, #18]
 8008932:	2300      	movs	r3, #0
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f001 fec4 	bl	800a6c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008940:	e032      	b.n	80089a8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008954:	d00b      	beq.n	800896e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800895a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008960:	8a79      	ldrh	r1, [r7, #18]
 8008962:	2000      	movs	r0, #0
 8008964:	9000      	str	r0, [sp, #0]
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f001 feae 	bl	800a6c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800896c:	e01c      	b.n	80089a8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008972:	b2da      	uxtb	r2, r3
 8008974:	8a79      	ldrh	r1, [r7, #18]
 8008976:	2300      	movs	r3, #0
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f001 fea2 	bl	800a6c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008984:	e010      	b.n	80089a8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008994:	d003      	beq.n	800899e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fdde 	bl	8009558 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800899c:	e034      	b.n	8008a08 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800899e:	2140      	movs	r1, #64	@ 0x40
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f001 f9ef 	bl	8009d84 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089a6:	e02f      	b.n	8008a08 <I2C_Master_ISR_IT+0x236>
 80089a8:	e02e      	b.n	8008a08 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	099b      	lsrs	r3, r3, #6
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d028      	beq.n	8008a08 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	099b      	lsrs	r3, r3, #6
 80089ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d022      	beq.n	8008a08 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d119      	bne.n	8008a00 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089da:	d015      	beq.n	8008a08 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089e4:	d108      	bne.n	80089f8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	e007      	b.n	8008a08 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fdad 	bl	8009558 <I2C_ITMasterSeqCplt>
 80089fe:	e003      	b.n	8008a08 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a00:	2140      	movs	r1, #64	@ 0x40
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f001 f9be 	bl	8009d84 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	095b      	lsrs	r3, r3, #5
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d009      	beq.n	8008a28 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008a20:	6979      	ldr	r1, [r7, #20]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fe34 	bl	8009690 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b086      	sub	sp, #24
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	60b9      	str	r1, [r7, #8]
 8008a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <I2C_Slave_ISR_IT+0x24>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e0ed      	b.n	8008c3a <I2C_Slave_ISR_IT+0x200>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008a7e:	6939      	ldr	r1, [r7, #16]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fecf 	bl	8009824 <I2C_ITSlaveCplt>
 8008a86:	e0d3      	b.n	8008c30 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	091b      	lsrs	r3, r3, #4
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d04d      	beq.n	8008b30 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	091b      	lsrs	r3, r3, #4
 8008a98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d047      	beq.n	8008b30 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d128      	bne.n	8008afc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b28      	cmp	r3, #40	@ 0x28
 8008ab4:	d108      	bne.n	8008ac8 <I2C_Slave_ISR_IT+0x8e>
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008abc:	d104      	bne.n	8008ac8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008abe:	6939      	ldr	r1, [r7, #16]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f001 f909 	bl	8009cd8 <I2C_ITListenCplt>
 8008ac6:	e032      	b.n	8008b2e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b29      	cmp	r3, #41	@ 0x29
 8008ad2:	d10e      	bne.n	8008af2 <I2C_Slave_ISR_IT+0xb8>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ada:	d00a      	beq.n	8008af2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2210      	movs	r2, #16
 8008ae2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f001 fa64 	bl	8009fb2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 fd71 	bl	80095d2 <I2C_ITSlaveSeqCplt>
 8008af0:	e01d      	b.n	8008b2e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2210      	movs	r2, #16
 8008af8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008afa:	e096      	b.n	8008c2a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2210      	movs	r2, #16
 8008b02:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b08:	f043 0204 	orr.w	r2, r3, #4
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d004      	beq.n	8008b20 <I2C_Slave_ISR_IT+0xe6>
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b1c:	f040 8085 	bne.w	8008c2a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b24:	4619      	mov	r1, r3
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f001 f92c 	bl	8009d84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008b2c:	e07d      	b.n	8008c2a <I2C_Slave_ISR_IT+0x1f0>
 8008b2e:	e07c      	b.n	8008c2a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	089b      	lsrs	r3, r3, #2
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d030      	beq.n	8008b9e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	089b      	lsrs	r3, r3, #2
 8008b40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d02a      	beq.n	8008b9e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d018      	beq.n	8008b84 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	b2d2      	uxtb	r2, r2
 8008b5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b64:	1c5a      	adds	r2, r3, #1
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d14f      	bne.n	8008c2e <I2C_Slave_ISR_IT+0x1f4>
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b94:	d04b      	beq.n	8008c2e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fd1b 	bl	80095d2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008b9c:	e047      	b.n	8008c2e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	08db      	lsrs	r3, r3, #3
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	08db      	lsrs	r3, r3, #3
 8008bae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008bb6:	6939      	ldr	r1, [r7, #16]
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fc49 	bl	8009450 <I2C_ITAddrCplt>
 8008bbe:	e037      	b.n	8008c30 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	085b      	lsrs	r3, r3, #1
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d031      	beq.n	8008c30 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	085b      	lsrs	r3, r3, #1
 8008bd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d02b      	beq.n	8008c30 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d018      	beq.n	8008c14 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008c12:	e00d      	b.n	8008c30 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c1a:	d002      	beq.n	8008c22 <I2C_Slave_ISR_IT+0x1e8>
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fcd5 	bl	80095d2 <I2C_ITSlaveSeqCplt>
 8008c28:	e002      	b.n	8008c30 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008c2a:	bf00      	nop
 8008c2c:	e000      	b.n	8008c30 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8008c2e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b088      	sub	sp, #32
 8008c46:	af02      	add	r7, sp, #8
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <I2C_Master_ISR_DMA+0x1a>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e0e1      	b.n	8008e20 <I2C_Master_ISR_DMA+0x1de>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	091b      	lsrs	r3, r3, #4
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d017      	beq.n	8008ca0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	091b      	lsrs	r3, r3, #4
 8008c74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d011      	beq.n	8008ca0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2210      	movs	r2, #16
 8008c82:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c88:	f043 0204 	orr.w	r2, r3, #4
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008c90:	2120      	movs	r1, #32
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f001 fd4a 	bl	800a72c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f001 f98a 	bl	8009fb2 <I2C_Flush_TXDR>
 8008c9e:	e0ba      	b.n	8008e16 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	09db      	lsrs	r3, r3, #7
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d072      	beq.n	8008d92 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	099b      	lsrs	r3, r3, #6
 8008cb0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d06c      	beq.n	8008d92 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d04e      	beq.n	8008d70 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cde:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2bff      	cmp	r3, #255	@ 0xff
 8008ce8:	d906      	bls.n	8008cf8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	22ff      	movs	r2, #255	@ 0xff
 8008cee:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008cf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	e010      	b.n	8008d1a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008d0a:	d003      	beq.n	8008d14 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d10:	617b      	str	r3, [r7, #20]
 8008d12:	e002      	b.n	8008d1a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d18:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	8a79      	ldrh	r1, [r7, #18]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f001 fccd 	bl	800a6c8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b22      	cmp	r3, #34	@ 0x22
 8008d4a:	d108      	bne.n	8008d5e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d5a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008d5c:	e05b      	b.n	8008e16 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008d6e:	e052      	b.n	8008e16 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d7e:	d003      	beq.n	8008d88 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 fbe9 	bl	8009558 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008d86:	e046      	b.n	8008e16 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008d88:	2140      	movs	r1, #64	@ 0x40
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 fffa 	bl	8009d84 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008d90:	e041      	b.n	8008e16 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	099b      	lsrs	r3, r3, #6
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d029      	beq.n	8008df2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	099b      	lsrs	r3, r3, #6
 8008da2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d023      	beq.n	8008df2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d119      	bne.n	8008de8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dc2:	d027      	beq.n	8008e14 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008dcc:	d108      	bne.n	8008de0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ddc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008dde:	e019      	b.n	8008e14 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 fbb9 	bl	8009558 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008de6:	e015      	b.n	8008e14 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008de8:	2140      	movs	r1, #64	@ 0x40
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 ffca 	bl	8009d84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008df0:	e010      	b.n	8008e14 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	095b      	lsrs	r3, r3, #5
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00b      	beq.n	8008e16 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	095b      	lsrs	r3, r3, #5
 8008e02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008e0a:	68b9      	ldr	r1, [r7, #8]
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 fc3f 	bl	8009690 <I2C_ITMasterCplt>
 8008e12:	e000      	b.n	8008e16 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008e14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008e34:	4b92      	ldr	r3, [pc, #584]	@ (8009080 <I2C_Mem_ISR_DMA+0x258>)
 8008e36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <I2C_Mem_ISR_DMA+0x1e>
 8008e42:	2302      	movs	r3, #2
 8008e44:	e118      	b.n	8009078 <I2C_Mem_ISR_DMA+0x250>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	091b      	lsrs	r3, r3, #4
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d017      	beq.n	8008e8a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	091b      	lsrs	r3, r3, #4
 8008e5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d011      	beq.n	8008e8a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2210      	movs	r2, #16
 8008e6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e72:	f043 0204 	orr.w	r2, r3, #4
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008e7a:	2120      	movs	r1, #32
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f001 fc55 	bl	800a72c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f001 f895 	bl	8009fb2 <I2C_Flush_TXDR>
 8008e88:	e0f1      	b.n	800906e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	085b      	lsrs	r3, r3, #1
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00f      	beq.n	8008eb6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008eaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8008eb4:	e0db      	b.n	800906e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	09db      	lsrs	r3, r3, #7
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d060      	beq.n	8008f84 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	099b      	lsrs	r3, r3, #6
 8008ec6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d05a      	beq.n	8008f84 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ece:	2101      	movs	r1, #1
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f001 fcaf 	bl	800a834 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008ed6:	2110      	movs	r1, #16
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f001 fc27 	bl	800a72c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d048      	beq.n	8008f7a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	2bff      	cmp	r3, #255	@ 0xff
 8008ef0:	d910      	bls.n	8008f14 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	22ff      	movs	r2, #255	@ 0xff
 8008ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008efc:	b299      	uxth	r1, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	2300      	movs	r3, #0
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f001 fbdb 	bl	800a6c8 <I2C_TransferConfig>
 8008f12:	e011      	b.n	8008f38 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f22:	b299      	uxth	r1, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f001 fbc8 	bl	800a6c8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b22      	cmp	r3, #34	@ 0x22
 8008f54:	d108      	bne.n	8008f68 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f64:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008f66:	e082      	b.n	800906e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008f78:	e079      	b.n	800906e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008f7a:	2140      	movs	r1, #64	@ 0x40
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 ff01 	bl	8009d84 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008f82:	e074      	b.n	800906e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d05e      	beq.n	800904e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	099b      	lsrs	r3, r3, #6
 8008f94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d058      	beq.n	800904e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f001 fc48 	bl	800a834 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008fa4:	2110      	movs	r1, #16
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f001 fbc0 	bl	800a72c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b22      	cmp	r3, #34	@ 0x22
 8008fb6:	d101      	bne.n	8008fbc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8008fb8:	4b32      	ldr	r3, [pc, #200]	@ (8009084 <I2C_Mem_ISR_DMA+0x25c>)
 8008fba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2bff      	cmp	r3, #255	@ 0xff
 8008fc4:	d910      	bls.n	8008fe8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	22ff      	movs	r2, #255	@ 0xff
 8008fca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fd0:	b299      	uxth	r1, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 fb71 	bl	800a6c8 <I2C_TransferConfig>
 8008fe6:	e011      	b.n	800900c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff6:	b299      	uxth	r1, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f001 fb5e 	bl	800a6c8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b22      	cmp	r3, #34	@ 0x22
 8009028:	d108      	bne.n	800903c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009038:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800903a:	e018      	b.n	800906e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800904a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800904c:	e00f      	b.n	800906e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009066:	68b9      	ldr	r1, [r7, #8]
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 fb11 	bl	8009690 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	80002000 	.word	0x80002000
 8009084:	80002400 	.word	0x80002400

08009088 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009098:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <I2C_Slave_ISR_DMA+0x24>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e1cc      	b.n	8009446 <I2C_Slave_ISR_DMA+0x3be>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	095b      	lsrs	r3, r3, #5
 80090c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80090cc:	68b9      	ldr	r1, [r7, #8]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fba8 	bl	8009824 <I2C_ITSlaveCplt>
 80090d4:	e1b2      	b.n	800943c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	091b      	lsrs	r3, r3, #4
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 819c 	beq.w	800941c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	091b      	lsrs	r3, r3, #4
 80090e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 8195 	beq.w	800941c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	0b9b      	lsrs	r3, r3, #14
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	0bdb      	lsrs	r3, r3, #15
 8009102:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 8181 	beq.w	800940e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d07c      	beq.n	800920e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	0bdb      	lsrs	r3, r3, #15
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d076      	beq.n	800920e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a75      	ldr	r2, [pc, #468]	@ (80092fc <I2C_Slave_ISR_DMA+0x274>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d059      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a73      	ldr	r2, [pc, #460]	@ (8009300 <I2C_Slave_ISR_DMA+0x278>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d053      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a71      	ldr	r2, [pc, #452]	@ (8009304 <I2C_Slave_ISR_DMA+0x27c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d04d      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a6f      	ldr	r2, [pc, #444]	@ (8009308 <I2C_Slave_ISR_DMA+0x280>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d047      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a6d      	ldr	r2, [pc, #436]	@ (800930c <I2C_Slave_ISR_DMA+0x284>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d041      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a6b      	ldr	r2, [pc, #428]	@ (8009310 <I2C_Slave_ISR_DMA+0x288>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d03b      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a69      	ldr	r2, [pc, #420]	@ (8009314 <I2C_Slave_ISR_DMA+0x28c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d035      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a67      	ldr	r2, [pc, #412]	@ (8009318 <I2C_Slave_ISR_DMA+0x290>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d02f      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a65      	ldr	r2, [pc, #404]	@ (800931c <I2C_Slave_ISR_DMA+0x294>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d029      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a63      	ldr	r2, [pc, #396]	@ (8009320 <I2C_Slave_ISR_DMA+0x298>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d023      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a61      	ldr	r2, [pc, #388]	@ (8009324 <I2C_Slave_ISR_DMA+0x29c>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d01d      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a5f      	ldr	r2, [pc, #380]	@ (8009328 <I2C_Slave_ISR_DMA+0x2a0>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d017      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a5d      	ldr	r2, [pc, #372]	@ (800932c <I2C_Slave_ISR_DMA+0x2a4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d011      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a5b      	ldr	r2, [pc, #364]	@ (8009330 <I2C_Slave_ISR_DMA+0x2a8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00b      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a59      	ldr	r2, [pc, #356]	@ (8009334 <I2C_Slave_ISR_DMA+0x2ac>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d005      	beq.n	80091e0 <I2C_Slave_ISR_DMA+0x158>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a57      	ldr	r2, [pc, #348]	@ (8009338 <I2C_Slave_ISR_DMA+0x2b0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d109      	bne.n	80091f4 <I2C_Slave_ISR_DMA+0x16c>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bf0c      	ite	eq
 80091ec:	2301      	moveq	r3, #1
 80091ee:	2300      	movne	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	e008      	b.n	8009206 <I2C_Slave_ISR_DMA+0x17e>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bf0c      	ite	eq
 8009200:	2301      	moveq	r3, #1
 8009202:	2300      	movne	r3, #0
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800920a:	2301      	movs	r3, #1
 800920c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 809f 	beq.w	8009356 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	0b9b      	lsrs	r3, r3, #14
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 8098 	beq.w	8009356 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a33      	ldr	r2, [pc, #204]	@ (80092fc <I2C_Slave_ISR_DMA+0x274>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d059      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a31      	ldr	r2, [pc, #196]	@ (8009300 <I2C_Slave_ISR_DMA+0x278>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d053      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a2f      	ldr	r2, [pc, #188]	@ (8009304 <I2C_Slave_ISR_DMA+0x27c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d04d      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a2d      	ldr	r2, [pc, #180]	@ (8009308 <I2C_Slave_ISR_DMA+0x280>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d047      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a2b      	ldr	r2, [pc, #172]	@ (800930c <I2C_Slave_ISR_DMA+0x284>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d041      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a29      	ldr	r2, [pc, #164]	@ (8009310 <I2C_Slave_ISR_DMA+0x288>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d03b      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a27      	ldr	r2, [pc, #156]	@ (8009314 <I2C_Slave_ISR_DMA+0x28c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d035      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a25      	ldr	r2, [pc, #148]	@ (8009318 <I2C_Slave_ISR_DMA+0x290>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d02f      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a23      	ldr	r2, [pc, #140]	@ (800931c <I2C_Slave_ISR_DMA+0x294>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d029      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a21      	ldr	r2, [pc, #132]	@ (8009320 <I2C_Slave_ISR_DMA+0x298>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d023      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009324 <I2C_Slave_ISR_DMA+0x29c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d01d      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009328 <I2C_Slave_ISR_DMA+0x2a0>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d017      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a1b      	ldr	r2, [pc, #108]	@ (800932c <I2C_Slave_ISR_DMA+0x2a4>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d011      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a19      	ldr	r2, [pc, #100]	@ (8009330 <I2C_Slave_ISR_DMA+0x2a8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00b      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a17      	ldr	r2, [pc, #92]	@ (8009334 <I2C_Slave_ISR_DMA+0x2ac>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d005      	beq.n	80092e6 <I2C_Slave_ISR_DMA+0x25e>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a15      	ldr	r2, [pc, #84]	@ (8009338 <I2C_Slave_ISR_DMA+0x2b0>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d12a      	bne.n	800933c <I2C_Slave_ISR_DMA+0x2b4>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bf0c      	ite	eq
 80092f2:	2301      	moveq	r3, #1
 80092f4:	2300      	movne	r3, #0
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	e029      	b.n	800934e <I2C_Slave_ISR_DMA+0x2c6>
 80092fa:	bf00      	nop
 80092fc:	40020010 	.word	0x40020010
 8009300:	40020028 	.word	0x40020028
 8009304:	40020040 	.word	0x40020040
 8009308:	40020058 	.word	0x40020058
 800930c:	40020070 	.word	0x40020070
 8009310:	40020088 	.word	0x40020088
 8009314:	400200a0 	.word	0x400200a0
 8009318:	400200b8 	.word	0x400200b8
 800931c:	40020410 	.word	0x40020410
 8009320:	40020428 	.word	0x40020428
 8009324:	40020440 	.word	0x40020440
 8009328:	40020458 	.word	0x40020458
 800932c:	40020470 	.word	0x40020470
 8009330:	40020488 	.word	0x40020488
 8009334:	400204a0 	.word	0x400204a0
 8009338:	400204b8 	.word	0x400204b8
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	bf0c      	ite	eq
 8009348:	2301      	moveq	r3, #1
 800934a:	2300      	movne	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8009352:	2301      	movs	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d128      	bne.n	80093ae <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b28      	cmp	r3, #40	@ 0x28
 8009366:	d108      	bne.n	800937a <I2C_Slave_ISR_DMA+0x2f2>
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800936e:	d104      	bne.n	800937a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009370:	68b9      	ldr	r1, [r7, #8]
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 fcb0 	bl	8009cd8 <I2C_ITListenCplt>
 8009378:	e048      	b.n	800940c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b29      	cmp	r3, #41	@ 0x29
 8009384:	d10e      	bne.n	80093a4 <I2C_Slave_ISR_DMA+0x31c>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800938c:	d00a      	beq.n	80093a4 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2210      	movs	r2, #16
 8009394:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 fe0b 	bl	8009fb2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 f918 	bl	80095d2 <I2C_ITSlaveSeqCplt>
 80093a2:	e033      	b.n	800940c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2210      	movs	r2, #16
 80093aa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80093ac:	e034      	b.n	8009418 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2210      	movs	r2, #16
 80093b4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ba:	f043 0204 	orr.w	r2, r3, #4
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093c8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <I2C_Slave_ISR_DMA+0x350>
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093d6:	d11f      	bne.n	8009418 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	2b21      	cmp	r3, #33	@ 0x21
 80093dc:	d002      	beq.n	80093e4 <I2C_Slave_ISR_DMA+0x35c>
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	2b29      	cmp	r3, #41	@ 0x29
 80093e2:	d103      	bne.n	80093ec <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2221      	movs	r2, #33	@ 0x21
 80093e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80093ea:	e008      	b.n	80093fe <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
 80093ee:	2b22      	cmp	r3, #34	@ 0x22
 80093f0:	d002      	beq.n	80093f8 <I2C_Slave_ISR_DMA+0x370>
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80093f6:	d102      	bne.n	80093fe <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2222      	movs	r2, #34	@ 0x22
 80093fc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009402:	4619      	mov	r1, r3
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fcbd 	bl	8009d84 <I2C_ITError>
      if (treatdmanack == 1U)
 800940a:	e005      	b.n	8009418 <I2C_Slave_ISR_DMA+0x390>
 800940c:	e004      	b.n	8009418 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2210      	movs	r2, #16
 8009414:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009416:	e011      	b.n	800943c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8009418:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800941a:	e00f      	b.n	800943c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	08db      	lsrs	r3, r3, #3
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d009      	beq.n	800943c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	08db      	lsrs	r3, r3, #3
 800942c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009434:	68b9      	ldr	r1, [r7, #8]
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 f80a 	bl	8009450 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3720      	adds	r7, #32
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop

08009450 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009466:	2b28      	cmp	r3, #40	@ 0x28
 8009468:	d16a      	bne.n	8009540 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	0c1b      	lsrs	r3, r3, #16
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	0c1b      	lsrs	r3, r3, #16
 8009482:	b29b      	uxth	r3, r3
 8009484:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009488:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009496:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80094a4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d138      	bne.n	8009520 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80094ae:	897b      	ldrh	r3, [r7, #10]
 80094b0:	09db      	lsrs	r3, r3, #7
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	89bb      	ldrh	r3, [r7, #12]
 80094b6:	4053      	eors	r3, r2
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	f003 0306 	and.w	r3, r3, #6
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d11c      	bne.n	80094fc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80094c2:	897b      	ldrh	r3, [r7, #10]
 80094c4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d13b      	bne.n	8009550 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2208      	movs	r2, #8
 80094e4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80094ee:	89ba      	ldrh	r2, [r7, #12]
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff f92c 	bl	8008752 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80094fa:	e029      	b.n	8009550 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80094fc:	893b      	ldrh	r3, [r7, #8]
 80094fe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009500:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 f995 	bl	800a834 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009512:	89ba      	ldrh	r2, [r7, #12]
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7ff f91a 	bl	8008752 <HAL_I2C_AddrCallback>
}
 800951e:	e017      	b.n	8009550 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009520:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f985 	bl	800a834 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009532:	89ba      	ldrh	r2, [r7, #12]
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff f90a 	bl	8008752 <HAL_I2C_AddrCallback>
}
 800953e:	e007      	b.n	8009550 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2208      	movs	r2, #8
 8009546:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b21      	cmp	r3, #33	@ 0x21
 8009572:	d115      	bne.n	80095a0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2211      	movs	r2, #17
 8009580:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009588:	2101      	movs	r1, #1
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 f952 	bl	800a834 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff f8b2 	bl	8008702 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800959e:	e014      	b.n	80095ca <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2212      	movs	r2, #18
 80095ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80095b4:	2102      	movs	r1, #2
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f001 f93c 	bl	800a834 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff f8a6 	bl	8008716 <HAL_I2C_MasterRxCpltCallback>
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	0b9b      	lsrs	r3, r3, #14
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d008      	beq.n	8009608 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e00d      	b.n	8009624 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	0bdb      	lsrs	r3, r3, #15
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d007      	beq.n	8009624 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009622:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b29      	cmp	r3, #41	@ 0x29
 800962e:	d112      	bne.n	8009656 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2228      	movs	r2, #40	@ 0x28
 8009634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2221      	movs	r2, #33	@ 0x21
 800963c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800963e:	2101      	movs	r1, #1
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f001 f8f7 	bl	800a834 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff f86b 	bl	800872a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009654:	e017      	b.n	8009686 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009660:	d111      	bne.n	8009686 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2228      	movs	r2, #40	@ 0x28
 8009666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2222      	movs	r2, #34	@ 0x22
 800966e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009670:	2102      	movs	r1, #2
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 f8de 	bl	800a834 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff f85c 	bl	800873e <HAL_I2C_SlaveRxCpltCallback>
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2220      	movs	r2, #32
 80096a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b21      	cmp	r3, #33	@ 0x21
 80096b0:	d107      	bne.n	80096c2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80096b2:	2101      	movs	r1, #1
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 f8bd 	bl	800a834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2211      	movs	r2, #17
 80096be:	631a      	str	r2, [r3, #48]	@ 0x30
 80096c0:	e00c      	b.n	80096dc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b22      	cmp	r3, #34	@ 0x22
 80096cc:	d106      	bne.n	80096dc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80096ce:	2102      	movs	r1, #2
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f001 f8af 	bl	800a834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2212      	movs	r2, #18
 80096da:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6859      	ldr	r1, [r3, #4]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	4b4d      	ldr	r3, [pc, #308]	@ (800981c <I2C_ITMasterCplt+0x18c>)
 80096e8:	400b      	ands	r3, r1
 80096ea:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a4a      	ldr	r2, [pc, #296]	@ (8009820 <I2C_ITMasterCplt+0x190>)
 80096f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	091b      	lsrs	r3, r3, #4
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2210      	movs	r2, #16
 800970a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009710:	f043 0204 	orr.w	r2, r3, #4
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b60      	cmp	r3, #96	@ 0x60
 8009722:	d10b      	bne.n	800973c <I2C_ITMasterCplt+0xac>
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	089b      	lsrs	r3, r3, #2
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009736:	b2db      	uxtb	r3, r3
 8009738:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800973a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc38 	bl	8009fb2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009746:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b60      	cmp	r3, #96	@ 0x60
 8009752:	d002      	beq.n	800975a <I2C_ITMasterCplt+0xca>
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d006      	beq.n	8009768 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fb0f 	bl	8009d84 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009766:	e054      	b.n	8009812 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b21      	cmp	r3, #33	@ 0x21
 8009772:	d124      	bne.n	80097be <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b40      	cmp	r3, #64	@ 0x40
 800978c:	d10b      	bne.n	80097a6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7fe ffef 	bl	8008782 <HAL_I2C_MemTxCpltCallback>
}
 80097a4:	e035      	b.n	8009812 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7fe ffa3 	bl	8008702 <HAL_I2C_MasterTxCpltCallback>
}
 80097bc:	e029      	b.n	8009812 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b22      	cmp	r3, #34	@ 0x22
 80097c8:	d123      	bne.n	8009812 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b40      	cmp	r3, #64	@ 0x40
 80097e2:	d10b      	bne.n	80097fc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7fe ffce 	bl	8008796 <HAL_I2C_MemRxCpltCallback>
}
 80097fa:	e00a      	b.n	8009812 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7fe ff82 	bl	8008716 <HAL_I2C_MasterRxCpltCallback>
}
 8009812:	bf00      	nop
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	fe00e800 	.word	0xfe00e800
 8009820:	ffff0000 	.word	0xffff0000

08009824 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009846:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2220      	movs	r2, #32
 800984e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009850:	7afb      	ldrb	r3, [r7, #11]
 8009852:	2b21      	cmp	r3, #33	@ 0x21
 8009854:	d002      	beq.n	800985c <I2C_ITSlaveCplt+0x38>
 8009856:	7afb      	ldrb	r3, [r7, #11]
 8009858:	2b29      	cmp	r3, #41	@ 0x29
 800985a:	d108      	bne.n	800986e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800985c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 ffe7 	bl	800a834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2221      	movs	r2, #33	@ 0x21
 800986a:	631a      	str	r2, [r3, #48]	@ 0x30
 800986c:	e019      	b.n	80098a2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	2b22      	cmp	r3, #34	@ 0x22
 8009872:	d002      	beq.n	800987a <I2C_ITSlaveCplt+0x56>
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	2b2a      	cmp	r3, #42	@ 0x2a
 8009878:	d108      	bne.n	800988c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800987a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 ffd8 	bl	800a834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2222      	movs	r2, #34	@ 0x22
 8009888:	631a      	str	r2, [r3, #48]	@ 0x30
 800988a:	e00a      	b.n	80098a2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800988c:	7afb      	ldrb	r3, [r7, #11]
 800988e:	2b28      	cmp	r3, #40	@ 0x28
 8009890:	d107      	bne.n	80098a2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009892:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 ffcc 	bl	800a834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098b0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6859      	ldr	r1, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	4b80      	ldr	r3, [pc, #512]	@ (8009ac0 <I2C_ITSlaveCplt+0x29c>)
 80098be:	400b      	ands	r3, r1
 80098c0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fb75 	bl	8009fb2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	0b9b      	lsrs	r3, r3, #14
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d07a      	beq.n	80099ca <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80098e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8112 	beq.w	8009b12 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a73      	ldr	r2, [pc, #460]	@ (8009ac4 <I2C_ITSlaveCplt+0x2a0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d059      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a71      	ldr	r2, [pc, #452]	@ (8009ac8 <I2C_ITSlaveCplt+0x2a4>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d053      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a6f      	ldr	r2, [pc, #444]	@ (8009acc <I2C_ITSlaveCplt+0x2a8>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d04d      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a6d      	ldr	r2, [pc, #436]	@ (8009ad0 <I2C_ITSlaveCplt+0x2ac>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d047      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a6b      	ldr	r2, [pc, #428]	@ (8009ad4 <I2C_ITSlaveCplt+0x2b0>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d041      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a69      	ldr	r2, [pc, #420]	@ (8009ad8 <I2C_ITSlaveCplt+0x2b4>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d03b      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a67      	ldr	r2, [pc, #412]	@ (8009adc <I2C_ITSlaveCplt+0x2b8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d035      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a65      	ldr	r2, [pc, #404]	@ (8009ae0 <I2C_ITSlaveCplt+0x2bc>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d02f      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a63      	ldr	r2, [pc, #396]	@ (8009ae4 <I2C_ITSlaveCplt+0x2c0>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d029      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a61      	ldr	r2, [pc, #388]	@ (8009ae8 <I2C_ITSlaveCplt+0x2c4>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d023      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a5f      	ldr	r2, [pc, #380]	@ (8009aec <I2C_ITSlaveCplt+0x2c8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d01d      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a5d      	ldr	r2, [pc, #372]	@ (8009af0 <I2C_ITSlaveCplt+0x2cc>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d017      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a5b      	ldr	r2, [pc, #364]	@ (8009af4 <I2C_ITSlaveCplt+0x2d0>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d011      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a59      	ldr	r2, [pc, #356]	@ (8009af8 <I2C_ITSlaveCplt+0x2d4>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d00b      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a57      	ldr	r2, [pc, #348]	@ (8009afc <I2C_ITSlaveCplt+0x2d8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d005      	beq.n	80099ae <I2C_ITSlaveCplt+0x18a>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a55      	ldr	r2, [pc, #340]	@ (8009b00 <I2C_ITSlaveCplt+0x2dc>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d105      	bne.n	80099ba <I2C_ITSlaveCplt+0x196>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	e004      	b.n	80099c4 <I2C_ITSlaveCplt+0x1a0>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80099c8:	e0a3      	b.n	8009b12 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	0bdb      	lsrs	r3, r3, #15
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 809d 	beq.w	8009b12 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80099e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 8090 	beq.w	8009b12 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a32      	ldr	r2, [pc, #200]	@ (8009ac4 <I2C_ITSlaveCplt+0x2a0>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d059      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a30      	ldr	r2, [pc, #192]	@ (8009ac8 <I2C_ITSlaveCplt+0x2a4>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d053      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a2e      	ldr	r2, [pc, #184]	@ (8009acc <I2C_ITSlaveCplt+0x2a8>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d04d      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8009ad0 <I2C_ITSlaveCplt+0x2ac>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d047      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a2a      	ldr	r2, [pc, #168]	@ (8009ad4 <I2C_ITSlaveCplt+0x2b0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d041      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a28      	ldr	r2, [pc, #160]	@ (8009ad8 <I2C_ITSlaveCplt+0x2b4>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d03b      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a26      	ldr	r2, [pc, #152]	@ (8009adc <I2C_ITSlaveCplt+0x2b8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d035      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a24      	ldr	r2, [pc, #144]	@ (8009ae0 <I2C_ITSlaveCplt+0x2bc>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d02f      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a22      	ldr	r2, [pc, #136]	@ (8009ae4 <I2C_ITSlaveCplt+0x2c0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d029      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a20      	ldr	r2, [pc, #128]	@ (8009ae8 <I2C_ITSlaveCplt+0x2c4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d023      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1e      	ldr	r2, [pc, #120]	@ (8009aec <I2C_ITSlaveCplt+0x2c8>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d01d      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8009af0 <I2C_ITSlaveCplt+0x2cc>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d017      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a1a      	ldr	r2, [pc, #104]	@ (8009af4 <I2C_ITSlaveCplt+0x2d0>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d011      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a18      	ldr	r2, [pc, #96]	@ (8009af8 <I2C_ITSlaveCplt+0x2d4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00b      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a16      	ldr	r2, [pc, #88]	@ (8009afc <I2C_ITSlaveCplt+0x2d8>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d005      	beq.n	8009ab2 <I2C_ITSlaveCplt+0x28e>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a14      	ldr	r2, [pc, #80]	@ (8009b00 <I2C_ITSlaveCplt+0x2dc>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d128      	bne.n	8009b04 <I2C_ITSlaveCplt+0x2e0>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	e027      	b.n	8009b0e <I2C_ITSlaveCplt+0x2ea>
 8009abe:	bf00      	nop
 8009ac0:	fe00e800 	.word	0xfe00e800
 8009ac4:	40020010 	.word	0x40020010
 8009ac8:	40020028 	.word	0x40020028
 8009acc:	40020040 	.word	0x40020040
 8009ad0:	40020058 	.word	0x40020058
 8009ad4:	40020070 	.word	0x40020070
 8009ad8:	40020088 	.word	0x40020088
 8009adc:	400200a0 	.word	0x400200a0
 8009ae0:	400200b8 	.word	0x400200b8
 8009ae4:	40020410 	.word	0x40020410
 8009ae8:	40020428 	.word	0x40020428
 8009aec:	40020440 	.word	0x40020440
 8009af0:	40020458 	.word	0x40020458
 8009af4:	40020470 	.word	0x40020470
 8009af8:	40020488 	.word	0x40020488
 8009afc:	400204a0 	.word	0x400204a0
 8009b00:	400204b8 	.word	0x400204b8
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	089b      	lsrs	r3, r3, #2
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d020      	beq.n	8009b60 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f023 0304 	bic.w	r3, r3, #4
 8009b24:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00c      	beq.n	8009b60 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d005      	beq.n	8009b76 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b6e:	f043 0204 	orr.w	r2, r3, #4
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	091b      	lsrs	r3, r3, #4
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d04a      	beq.n	8009c18 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	091b      	lsrs	r3, r3, #4
 8009b86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d044      	beq.n	8009c18 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d128      	bne.n	8009bea <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b28      	cmp	r3, #40	@ 0x28
 8009ba2:	d108      	bne.n	8009bb6 <I2C_ITSlaveCplt+0x392>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009baa:	d104      	bne.n	8009bb6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009bac:	6979      	ldr	r1, [r7, #20]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f892 	bl	8009cd8 <I2C_ITListenCplt>
 8009bb4:	e030      	b.n	8009c18 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b29      	cmp	r3, #41	@ 0x29
 8009bc0:	d10e      	bne.n	8009be0 <I2C_ITSlaveCplt+0x3bc>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009bc8:	d00a      	beq.n	8009be0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2210      	movs	r2, #16
 8009bd0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9ed 	bl	8009fb2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff fcfa 	bl	80095d2 <I2C_ITSlaveSeqCplt>
 8009bde:	e01b      	b.n	8009c18 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2210      	movs	r2, #16
 8009be6:	61da      	str	r2, [r3, #28]
 8009be8:	e016      	b.n	8009c18 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2210      	movs	r2, #16
 8009bf0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf6:	f043 0204 	orr.w	r2, r3, #4
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <I2C_ITSlaveCplt+0x3e8>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c0a:	d105      	bne.n	8009c18 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f8b6 	bl	8009d84 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d010      	beq.n	8009c50 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f8a5 	bl	8009d84 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b28      	cmp	r3, #40	@ 0x28
 8009c44:	d141      	bne.n	8009cca <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009c46:	6979      	ldr	r1, [r7, #20]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f845 	bl	8009cd8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009c4e:	e03c      	b.n	8009cca <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c58:	d014      	beq.n	8009c84 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff fcb9 	bl	80095d2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a1c      	ldr	r2, [pc, #112]	@ (8009cd4 <I2C_ITSlaveCplt+0x4b0>)
 8009c64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7fe fd76 	bl	800876e <HAL_I2C_ListenCpltCallback>
}
 8009c82:	e022      	b.n	8009cca <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b22      	cmp	r3, #34	@ 0x22
 8009c8e:	d10e      	bne.n	8009cae <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7fe fd49 	bl	800873e <HAL_I2C_SlaveRxCpltCallback>
}
 8009cac:	e00d      	b.n	8009cca <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7fe fd30 	bl	800872a <HAL_I2C_SlaveTxCpltCallback>
}
 8009cca:	bf00      	nop
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	ffff0000 	.word	0xffff0000

08009cd8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a26      	ldr	r2, [pc, #152]	@ (8009d80 <I2C_ITListenCplt+0xa8>)
 8009ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	089b      	lsrs	r3, r3, #2
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d022      	beq.n	8009d56 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1a:	b2d2      	uxtb	r2, r2
 8009d1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d012      	beq.n	8009d56 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d34:	3b01      	subs	r3, #1
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d4e:	f043 0204 	orr.w	r2, r3, #4
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009d56:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fd6a 	bl	800a834 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2210      	movs	r2, #16
 8009d66:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7fe fcfc 	bl	800876e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	ffff0000 	.word	0xffff0000

08009d84 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d94:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a6d      	ldr	r2, [pc, #436]	@ (8009f58 <I2C_ITError+0x1d4>)
 8009da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	431a      	orrs	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	2b28      	cmp	r3, #40	@ 0x28
 8009dba:	d005      	beq.n	8009dc8 <I2C_ITError+0x44>
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2b29      	cmp	r3, #41	@ 0x29
 8009dc0:	d002      	beq.n	8009dc8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dc6:	d10b      	bne.n	8009de0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009dc8:	2103      	movs	r1, #3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fd32 	bl	800a834 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2228      	movs	r2, #40	@ 0x28
 8009dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a60      	ldr	r2, [pc, #384]	@ (8009f5c <I2C_ITError+0x1d8>)
 8009ddc:	635a      	str	r2, [r3, #52]	@ 0x34
 8009dde:	e030      	b.n	8009e42 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009de0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fd25 	bl	800a834 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f8e1 	bl	8009fb2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b60      	cmp	r3, #96	@ 0x60
 8009dfa:	d01f      	beq.n	8009e3c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b20      	cmp	r3, #32
 8009e10:	d114      	bne.n	8009e3c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	f003 0310 	and.w	r3, r3, #16
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	d109      	bne.n	8009e34 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2210      	movs	r2, #16
 8009e26:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e2c:	f043 0204 	orr.w	r2, r3, #4
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e46:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d039      	beq.n	8009ec4 <I2C_ITError+0x140>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b11      	cmp	r3, #17
 8009e54:	d002      	beq.n	8009e5c <I2C_ITError+0xd8>
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b21      	cmp	r3, #33	@ 0x21
 8009e5a:	d133      	bne.n	8009ec4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e6a:	d107      	bne.n	8009e7c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009e7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fd fb17 	bl	80074b4 <HAL_DMA_GetState>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d017      	beq.n	8009ebc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	4a33      	ldr	r2, [pc, #204]	@ (8009f60 <I2C_ITError+0x1dc>)
 8009e92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fc f997 	bl	80061d4 <HAL_DMA_Abort_IT>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d04d      	beq.n	8009f48 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009eba:	e045      	b.n	8009f48 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f851 	bl	8009f64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ec2:	e041      	b.n	8009f48 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d039      	beq.n	8009f40 <I2C_ITError+0x1bc>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b12      	cmp	r3, #18
 8009ed0:	d002      	beq.n	8009ed8 <I2C_ITError+0x154>
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2b22      	cmp	r3, #34	@ 0x22
 8009ed6:	d133      	bne.n	8009f40 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ee6:	d107      	bne.n	8009ef8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ef6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fd fad9 	bl	80074b4 <HAL_DMA_GetState>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d017      	beq.n	8009f38 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f0c:	4a14      	ldr	r2, [pc, #80]	@ (8009f60 <I2C_ITError+0x1dc>)
 8009f0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fc f959 	bl	80061d4 <HAL_DMA_Abort_IT>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d011      	beq.n	8009f4c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009f32:	4610      	mov	r0, r2
 8009f34:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f36:	e009      	b.n	8009f4c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f813 	bl	8009f64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f3e:	e005      	b.n	8009f4c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f80f 	bl	8009f64 <I2C_TreatErrorCallback>
  }
}
 8009f46:	e002      	b.n	8009f4e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f48:	bf00      	nop
 8009f4a:	e000      	b.n	8009f4e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f4c:	bf00      	nop
}
 8009f4e:	bf00      	nop
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	ffff0000 	.word	0xffff0000
 8009f5c:	08008a3b 	.word	0x08008a3b
 8009f60:	0800a305 	.word	0x0800a305

08009f64 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b60      	cmp	r3, #96	@ 0x60
 8009f76:	d10e      	bne.n	8009f96 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7fe fc15 	bl	80087be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009f94:	e009      	b.n	8009faa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7fe fc00 	bl	80087aa <HAL_I2C_ErrorCallback>
}
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d103      	bne.n	8009fd0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d007      	beq.n	8009fee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	699a      	ldr	r2, [r3, #24]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0201 	orr.w	r2, r2, #1
 8009fec:	619a      	str	r2, [r3, #24]
  }
}
 8009fee:	bf00      	nop
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a006:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a016:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d104      	bne.n	800a02c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a022:	2120      	movs	r1, #32
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 fb81 	bl	800a72c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a02a:	e02d      	b.n	800a088 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a034:	441a      	add	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a03e:	b29b      	uxth	r3, r3
 800a040:	2bff      	cmp	r3, #255	@ 0xff
 800a042:	d903      	bls.n	800a04c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	22ff      	movs	r2, #255	@ 0xff
 800a048:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a04a:	e004      	b.n	800a056 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a050:	b29a      	uxth	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05e:	4619      	mov	r1, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3328      	adds	r3, #40	@ 0x28
 800a066:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a06c:	f7fb fb2a 	bl	80056c4 <HAL_DMA_Start_IT>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d004      	beq.n	800a080 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a076:	2110      	movs	r1, #16
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7ff fe83 	bl	8009d84 <I2C_ITError>
}
 800a07e:	e003      	b.n	800a088 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a080:	2140      	movs	r1, #64	@ 0x40
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fb52 	bl	800a72c <I2C_Enable_IRQ>
}
 800a088:	bf00      	nop
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d076      	beq.n	800a198 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a71      	ldr	r2, [pc, #452]	@ (800a278 <I2C_DMAError+0x1e8>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d059      	beq.n	800a16a <I2C_DMAError+0xda>
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a6f      	ldr	r2, [pc, #444]	@ (800a27c <I2C_DMAError+0x1ec>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d053      	beq.n	800a16a <I2C_DMAError+0xda>
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a6d      	ldr	r2, [pc, #436]	@ (800a280 <I2C_DMAError+0x1f0>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d04d      	beq.n	800a16a <I2C_DMAError+0xda>
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a6b      	ldr	r2, [pc, #428]	@ (800a284 <I2C_DMAError+0x1f4>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d047      	beq.n	800a16a <I2C_DMAError+0xda>
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a69      	ldr	r2, [pc, #420]	@ (800a288 <I2C_DMAError+0x1f8>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d041      	beq.n	800a16a <I2C_DMAError+0xda>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a67      	ldr	r2, [pc, #412]	@ (800a28c <I2C_DMAError+0x1fc>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d03b      	beq.n	800a16a <I2C_DMAError+0xda>
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a65      	ldr	r2, [pc, #404]	@ (800a290 <I2C_DMAError+0x200>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d035      	beq.n	800a16a <I2C_DMAError+0xda>
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a63      	ldr	r2, [pc, #396]	@ (800a294 <I2C_DMAError+0x204>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d02f      	beq.n	800a16a <I2C_DMAError+0xda>
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a61      	ldr	r2, [pc, #388]	@ (800a298 <I2C_DMAError+0x208>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d029      	beq.n	800a16a <I2C_DMAError+0xda>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a5f      	ldr	r2, [pc, #380]	@ (800a29c <I2C_DMAError+0x20c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d023      	beq.n	800a16a <I2C_DMAError+0xda>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a5d      	ldr	r2, [pc, #372]	@ (800a2a0 <I2C_DMAError+0x210>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d01d      	beq.n	800a16a <I2C_DMAError+0xda>
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a5b      	ldr	r2, [pc, #364]	@ (800a2a4 <I2C_DMAError+0x214>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d017      	beq.n	800a16a <I2C_DMAError+0xda>
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a59      	ldr	r2, [pc, #356]	@ (800a2a8 <I2C_DMAError+0x218>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d011      	beq.n	800a16a <I2C_DMAError+0xda>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a57      	ldr	r2, [pc, #348]	@ (800a2ac <I2C_DMAError+0x21c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00b      	beq.n	800a16a <I2C_DMAError+0xda>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a55      	ldr	r2, [pc, #340]	@ (800a2b0 <I2C_DMAError+0x220>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d005      	beq.n	800a16a <I2C_DMAError+0xda>
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a53      	ldr	r2, [pc, #332]	@ (800a2b4 <I2C_DMAError+0x224>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d109      	bne.n	800a17e <I2C_DMAError+0xee>
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	bf0c      	ite	eq
 800a176:	2301      	moveq	r3, #1
 800a178:	2300      	movne	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	e008      	b.n	800a190 <I2C_DMAError+0x100>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	bf0c      	ite	eq
 800a18a:	2301      	moveq	r3, #1
 800a18c:	2300      	movne	r3, #0
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800a194:	2301      	movs	r3, #1
 800a196:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 8098 	beq.w	800a2d2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a33      	ldr	r2, [pc, #204]	@ (800a278 <I2C_DMAError+0x1e8>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d059      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a31      	ldr	r2, [pc, #196]	@ (800a27c <I2C_DMAError+0x1ec>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d053      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a2f      	ldr	r2, [pc, #188]	@ (800a280 <I2C_DMAError+0x1f0>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d04d      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a2d      	ldr	r2, [pc, #180]	@ (800a284 <I2C_DMAError+0x1f4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d047      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a2b      	ldr	r2, [pc, #172]	@ (800a288 <I2C_DMAError+0x1f8>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d041      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a29      	ldr	r2, [pc, #164]	@ (800a28c <I2C_DMAError+0x1fc>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d03b      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a27      	ldr	r2, [pc, #156]	@ (800a290 <I2C_DMAError+0x200>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d035      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a25      	ldr	r2, [pc, #148]	@ (800a294 <I2C_DMAError+0x204>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d02f      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a23      	ldr	r2, [pc, #140]	@ (800a298 <I2C_DMAError+0x208>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d029      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a21      	ldr	r2, [pc, #132]	@ (800a29c <I2C_DMAError+0x20c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d023      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a1f      	ldr	r2, [pc, #124]	@ (800a2a0 <I2C_DMAError+0x210>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d01d      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2a4 <I2C_DMAError+0x214>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d017      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a1b      	ldr	r2, [pc, #108]	@ (800a2a8 <I2C_DMAError+0x218>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d011      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a19      	ldr	r2, [pc, #100]	@ (800a2ac <I2C_DMAError+0x21c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00b      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a17      	ldr	r2, [pc, #92]	@ (800a2b0 <I2C_DMAError+0x220>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d005      	beq.n	800a262 <I2C_DMAError+0x1d2>
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a15      	ldr	r2, [pc, #84]	@ (800a2b4 <I2C_DMAError+0x224>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d12a      	bne.n	800a2b8 <I2C_DMAError+0x228>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bf0c      	ite	eq
 800a26e:	2301      	moveq	r3, #1
 800a270:	2300      	movne	r3, #0
 800a272:	b2db      	uxtb	r3, r3
 800a274:	e029      	b.n	800a2ca <I2C_DMAError+0x23a>
 800a276:	bf00      	nop
 800a278:	40020010 	.word	0x40020010
 800a27c:	40020028 	.word	0x40020028
 800a280:	40020040 	.word	0x40020040
 800a284:	40020058 	.word	0x40020058
 800a288:	40020070 	.word	0x40020070
 800a28c:	40020088 	.word	0x40020088
 800a290:	400200a0 	.word	0x400200a0
 800a294:	400200b8 	.word	0x400200b8
 800a298:	40020410 	.word	0x40020410
 800a29c:	40020428 	.word	0x40020428
 800a2a0:	40020440 	.word	0x40020440
 800a2a4:	40020458 	.word	0x40020458
 800a2a8:	40020470 	.word	0x40020470
 800a2ac:	40020488 	.word	0x40020488
 800a2b0:	400204a0 	.word	0x400204a0
 800a2b4:	400204b8 	.word	0x400204b8
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	bf0c      	ite	eq
 800a2c4:	2301      	moveq	r3, #1
 800a2c6:	2300      	movne	r3, #0
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7fd f8fc 	bl	80074d0 <HAL_DMA_GetError>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d00e      	beq.n	800a2fc <I2C_DMAError+0x26c>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00b      	beq.n	800a2fc <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2f2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a2f4:	2110      	movs	r1, #16
 800a2f6:	68b8      	ldr	r0, [r7, #8]
 800a2f8:	f7ff fd44 	bl	8009d84 <I2C_ITError>
  }
}
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a310:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31e:	2200      	movs	r2, #0
 800a320:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a32e:	2200      	movs	r2, #0
 800a330:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7ff fe16 	bl	8009f64 <I2C_TreatErrorCallback>
}
 800a338:	bf00      	nop
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	4613      	mov	r3, r2
 800a34e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a350:	e03b      	b.n	800a3ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 f8d6 	bl	800a508 <I2C_IsErrorOccurred>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e041      	b.n	800a3ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36c:	d02d      	beq.n	800a3ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a36e:	f7f9 f9d7 	bl	8003720 <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d302      	bcc.n	800a384 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d122      	bne.n	800a3ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	699a      	ldr	r2, [r3, #24]
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	4013      	ands	r3, r2
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	429a      	cmp	r2, r3
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d113      	bne.n	800a3ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3a6:	f043 0220 	orr.w	r2, r3, #32
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2220      	movs	r2, #32
 800a3b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e00f      	b.n	800a3ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	699a      	ldr	r2, [r3, #24]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	bf0c      	ite	eq
 800a3da:	2301      	moveq	r3, #1
 800a3dc:	2300      	movne	r3, #0
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d0b4      	beq.n	800a352 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a3fe:	e033      	b.n	800a468 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	68b9      	ldr	r1, [r7, #8]
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 f87f 	bl	800a508 <I2C_IsErrorOccurred>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e031      	b.n	800a478 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41a:	d025      	beq.n	800a468 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41c:	f7f9 f980 	bl	8003720 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d302      	bcc.n	800a432 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d11a      	bne.n	800a468 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	f003 0302 	and.w	r3, r3, #2
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d013      	beq.n	800a468 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a444:	f043 0220 	orr.w	r2, r3, #32
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2220      	movs	r2, #32
 800a450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e007      	b.n	800a478 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b02      	cmp	r3, #2
 800a474:	d1c4      	bne.n	800a400 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a48c:	e02f      	b.n	800a4ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	68b9      	ldr	r1, [r7, #8]
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 f838 	bl	800a508 <I2C_IsErrorOccurred>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e02d      	b.n	800a4fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4a2:	f7f9 f93d 	bl	8003720 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d302      	bcc.n	800a4b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d11a      	bne.n	800a4ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	d013      	beq.n	800a4ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ca:	f043 0220 	orr.w	r2, r3, #32
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e007      	b.n	800a4fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	f003 0320 	and.w	r3, r3, #32
 800a4f8:	2b20      	cmp	r3, #32
 800a4fa:	d1c8      	bne.n	800a48e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	@ 0x28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	699b      	ldr	r3, [r3, #24]
 800a520:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	2b00      	cmp	r3, #0
 800a532:	d068      	beq.n	800a606 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2210      	movs	r2, #16
 800a53a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a53c:	e049      	b.n	800a5d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a544:	d045      	beq.n	800a5d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a546:	f7f9 f8eb 	bl	8003720 <HAL_GetTick>
 800a54a:	4602      	mov	r2, r0
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	429a      	cmp	r2, r3
 800a554:	d302      	bcc.n	800a55c <I2C_IsErrorOccurred+0x54>
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d13a      	bne.n	800a5d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a566:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a56e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a57a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a57e:	d121      	bne.n	800a5c4 <I2C_IsErrorOccurred+0xbc>
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a586:	d01d      	beq.n	800a5c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a588:	7cfb      	ldrb	r3, [r7, #19]
 800a58a:	2b20      	cmp	r3, #32
 800a58c:	d01a      	beq.n	800a5c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a59c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a59e:	f7f9 f8bf 	bl	8003720 <HAL_GetTick>
 800a5a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5a4:	e00e      	b.n	800a5c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a5a6:	f7f9 f8bb 	bl	8003720 <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	2b19      	cmp	r3, #25
 800a5b2:	d907      	bls.n	800a5c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	f043 0320 	orr.w	r3, r3, #32
 800a5ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a5c2:	e006      	b.n	800a5d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	f003 0320 	and.w	r3, r3, #32
 800a5ce:	2b20      	cmp	r3, #32
 800a5d0:	d1e9      	bne.n	800a5a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	f003 0320 	and.w	r3, r3, #32
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	d003      	beq.n	800a5e8 <I2C_IsErrorOccurred+0xe0>
 800a5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0aa      	beq.n	800a53e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d103      	bne.n	800a5f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	f043 0304 	orr.w	r3, r3, #4
 800a5fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	f043 0301 	orr.w	r3, r3, #1
 800a61e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00b      	beq.n	800a652 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a63a:	6a3b      	ldr	r3, [r7, #32]
 800a63c:	f043 0308 	orr.w	r3, r3, #8
 800a640:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a64a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00b      	beq.n	800a674 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	f043 0302 	orr.w	r3, r3, #2
 800a662:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a66c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d01c      	beq.n	800a6b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f7ff fc98 	bl	8009fb2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6859      	ldr	r1, [r3, #4]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c4 <I2C_IsErrorOccurred+0x1bc>)
 800a68e:	400b      	ands	r3, r1
 800a690:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	431a      	orrs	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3728      	adds	r7, #40	@ 0x28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	fe00e800 	.word	0xfe00e800

0800a6c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	607b      	str	r3, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	817b      	strh	r3, [r7, #10]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6da:	897b      	ldrh	r3, [r7, #10]
 800a6dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6e0:	7a7b      	ldrb	r3, [r7, #9]
 800a6e2:	041b      	lsls	r3, r3, #16
 800a6e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6e8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6f6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	0d5b      	lsrs	r3, r3, #21
 800a702:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a706:	4b08      	ldr	r3, [pc, #32]	@ (800a728 <I2C_TransferConfig+0x60>)
 800a708:	430b      	orrs	r3, r1
 800a70a:	43db      	mvns	r3, r3
 800a70c:	ea02 0103 	and.w	r1, r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	430a      	orrs	r2, r1
 800a718:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a71a:	bf00      	nop
 800a71c:	371c      	adds	r7, #28
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	03ff63ff 	.word	0x03ff63ff

0800a72c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a740:	4a39      	ldr	r2, [pc, #228]	@ (800a828 <I2C_Enable_IRQ+0xfc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d032      	beq.n	800a7ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a74a:	4a38      	ldr	r2, [pc, #224]	@ (800a82c <I2C_Enable_IRQ+0x100>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d02d      	beq.n	800a7ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a754:	4a36      	ldr	r2, [pc, #216]	@ (800a830 <I2C_Enable_IRQ+0x104>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d028      	beq.n	800a7ac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a75a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	da03      	bge.n	800a76a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a768:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a76a:	887b      	ldrh	r3, [r7, #2]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a77a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a77c:	887b      	ldrh	r3, [r7, #2]
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b00      	cmp	r3, #0
 800a784:	d003      	beq.n	800a78e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a78c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a78e:	887b      	ldrh	r3, [r7, #2]
 800a790:	2b10      	cmp	r3, #16
 800a792:	d103      	bne.n	800a79c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a79a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a79c:	887b      	ldrh	r3, [r7, #2]
 800a79e:	2b20      	cmp	r3, #32
 800a7a0:	d133      	bne.n	800a80a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f043 0320 	orr.w	r3, r3, #32
 800a7a8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a7aa:	e02e      	b.n	800a80a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a7ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	da03      	bge.n	800a7bc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a7ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a7bc:	887b      	ldrh	r3, [r7, #2]
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a7cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a7ce:	887b      	ldrh	r3, [r7, #2]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a7de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a7e0:	887b      	ldrh	r3, [r7, #2]
 800a7e2:	2b10      	cmp	r3, #16
 800a7e4:	d103      	bne.n	800a7ee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a7ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a7ee:	887b      	ldrh	r3, [r7, #2]
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	d103      	bne.n	800a7fc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a7fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a7fc:	887b      	ldrh	r3, [r7, #2]
 800a7fe:	2b40      	cmp	r3, #64	@ 0x40
 800a800:	d103      	bne.n	800a80a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a808:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6819      	ldr	r1, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	430a      	orrs	r2, r1
 800a818:	601a      	str	r2, [r3, #0]
}
 800a81a:	bf00      	nop
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	08008c43 	.word	0x08008c43
 800a82c:	08009089 	.word	0x08009089
 800a830:	08008e29 	.word	0x08008e29

0800a834 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a844:	887b      	ldrh	r3, [r7, #2]
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00f      	beq.n	800a86e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800a854:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a862:	2b28      	cmp	r3, #40	@ 0x28
 800a864:	d003      	beq.n	800a86e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a86c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a86e:	887b      	ldrh	r3, [r7, #2]
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00f      	beq.n	800a898 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800a87e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a886:	b2db      	uxtb	r3, r3
 800a888:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a88c:	2b28      	cmp	r3, #40	@ 0x28
 800a88e:	d003      	beq.n	800a898 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a896:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	da03      	bge.n	800a8a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a8a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a8a8:	887b      	ldrh	r3, [r7, #2]
 800a8aa:	2b10      	cmp	r3, #16
 800a8ac:	d103      	bne.n	800a8b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a8b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a8b6:	887b      	ldrh	r3, [r7, #2]
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d103      	bne.n	800a8c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f043 0320 	orr.w	r3, r3, #32
 800a8c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a8c4:	887b      	ldrh	r3, [r7, #2]
 800a8c6:	2b40      	cmp	r3, #64	@ 0x40
 800a8c8:	d103      	bne.n	800a8d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6819      	ldr	r1, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	43da      	mvns	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	400a      	ands	r2, r1
 800a8e2:	601a      	str	r2, [r3, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b20      	cmp	r3, #32
 800a904:	d138      	bne.n	800a978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d101      	bne.n	800a914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a910:	2302      	movs	r3, #2
 800a912:	e032      	b.n	800a97a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2224      	movs	r2, #36	@ 0x24
 800a920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 0201 	bic.w	r2, r2, #1
 800a932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6819      	ldr	r1, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	430a      	orrs	r2, r1
 800a952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0201 	orr.w	r2, r2, #1
 800a962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2220      	movs	r2, #32
 800a968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	e000      	b.n	800a97a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a978:	2302      	movs	r3, #2
  }
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a986:	b480      	push	{r7}
 800a988:	b085      	sub	sp, #20
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b20      	cmp	r3, #32
 800a99a:	d139      	bne.n	800aa10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e033      	b.n	800aa12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2224      	movs	r2, #36	@ 0x24
 800a9b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 0201 	bic.w	r2, r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a9d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f042 0201 	orr.w	r2, r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	e000      	b.n	800aa12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aa10:	2302      	movs	r3, #2
  }
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
	...

0800aa20 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e070      	b.n	800ab14 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d106      	bne.n	800aa4c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7f7 fcea 	bl	8002420 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0201 	orr.w	r2, r2, #1
 800aa62:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0201 	bic.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aa82:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa92:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aaa2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aab2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a19      	ldr	r2, [pc, #100]	@ (800ab1c <HAL_JPEG_Init+0xfc>)
 800aab8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a18      	ldr	r2, [pc, #96]	@ (800ab20 <HAL_JPEG_Init+0x100>)
 800aabe:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fd75 	bl	800b5bc <JPEG_Set_HuffEnc_Mem>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e018      	b.n	800ab14 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aaf0:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	0801b8a4 	.word	0x0801b8a4
 800ab20:	0801b8e4 	.word	0x0801b8e4

0800ab24 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <HAL_JPEG_GetInfo+0x16>
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e083      	b.n	800ac46 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f003 0303 	and.w	r3, r3, #3
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d103      	bne.n	800ab54 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2210      	movs	r2, #16
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	e017      	b.n	800ab84 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e00c      	b.n	800ab84 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	2b03      	cmp	r3, #3
 800ab76:	d103      	bne.n	800ab80 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2230      	movs	r2, #48	@ 0x30
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e001      	b.n	800ab84 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e060      	b.n	800ac46 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	0c1b      	lsrs	r3, r3, #16
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	0c1b      	lsrs	r3, r3, #16
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b10      	cmp	r3, #16
 800aba6:	d003      	beq.n	800abb0 <HAL_JPEG_GetInfo+0x8c>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b30      	cmp	r3, #48	@ 0x30
 800abae:	d140      	bne.n	800ac32 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	091b      	lsrs	r3, r3, #4
 800abb8:	f003 030f 	and.w	r3, r3, #15
 800abbc:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	091b      	lsrs	r3, r3, #4
 800abc6:	f003 030f 	and.w	r3, r3, #15
 800abca:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	091b      	lsrs	r3, r3, #4
 800abd4:	f003 030f 	and.w	r3, r3, #15
 800abd8:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d109      	bne.n	800abf4 <HAL_JPEG_GetInfo+0xd0>
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d106      	bne.n	800abf4 <HAL_JPEG_GetInfo+0xd0>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d103      	bne.n	800abf4 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	2202      	movs	r2, #2
 800abf0:	605a      	str	r2, [r3, #4]
 800abf2:	e01d      	b.n	800ac30 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <HAL_JPEG_GetInfo+0xea>
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d106      	bne.n	800ac0e <HAL_JPEG_GetInfo+0xea>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	605a      	str	r2, [r3, #4]
 800ac0c:	e010      	b.n	800ac30 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d109      	bne.n	800ac28 <HAL_JPEG_GetInfo+0x104>
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <HAL_JPEG_GetInfo+0x104>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2201      	movs	r2, #1
 800ac24:	605a      	str	r2, [r3, #4]
 800ac26:	e003      	b.n	800ac30 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ac2e:	e003      	b.n	800ac38 <HAL_JPEG_GetInfo+0x114>
 800ac30:	e002      	b.n	800ac38 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2200      	movs	r2, #0
 800ac36:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 fdb1 	bl	800c7a0 <JPEG_GetQuality>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	60b9      	str	r1, [r7, #8]
 800ac58:	607a      	str	r2, [r7, #4]
 800ac5a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d005      	beq.n	800ac6e <HAL_JPEG_Decode_DMA+0x20>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <HAL_JPEG_Decode_DMA+0x20>
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e04c      	b.n	800ad0c <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d101      	bne.n	800ac80 <HAL_JPEG_Decode_DMA+0x32>
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e045      	b.n	800ad0c <HAL_JPEG_Decode_DMA+0xbe>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d134      	bne.n	800acfe <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2204      	movs	r2, #4
 800ac98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aca0:	f023 020f 	bic.w	r2, r3, #15
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acac:	f043 020e 	orr.w	r2, r3, #14
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	69ba      	ldr	r2, [r7, #24]
 800acca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 fef1 	bl	800bac0 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f001 fa12 	bl	800c108 <JPEG_DMA_StartProcess>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00f      	beq.n	800ad0a <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2206      	movs	r2, #6
 800acee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e006      	b.n	800ad0c <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800ad06:	2302      	movs	r3, #2
 800ad08:	e000      	b.n	800ad0c <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad26:	f003 030c 	and.w	r3, r3, #12
 800ad2a:	2b0c      	cmp	r3, #12
 800ad2c:	d116      	bne.n	800ad5c <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d005      	beq.n	800ad44 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d033      	beq.n	800adb6 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad52:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	655a      	str	r2, [r3, #84]	@ 0x54
 800ad5a:	e02c      	b.n	800adb6 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad60:	f003 030c 	and.w	r3, r3, #12
 800ad64:	2b08      	cmp	r3, #8
 800ad66:	d126      	bne.n	800adb6 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f043 0306 	orr.w	r3, r3, #6
 800ad84:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d009      	beq.n	800ada4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800ada2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	43da      	mvns	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	400a      	ands	r2, r1
 800adb4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3714      	adds	r7, #20
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_JPEG_Abort>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Abort(JPEG_HandleTypeDef *hjpeg)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t tmpContext;
  tmpContext = hjpeg->Context;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800add0:	60fb      	str	r3, [r7, #12]

  /*Reset the Context operation and method*/
  hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800add6:	4b4e      	ldr	r3, [pc, #312]	@ (800af10 <HAL_JPEG_Abort+0x14c>)
 800add8:	4013      	ands	r3, r2
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	6553      	str	r3, [r2, #84]	@ 0x54

  if ((tmpContext & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f003 030c 	and.w	r3, r3, #12
 800ade4:	2b0c      	cmp	r3, #12
 800ade6:	d125      	bne.n	800ae34 <HAL_JPEG_Abort+0x70>
  {
    /* Stop the DMA In/out Xfer*/
    if (HAL_MDMA_Abort(hjpeg->hdmaout) != HAL_OK)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adec:	4618      	mov	r0, r3
 800adee:	f001 fe54 	bl	800ca9a <HAL_MDMA_Abort>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00a      	beq.n	800ae0e <HAL_JPEG_Abort+0x4a>
    {
      if (hjpeg->hdmaout->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adfe:	2b40      	cmp	r3, #64	@ 0x40
 800ae00:	d105      	bne.n	800ae0e <HAL_JPEG_Abort+0x4a>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae06:	f043 0204 	orr.w	r2, r3, #4
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
    if (HAL_MDMA_Abort(hjpeg->hdmain) != HAL_OK)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae12:	4618      	mov	r0, r3
 800ae14:	f001 fe41 	bl	800ca9a <HAL_MDMA_Abort>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <HAL_JPEG_Abort+0x70>
    {
      if (hjpeg->hdmain->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae24:	2b40      	cmp	r3, #64	@ 0x40
 800ae26:	d105      	bne.n	800ae34 <HAL_JPEG_Abort+0x70>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae2c:	f043 0204 	orr.w	r2, r3, #4
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	651a      	str	r2, [r3, #80]	@ 0x50
    }

  }

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f022 0201 	bic.w	r2, r2, #1
 800ae42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae44:	f7f8 fc6c 	bl	8003720 <HAL_GetTick>
 800ae48:	60b8      	str	r0, [r7, #8]

  /* Check if the JPEG Codec is effectively disabled */
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800ae4a:	e012      	b.n	800ae72 <HAL_JPEG_Abort+0xae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > JPEG_TIMEOUT_VALUE)
 800ae4c:	f7f8 fc68 	bl	8003720 <HAL_GetTick>
 800ae50:	4602      	mov	r2, r0
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae5a:	d90a      	bls.n	800ae72 <HAL_JPEG_Abort+0xae>
    {
      /* Update error code */
      hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae60:	f043 0208 	orr.w	r2, r3, #8
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Change the DMA state */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2206      	movs	r2, #6
 800ae6c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ae70:	e006      	b.n	800ae80 <HAL_JPEG_Abort+0xbc>
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e5      	bne.n	800ae4c <HAL_JPEG_Abort+0x88>
    }
  }

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ae8e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aeae:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Reset the Context Pause*/
  hjpeg->Context &= ~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aed0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Change the DMA state*/
  if (hjpeg->ErrorCode != HAL_JPEG_ERROR_NONE)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d009      	beq.n	800aef4 <HAL_JPEG_Abort+0x130>
  {
    hjpeg->State = HAL_JPEG_STATE_ERROR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2206      	movs	r2, #6
 800aee4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e008      	b.n	800af06 <HAL_JPEG_Abort+0x142>
  }
  else
  {
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_OK;
 800af04:	2300      	movs	r3, #0
  }

}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	ffff7ff0 	.word	0xffff7ff0

0800af14 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800af1e:	bf00      	nop
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800af32:	bf00      	nop
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800af3e:	b480      	push	{r7}
 800af40:	b083      	sub	sp, #12
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800af62:	b2db      	uxtb	r3, r3
 800af64:	3b03      	subs	r3, #3
 800af66:	2b01      	cmp	r3, #1
 800af68:	d813      	bhi.n	800af92 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af6e:	f003 030c 	and.w	r3, r3, #12
 800af72:	2b08      	cmp	r3, #8
 800af74:	d103      	bne.n	800af7e <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fe16 	bl	800bba8 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800af7c:	e00b      	b.n	800af96 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af82:	f003 030c 	and.w	r3, r3, #12
 800af86:	2b0c      	cmp	r3, #12
 800af88:	d105      	bne.n	800af96 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 f956 	bl	800c23c <JPEG_DMA_ContinueProcess>
      break;
 800af90:	e001      	b.n	800af96 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800af92:	bf00      	nop
 800af94:	e000      	b.n	800af98 <HAL_JPEG_IRQHandler+0x44>
      break;
 800af96:	bf00      	nop
  }
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b08b      	sub	sp, #44	@ 0x2c
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800afb2:	2300      	movs	r3, #0
 800afb4:	61fb      	str	r3, [r7, #28]
 800afb6:	e020      	b.n	800affa <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	4413      	add	r3, r2
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800afc2:	6a3a      	ldr	r2, [r7, #32]
 800afc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc6:	4413      	add	r3, r2
 800afc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afcc:	d90f      	bls.n	800afee <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e055      	b.n	800b07e <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	440b      	add	r3, r1
 800afdc:	3201      	adds	r2, #1
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	701a      	strb	r2, [r3, #0]
      p++;
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	3301      	adds	r3, #1
 800afe6:	623b      	str	r3, [r7, #32]
      i--;
 800afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afea:	3b01      	subs	r3, #1
 800afec:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1ee      	bne.n	800afd2 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	3301      	adds	r3, #1
 800aff8:	61fb      	str	r3, [r7, #28]
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	2b0f      	cmp	r3, #15
 800affe:	d9db      	bls.n	800afb8 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	4413      	add	r3, r2
 800b006:	2200      	movs	r2, #0
 800b008:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	6a3a      	ldr	r2, [r7, #32]
 800b00e:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	617b      	str	r3, [r7, #20]
  p = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800b01e:	e027      	b.n	800b070 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	4413      	add	r3, r2
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	601a      	str	r2, [r3, #0]
      p++;
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	3301      	adds	r3, #1
 800b030:	623b      	str	r3, [r7, #32]
      code++;
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	3301      	adds	r3, #1
 800b036:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	4413      	add	r3, r2
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	461a      	mov	r2, r3
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	4293      	cmp	r3, r2
 800b046:	d0eb      	beq.n	800b020 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	2b1f      	cmp	r3, #31
 800b04c:	d901      	bls.n	800b052 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	e015      	b.n	800b07e <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800b052:	2201      	movs	r2, #1
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	fa02 f303 	lsl.w	r3, r2, r3
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d301      	bcc.n	800b064 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e00c      	b.n	800b07e <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	61bb      	str	r3, [r7, #24]
    si++;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	3301      	adds	r3, #1
 800b06e:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	4413      	add	r3, r2
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1dd      	bne.n	800b038 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	372c      	adds	r7, #44	@ 0x2c
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800b090:	af00      	add	r7, sp, #0
 800b092:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b096:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b09a:	6018      	str	r0, [r3, #0]
 800b09c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b0a0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b0a4:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800b0a6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b0aa:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	f107 0308 	add.w	r3, r7, #8
 800b0b4:	f107 020c 	add.w	r2, r7, #12
 800b0b8:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800b0bc:	f7ff ff70 	bl	800afa0 <JPEG_Bits_To_SizeCodes>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800b0c6:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800b0ce:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800b0d2:	e075      	b.n	800b1c0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800b0da:	e067      	b.n	800b1ac <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800b0dc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b0e0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b0ea:	4413      	add	r3, r2
 800b0ec:	3310      	adds	r3, #16
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800b0f4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800b0fc:	23a0      	movs	r3, #160	@ 0xa0
 800b0fe:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800b102:	e021      	b.n	800b148 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800b104:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b108:	2bf0      	cmp	r3, #240	@ 0xf0
 800b10a:	d103      	bne.n	800b114 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800b10c:	23a1      	movs	r3, #161	@ 0xa1
 800b10e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800b112:	e019      	b.n	800b148 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800b114:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b118:	091b      	lsrs	r3, r3, #4
 800b11a:	f003 030f 	and.w	r3, r3, #15
 800b11e:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800b122:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b126:	f003 030f 	and.w	r3, r3, #15
 800b12a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800b12e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	461a      	mov	r2, r3
 800b13c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b140:	4413      	add	r3, r2
 800b142:	3b01      	subs	r3, #1
 800b144:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800b148:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b14c:	2ba1      	cmp	r3, #161	@ 0xa1
 800b14e:	d901      	bls.n	800b154 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800b150:	2301      	movs	r3, #1
 800b152:	e035      	b.n	800b1c0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b154:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b158:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b15c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800b160:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b164:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b168:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b16c:	6819      	ldr	r1, [r3, #0]
 800b16e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b172:	3328      	adds	r3, #40	@ 0x28
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	440b      	add	r3, r1
 800b178:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800b17a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b17e:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800b182:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b186:	4413      	add	r3, r2
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	b2d9      	uxtb	r1, r3
 800b18e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b192:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b19c:	4413      	add	r3, r2
 800b19e:	460a      	mov	r2, r1
 800b1a0:	701a      	strb	r2, [r3, #0]
      k++;
 800b1a2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800b1ac:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b1b0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d38e      	bcc.n	800b0dc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b1d6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b1da:	6018      	str	r0, [r3, #0]
 800b1dc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b1e0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b1e4:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800b1e6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b1ea:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b1ee:	6818      	ldr	r0, [r3, #0]
 800b1f0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800b1f4:	f107 0208 	add.w	r2, r7, #8
 800b1f8:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800b1fc:	f7ff fed0 	bl	800afa0 <JPEG_Bits_To_SizeCodes>
 800b200:	4603      	mov	r3, r0
 800b202:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800b206:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d002      	beq.n	800b214 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800b20e:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800b212:	e048      	b.n	800b2a6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800b21a:	e03d      	b.n	800b298 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800b21c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b220:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b22a:	4413      	add	r3, r2
 800b22c:	3310      	adds	r3, #16
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800b234:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b238:	2b0b      	cmp	r3, #11
 800b23a:	d901      	bls.n	800b240 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800b23c:	2301      	movs	r3, #1
 800b23e:	e032      	b.n	800b2a6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b240:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b244:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800b248:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800b24c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b250:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b254:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b258:	6819      	ldr	r1, [r3, #0]
 800b25a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b25e:	3302      	adds	r3, #2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	440b      	add	r3, r1
 800b264:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800b266:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b26a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800b26e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b272:	4413      	add	r3, r2
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	3b01      	subs	r3, #1
 800b278:	b2d9      	uxtb	r1, r3
 800b27a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b27e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b288:	4413      	add	r3, r2
 800b28a:	460a      	mov	r2, r1
 800b28c:	701a      	strb	r2, [r3, #0]
      k++;
 800b28e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b292:	3301      	adds	r3, #1
 800b294:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800b298:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800b29c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d3bb      	bcc.n	800b21c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b09a      	sub	sp, #104	@ 0x68
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d106      	bne.n	800b2d8 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800b2d2:	3318      	adds	r3, #24
 800b2d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2d6:	e00f      	b.n	800b2f8 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d106      	bne.n	800b2f4 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800b2ee:	3318      	adds	r3, #24
 800b2f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2f2:	e001      	b.n	800b2f8 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e059      	b.n	800b3ac <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d055      	beq.n	800b3aa <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800b2fe:	f107 0314 	add.w	r3, r7, #20
 800b302:	4619      	mov	r1, r3
 800b304:	68b8      	ldr	r0, [r7, #8]
 800b306:	f7ff ff60 	bl	800b1ca <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800b30a:	4603      	mov	r3, r0
 800b30c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800b310:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800b318:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b31c:	e046      	b.n	800b3ac <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800b31e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b320:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800b322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b324:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b328:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b32a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b32c:	3304      	adds	r3, #4
 800b32e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800b330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b332:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b336:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800b338:	230c      	movs	r3, #12
 800b33a:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800b33c:	e032      	b.n	800b3a4 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800b33e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b340:	3b01      	subs	r3, #1
 800b342:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800b344:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b346:	3b04      	subs	r3, #4
 800b348:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b34a:	f107 0214 	add.w	r2, r7, #20
 800b34e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b350:	4413      	add	r3, r2
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b35a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b35c:	3302      	adds	r3, #2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	3368      	adds	r3, #104	@ 0x68
 800b362:	443b      	add	r3, r7
 800b364:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	4313      	orrs	r3, r2
 800b36c:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800b36e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b370:	3b01      	subs	r3, #1
 800b372:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b374:	f107 0214 	add.w	r2, r7, #20
 800b378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b37a:	4413      	add	r3, r2
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	021b      	lsls	r3, r3, #8
 800b380:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b386:	3302      	adds	r3, #2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	3368      	adds	r3, #104	@ 0x68
 800b38c:	443b      	add	r3, r7
 800b38e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	4313      	orrs	r3, r2
 800b396:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800b398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b39a:	041a      	lsls	r2, r3, #16
 800b39c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3a2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800b3a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d8c9      	bhi.n	800b33e <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3768      	adds	r7, #104	@ 0x68
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3c0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b3c4:	6018      	str	r0, [r3, #0]
 800b3c6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3ca:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b3ce:	6019      	str	r1, [r3, #0]
 800b3d0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3d4:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800b3d8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800b3da:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3de:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3ea:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800b3ee:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800b3f2:	6812      	ldr	r2, [r2, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d10c      	bne.n	800b412 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800b3f8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3fc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b408:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b40c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800b410:	e01d      	b.n	800b44e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800b412:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b416:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800b422:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800b426:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800b42a:	6812      	ldr	r2, [r2, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d10c      	bne.n	800b44a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800b430:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b434:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800b440:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b444:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800b448:	e001      	b.n	800b44e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e0a8      	b.n	800b5a0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800b44e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b452:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 80a0 	beq.w	800b59e <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800b45e:	f107 0214 	add.w	r2, r7, #20
 800b462:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b466:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b46a:	4611      	mov	r1, r2
 800b46c:	6818      	ldr	r0, [r3, #0]
 800b46e:	f7ff fe0c 	bl	800b08a <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800b472:	4603      	mov	r3, r0
 800b474:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800b478:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800b480:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800b484:	e08c      	b.n	800b5a0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800b486:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b48a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800b48e:	2300      	movs	r3, #0
 800b490:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800b494:	e00e      	b.n	800b4b4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800b496:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b49a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b49e:	601a      	str	r2, [r3, #0]
      addressDef++;
 800b4a0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800b4aa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800b4b4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d9ec      	bls.n	800b496 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800b4bc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4c0:	4a3a      	ldr	r2, [pc, #232]	@ (800b5ac <JPEG_Set_HuffAC_Mem+0x1f8>)
 800b4c2:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b4c4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800b4ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4d2:	4a37      	ldr	r2, [pc, #220]	@ (800b5b0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800b4d4:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b4d6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4da:	3304      	adds	r3, #4
 800b4dc:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800b4e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4e4:	4a33      	ldr	r2, [pc, #204]	@ (800b5b4 <JPEG_Set_HuffAC_Mem+0x200>)
 800b4e6:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b4e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800b4f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4f6:	4a30      	ldr	r2, [pc, #192]	@ (800b5b8 <JPEG_Set_HuffAC_Mem+0x204>)
 800b4f8:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800b4fa:	23a2      	movs	r3, #162	@ 0xa2
 800b4fc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800b500:	e049      	b.n	800b596 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800b502:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b506:	3b01      	subs	r3, #1
 800b508:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800b50c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b510:	3b04      	subs	r3, #4
 800b512:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b516:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b51a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800b51e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b522:	4413      	add	r3, r2
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b52c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b530:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800b534:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b538:	3328      	adds	r3, #40	@ 0x28
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	440b      	add	r3, r1
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	4313      	orrs	r3, r2
 800b544:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800b548:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b54c:	3b01      	subs	r3, #1
 800b54e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b552:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b556:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800b55a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b55e:	4413      	add	r3, r2
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	021b      	lsls	r3, r3, #8
 800b564:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b568:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b56c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800b570:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b574:	3328      	adds	r3, #40	@ 0x28
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	4313      	orrs	r3, r2
 800b580:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800b584:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800b588:	041a      	lsls	r2, r3, #16
 800b58a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800b58e:	431a      	orrs	r2, r3
 800b590:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b594:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800b596:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d8b1      	bhi.n	800b502 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	0fd10fd0 	.word	0x0fd10fd0
 800b5b0:	0fd30fd2 	.word	0x0fd30fd2
 800b5b4:	0fd50fd4 	.word	0x0fd50fd4
 800b5b8:	0fd70fd6 	.word	0x0fd70fd6

0800b5bc <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f84d 	bl	800b664 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	491f      	ldr	r1, [pc, #124]	@ (800b654 <JPEG_Set_HuffEnc_Mem+0x98>)
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7ff feec 	bl	800b3b4 <JPEG_Set_HuffAC_Mem>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	e030      	b.n	800b64c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	4918      	ldr	r1, [pc, #96]	@ (800b658 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff fedc 	bl	800b3b4 <JPEG_Set_HuffAC_Mem>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800b606:	7bfb      	ldrb	r3, [r7, #15]
 800b608:	e020      	b.n	800b64c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800b612:	461a      	mov	r2, r3
 800b614:	4911      	ldr	r1, [pc, #68]	@ (800b65c <JPEG_Set_HuffEnc_Mem+0xa0>)
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7ff fe4a 	bl	800b2b0 <JPEG_Set_HuffDC_Mem>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	e010      	b.n	800b64c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800b632:	461a      	mov	r2, r3
 800b634:	490a      	ldr	r1, [pc, #40]	@ (800b660 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff fe3a 	bl	800b2b0 <JPEG_Set_HuffDC_Mem>
 800b63c:	4603      	mov	r3, r0
 800b63e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	e000      	b.n	800b64c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	0801b6fc 	.word	0x0801b6fc
 800b658:	0801b7b0 	.word	0x0801b7b0
 800b65c:	0801b6c4 	.word	0x0801b6c4
 800b660:	0801b6e0 	.word	0x0801b6e0

0800b664 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800b664:	b480      	push	{r7}
 800b666:	b08b      	sub	sp, #44	@ 0x2c
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800b66c:	4b80      	ldr	r3, [pc, #512]	@ (800b870 <JPEG_Set_Huff_DHTMem+0x20c>)
 800b66e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800b670:	4b80      	ldr	r3, [pc, #512]	@ (800b874 <JPEG_Set_Huff_DHTMem+0x210>)
 800b672:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800b674:	4b80      	ldr	r3, [pc, #512]	@ (800b878 <JPEG_Set_Huff_DHTMem+0x214>)
 800b676:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800b678:	4b80      	ldr	r3, [pc, #512]	@ (800b87c <JPEG_Set_Huff_DHTMem+0x218>)
 800b67a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b684:	330c      	adds	r3, #12
 800b686:	623b      	str	r3, [r7, #32]
  index = 16;
 800b688:	2310      	movs	r3, #16
 800b68a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b68c:	e01d      	b.n	800b6ca <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	3b01      	subs	r3, #1
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	5cd3      	ldrb	r3, [r2, r3]
 800b696:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69a:	3b02      	subs	r3, #2
 800b69c:	6979      	ldr	r1, [r7, #20]
 800b69e:	5ccb      	ldrb	r3, [r1, r3]
 800b6a0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b6a2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	3b03      	subs	r3, #3
 800b6a8:	6979      	ldr	r1, [r7, #20]
 800b6aa:	5ccb      	ldrb	r3, [r1, r3]
 800b6ac:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b6ae:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800b6b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6b2:	3a04      	subs	r2, #4
 800b6b4:	6979      	ldr	r1, [r7, #20]
 800b6b6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b6b8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	601a      	str	r2, [r3, #0]
    address--;
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	3b04      	subs	r3, #4
 800b6c2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c6:	3b04      	subs	r3, #4
 800b6c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	2b03      	cmp	r3, #3
 800b6ce:	d8de      	bhi.n	800b68e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b6d8:	3318      	adds	r3, #24
 800b6da:	623b      	str	r3, [r7, #32]
  index = 12;
 800b6dc:	230c      	movs	r3, #12
 800b6de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b6e0:	e021      	b.n	800b726 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	7c1b      	ldrb	r3, [r3, #16]
 800b6ec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f0:	3b02      	subs	r3, #2
 800b6f2:	6979      	ldr	r1, [r7, #20]
 800b6f4:	440b      	add	r3, r1
 800b6f6:	7c1b      	ldrb	r3, [r3, #16]
 800b6f8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b6fa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	3b03      	subs	r3, #3
 800b700:	6979      	ldr	r1, [r7, #20]
 800b702:	440b      	add	r3, r1
 800b704:	7c1b      	ldrb	r3, [r3, #16]
 800b706:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800b708:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800b70a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b70c:	3a04      	subs	r2, #4
 800b70e:	6979      	ldr	r1, [r7, #20]
 800b710:	440a      	add	r2, r1
 800b712:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800b714:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	601a      	str	r2, [r3, #0]
    address--;
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	3b04      	subs	r3, #4
 800b71e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b722:	3b04      	subs	r3, #4
 800b724:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d8da      	bhi.n	800b6e2 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b734:	3328      	adds	r3, #40	@ 0x28
 800b736:	623b      	str	r3, [r7, #32]
  index = 16;
 800b738:	2310      	movs	r3, #16
 800b73a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b73c:	e01d      	b.n	800b77a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b740:	3b01      	subs	r3, #1
 800b742:	69fa      	ldr	r2, [r7, #28]
 800b744:	5cd3      	ldrb	r3, [r2, r3]
 800b746:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74a:	3b02      	subs	r3, #2
 800b74c:	69f9      	ldr	r1, [r7, #28]
 800b74e:	5ccb      	ldrb	r3, [r1, r3]
 800b750:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b752:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b756:	3b03      	subs	r3, #3
 800b758:	69f9      	ldr	r1, [r7, #28]
 800b75a:	5ccb      	ldrb	r3, [r1, r3]
 800b75c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b75e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800b760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b762:	3a04      	subs	r2, #4
 800b764:	69f9      	ldr	r1, [r7, #28]
 800b766:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b768:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	601a      	str	r2, [r3, #0]
    address--;
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	3b04      	subs	r3, #4
 800b772:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	3b04      	subs	r3, #4
 800b778:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	d8de      	bhi.n	800b73e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b788:	33cc      	adds	r3, #204	@ 0xcc
 800b78a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	4b3b      	ldr	r3, [pc, #236]	@ (800b880 <JPEG_Set_Huff_DHTMem+0x21c>)
 800b792:	4013      	ands	r3, r2
 800b794:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800b79c:	021a      	lsls	r2, r3, #8
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	69fa      	ldr	r2, [r7, #28]
 800b7a4:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800b7b2:	6a3b      	ldr	r3, [r7, #32]
 800b7b4:	3b04      	subs	r3, #4
 800b7b6:	623b      	str	r3, [r7, #32]
  index = 160;
 800b7b8:	23a0      	movs	r3, #160	@ 0xa0
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b7bc:	e021      	b.n	800b802 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	69fa      	ldr	r2, [r7, #28]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	7c1b      	ldrb	r3, [r3, #16]
 800b7c8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	3b02      	subs	r3, #2
 800b7ce:	69f9      	ldr	r1, [r7, #28]
 800b7d0:	440b      	add	r3, r1
 800b7d2:	7c1b      	ldrb	r3, [r3, #16]
 800b7d4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b7d6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7da:	3b03      	subs	r3, #3
 800b7dc:	69f9      	ldr	r1, [r7, #28]
 800b7de:	440b      	add	r3, r1
 800b7e0:	7c1b      	ldrb	r3, [r3, #16]
 800b7e2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800b7e4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800b7e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7e8:	3a04      	subs	r2, #4
 800b7ea:	69f9      	ldr	r1, [r7, #28]
 800b7ec:	440a      	add	r2, r1
 800b7ee:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800b7f0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	601a      	str	r2, [r3, #0]
    address--;
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	3b04      	subs	r3, #4
 800b7fa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	3b04      	subs	r3, #4
 800b800:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b804:	2b03      	cmp	r3, #3
 800b806:	d8da      	bhi.n	800b7be <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b810:	33cc      	adds	r3, #204	@ 0xcc
 800b812:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	785b      	ldrb	r3, [r3, #1]
 800b820:	061a      	lsls	r2, r3, #24
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	431a      	orrs	r2, r3
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	041b      	lsls	r3, r3, #16
 800b82c:	4313      	orrs	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b83e:	33dc      	adds	r3, #220	@ 0xdc
 800b840:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	4b0e      	ldr	r3, [pc, #56]	@ (800b880 <JPEG_Set_Huff_DHTMem+0x21c>)
 800b848:	4013      	ands	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	7bdb      	ldrb	r3, [r3, #15]
 800b850:	021a      	lsls	r2, r3, #8
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	4313      	orrs	r3, r2
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	7b92      	ldrb	r2, [r2, #14]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	3b04      	subs	r3, #4
 800b868:	623b      	str	r3, [r7, #32]
  index = 12;
 800b86a:	230c      	movs	r3, #12
 800b86c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b86e:	e027      	b.n	800b8c0 <JPEG_Set_Huff_DHTMem+0x25c>
 800b870:	0801b6fc 	.word	0x0801b6fc
 800b874:	0801b7b0 	.word	0x0801b7b0
 800b878:	0801b6c4 	.word	0x0801b6c4
 800b87c:	0801b6e0 	.word	0x0801b6e0
 800b880:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b886:	3301      	adds	r3, #1
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	5cd3      	ldrb	r3, [r2, r3]
 800b88c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800b88e:	6939      	ldr	r1, [r7, #16]
 800b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b892:	440b      	add	r3, r1
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b898:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800b89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89c:	3b01      	subs	r3, #1
 800b89e:	6939      	ldr	r1, [r7, #16]
 800b8a0:	5ccb      	ldrb	r3, [r1, r3]
 800b8a2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800b8a4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800b8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a8:	3a02      	subs	r2, #2
 800b8aa:	6939      	ldr	r1, [r7, #16]
 800b8ac:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800b8ae:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	601a      	str	r2, [r3, #0]
    address--;
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	3b04      	subs	r3, #4
 800b8b8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8bc:	3b04      	subs	r3, #4
 800b8be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d8de      	bhi.n	800b884 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b8ce:	33dc      	adds	r3, #220	@ 0xdc
 800b8d0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	7c5b      	ldrb	r3, [r3, #17]
 800b8de:	061a      	lsls	r2, r3, #24
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	431a      	orrs	r2, r3
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	7c1b      	ldrb	r3, [r3, #16]
 800b8e8:	041b      	lsls	r3, r3, #16
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b8fc:	33e8      	adds	r3, #232	@ 0xe8
 800b8fe:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	4b6d      	ldr	r3, [pc, #436]	@ (800babc <JPEG_Set_Huff_DHTMem+0x458>)
 800b906:	4013      	ands	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	7edb      	ldrb	r3, [r3, #27]
 800b90e:	021a      	lsls	r2, r3, #8
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4313      	orrs	r3, r2
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	7e92      	ldrb	r2, [r2, #26]
 800b918:	4313      	orrs	r3, r2
 800b91a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800b922:	6a3b      	ldr	r3, [r7, #32]
 800b924:	3b04      	subs	r3, #4
 800b926:	623b      	str	r3, [r7, #32]
  index = 8;
 800b928:	2308      	movs	r3, #8
 800b92a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b92c:	e021      	b.n	800b972 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800b92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b930:	3301      	adds	r3, #1
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4413      	add	r3, r2
 800b936:	7c1b      	ldrb	r3, [r3, #16]
 800b938:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800b93a:	6939      	ldr	r1, [r7, #16]
 800b93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93e:	440b      	add	r3, r1
 800b940:	3310      	adds	r3, #16
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800b946:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	3b01      	subs	r3, #1
 800b94c:	6939      	ldr	r1, [r7, #16]
 800b94e:	440b      	add	r3, r1
 800b950:	7c1b      	ldrb	r3, [r3, #16]
 800b952:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800b954:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800b956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b958:	3a02      	subs	r2, #2
 800b95a:	6939      	ldr	r1, [r7, #16]
 800b95c:	440a      	add	r2, r1
 800b95e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800b960:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	601a      	str	r2, [r3, #0]
    address--;
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	3b04      	subs	r3, #4
 800b96a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96e:	3b04      	subs	r3, #4
 800b970:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b974:	2b03      	cmp	r3, #3
 800b976:	d8da      	bhi.n	800b92e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b980:	33e8      	adds	r3, #232	@ 0xe8
 800b982:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	785b      	ldrb	r3, [r3, #1]
 800b990:	061a      	lsls	r2, r3, #24
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	431a      	orrs	r2, r3
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	041b      	lsls	r3, r3, #16
 800b99c:	4313      	orrs	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b9ae:	33f8      	adds	r3, #248	@ 0xf8
 800b9b0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800b9b2:	6a3b      	ldr	r3, [r7, #32]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	4b41      	ldr	r3, [pc, #260]	@ (800babc <JPEG_Set_Huff_DHTMem+0x458>)
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	7bdb      	ldrb	r3, [r3, #15]
 800b9c0:	021a      	lsls	r2, r3, #8
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	69ba      	ldr	r2, [r7, #24]
 800b9c8:	7b92      	ldrb	r2, [r2, #14]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b9ce:	6a3b      	ldr	r3, [r7, #32]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	3b04      	subs	r3, #4
 800b9d8:	623b      	str	r3, [r7, #32]
  index = 12;
 800b9da:	230c      	movs	r3, #12
 800b9dc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b9de:	e01d      	b.n	800ba1c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	69ba      	ldr	r2, [r7, #24]
 800b9e6:	5cd3      	ldrb	r3, [r2, r3]
 800b9e8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800b9ea:	69b9      	ldr	r1, [r7, #24]
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ee:	440b      	add	r3, r1
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b9f4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	69b9      	ldr	r1, [r7, #24]
 800b9fc:	5ccb      	ldrb	r3, [r1, r3]
 800b9fe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800ba00:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800ba02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba04:	3a02      	subs	r2, #2
 800ba06:	69b9      	ldr	r1, [r7, #24]
 800ba08:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ba0a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	601a      	str	r2, [r3, #0]
    address--;
 800ba10:	6a3b      	ldr	r3, [r7, #32]
 800ba12:	3b04      	subs	r3, #4
 800ba14:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba18:	3b04      	subs	r3, #4
 800ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d8de      	bhi.n	800b9e0 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ba2a:	33f8      	adds	r3, #248	@ 0xf8
 800ba2c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	7c5b      	ldrb	r3, [r3, #17]
 800ba3a:	061a      	lsls	r2, r3, #24
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	431a      	orrs	r2, r3
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	7c1b      	ldrb	r3, [r3, #16]
 800ba44:	041b      	lsls	r3, r3, #16
 800ba46:	4313      	orrs	r3, r2
 800ba48:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ba58:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800ba5c:	623b      	str	r3, [r7, #32]
  index = 160;
 800ba5e:	23a0      	movs	r3, #160	@ 0xa0
 800ba60:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ba62:	e021      	b.n	800baa8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ba64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba66:	3301      	adds	r3, #1
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	7c1b      	ldrb	r3, [r3, #16]
 800ba6e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ba70:	69b9      	ldr	r1, [r7, #24]
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	440b      	add	r3, r1
 800ba76:	3310      	adds	r3, #16
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ba7c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	3b01      	subs	r3, #1
 800ba82:	69b9      	ldr	r1, [r7, #24]
 800ba84:	440b      	add	r3, r1
 800ba86:	7c1b      	ldrb	r3, [r3, #16]
 800ba88:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ba8a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800ba8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba8e:	3a02      	subs	r2, #2
 800ba90:	69b9      	ldr	r1, [r7, #24]
 800ba92:	440a      	add	r2, r1
 800ba94:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ba96:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	601a      	str	r2, [r3, #0]
    address--;
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	3b04      	subs	r3, #4
 800baa0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800baa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa4:	3b04      	subs	r3, #4
 800baa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800baa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d8da      	bhi.n	800ba64 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800baae:	bf00      	nop
 800bab0:	bf00      	nop
 800bab2:	372c      	adds	r7, #44	@ 0x2c
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	ffff0000 	.word	0xffff0000

0800bac0 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bacc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bad8:	f003 0303 	and.w	r3, r3, #3
 800badc:	2b02      	cmp	r3, #2
 800bade:	d108      	bne.n	800baf2 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f042 0208 	orr.w	r2, r2, #8
 800baee:	605a      	str	r2, [r3, #4]
 800baf0:	e007      	b.n	800bb02 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	685a      	ldr	r2, [r3, #4]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 0208 	bic.w	r2, r2, #8
 800bb00:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 0201 	bic.w	r2, r2, #1
 800bb10:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800bb20:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb30:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb40:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bb50:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f042 0201 	orr.w	r2, r2, #1
 800bb60:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb66:	f003 030c 	and.w	r3, r3, #12
 800bb6a:	2b08      	cmp	r3, #8
 800bb6c:	d108      	bne.n	800bb80 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800bb7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800bb7e:	e00d      	b.n	800bb9c <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb84:	f003 030c 	and.w	r3, r3, #12
 800bb88:	2b0c      	cmp	r3, #12
 800bb8a:	d107      	bne.n	800bb9c <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bb9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbb4:	f003 0303 	and.w	r3, r3, #3
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d125      	bne.n	800bc08 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d01e      	beq.n	800bc08 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3304      	adds	r3, #4
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7fe ffa7 	bl	800ab24 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3304      	adds	r3, #4
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7ff f996 	bl	800af14 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bbf6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc06:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d116      	bne.n	800bc42 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc1a:	f003 0302 	and.w	r3, r3, #2
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800bc22:	2108      	movs	r1, #8
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f988 	bl	800bf3a <JPEG_ReadInputData>
 800bc2a:	e00a      	b.n	800bc42 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d003      	beq.n	800bc42 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f97c 	bl	800bf3a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d116      	bne.n	800bc7c <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc54:	f003 0308 	and.w	r3, r3, #8
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800bc5c:	2108      	movs	r1, #8
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f864 	bl	800bd2c <JPEG_StoreOutputData>
 800bc64:	e00a      	b.n	800bc7c <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc6c:	f003 0310 	and.w	r3, r3, #16
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800bc74:	2101      	movs	r1, #1
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f858 	bl	800bd2c <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc86:	2b20      	cmp	r3, #32
 800bc88:	d14b      	bne.n	800bd22 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f022 0201 	bic.w	r2, r2, #1
 800bc98:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc9e:	f003 030c 	and.w	r3, r3, #12
 800bca2:	2b08      	cmp	r3, #8
 800bca4:	d107      	bne.n	800bcb6 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800bcb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bcc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	69d9      	ldr	r1, [r3, #28]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7f5 fe61 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bce8:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcee:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f003 0303 	and.w	r3, r3, #3
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d103      	bne.n	800bd18 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7f5 fe25 	bl	8001960 <HAL_JPEG_DecodeCpltCallback>
 800bd16:	e002      	b.n	800bd1e <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7ff f906 	bl	800af2a <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e000      	b.n	800bd24 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	440b      	add	r3, r1
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d34b      	bcc.n	800bde0 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800bd48:	2300      	movs	r3, #0
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	e031      	b.n	800bdb2 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd54:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	69da      	ldr	r2, [r3, #28]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd5e:	4413      	add	r3, r2
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	b2d2      	uxtb	r2, r2
 800bd64:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	0a19      	lsrs	r1, r3, #8
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	69da      	ldr	r2, [r3, #28]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd72:	3301      	adds	r3, #1
 800bd74:	4413      	add	r3, r2
 800bd76:	b2ca      	uxtb	r2, r1
 800bd78:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	0c19      	lsrs	r1, r3, #16
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	69da      	ldr	r2, [r3, #28]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd86:	3302      	adds	r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	b2ca      	uxtb	r2, r1
 800bd8c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	0e19      	lsrs	r1, r3, #24
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	69da      	ldr	r2, [r3, #28]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd9a:	3303      	adds	r3, #3
 800bd9c:	4413      	add	r3, r2
 800bd9e:	b2ca      	uxtb	r2, r1
 800bda0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda6:	1d1a      	adds	r2, r3, #4
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	617b      	str	r3, [r7, #20]
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d3c9      	bcc.n	800bd4e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	f040 80b5 	bne.w	800bf32 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	69d9      	ldr	r1, [r3, #28]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7f5 fde4 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800bdde:	e0a8      	b.n	800bf32 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde8:	429a      	cmp	r2, r3
 800bdea:	f240 80a2 	bls.w	800bf32 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	089b      	lsrs	r3, r3, #2
 800bdfa:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	617b      	str	r3, [r7, #20]
 800be00:	e031      	b.n	800be66 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be08:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69da      	ldr	r2, [r3, #28]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be12:	4413      	add	r3, r2
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	b2d2      	uxtb	r2, r2
 800be18:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	0a19      	lsrs	r1, r3, #8
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	69da      	ldr	r2, [r3, #28]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be26:	3301      	adds	r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	b2ca      	uxtb	r2, r1
 800be2c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	0c19      	lsrs	r1, r3, #16
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	69da      	ldr	r2, [r3, #28]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be3a:	3302      	adds	r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	b2ca      	uxtb	r2, r1
 800be40:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	0e19      	lsrs	r1, r3, #24
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	69da      	ldr	r2, [r3, #28]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be4e:	3303      	adds	r3, #3
 800be50:	4413      	add	r3, r2
 800be52:	b2ca      	uxtb	r2, r1
 800be54:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5a:	1d1a      	adds	r2, r3, #4
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	3301      	adds	r3, #1
 800be64:	617b      	str	r3, [r7, #20]
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d3c9      	bcc.n	800be02 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be76:	429a      	cmp	r2, r3
 800be78:	d10b      	bne.n	800be92 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	69d9      	ldr	r1, [r3, #28]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be82:	461a      	mov	r2, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7f5 fd8b 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800be90:	e04f      	b.n	800bf32 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bea4:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
 800beaa:	e015      	b.n	800bed8 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	f003 0303 	and.w	r3, r3, #3
 800beb2:	00db      	lsls	r3, r3, #3
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	fa22 f103 	lsr.w	r1, r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	69da      	ldr	r2, [r3, #28]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec2:	4413      	add	r3, r2
 800bec4:	b2ca      	uxtb	r2, r1
 800bec6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800becc:	1c5a      	adds	r2, r3, #1
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	3301      	adds	r3, #1
 800bed6:	617b      	str	r3, [r7, #20]
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d3e5      	bcc.n	800beac <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	69d9      	ldr	r1, [r3, #28]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee8:	461a      	mov	r2, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7f5 fd58 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f1c3 0304 	rsb	r3, r3, #4
 800befc:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	617b      	str	r3, [r7, #20]
 800bf02:	e013      	b.n	800bf2c <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	fa22 f103 	lsr.w	r1, r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	69da      	ldr	r2, [r3, #28]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf16:	4413      	add	r3, r2
 800bf18:	b2ca      	uxtb	r2, r1
 800bf1a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf20:	1c5a      	adds	r2, r3, #1
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	617b      	str	r3, [r7, #20]
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	d9e8      	bls.n	800bf04 <JPEG_StoreOutputData+0x1d8>
}
 800bf32:	bf00      	nop
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b088      	sub	sp, #32
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <JPEG_ReadInputData+0x1c>
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d104      	bne.n	800bf60 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800bf56:	2101      	movs	r1, #1
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7fe fedb 	bl	800ad14 <HAL_JPEG_Pause>
 800bf5e:	e028      	b.n	800bfb2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a1b      	ldr	r3, [r3, #32]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d906      	bls.n	800bf7a <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a1b      	ldr	r3, [r3, #32]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	61fb      	str	r3, [r7, #28]
 800bf78:	e01b      	b.n	800bfb2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d115      	bne.n	800bfb2 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7fe ffd6 	bl	800af3e <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	d905      	bls.n	800bfa6 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf9e:	f023 0203 	bic.w	r2, r3, #3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb0:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f040 809f 	bne.w	800c0fe <JPEG_ReadInputData+0x1c4>
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f000 809b 	beq.w	800c0fe <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	089b      	lsrs	r3, r3, #2
 800bfcc:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d335      	bcc.n	800c042 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	61bb      	str	r3, [r7, #24]
 800bfda:	e02d      	b.n	800c038 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a1b      	ldr	r3, [r3, #32]
 800bfe0:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	699a      	ldr	r2, [r3, #24]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	4413      	add	r3, r2
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	699a      	ldr	r2, [r3, #24]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3301      	adds	r3, #1
 800bff6:	4413      	add	r3, r2
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800bffc:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6999      	ldr	r1, [r3, #24]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3302      	adds	r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c00e:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	699a      	ldr	r2, [r3, #24]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3303      	adds	r3, #3
 800c01a:	4413      	add	r3, r2
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c024:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c026:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a1b      	ldr	r3, [r3, #32]
 800c02c:	1d1a      	adds	r2, r3, #4
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	3301      	adds	r3, #1
 800c036:	61bb      	str	r3, [r7, #24]
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d3cd      	bcc.n	800bfdc <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800c040:	e05d      	b.n	800c0fe <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d035      	beq.n	800c0b4 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800c048:	2300      	movs	r3, #0
 800c04a:	61bb      	str	r3, [r7, #24]
 800c04c:	e02d      	b.n	800c0aa <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a1b      	ldr	r3, [r3, #32]
 800c052:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	699a      	ldr	r2, [r3, #24]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4413      	add	r3, r2
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	699a      	ldr	r2, [r3, #24]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	3301      	adds	r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c06e:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6999      	ldr	r1, [r3, #24]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3302      	adds	r3, #2
 800c07a:	440b      	add	r3, r1
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c080:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	699a      	ldr	r2, [r3, #24]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3303      	adds	r3, #3
 800c08c:	4413      	add	r3, r2
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c096:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c098:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	1d1a      	adds	r2, r3, #4
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	61bb      	str	r3, [r7, #24]
 800c0aa:	69ba      	ldr	r2, [r7, #24]
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d3cd      	bcc.n	800c04e <JPEG_ReadInputData+0x114>
}
 800c0b2:	e024      	b.n	800c0fe <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	61bb      	str	r3, [r7, #24]
 800c0bc:	e017      	b.n	800c0ee <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	699a      	ldr	r2, [r3, #24]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	f003 0303 	and.w	r3, r3, #3
 800c0d2:	00db      	lsls	r3, r3, #3
 800c0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	61bb      	str	r3, [r7, #24]
 800c0ee:	69ba      	ldr	r2, [r7, #24]
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d3e3      	bcc.n	800c0be <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800c0fe:	bf00      	nop
 800c100:	3720      	adds	r7, #32
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c108:	b590      	push	{r4, r7, lr}
 800c10a:	b087      	sub	sp, #28
 800c10c:	af02      	add	r7, sp, #8
 800c10e:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c116:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c11e:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	429a      	cmp	r2, r3
 800c128:	d804      	bhi.n	800c134 <JPEG_DMA_StartProcess+0x2c>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	429a      	cmp	r2, r3
 800c132:	d901      	bls.n	800c138 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	e074      	b.n	800c222 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c13c:	4a3b      	ldr	r2, [pc, #236]	@ (800c22c <JPEG_DMA_StartProcess+0x124>)
 800c13e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c144:	4a3a      	ldr	r2, [pc, #232]	@ (800c230 <JPEG_DMA_StartProcess+0x128>)
 800c146:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14c:	4a39      	ldr	r2, [pc, #228]	@ (800c234 <JPEG_DMA_StartProcess+0x12c>)
 800c14e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c154:	4a36      	ldr	r2, [pc, #216]	@ (800c230 <JPEG_DMA_StartProcess+0x128>)
 800c156:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c15c:	4a36      	ldr	r2, [pc, #216]	@ (800c238 <JPEG_DMA_StartProcess+0x130>)
 800c15e:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d002      	beq.n	800c16c <JPEG_DMA_StartProcess+0x64>
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d107      	bne.n	800c17c <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c170:	f043 0204 	orr.w	r2, r3, #4
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e052      	b.n	800c222 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c184:	68f9      	ldr	r1, [r7, #12]
 800c186:	fbb3 f1f1 	udiv	r1, r3, r1
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	fb00 f101 	mul.w	r1, r0, r1
 800c190:	1a5b      	subs	r3, r3, r1
 800c192:	1ad2      	subs	r2, r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	fbb3 f1f1 	udiv	r1, r3, r1
 800c1a6:	68b8      	ldr	r0, [r7, #8]
 800c1a8:	fb00 f101 	mul.w	r1, r0, r1
 800c1ac:	1a5b      	subs	r3, r3, r1
 800c1ae:	1ad2      	subs	r2, r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	3344      	adds	r3, #68	@ 0x44
 800c1be:	4619      	mov	r1, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	461c      	mov	r4, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	9200      	str	r2, [sp, #0]
 800c1ce:	4622      	mov	r2, r4
 800c1d0:	f000 fbe2 	bl	800c998 <HAL_MDMA_Start_IT>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d007      	beq.n	800c1ea <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1de:	f043 0204 	orr.w	r2, r3, #4
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e01b      	b.n	800c222 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3340      	adds	r3, #64	@ 0x40
 800c1fa:	461c      	mov	r4, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c200:	2201      	movs	r2, #1
 800c202:	9200      	str	r2, [sp, #0]
 800c204:	4622      	mov	r2, r4
 800c206:	f000 fbc7 	bl	800c998 <HAL_MDMA_Start_IT>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d007      	beq.n	800c220 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c214:	f043 0204 	orr.w	r2, r3, #4
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e000      	b.n	800c222 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3714      	adds	r7, #20
 800c226:	46bd      	mov	sp, r7
 800c228:	bd90      	pop	{r4, r7, pc}
 800c22a:	bf00      	nop
 800c22c:	0800c53b 	.word	0x0800c53b
 800c230:	0800c729 	.word	0x0800c729
 800c234:	0800c667 	.word	0x0800c667
 800c238:	0800c779 	.word	0x0800c779

0800c23c <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d125      	bne.n	800c29c <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d01e      	beq.n	800c29c <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3304      	adds	r3, #4
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f7fe fc5d 	bl	800ab24 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3304      	adds	r3, #4
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7fe fe4c 	bl	800af14 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c28a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c29a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2a2:	f003 0320 	and.w	r3, r3, #32
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d039      	beq.n	800c31e <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ae:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f022 0201 	bic.w	r2, r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c2d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c2e4:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d104      	bne.n	800c2fe <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 fc29 	bl	800cb50 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d105      	bne.n	800c318 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c310:	4618      	mov	r0, r3
 800c312:	f000 fc1d 	bl	800cb50 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800c316:	e002      	b.n	800c31e <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f804 	bl	800c326 <JPEG_DMA_EndProcess>
}
 800c31e:	bf00      	nop
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d10a      	bne.n	800c366 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	69d9      	ldr	r1, [r3, #28]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c358:	461a      	mov	r2, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7f5 fb20 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c36c:	f003 0310 	and.w	r3, r3, #16
 800c370:	2b00      	cmp	r3, #0
 800c372:	d134      	bne.n	800c3de <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00a      	beq.n	800c392 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	69d9      	ldr	r1, [r3, #28]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c384:	461a      	mov	r2, r3
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7f5 fb0a 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0201 	bic.w	r2, r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3a6:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ac:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d103      	bne.n	800c3d6 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7f5 fac6 	bl	8001960 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800c3d4:	e00c      	b.n	800c3f0 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7fe fda7 	bl	800af2a <HAL_JPEG_EncodeCpltCallback>
}
 800c3dc:	e008      	b.n	800c3f0 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d102      	bne.n	800c3f0 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f804 	bl	800c3f8 <JPEG_DMA_PollResidualData>
}
 800c3f0:	bf00      	nop
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c400:	2310      	movs	r3, #16
 800c402:	617b      	str	r3, [r7, #20]
 800c404:	e04f      	b.n	800c4a6 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c40a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d146      	bne.n	800c4a0 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c418:	f003 0310 	and.w	r3, r3, #16
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d03f      	beq.n	800c4a0 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c426:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	69da      	ldr	r2, [r3, #28]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c430:	4413      	add	r3, r2
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	b2d2      	uxtb	r2, r2
 800c436:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	0a19      	lsrs	r1, r3, #8
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	69da      	ldr	r2, [r3, #28]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c444:	3301      	adds	r3, #1
 800c446:	4413      	add	r3, r2
 800c448:	b2ca      	uxtb	r2, r1
 800c44a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	0c19      	lsrs	r1, r3, #16
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	69da      	ldr	r2, [r3, #28]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c458:	3302      	adds	r3, #2
 800c45a:	4413      	add	r3, r2
 800c45c:	b2ca      	uxtb	r2, r1
 800c45e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	0e19      	lsrs	r1, r3, #24
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	69da      	ldr	r2, [r3, #28]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c46c:	3303      	adds	r3, #3
 800c46e:	4413      	add	r3, r2
 800c470:	b2ca      	uxtb	r2, r1
 800c472:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c478:	1d1a      	adds	r2, r3, #4
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c486:	429a      	cmp	r2, r3
 800c488:	d10a      	bne.n	800c4a0 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	69d9      	ldr	r1, [r3, #28]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c492:	461a      	mov	r2, r3
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7f5 fa83 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	617b      	str	r3, [r7, #20]
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1ac      	bne.n	800c406 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4b0:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b8:	f003 0310 	and.w	r3, r3, #16
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <JPEG_DMA_PollResidualData+0xd2>
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d133      	bne.n	800c532 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f022 0201 	bic.w	r2, r2, #1
 800c4d8:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	69d9      	ldr	r1, [r3, #28]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7f5 fa57 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4fc:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c502:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f003 0303 	and.w	r3, r3, #3
 800c520:	2b02      	cmp	r3, #2
 800c522:	d103      	bne.n	800c52c <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7f5 fa1b 	bl	8001960 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800c52a:	e002      	b.n	800c532 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7fe fcfc 	bl	800af2a <HAL_JPEG_EncodeCpltCallback>
}
 800c532:	bf00      	nop
 800c534:	3718      	adds	r7, #24
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800c53a:	b590      	push	{r4, r7, lr}
 800c53c:	b087      	sub	sp, #28
 800c53e:	af02      	add	r7, sp, #8
 800c540:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c546:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c556:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c55c:	f248 030c 	movw	r3, #32780	@ 0x800c
 800c560:	4013      	ands	r3, r2
 800c562:	2b0c      	cmp	r3, #12
 800c564:	d17c      	bne.n	800c660 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c56c:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c57c:	1ad2      	subs	r2, r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	4619      	mov	r1, r3
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7fe fcd8 	bl	800af3e <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	429a      	cmp	r2, r3
 800c596:	d81f      	bhi.n	800c5d8 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10d      	bne.n	800c5ba <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5a2:	f043 0204 	orr.w	r2, r3, #4
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2206      	movs	r2, #6
 800c5ae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f7f5 f9e4 	bl	8001980 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800c5b8:	e052      	b.n	800c660 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	fbb3 f1f1 	udiv	r1, r3, r1
 800c5c8:	68b8      	ldr	r0, [r7, #8]
 800c5ca:	fb00 f101 	mul.w	r1, r0, r1
 800c5ce:	1a5b      	subs	r3, r3, r1
 800c5d0:	1ad2      	subs	r2, r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	629a      	str	r2, [r3, #40]	@ 0x28
 800c5d6:	e010      	b.n	800c5fa <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00c      	beq.n	800c5fa <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e4:	f003 0303 	and.w	r3, r3, #3
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d006      	beq.n	800c5fa <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f0:	089b      	lsrs	r3, r3, #2
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	009a      	lsls	r2, r3, #2
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c602:	2b00      	cmp	r3, #0
 800c604:	d124      	bne.n	800c650 <JPEG_MDMAInCpltCallback+0x116>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d020      	beq.n	800c650 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	699b      	ldr	r3, [r3, #24]
 800c616:	4619      	mov	r1, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3340      	adds	r3, #64	@ 0x40
 800c61e:	461c      	mov	r4, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c624:	2201      	movs	r2, #1
 800c626:	9200      	str	r2, [sp, #0]
 800c628:	4622      	mov	r2, r4
 800c62a:	f000 f9b5 	bl	800c998 <HAL_MDMA_Start_IT>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00d      	beq.n	800c650 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c638:	f043 0204 	orr.w	r2, r3, #4
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2206      	movs	r2, #6
 800c644:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f7f5 f999 	bl	8001980 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800c64e:	e007      	b.n	800c660 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c65e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800c660:	3714      	adds	r7, #20
 800c662:	46bd      	mov	sp, r7
 800c664:	bd90      	pop	{r4, r7, pc}

0800c666 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800c666:	b590      	push	{r4, r7, lr}
 800c668:	b087      	sub	sp, #28
 800c66a:	af02      	add	r7, sp, #8
 800c66c:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c672:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c682:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c688:	f248 030c 	movw	r3, #32780	@ 0x800c
 800c68c:	4013      	ands	r3, r2
 800c68e:	2b0c      	cmp	r3, #12
 800c690:	d147      	bne.n	800c722 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c698:	f003 0320 	and.w	r3, r3, #32
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d138      	bne.n	800c712 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	69d9      	ldr	r1, [r3, #28]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6bc:	461a      	mov	r2, r3
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7f5 f96e 	bl	80019a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d120      	bne.n	800c712 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3344      	adds	r3, #68	@ 0x44
 800c6da:	4619      	mov	r1, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	461c      	mov	r4, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	9200      	str	r2, [sp, #0]
 800c6ea:	4622      	mov	r2, r4
 800c6ec:	f000 f954 	bl	800c998 <HAL_MDMA_Start_IT>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00d      	beq.n	800c712 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6fa:	f043 0204 	orr.w	r2, r3, #4
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2206      	movs	r2, #6
 800c706:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7f5 f938 	bl	8001980 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800c710:	e007      	b.n	800c722 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c720:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	bd90      	pop	{r4, r7, pc}

0800c728 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c734:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f022 0201 	bic.w	r2, r2, #1
 800c744:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c754:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c762:	f043 0204 	orr.w	r2, r3, #4
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f7f5 f908 	bl	8001980 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800c770:	bf00      	nop
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c784:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c78a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7ff fdc7 	bl	800c326 <JPEG_DMA_EndProcess>
  }
}
 800c798:	bf00      	nop
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b08b      	sub	sp, #44	@ 0x2c
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3350      	adds	r3, #80	@ 0x50
 800c7b2:	61bb      	str	r3, [r7, #24]

  i = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c7b8:	e042      	b.n	800c840 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	61fb      	str	r3, [r7, #28]
 800c7c4:	e033      	b.n	800c82e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d103      	bne.n	800c7e2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7dc:	3364      	adds	r3, #100	@ 0x64
 800c7de:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7e0:	e022      	b.n	800c828 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2264      	movs	r2, #100	@ 0x64
 800c7e6:	fb02 f303 	mul.w	r3, r2, r3
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c7ee:	6a38      	ldr	r0, [r7, #32]
 800c7f0:	69f9      	ldr	r1, [r7, #28]
 800c7f2:	4401      	add	r1, r0
 800c7f4:	4818      	ldr	r0, [pc, #96]	@ (800c858 <JPEG_GetQuality+0xb8>)
 800c7f6:	5c41      	ldrb	r1, [r0, r1]
 800c7f8:	440a      	add	r2, r1
 800c7fa:	7812      	ldrb	r2, [r2, #0]
 800c7fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c800:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b64      	cmp	r3, #100	@ 0x64
 800c806:	d807      	bhi.n	800c818 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800c80e:	085b      	lsrs	r3, r3, #1
 800c810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c812:	4413      	add	r3, r2
 800c814:	627b      	str	r3, [r7, #36]	@ 0x24
 800c816:	e007      	b.n	800c828 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800c818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c824:	4413      	add	r3, r2
 800c826:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	3301      	adds	r3, #1
 800c82c:	61fb      	str	r3, [r7, #28]
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	2b03      	cmp	r3, #3
 800c832:	d9c8      	bls.n	800c7c6 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	3304      	adds	r3, #4
 800c838:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	3304      	adds	r3, #4
 800c83e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	2b3c      	cmp	r3, #60	@ 0x3c
 800c844:	d9b9      	bls.n	800c7ba <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	099b      	lsrs	r3, r3, #6
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	372c      	adds	r7, #44	@ 0x2c
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	0801b864 	.word	0x0801b864

0800c85c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c864:	f7f6 ff5c 	bl	8003720 <HAL_GetTick>
 800c868:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	e03b      	b.n	800c8ec <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2202      	movs	r2, #2
 800c880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f022 0201 	bic.w	r2, r2, #1
 800c892:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c894:	e00f      	b.n	800c8b6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800c896:	f7f6 ff43 	bl	8003720 <HAL_GetTick>
 800c89a:	4602      	mov	r2, r0
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	2b05      	cmp	r3, #5
 800c8a2:	d908      	bls.n	800c8b6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2240      	movs	r2, #64	@ 0x40
 800c8a8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2203      	movs	r2, #3
 800c8ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e01a      	b.n	800c8ec <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1e8      	bne.n	800c896 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fb2f 	bl	800cf28 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	e03e      	b.n	800c98c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c914:	2b01      	cmp	r3, #1
 800c916:	d101      	bne.n	800c91c <HAL_MDMA_ConfigPostRequestMask+0x28>
 800c918:	2302      	movs	r3, #2
 800c91a:	e037      	b.n	800c98c <HAL_MDMA_ConfigPostRequestMask+0x98>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d126      	bne.n	800c97e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d11c      	bne.n	800c978 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d108      	bne.n	800c966 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	691a      	ldr	r2, [r3, #16]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c962:	611a      	str	r2, [r3, #16]
 800c964:	e00d      	b.n	800c982 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	691a      	ldr	r2, [r3, #16]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c974:	611a      	str	r2, [r3, #16]
 800c976:	e004      	b.n	800c982 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	75fb      	strb	r3, [r7, #23]
 800c97c:	e001      	b.n	800c982 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800c97e:	2301      	movs	r3, #1
 800c980:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	371c      	adds	r7, #28
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af02      	add	r7, sp, #8
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e070      	b.n	800ca92 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d101      	bne.n	800c9be <HAL_MDMA_Start_IT+0x26>
 800c9ba:	2302      	movs	r3, #2
 800c9bc:	e069      	b.n	800ca92 <HAL_MDMA_Start_IT+0xfa>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d158      	bne.n	800ca84 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68da      	ldr	r2, [r3, #12]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f022 0201 	bic.w	r2, r2, #1
 800c9ee:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	68b9      	ldr	r1, [r7, #8]
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f000 fa24 	bl	800ce48 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68da      	ldr	r2, [r3, #12]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f042 0206 	orr.w	r2, r2, #6
 800ca0e:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d007      	beq.n	800ca28 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68da      	ldr	r2, [r3, #12]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0210 	orr.w	r2, r2, #16
 800ca26:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d007      	beq.n	800ca40 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68da      	ldr	r2, [r3, #12]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f042 0208 	orr.w	r2, r2, #8
 800ca3e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d007      	beq.n	800ca58 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68da      	ldr	r2, [r3, #12]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f042 0220 	orr.w	r2, r2, #32
 800ca56:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68da      	ldr	r2, [r3, #12]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f042 0201 	orr.w	r2, r2, #1
 800ca66:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca70:	d10e      	bne.n	800ca90 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68da      	ldr	r2, [r3, #12]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ca80:	60da      	str	r2, [r3, #12]
 800ca82:	e005      	b.n	800ca90 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	e000      	b.n	800ca92 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800caa2:	f7f6 fe3d 	bl	8003720 <HAL_GetTick>
 800caa6:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d101      	bne.n	800cab2 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e04a      	b.n	800cb48 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d008      	beq.n	800cad0 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2280      	movs	r2, #128	@ 0x80
 800cac2:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	e03b      	b.n	800cb48 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68da      	ldr	r2, [r3, #12]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800cade:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68da      	ldr	r2, [r3, #12]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f022 0201 	bic.w	r2, r2, #1
 800caee:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800caf0:	e016      	b.n	800cb20 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800caf2:	f7f6 fe15 	bl	8003720 <HAL_GetTick>
 800caf6:	4602      	mov	r2, r0
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	2b05      	cmp	r3, #5
 800cafe:	d90f      	bls.n	800cb20 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2203      	movs	r2, #3
 800cb18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e013      	b.n	800cb48 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	f003 0301 	and.w	r3, r3, #1
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e1      	bne.n	800caf2 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	221f      	movs	r2, #31
 800cb34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2201      	movs	r2, #1
 800cb42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e017      	b.n	800cb92 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d004      	beq.n	800cb78 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2280      	movs	r2, #128	@ 0x80
 800cb72:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e00c      	b.n	800cb92 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2204      	movs	r2, #4
 800cb7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 0201 	bic.w	r2, r2, #1
 800cb8e:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	370c      	adds	r7, #12
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
	...

0800cba0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cbac:	4b91      	ldr	r3, [pc, #580]	@ (800cdf4 <HAL_MDMA_IRQHandler+0x254>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a91      	ldr	r2, [pc, #580]	@ (800cdf8 <HAL_MDMA_IRQHandler+0x258>)
 800cbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb6:	0a9b      	lsrs	r3, r3, #10
 800cbb8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	4b8e      	ldr	r3, [pc, #568]	@ (800cdfc <HAL_MDMA_IRQHandler+0x25c>)
 800cbc2:	4413      	add	r3, r2
 800cbc4:	099b      	lsrs	r3, r3, #6
 800cbc6:	f003 031f 	and.w	r3, r3, #31
 800cbca:	2201      	movs	r2, #1
 800cbcc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800cbd2:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	4013      	ands	r3, r2
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 812d 	beq.w	800ce3c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d054      	beq.n	800cc9a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d04d      	beq.n	800cc9a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	68da      	ldr	r2, [r3, #12]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f022 0202 	bic.w	r2, r2, #2
 800cc0c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc24:	f043 0201 	orr.w	r2, r3, #1
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	669a      	str	r2, [r3, #104]	@ 0x68
 800cc2c:	e005      	b.n	800cc3a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc32:	f043 0202 	orr.w	r2, r3, #2
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d005      	beq.n	800cc50 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc48:	f043 0204 	orr.w	r2, r3, #4
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d005      	beq.n	800cc66 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc5e:	f043 0208 	orr.w	r2, r3, #8
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d005      	beq.n	800cc7c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc74:	f043 0210 	orr.w	r2, r3, #16
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d005      	beq.n	800cc92 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc8a:	f043 0220 	orr.w	r2, r3, #32
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2201      	movs	r2, #1
 800cc98:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f003 0310 	and.w	r3, r3, #16
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d012      	beq.n	800ccce <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	f003 0320 	and.w	r3, r3, #32
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00b      	beq.n	800ccce <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2210      	movs	r2, #16
 800ccbc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 0308 	and.w	r3, r3, #8
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d012      	beq.n	800cd02 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f003 0310 	and.w	r3, r3, #16
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00b      	beq.n	800cd02 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2208      	movs	r2, #8
 800ccf0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0304 	and.w	r3, r3, #4
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d012      	beq.n	800cd36 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f003 0308 	and.w	r3, r3, #8
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00b      	beq.n	800cd36 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2204      	movs	r2, #4
 800cd24:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d003      	beq.n	800cd36 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f003 0302 	and.w	r3, r3, #2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d039      	beq.n	800cdb8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	f003 0304 	and.w	r3, r3, #4
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d032      	beq.n	800cdb8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	68da      	ldr	r2, [r3, #12]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800cd60:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	2b04      	cmp	r3, #4
 800cd6c:	d110      	bne.n	800cd90 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d05c      	beq.n	800ce40 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	4798      	blx	r3
        }
        return;
 800cd8e:	e057      	b.n	800ce40 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2202      	movs	r2, #2
 800cd96:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d003      	beq.n	800cdb8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d040      	beq.n	800ce42 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2204      	movs	r2, #4
 800cdc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f022 0201 	bic.w	r2, r2, #1
 800cdd6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	3301      	adds	r3, #1
 800cddc:	60bb      	str	r3, [r7, #8]
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d30d      	bcc.n	800ce00 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	f003 0301 	and.w	r3, r3, #1
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1f2      	bne.n	800cdd8 <HAL_MDMA_IRQHandler+0x238>
 800cdf2:	e006      	b.n	800ce02 <HAL_MDMA_IRQHandler+0x262>
 800cdf4:	24000240 	.word	0x24000240
 800cdf8:	1b4e81b5 	.word	0x1b4e81b5
 800cdfc:	adffffc0 	.word	0xadffffc0
        break;
 800ce00:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d004      	beq.n	800ce22 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ce20:	e003      	b.n	800ce2a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2201      	movs	r2, #1
 800ce26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d007      	beq.n	800ce42 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	4798      	blx	r3
 800ce3a:	e002      	b.n	800ce42 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800ce3c:	bf00      	nop
 800ce3e:	e000      	b.n	800ce42 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800ce40:	bf00      	nop
    }
  }
}
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	695a      	ldr	r2, [r3, #20]
 800ce5c:	4b31      	ldr	r3, [pc, #196]	@ (800cf24 <MDMA_SetConfig+0xdc>)
 800ce5e:	4013      	ands	r3, r2
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	6812      	ldr	r2, [r2, #0]
 800ce6a:	430b      	orrs	r3, r1
 800ce6c:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	695b      	ldr	r3, [r3, #20]
 800ce74:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ce78:	6a3b      	ldr	r3, [r7, #32]
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	051a      	lsls	r2, r3, #20
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	430a      	orrs	r2, r1
 800ce84:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	221f      	movs	r2, #31
 800ce8c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800cea4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ceac:	d002      	beq.n	800ceb4 <MDMA_SetConfig+0x6c>
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d108      	bne.n	800cec6 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800cec2:	629a      	str	r2, [r3, #40]	@ 0x28
 800cec4:	e007      	b.n	800ced6 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ced4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800cedc:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cee4:	d002      	beq.n	800ceec <MDMA_SetConfig+0xa4>
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d108      	bne.n	800cefe <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800cefa:	629a      	str	r2, [r3, #40]	@ 0x28
 800cefc:	e007      	b.n	800cf0e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800cf0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800cf18:	bf00      	nop
 800cf1a:	371c      	adds	r7, #28
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	fffe0000 	.word	0xfffe0000

0800cf28 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	68d9      	ldr	r1, [r3, #12]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	691a      	ldr	r2, [r3, #16]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	430a      	orrs	r2, r1
 800cf3e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	695a      	ldr	r2, [r3, #20]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cf4e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800cf5a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf60:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800cf66:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800cf70:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800cf7c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cf7e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf88:	d107      	bne.n	800cf9a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	691a      	ldr	r2, [r3, #16]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800cf98:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	da11      	bge.n	800cfce <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	695a      	ldr	r2, [r3, #20]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800cfb8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfbe:	425b      	negs	r3, r3
 800cfc0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	b292      	uxth	r2, r2
 800cfca:	621a      	str	r2, [r3, #32]
 800cfcc:	e006      	b.n	800cfdc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	b292      	uxth	r2, r2
 800cfda:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	da15      	bge.n	800d010 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	695a      	ldr	r2, [r3, #20]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800cff2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff8:	425b      	negs	r3, r3
 800cffa:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6a19      	ldr	r1, [r3, #32]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	041a      	lsls	r2, r3, #16
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	430a      	orrs	r2, r1
 800d00c:	621a      	str	r2, [r3, #32]
 800d00e:	e009      	b.n	800d024 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6a19      	ldr	r1, [r3, #32]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d01a:	041a      	lsls	r2, r3, #16
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	430a      	orrs	r2, r1
 800d022:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d02c:	d006      	beq.n	800d03c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	685a      	ldr	r2, [r3, #4]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	b2d2      	uxtb	r2, r2
 800d038:	629a      	str	r2, [r3, #40]	@ 0x28
 800d03a:	e003      	b.n	800d044 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2200      	movs	r2, #0
 800d042:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2200      	movs	r2, #0
 800d04a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800d04c:	bf00      	nop
 800d04e:	3714      	adds	r7, #20
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b086      	sub	sp, #24
 800d05c:	af02      	add	r7, sp, #8
 800d05e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d101      	bne.n	800d06a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d066:	2301      	movs	r3, #1
 800d068:	e0fe      	b.n	800d268 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b00      	cmp	r3, #0
 800d074:	d106      	bne.n	800d084 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f00d f88a 	bl	801a198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2203      	movs	r2, #3
 800d088:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4618      	mov	r0, r3
 800d092:	f008 fd58 	bl	8015b46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6818      	ldr	r0, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7c1a      	ldrb	r2, [r3, #16]
 800d09e:	f88d 2000 	strb.w	r2, [sp]
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0a6:	f008 fc29 	bl	80158fc <USB_CoreInit>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d005      	beq.n	800d0bc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e0d5      	b.n	800d268 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f008 fd50 	bl	8015b68 <USB_SetCurrentMode>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d005      	beq.n	800d0da <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e0c6      	b.n	800d268 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d0da:	2300      	movs	r3, #0
 800d0dc:	73fb      	strb	r3, [r7, #15]
 800d0de:	e04a      	b.n	800d176 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d0e0:	7bfa      	ldrb	r2, [r7, #15]
 800d0e2:	6879      	ldr	r1, [r7, #4]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	440b      	add	r3, r1
 800d0ee:	3315      	adds	r3, #21
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d0f4:	7bfa      	ldrb	r2, [r7, #15]
 800d0f6:	6879      	ldr	r1, [r7, #4]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	4413      	add	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	440b      	add	r3, r1
 800d102:	3314      	adds	r3, #20
 800d104:	7bfa      	ldrb	r2, [r7, #15]
 800d106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d108:	7bfa      	ldrb	r2, [r7, #15]
 800d10a:	7bfb      	ldrb	r3, [r7, #15]
 800d10c:	b298      	uxth	r0, r3
 800d10e:	6879      	ldr	r1, [r7, #4]
 800d110:	4613      	mov	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	4413      	add	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	440b      	add	r3, r1
 800d11a:	332e      	adds	r3, #46	@ 0x2e
 800d11c:	4602      	mov	r2, r0
 800d11e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d120:	7bfa      	ldrb	r2, [r7, #15]
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	4613      	mov	r3, r2
 800d126:	00db      	lsls	r3, r3, #3
 800d128:	4413      	add	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	440b      	add	r3, r1
 800d12e:	3318      	adds	r3, #24
 800d130:	2200      	movs	r2, #0
 800d132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d134:	7bfa      	ldrb	r2, [r7, #15]
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	4613      	mov	r3, r2
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	4413      	add	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	440b      	add	r3, r1
 800d142:	331c      	adds	r3, #28
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d148:	7bfa      	ldrb	r2, [r7, #15]
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	4613      	mov	r3, r2
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	4413      	add	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	440b      	add	r3, r1
 800d156:	3320      	adds	r3, #32
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d15c:	7bfa      	ldrb	r2, [r7, #15]
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	4613      	mov	r3, r2
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	440b      	add	r3, r1
 800d16a:	3324      	adds	r3, #36	@ 0x24
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	3301      	adds	r3, #1
 800d174:	73fb      	strb	r3, [r7, #15]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	791b      	ldrb	r3, [r3, #4]
 800d17a:	7bfa      	ldrb	r2, [r7, #15]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d3af      	bcc.n	800d0e0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d180:	2300      	movs	r3, #0
 800d182:	73fb      	strb	r3, [r7, #15]
 800d184:	e044      	b.n	800d210 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d186:	7bfa      	ldrb	r2, [r7, #15]
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	4613      	mov	r3, r2
 800d18c:	00db      	lsls	r3, r3, #3
 800d18e:	4413      	add	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	440b      	add	r3, r1
 800d194:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800d198:	2200      	movs	r2, #0
 800d19a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d19c:	7bfa      	ldrb	r2, [r7, #15]
 800d19e:	6879      	ldr	r1, [r7, #4]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	4413      	add	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	440b      	add	r3, r1
 800d1aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800d1ae:	7bfa      	ldrb	r2, [r7, #15]
 800d1b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d1b2:	7bfa      	ldrb	r2, [r7, #15]
 800d1b4:	6879      	ldr	r1, [r7, #4]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	00db      	lsls	r3, r3, #3
 800d1ba:	4413      	add	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	440b      	add	r3, r1
 800d1c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d1c8:	7bfa      	ldrb	r2, [r7, #15]
 800d1ca:	6879      	ldr	r1, [r7, #4]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	00db      	lsls	r3, r3, #3
 800d1d0:	4413      	add	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	440b      	add	r3, r1
 800d1d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d1de:	7bfa      	ldrb	r2, [r7, #15]
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	4413      	add	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d1f4:	7bfa      	ldrb	r2, [r7, #15]
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	4413      	add	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	440b      	add	r3, r1
 800d202:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
 800d20c:	3301      	adds	r3, #1
 800d20e:	73fb      	strb	r3, [r7, #15]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	791b      	ldrb	r3, [r3, #4]
 800d214:	7bfa      	ldrb	r2, [r7, #15]
 800d216:	429a      	cmp	r2, r3
 800d218:	d3b5      	bcc.n	800d186 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6818      	ldr	r0, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7c1a      	ldrb	r2, [r3, #16]
 800d222:	f88d 2000 	strb.w	r2, [sp]
 800d226:	3304      	adds	r3, #4
 800d228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d22a:	f008 fce9 	bl	8015c00 <USB_DevInit>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d005      	beq.n	800d240 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2202      	movs	r2, #2
 800d238:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e013      	b.n	800d268 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	7b1b      	ldrb	r3, [r3, #12]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d102      	bne.n	800d25c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f001 f96e 	bl	800e538 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4618      	mov	r0, r3
 800d262:	f009 fd2c 	bl	8016cbe <USB_DevDisconnect>

  return HAL_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d284:	2b01      	cmp	r3, #1
 800d286:	d101      	bne.n	800d28c <HAL_PCD_Start+0x1c>
 800d288:	2302      	movs	r3, #2
 800d28a:	e022      	b.n	800d2d2 <HAL_PCD_Start+0x62>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d009      	beq.n	800d2b4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d105      	bne.n	800d2b4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f008 fc33 	bl	8015b24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f009 fcda 	bl	8016c7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d2d0:	2300      	movs	r3, #0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d2da:	b590      	push	{r4, r7, lr}
 800d2dc:	b08d      	sub	sp, #52	@ 0x34
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f009 fd98 	bl	8016e26 <USB_GetMode>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f040 84b9 	bne.w	800dc70 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4618      	mov	r0, r3
 800d304:	f009 fcfc 	bl	8016d00 <USB_ReadInterrupts>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 84af 	beq.w	800dc6e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	0a1b      	lsrs	r3, r3, #8
 800d31a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4618      	mov	r0, r3
 800d32a:	f009 fce9 	bl	8016d00 <USB_ReadInterrupts>
 800d32e:	4603      	mov	r3, r0
 800d330:	f003 0302 	and.w	r3, r3, #2
 800d334:	2b02      	cmp	r3, #2
 800d336:	d107      	bne.n	800d348 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	695a      	ldr	r2, [r3, #20]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f002 0202 	and.w	r2, r2, #2
 800d346:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f009 fcd7 	bl	8016d00 <USB_ReadInterrupts>
 800d352:	4603      	mov	r3, r0
 800d354:	f003 0310 	and.w	r3, r3, #16
 800d358:	2b10      	cmp	r3, #16
 800d35a:	d161      	bne.n	800d420 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	699a      	ldr	r2, [r3, #24]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f022 0210 	bic.w	r2, r2, #16
 800d36a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	6a1b      	ldr	r3, [r3, #32]
 800d370:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	f003 020f 	and.w	r2, r3, #15
 800d378:	4613      	mov	r3, r2
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	4413      	add	r3, r2
 800d388:	3304      	adds	r3, #4
 800d38a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800d392:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d396:	d124      	bne.n	800d3e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d398:	69ba      	ldr	r2, [r7, #24]
 800d39a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800d39e:	4013      	ands	r3, r2
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d035      	beq.n	800d410 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	091b      	lsrs	r3, r3, #4
 800d3ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d3ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6a38      	ldr	r0, [r7, #32]
 800d3b8:	f009 fb0e 	bl	80169d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	68da      	ldr	r2, [r3, #12]
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	091b      	lsrs	r3, r3, #4
 800d3c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3c8:	441a      	add	r2, r3
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	695a      	ldr	r2, [r3, #20]
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	091b      	lsrs	r3, r3, #4
 800d3d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3da:	441a      	add	r2, r3
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	615a      	str	r2, [r3, #20]
 800d3e0:	e016      	b.n	800d410 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800d3e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d3ec:	d110      	bne.n	800d410 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d3f4:	2208      	movs	r2, #8
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	6a38      	ldr	r0, [r7, #32]
 800d3fa:	f009 faed 	bl	80169d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	695a      	ldr	r2, [r3, #20]
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	091b      	lsrs	r3, r3, #4
 800d406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d40a:	441a      	add	r2, r3
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	699a      	ldr	r2, [r3, #24]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f042 0210 	orr.w	r2, r2, #16
 800d41e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f009 fc6b 	bl	8016d00 <USB_ReadInterrupts>
 800d42a:	4603      	mov	r3, r0
 800d42c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d430:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d434:	f040 80a7 	bne.w	800d586 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800d438:	2300      	movs	r3, #0
 800d43a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4618      	mov	r0, r3
 800d442:	f009 fc70 	bl	8016d26 <USB_ReadDevAllOutEpInterrupt>
 800d446:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800d448:	e099      	b.n	800d57e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800d44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	f000 808e 	beq.w	800d572 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	4611      	mov	r1, r2
 800d460:	4618      	mov	r0, r3
 800d462:	f009 fc94 	bl	8016d8e <USB_ReadDevOutEPInterrupt>
 800d466:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	f003 0301 	and.w	r3, r3, #1
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00c      	beq.n	800d48c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d474:	015a      	lsls	r2, r3, #5
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	4413      	add	r3, r2
 800d47a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d47e:	461a      	mov	r2, r3
 800d480:	2301      	movs	r3, #1
 800d482:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fed0 	bl	800e22c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	f003 0308 	and.w	r3, r3, #8
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00c      	beq.n	800d4b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d498:	015a      	lsls	r2, r3, #5
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	4413      	add	r3, r2
 800d49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d4a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 ffa6 	bl	800e3fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	f003 0310 	and.w	r3, r3, #16
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d008      	beq.n	800d4cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4bc:	015a      	lsls	r2, r3, #5
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	2310      	movs	r3, #16
 800d4ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	f003 0302 	and.w	r3, r3, #2
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d030      	beq.n	800d538 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4de:	2b80      	cmp	r3, #128	@ 0x80
 800d4e0:	d109      	bne.n	800d4f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	69fa      	ldr	r2, [r7, #28]
 800d4ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d4f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d4f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800d4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	4413      	add	r3, r2
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	4413      	add	r3, r2
 800d508:	3304      	adds	r3, #4
 800d50a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	78db      	ldrb	r3, [r3, #3]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d108      	bne.n	800d526 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2200      	movs	r2, #0
 800d518:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	4619      	mov	r1, r3
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f00c ff5f 	bl	801a3e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	015a      	lsls	r2, r3, #5
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	4413      	add	r3, r2
 800d52e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d532:	461a      	mov	r2, r3
 800d534:	2302      	movs	r3, #2
 800d536:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	f003 0320 	and.w	r3, r3, #32
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d008      	beq.n	800d554 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	015a      	lsls	r2, r3, #5
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	4413      	add	r3, r2
 800d54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d54e:	461a      	mov	r2, r3
 800d550:	2320      	movs	r3, #32
 800d552:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d009      	beq.n	800d572 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d560:	015a      	lsls	r2, r3, #5
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	4413      	add	r3, r2
 800d566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d56a:	461a      	mov	r2, r3
 800d56c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d570:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d574:	3301      	adds	r3, #1
 800d576:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57a:	085b      	lsrs	r3, r3, #1
 800d57c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d580:	2b00      	cmp	r3, #0
 800d582:	f47f af62 	bne.w	800d44a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f009 fbb8 	bl	8016d00 <USB_ReadInterrupts>
 800d590:	4603      	mov	r3, r0
 800d592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d596:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d59a:	f040 80db 	bne.w	800d754 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f009 fbd9 	bl	8016d5a <USB_ReadDevAllInEpInterrupt>
 800d5a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800d5ae:	e0cd      	b.n	800d74c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b2:	f003 0301 	and.w	r3, r3, #1
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f000 80c2 	beq.w	800d740 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5c2:	b2d2      	uxtb	r2, r2
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f009 fbff 	bl	8016dca <USB_ReadDevInEPInterrupt>
 800d5cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d057      	beq.n	800d688 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5da:	f003 030f 	and.w	r3, r3, #15
 800d5de:	2201      	movs	r2, #1
 800d5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	43db      	mvns	r3, r3
 800d5f2:	69f9      	ldr	r1, [r7, #28]
 800d5f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fe:	015a      	lsls	r2, r3, #5
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	4413      	add	r3, r2
 800d604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d608:	461a      	mov	r2, r3
 800d60a:	2301      	movs	r3, #1
 800d60c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	799b      	ldrb	r3, [r3, #6]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d132      	bne.n	800d67c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d61a:	4613      	mov	r3, r2
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	4413      	add	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	440b      	add	r3, r1
 800d624:	3320      	adds	r3, #32
 800d626:	6819      	ldr	r1, [r3, #0]
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d62c:	4613      	mov	r3, r2
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	4413      	add	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4403      	add	r3, r0
 800d636:	331c      	adds	r3, #28
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4419      	add	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d640:	4613      	mov	r3, r2
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4403      	add	r3, r0
 800d64a:	3320      	adds	r3, #32
 800d64c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d650:	2b00      	cmp	r3, #0
 800d652:	d113      	bne.n	800d67c <HAL_PCD_IRQHandler+0x3a2>
 800d654:	6879      	ldr	r1, [r7, #4]
 800d656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d658:	4613      	mov	r3, r2
 800d65a:	00db      	lsls	r3, r3, #3
 800d65c:	4413      	add	r3, r2
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	440b      	add	r3, r1
 800d662:	3324      	adds	r3, #36	@ 0x24
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d108      	bne.n	800d67c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d674:	461a      	mov	r2, r3
 800d676:	2101      	movs	r1, #1
 800d678:	f009 fc08 	bl	8016e8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	4619      	mov	r1, r3
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f00c fe29 	bl	801a2da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	f003 0308 	and.w	r3, r3, #8
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d008      	beq.n	800d6a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d69e:	461a      	mov	r2, r3
 800d6a0:	2308      	movs	r3, #8
 800d6a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	f003 0310 	and.w	r3, r3, #16
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d008      	beq.n	800d6c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	2310      	movs	r3, #16
 800d6be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d008      	beq.n	800d6dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	015a      	lsls	r2, r3, #5
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	2340      	movs	r3, #64	@ 0x40
 800d6da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	f003 0302 	and.w	r3, r3, #2
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d023      	beq.n	800d72e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d6e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6e8:	6a38      	ldr	r0, [r7, #32]
 800d6ea:	f008 fbe7 	bl	8015ebc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800d6ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	4413      	add	r3, r2
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	3310      	adds	r3, #16
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	3304      	adds	r3, #4
 800d700:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	78db      	ldrb	r3, [r3, #3]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d108      	bne.n	800d71c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	2200      	movs	r2, #0
 800d70e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	b2db      	uxtb	r3, r3
 800d714:	4619      	mov	r1, r3
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f00c fe76 	bl	801a408 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71e:	015a      	lsls	r2, r3, #5
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	4413      	add	r3, r2
 800d724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d728:	461a      	mov	r2, r3
 800d72a:	2302      	movs	r3, #2
 800d72c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d734:	2b00      	cmp	r3, #0
 800d736:	d003      	beq.n	800d740 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d738:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fcea 	bl	800e114 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d742:	3301      	adds	r3, #1
 800d744:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d748:	085b      	lsrs	r3, r3, #1
 800d74a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f47f af2e 	bne.w	800d5b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4618      	mov	r0, r3
 800d75a:	f009 fad1 	bl	8016d00 <USB_ReadInterrupts>
 800d75e:	4603      	mov	r3, r0
 800d760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d768:	d122      	bne.n	800d7b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	69fa      	ldr	r2, [r7, #28]
 800d774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d778:	f023 0301 	bic.w	r3, r3, #1
 800d77c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800d784:	2b01      	cmp	r3, #1
 800d786:	d108      	bne.n	800d79a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d790:	2100      	movs	r1, #0
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 fef4 	bl	800e580 <HAL_PCDEx_LPM_Callback>
 800d798:	e002      	b.n	800d7a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f00c fe14 	bl	801a3c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	695a      	ldr	r2, [r3, #20]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800d7ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f009 faa3 	bl	8016d00 <USB_ReadInterrupts>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7c4:	d112      	bne.n	800d7ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	f003 0301 	and.w	r3, r3, #1
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d102      	bne.n	800d7dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f00c fdd0 	bl	801a37c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	695a      	ldr	r2, [r3, #20]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800d7ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f009 fa85 	bl	8016d00 <USB_ReadInterrupts>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d800:	d121      	bne.n	800d846 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	695a      	ldr	r2, [r3, #20]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800d810:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d111      	bne.n	800d840 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d82a:	089b      	lsrs	r3, r3, #2
 800d82c:	f003 020f 	and.w	r2, r3, #15
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d836:	2101      	movs	r1, #1
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fea1 	bl	800e580 <HAL_PCDEx_LPM_Callback>
 800d83e:	e002      	b.n	800d846 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f00c fd9b 	bl	801a37c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f009 fa58 	bl	8016d00 <USB_ReadInterrupts>
 800d850:	4603      	mov	r3, r0
 800d852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d85a:	f040 80b7 	bne.w	800d9cc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	69fa      	ldr	r2, [r7, #28]
 800d868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d86c:	f023 0301 	bic.w	r3, r3, #1
 800d870:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2110      	movs	r1, #16
 800d878:	4618      	mov	r0, r3
 800d87a:	f008 fb1f 	bl	8015ebc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d87e:	2300      	movs	r3, #0
 800d880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d882:	e046      	b.n	800d912 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d886:	015a      	lsls	r2, r3, #5
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	4413      	add	r3, r2
 800d88c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d890:	461a      	mov	r2, r3
 800d892:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d896:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89a:	015a      	lsls	r2, r3, #5
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	4413      	add	r3, r2
 800d8a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8a8:	0151      	lsls	r1, r2, #5
 800d8aa:	69fa      	ldr	r2, [r7, #28]
 800d8ac:	440a      	add	r2, r1
 800d8ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d8b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d8b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ba:	015a      	lsls	r2, r3, #5
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	4413      	add	r3, r2
 800d8c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d8ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8dc:	0151      	lsls	r1, r2, #5
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	440a      	add	r2, r1
 800d8e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d8ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ee:	015a      	lsls	r2, r3, #5
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8fc:	0151      	lsls	r1, r2, #5
 800d8fe:	69fa      	ldr	r2, [r7, #28]
 800d900:	440a      	add	r2, r1
 800d902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d906:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d90a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90e:	3301      	adds	r3, #1
 800d910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	791b      	ldrb	r3, [r3, #4]
 800d916:	461a      	mov	r2, r3
 800d918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d3b2      	bcc.n	800d884 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d924:	69db      	ldr	r3, [r3, #28]
 800d926:	69fa      	ldr	r2, [r7, #28]
 800d928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d92c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800d930:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	7bdb      	ldrb	r3, [r3, #15]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d016      	beq.n	800d968 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d944:	69fa      	ldr	r2, [r7, #28]
 800d946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d94a:	f043 030b 	orr.w	r3, r3, #11
 800d94e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d95a:	69fa      	ldr	r2, [r7, #28]
 800d95c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d960:	f043 030b 	orr.w	r3, r3, #11
 800d964:	6453      	str	r3, [r2, #68]	@ 0x44
 800d966:	e015      	b.n	800d994 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d96e:	695a      	ldr	r2, [r3, #20]
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d976:	4619      	mov	r1, r3
 800d978:	f242 032b 	movw	r3, #8235	@ 0x202b
 800d97c:	4313      	orrs	r3, r2
 800d97e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	69fa      	ldr	r2, [r7, #28]
 800d98a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d98e:	f043 030b 	orr.w	r3, r3, #11
 800d992:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	69fa      	ldr	r2, [r7, #28]
 800d99e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d9a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d9a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6818      	ldr	r0, [r3, #0]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f009 fa68 	bl	8016e8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	695a      	ldr	r2, [r3, #20]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800d9ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f009 f995 	bl	8016d00 <USB_ReadInterrupts>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d9dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9e0:	d123      	bne.n	800da2a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f009 fa2c 	bl	8016e44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f008 fadc 	bl	8015fae <USB_GetDevSpeed>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681c      	ldr	r4, [r3, #0]
 800da02:	f001 fd9d 	bl	800f540 <HAL_RCC_GetHCLKFreq>
 800da06:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800da0c:	461a      	mov	r2, r3
 800da0e:	4620      	mov	r0, r4
 800da10:	f007 ffe6 	bl	80159e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f00c fc88 	bl	801a32a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	695a      	ldr	r2, [r3, #20]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800da28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4618      	mov	r0, r3
 800da30:	f009 f966 	bl	8016d00 <USB_ReadInterrupts>
 800da34:	4603      	mov	r3, r0
 800da36:	f003 0308 	and.w	r3, r3, #8
 800da3a:	2b08      	cmp	r3, #8
 800da3c:	d10a      	bne.n	800da54 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f00c fc65 	bl	801a30e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	695a      	ldr	r2, [r3, #20]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f002 0208 	and.w	r2, r2, #8
 800da52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4618      	mov	r0, r3
 800da5a:	f009 f951 	bl	8016d00 <USB_ReadInterrupts>
 800da5e:	4603      	mov	r3, r0
 800da60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da64:	2b80      	cmp	r3, #128	@ 0x80
 800da66:	d123      	bne.n	800dab0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800da68:	6a3b      	ldr	r3, [r7, #32]
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800da70:	6a3b      	ldr	r3, [r7, #32]
 800da72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800da74:	2301      	movs	r3, #1
 800da76:	627b      	str	r3, [r7, #36]	@ 0x24
 800da78:	e014      	b.n	800daa4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da7e:	4613      	mov	r3, r2
 800da80:	00db      	lsls	r3, r3, #3
 800da82:	4413      	add	r3, r2
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	440b      	add	r3, r1
 800da88:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d105      	bne.n	800da9e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800da92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da94:	b2db      	uxtb	r3, r3
 800da96:	4619      	mov	r1, r3
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fb0a 	bl	800e0b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800da9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa0:	3301      	adds	r3, #1
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	791b      	ldrb	r3, [r3, #4]
 800daa8:	461a      	mov	r2, r3
 800daaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daac:	4293      	cmp	r3, r2
 800daae:	d3e4      	bcc.n	800da7a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f009 f923 	bl	8016d00 <USB_ReadInterrupts>
 800daba:	4603      	mov	r3, r0
 800dabc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dac4:	d13c      	bne.n	800db40 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dac6:	2301      	movs	r3, #1
 800dac8:	627b      	str	r3, [r7, #36]	@ 0x24
 800daca:	e02b      	b.n	800db24 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800dacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dace:	015a      	lsls	r2, r3, #5
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	4413      	add	r3, r2
 800dad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800dadc:	6879      	ldr	r1, [r7, #4]
 800dade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dae0:	4613      	mov	r3, r2
 800dae2:	00db      	lsls	r3, r3, #3
 800dae4:	4413      	add	r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	440b      	add	r3, r1
 800daea:	3318      	adds	r3, #24
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d115      	bne.n	800db1e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800daf2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	da12      	bge.n	800db1e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800daf8:	6879      	ldr	r1, [r7, #4]
 800dafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dafc:	4613      	mov	r3, r2
 800dafe:	00db      	lsls	r3, r3, #3
 800db00:	4413      	add	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	440b      	add	r3, r1
 800db06:	3317      	adds	r3, #23
 800db08:	2201      	movs	r2, #1
 800db0a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800db0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db14:	b2db      	uxtb	r3, r3
 800db16:	4619      	mov	r1, r3
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 faca 	bl	800e0b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800db1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db20:	3301      	adds	r3, #1
 800db22:	627b      	str	r3, [r7, #36]	@ 0x24
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	791b      	ldrb	r3, [r3, #4]
 800db28:	461a      	mov	r2, r3
 800db2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d3cd      	bcc.n	800dacc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	695a      	ldr	r2, [r3, #20]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800db3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4618      	mov	r0, r3
 800db46:	f009 f8db 	bl	8016d00 <USB_ReadInterrupts>
 800db4a:	4603      	mov	r3, r0
 800db4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800db50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db54:	d156      	bne.n	800dc04 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800db56:	2301      	movs	r3, #1
 800db58:	627b      	str	r3, [r7, #36]	@ 0x24
 800db5a:	e045      	b.n	800dbe8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800db5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db70:	4613      	mov	r3, r2
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	440b      	add	r3, r1
 800db7a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	2b01      	cmp	r3, #1
 800db82:	d12e      	bne.n	800dbe2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800db84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800db86:	2b00      	cmp	r3, #0
 800db88:	da2b      	bge.n	800dbe2 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	0c1a      	lsrs	r2, r3, #16
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800db94:	4053      	eors	r3, r2
 800db96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d121      	bne.n	800dbe2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800db9e:	6879      	ldr	r1, [r7, #4]
 800dba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dba2:	4613      	mov	r3, r2
 800dba4:	00db      	lsls	r3, r3, #3
 800dba6:	4413      	add	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	440b      	add	r3, r1
 800dbac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800dbb4:	6a3b      	ldr	r3, [r7, #32]
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
 800dbc2:	695b      	ldr	r3, [r3, #20]
 800dbc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d10a      	bne.n	800dbe2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	69fa      	ldr	r2, [r7, #28]
 800dbd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dbde:	6053      	str	r3, [r2, #4]
            break;
 800dbe0:	e008      	b.n	800dbf4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	791b      	ldrb	r3, [r3, #4]
 800dbec:	461a      	mov	r2, r3
 800dbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d3b3      	bcc.n	800db5c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	695a      	ldr	r2, [r3, #20]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800dc02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f009 f879 	bl	8016d00 <USB_ReadInterrupts>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dc14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc18:	d10a      	bne.n	800dc30 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f00c fc06 	bl	801a42c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	695a      	ldr	r2, [r3, #20]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800dc2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f009 f863 	bl	8016d00 <USB_ReadInterrupts>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	f003 0304 	and.w	r3, r3, #4
 800dc40:	2b04      	cmp	r3, #4
 800dc42:	d115      	bne.n	800dc70 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	f003 0304 	and.w	r3, r3, #4
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d002      	beq.n	800dc5c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f00c fbf6 	bl	801a448 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6859      	ldr	r1, [r3, #4]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	430a      	orrs	r2, r1
 800dc6a:	605a      	str	r2, [r3, #4]
 800dc6c:	e000      	b.n	800dc70 <HAL_PCD_IRQHandler+0x996>
      return;
 800dc6e:	bf00      	nop
    }
  }
}
 800dc70:	3734      	adds	r7, #52	@ 0x34
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd90      	pop	{r4, r7, pc}

0800dc76 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b082      	sub	sp, #8
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
 800dc7e:	460b      	mov	r3, r1
 800dc80:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d101      	bne.n	800dc90 <HAL_PCD_SetAddress+0x1a>
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	e012      	b.n	800dcb6 <HAL_PCD_SetAddress+0x40>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	78fa      	ldrb	r2, [r7, #3]
 800dc9c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	78fa      	ldrb	r2, [r7, #3]
 800dca4:	4611      	mov	r1, r2
 800dca6:	4618      	mov	r0, r3
 800dca8:	f008 ffc2 	bl	8016c30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b084      	sub	sp, #16
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	4608      	mov	r0, r1
 800dcc8:	4611      	mov	r1, r2
 800dcca:	461a      	mov	r2, r3
 800dccc:	4603      	mov	r3, r0
 800dcce:	70fb      	strb	r3, [r7, #3]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	803b      	strh	r3, [r7, #0]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dcdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	da0f      	bge.n	800dd04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dce4:	78fb      	ldrb	r3, [r7, #3]
 800dce6:	f003 020f 	and.w	r2, r3, #15
 800dcea:	4613      	mov	r3, r2
 800dcec:	00db      	lsls	r3, r3, #3
 800dcee:	4413      	add	r3, r2
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	3310      	adds	r3, #16
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	705a      	strb	r2, [r3, #1]
 800dd02:	e00f      	b.n	800dd24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dd04:	78fb      	ldrb	r3, [r7, #3]
 800dd06:	f003 020f 	and.w	r2, r3, #15
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	00db      	lsls	r3, r3, #3
 800dd0e:	4413      	add	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	4413      	add	r3, r2
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2200      	movs	r2, #0
 800dd22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800dd24:	78fb      	ldrb	r3, [r7, #3]
 800dd26:	f003 030f 	and.w	r3, r3, #15
 800dd2a:	b2da      	uxtb	r2, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800dd30:	883b      	ldrh	r3, [r7, #0]
 800dd32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	78ba      	ldrb	r2, [r7, #2]
 800dd3e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	785b      	ldrb	r3, [r3, #1]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d004      	beq.n	800dd52 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800dd52:	78bb      	ldrb	r3, [r7, #2]
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	d102      	bne.n	800dd5e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d101      	bne.n	800dd6c <HAL_PCD_EP_Open+0xae>
 800dd68:	2302      	movs	r3, #2
 800dd6a:	e00e      	b.n	800dd8a <HAL_PCD_EP_Open+0xcc>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	68f9      	ldr	r1, [r7, #12]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f008 f93c 	bl	8015ff8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800dd88:	7afb      	ldrb	r3, [r7, #11]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b084      	sub	sp, #16
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dd9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	da0f      	bge.n	800ddc6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dda6:	78fb      	ldrb	r3, [r7, #3]
 800dda8:	f003 020f 	and.w	r2, r3, #15
 800ddac:	4613      	mov	r3, r2
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	4413      	add	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	3310      	adds	r3, #16
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	4413      	add	r3, r2
 800ddba:	3304      	adds	r3, #4
 800ddbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	705a      	strb	r2, [r3, #1]
 800ddc4:	e00f      	b.n	800dde6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ddc6:	78fb      	ldrb	r3, [r7, #3]
 800ddc8:	f003 020f 	and.w	r2, r3, #15
 800ddcc:	4613      	mov	r3, r2
 800ddce:	00db      	lsls	r3, r3, #3
 800ddd0:	4413      	add	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	4413      	add	r3, r2
 800dddc:	3304      	adds	r3, #4
 800ddde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2200      	movs	r2, #0
 800dde4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800dde6:	78fb      	ldrb	r3, [r7, #3]
 800dde8:	f003 030f 	and.w	r3, r3, #15
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d101      	bne.n	800de00 <HAL_PCD_EP_Close+0x6e>
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	e00e      	b.n	800de1e <HAL_PCD_EP_Close+0x8c>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2201      	movs	r2, #1
 800de04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	68f9      	ldr	r1, [r7, #12]
 800de0e:	4618      	mov	r0, r3
 800de10:	f008 f97a 	bl	8016108 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b086      	sub	sp, #24
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60f8      	str	r0, [r7, #12]
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	603b      	str	r3, [r7, #0]
 800de32:	460b      	mov	r3, r1
 800de34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800de36:	7afb      	ldrb	r3, [r7, #11]
 800de38:	f003 020f 	and.w	r2, r3, #15
 800de3c:	4613      	mov	r3, r2
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	4413      	add	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800de48:	68fa      	ldr	r2, [r7, #12]
 800de4a:	4413      	add	r3, r2
 800de4c:	3304      	adds	r3, #4
 800de4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	683a      	ldr	r2, [r7, #0]
 800de5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	2200      	movs	r2, #0
 800de60:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2200      	movs	r2, #0
 800de66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800de68:	7afb      	ldrb	r3, [r7, #11]
 800de6a:	f003 030f 	and.w	r3, r3, #15
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	799b      	ldrb	r3, [r3, #6]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d102      	bne.n	800de82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	799b      	ldrb	r3, [r3, #6]
 800de8a:	461a      	mov	r2, r3
 800de8c:	6979      	ldr	r1, [r7, #20]
 800de8e:	f008 fa17 	bl	80162c0 <USB_EPStartXfer>

  return HAL_OK;
 800de92:	2300      	movs	r3, #0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800dea8:	78fb      	ldrb	r3, [r7, #3]
 800deaa:	f003 020f 	and.w	r2, r3, #15
 800deae:	6879      	ldr	r1, [r7, #4]
 800deb0:	4613      	mov	r3, r2
 800deb2:	00db      	lsls	r3, r3, #3
 800deb4:	4413      	add	r3, r2
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	440b      	add	r3, r1
 800deba:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800debe:	681b      	ldr	r3, [r3, #0]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	607a      	str	r2, [r7, #4]
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	460b      	mov	r3, r1
 800deda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dedc:	7afb      	ldrb	r3, [r7, #11]
 800dede:	f003 020f 	and.w	r2, r3, #15
 800dee2:	4613      	mov	r3, r2
 800dee4:	00db      	lsls	r3, r3, #3
 800dee6:	4413      	add	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	3310      	adds	r3, #16
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	4413      	add	r3, r2
 800def0:	3304      	adds	r3, #4
 800def2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	2200      	movs	r2, #0
 800df04:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	2201      	movs	r2, #1
 800df0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800df0c:	7afb      	ldrb	r3, [r7, #11]
 800df0e:	f003 030f 	and.w	r3, r3, #15
 800df12:	b2da      	uxtb	r2, r3
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	799b      	ldrb	r3, [r3, #6]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d102      	bne.n	800df26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6818      	ldr	r0, [r3, #0]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	799b      	ldrb	r3, [r3, #6]
 800df2e:	461a      	mov	r2, r3
 800df30:	6979      	ldr	r1, [r7, #20]
 800df32:	f008 f9c5 	bl	80162c0 <USB_EPStartXfer>

  return HAL_OK;
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800df4c:	78fb      	ldrb	r3, [r7, #3]
 800df4e:	f003 030f 	and.w	r3, r3, #15
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	7912      	ldrb	r2, [r2, #4]
 800df56:	4293      	cmp	r3, r2
 800df58:	d901      	bls.n	800df5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	e04f      	b.n	800dffe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800df5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df62:	2b00      	cmp	r3, #0
 800df64:	da0f      	bge.n	800df86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800df66:	78fb      	ldrb	r3, [r7, #3]
 800df68:	f003 020f 	and.w	r2, r3, #15
 800df6c:	4613      	mov	r3, r2
 800df6e:	00db      	lsls	r3, r3, #3
 800df70:	4413      	add	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	3310      	adds	r3, #16
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	4413      	add	r3, r2
 800df7a:	3304      	adds	r3, #4
 800df7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2201      	movs	r2, #1
 800df82:	705a      	strb	r2, [r3, #1]
 800df84:	e00d      	b.n	800dfa2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800df86:	78fa      	ldrb	r2, [r7, #3]
 800df88:	4613      	mov	r3, r2
 800df8a:	00db      	lsls	r3, r3, #3
 800df8c:	4413      	add	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	4413      	add	r3, r2
 800df98:	3304      	adds	r3, #4
 800df9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dfa8:	78fb      	ldrb	r3, [r7, #3]
 800dfaa:	f003 030f 	and.w	r3, r3, #15
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d101      	bne.n	800dfc2 <HAL_PCD_EP_SetStall+0x82>
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	e01d      	b.n	800dffe <HAL_PCD_EP_SetStall+0xbe>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68f9      	ldr	r1, [r7, #12]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f008 fd59 	bl	8016a88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dfd6:	78fb      	ldrb	r3, [r7, #3]
 800dfd8:	f003 030f 	and.w	r3, r3, #15
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d109      	bne.n	800dff4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6818      	ldr	r0, [r3, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	7999      	ldrb	r1, [r3, #6]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dfee:	461a      	mov	r2, r3
 800dff0:	f008 ff4c 	bl	8016e8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b084      	sub	sp, #16
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	460b      	mov	r3, r1
 800e010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e012:	78fb      	ldrb	r3, [r7, #3]
 800e014:	f003 030f 	and.w	r3, r3, #15
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	7912      	ldrb	r2, [r2, #4]
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d901      	bls.n	800e024 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	e042      	b.n	800e0aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	da0f      	bge.n	800e04c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e02c:	78fb      	ldrb	r3, [r7, #3]
 800e02e:	f003 020f 	and.w	r2, r3, #15
 800e032:	4613      	mov	r3, r2
 800e034:	00db      	lsls	r3, r3, #3
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	3310      	adds	r3, #16
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	4413      	add	r3, r2
 800e040:	3304      	adds	r3, #4
 800e042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2201      	movs	r2, #1
 800e048:	705a      	strb	r2, [r3, #1]
 800e04a:	e00f      	b.n	800e06c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e04c:	78fb      	ldrb	r3, [r7, #3]
 800e04e:	f003 020f 	and.w	r2, r3, #15
 800e052:	4613      	mov	r3, r2
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	4413      	add	r3, r2
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	4413      	add	r3, r2
 800e062:	3304      	adds	r3, #4
 800e064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e072:	78fb      	ldrb	r3, [r7, #3]
 800e074:	f003 030f 	and.w	r3, r3, #15
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e084:	2b01      	cmp	r3, #1
 800e086:	d101      	bne.n	800e08c <HAL_PCD_EP_ClrStall+0x86>
 800e088:	2302      	movs	r3, #2
 800e08a:	e00e      	b.n	800e0aa <HAL_PCD_EP_ClrStall+0xa4>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	68f9      	ldr	r1, [r7, #12]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f008 fd62 	bl	8016b64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b084      	sub	sp, #16
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800e0be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	da0c      	bge.n	800e0e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e0c6:	78fb      	ldrb	r3, [r7, #3]
 800e0c8:	f003 020f 	and.w	r2, r3, #15
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	3310      	adds	r3, #16
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	4413      	add	r3, r2
 800e0da:	3304      	adds	r3, #4
 800e0dc:	60fb      	str	r3, [r7, #12]
 800e0de:	e00c      	b.n	800e0fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	f003 020f 	and.w	r2, r3, #15
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	4413      	add	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	68f9      	ldr	r1, [r7, #12]
 800e100:	4618      	mov	r0, r3
 800e102:	f008 fb81 	bl	8016808 <USB_EPStopXfer>
 800e106:	4603      	mov	r3, r0
 800e108:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e10a:	7afb      	ldrb	r3, [r7, #11]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08a      	sub	sp, #40	@ 0x28
 800e118:	af02      	add	r7, sp, #8
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e128:	683a      	ldr	r2, [r7, #0]
 800e12a:	4613      	mov	r3, r2
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	4413      	add	r3, r2
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	3310      	adds	r3, #16
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	4413      	add	r3, r2
 800e138:	3304      	adds	r3, #4
 800e13a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	695a      	ldr	r2, [r3, #20]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	429a      	cmp	r2, r3
 800e146:	d901      	bls.n	800e14c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	e06b      	b.n	800e224 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	691a      	ldr	r2, [r3, #16]
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	69fa      	ldr	r2, [r7, #28]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d902      	bls.n	800e168 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	3303      	adds	r3, #3
 800e16c:	089b      	lsrs	r3, r3, #2
 800e16e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e170:	e02a      	b.n	800e1c8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	691a      	ldr	r2, [r3, #16]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	69fa      	ldr	r2, [r7, #28]
 800e184:	429a      	cmp	r2, r3
 800e186:	d902      	bls.n	800e18e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	3303      	adds	r3, #3
 800e192:	089b      	lsrs	r3, r3, #2
 800e194:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	68d9      	ldr	r1, [r3, #12]
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	6978      	ldr	r0, [r7, #20]
 800e1ac:	f008 fbd6 	bl	801695c <USB_WritePacket>

    ep->xfer_buff  += len;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	68da      	ldr	r2, [r3, #12]
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	441a      	add	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	695a      	ldr	r2, [r3, #20]
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	441a      	add	r2, r3
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	015a      	lsls	r2, r3, #5
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1d4:	699b      	ldr	r3, [r3, #24]
 800e1d6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e1d8:	69ba      	ldr	r2, [r7, #24]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d809      	bhi.n	800e1f2 <PCD_WriteEmptyTxFifo+0xde>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	695a      	ldr	r2, [r3, #20]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d203      	bcs.n	800e1f2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1bf      	bne.n	800e172 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	691a      	ldr	r2, [r3, #16]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	695b      	ldr	r3, [r3, #20]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d811      	bhi.n	800e222 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	f003 030f 	and.w	r3, r3, #15
 800e204:	2201      	movs	r2, #1
 800e206:	fa02 f303 	lsl.w	r3, r2, r3
 800e20a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	43db      	mvns	r3, r3
 800e218:	6939      	ldr	r1, [r7, #16]
 800e21a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e21e:	4013      	ands	r3, r2
 800e220:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3720      	adds	r7, #32
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	333c      	adds	r3, #60	@ 0x3c
 800e244:	3304      	adds	r3, #4
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	015a      	lsls	r2, r3, #5
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	4413      	add	r3, r2
 800e252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	799b      	ldrb	r3, [r3, #6]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d17b      	bne.n	800e35a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	f003 0308 	and.w	r3, r3, #8
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d015      	beq.n	800e298 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	4a61      	ldr	r2, [pc, #388]	@ (800e3f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e270:	4293      	cmp	r3, r2
 800e272:	f240 80b9 	bls.w	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f000 80b3 	beq.w	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	015a      	lsls	r2, r3, #5
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	4413      	add	r3, r2
 800e28a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e28e:	461a      	mov	r2, r3
 800e290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e294:	6093      	str	r3, [r2, #8]
 800e296:	e0a7      	b.n	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	f003 0320 	and.w	r3, r3, #32
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d009      	beq.n	800e2b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	015a      	lsls	r2, r3, #5
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	2320      	movs	r3, #32
 800e2b2:	6093      	str	r3, [r2, #8]
 800e2b4:	e098      	b.n	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f040 8093 	bne.w	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	4a4b      	ldr	r2, [pc, #300]	@ (800e3f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d90f      	bls.n	800e2ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00a      	beq.n	800e2ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	015a      	lsls	r2, r3, #5
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2e6:	6093      	str	r3, [r2, #8]
 800e2e8:	e07e      	b.n	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800e2ea:	683a      	ldr	r2, [r7, #0]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	00db      	lsls	r3, r3, #3
 800e2f0:	4413      	add	r3, r2
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	3304      	adds	r3, #4
 800e2fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6a1a      	ldr	r2, [r3, #32]
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	0159      	lsls	r1, r3, #5
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	440b      	add	r3, r1
 800e30c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e310:	691b      	ldr	r3, [r3, #16]
 800e312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e316:	1ad2      	subs	r2, r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d114      	bne.n	800e34c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d109      	bne.n	800e33e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6818      	ldr	r0, [r3, #0]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e334:	461a      	mov	r2, r3
 800e336:	2101      	movs	r1, #1
 800e338:	f008 fda8 	bl	8016e8c <USB_EP0_OutStart>
 800e33c:	e006      	b.n	800e34c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68da      	ldr	r2, [r3, #12]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	441a      	add	r2, r3
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	4619      	mov	r1, r3
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f00b ffa6 	bl	801a2a4 <HAL_PCD_DataOutStageCallback>
 800e358:	e046      	b.n	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	4a26      	ldr	r2, [pc, #152]	@ (800e3f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d124      	bne.n	800e3ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00a      	beq.n	800e382 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	015a      	lsls	r2, r3, #5
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	4413      	add	r3, r2
 800e374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e378:	461a      	mov	r2, r3
 800e37a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e37e:	6093      	str	r3, [r2, #8]
 800e380:	e032      	b.n	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	f003 0320 	and.w	r3, r3, #32
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d008      	beq.n	800e39e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	015a      	lsls	r2, r3, #5
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	4413      	add	r3, r2
 800e394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e398:	461a      	mov	r2, r3
 800e39a:	2320      	movs	r3, #32
 800e39c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f00b ff7d 	bl	801a2a4 <HAL_PCD_DataOutStageCallback>
 800e3aa:	e01d      	b.n	800e3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d114      	bne.n	800e3dc <PCD_EP_OutXfrComplete_int+0x1b0>
 800e3b2:	6879      	ldr	r1, [r7, #4]
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	4413      	add	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	440b      	add	r3, r1
 800e3c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d108      	bne.n	800e3dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6818      	ldr	r0, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	f008 fd58 	bl	8016e8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f00b ff5e 	bl	801a2a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3720      	adds	r7, #32
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	4f54300a 	.word	0x4f54300a
 800e3f8:	4f54310a 	.word	0x4f54310a

0800e3fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	333c      	adds	r3, #60	@ 0x3c
 800e414:	3304      	adds	r3, #4
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	015a      	lsls	r2, r3, #5
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	4413      	add	r3, r2
 800e422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	4a15      	ldr	r2, [pc, #84]	@ (800e484 <PCD_EP_OutSetupPacket_int+0x88>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d90e      	bls.n	800e450 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d009      	beq.n	800e450 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	015a      	lsls	r2, r3, #5
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	4413      	add	r3, r2
 800e444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e448:	461a      	mov	r2, r3
 800e44a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e44e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f00b ff15 	bl	801a280 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	4a0a      	ldr	r2, [pc, #40]	@ (800e484 <PCD_EP_OutSetupPacket_int+0x88>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d90c      	bls.n	800e478 <PCD_EP_OutSetupPacket_int+0x7c>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	799b      	ldrb	r3, [r3, #6]
 800e462:	2b01      	cmp	r3, #1
 800e464:	d108      	bne.n	800e478 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6818      	ldr	r0, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e470:	461a      	mov	r2, r3
 800e472:	2101      	movs	r1, #1
 800e474:	f008 fd0a 	bl	8016e8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3718      	adds	r7, #24
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	4f54300a 	.word	0x4f54300a

0800e488 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	460b      	mov	r3, r1
 800e492:	70fb      	strb	r3, [r7, #3]
 800e494:	4613      	mov	r3, r2
 800e496:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e49e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800e4a0:	78fb      	ldrb	r3, [r7, #3]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d107      	bne.n	800e4b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e4a6:	883b      	ldrh	r3, [r7, #0]
 800e4a8:	0419      	lsls	r1, r3, #16
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	430a      	orrs	r2, r1
 800e4b2:	629a      	str	r2, [r3, #40]	@ 0x28
 800e4b4:	e028      	b.n	800e508 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4bc:	0c1b      	lsrs	r3, r3, #16
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	73fb      	strb	r3, [r7, #15]
 800e4c8:	e00d      	b.n	800e4e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	7bfb      	ldrb	r3, [r7, #15]
 800e4d0:	3340      	adds	r3, #64	@ 0x40
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	0c1b      	lsrs	r3, r3, #16
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	4413      	add	r3, r2
 800e4de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e4e0:	7bfb      	ldrb	r3, [r7, #15]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	73fb      	strb	r3, [r7, #15]
 800e4e6:	7bfa      	ldrb	r2, [r7, #15]
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d3ec      	bcc.n	800e4ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e4f0:	883b      	ldrh	r3, [r7, #0]
 800e4f2:	0418      	lsls	r0, r3, #16
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6819      	ldr	r1, [r3, #0]
 800e4f8:	78fb      	ldrb	r3, [r7, #3]
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	4302      	orrs	r2, r0
 800e500:	3340      	adds	r3, #64	@ 0x40
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	440b      	add	r3, r1
 800e506:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e508:	2300      	movs	r3, #0
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3714      	adds	r7, #20
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e516:	b480      	push	{r7}
 800e518:	b083      	sub	sp, #12
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
 800e51e:	460b      	mov	r3, r1
 800e520:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	887a      	ldrh	r2, [r7, #2]
 800e528:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e538:	b480      	push	{r7}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2201      	movs	r2, #1
 800e54a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	699b      	ldr	r3, [r3, #24]
 800e55a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e566:	4b05      	ldr	r3, [pc, #20]	@ (800e57c <HAL_PCDEx_ActivateLPM+0x44>)
 800e568:	4313      	orrs	r3, r2
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	10000003 	.word	0x10000003

0800e580 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	460b      	mov	r3, r1
 800e58a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e5a0:	4b19      	ldr	r3, [pc, #100]	@ (800e608 <HAL_PWREx_ConfigSupply+0x70>)
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	f003 0304 	and.w	r3, r3, #4
 800e5a8:	2b04      	cmp	r3, #4
 800e5aa:	d00a      	beq.n	800e5c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e5ac:	4b16      	ldr	r3, [pc, #88]	@ (800e608 <HAL_PWREx_ConfigSupply+0x70>)
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	f003 0307 	and.w	r3, r3, #7
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d001      	beq.n	800e5be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e01f      	b.n	800e5fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e01d      	b.n	800e5fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e5c2:	4b11      	ldr	r3, [pc, #68]	@ (800e608 <HAL_PWREx_ConfigSupply+0x70>)
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	f023 0207 	bic.w	r2, r3, #7
 800e5ca:	490f      	ldr	r1, [pc, #60]	@ (800e608 <HAL_PWREx_ConfigSupply+0x70>)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e5d2:	f7f5 f8a5 	bl	8003720 <HAL_GetTick>
 800e5d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e5d8:	e009      	b.n	800e5ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e5da:	f7f5 f8a1 	bl	8003720 <HAL_GetTick>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	1ad3      	subs	r3, r2, r3
 800e5e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e5e8:	d901      	bls.n	800e5ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e007      	b.n	800e5fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e5ee:	4b06      	ldr	r3, [pc, #24]	@ (800e608 <HAL_PWREx_ConfigSupply+0x70>)
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e5f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5fa:	d1ee      	bne.n	800e5da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e5fc:	2300      	movs	r3, #0
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	58024800 	.word	0x58024800

0800e60c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800e60c:	b480      	push	{r7}
 800e60e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800e610:	4b05      	ldr	r3, [pc, #20]	@ (800e628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	4a04      	ldr	r2, [pc, #16]	@ (800e628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800e616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e61a:	60d3      	str	r3, [r2, #12]
}
 800e61c:	bf00      	nop
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	58024800 	.word	0x58024800

0800e62c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b08c      	sub	sp, #48	@ 0x30
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d102      	bne.n	800e640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	f000 bc48 	b.w	800eed0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f003 0301 	and.w	r3, r3, #1
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f000 8088 	beq.w	800e75e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e64e:	4b99      	ldr	r3, [pc, #612]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e656:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e658:	4b96      	ldr	r3, [pc, #600]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e65c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e660:	2b10      	cmp	r3, #16
 800e662:	d007      	beq.n	800e674 <HAL_RCC_OscConfig+0x48>
 800e664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e666:	2b18      	cmp	r3, #24
 800e668:	d111      	bne.n	800e68e <HAL_RCC_OscConfig+0x62>
 800e66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e66c:	f003 0303 	and.w	r3, r3, #3
 800e670:	2b02      	cmp	r3, #2
 800e672:	d10c      	bne.n	800e68e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e674:	4b8f      	ldr	r3, [pc, #572]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d06d      	beq.n	800e75c <HAL_RCC_OscConfig+0x130>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d169      	bne.n	800e75c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e688:	2301      	movs	r3, #1
 800e68a:	f000 bc21 	b.w	800eed0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e696:	d106      	bne.n	800e6a6 <HAL_RCC_OscConfig+0x7a>
 800e698:	4b86      	ldr	r3, [pc, #536]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a85      	ldr	r2, [pc, #532]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e69e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	e02e      	b.n	800e704 <HAL_RCC_OscConfig+0xd8>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10c      	bne.n	800e6c8 <HAL_RCC_OscConfig+0x9c>
 800e6ae:	4b81      	ldr	r3, [pc, #516]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a80      	ldr	r2, [pc, #512]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	4b7e      	ldr	r3, [pc, #504]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4a7d      	ldr	r2, [pc, #500]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e6c4:	6013      	str	r3, [r2, #0]
 800e6c6:	e01d      	b.n	800e704 <HAL_RCC_OscConfig+0xd8>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6d0:	d10c      	bne.n	800e6ec <HAL_RCC_OscConfig+0xc0>
 800e6d2:	4b78      	ldr	r3, [pc, #480]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a77      	ldr	r2, [pc, #476]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e6dc:	6013      	str	r3, [r2, #0]
 800e6de:	4b75      	ldr	r3, [pc, #468]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a74      	ldr	r2, [pc, #464]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	e00b      	b.n	800e704 <HAL_RCC_OscConfig+0xd8>
 800e6ec:	4b71      	ldr	r3, [pc, #452]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a70      	ldr	r2, [pc, #448]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e6f6:	6013      	str	r3, [r2, #0]
 800e6f8:	4b6e      	ldr	r3, [pc, #440]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a6d      	ldr	r2, [pc, #436]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e6fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d013      	beq.n	800e734 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e70c:	f7f5 f808 	bl	8003720 <HAL_GetTick>
 800e710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e712:	e008      	b.n	800e726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e714:	f7f5 f804 	bl	8003720 <HAL_GetTick>
 800e718:	4602      	mov	r2, r0
 800e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	2b64      	cmp	r3, #100	@ 0x64
 800e720:	d901      	bls.n	800e726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e722:	2303      	movs	r3, #3
 800e724:	e3d4      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e726:	4b63      	ldr	r3, [pc, #396]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d0f0      	beq.n	800e714 <HAL_RCC_OscConfig+0xe8>
 800e732:	e014      	b.n	800e75e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e734:	f7f4 fff4 	bl	8003720 <HAL_GetTick>
 800e738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e73a:	e008      	b.n	800e74e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e73c:	f7f4 fff0 	bl	8003720 <HAL_GetTick>
 800e740:	4602      	mov	r2, r0
 800e742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	2b64      	cmp	r3, #100	@ 0x64
 800e748:	d901      	bls.n	800e74e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e74a:	2303      	movs	r3, #3
 800e74c:	e3c0      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e74e:	4b59      	ldr	r3, [pc, #356]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1f0      	bne.n	800e73c <HAL_RCC_OscConfig+0x110>
 800e75a:	e000      	b.n	800e75e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e75c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f003 0302 	and.w	r3, r3, #2
 800e766:	2b00      	cmp	r3, #0
 800e768:	f000 80ca 	beq.w	800e900 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e76c:	4b51      	ldr	r3, [pc, #324]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e76e:	691b      	ldr	r3, [r3, #16]
 800e770:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e774:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e776:	4b4f      	ldr	r3, [pc, #316]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e77a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e77c:	6a3b      	ldr	r3, [r7, #32]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d007      	beq.n	800e792 <HAL_RCC_OscConfig+0x166>
 800e782:	6a3b      	ldr	r3, [r7, #32]
 800e784:	2b18      	cmp	r3, #24
 800e786:	d156      	bne.n	800e836 <HAL_RCC_OscConfig+0x20a>
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	f003 0303 	and.w	r3, r3, #3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d151      	bne.n	800e836 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e792:	4b48      	ldr	r3, [pc, #288]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 0304 	and.w	r3, r3, #4
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d005      	beq.n	800e7aa <HAL_RCC_OscConfig+0x17e>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e392      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e7aa:	4b42      	ldr	r3, [pc, #264]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f023 0219 	bic.w	r2, r3, #25
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	493f      	ldr	r1, [pc, #252]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7bc:	f7f4 ffb0 	bl	8003720 <HAL_GetTick>
 800e7c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e7c2:	e008      	b.n	800e7d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e7c4:	f7f4 ffac 	bl	8003720 <HAL_GetTick>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	2b02      	cmp	r3, #2
 800e7d0:	d901      	bls.n	800e7d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e7d2:	2303      	movs	r3, #3
 800e7d4:	e37c      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e7d6:	4b37      	ldr	r3, [pc, #220]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f003 0304 	and.w	r3, r3, #4
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d0f0      	beq.n	800e7c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7e2:	f7f4 ffcd 	bl	8003780 <HAL_GetREVID>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d817      	bhi.n	800e820 <HAL_RCC_OscConfig+0x1f4>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	691b      	ldr	r3, [r3, #16]
 800e7f4:	2b40      	cmp	r3, #64	@ 0x40
 800e7f6:	d108      	bne.n	800e80a <HAL_RCC_OscConfig+0x1de>
 800e7f8:	4b2e      	ldr	r3, [pc, #184]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e800:	4a2c      	ldr	r2, [pc, #176]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e806:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e808:	e07a      	b.n	800e900 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e80a:	4b2a      	ldr	r3, [pc, #168]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	691b      	ldr	r3, [r3, #16]
 800e816:	031b      	lsls	r3, r3, #12
 800e818:	4926      	ldr	r1, [pc, #152]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e81a:	4313      	orrs	r3, r2
 800e81c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e81e:	e06f      	b.n	800e900 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e820:	4b24      	ldr	r3, [pc, #144]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	061b      	lsls	r3, r3, #24
 800e82e:	4921      	ldr	r1, [pc, #132]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e830:	4313      	orrs	r3, r2
 800e832:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e834:	e064      	b.n	800e900 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d047      	beq.n	800e8ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e83e:	4b1d      	ldr	r3, [pc, #116]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f023 0219 	bic.w	r2, r3, #25
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	491a      	ldr	r1, [pc, #104]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e84c:	4313      	orrs	r3, r2
 800e84e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e850:	f7f4 ff66 	bl	8003720 <HAL_GetTick>
 800e854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e856:	e008      	b.n	800e86a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e858:	f7f4 ff62 	bl	8003720 <HAL_GetTick>
 800e85c:	4602      	mov	r2, r0
 800e85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	2b02      	cmp	r3, #2
 800e864:	d901      	bls.n	800e86a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e866:	2303      	movs	r3, #3
 800e868:	e332      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e86a:	4b12      	ldr	r3, [pc, #72]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f003 0304 	and.w	r3, r3, #4
 800e872:	2b00      	cmp	r3, #0
 800e874:	d0f0      	beq.n	800e858 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e876:	f7f4 ff83 	bl	8003780 <HAL_GetREVID>
 800e87a:	4603      	mov	r3, r0
 800e87c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e880:	4293      	cmp	r3, r2
 800e882:	d819      	bhi.n	800e8b8 <HAL_RCC_OscConfig+0x28c>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	2b40      	cmp	r3, #64	@ 0x40
 800e88a:	d108      	bne.n	800e89e <HAL_RCC_OscConfig+0x272>
 800e88c:	4b09      	ldr	r3, [pc, #36]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e894:	4a07      	ldr	r2, [pc, #28]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e89a:	6053      	str	r3, [r2, #4]
 800e89c:	e030      	b.n	800e900 <HAL_RCC_OscConfig+0x2d4>
 800e89e:	4b05      	ldr	r3, [pc, #20]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	031b      	lsls	r3, r3, #12
 800e8ac:	4901      	ldr	r1, [pc, #4]	@ (800e8b4 <HAL_RCC_OscConfig+0x288>)
 800e8ae:	4313      	orrs	r3, r2
 800e8b0:	604b      	str	r3, [r1, #4]
 800e8b2:	e025      	b.n	800e900 <HAL_RCC_OscConfig+0x2d4>
 800e8b4:	58024400 	.word	0x58024400
 800e8b8:	4b9a      	ldr	r3, [pc, #616]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	691b      	ldr	r3, [r3, #16]
 800e8c4:	061b      	lsls	r3, r3, #24
 800e8c6:	4997      	ldr	r1, [pc, #604]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	604b      	str	r3, [r1, #4]
 800e8cc:	e018      	b.n	800e900 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e8ce:	4b95      	ldr	r3, [pc, #596]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4a94      	ldr	r2, [pc, #592]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e8d4:	f023 0301 	bic.w	r3, r3, #1
 800e8d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8da:	f7f4 ff21 	bl	8003720 <HAL_GetTick>
 800e8de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e8e0:	e008      	b.n	800e8f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e8e2:	f7f4 ff1d 	bl	8003720 <HAL_GetTick>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ea:	1ad3      	subs	r3, r2, r3
 800e8ec:	2b02      	cmp	r3, #2
 800e8ee:	d901      	bls.n	800e8f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e8f0:	2303      	movs	r3, #3
 800e8f2:	e2ed      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e8f4:	4b8b      	ldr	r3, [pc, #556]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f003 0304 	and.w	r3, r3, #4
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1f0      	bne.n	800e8e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f003 0310 	and.w	r3, r3, #16
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f000 80a9 	beq.w	800ea60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e90e:	4b85      	ldr	r3, [pc, #532]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e910:	691b      	ldr	r3, [r3, #16]
 800e912:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e916:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e918:	4b82      	ldr	r3, [pc, #520]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e91c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	2b08      	cmp	r3, #8
 800e922:	d007      	beq.n	800e934 <HAL_RCC_OscConfig+0x308>
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	2b18      	cmp	r3, #24
 800e928:	d13a      	bne.n	800e9a0 <HAL_RCC_OscConfig+0x374>
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	f003 0303 	and.w	r3, r3, #3
 800e930:	2b01      	cmp	r3, #1
 800e932:	d135      	bne.n	800e9a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e934:	4b7b      	ldr	r3, [pc, #492]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d005      	beq.n	800e94c <HAL_RCC_OscConfig+0x320>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	2b80      	cmp	r3, #128	@ 0x80
 800e946:	d001      	beq.n	800e94c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	e2c1      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e94c:	f7f4 ff18 	bl	8003780 <HAL_GetREVID>
 800e950:	4603      	mov	r3, r0
 800e952:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e956:	4293      	cmp	r3, r2
 800e958:	d817      	bhi.n	800e98a <HAL_RCC_OscConfig+0x35e>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	2b20      	cmp	r3, #32
 800e960:	d108      	bne.n	800e974 <HAL_RCC_OscConfig+0x348>
 800e962:	4b70      	ldr	r3, [pc, #448]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800e96a:	4a6e      	ldr	r2, [pc, #440]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e96c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e970:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e972:	e075      	b.n	800ea60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e974:	4b6b      	ldr	r3, [pc, #428]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	069b      	lsls	r3, r3, #26
 800e982:	4968      	ldr	r1, [pc, #416]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e984:	4313      	orrs	r3, r2
 800e986:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e988:	e06a      	b.n	800ea60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e98a:	4b66      	ldr	r3, [pc, #408]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	061b      	lsls	r3, r3, #24
 800e998:	4962      	ldr	r1, [pc, #392]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e99a:	4313      	orrs	r3, r2
 800e99c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e99e:	e05f      	b.n	800ea60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	69db      	ldr	r3, [r3, #28]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d042      	beq.n	800ea2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e9a8:	4b5e      	ldr	r3, [pc, #376]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a5d      	ldr	r2, [pc, #372]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e9ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9b4:	f7f4 feb4 	bl	8003720 <HAL_GetTick>
 800e9b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e9ba:	e008      	b.n	800e9ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e9bc:	f7f4 feb0 	bl	8003720 <HAL_GetTick>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	d901      	bls.n	800e9ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	e280      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e9ce:	4b55      	ldr	r3, [pc, #340]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d0f0      	beq.n	800e9bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e9da:	f7f4 fed1 	bl	8003780 <HAL_GetREVID>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d817      	bhi.n	800ea18 <HAL_RCC_OscConfig+0x3ec>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a1b      	ldr	r3, [r3, #32]
 800e9ec:	2b20      	cmp	r3, #32
 800e9ee:	d108      	bne.n	800ea02 <HAL_RCC_OscConfig+0x3d6>
 800e9f0:	4b4c      	ldr	r3, [pc, #304]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800e9f8:	4a4a      	ldr	r2, [pc, #296]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800e9fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e9fe:	6053      	str	r3, [r2, #4]
 800ea00:	e02e      	b.n	800ea60 <HAL_RCC_OscConfig+0x434>
 800ea02:	4b48      	ldr	r3, [pc, #288]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	069b      	lsls	r3, r3, #26
 800ea10:	4944      	ldr	r1, [pc, #272]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea12:	4313      	orrs	r3, r2
 800ea14:	604b      	str	r3, [r1, #4]
 800ea16:	e023      	b.n	800ea60 <HAL_RCC_OscConfig+0x434>
 800ea18:	4b42      	ldr	r3, [pc, #264]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6a1b      	ldr	r3, [r3, #32]
 800ea24:	061b      	lsls	r3, r3, #24
 800ea26:	493f      	ldr	r1, [pc, #252]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	60cb      	str	r3, [r1, #12]
 800ea2c:	e018      	b.n	800ea60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ea2e:	4b3d      	ldr	r3, [pc, #244]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a3c      	ldr	r2, [pc, #240]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea3a:	f7f4 fe71 	bl	8003720 <HAL_GetTick>
 800ea3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ea40:	e008      	b.n	800ea54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ea42:	f7f4 fe6d 	bl	8003720 <HAL_GetTick>
 800ea46:	4602      	mov	r2, r0
 800ea48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d901      	bls.n	800ea54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ea50:	2303      	movs	r3, #3
 800ea52:	e23d      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ea54:	4b33      	ldr	r3, [pc, #204]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1f0      	bne.n	800ea42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f003 0308 	and.w	r3, r3, #8
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d036      	beq.n	800eada <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	695b      	ldr	r3, [r3, #20]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d019      	beq.n	800eaa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ea74:	4b2b      	ldr	r3, [pc, #172]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea78:	4a2a      	ldr	r2, [pc, #168]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea7a:	f043 0301 	orr.w	r3, r3, #1
 800ea7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea80:	f7f4 fe4e 	bl	8003720 <HAL_GetTick>
 800ea84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea86:	e008      	b.n	800ea9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ea88:	f7f4 fe4a 	bl	8003720 <HAL_GetTick>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d901      	bls.n	800ea9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ea96:	2303      	movs	r3, #3
 800ea98:	e21a      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea9a:	4b22      	ldr	r3, [pc, #136]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ea9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea9e:	f003 0302 	and.w	r3, r3, #2
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d0f0      	beq.n	800ea88 <HAL_RCC_OscConfig+0x45c>
 800eaa6:	e018      	b.n	800eada <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eaa8:	4b1e      	ldr	r3, [pc, #120]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800eaaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaac:	4a1d      	ldr	r2, [pc, #116]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800eaae:	f023 0301 	bic.w	r3, r3, #1
 800eab2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eab4:	f7f4 fe34 	bl	8003720 <HAL_GetTick>
 800eab8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eaba:	e008      	b.n	800eace <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eabc:	f7f4 fe30 	bl	8003720 <HAL_GetTick>
 800eac0:	4602      	mov	r2, r0
 800eac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d901      	bls.n	800eace <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800eaca:	2303      	movs	r3, #3
 800eacc:	e200      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eace:	4b15      	ldr	r3, [pc, #84]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800ead0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ead2:	f003 0302 	and.w	r3, r3, #2
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1f0      	bne.n	800eabc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 0320 	and.w	r3, r3, #32
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d039      	beq.n	800eb5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	699b      	ldr	r3, [r3, #24]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d01c      	beq.n	800eb28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800eaee:	4b0d      	ldr	r3, [pc, #52]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4a0c      	ldr	r2, [pc, #48]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800eaf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eaf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800eafa:	f7f4 fe11 	bl	8003720 <HAL_GetTick>
 800eafe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800eb00:	e008      	b.n	800eb14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eb02:	f7f4 fe0d 	bl	8003720 <HAL_GetTick>
 800eb06:	4602      	mov	r2, r0
 800eb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0a:	1ad3      	subs	r3, r2, r3
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	d901      	bls.n	800eb14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800eb10:	2303      	movs	r3, #3
 800eb12:	e1dd      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800eb14:	4b03      	ldr	r3, [pc, #12]	@ (800eb24 <HAL_RCC_OscConfig+0x4f8>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d0f0      	beq.n	800eb02 <HAL_RCC_OscConfig+0x4d6>
 800eb20:	e01b      	b.n	800eb5a <HAL_RCC_OscConfig+0x52e>
 800eb22:	bf00      	nop
 800eb24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eb28:	4b9b      	ldr	r3, [pc, #620]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a9a      	ldr	r2, [pc, #616]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800eb2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800eb34:	f7f4 fdf4 	bl	8003720 <HAL_GetTick>
 800eb38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eb3a:	e008      	b.n	800eb4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eb3c:	f7f4 fdf0 	bl	8003720 <HAL_GetTick>
 800eb40:	4602      	mov	r2, r0
 800eb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d901      	bls.n	800eb4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	e1c0      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eb4e:	4b92      	ldr	r3, [pc, #584]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1f0      	bne.n	800eb3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f003 0304 	and.w	r3, r3, #4
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f000 8081 	beq.w	800ec6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800eb68:	4b8c      	ldr	r3, [pc, #560]	@ (800ed9c <HAL_RCC_OscConfig+0x770>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a8b      	ldr	r2, [pc, #556]	@ (800ed9c <HAL_RCC_OscConfig+0x770>)
 800eb6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eb72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800eb74:	f7f4 fdd4 	bl	8003720 <HAL_GetTick>
 800eb78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb7a:	e008      	b.n	800eb8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb7c:	f7f4 fdd0 	bl	8003720 <HAL_GetTick>
 800eb80:	4602      	mov	r2, r0
 800eb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	2b64      	cmp	r3, #100	@ 0x64
 800eb88:	d901      	bls.n	800eb8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	e1a0      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb8e:	4b83      	ldr	r3, [pc, #524]	@ (800ed9c <HAL_RCC_OscConfig+0x770>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0f0      	beq.n	800eb7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d106      	bne.n	800ebb0 <HAL_RCC_OscConfig+0x584>
 800eba2:	4b7d      	ldr	r3, [pc, #500]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800eba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eba6:	4a7c      	ldr	r2, [pc, #496]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800eba8:	f043 0301 	orr.w	r3, r3, #1
 800ebac:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebae:	e02d      	b.n	800ec0c <HAL_RCC_OscConfig+0x5e0>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10c      	bne.n	800ebd2 <HAL_RCC_OscConfig+0x5a6>
 800ebb8:	4b77      	ldr	r3, [pc, #476]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebbc:	4a76      	ldr	r2, [pc, #472]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebbe:	f023 0301 	bic.w	r3, r3, #1
 800ebc2:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebc4:	4b74      	ldr	r3, [pc, #464]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebc8:	4a73      	ldr	r2, [pc, #460]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebca:	f023 0304 	bic.w	r3, r3, #4
 800ebce:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebd0:	e01c      	b.n	800ec0c <HAL_RCC_OscConfig+0x5e0>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	2b05      	cmp	r3, #5
 800ebd8:	d10c      	bne.n	800ebf4 <HAL_RCC_OscConfig+0x5c8>
 800ebda:	4b6f      	ldr	r3, [pc, #444]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebde:	4a6e      	ldr	r2, [pc, #440]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebe0:	f043 0304 	orr.w	r3, r3, #4
 800ebe4:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebe6:	4b6c      	ldr	r3, [pc, #432]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebea:	4a6b      	ldr	r2, [pc, #428]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebec:	f043 0301 	orr.w	r3, r3, #1
 800ebf0:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebf2:	e00b      	b.n	800ec0c <HAL_RCC_OscConfig+0x5e0>
 800ebf4:	4b68      	ldr	r3, [pc, #416]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebf8:	4a67      	ldr	r2, [pc, #412]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ebfa:	f023 0301 	bic.w	r3, r3, #1
 800ebfe:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec00:	4b65      	ldr	r3, [pc, #404]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ec02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec04:	4a64      	ldr	r2, [pc, #400]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ec06:	f023 0304 	bic.w	r3, r3, #4
 800ec0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d015      	beq.n	800ec40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec14:	f7f4 fd84 	bl	8003720 <HAL_GetTick>
 800ec18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec1a:	e00a      	b.n	800ec32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec1c:	f7f4 fd80 	bl	8003720 <HAL_GetTick>
 800ec20:	4602      	mov	r2, r0
 800ec22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d901      	bls.n	800ec32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ec2e:	2303      	movs	r3, #3
 800ec30:	e14e      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec32:	4b59      	ldr	r3, [pc, #356]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ec34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec36:	f003 0302 	and.w	r3, r3, #2
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d0ee      	beq.n	800ec1c <HAL_RCC_OscConfig+0x5f0>
 800ec3e:	e014      	b.n	800ec6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec40:	f7f4 fd6e 	bl	8003720 <HAL_GetTick>
 800ec44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ec46:	e00a      	b.n	800ec5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec48:	f7f4 fd6a 	bl	8003720 <HAL_GetTick>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec50:	1ad3      	subs	r3, r2, r3
 800ec52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d901      	bls.n	800ec5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	e138      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ec5e:	4b4e      	ldr	r3, [pc, #312]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ec60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec62:	f003 0302 	and.w	r3, r3, #2
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1ee      	bne.n	800ec48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f000 812d 	beq.w	800eece <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ec74:	4b48      	ldr	r3, [pc, #288]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ec7c:	2b18      	cmp	r3, #24
 800ec7e:	f000 80bd 	beq.w	800edfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	f040 809e 	bne.w	800edc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec8c:	4b42      	ldr	r3, [pc, #264]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a41      	ldr	r2, [pc, #260]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ec92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ec96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec98:	f7f4 fd42 	bl	8003720 <HAL_GetTick>
 800ec9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec9e:	e008      	b.n	800ecb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eca0:	f7f4 fd3e 	bl	8003720 <HAL_GetTick>
 800eca4:	4602      	mov	r2, r0
 800eca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d901      	bls.n	800ecb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	e10e      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ecb2:	4b39      	ldr	r3, [pc, #228]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1f0      	bne.n	800eca0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ecbe:	4b36      	ldr	r3, [pc, #216]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ecc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ecc2:	4b37      	ldr	r3, [pc, #220]	@ (800eda0 <HAL_RCC_OscConfig+0x774>)
 800ecc4:	4013      	ands	r3, r2
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ecce:	0112      	lsls	r2, r2, #4
 800ecd0:	430a      	orrs	r2, r1
 800ecd2:	4931      	ldr	r1, [pc, #196]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	628b      	str	r3, [r1, #40]	@ 0x28
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ece6:	3b01      	subs	r3, #1
 800ece8:	025b      	lsls	r3, r3, #9
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	431a      	orrs	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	041b      	lsls	r3, r3, #16
 800ecf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ecfa:	431a      	orrs	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed00:	3b01      	subs	r3, #1
 800ed02:	061b      	lsls	r3, r3, #24
 800ed04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ed08:	4923      	ldr	r1, [pc, #140]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ed0e:	4b22      	ldr	r3, [pc, #136]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed12:	4a21      	ldr	r2, [pc, #132]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed14:	f023 0301 	bic.w	r3, r3, #1
 800ed18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ed1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed1e:	4b21      	ldr	r3, [pc, #132]	@ (800eda4 <HAL_RCC_OscConfig+0x778>)
 800ed20:	4013      	ands	r3, r2
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ed26:	00d2      	lsls	r2, r2, #3
 800ed28:	491b      	ldr	r1, [pc, #108]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ed2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed32:	f023 020c 	bic.w	r2, r3, #12
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed3a:	4917      	ldr	r1, [pc, #92]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ed40:	4b15      	ldr	r3, [pc, #84]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed44:	f023 0202 	bic.w	r2, r3, #2
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed4c:	4912      	ldr	r1, [pc, #72]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ed52:	4b11      	ldr	r3, [pc, #68]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed56:	4a10      	ldr	r2, [pc, #64]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed62:	4a0d      	ldr	r2, [pc, #52]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ed6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed6e:	4a0a      	ldr	r2, [pc, #40]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ed74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ed76:	4b08      	ldr	r3, [pc, #32]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed7a:	4a07      	ldr	r2, [pc, #28]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed7c:	f043 0301 	orr.w	r3, r3, #1
 800ed80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed82:	4b05      	ldr	r3, [pc, #20]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a04      	ldr	r2, [pc, #16]	@ (800ed98 <HAL_RCC_OscConfig+0x76c>)
 800ed88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ed8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed8e:	f7f4 fcc7 	bl	8003720 <HAL_GetTick>
 800ed92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ed94:	e011      	b.n	800edba <HAL_RCC_OscConfig+0x78e>
 800ed96:	bf00      	nop
 800ed98:	58024400 	.word	0x58024400
 800ed9c:	58024800 	.word	0x58024800
 800eda0:	fffffc0c 	.word	0xfffffc0c
 800eda4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eda8:	f7f4 fcba 	bl	8003720 <HAL_GetTick>
 800edac:	4602      	mov	r2, r0
 800edae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	d901      	bls.n	800edba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e08a      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800edba:	4b47      	ldr	r3, [pc, #284]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d0f0      	beq.n	800eda8 <HAL_RCC_OscConfig+0x77c>
 800edc6:	e082      	b.n	800eece <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800edc8:	4b43      	ldr	r3, [pc, #268]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a42      	ldr	r2, [pc, #264]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800edce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800edd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edd4:	f7f4 fca4 	bl	8003720 <HAL_GetTick>
 800edd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800edda:	e008      	b.n	800edee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eddc:	f7f4 fca0 	bl	8003720 <HAL_GetTick>
 800ede0:	4602      	mov	r2, r0
 800ede2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede4:	1ad3      	subs	r3, r2, r3
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	d901      	bls.n	800edee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800edea:	2303      	movs	r3, #3
 800edec:	e070      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800edee:	4b3a      	ldr	r3, [pc, #232]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1f0      	bne.n	800eddc <HAL_RCC_OscConfig+0x7b0>
 800edfa:	e068      	b.n	800eece <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800edfc:	4b36      	ldr	r3, [pc, #216]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800edfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ee02:	4b35      	ldr	r3, [pc, #212]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800ee04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d031      	beq.n	800ee74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	f003 0203 	and.w	r2, r3, #3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d12a      	bne.n	800ee74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	091b      	lsrs	r3, r3, #4
 800ee22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d122      	bne.n	800ee74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d11a      	bne.n	800ee74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	0a5b      	lsrs	r3, r3, #9
 800ee42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d111      	bne.n	800ee74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	0c1b      	lsrs	r3, r3, #16
 800ee54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d108      	bne.n	800ee74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	0e1b      	lsrs	r3, r3, #24
 800ee66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d001      	beq.n	800ee78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e02b      	b.n	800eed0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ee78:	4b17      	ldr	r3, [pc, #92]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800ee7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee7c:	08db      	lsrs	r3, r3, #3
 800ee7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d01f      	beq.n	800eece <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ee8e:	4b12      	ldr	r3, [pc, #72]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800ee90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee92:	4a11      	ldr	r2, [pc, #68]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800ee94:	f023 0301 	bic.w	r3, r3, #1
 800ee98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ee9a:	f7f4 fc41 	bl	8003720 <HAL_GetTick>
 800ee9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800eea0:	bf00      	nop
 800eea2:	f7f4 fc3d 	bl	8003720 <HAL_GetTick>
 800eea6:	4602      	mov	r2, r0
 800eea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d0f9      	beq.n	800eea2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800eeae:	4b0a      	ldr	r3, [pc, #40]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800eeb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eeb2:	4b0a      	ldr	r3, [pc, #40]	@ (800eedc <HAL_RCC_OscConfig+0x8b0>)
 800eeb4:	4013      	ands	r3, r2
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800eeba:	00d2      	lsls	r2, r2, #3
 800eebc:	4906      	ldr	r1, [pc, #24]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800eebe:	4313      	orrs	r3, r2
 800eec0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800eec2:	4b05      	ldr	r3, [pc, #20]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800eec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eec6:	4a04      	ldr	r2, [pc, #16]	@ (800eed8 <HAL_RCC_OscConfig+0x8ac>)
 800eec8:	f043 0301 	orr.w	r3, r3, #1
 800eecc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3730      	adds	r7, #48	@ 0x30
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	58024400 	.word	0x58024400
 800eedc:	ffff0007 	.word	0xffff0007

0800eee0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b086      	sub	sp, #24
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d101      	bne.n	800eef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eef0:	2301      	movs	r3, #1
 800eef2:	e19c      	b.n	800f22e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800eef4:	4b8a      	ldr	r3, [pc, #552]	@ (800f120 <HAL_RCC_ClockConfig+0x240>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f003 030f 	and.w	r3, r3, #15
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d910      	bls.n	800ef24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef02:	4b87      	ldr	r3, [pc, #540]	@ (800f120 <HAL_RCC_ClockConfig+0x240>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f023 020f 	bic.w	r2, r3, #15
 800ef0a:	4985      	ldr	r1, [pc, #532]	@ (800f120 <HAL_RCC_ClockConfig+0x240>)
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef12:	4b83      	ldr	r3, [pc, #524]	@ (800f120 <HAL_RCC_ClockConfig+0x240>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f003 030f 	and.w	r3, r3, #15
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d001      	beq.n	800ef24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	e184      	b.n	800f22e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f003 0304 	and.w	r3, r3, #4
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d010      	beq.n	800ef52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	691a      	ldr	r2, [r3, #16]
 800ef34:	4b7b      	ldr	r3, [pc, #492]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800ef36:	699b      	ldr	r3, [r3, #24]
 800ef38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d908      	bls.n	800ef52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ef40:	4b78      	ldr	r3, [pc, #480]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800ef42:	699b      	ldr	r3, [r3, #24]
 800ef44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	691b      	ldr	r3, [r3, #16]
 800ef4c:	4975      	ldr	r1, [pc, #468]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f003 0308 	and.w	r3, r3, #8
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d010      	beq.n	800ef80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	695a      	ldr	r2, [r3, #20]
 800ef62:	4b70      	ldr	r3, [pc, #448]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800ef64:	69db      	ldr	r3, [r3, #28]
 800ef66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d908      	bls.n	800ef80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ef6e:	4b6d      	ldr	r3, [pc, #436]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800ef70:	69db      	ldr	r3, [r3, #28]
 800ef72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	695b      	ldr	r3, [r3, #20]
 800ef7a:	496a      	ldr	r1, [pc, #424]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f003 0310 	and.w	r3, r3, #16
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d010      	beq.n	800efae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	699a      	ldr	r2, [r3, #24]
 800ef90:	4b64      	ldr	r3, [pc, #400]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800ef92:	69db      	ldr	r3, [r3, #28]
 800ef94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d908      	bls.n	800efae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ef9c:	4b61      	ldr	r3, [pc, #388]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800ef9e:	69db      	ldr	r3, [r3, #28]
 800efa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	495e      	ldr	r1, [pc, #376]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800efaa:	4313      	orrs	r3, r2
 800efac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f003 0320 	and.w	r3, r3, #32
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d010      	beq.n	800efdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	69da      	ldr	r2, [r3, #28]
 800efbe:	4b59      	ldr	r3, [pc, #356]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800efc0:	6a1b      	ldr	r3, [r3, #32]
 800efc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d908      	bls.n	800efdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800efca:	4b56      	ldr	r3, [pc, #344]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	69db      	ldr	r3, [r3, #28]
 800efd6:	4953      	ldr	r1, [pc, #332]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800efd8:	4313      	orrs	r3, r2
 800efda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f003 0302 	and.w	r3, r3, #2
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d010      	beq.n	800f00a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	68da      	ldr	r2, [r3, #12]
 800efec:	4b4d      	ldr	r3, [pc, #308]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	f003 030f 	and.w	r3, r3, #15
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d908      	bls.n	800f00a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eff8:	4b4a      	ldr	r3, [pc, #296]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	f023 020f 	bic.w	r2, r3, #15
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	4947      	ldr	r1, [pc, #284]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f006:	4313      	orrs	r3, r2
 800f008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f003 0301 	and.w	r3, r3, #1
 800f012:	2b00      	cmp	r3, #0
 800f014:	d055      	beq.n	800f0c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f016:	4b43      	ldr	r3, [pc, #268]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f018:	699b      	ldr	r3, [r3, #24]
 800f01a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	4940      	ldr	r1, [pc, #256]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f024:	4313      	orrs	r3, r2
 800f026:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	2b02      	cmp	r3, #2
 800f02e:	d107      	bne.n	800f040 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f030:	4b3c      	ldr	r3, [pc, #240]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d121      	bne.n	800f080 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f03c:	2301      	movs	r3, #1
 800f03e:	e0f6      	b.n	800f22e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	2b03      	cmp	r3, #3
 800f046:	d107      	bne.n	800f058 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f048:	4b36      	ldr	r3, [pc, #216]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f050:	2b00      	cmp	r3, #0
 800f052:	d115      	bne.n	800f080 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f054:	2301      	movs	r3, #1
 800f056:	e0ea      	b.n	800f22e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d107      	bne.n	800f070 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f060:	4b30      	ldr	r3, [pc, #192]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d109      	bne.n	800f080 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f06c:	2301      	movs	r3, #1
 800f06e:	e0de      	b.n	800f22e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f070:	4b2c      	ldr	r3, [pc, #176]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f003 0304 	and.w	r3, r3, #4
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d101      	bne.n	800f080 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e0d6      	b.n	800f22e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f080:	4b28      	ldr	r3, [pc, #160]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	f023 0207 	bic.w	r2, r3, #7
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	4925      	ldr	r1, [pc, #148]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f08e:	4313      	orrs	r3, r2
 800f090:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f092:	f7f4 fb45 	bl	8003720 <HAL_GetTick>
 800f096:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f098:	e00a      	b.n	800f0b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f09a:	f7f4 fb41 	bl	8003720 <HAL_GetTick>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	1ad3      	subs	r3, r2, r3
 800f0a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d901      	bls.n	800f0b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800f0ac:	2303      	movs	r3, #3
 800f0ae:	e0be      	b.n	800f22e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f0b0:	4b1c      	ldr	r3, [pc, #112]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f0b2:	691b      	ldr	r3, [r3, #16]
 800f0b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	00db      	lsls	r3, r3, #3
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d1eb      	bne.n	800f09a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f003 0302 	and.w	r3, r3, #2
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d010      	beq.n	800f0f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	68da      	ldr	r2, [r3, #12]
 800f0d2:	4b14      	ldr	r3, [pc, #80]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f0d4:	699b      	ldr	r3, [r3, #24]
 800f0d6:	f003 030f 	and.w	r3, r3, #15
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d208      	bcs.n	800f0f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f0de:	4b11      	ldr	r3, [pc, #68]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f0e0:	699b      	ldr	r3, [r3, #24]
 800f0e2:	f023 020f 	bic.w	r2, r3, #15
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	490e      	ldr	r1, [pc, #56]	@ (800f124 <HAL_RCC_ClockConfig+0x244>)
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f0f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f120 <HAL_RCC_ClockConfig+0x240>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f003 030f 	and.w	r3, r3, #15
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d214      	bcs.n	800f128 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0fe:	4b08      	ldr	r3, [pc, #32]	@ (800f120 <HAL_RCC_ClockConfig+0x240>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f023 020f 	bic.w	r2, r3, #15
 800f106:	4906      	ldr	r1, [pc, #24]	@ (800f120 <HAL_RCC_ClockConfig+0x240>)
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	4313      	orrs	r3, r2
 800f10c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f10e:	4b04      	ldr	r3, [pc, #16]	@ (800f120 <HAL_RCC_ClockConfig+0x240>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f003 030f 	and.w	r3, r3, #15
 800f116:	683a      	ldr	r2, [r7, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d005      	beq.n	800f128 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e086      	b.n	800f22e <HAL_RCC_ClockConfig+0x34e>
 800f120:	52002000 	.word	0x52002000
 800f124:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f003 0304 	and.w	r3, r3, #4
 800f130:	2b00      	cmp	r3, #0
 800f132:	d010      	beq.n	800f156 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	691a      	ldr	r2, [r3, #16]
 800f138:	4b3f      	ldr	r3, [pc, #252]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f13a:	699b      	ldr	r3, [r3, #24]
 800f13c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f140:	429a      	cmp	r2, r3
 800f142:	d208      	bcs.n	800f156 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f144:	4b3c      	ldr	r3, [pc, #240]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f146:	699b      	ldr	r3, [r3, #24]
 800f148:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	4939      	ldr	r1, [pc, #228]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f152:	4313      	orrs	r3, r2
 800f154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f003 0308 	and.w	r3, r3, #8
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d010      	beq.n	800f184 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	695a      	ldr	r2, [r3, #20]
 800f166:	4b34      	ldr	r3, [pc, #208]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f168:	69db      	ldr	r3, [r3, #28]
 800f16a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f16e:	429a      	cmp	r2, r3
 800f170:	d208      	bcs.n	800f184 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f172:	4b31      	ldr	r3, [pc, #196]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f174:	69db      	ldr	r3, [r3, #28]
 800f176:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	492e      	ldr	r1, [pc, #184]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f180:	4313      	orrs	r3, r2
 800f182:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f003 0310 	and.w	r3, r3, #16
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d010      	beq.n	800f1b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	699a      	ldr	r2, [r3, #24]
 800f194:	4b28      	ldr	r3, [pc, #160]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f196:	69db      	ldr	r3, [r3, #28]
 800f198:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d208      	bcs.n	800f1b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f1a0:	4b25      	ldr	r3, [pc, #148]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f1a2:	69db      	ldr	r3, [r3, #28]
 800f1a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	699b      	ldr	r3, [r3, #24]
 800f1ac:	4922      	ldr	r1, [pc, #136]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f003 0320 	and.w	r3, r3, #32
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d010      	beq.n	800f1e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	69da      	ldr	r2, [r3, #28]
 800f1c2:	4b1d      	ldr	r3, [pc, #116]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f1c4:	6a1b      	ldr	r3, [r3, #32]
 800f1c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d208      	bcs.n	800f1e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f1d0:	6a1b      	ldr	r3, [r3, #32]
 800f1d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	69db      	ldr	r3, [r3, #28]
 800f1da:	4917      	ldr	r1, [pc, #92]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f1e0:	f000 f834 	bl	800f24c <HAL_RCC_GetSysClockFreq>
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	4b14      	ldr	r3, [pc, #80]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	0a1b      	lsrs	r3, r3, #8
 800f1ec:	f003 030f 	and.w	r3, r3, #15
 800f1f0:	4912      	ldr	r1, [pc, #72]	@ (800f23c <HAL_RCC_ClockConfig+0x35c>)
 800f1f2:	5ccb      	ldrb	r3, [r1, r3]
 800f1f4:	f003 031f 	and.w	r3, r3, #31
 800f1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800f1fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f1fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f238 <HAL_RCC_ClockConfig+0x358>)
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	f003 030f 	and.w	r3, r3, #15
 800f206:	4a0d      	ldr	r2, [pc, #52]	@ (800f23c <HAL_RCC_ClockConfig+0x35c>)
 800f208:	5cd3      	ldrb	r3, [r2, r3]
 800f20a:	f003 031f 	and.w	r3, r3, #31
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	fa22 f303 	lsr.w	r3, r2, r3
 800f214:	4a0a      	ldr	r2, [pc, #40]	@ (800f240 <HAL_RCC_ClockConfig+0x360>)
 800f216:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f218:	4a0a      	ldr	r2, [pc, #40]	@ (800f244 <HAL_RCC_ClockConfig+0x364>)
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800f21e:	4b0a      	ldr	r3, [pc, #40]	@ (800f248 <HAL_RCC_ClockConfig+0x368>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4618      	mov	r0, r3
 800f224:	f7f4 fa32 	bl	800368c <HAL_InitTick>
 800f228:	4603      	mov	r3, r0
 800f22a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3718      	adds	r7, #24
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	58024400 	.word	0x58024400
 800f23c:	0801b324 	.word	0x0801b324
 800f240:	24000244 	.word	0x24000244
 800f244:	24000240 	.word	0x24000240
 800f248:	24000248 	.word	0x24000248

0800f24c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b089      	sub	sp, #36	@ 0x24
 800f250:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f252:	4bb3      	ldr	r3, [pc, #716]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f254:	691b      	ldr	r3, [r3, #16]
 800f256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f25a:	2b18      	cmp	r3, #24
 800f25c:	f200 8155 	bhi.w	800f50a <HAL_RCC_GetSysClockFreq+0x2be>
 800f260:	a201      	add	r2, pc, #4	@ (adr r2, 800f268 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f266:	bf00      	nop
 800f268:	0800f2cd 	.word	0x0800f2cd
 800f26c:	0800f50b 	.word	0x0800f50b
 800f270:	0800f50b 	.word	0x0800f50b
 800f274:	0800f50b 	.word	0x0800f50b
 800f278:	0800f50b 	.word	0x0800f50b
 800f27c:	0800f50b 	.word	0x0800f50b
 800f280:	0800f50b 	.word	0x0800f50b
 800f284:	0800f50b 	.word	0x0800f50b
 800f288:	0800f2f3 	.word	0x0800f2f3
 800f28c:	0800f50b 	.word	0x0800f50b
 800f290:	0800f50b 	.word	0x0800f50b
 800f294:	0800f50b 	.word	0x0800f50b
 800f298:	0800f50b 	.word	0x0800f50b
 800f29c:	0800f50b 	.word	0x0800f50b
 800f2a0:	0800f50b 	.word	0x0800f50b
 800f2a4:	0800f50b 	.word	0x0800f50b
 800f2a8:	0800f2f9 	.word	0x0800f2f9
 800f2ac:	0800f50b 	.word	0x0800f50b
 800f2b0:	0800f50b 	.word	0x0800f50b
 800f2b4:	0800f50b 	.word	0x0800f50b
 800f2b8:	0800f50b 	.word	0x0800f50b
 800f2bc:	0800f50b 	.word	0x0800f50b
 800f2c0:	0800f50b 	.word	0x0800f50b
 800f2c4:	0800f50b 	.word	0x0800f50b
 800f2c8:	0800f2ff 	.word	0x0800f2ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2cc:	4b94      	ldr	r3, [pc, #592]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f003 0320 	and.w	r3, r3, #32
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d009      	beq.n	800f2ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2d8:	4b91      	ldr	r3, [pc, #580]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	08db      	lsrs	r3, r3, #3
 800f2de:	f003 0303 	and.w	r3, r3, #3
 800f2e2:	4a90      	ldr	r2, [pc, #576]	@ (800f524 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800f2e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800f2ea:	e111      	b.n	800f510 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f2ec:	4b8d      	ldr	r3, [pc, #564]	@ (800f524 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f2ee:	61bb      	str	r3, [r7, #24]
      break;
 800f2f0:	e10e      	b.n	800f510 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800f2f2:	4b8d      	ldr	r3, [pc, #564]	@ (800f528 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f2f4:	61bb      	str	r3, [r7, #24]
      break;
 800f2f6:	e10b      	b.n	800f510 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800f2f8:	4b8c      	ldr	r3, [pc, #560]	@ (800f52c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f2fa:	61bb      	str	r3, [r7, #24]
      break;
 800f2fc:	e108      	b.n	800f510 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f2fe:	4b88      	ldr	r3, [pc, #544]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f302:	f003 0303 	and.w	r3, r3, #3
 800f306:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f308:	4b85      	ldr	r3, [pc, #532]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f30a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f30c:	091b      	lsrs	r3, r3, #4
 800f30e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f312:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f314:	4b82      	ldr	r3, [pc, #520]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f318:	f003 0301 	and.w	r3, r3, #1
 800f31c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f31e:	4b80      	ldr	r3, [pc, #512]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f322:	08db      	lsrs	r3, r3, #3
 800f324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	fb02 f303 	mul.w	r3, r2, r3
 800f32e:	ee07 3a90 	vmov	s15, r3
 800f332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f336:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f000 80e1 	beq.w	800f504 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	2b02      	cmp	r3, #2
 800f346:	f000 8083 	beq.w	800f450 <HAL_RCC_GetSysClockFreq+0x204>
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	f200 80a1 	bhi.w	800f494 <HAL_RCC_GetSysClockFreq+0x248>
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d003      	beq.n	800f360 <HAL_RCC_GetSysClockFreq+0x114>
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d056      	beq.n	800f40c <HAL_RCC_GetSysClockFreq+0x1c0>
 800f35e:	e099      	b.n	800f494 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f360:	4b6f      	ldr	r3, [pc, #444]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 0320 	and.w	r3, r3, #32
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d02d      	beq.n	800f3c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f36c:	4b6c      	ldr	r3, [pc, #432]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	08db      	lsrs	r3, r3, #3
 800f372:	f003 0303 	and.w	r3, r3, #3
 800f376:	4a6b      	ldr	r2, [pc, #428]	@ (800f524 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f378:	fa22 f303 	lsr.w	r3, r2, r3
 800f37c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	ee07 3a90 	vmov	s15, r3
 800f384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	ee07 3a90 	vmov	s15, r3
 800f38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f396:	4b62      	ldr	r3, [pc, #392]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f39e:	ee07 3a90 	vmov	s15, r3
 800f3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800f3aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800f530 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800f3c6:	e087      	b.n	800f4d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	ee07 3a90 	vmov	s15, r3
 800f3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800f534 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3da:	4b51      	ldr	r3, [pc, #324]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3e2:	ee07 3a90 	vmov	s15, r3
 800f3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800f3ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800f530 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f406:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f40a:	e065      	b.n	800f4d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	ee07 3a90 	vmov	s15, r3
 800f412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f416:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800f538 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f41e:	4b40      	ldr	r3, [pc, #256]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f426:	ee07 3a90 	vmov	s15, r3
 800f42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f42e:	ed97 6a02 	vldr	s12, [r7, #8]
 800f432:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f530 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f43e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f44a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f44e:	e043      	b.n	800f4d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	ee07 3a90 	vmov	s15, r3
 800f456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f45a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800f53c <HAL_RCC_GetSysClockFreq+0x2f0>
 800f45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f462:	4b2f      	ldr	r3, [pc, #188]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f46a:	ee07 3a90 	vmov	s15, r3
 800f46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f472:	ed97 6a02 	vldr	s12, [r7, #8]
 800f476:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800f530 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f48e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f492:	e021      	b.n	800f4d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	ee07 3a90 	vmov	s15, r3
 800f49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f49e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f538 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4a6:	4b1e      	ldr	r3, [pc, #120]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4ae:	ee07 3a90 	vmov	s15, r3
 800f4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800f4ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800f530 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f4d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f4d8:	4b11      	ldr	r3, [pc, #68]	@ (800f520 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4dc:	0a5b      	lsrs	r3, r3, #9
 800f4de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	ee07 3a90 	vmov	s15, r3
 800f4ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f4f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4fc:	ee17 3a90 	vmov	r3, s15
 800f500:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800f502:	e005      	b.n	800f510 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800f504:	2300      	movs	r3, #0
 800f506:	61bb      	str	r3, [r7, #24]
      break;
 800f508:	e002      	b.n	800f510 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800f50a:	4b07      	ldr	r3, [pc, #28]	@ (800f528 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f50c:	61bb      	str	r3, [r7, #24]
      break;
 800f50e:	bf00      	nop
  }

  return sysclockfreq;
 800f510:	69bb      	ldr	r3, [r7, #24]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3724      	adds	r7, #36	@ 0x24
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	58024400 	.word	0x58024400
 800f524:	03d09000 	.word	0x03d09000
 800f528:	003d0900 	.word	0x003d0900
 800f52c:	017d7840 	.word	0x017d7840
 800f530:	46000000 	.word	0x46000000
 800f534:	4c742400 	.word	0x4c742400
 800f538:	4a742400 	.word	0x4a742400
 800f53c:	4bbebc20 	.word	0x4bbebc20

0800f540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f546:	f7ff fe81 	bl	800f24c <HAL_RCC_GetSysClockFreq>
 800f54a:	4602      	mov	r2, r0
 800f54c:	4b10      	ldr	r3, [pc, #64]	@ (800f590 <HAL_RCC_GetHCLKFreq+0x50>)
 800f54e:	699b      	ldr	r3, [r3, #24]
 800f550:	0a1b      	lsrs	r3, r3, #8
 800f552:	f003 030f 	and.w	r3, r3, #15
 800f556:	490f      	ldr	r1, [pc, #60]	@ (800f594 <HAL_RCC_GetHCLKFreq+0x54>)
 800f558:	5ccb      	ldrb	r3, [r1, r3]
 800f55a:	f003 031f 	and.w	r3, r3, #31
 800f55e:	fa22 f303 	lsr.w	r3, r2, r3
 800f562:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f564:	4b0a      	ldr	r3, [pc, #40]	@ (800f590 <HAL_RCC_GetHCLKFreq+0x50>)
 800f566:	699b      	ldr	r3, [r3, #24]
 800f568:	f003 030f 	and.w	r3, r3, #15
 800f56c:	4a09      	ldr	r2, [pc, #36]	@ (800f594 <HAL_RCC_GetHCLKFreq+0x54>)
 800f56e:	5cd3      	ldrb	r3, [r2, r3]
 800f570:	f003 031f 	and.w	r3, r3, #31
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	fa22 f303 	lsr.w	r3, r2, r3
 800f57a:	4a07      	ldr	r2, [pc, #28]	@ (800f598 <HAL_RCC_GetHCLKFreq+0x58>)
 800f57c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f57e:	4a07      	ldr	r2, [pc, #28]	@ (800f59c <HAL_RCC_GetHCLKFreq+0x5c>)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f584:	4b04      	ldr	r3, [pc, #16]	@ (800f598 <HAL_RCC_GetHCLKFreq+0x58>)
 800f586:	681b      	ldr	r3, [r3, #0]
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3708      	adds	r7, #8
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	58024400 	.word	0x58024400
 800f594:	0801b324 	.word	0x0801b324
 800f598:	24000244 	.word	0x24000244
 800f59c:	24000240 	.word	0x24000240

0800f5a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f5a4:	f7ff ffcc 	bl	800f540 <HAL_RCC_GetHCLKFreq>
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	4b06      	ldr	r3, [pc, #24]	@ (800f5c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f5ac:	69db      	ldr	r3, [r3, #28]
 800f5ae:	091b      	lsrs	r3, r3, #4
 800f5b0:	f003 0307 	and.w	r3, r3, #7
 800f5b4:	4904      	ldr	r1, [pc, #16]	@ (800f5c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f5b6:	5ccb      	ldrb	r3, [r1, r3]
 800f5b8:	f003 031f 	and.w	r3, r3, #31
 800f5bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	58024400 	.word	0x58024400
 800f5c8:	0801b324 	.word	0x0801b324

0800f5cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f5d0:	f7ff ffb6 	bl	800f540 <HAL_RCC_GetHCLKFreq>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	4b06      	ldr	r3, [pc, #24]	@ (800f5f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f5d8:	69db      	ldr	r3, [r3, #28]
 800f5da:	0a1b      	lsrs	r3, r3, #8
 800f5dc:	f003 0307 	and.w	r3, r3, #7
 800f5e0:	4904      	ldr	r1, [pc, #16]	@ (800f5f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f5e2:	5ccb      	ldrb	r3, [r1, r3]
 800f5e4:	f003 031f 	and.w	r3, r3, #31
 800f5e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	58024400 	.word	0x58024400
 800f5f4:	0801b324 	.word	0x0801b324

0800f5f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f5f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5fc:	b0ca      	sub	sp, #296	@ 0x128
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f604:	2300      	movs	r3, #0
 800f606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f60a:	2300      	movs	r3, #0
 800f60c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f618:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800f61c:	2500      	movs	r5, #0
 800f61e:	ea54 0305 	orrs.w	r3, r4, r5
 800f622:	d049      	beq.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f628:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f62a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f62e:	d02f      	beq.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f630:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f634:	d828      	bhi.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f63a:	d01a      	beq.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f63c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f640:	d822      	bhi.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f642:	2b00      	cmp	r3, #0
 800f644:	d003      	beq.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f64a:	d007      	beq.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f64c:	e01c      	b.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f64e:	4bb8      	ldr	r3, [pc, #736]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f652:	4ab7      	ldr	r2, [pc, #732]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f658:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f65a:	e01a      	b.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f660:	3308      	adds	r3, #8
 800f662:	2102      	movs	r1, #2
 800f664:	4618      	mov	r0, r3
 800f666:	f002 fb61 	bl	8011d2c <RCCEx_PLL2_Config>
 800f66a:	4603      	mov	r3, r0
 800f66c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f670:	e00f      	b.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f676:	3328      	adds	r3, #40	@ 0x28
 800f678:	2102      	movs	r1, #2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f002 fc08 	bl	8011e90 <RCCEx_PLL3_Config>
 800f680:	4603      	mov	r3, r0
 800f682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f686:	e004      	b.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f688:	2301      	movs	r3, #1
 800f68a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f68e:	e000      	b.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f690:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f696:	2b00      	cmp	r3, #0
 800f698:	d10a      	bne.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f69a:	4ba5      	ldr	r3, [pc, #660]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f69c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f69e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f6a8:	4aa1      	ldr	r2, [pc, #644]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6aa:	430b      	orrs	r3, r1
 800f6ac:	6513      	str	r3, [r2, #80]	@ 0x50
 800f6ae:	e003      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800f6c4:	f04f 0900 	mov.w	r9, #0
 800f6c8:	ea58 0309 	orrs.w	r3, r8, r9
 800f6cc:	d047      	beq.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6d4:	2b04      	cmp	r3, #4
 800f6d6:	d82a      	bhi.n	800f72e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f6e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6de:	bf00      	nop
 800f6e0:	0800f6f5 	.word	0x0800f6f5
 800f6e4:	0800f703 	.word	0x0800f703
 800f6e8:	0800f719 	.word	0x0800f719
 800f6ec:	0800f737 	.word	0x0800f737
 800f6f0:	0800f737 	.word	0x0800f737
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f6f4:	4b8e      	ldr	r3, [pc, #568]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6f8:	4a8d      	ldr	r2, [pc, #564]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f6fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f700:	e01a      	b.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f706:	3308      	adds	r3, #8
 800f708:	2100      	movs	r1, #0
 800f70a:	4618      	mov	r0, r3
 800f70c:	f002 fb0e 	bl	8011d2c <RCCEx_PLL2_Config>
 800f710:	4603      	mov	r3, r0
 800f712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f716:	e00f      	b.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f71c:	3328      	adds	r3, #40	@ 0x28
 800f71e:	2100      	movs	r1, #0
 800f720:	4618      	mov	r0, r3
 800f722:	f002 fbb5 	bl	8011e90 <RCCEx_PLL3_Config>
 800f726:	4603      	mov	r3, r0
 800f728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f72c:	e004      	b.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f734:	e000      	b.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f736:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d10a      	bne.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f740:	4b7b      	ldr	r3, [pc, #492]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f744:	f023 0107 	bic.w	r1, r3, #7
 800f748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f74c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f74e:	4a78      	ldr	r2, [pc, #480]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f750:	430b      	orrs	r3, r1
 800f752:	6513      	str	r3, [r2, #80]	@ 0x50
 800f754:	e003      	b.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f75a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f766:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800f76a:	f04f 0b00 	mov.w	fp, #0
 800f76e:	ea5a 030b 	orrs.w	r3, sl, fp
 800f772:	d04c      	beq.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f77a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f77e:	d030      	beq.n	800f7e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f784:	d829      	bhi.n	800f7da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f786:	2bc0      	cmp	r3, #192	@ 0xc0
 800f788:	d02d      	beq.n	800f7e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f78a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f78c:	d825      	bhi.n	800f7da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f78e:	2b80      	cmp	r3, #128	@ 0x80
 800f790:	d018      	beq.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f792:	2b80      	cmp	r3, #128	@ 0x80
 800f794:	d821      	bhi.n	800f7da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f796:	2b00      	cmp	r3, #0
 800f798:	d002      	beq.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f79a:	2b40      	cmp	r3, #64	@ 0x40
 800f79c:	d007      	beq.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f79e:	e01c      	b.n	800f7da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7a0:	4b63      	ldr	r3, [pc, #396]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7a4:	4a62      	ldr	r2, [pc, #392]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f7a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f7aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f7ac:	e01c      	b.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7b2:	3308      	adds	r3, #8
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f002 fab8 	bl	8011d2c <RCCEx_PLL2_Config>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f7c2:	e011      	b.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7c8:	3328      	adds	r3, #40	@ 0x28
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f002 fb5f 	bl	8011e90 <RCCEx_PLL3_Config>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f7d8:	e006      	b.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f7e0:	e002      	b.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f7e2:	bf00      	nop
 800f7e4:	e000      	b.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f7e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d10a      	bne.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f7f0:	4b4f      	ldr	r3, [pc, #316]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f7f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7f4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800f7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7fe:	4a4c      	ldr	r2, [pc, #304]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f800:	430b      	orrs	r3, r1
 800f802:	6513      	str	r3, [r2, #80]	@ 0x50
 800f804:	e003      	b.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f80a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800f81a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800f81e:	2300      	movs	r3, #0
 800f820:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800f824:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800f828:	460b      	mov	r3, r1
 800f82a:	4313      	orrs	r3, r2
 800f82c:	d053      	beq.n	800f8d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f832:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f836:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f83a:	d035      	beq.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f83c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f840:	d82e      	bhi.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f842:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f846:	d031      	beq.n	800f8ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f848:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f84c:	d828      	bhi.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f84e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f852:	d01a      	beq.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f858:	d822      	bhi.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d003      	beq.n	800f866 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f85e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f862:	d007      	beq.n	800f874 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f864:	e01c      	b.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f866:	4b32      	ldr	r3, [pc, #200]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f86a:	4a31      	ldr	r2, [pc, #196]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f86c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f872:	e01c      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f878:	3308      	adds	r3, #8
 800f87a:	2100      	movs	r1, #0
 800f87c:	4618      	mov	r0, r3
 800f87e:	f002 fa55 	bl	8011d2c <RCCEx_PLL2_Config>
 800f882:	4603      	mov	r3, r0
 800f884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f888:	e011      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f88e:	3328      	adds	r3, #40	@ 0x28
 800f890:	2100      	movs	r1, #0
 800f892:	4618      	mov	r0, r3
 800f894:	f002 fafc 	bl	8011e90 <RCCEx_PLL3_Config>
 800f898:	4603      	mov	r3, r0
 800f89a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f89e:	e006      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f8a6:	e002      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f8a8:	bf00      	nop
 800f8aa:	e000      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f8ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d10b      	bne.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f8b6:	4b1e      	ldr	r3, [pc, #120]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f8b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8ba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800f8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f8c6:	4a1a      	ldr	r2, [pc, #104]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f8c8:	430b      	orrs	r3, r1
 800f8ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800f8cc:	e003      	b.n	800f8d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f8d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800f8e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800f8ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	d056      	beq.n	800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f8fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f902:	d038      	beq.n	800f976 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f908:	d831      	bhi.n	800f96e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f90a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f90e:	d034      	beq.n	800f97a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f910:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f914:	d82b      	bhi.n	800f96e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f916:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f91a:	d01d      	beq.n	800f958 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f91c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f920:	d825      	bhi.n	800f96e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f926:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f92a:	d00a      	beq.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f92c:	e01f      	b.n	800f96e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f92e:	bf00      	nop
 800f930:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f934:	4ba2      	ldr	r3, [pc, #648]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f938:	4aa1      	ldr	r2, [pc, #644]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f93a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f93e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f940:	e01c      	b.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f946:	3308      	adds	r3, #8
 800f948:	2100      	movs	r1, #0
 800f94a:	4618      	mov	r0, r3
 800f94c:	f002 f9ee 	bl	8011d2c <RCCEx_PLL2_Config>
 800f950:	4603      	mov	r3, r0
 800f952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f956:	e011      	b.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f95c:	3328      	adds	r3, #40	@ 0x28
 800f95e:	2100      	movs	r1, #0
 800f960:	4618      	mov	r0, r3
 800f962:	f002 fa95 	bl	8011e90 <RCCEx_PLL3_Config>
 800f966:	4603      	mov	r3, r0
 800f968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f96c:	e006      	b.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f96e:	2301      	movs	r3, #1
 800f970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f974:	e002      	b.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f976:	bf00      	nop
 800f978:	e000      	b.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f97a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f97c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f980:	2b00      	cmp	r3, #0
 800f982:	d10b      	bne.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f984:	4b8e      	ldr	r3, [pc, #568]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f988:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800f98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f990:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f994:	4a8a      	ldr	r2, [pc, #552]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f996:	430b      	orrs	r3, r1
 800f998:	6593      	str	r3, [r2, #88]	@ 0x58
 800f99a:	e003      	b.n	800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f99c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f9a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800f9b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f9ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800f9be:	460b      	mov	r3, r1
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	d03a      	beq.n	800fa3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9ca:	2b30      	cmp	r3, #48	@ 0x30
 800f9cc:	d01f      	beq.n	800fa0e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f9ce:	2b30      	cmp	r3, #48	@ 0x30
 800f9d0:	d819      	bhi.n	800fa06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f9d2:	2b20      	cmp	r3, #32
 800f9d4:	d00c      	beq.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f9d6:	2b20      	cmp	r3, #32
 800f9d8:	d815      	bhi.n	800fa06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d019      	beq.n	800fa12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f9de:	2b10      	cmp	r3, #16
 800f9e0:	d111      	bne.n	800fa06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f9e2:	4b77      	ldr	r3, [pc, #476]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9e6:	4a76      	ldr	r2, [pc, #472]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f9e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f9ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f9ee:	e011      	b.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9f4:	3308      	adds	r3, #8
 800f9f6:	2102      	movs	r1, #2
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f002 f997 	bl	8011d2c <RCCEx_PLL2_Config>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800fa04:	e006      	b.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fa06:	2301      	movs	r3, #1
 800fa08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fa0c:	e002      	b.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800fa0e:	bf00      	nop
 800fa10:	e000      	b.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800fa12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10a      	bne.n	800fa32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800fa1c:	4b68      	ldr	r3, [pc, #416]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800fa24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa2a:	4a65      	ldr	r2, [pc, #404]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa2c:	430b      	orrs	r3, r1
 800fa2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fa30:	e003      	b.n	800fa3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800fa3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800fa46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800fa50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800fa54:	460b      	mov	r3, r1
 800fa56:	4313      	orrs	r3, r2
 800fa58:	d051      	beq.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800fa5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fa64:	d035      	beq.n	800fad2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800fa66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fa6a:	d82e      	bhi.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fa6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fa70:	d031      	beq.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800fa72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fa76:	d828      	bhi.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fa78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa7c:	d01a      	beq.n	800fab4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800fa7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa82:	d822      	bhi.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d003      	beq.n	800fa90 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800fa88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa8c:	d007      	beq.n	800fa9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800fa8e:	e01c      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa90:	4b4b      	ldr	r3, [pc, #300]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa94:	4a4a      	ldr	r2, [pc, #296]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fa9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fa9c:	e01c      	b.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800faa2:	3308      	adds	r3, #8
 800faa4:	2100      	movs	r1, #0
 800faa6:	4618      	mov	r0, r3
 800faa8:	f002 f940 	bl	8011d2c <RCCEx_PLL2_Config>
 800faac:	4603      	mov	r3, r0
 800faae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fab2:	e011      	b.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fab8:	3328      	adds	r3, #40	@ 0x28
 800faba:	2100      	movs	r1, #0
 800fabc:	4618      	mov	r0, r3
 800fabe:	f002 f9e7 	bl	8011e90 <RCCEx_PLL3_Config>
 800fac2:	4603      	mov	r3, r0
 800fac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fac8:	e006      	b.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800faca:	2301      	movs	r3, #1
 800facc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fad0:	e002      	b.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800fad2:	bf00      	nop
 800fad4:	e000      	b.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800fad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d10a      	bne.n	800faf6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800fae0:	4b37      	ldr	r3, [pc, #220]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fae4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800fae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800faec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800faee:	4a34      	ldr	r2, [pc, #208]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800faf0:	430b      	orrs	r3, r1
 800faf2:	6513      	str	r3, [r2, #80]	@ 0x50
 800faf4:	e003      	b.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800faf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fafa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800fafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800fb0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fb0e:	2300      	movs	r3, #0
 800fb10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800fb14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4313      	orrs	r3, r2
 800fb1c:	d056      	beq.n	800fbcc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800fb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fb28:	d033      	beq.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800fb2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fb2e:	d82c      	bhi.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fb30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fb34:	d02f      	beq.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800fb36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fb3a:	d826      	bhi.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fb3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fb40:	d02b      	beq.n	800fb9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800fb42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fb46:	d820      	bhi.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fb48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb4c:	d012      	beq.n	800fb74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800fb4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb52:	d81a      	bhi.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d022      	beq.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800fb58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb5c:	d115      	bne.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb62:	3308      	adds	r3, #8
 800fb64:	2101      	movs	r1, #1
 800fb66:	4618      	mov	r0, r3
 800fb68:	f002 f8e0 	bl	8011d2c <RCCEx_PLL2_Config>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fb72:	e015      	b.n	800fba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb78:	3328      	adds	r3, #40	@ 0x28
 800fb7a:	2101      	movs	r1, #1
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f002 f987 	bl	8011e90 <RCCEx_PLL3_Config>
 800fb82:	4603      	mov	r3, r0
 800fb84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fb88:	e00a      	b.n	800fba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fb90:	e006      	b.n	800fba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fb92:	bf00      	nop
 800fb94:	e004      	b.n	800fba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fb96:	bf00      	nop
 800fb98:	e002      	b.n	800fba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fb9a:	bf00      	nop
 800fb9c:	e000      	b.n	800fba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fb9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10d      	bne.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800fba8:	4b05      	ldr	r3, [pc, #20]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fbaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800fbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbb6:	4a02      	ldr	r2, [pc, #8]	@ (800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fbb8:	430b      	orrs	r3, r1
 800fbba:	6513      	str	r3, [r2, #80]	@ 0x50
 800fbbc:	e006      	b.n	800fbcc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800fbbe:	bf00      	nop
 800fbc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fbc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800fbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800fbd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fbe2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	d055      	beq.n	800fc98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800fbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fbf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fbf8:	d033      	beq.n	800fc62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800fbfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fbfe:	d82c      	bhi.n	800fc5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fc00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc04:	d02f      	beq.n	800fc66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800fc06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc0a:	d826      	bhi.n	800fc5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fc0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc10:	d02b      	beq.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800fc12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc16:	d820      	bhi.n	800fc5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fc18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc1c:	d012      	beq.n	800fc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800fc1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc22:	d81a      	bhi.n	800fc5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d022      	beq.n	800fc6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800fc28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc2c:	d115      	bne.n	800fc5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fc2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc32:	3308      	adds	r3, #8
 800fc34:	2101      	movs	r1, #1
 800fc36:	4618      	mov	r0, r3
 800fc38:	f002 f878 	bl	8011d2c <RCCEx_PLL2_Config>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fc42:	e015      	b.n	800fc70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fc44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc48:	3328      	adds	r3, #40	@ 0x28
 800fc4a:	2101      	movs	r1, #1
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f002 f91f 	bl	8011e90 <RCCEx_PLL3_Config>
 800fc52:	4603      	mov	r3, r0
 800fc54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fc58:	e00a      	b.n	800fc70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fc60:	e006      	b.n	800fc70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fc62:	bf00      	nop
 800fc64:	e004      	b.n	800fc70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fc66:	bf00      	nop
 800fc68:	e002      	b.n	800fc70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fc6a:	bf00      	nop
 800fc6c:	e000      	b.n	800fc70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fc6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10b      	bne.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800fc78:	4ba3      	ldr	r3, [pc, #652]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc7c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800fc80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fc88:	4a9f      	ldr	r2, [pc, #636]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc8a:	430b      	orrs	r3, r1
 800fc8c:	6593      	str	r3, [r2, #88]	@ 0x58
 800fc8e:	e003      	b.n	800fc98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800fc98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800fca4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800fcae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	d037      	beq.n	800fd28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800fcb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcc2:	d00e      	beq.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800fcc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcc8:	d816      	bhi.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d018      	beq.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800fcce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcd2:	d111      	bne.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fcd4:	4b8c      	ldr	r3, [pc, #560]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd8:	4a8b      	ldr	r2, [pc, #556]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fcde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fce0:	e00f      	b.n	800fd02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fce6:	3308      	adds	r3, #8
 800fce8:	2101      	movs	r1, #1
 800fcea:	4618      	mov	r0, r3
 800fcec:	f002 f81e 	bl	8011d2c <RCCEx_PLL2_Config>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fcf6:	e004      	b.n	800fd02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fcfe:	e000      	b.n	800fd02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800fd00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d10a      	bne.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800fd0a:	4b7f      	ldr	r3, [pc, #508]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800fd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd18:	4a7b      	ldr	r2, [pc, #492]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd1a:	430b      	orrs	r3, r1
 800fd1c:	6513      	str	r3, [r2, #80]	@ 0x50
 800fd1e:	e003      	b.n	800fd28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd30:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800fd34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fd38:	2300      	movs	r3, #0
 800fd3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fd3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800fd42:	460b      	mov	r3, r1
 800fd44:	4313      	orrs	r3, r2
 800fd46:	d039      	beq.n	800fdbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800fd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d81c      	bhi.n	800fd8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800fd52:	a201      	add	r2, pc, #4	@ (adr r2, 800fd58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800fd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd58:	0800fd95 	.word	0x0800fd95
 800fd5c:	0800fd69 	.word	0x0800fd69
 800fd60:	0800fd77 	.word	0x0800fd77
 800fd64:	0800fd95 	.word	0x0800fd95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd68:	4b67      	ldr	r3, [pc, #412]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd6c:	4a66      	ldr	r2, [pc, #408]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fd72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fd74:	e00f      	b.n	800fd96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd7a:	3308      	adds	r3, #8
 800fd7c:	2102      	movs	r1, #2
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f001 ffd4 	bl	8011d2c <RCCEx_PLL2_Config>
 800fd84:	4603      	mov	r3, r0
 800fd86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fd8a:	e004      	b.n	800fd96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fd92:	e000      	b.n	800fd96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800fd94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d10a      	bne.n	800fdb4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fd9e:	4b5a      	ldr	r3, [pc, #360]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fda0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fda2:	f023 0103 	bic.w	r1, r3, #3
 800fda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fdac:	4a56      	ldr	r2, [pc, #344]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fdae:	430b      	orrs	r3, r1
 800fdb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fdb2:	e003      	b.n	800fdbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fdb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fdbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800fdc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fdcc:	2300      	movs	r3, #0
 800fdce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800fdd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800fdd6:	460b      	mov	r3, r1
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	f000 809f 	beq.w	800ff1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fdde:	4b4b      	ldr	r3, [pc, #300]	@ (800ff0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a4a      	ldr	r2, [pc, #296]	@ (800ff0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fde4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fde8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fdea:	f7f3 fc99 	bl	8003720 <HAL_GetTick>
 800fdee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fdf2:	e00b      	b.n	800fe0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fdf4:	f7f3 fc94 	bl	8003720 <HAL_GetTick>
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	2b64      	cmp	r3, #100	@ 0x64
 800fe02:	d903      	bls.n	800fe0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800fe04:	2303      	movs	r3, #3
 800fe06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fe0a:	e005      	b.n	800fe18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fe0c:	4b3f      	ldr	r3, [pc, #252]	@ (800ff0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d0ed      	beq.n	800fdf4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800fe18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d179      	bne.n	800ff14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fe20:	4b39      	ldr	r3, [pc, #228]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fe24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fe2c:	4053      	eors	r3, r2
 800fe2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d015      	beq.n	800fe62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fe36:	4b34      	ldr	r3, [pc, #208]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fe3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fe42:	4b31      	ldr	r3, [pc, #196]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe46:	4a30      	ldr	r2, [pc, #192]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fe4c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fe4e:	4b2e      	ldr	r3, [pc, #184]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe52:	4a2d      	ldr	r2, [pc, #180]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fe58:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800fe5a:	4a2b      	ldr	r2, [pc, #172]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe60:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fe62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fe6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe6e:	d118      	bne.n	800fea2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe70:	f7f3 fc56 	bl	8003720 <HAL_GetTick>
 800fe74:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fe78:	e00d      	b.n	800fe96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fe7a:	f7f3 fc51 	bl	8003720 <HAL_GetTick>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800fe84:	1ad2      	subs	r2, r2, r3
 800fe86:	f241 3388 	movw	r3, #5000	@ 0x1388
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d903      	bls.n	800fe96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800fe8e:	2303      	movs	r3, #3
 800fe90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800fe94:	e005      	b.n	800fea2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fe96:	4b1c      	ldr	r3, [pc, #112]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe9a:	f003 0302 	and.w	r3, r3, #2
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d0eb      	beq.n	800fe7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800fea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d129      	bne.n	800fefe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800feaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800feae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800feb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800feb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800feba:	d10e      	bne.n	800feda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800febc:	4b12      	ldr	r3, [pc, #72]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800fec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fecc:	091a      	lsrs	r2, r3, #4
 800fece:	4b10      	ldr	r3, [pc, #64]	@ (800ff10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800fed0:	4013      	ands	r3, r2
 800fed2:	4a0d      	ldr	r2, [pc, #52]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fed4:	430b      	orrs	r3, r1
 800fed6:	6113      	str	r3, [r2, #16]
 800fed8:	e005      	b.n	800fee6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800feda:	4b0b      	ldr	r3, [pc, #44]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fedc:	691b      	ldr	r3, [r3, #16]
 800fede:	4a0a      	ldr	r2, [pc, #40]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fee0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fee4:	6113      	str	r3, [r2, #16]
 800fee6:	4b08      	ldr	r3, [pc, #32]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fee8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800feea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800feee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fef6:	4a04      	ldr	r2, [pc, #16]	@ (800ff08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fef8:	430b      	orrs	r3, r1
 800fefa:	6713      	str	r3, [r2, #112]	@ 0x70
 800fefc:	e00e      	b.n	800ff1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fefe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ff06:	e009      	b.n	800ff1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ff08:	58024400 	.word	0x58024400
 800ff0c:	58024800 	.word	0x58024800
 800ff10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ff1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff24:	f002 0301 	and.w	r3, r2, #1
 800ff28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ff32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ff36:	460b      	mov	r3, r1
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	f000 8089 	beq.w	8010050 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ff3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff44:	2b28      	cmp	r3, #40	@ 0x28
 800ff46:	d86b      	bhi.n	8010020 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ff48:	a201      	add	r2, pc, #4	@ (adr r2, 800ff50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ff4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4e:	bf00      	nop
 800ff50:	08010029 	.word	0x08010029
 800ff54:	08010021 	.word	0x08010021
 800ff58:	08010021 	.word	0x08010021
 800ff5c:	08010021 	.word	0x08010021
 800ff60:	08010021 	.word	0x08010021
 800ff64:	08010021 	.word	0x08010021
 800ff68:	08010021 	.word	0x08010021
 800ff6c:	08010021 	.word	0x08010021
 800ff70:	0800fff5 	.word	0x0800fff5
 800ff74:	08010021 	.word	0x08010021
 800ff78:	08010021 	.word	0x08010021
 800ff7c:	08010021 	.word	0x08010021
 800ff80:	08010021 	.word	0x08010021
 800ff84:	08010021 	.word	0x08010021
 800ff88:	08010021 	.word	0x08010021
 800ff8c:	08010021 	.word	0x08010021
 800ff90:	0801000b 	.word	0x0801000b
 800ff94:	08010021 	.word	0x08010021
 800ff98:	08010021 	.word	0x08010021
 800ff9c:	08010021 	.word	0x08010021
 800ffa0:	08010021 	.word	0x08010021
 800ffa4:	08010021 	.word	0x08010021
 800ffa8:	08010021 	.word	0x08010021
 800ffac:	08010021 	.word	0x08010021
 800ffb0:	08010029 	.word	0x08010029
 800ffb4:	08010021 	.word	0x08010021
 800ffb8:	08010021 	.word	0x08010021
 800ffbc:	08010021 	.word	0x08010021
 800ffc0:	08010021 	.word	0x08010021
 800ffc4:	08010021 	.word	0x08010021
 800ffc8:	08010021 	.word	0x08010021
 800ffcc:	08010021 	.word	0x08010021
 800ffd0:	08010029 	.word	0x08010029
 800ffd4:	08010021 	.word	0x08010021
 800ffd8:	08010021 	.word	0x08010021
 800ffdc:	08010021 	.word	0x08010021
 800ffe0:	08010021 	.word	0x08010021
 800ffe4:	08010021 	.word	0x08010021
 800ffe8:	08010021 	.word	0x08010021
 800ffec:	08010021 	.word	0x08010021
 800fff0:	08010029 	.word	0x08010029
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fff8:	3308      	adds	r3, #8
 800fffa:	2101      	movs	r1, #1
 800fffc:	4618      	mov	r0, r3
 800fffe:	f001 fe95 	bl	8011d2c <RCCEx_PLL2_Config>
 8010002:	4603      	mov	r3, r0
 8010004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010008:	e00f      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801000a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801000e:	3328      	adds	r3, #40	@ 0x28
 8010010:	2101      	movs	r1, #1
 8010012:	4618      	mov	r0, r3
 8010014:	f001 ff3c 	bl	8011e90 <RCCEx_PLL3_Config>
 8010018:	4603      	mov	r3, r0
 801001a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801001e:	e004      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010020:	2301      	movs	r3, #1
 8010022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010026:	e000      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8010028:	bf00      	nop
    }

    if (ret == HAL_OK)
 801002a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10a      	bne.n	8010048 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010032:	4bbf      	ldr	r3, [pc, #764]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010036:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801003a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801003e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010040:	4abb      	ldr	r2, [pc, #748]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010042:	430b      	orrs	r3, r1
 8010044:	6553      	str	r3, [r2, #84]	@ 0x54
 8010046:	e003      	b.n	8010050 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801004c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010058:	f002 0302 	and.w	r3, r2, #2
 801005c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010060:	2300      	movs	r3, #0
 8010062:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010066:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801006a:	460b      	mov	r3, r1
 801006c:	4313      	orrs	r3, r2
 801006e:	d041      	beq.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010076:	2b05      	cmp	r3, #5
 8010078:	d824      	bhi.n	80100c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801007a:	a201      	add	r2, pc, #4	@ (adr r2, 8010080 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801007c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010080:	080100cd 	.word	0x080100cd
 8010084:	08010099 	.word	0x08010099
 8010088:	080100af 	.word	0x080100af
 801008c:	080100cd 	.word	0x080100cd
 8010090:	080100cd 	.word	0x080100cd
 8010094:	080100cd 	.word	0x080100cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801009c:	3308      	adds	r3, #8
 801009e:	2101      	movs	r1, #1
 80100a0:	4618      	mov	r0, r3
 80100a2:	f001 fe43 	bl	8011d2c <RCCEx_PLL2_Config>
 80100a6:	4603      	mov	r3, r0
 80100a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80100ac:	e00f      	b.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80100ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100b2:	3328      	adds	r3, #40	@ 0x28
 80100b4:	2101      	movs	r1, #1
 80100b6:	4618      	mov	r0, r3
 80100b8:	f001 feea 	bl	8011e90 <RCCEx_PLL3_Config>
 80100bc:	4603      	mov	r3, r0
 80100be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80100c2:	e004      	b.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80100c4:	2301      	movs	r3, #1
 80100c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80100ca:	e000      	b.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80100cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d10a      	bne.n	80100ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80100d6:	4b96      	ldr	r3, [pc, #600]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80100d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100da:	f023 0107 	bic.w	r1, r3, #7
 80100de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100e4:	4a92      	ldr	r2, [pc, #584]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80100e6:	430b      	orrs	r3, r1
 80100e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80100ea:	e003      	b.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80100f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80100f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	f002 0304 	and.w	r3, r2, #4
 8010100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010104:	2300      	movs	r3, #0
 8010106:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801010a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801010e:	460b      	mov	r3, r1
 8010110:	4313      	orrs	r3, r2
 8010112:	d044      	beq.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801011c:	2b05      	cmp	r3, #5
 801011e:	d825      	bhi.n	801016c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8010120:	a201      	add	r2, pc, #4	@ (adr r2, 8010128 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8010122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010126:	bf00      	nop
 8010128:	08010175 	.word	0x08010175
 801012c:	08010141 	.word	0x08010141
 8010130:	08010157 	.word	0x08010157
 8010134:	08010175 	.word	0x08010175
 8010138:	08010175 	.word	0x08010175
 801013c:	08010175 	.word	0x08010175
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010144:	3308      	adds	r3, #8
 8010146:	2101      	movs	r1, #1
 8010148:	4618      	mov	r0, r3
 801014a:	f001 fdef 	bl	8011d2c <RCCEx_PLL2_Config>
 801014e:	4603      	mov	r3, r0
 8010150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010154:	e00f      	b.n	8010176 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801015a:	3328      	adds	r3, #40	@ 0x28
 801015c:	2101      	movs	r1, #1
 801015e:	4618      	mov	r0, r3
 8010160:	f001 fe96 	bl	8011e90 <RCCEx_PLL3_Config>
 8010164:	4603      	mov	r3, r0
 8010166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801016a:	e004      	b.n	8010176 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801016c:	2301      	movs	r3, #1
 801016e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010172:	e000      	b.n	8010176 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8010174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801017a:	2b00      	cmp	r3, #0
 801017c:	d10b      	bne.n	8010196 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801017e:	4b6c      	ldr	r3, [pc, #432]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010182:	f023 0107 	bic.w	r1, r3, #7
 8010186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801018a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801018e:	4a68      	ldr	r2, [pc, #416]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010190:	430b      	orrs	r3, r1
 8010192:	6593      	str	r3, [r2, #88]	@ 0x58
 8010194:	e003      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801019a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801019e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a6:	f002 0320 	and.w	r3, r2, #32
 80101aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80101ae:	2300      	movs	r3, #0
 80101b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80101b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80101b8:	460b      	mov	r3, r1
 80101ba:	4313      	orrs	r3, r2
 80101bc:	d055      	beq.n	801026a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80101be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80101ca:	d033      	beq.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80101cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80101d0:	d82c      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80101d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101d6:	d02f      	beq.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80101d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101dc:	d826      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80101de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80101e2:	d02b      	beq.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80101e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80101e8:	d820      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80101ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101ee:	d012      	beq.n	8010216 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80101f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101f4:	d81a      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d022      	beq.n	8010240 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80101fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80101fe:	d115      	bne.n	801022c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010204:	3308      	adds	r3, #8
 8010206:	2100      	movs	r1, #0
 8010208:	4618      	mov	r0, r3
 801020a:	f001 fd8f 	bl	8011d2c <RCCEx_PLL2_Config>
 801020e:	4603      	mov	r3, r0
 8010210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010214:	e015      	b.n	8010242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801021a:	3328      	adds	r3, #40	@ 0x28
 801021c:	2102      	movs	r1, #2
 801021e:	4618      	mov	r0, r3
 8010220:	f001 fe36 	bl	8011e90 <RCCEx_PLL3_Config>
 8010224:	4603      	mov	r3, r0
 8010226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801022a:	e00a      	b.n	8010242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801022c:	2301      	movs	r3, #1
 801022e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010232:	e006      	b.n	8010242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010234:	bf00      	nop
 8010236:	e004      	b.n	8010242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010238:	bf00      	nop
 801023a:	e002      	b.n	8010242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801023c:	bf00      	nop
 801023e:	e000      	b.n	8010242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10b      	bne.n	8010262 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801024a:	4b39      	ldr	r3, [pc, #228]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801024c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801024e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8010252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801025a:	4a35      	ldr	r2, [pc, #212]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801025c:	430b      	orrs	r3, r1
 801025e:	6553      	str	r3, [r2, #84]	@ 0x54
 8010260:	e003      	b.n	801026a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801026a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010272:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8010276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801027a:	2300      	movs	r3, #0
 801027c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010280:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8010284:	460b      	mov	r3, r1
 8010286:	4313      	orrs	r3, r2
 8010288:	d058      	beq.n	801033c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801028a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801028e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010292:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8010296:	d033      	beq.n	8010300 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010298:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801029c:	d82c      	bhi.n	80102f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801029e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102a2:	d02f      	beq.n	8010304 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80102a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102a8:	d826      	bhi.n	80102f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80102aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80102ae:	d02b      	beq.n	8010308 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80102b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80102b4:	d820      	bhi.n	80102f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80102b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102ba:	d012      	beq.n	80102e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80102bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102c0:	d81a      	bhi.n	80102f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d022      	beq.n	801030c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80102c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102ca:	d115      	bne.n	80102f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80102cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102d0:	3308      	adds	r3, #8
 80102d2:	2100      	movs	r1, #0
 80102d4:	4618      	mov	r0, r3
 80102d6:	f001 fd29 	bl	8011d2c <RCCEx_PLL2_Config>
 80102da:	4603      	mov	r3, r0
 80102dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80102e0:	e015      	b.n	801030e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80102e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102e6:	3328      	adds	r3, #40	@ 0x28
 80102e8:	2102      	movs	r1, #2
 80102ea:	4618      	mov	r0, r3
 80102ec:	f001 fdd0 	bl	8011e90 <RCCEx_PLL3_Config>
 80102f0:	4603      	mov	r3, r0
 80102f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80102f6:	e00a      	b.n	801030e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80102f8:	2301      	movs	r3, #1
 80102fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80102fe:	e006      	b.n	801030e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010300:	bf00      	nop
 8010302:	e004      	b.n	801030e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010304:	bf00      	nop
 8010306:	e002      	b.n	801030e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010308:	bf00      	nop
 801030a:	e000      	b.n	801030e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801030c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801030e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10e      	bne.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010316:	4b06      	ldr	r3, [pc, #24]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801031a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801031e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010326:	4a02      	ldr	r2, [pc, #8]	@ (8010330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010328:	430b      	orrs	r3, r1
 801032a:	6593      	str	r3, [r2, #88]	@ 0x58
 801032c:	e006      	b.n	801033c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801032e:	bf00      	nop
 8010330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801033c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010344:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8010348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801034c:	2300      	movs	r3, #0
 801034e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010352:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8010356:	460b      	mov	r3, r1
 8010358:	4313      	orrs	r3, r2
 801035a:	d055      	beq.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801035c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010360:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010364:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8010368:	d033      	beq.n	80103d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801036a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801036e:	d82c      	bhi.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010374:	d02f      	beq.n	80103d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8010376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801037a:	d826      	bhi.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801037c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010380:	d02b      	beq.n	80103da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8010382:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010386:	d820      	bhi.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801038c:	d012      	beq.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801038e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010392:	d81a      	bhi.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010394:	2b00      	cmp	r3, #0
 8010396:	d022      	beq.n	80103de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8010398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801039c:	d115      	bne.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801039e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103a2:	3308      	adds	r3, #8
 80103a4:	2100      	movs	r1, #0
 80103a6:	4618      	mov	r0, r3
 80103a8:	f001 fcc0 	bl	8011d2c <RCCEx_PLL2_Config>
 80103ac:	4603      	mov	r3, r0
 80103ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80103b2:	e015      	b.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80103b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103b8:	3328      	adds	r3, #40	@ 0x28
 80103ba:	2102      	movs	r1, #2
 80103bc:	4618      	mov	r0, r3
 80103be:	f001 fd67 	bl	8011e90 <RCCEx_PLL3_Config>
 80103c2:	4603      	mov	r3, r0
 80103c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80103c8:	e00a      	b.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80103ca:	2301      	movs	r3, #1
 80103cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80103d0:	e006      	b.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80103d2:	bf00      	nop
 80103d4:	e004      	b.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80103d6:	bf00      	nop
 80103d8:	e002      	b.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80103da:	bf00      	nop
 80103dc:	e000      	b.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80103de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80103e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d10b      	bne.n	8010400 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80103e8:	4ba1      	ldr	r3, [pc, #644]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80103ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80103f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80103f8:	4a9d      	ldr	r2, [pc, #628]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80103fa:	430b      	orrs	r3, r1
 80103fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80103fe:	e003      	b.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801040c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010410:	f002 0308 	and.w	r3, r2, #8
 8010414:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010418:	2300      	movs	r3, #0
 801041a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801041e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8010422:	460b      	mov	r3, r1
 8010424:	4313      	orrs	r3, r2
 8010426:	d01e      	beq.n	8010466 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801042c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010434:	d10c      	bne.n	8010450 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801043a:	3328      	adds	r3, #40	@ 0x28
 801043c:	2102      	movs	r1, #2
 801043e:	4618      	mov	r0, r3
 8010440:	f001 fd26 	bl	8011e90 <RCCEx_PLL3_Config>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d002      	beq.n	8010450 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010450:	4b87      	ldr	r3, [pc, #540]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010454:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801045c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010460:	4a83      	ldr	r2, [pc, #524]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010462:	430b      	orrs	r3, r1
 8010464:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046e:	f002 0310 	and.w	r3, r2, #16
 8010472:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010476:	2300      	movs	r3, #0
 8010478:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801047c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8010480:	460b      	mov	r3, r1
 8010482:	4313      	orrs	r3, r2
 8010484:	d01e      	beq.n	80104c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8010486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801048a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801048e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010492:	d10c      	bne.n	80104ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010498:	3328      	adds	r3, #40	@ 0x28
 801049a:	2102      	movs	r1, #2
 801049c:	4618      	mov	r0, r3
 801049e:	f001 fcf7 	bl	8011e90 <RCCEx_PLL3_Config>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d002      	beq.n	80104ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80104a8:	2301      	movs	r3, #1
 80104aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80104ae:	4b70      	ldr	r3, [pc, #448]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80104b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80104b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80104be:	4a6c      	ldr	r2, [pc, #432]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80104c0:	430b      	orrs	r3, r1
 80104c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80104c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80104d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80104d4:	2300      	movs	r3, #0
 80104d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80104da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80104de:	460b      	mov	r3, r1
 80104e0:	4313      	orrs	r3, r2
 80104e2:	d03e      	beq.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80104e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80104ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80104f0:	d022      	beq.n	8010538 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80104f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80104f6:	d81b      	bhi.n	8010530 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d003      	beq.n	8010504 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80104fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010500:	d00b      	beq.n	801051a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8010502:	e015      	b.n	8010530 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010508:	3308      	adds	r3, #8
 801050a:	2100      	movs	r1, #0
 801050c:	4618      	mov	r0, r3
 801050e:	f001 fc0d 	bl	8011d2c <RCCEx_PLL2_Config>
 8010512:	4603      	mov	r3, r0
 8010514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010518:	e00f      	b.n	801053a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801051a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801051e:	3328      	adds	r3, #40	@ 0x28
 8010520:	2102      	movs	r1, #2
 8010522:	4618      	mov	r0, r3
 8010524:	f001 fcb4 	bl	8011e90 <RCCEx_PLL3_Config>
 8010528:	4603      	mov	r3, r0
 801052a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801052e:	e004      	b.n	801053a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010530:	2301      	movs	r3, #1
 8010532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010536:	e000      	b.n	801053a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8010538:	bf00      	nop
    }

    if (ret == HAL_OK)
 801053a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801053e:	2b00      	cmp	r3, #0
 8010540:	d10b      	bne.n	801055a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010542:	4b4b      	ldr	r3, [pc, #300]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010546:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801054a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801054e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010552:	4a47      	ldr	r2, [pc, #284]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010554:	430b      	orrs	r3, r1
 8010556:	6593      	str	r3, [r2, #88]	@ 0x58
 8010558:	e003      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801055a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801055e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801056e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010570:	2300      	movs	r3, #0
 8010572:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010574:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8010578:	460b      	mov	r3, r1
 801057a:	4313      	orrs	r3, r2
 801057c:	d03b      	beq.n	80105f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801057e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010586:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801058a:	d01f      	beq.n	80105cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801058c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010590:	d818      	bhi.n	80105c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8010592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010596:	d003      	beq.n	80105a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8010598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801059c:	d007      	beq.n	80105ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801059e:	e011      	b.n	80105c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105a0:	4b33      	ldr	r3, [pc, #204]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80105a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105a4:	4a32      	ldr	r2, [pc, #200]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80105a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80105aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80105ac:	e00f      	b.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80105ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105b2:	3328      	adds	r3, #40	@ 0x28
 80105b4:	2101      	movs	r1, #1
 80105b6:	4618      	mov	r0, r3
 80105b8:	f001 fc6a 	bl	8011e90 <RCCEx_PLL3_Config>
 80105bc:	4603      	mov	r3, r0
 80105be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80105c2:	e004      	b.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80105c4:	2301      	movs	r3, #1
 80105c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80105ca:	e000      	b.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80105cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80105ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d10b      	bne.n	80105ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80105d6:	4b26      	ldr	r3, [pc, #152]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80105d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80105de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105e6:	4a22      	ldr	r2, [pc, #136]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80105e8:	430b      	orrs	r3, r1
 80105ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80105ec:	e003      	b.n	80105f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80105f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80105f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8010602:	673b      	str	r3, [r7, #112]	@ 0x70
 8010604:	2300      	movs	r3, #0
 8010606:	677b      	str	r3, [r7, #116]	@ 0x74
 8010608:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801060c:	460b      	mov	r3, r1
 801060e:	4313      	orrs	r3, r2
 8010610:	d034      	beq.n	801067c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8010612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010618:	2b00      	cmp	r3, #0
 801061a:	d003      	beq.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801061c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010620:	d007      	beq.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8010622:	e011      	b.n	8010648 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010624:	4b12      	ldr	r3, [pc, #72]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010628:	4a11      	ldr	r2, [pc, #68]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801062a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801062e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010630:	e00e      	b.n	8010650 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010636:	3308      	adds	r3, #8
 8010638:	2102      	movs	r1, #2
 801063a:	4618      	mov	r0, r3
 801063c:	f001 fb76 	bl	8011d2c <RCCEx_PLL2_Config>
 8010640:	4603      	mov	r3, r0
 8010642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010646:	e003      	b.n	8010650 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8010648:	2301      	movs	r3, #1
 801064a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801064e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10d      	bne.n	8010674 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010658:	4b05      	ldr	r3, [pc, #20]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801065a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801065c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010666:	4a02      	ldr	r2, [pc, #8]	@ (8010670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010668:	430b      	orrs	r3, r1
 801066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801066c:	e006      	b.n	801067c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801066e:	bf00      	nop
 8010670:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010678:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801067c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010684:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8010688:	66bb      	str	r3, [r7, #104]	@ 0x68
 801068a:	2300      	movs	r3, #0
 801068c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801068e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8010692:	460b      	mov	r3, r1
 8010694:	4313      	orrs	r3, r2
 8010696:	d00c      	beq.n	80106b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801069c:	3328      	adds	r3, #40	@ 0x28
 801069e:	2102      	movs	r1, #2
 80106a0:	4618      	mov	r0, r3
 80106a2:	f001 fbf5 	bl	8011e90 <RCCEx_PLL3_Config>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80106ac:	2301      	movs	r3, #1
 80106ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80106b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80106be:	663b      	str	r3, [r7, #96]	@ 0x60
 80106c0:	2300      	movs	r3, #0
 80106c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80106c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80106c8:	460b      	mov	r3, r1
 80106ca:	4313      	orrs	r3, r2
 80106cc:	d038      	beq.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80106ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80106da:	d018      	beq.n	801070e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80106dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80106e0:	d811      	bhi.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80106e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80106e6:	d014      	beq.n	8010712 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80106e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80106ec:	d80b      	bhi.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d011      	beq.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80106f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106f6:	d106      	bne.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80106f8:	4bc3      	ldr	r3, [pc, #780]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80106fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106fc:	4ac2      	ldr	r2, [pc, #776]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80106fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8010704:	e008      	b.n	8010718 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010706:	2301      	movs	r3, #1
 8010708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801070c:	e004      	b.n	8010718 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801070e:	bf00      	nop
 8010710:	e002      	b.n	8010718 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010712:	bf00      	nop
 8010714:	e000      	b.n	8010718 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10b      	bne.n	8010738 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010720:	4bb9      	ldr	r3, [pc, #740]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010724:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801072c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010730:	4ab5      	ldr	r2, [pc, #724]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010732:	430b      	orrs	r3, r1
 8010734:	6553      	str	r3, [r2, #84]	@ 0x54
 8010736:	e003      	b.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801073c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010748:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801074c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801074e:	2300      	movs	r3, #0
 8010750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010752:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8010756:	460b      	mov	r3, r1
 8010758:	4313      	orrs	r3, r2
 801075a:	d009      	beq.n	8010770 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801075c:	4baa      	ldr	r3, [pc, #680]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801075e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010760:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801076a:	4aa7      	ldr	r2, [pc, #668]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801076c:	430b      	orrs	r3, r1
 801076e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801077c:	653b      	str	r3, [r7, #80]	@ 0x50
 801077e:	2300      	movs	r3, #0
 8010780:	657b      	str	r3, [r7, #84]	@ 0x54
 8010782:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8010786:	460b      	mov	r3, r1
 8010788:	4313      	orrs	r3, r2
 801078a:	d00a      	beq.n	80107a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801078c:	4b9e      	ldr	r3, [pc, #632]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801078e:	691b      	ldr	r3, [r3, #16]
 8010790:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8010794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010798:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801079c:	4a9a      	ldr	r2, [pc, #616]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801079e:	430b      	orrs	r3, r1
 80107a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80107a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80107ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107b0:	2300      	movs	r3, #0
 80107b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80107b8:	460b      	mov	r3, r1
 80107ba:	4313      	orrs	r3, r2
 80107bc:	d009      	beq.n	80107d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80107be:	4b92      	ldr	r3, [pc, #584]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80107c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107c2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80107c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107cc:	4a8e      	ldr	r2, [pc, #568]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80107ce:	430b      	orrs	r3, r1
 80107d0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80107d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80107de:	643b      	str	r3, [r7, #64]	@ 0x40
 80107e0:	2300      	movs	r3, #0
 80107e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80107e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80107e8:	460b      	mov	r3, r1
 80107ea:	4313      	orrs	r3, r2
 80107ec:	d00e      	beq.n	801080c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80107ee:	4b86      	ldr	r3, [pc, #536]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80107f0:	691b      	ldr	r3, [r3, #16]
 80107f2:	4a85      	ldr	r2, [pc, #532]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80107f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80107f8:	6113      	str	r3, [r2, #16]
 80107fa:	4b83      	ldr	r3, [pc, #524]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80107fc:	6919      	ldr	r1, [r3, #16]
 80107fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010802:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010806:	4a80      	ldr	r2, [pc, #512]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010808:	430b      	orrs	r3, r1
 801080a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801080c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010814:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8010818:	63bb      	str	r3, [r7, #56]	@ 0x38
 801081a:	2300      	movs	r3, #0
 801081c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801081e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8010822:	460b      	mov	r3, r1
 8010824:	4313      	orrs	r3, r2
 8010826:	d009      	beq.n	801083c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010828:	4b77      	ldr	r3, [pc, #476]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801082a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801082c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8010830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010836:	4a74      	ldr	r2, [pc, #464]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010838:	430b      	orrs	r3, r1
 801083a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801083c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8010848:	633b      	str	r3, [r7, #48]	@ 0x30
 801084a:	2300      	movs	r3, #0
 801084c:	637b      	str	r3, [r7, #52]	@ 0x34
 801084e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8010852:	460b      	mov	r3, r1
 8010854:	4313      	orrs	r3, r2
 8010856:	d00a      	beq.n	801086e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010858:	4b6b      	ldr	r3, [pc, #428]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801085a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801085c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8010860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010868:	4a67      	ldr	r2, [pc, #412]	@ (8010a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801086a:	430b      	orrs	r3, r1
 801086c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010876:	2100      	movs	r1, #0
 8010878:	62b9      	str	r1, [r7, #40]	@ 0x28
 801087a:	f003 0301 	and.w	r3, r3, #1
 801087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010880:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8010884:	460b      	mov	r3, r1
 8010886:	4313      	orrs	r3, r2
 8010888:	d011      	beq.n	80108ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801088a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801088e:	3308      	adds	r3, #8
 8010890:	2100      	movs	r1, #0
 8010892:	4618      	mov	r0, r3
 8010894:	f001 fa4a 	bl	8011d2c <RCCEx_PLL2_Config>
 8010898:	4603      	mov	r3, r0
 801089a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801089e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d003      	beq.n	80108ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80108ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b6:	2100      	movs	r1, #0
 80108b8:	6239      	str	r1, [r7, #32]
 80108ba:	f003 0302 	and.w	r3, r3, #2
 80108be:	627b      	str	r3, [r7, #36]	@ 0x24
 80108c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80108c4:	460b      	mov	r3, r1
 80108c6:	4313      	orrs	r3, r2
 80108c8:	d011      	beq.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80108ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108ce:	3308      	adds	r3, #8
 80108d0:	2101      	movs	r1, #1
 80108d2:	4618      	mov	r0, r3
 80108d4:	f001 fa2a 	bl	8011d2c <RCCEx_PLL2_Config>
 80108d8:	4603      	mov	r3, r0
 80108da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80108de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d003      	beq.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80108ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f6:	2100      	movs	r1, #0
 80108f8:	61b9      	str	r1, [r7, #24]
 80108fa:	f003 0304 	and.w	r3, r3, #4
 80108fe:	61fb      	str	r3, [r7, #28]
 8010900:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010904:	460b      	mov	r3, r1
 8010906:	4313      	orrs	r3, r2
 8010908:	d011      	beq.n	801092e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801090a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801090e:	3308      	adds	r3, #8
 8010910:	2102      	movs	r1, #2
 8010912:	4618      	mov	r0, r3
 8010914:	f001 fa0a 	bl	8011d2c <RCCEx_PLL2_Config>
 8010918:	4603      	mov	r3, r0
 801091a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801091e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010922:	2b00      	cmp	r3, #0
 8010924:	d003      	beq.n	801092e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801092a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801092e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010936:	2100      	movs	r1, #0
 8010938:	6139      	str	r1, [r7, #16]
 801093a:	f003 0308 	and.w	r3, r3, #8
 801093e:	617b      	str	r3, [r7, #20]
 8010940:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010944:	460b      	mov	r3, r1
 8010946:	4313      	orrs	r3, r2
 8010948:	d011      	beq.n	801096e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801094a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801094e:	3328      	adds	r3, #40	@ 0x28
 8010950:	2100      	movs	r1, #0
 8010952:	4618      	mov	r0, r3
 8010954:	f001 fa9c 	bl	8011e90 <RCCEx_PLL3_Config>
 8010958:	4603      	mov	r3, r0
 801095a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801095e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010962:	2b00      	cmp	r3, #0
 8010964:	d003      	beq.n	801096e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801096a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801096e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010976:	2100      	movs	r1, #0
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	f003 0310 	and.w	r3, r3, #16
 801097e:	60fb      	str	r3, [r7, #12]
 8010980:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010984:	460b      	mov	r3, r1
 8010986:	4313      	orrs	r3, r2
 8010988:	d011      	beq.n	80109ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801098a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801098e:	3328      	adds	r3, #40	@ 0x28
 8010990:	2101      	movs	r1, #1
 8010992:	4618      	mov	r0, r3
 8010994:	f001 fa7c 	bl	8011e90 <RCCEx_PLL3_Config>
 8010998:	4603      	mov	r3, r0
 801099a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801099e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d003      	beq.n	80109ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80109ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b6:	2100      	movs	r1, #0
 80109b8:	6039      	str	r1, [r7, #0]
 80109ba:	f003 0320 	and.w	r3, r3, #32
 80109be:	607b      	str	r3, [r7, #4]
 80109c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80109c4:	460b      	mov	r3, r1
 80109c6:	4313      	orrs	r3, r2
 80109c8:	d011      	beq.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80109ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109ce:	3328      	adds	r3, #40	@ 0x28
 80109d0:	2102      	movs	r1, #2
 80109d2:	4618      	mov	r0, r3
 80109d4:	f001 fa5c 	bl	8011e90 <RCCEx_PLL3_Config>
 80109d8:	4603      	mov	r3, r0
 80109da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80109de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d003      	beq.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80109ee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d101      	bne.n	80109fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80109f6:	2300      	movs	r3, #0
 80109f8:	e000      	b.n	80109fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80109fa:	2301      	movs	r3, #1
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8010a02:	46bd      	mov	sp, r7
 8010a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a08:	58024400 	.word	0x58024400

08010a0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b090      	sub	sp, #64	@ 0x40
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a1a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8010a1e:	430b      	orrs	r3, r1
 8010a20:	f040 8094 	bne.w	8010b4c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8010a24:	4b9e      	ldr	r3, [pc, #632]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a28:	f003 0307 	and.w	r3, r3, #7
 8010a2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a30:	2b04      	cmp	r3, #4
 8010a32:	f200 8087 	bhi.w	8010b44 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8010a36:	a201      	add	r2, pc, #4	@ (adr r2, 8010a3c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a3c:	08010a51 	.word	0x08010a51
 8010a40:	08010a79 	.word	0x08010a79
 8010a44:	08010aa1 	.word	0x08010aa1
 8010a48:	08010b3d 	.word	0x08010b3d
 8010a4c:	08010ac9 	.word	0x08010ac9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010a50:	4b93      	ldr	r3, [pc, #588]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010a58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010a5c:	d108      	bne.n	8010a70 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a62:	4618      	mov	r0, r3
 8010a64:	f001 f810 	bl	8011a88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a6c:	f000 bd45 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a70:	2300      	movs	r3, #0
 8010a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a74:	f000 bd41 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a78:	4b89      	ldr	r3, [pc, #548]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010a80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010a84:	d108      	bne.n	8010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a86:	f107 0318 	add.w	r3, r7, #24
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f000 fd54 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010a90:	69bb      	ldr	r3, [r7, #24]
 8010a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a94:	f000 bd31 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a9c:	f000 bd2d 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010aac:	d108      	bne.n	8010ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010aae:	f107 030c 	add.w	r3, r7, #12
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f000 fe94 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010abc:	f000 bd1d 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ac4:	f000 bd19 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010ac8:	4b75      	ldr	r3, [pc, #468]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010acc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010ad0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010ad2:	4b73      	ldr	r3, [pc, #460]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f003 0304 	and.w	r3, r3, #4
 8010ada:	2b04      	cmp	r3, #4
 8010adc:	d10c      	bne.n	8010af8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d109      	bne.n	8010af8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ae4:	4b6e      	ldr	r3, [pc, #440]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	08db      	lsrs	r3, r3, #3
 8010aea:	f003 0303 	and.w	r3, r3, #3
 8010aee:	4a6d      	ldr	r2, [pc, #436]	@ (8010ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010af0:	fa22 f303 	lsr.w	r3, r2, r3
 8010af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010af6:	e01f      	b.n	8010b38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010af8:	4b69      	ldr	r3, [pc, #420]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b04:	d106      	bne.n	8010b14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8010b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010b0c:	d102      	bne.n	8010b14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010b0e:	4b66      	ldr	r3, [pc, #408]	@ (8010ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b12:	e011      	b.n	8010b38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010b14:	4b62      	ldr	r3, [pc, #392]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b20:	d106      	bne.n	8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8010b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010b28:	d102      	bne.n	8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010b2a:	4b60      	ldr	r3, [pc, #384]	@ (8010cac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b2e:	e003      	b.n	8010b38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010b30:	2300      	movs	r3, #0
 8010b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010b34:	f000 bce1 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010b38:	f000 bcdf 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b40:	f000 bcdb 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010b44:	2300      	movs	r3, #0
 8010b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b48:	f000 bcd7 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b50:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8010b54:	430b      	orrs	r3, r1
 8010b56:	f040 80ad 	bne.w	8010cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010b5a:	4b51      	ldr	r3, [pc, #324]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b5e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8010b62:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b6a:	d056      	beq.n	8010c1a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b72:	f200 8090 	bhi.w	8010c96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b78:	2bc0      	cmp	r3, #192	@ 0xc0
 8010b7a:	f000 8088 	beq.w	8010c8e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b80:	2bc0      	cmp	r3, #192	@ 0xc0
 8010b82:	f200 8088 	bhi.w	8010c96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b88:	2b80      	cmp	r3, #128	@ 0x80
 8010b8a:	d032      	beq.n	8010bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b8e:	2b80      	cmp	r3, #128	@ 0x80
 8010b90:	f200 8081 	bhi.w	8010c96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8010b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b9c:	2b40      	cmp	r3, #64	@ 0x40
 8010b9e:	d014      	beq.n	8010bca <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010ba0:	e079      	b.n	8010c96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010baa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010bae:	d108      	bne.n	8010bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f000 ff67 	bl	8011a88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bbe:	f000 bc9c 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bc6:	f000 bc98 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010bca:	4b35      	ldr	r3, [pc, #212]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010bd6:	d108      	bne.n	8010bea <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bd8:	f107 0318 	add.w	r3, r7, #24
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f000 fcab 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010be2:	69bb      	ldr	r3, [r7, #24]
 8010be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010be6:	f000 bc88 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bee:	f000 bc84 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010bfe:	d108      	bne.n	8010c12 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c00:	f107 030c 	add.w	r3, r7, #12
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 fdeb 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c0e:	f000 bc74 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c16:	f000 bc70 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c1a:	4b21      	ldr	r3, [pc, #132]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010c22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c24:	4b1e      	ldr	r3, [pc, #120]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f003 0304 	and.w	r3, r3, #4
 8010c2c:	2b04      	cmp	r3, #4
 8010c2e:	d10c      	bne.n	8010c4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d109      	bne.n	8010c4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010c36:	4b1a      	ldr	r3, [pc, #104]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	08db      	lsrs	r3, r3, #3
 8010c3c:	f003 0303 	and.w	r3, r3, #3
 8010c40:	4a18      	ldr	r2, [pc, #96]	@ (8010ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010c42:	fa22 f303 	lsr.w	r3, r2, r3
 8010c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c48:	e01f      	b.n	8010c8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010c4a:	4b15      	ldr	r3, [pc, #84]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c56:	d106      	bne.n	8010c66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c5e:	d102      	bne.n	8010c66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010c60:	4b11      	ldr	r3, [pc, #68]	@ (8010ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c64:	e011      	b.n	8010c8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010c66:	4b0e      	ldr	r3, [pc, #56]	@ (8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010c72:	d106      	bne.n	8010c82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c7a:	d102      	bne.n	8010c82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8010cac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c80:	e003      	b.n	8010c8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010c82:	2300      	movs	r3, #0
 8010c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010c86:	f000 bc38 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010c8a:	f000 bc36 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010c8e:	4b08      	ldr	r3, [pc, #32]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c92:	f000 bc32 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010c96:	2300      	movs	r3, #0
 8010c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c9a:	f000 bc2e 	b.w	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010c9e:	bf00      	nop
 8010ca0:	58024400 	.word	0x58024400
 8010ca4:	03d09000 	.word	0x03d09000
 8010ca8:	003d0900 	.word	0x003d0900
 8010cac:	017d7840 	.word	0x017d7840
 8010cb0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cb8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8010cbc:	430b      	orrs	r3, r1
 8010cbe:	f040 809c 	bne.w	8010dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010cc2:	4b9e      	ldr	r3, [pc, #632]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010cc6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8010cca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010cd2:	d054      	beq.n	8010d7e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010cda:	f200 808b 	bhi.w	8010df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010ce4:	f000 8083 	beq.w	8010dee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010cee:	f200 8081 	bhi.w	8010df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010cf8:	d02f      	beq.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010d00:	d878      	bhi.n	8010df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d004      	beq.n	8010d12 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010d0e:	d012      	beq.n	8010d36 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010d10:	e070      	b.n	8010df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d12:	4b8a      	ldr	r3, [pc, #552]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d1e:	d107      	bne.n	8010d30 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d24:	4618      	mov	r0, r3
 8010d26:	f000 feaf 	bl	8011a88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d2e:	e3e4      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d30:	2300      	movs	r3, #0
 8010d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d34:	e3e1      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d36:	4b81      	ldr	r3, [pc, #516]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010d42:	d107      	bne.n	8010d54 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d44:	f107 0318 	add.w	r3, r7, #24
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f000 fbf5 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010d4e:	69bb      	ldr	r3, [r7, #24]
 8010d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d52:	e3d2      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d54:	2300      	movs	r3, #0
 8010d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d58:	e3cf      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010d5a:	4b78      	ldr	r3, [pc, #480]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010d66:	d107      	bne.n	8010d78 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d68:	f107 030c 	add.w	r3, r7, #12
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f000 fd37 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d76:	e3c0      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d7c:	e3bd      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010d86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010d88:	4b6c      	ldr	r3, [pc, #432]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f003 0304 	and.w	r3, r3, #4
 8010d90:	2b04      	cmp	r3, #4
 8010d92:	d10c      	bne.n	8010dae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d109      	bne.n	8010dae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d9a:	4b68      	ldr	r3, [pc, #416]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	08db      	lsrs	r3, r3, #3
 8010da0:	f003 0303 	and.w	r3, r3, #3
 8010da4:	4a66      	ldr	r2, [pc, #408]	@ (8010f40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010da6:	fa22 f303 	lsr.w	r3, r2, r3
 8010daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dac:	e01e      	b.n	8010dec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010dae:	4b63      	ldr	r3, [pc, #396]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010dba:	d106      	bne.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010dc2:	d102      	bne.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010dc4:	4b5f      	ldr	r3, [pc, #380]	@ (8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dc8:	e010      	b.n	8010dec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010dca:	4b5c      	ldr	r3, [pc, #368]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010dd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010dd6:	d106      	bne.n	8010de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010dde:	d102      	bne.n	8010de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010de0:	4b59      	ldr	r3, [pc, #356]	@ (8010f48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010de4:	e002      	b.n	8010dec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010dea:	e386      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010dec:	e385      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010dee:	4b57      	ldr	r3, [pc, #348]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010df2:	e382      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010df4:	2300      	movs	r3, #0
 8010df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010df8:	e37f      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dfe:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8010e02:	430b      	orrs	r3, r1
 8010e04:	f040 80a7 	bne.w	8010f56 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010e08:	4b4c      	ldr	r3, [pc, #304]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e0c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010e10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010e18:	d055      	beq.n	8010ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010e20:	f200 8096 	bhi.w	8010f50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010e2a:	f000 8084 	beq.w	8010f36 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010e34:	f200 808c 	bhi.w	8010f50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010e3e:	d030      	beq.n	8010ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010e46:	f200 8083 	bhi.w	8010f50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d004      	beq.n	8010e5a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e56:	d012      	beq.n	8010e7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010e58:	e07a      	b.n	8010f50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010e5a:	4b38      	ldr	r3, [pc, #224]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010e62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010e66:	d107      	bne.n	8010e78 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f000 fe0b 	bl	8011a88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e76:	e340      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e7c:	e33d      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010e8a:	d107      	bne.n	8010e9c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e8c:	f107 0318 	add.w	r3, r7, #24
 8010e90:	4618      	mov	r0, r3
 8010e92:	f000 fb51 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e9a:	e32e      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ea0:	e32b      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010ea2:	4b26      	ldr	r3, [pc, #152]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010eae:	d107      	bne.n	8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010eb0:	f107 030c 	add.w	r3, r7, #12
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f000 fc93 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ebe:	e31c      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ec4:	e319      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010eca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010ece:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f003 0304 	and.w	r3, r3, #4
 8010ed8:	2b04      	cmp	r3, #4
 8010eda:	d10c      	bne.n	8010ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d109      	bne.n	8010ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ee2:	4b16      	ldr	r3, [pc, #88]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	08db      	lsrs	r3, r3, #3
 8010ee8:	f003 0303 	and.w	r3, r3, #3
 8010eec:	4a14      	ldr	r2, [pc, #80]	@ (8010f40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010eee:	fa22 f303 	lsr.w	r3, r2, r3
 8010ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ef4:	e01e      	b.n	8010f34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010ef6:	4b11      	ldr	r3, [pc, #68]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f02:	d106      	bne.n	8010f12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f0a:	d102      	bne.n	8010f12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f10:	e010      	b.n	8010f34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010f12:	4b0a      	ldr	r3, [pc, #40]	@ (8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f1e:	d106      	bne.n	8010f2e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010f26:	d102      	bne.n	8010f2e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010f28:	4b07      	ldr	r3, [pc, #28]	@ (8010f48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f2c:	e002      	b.n	8010f34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010f32:	e2e2      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010f34:	e2e1      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010f36:	4b05      	ldr	r3, [pc, #20]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f3a:	e2de      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010f3c:	58024400 	.word	0x58024400
 8010f40:	03d09000 	.word	0x03d09000
 8010f44:	003d0900 	.word	0x003d0900
 8010f48:	017d7840 	.word	0x017d7840
 8010f4c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010f50:	2300      	movs	r3, #0
 8010f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f54:	e2d1      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f5a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8010f5e:	430b      	orrs	r3, r1
 8010f60:	f040 809c 	bne.w	801109c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010f64:	4b93      	ldr	r3, [pc, #588]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f68:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8010f6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010f74:	d054      	beq.n	8011020 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010f7c:	f200 808b 	bhi.w	8011096 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010f86:	f000 8083 	beq.w	8011090 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010f90:	f200 8081 	bhi.w	8011096 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010f9a:	d02f      	beq.n	8010ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010fa2:	d878      	bhi.n	8011096 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d004      	beq.n	8010fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8010faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010fb0:	d012      	beq.n	8010fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010fb2:	e070      	b.n	8011096 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010fb4:	4b7f      	ldr	r3, [pc, #508]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010fbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010fc0:	d107      	bne.n	8010fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010fc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f000 fd5e 	bl	8011a88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010fd0:	e293      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010fd6:	e290      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010fd8:	4b76      	ldr	r3, [pc, #472]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010fe4:	d107      	bne.n	8010ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fe6:	f107 0318 	add.w	r3, r7, #24
 8010fea:	4618      	mov	r0, r3
 8010fec:	f000 faa4 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ff4:	e281      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ffa:	e27e      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010ffc:	4b6d      	ldr	r3, [pc, #436]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011008:	d107      	bne.n	801101a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801100a:	f107 030c 	add.w	r3, r7, #12
 801100e:	4618      	mov	r0, r3
 8011010:	f000 fbe6 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011018:	e26f      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801101e:	e26c      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011020:	4b64      	ldr	r3, [pc, #400]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011024:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011028:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801102a:	4b62      	ldr	r3, [pc, #392]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f003 0304 	and.w	r3, r3, #4
 8011032:	2b04      	cmp	r3, #4
 8011034:	d10c      	bne.n	8011050 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011038:	2b00      	cmp	r3, #0
 801103a:	d109      	bne.n	8011050 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801103c:	4b5d      	ldr	r3, [pc, #372]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	08db      	lsrs	r3, r3, #3
 8011042:	f003 0303 	and.w	r3, r3, #3
 8011046:	4a5c      	ldr	r2, [pc, #368]	@ (80111b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011048:	fa22 f303 	lsr.w	r3, r2, r3
 801104c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801104e:	e01e      	b.n	801108e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011050:	4b58      	ldr	r3, [pc, #352]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801105c:	d106      	bne.n	801106c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801105e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011064:	d102      	bne.n	801106c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011066:	4b55      	ldr	r3, [pc, #340]	@ (80111bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801106a:	e010      	b.n	801108e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801106c:	4b51      	ldr	r3, [pc, #324]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011078:	d106      	bne.n	8011088 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801107a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801107c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011080:	d102      	bne.n	8011088 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011082:	4b4f      	ldr	r3, [pc, #316]	@ (80111c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011086:	e002      	b.n	801108e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011088:	2300      	movs	r3, #0
 801108a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801108c:	e235      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801108e:	e234      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011090:	4b4c      	ldr	r3, [pc, #304]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8011092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011094:	e231      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011096:	2300      	movs	r3, #0
 8011098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801109a:	e22e      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801109c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110a0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80110a4:	430b      	orrs	r3, r1
 80110a6:	f040 808f 	bne.w	80111c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80110aa:	4b42      	ldr	r3, [pc, #264]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80110ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110ae:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80110b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80110b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80110ba:	d06b      	beq.n	8011194 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80110bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80110c2:	d874      	bhi.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80110c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80110ca:	d056      	beq.n	801117a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80110cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80110d2:	d86c      	bhi.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80110d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80110da:	d03b      	beq.n	8011154 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80110dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80110e2:	d864      	bhi.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80110e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80110ea:	d021      	beq.n	8011130 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80110ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80110f2:	d85c      	bhi.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80110f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d004      	beq.n	8011104 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80110fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011100:	d004      	beq.n	801110c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8011102:	e054      	b.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8011104:	f7fe fa4c 	bl	800f5a0 <HAL_RCC_GetPCLK1Freq>
 8011108:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801110a:	e1f6      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801110c:	4b29      	ldr	r3, [pc, #164]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011118:	d107      	bne.n	801112a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801111a:	f107 0318 	add.w	r3, r7, #24
 801111e:	4618      	mov	r0, r3
 8011120:	f000 fa0a 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011128:	e1e7      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801112a:	2300      	movs	r3, #0
 801112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801112e:	e1e4      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011130:	4b20      	ldr	r3, [pc, #128]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801113c:	d107      	bne.n	801114e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801113e:	f107 030c 	add.w	r3, r7, #12
 8011142:	4618      	mov	r0, r3
 8011144:	f000 fb4c 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801114c:	e1d5      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011152:	e1d2      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011154:	4b17      	ldr	r3, [pc, #92]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f003 0304 	and.w	r3, r3, #4
 801115c:	2b04      	cmp	r3, #4
 801115e:	d109      	bne.n	8011174 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011160:	4b14      	ldr	r3, [pc, #80]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	08db      	lsrs	r3, r3, #3
 8011166:	f003 0303 	and.w	r3, r3, #3
 801116a:	4a13      	ldr	r2, [pc, #76]	@ (80111b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801116c:	fa22 f303 	lsr.w	r3, r2, r3
 8011170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011172:	e1c2      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011174:	2300      	movs	r3, #0
 8011176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011178:	e1bf      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801117a:	4b0e      	ldr	r3, [pc, #56]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011186:	d102      	bne.n	801118e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8011188:	4b0c      	ldr	r3, [pc, #48]	@ (80111bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801118c:	e1b5      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801118e:	2300      	movs	r3, #0
 8011190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011192:	e1b2      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011194:	4b07      	ldr	r3, [pc, #28]	@ (80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801119c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80111a0:	d102      	bne.n	80111a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80111a2:	4b07      	ldr	r3, [pc, #28]	@ (80111c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80111a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111a6:	e1a8      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111a8:	2300      	movs	r3, #0
 80111aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111ac:	e1a5      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111b2:	e1a2      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80111b4:	58024400 	.word	0x58024400
 80111b8:	03d09000 	.word	0x03d09000
 80111bc:	003d0900 	.word	0x003d0900
 80111c0:	017d7840 	.word	0x017d7840
 80111c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80111c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111cc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80111d0:	430b      	orrs	r3, r1
 80111d2:	d173      	bne.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80111d4:	4b9c      	ldr	r3, [pc, #624]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80111d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80111dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80111de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80111e4:	d02f      	beq.n	8011246 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80111e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80111ec:	d863      	bhi.n	80112b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80111ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d004      	beq.n	80111fe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80111f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111fa:	d012      	beq.n	8011222 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80111fc:	e05b      	b.n	80112b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80111fe:	4b92      	ldr	r3, [pc, #584]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801120a:	d107      	bne.n	801121c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801120c:	f107 0318 	add.w	r3, r7, #24
 8011210:	4618      	mov	r0, r3
 8011212:	f000 f991 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801121a:	e16e      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801121c:	2300      	movs	r3, #0
 801121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011220:	e16b      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011222:	4b89      	ldr	r3, [pc, #548]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801122a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801122e:	d107      	bne.n	8011240 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011230:	f107 030c 	add.w	r3, r7, #12
 8011234:	4618      	mov	r0, r3
 8011236:	f000 fad3 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801123e:	e15c      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011240:	2300      	movs	r3, #0
 8011242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011244:	e159      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011246:	4b80      	ldr	r3, [pc, #512]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801124a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801124e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011250:	4b7d      	ldr	r3, [pc, #500]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f003 0304 	and.w	r3, r3, #4
 8011258:	2b04      	cmp	r3, #4
 801125a:	d10c      	bne.n	8011276 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801125c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801125e:	2b00      	cmp	r3, #0
 8011260:	d109      	bne.n	8011276 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011262:	4b79      	ldr	r3, [pc, #484]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	08db      	lsrs	r3, r3, #3
 8011268:	f003 0303 	and.w	r3, r3, #3
 801126c:	4a77      	ldr	r2, [pc, #476]	@ (801144c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801126e:	fa22 f303 	lsr.w	r3, r2, r3
 8011272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011274:	e01e      	b.n	80112b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011276:	4b74      	ldr	r3, [pc, #464]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801127e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011282:	d106      	bne.n	8011292 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8011284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801128a:	d102      	bne.n	8011292 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801128c:	4b70      	ldr	r3, [pc, #448]	@ (8011450 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011290:	e010      	b.n	80112b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011292:	4b6d      	ldr	r3, [pc, #436]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801129a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801129e:	d106      	bne.n	80112ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80112a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80112a6:	d102      	bne.n	80112ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80112a8:	4b6a      	ldr	r3, [pc, #424]	@ (8011454 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80112aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112ac:	e002      	b.n	80112b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80112b2:	e122      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80112b4:	e121      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80112b6:	2300      	movs	r3, #0
 80112b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80112ba:	e11e      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80112bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112c0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80112c4:	430b      	orrs	r3, r1
 80112c6:	d133      	bne.n	8011330 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80112c8:	4b5f      	ldr	r3, [pc, #380]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80112ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80112cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80112d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80112d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d004      	beq.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80112d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112de:	d012      	beq.n	8011306 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80112e0:	e023      	b.n	801132a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80112e2:	4b59      	ldr	r3, [pc, #356]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80112ee:	d107      	bne.n	8011300 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80112f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80112f4:	4618      	mov	r0, r3
 80112f6:	f000 fbc7 	bl	8011a88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80112fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80112fe:	e0fc      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011300:	2300      	movs	r3, #0
 8011302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011304:	e0f9      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011306:	4b50      	ldr	r3, [pc, #320]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801130e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011312:	d107      	bne.n	8011324 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011314:	f107 0318 	add.w	r3, r7, #24
 8011318:	4618      	mov	r0, r3
 801131a:	f000 f90d 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801131e:	6a3b      	ldr	r3, [r7, #32]
 8011320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011322:	e0ea      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011324:	2300      	movs	r3, #0
 8011326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011328:	e0e7      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801132a:	2300      	movs	r3, #0
 801132c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801132e:	e0e4      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011334:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8011338:	430b      	orrs	r3, r1
 801133a:	f040 808d 	bne.w	8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801133e:	4b42      	ldr	r3, [pc, #264]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011342:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8011346:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801134a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801134e:	d06b      	beq.n	8011428 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011352:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011356:	d874      	bhi.n	8011442 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801135a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801135e:	d056      	beq.n	801140e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8011360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011366:	d86c      	bhi.n	8011442 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801136a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801136e:	d03b      	beq.n	80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8011370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011372:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011376:	d864      	bhi.n	8011442 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801137e:	d021      	beq.n	80113c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011386:	d85c      	bhi.n	8011442 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801138a:	2b00      	cmp	r3, #0
 801138c:	d004      	beq.n	8011398 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801138e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011394:	d004      	beq.n	80113a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8011396:	e054      	b.n	8011442 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8011398:	f000 f8b8 	bl	801150c <HAL_RCCEx_GetD3PCLK1Freq>
 801139c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801139e:	e0ac      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80113a0:	4b29      	ldr	r3, [pc, #164]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80113a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80113ac:	d107      	bne.n	80113be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113ae:	f107 0318 	add.w	r3, r7, #24
 80113b2:	4618      	mov	r0, r3
 80113b4:	f000 f8c0 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80113bc:	e09d      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113c2:	e09a      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80113c4:	4b20      	ldr	r3, [pc, #128]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80113cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80113d0:	d107      	bne.n	80113e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113d2:	f107 030c 	add.w	r3, r7, #12
 80113d6:	4618      	mov	r0, r3
 80113d8:	f000 fa02 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80113e0:	e08b      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80113e2:	2300      	movs	r3, #0
 80113e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113e6:	e088      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80113e8:	4b17      	ldr	r3, [pc, #92]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f003 0304 	and.w	r3, r3, #4
 80113f0:	2b04      	cmp	r3, #4
 80113f2:	d109      	bne.n	8011408 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80113f4:	4b14      	ldr	r3, [pc, #80]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	08db      	lsrs	r3, r3, #3
 80113fa:	f003 0303 	and.w	r3, r3, #3
 80113fe:	4a13      	ldr	r2, [pc, #76]	@ (801144c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011400:	fa22 f303 	lsr.w	r3, r2, r3
 8011404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011406:	e078      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011408:	2300      	movs	r3, #0
 801140a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801140c:	e075      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801140e:	4b0e      	ldr	r3, [pc, #56]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801141a:	d102      	bne.n	8011422 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801141c:	4b0c      	ldr	r3, [pc, #48]	@ (8011450 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011420:	e06b      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011422:	2300      	movs	r3, #0
 8011424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011426:	e068      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011428:	4b07      	ldr	r3, [pc, #28]	@ (8011448 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011434:	d102      	bne.n	801143c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8011436:	4b07      	ldr	r3, [pc, #28]	@ (8011454 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801143a:	e05e      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801143c:	2300      	movs	r3, #0
 801143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011440:	e05b      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8011442:	2300      	movs	r3, #0
 8011444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011446:	e058      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011448:	58024400 	.word	0x58024400
 801144c:	03d09000 	.word	0x03d09000
 8011450:	003d0900 	.word	0x003d0900
 8011454:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011458:	e9d7 2300 	ldrd	r2, r3, [r7]
 801145c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8011460:	430b      	orrs	r3, r1
 8011462:	d148      	bne.n	80114f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8011464:	4b27      	ldr	r3, [pc, #156]	@ (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011468:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801146c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801146e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011474:	d02a      	beq.n	80114cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8011476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801147c:	d838      	bhi.n	80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801147e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011480:	2b00      	cmp	r3, #0
 8011482:	d004      	beq.n	801148e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8011484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801148a:	d00d      	beq.n	80114a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801148c:	e030      	b.n	80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801148e:	4b1d      	ldr	r3, [pc, #116]	@ (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011496:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801149a:	d102      	bne.n	80114a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 801149c:	4b1a      	ldr	r3, [pc, #104]	@ (8011508 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801149e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114a0:	e02b      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114a2:	2300      	movs	r3, #0
 80114a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114a6:	e028      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80114a8:	4b16      	ldr	r3, [pc, #88]	@ (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80114b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80114b4:	d107      	bne.n	80114c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80114b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80114ba:	4618      	mov	r0, r3
 80114bc:	f000 fae4 	bl	8011a88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80114c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114c4:	e019      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114c6:	2300      	movs	r3, #0
 80114c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114ca:	e016      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80114cc:	4b0d      	ldr	r3, [pc, #52]	@ (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80114d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80114d8:	d107      	bne.n	80114ea <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114da:	f107 0318 	add.w	r3, r7, #24
 80114de:	4618      	mov	r0, r3
 80114e0:	f000 f82a 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80114e4:	69fb      	ldr	r3, [r7, #28]
 80114e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114e8:	e007      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114ea:	2300      	movs	r3, #0
 80114ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114ee:	e004      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80114f0:	2300      	movs	r3, #0
 80114f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114f4:	e001      	b.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80114fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3740      	adds	r7, #64	@ 0x40
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	58024400 	.word	0x58024400
 8011508:	017d7840 	.word	0x017d7840

0801150c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8011510:	f7fe f816 	bl	800f540 <HAL_RCC_GetHCLKFreq>
 8011514:	4602      	mov	r2, r0
 8011516:	4b06      	ldr	r3, [pc, #24]	@ (8011530 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011518:	6a1b      	ldr	r3, [r3, #32]
 801151a:	091b      	lsrs	r3, r3, #4
 801151c:	f003 0307 	and.w	r3, r3, #7
 8011520:	4904      	ldr	r1, [pc, #16]	@ (8011534 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8011522:	5ccb      	ldrb	r3, [r1, r3]
 8011524:	f003 031f 	and.w	r3, r3, #31
 8011528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801152c:	4618      	mov	r0, r3
 801152e:	bd80      	pop	{r7, pc}
 8011530:	58024400 	.word	0x58024400
 8011534:	0801b324 	.word	0x0801b324

08011538 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8011538:	b480      	push	{r7}
 801153a:	b089      	sub	sp, #36	@ 0x24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011540:	4ba1      	ldr	r3, [pc, #644]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011544:	f003 0303 	and.w	r3, r3, #3
 8011548:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801154a:	4b9f      	ldr	r3, [pc, #636]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801154e:	0b1b      	lsrs	r3, r3, #12
 8011550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011554:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8011556:	4b9c      	ldr	r3, [pc, #624]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801155a:	091b      	lsrs	r3, r3, #4
 801155c:	f003 0301 	and.w	r3, r3, #1
 8011560:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8011562:	4b99      	ldr	r3, [pc, #612]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011566:	08db      	lsrs	r3, r3, #3
 8011568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801156c:	693a      	ldr	r2, [r7, #16]
 801156e:	fb02 f303 	mul.w	r3, r2, r3
 8011572:	ee07 3a90 	vmov	s15, r3
 8011576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801157a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 8111 	beq.w	80117a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	2b02      	cmp	r3, #2
 801158a:	f000 8083 	beq.w	8011694 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	2b02      	cmp	r3, #2
 8011592:	f200 80a1 	bhi.w	80116d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d003      	beq.n	80115a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801159c:	69bb      	ldr	r3, [r7, #24]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d056      	beq.n	8011650 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80115a2:	e099      	b.n	80116d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115a4:	4b88      	ldr	r3, [pc, #544]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f003 0320 	and.w	r3, r3, #32
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d02d      	beq.n	801160c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80115b0:	4b85      	ldr	r3, [pc, #532]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	08db      	lsrs	r3, r3, #3
 80115b6:	f003 0303 	and.w	r3, r3, #3
 80115ba:	4a84      	ldr	r2, [pc, #528]	@ (80117cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80115bc:	fa22 f303 	lsr.w	r3, r2, r3
 80115c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	ee07 3a90 	vmov	s15, r3
 80115c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	ee07 3a90 	vmov	s15, r3
 80115d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115da:	4b7b      	ldr	r3, [pc, #492]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115e2:	ee07 3a90 	vmov	s15, r3
 80115e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80115ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80117d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80115f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80115fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011606:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801160a:	e087      	b.n	801171c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	ee07 3a90 	vmov	s15, r3
 8011612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011616:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80117d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801161a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801161e:	4b6a      	ldr	r3, [pc, #424]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011626:	ee07 3a90 	vmov	s15, r3
 801162a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801162e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011632:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80117d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801163a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801163e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011646:	ee67 7a27 	vmul.f32	s15, s14, s15
 801164a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801164e:	e065      	b.n	801171c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	ee07 3a90 	vmov	s15, r3
 8011656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801165a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801165e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011662:	4b59      	ldr	r3, [pc, #356]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801166a:	ee07 3a90 	vmov	s15, r3
 801166e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011672:	ed97 6a03 	vldr	s12, [r7, #12]
 8011676:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80117d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801167a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801167e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801168e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011692:	e043      	b.n	801171c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	ee07 3a90 	vmov	s15, r3
 801169a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801169e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80117dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80116a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116a6:	4b48      	ldr	r3, [pc, #288]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80116a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116ae:	ee07 3a90 	vmov	s15, r3
 80116b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80116b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80116ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80117d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80116be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80116c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80116ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80116d6:	e021      	b.n	801171c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	ee07 3a90 	vmov	s15, r3
 80116de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80116e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116ea:	4b37      	ldr	r3, [pc, #220]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80116ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116f2:	ee07 3a90 	vmov	s15, r3
 80116f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80116fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80116fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80117d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801170a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801170e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801171a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801171c:	4b2a      	ldr	r3, [pc, #168]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801171e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011720:	0a5b      	lsrs	r3, r3, #9
 8011722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011726:	ee07 3a90 	vmov	s15, r3
 801172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801172e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011736:	edd7 6a07 	vldr	s13, [r7, #28]
 801173a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801173e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011742:	ee17 2a90 	vmov	r2, s15
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801174a:	4b1f      	ldr	r3, [pc, #124]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801174c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801174e:	0c1b      	lsrs	r3, r3, #16
 8011750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011754:	ee07 3a90 	vmov	s15, r3
 8011758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801175c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011764:	edd7 6a07 	vldr	s13, [r7, #28]
 8011768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801176c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011770:	ee17 2a90 	vmov	r2, s15
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011778:	4b13      	ldr	r3, [pc, #76]	@ (80117c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801177a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801177c:	0e1b      	lsrs	r3, r3, #24
 801177e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011782:	ee07 3a90 	vmov	s15, r3
 8011786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801178a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801178e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011792:	edd7 6a07 	vldr	s13, [r7, #28]
 8011796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801179a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801179e:	ee17 2a90 	vmov	r2, s15
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80117a6:	e008      	b.n	80117ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2200      	movs	r2, #0
 80117b8:	609a      	str	r2, [r3, #8]
}
 80117ba:	bf00      	nop
 80117bc:	3724      	adds	r7, #36	@ 0x24
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr
 80117c6:	bf00      	nop
 80117c8:	58024400 	.word	0x58024400
 80117cc:	03d09000 	.word	0x03d09000
 80117d0:	46000000 	.word	0x46000000
 80117d4:	4c742400 	.word	0x4c742400
 80117d8:	4a742400 	.word	0x4a742400
 80117dc:	4bbebc20 	.word	0x4bbebc20

080117e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b089      	sub	sp, #36	@ 0x24
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80117e8:	4ba1      	ldr	r3, [pc, #644]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80117ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117ec:	f003 0303 	and.w	r3, r3, #3
 80117f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80117f2:	4b9f      	ldr	r3, [pc, #636]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80117f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117f6:	0d1b      	lsrs	r3, r3, #20
 80117f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80117fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80117fe:	4b9c      	ldr	r3, [pc, #624]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011802:	0a1b      	lsrs	r3, r3, #8
 8011804:	f003 0301 	and.w	r3, r3, #1
 8011808:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801180a:	4b99      	ldr	r3, [pc, #612]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801180e:	08db      	lsrs	r3, r3, #3
 8011810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011814:	693a      	ldr	r2, [r7, #16]
 8011816:	fb02 f303 	mul.w	r3, r2, r3
 801181a:	ee07 3a90 	vmov	s15, r3
 801181e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	2b00      	cmp	r3, #0
 801182a:	f000 8111 	beq.w	8011a50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801182e:	69bb      	ldr	r3, [r7, #24]
 8011830:	2b02      	cmp	r3, #2
 8011832:	f000 8083 	beq.w	801193c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	2b02      	cmp	r3, #2
 801183a:	f200 80a1 	bhi.w	8011980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d003      	beq.n	801184c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	2b01      	cmp	r3, #1
 8011848:	d056      	beq.n	80118f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801184a:	e099      	b.n	8011980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801184c:	4b88      	ldr	r3, [pc, #544]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	f003 0320 	and.w	r3, r3, #32
 8011854:	2b00      	cmp	r3, #0
 8011856:	d02d      	beq.n	80118b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011858:	4b85      	ldr	r3, [pc, #532]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	08db      	lsrs	r3, r3, #3
 801185e:	f003 0303 	and.w	r3, r3, #3
 8011862:	4a84      	ldr	r2, [pc, #528]	@ (8011a74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8011864:	fa22 f303 	lsr.w	r3, r2, r3
 8011868:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	ee07 3a90 	vmov	s15, r3
 8011870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	ee07 3a90 	vmov	s15, r3
 801187a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801187e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011882:	4b7b      	ldr	r3, [pc, #492]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801188a:	ee07 3a90 	vmov	s15, r3
 801188e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011892:	ed97 6a03 	vldr	s12, [r7, #12]
 8011896:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8011a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801189a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801189e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80118a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80118a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80118b2:	e087      	b.n	80119c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	ee07 3a90 	vmov	s15, r3
 80118ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8011a7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80118c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80118c6:	4b6a      	ldr	r3, [pc, #424]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80118c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118ce:	ee07 3a90 	vmov	s15, r3
 80118d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80118d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80118da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8011a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80118de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80118e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80118e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80118ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80118f6:	e065      	b.n	80119c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	ee07 3a90 	vmov	s15, r3
 80118fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011902:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801190a:	4b59      	ldr	r3, [pc, #356]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801190e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011912:	ee07 3a90 	vmov	s15, r3
 8011916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801191a:	ed97 6a03 	vldr	s12, [r7, #12]
 801191e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8011a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801192a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801192e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801193a:	e043      	b.n	80119c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	ee07 3a90 	vmov	s15, r3
 8011942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011946:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8011a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801194a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801194e:	4b48      	ldr	r3, [pc, #288]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011956:	ee07 3a90 	vmov	s15, r3
 801195a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801195e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011962:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8011a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801196a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801196e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011976:	ee67 7a27 	vmul.f32	s15, s14, s15
 801197a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801197e:	e021      	b.n	80119c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	ee07 3a90 	vmov	s15, r3
 8011986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801198a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801198e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011992:	4b37      	ldr	r3, [pc, #220]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801199a:	ee07 3a90 	vmov	s15, r3
 801199e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80119a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80119aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80119b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80119c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80119c4:	4b2a      	ldr	r3, [pc, #168]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80119c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119c8:	0a5b      	lsrs	r3, r3, #9
 80119ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119ce:	ee07 3a90 	vmov	s15, r3
 80119d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80119da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80119de:	edd7 6a07 	vldr	s13, [r7, #28]
 80119e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80119e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80119ea:	ee17 2a90 	vmov	r2, s15
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80119f2:	4b1f      	ldr	r3, [pc, #124]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80119f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119f6:	0c1b      	lsrs	r3, r3, #16
 80119f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119fc:	ee07 3a90 	vmov	s15, r3
 8011a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a18:	ee17 2a90 	vmov	r2, s15
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011a20:	4b13      	ldr	r3, [pc, #76]	@ (8011a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a24:	0e1b      	lsrs	r3, r3, #24
 8011a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a2a:	ee07 3a90 	vmov	s15, r3
 8011a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8011a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a46:	ee17 2a90 	vmov	r2, s15
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011a4e:	e008      	b.n	8011a62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	609a      	str	r2, [r3, #8]
}
 8011a62:	bf00      	nop
 8011a64:	3724      	adds	r7, #36	@ 0x24
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop
 8011a70:	58024400 	.word	0x58024400
 8011a74:	03d09000 	.word	0x03d09000
 8011a78:	46000000 	.word	0x46000000
 8011a7c:	4c742400 	.word	0x4c742400
 8011a80:	4a742400 	.word	0x4a742400
 8011a84:	4bbebc20 	.word	0x4bbebc20

08011a88 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b089      	sub	sp, #36	@ 0x24
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011a90:	4ba0      	ldr	r3, [pc, #640]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a94:	f003 0303 	and.w	r3, r3, #3
 8011a98:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8011a9a:	4b9e      	ldr	r3, [pc, #632]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a9e:	091b      	lsrs	r3, r3, #4
 8011aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011aa4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8011aa6:	4b9b      	ldr	r3, [pc, #620]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aaa:	f003 0301 	and.w	r3, r3, #1
 8011aae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011ab0:	4b98      	ldr	r3, [pc, #608]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ab4:	08db      	lsrs	r3, r3, #3
 8011ab6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011aba:	693a      	ldr	r2, [r7, #16]
 8011abc:	fb02 f303 	mul.w	r3, r2, r3
 8011ac0:	ee07 3a90 	vmov	s15, r3
 8011ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ac8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	f000 8111 	beq.w	8011cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011ad4:	69bb      	ldr	r3, [r7, #24]
 8011ad6:	2b02      	cmp	r3, #2
 8011ad8:	f000 8083 	beq.w	8011be2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	2b02      	cmp	r3, #2
 8011ae0:	f200 80a1 	bhi.w	8011c26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011ae4:	69bb      	ldr	r3, [r7, #24]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d003      	beq.n	8011af2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011aea:	69bb      	ldr	r3, [r7, #24]
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d056      	beq.n	8011b9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011af0:	e099      	b.n	8011c26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011af2:	4b88      	ldr	r3, [pc, #544]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f003 0320 	and.w	r3, r3, #32
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d02d      	beq.n	8011b5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011afe:	4b85      	ldr	r3, [pc, #532]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	08db      	lsrs	r3, r3, #3
 8011b04:	f003 0303 	and.w	r3, r3, #3
 8011b08:	4a83      	ldr	r2, [pc, #524]	@ (8011d18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8011b0e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	ee07 3a90 	vmov	s15, r3
 8011b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	ee07 3a90 	vmov	s15, r3
 8011b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b28:	4b7a      	ldr	r3, [pc, #488]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b30:	ee07 3a90 	vmov	s15, r3
 8011b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b38:	ed97 6a03 	vldr	s12, [r7, #12]
 8011b3c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8011d1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b54:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011b58:	e087      	b.n	8011c6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	ee07 3a90 	vmov	s15, r3
 8011b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b64:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8011d20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b6c:	4b69      	ldr	r3, [pc, #420]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b74:	ee07 3a90 	vmov	s15, r3
 8011b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011b80:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8011d1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011b9c:	e065      	b.n	8011c6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	ee07 3a90 	vmov	s15, r3
 8011ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ba8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011bb0:	4b58      	ldr	r3, [pc, #352]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bb8:	ee07 3a90 	vmov	s15, r3
 8011bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011bc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8011bc4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8011d1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011be0:	e043      	b.n	8011c6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	ee07 3a90 	vmov	s15, r3
 8011be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bec:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8011d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011bf4:	4b47      	ldr	r3, [pc, #284]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bfc:	ee07 3a90 	vmov	s15, r3
 8011c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c04:	ed97 6a03 	vldr	s12, [r7, #12]
 8011c08:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8011d1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011c0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011c24:	e021      	b.n	8011c6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	ee07 3a90 	vmov	s15, r3
 8011c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c30:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011d20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c38:	4b36      	ldr	r3, [pc, #216]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c40:	ee07 3a90 	vmov	s15, r3
 8011c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c48:	ed97 6a03 	vldr	s12, [r7, #12]
 8011c4c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011d1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011c50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011c68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c6e:	0a5b      	lsrs	r3, r3, #9
 8011c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c74:	ee07 3a90 	vmov	s15, r3
 8011c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8011c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c90:	ee17 2a90 	vmov	r2, s15
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011c98:	4b1e      	ldr	r3, [pc, #120]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c9c:	0c1b      	lsrs	r3, r3, #16
 8011c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ca2:	ee07 3a90 	vmov	s15, r3
 8011ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011caa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8011cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cbe:	ee17 2a90 	vmov	r2, s15
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011cc6:	4b13      	ldr	r3, [pc, #76]	@ (8011d14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cca:	0e1b      	lsrs	r3, r3, #24
 8011ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011cd0:	ee07 3a90 	vmov	s15, r3
 8011cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011cd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8011ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cec:	ee17 2a90 	vmov	r2, s15
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011cf4:	e008      	b.n	8011d08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	609a      	str	r2, [r3, #8]
}
 8011d08:	bf00      	nop
 8011d0a:	3724      	adds	r7, #36	@ 0x24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr
 8011d14:	58024400 	.word	0x58024400
 8011d18:	03d09000 	.word	0x03d09000
 8011d1c:	46000000 	.word	0x46000000
 8011d20:	4c742400 	.word	0x4c742400
 8011d24:	4a742400 	.word	0x4a742400
 8011d28:	4bbebc20 	.word	0x4bbebc20

08011d2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011d36:	2300      	movs	r3, #0
 8011d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011d3a:	4b53      	ldr	r3, [pc, #332]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d3e:	f003 0303 	and.w	r3, r3, #3
 8011d42:	2b03      	cmp	r3, #3
 8011d44:	d101      	bne.n	8011d4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011d46:	2301      	movs	r3, #1
 8011d48:	e099      	b.n	8011e7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011d50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d56:	f7f1 fce3 	bl	8003720 <HAL_GetTick>
 8011d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011d5c:	e008      	b.n	8011d70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011d5e:	f7f1 fcdf 	bl	8003720 <HAL_GetTick>
 8011d62:	4602      	mov	r2, r0
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	1ad3      	subs	r3, r2, r3
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	d901      	bls.n	8011d70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011d6c:	2303      	movs	r3, #3
 8011d6e:	e086      	b.n	8011e7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011d70:	4b45      	ldr	r3, [pc, #276]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1f0      	bne.n	8011d5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011d7c:	4b42      	ldr	r3, [pc, #264]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d80:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	031b      	lsls	r3, r3, #12
 8011d8a:	493f      	ldr	r1, [pc, #252]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	3b01      	subs	r3, #1
 8011d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	689b      	ldr	r3, [r3, #8]
 8011d9e:	3b01      	subs	r3, #1
 8011da0:	025b      	lsls	r3, r3, #9
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	431a      	orrs	r2, r3
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	3b01      	subs	r3, #1
 8011dac:	041b      	lsls	r3, r3, #16
 8011dae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011db2:	431a      	orrs	r2, r3
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	691b      	ldr	r3, [r3, #16]
 8011db8:	3b01      	subs	r3, #1
 8011dba:	061b      	lsls	r3, r3, #24
 8011dbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011dc0:	4931      	ldr	r1, [pc, #196]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011dc6:	4b30      	ldr	r3, [pc, #192]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	695b      	ldr	r3, [r3, #20]
 8011dd2:	492d      	ldr	r1, [pc, #180]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ddc:	f023 0220 	bic.w	r2, r3, #32
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	699b      	ldr	r3, [r3, #24]
 8011de4:	4928      	ldr	r1, [pc, #160]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011de6:	4313      	orrs	r3, r2
 8011de8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011dea:	4b27      	ldr	r3, [pc, #156]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dee:	4a26      	ldr	r2, [pc, #152]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011df0:	f023 0310 	bic.w	r3, r3, #16
 8011df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011df6:	4b24      	ldr	r3, [pc, #144]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011dfa:	4b24      	ldr	r3, [pc, #144]	@ (8011e8c <RCCEx_PLL2_Config+0x160>)
 8011dfc:	4013      	ands	r3, r2
 8011dfe:	687a      	ldr	r2, [r7, #4]
 8011e00:	69d2      	ldr	r2, [r2, #28]
 8011e02:	00d2      	lsls	r2, r2, #3
 8011e04:	4920      	ldr	r1, [pc, #128]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e06:	4313      	orrs	r3, r2
 8011e08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e10:	f043 0310 	orr.w	r3, r3, #16
 8011e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d106      	bne.n	8011e2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e20:	4a19      	ldr	r2, [pc, #100]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011e28:	e00f      	b.n	8011e4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	d106      	bne.n	8011e3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011e30:	4b15      	ldr	r3, [pc, #84]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e34:	4a14      	ldr	r2, [pc, #80]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011e3c:	e005      	b.n	8011e4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011e3e:	4b12      	ldr	r3, [pc, #72]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e42:	4a11      	ldr	r2, [pc, #68]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011e48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011e56:	f7f1 fc63 	bl	8003720 <HAL_GetTick>
 8011e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011e5c:	e008      	b.n	8011e70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011e5e:	f7f1 fc5f 	bl	8003720 <HAL_GetTick>
 8011e62:	4602      	mov	r2, r0
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	2b02      	cmp	r3, #2
 8011e6a:	d901      	bls.n	8011e70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011e6c:	2303      	movs	r3, #3
 8011e6e:	e006      	b.n	8011e7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011e70:	4b05      	ldr	r3, [pc, #20]	@ (8011e88 <RCCEx_PLL2_Config+0x15c>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d0f0      	beq.n	8011e5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3710      	adds	r7, #16
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	58024400 	.word	0x58024400
 8011e8c:	ffff0007 	.word	0xffff0007

08011e90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011e9e:	4b53      	ldr	r3, [pc, #332]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ea2:	f003 0303 	and.w	r3, r3, #3
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d101      	bne.n	8011eae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e099      	b.n	8011fe2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011eae:	4b4f      	ldr	r3, [pc, #316]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011eba:	f7f1 fc31 	bl	8003720 <HAL_GetTick>
 8011ebe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011ec0:	e008      	b.n	8011ed4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011ec2:	f7f1 fc2d 	bl	8003720 <HAL_GetTick>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	1ad3      	subs	r3, r2, r3
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	d901      	bls.n	8011ed4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011ed0:	2303      	movs	r3, #3
 8011ed2:	e086      	b.n	8011fe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011ed4:	4b45      	ldr	r3, [pc, #276]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d1f0      	bne.n	8011ec2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011ee0:	4b42      	ldr	r3, [pc, #264]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ee4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	051b      	lsls	r3, r3, #20
 8011eee:	493f      	ldr	r1, [pc, #252]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011ef0:	4313      	orrs	r3, r2
 8011ef2:	628b      	str	r3, [r1, #40]	@ 0x28
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	3b01      	subs	r3, #1
 8011f04:	025b      	lsls	r3, r3, #9
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	431a      	orrs	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	3b01      	subs	r3, #1
 8011f10:	041b      	lsls	r3, r3, #16
 8011f12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011f16:	431a      	orrs	r2, r3
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	691b      	ldr	r3, [r3, #16]
 8011f1c:	3b01      	subs	r3, #1
 8011f1e:	061b      	lsls	r3, r3, #24
 8011f20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011f24:	4931      	ldr	r1, [pc, #196]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f26:	4313      	orrs	r3, r2
 8011f28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011f2a:	4b30      	ldr	r3, [pc, #192]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	695b      	ldr	r3, [r3, #20]
 8011f36:	492d      	ldr	r1, [pc, #180]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f38:	4313      	orrs	r3, r2
 8011f3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	699b      	ldr	r3, [r3, #24]
 8011f48:	4928      	ldr	r1, [pc, #160]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011f4e:	4b27      	ldr	r3, [pc, #156]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f52:	4a26      	ldr	r2, [pc, #152]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011f5a:	4b24      	ldr	r3, [pc, #144]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f5e:	4b24      	ldr	r3, [pc, #144]	@ (8011ff0 <RCCEx_PLL3_Config+0x160>)
 8011f60:	4013      	ands	r3, r2
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	69d2      	ldr	r2, [r2, #28]
 8011f66:	00d2      	lsls	r2, r2, #3
 8011f68:	4920      	ldr	r1, [pc, #128]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f72:	4a1e      	ldr	r2, [pc, #120]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d106      	bne.n	8011f8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011f80:	4b1a      	ldr	r3, [pc, #104]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f84:	4a19      	ldr	r2, [pc, #100]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8011f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011f8c:	e00f      	b.n	8011fae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	2b01      	cmp	r3, #1
 8011f92:	d106      	bne.n	8011fa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011f94:	4b15      	ldr	r3, [pc, #84]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f98:	4a14      	ldr	r2, [pc, #80]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011f9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011fa0:	e005      	b.n	8011fae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011fa2:	4b12      	ldr	r3, [pc, #72]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fa6:	4a11      	ldr	r2, [pc, #68]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011fac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011fae:	4b0f      	ldr	r3, [pc, #60]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011fba:	f7f1 fbb1 	bl	8003720 <HAL_GetTick>
 8011fbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011fc0:	e008      	b.n	8011fd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011fc2:	f7f1 fbad 	bl	8003720 <HAL_GetTick>
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	1ad3      	subs	r3, r2, r3
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	d901      	bls.n	8011fd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011fd0:	2303      	movs	r3, #3
 8011fd2:	e006      	b.n	8011fe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011fd4:	4b05      	ldr	r3, [pc, #20]	@ (8011fec <RCCEx_PLL3_Config+0x15c>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d0f0      	beq.n	8011fc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3710      	adds	r7, #16
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	58024400 	.word	0x58024400
 8011ff0:	ffff0007 	.word	0xffff0007

08011ff4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d101      	bne.n	8012006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012002:	2301      	movs	r3, #1
 8012004:	e10f      	b.n	8012226 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2200      	movs	r2, #0
 801200a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a87      	ldr	r2, [pc, #540]	@ (8012230 <HAL_SPI_Init+0x23c>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d00f      	beq.n	8012036 <HAL_SPI_Init+0x42>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	4a86      	ldr	r2, [pc, #536]	@ (8012234 <HAL_SPI_Init+0x240>)
 801201c:	4293      	cmp	r3, r2
 801201e:	d00a      	beq.n	8012036 <HAL_SPI_Init+0x42>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	4a84      	ldr	r2, [pc, #528]	@ (8012238 <HAL_SPI_Init+0x244>)
 8012026:	4293      	cmp	r3, r2
 8012028:	d005      	beq.n	8012036 <HAL_SPI_Init+0x42>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	2b0f      	cmp	r3, #15
 8012030:	d901      	bls.n	8012036 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8012032:	2301      	movs	r3, #1
 8012034:	e0f7      	b.n	8012226 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f000 ff6c 	bl	8012f14 <SPI_GetPacketSize>
 801203c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4a7b      	ldr	r2, [pc, #492]	@ (8012230 <HAL_SPI_Init+0x23c>)
 8012044:	4293      	cmp	r3, r2
 8012046:	d00c      	beq.n	8012062 <HAL_SPI_Init+0x6e>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4a79      	ldr	r2, [pc, #484]	@ (8012234 <HAL_SPI_Init+0x240>)
 801204e:	4293      	cmp	r3, r2
 8012050:	d007      	beq.n	8012062 <HAL_SPI_Init+0x6e>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4a78      	ldr	r2, [pc, #480]	@ (8012238 <HAL_SPI_Init+0x244>)
 8012058:	4293      	cmp	r3, r2
 801205a:	d002      	beq.n	8012062 <HAL_SPI_Init+0x6e>
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2b08      	cmp	r3, #8
 8012060:	d811      	bhi.n	8012086 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8012066:	4a72      	ldr	r2, [pc, #456]	@ (8012230 <HAL_SPI_Init+0x23c>)
 8012068:	4293      	cmp	r3, r2
 801206a:	d009      	beq.n	8012080 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	4a70      	ldr	r2, [pc, #448]	@ (8012234 <HAL_SPI_Init+0x240>)
 8012072:	4293      	cmp	r3, r2
 8012074:	d004      	beq.n	8012080 <HAL_SPI_Init+0x8c>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	4a6f      	ldr	r2, [pc, #444]	@ (8012238 <HAL_SPI_Init+0x244>)
 801207c:	4293      	cmp	r3, r2
 801207e:	d104      	bne.n	801208a <HAL_SPI_Init+0x96>
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2b10      	cmp	r3, #16
 8012084:	d901      	bls.n	801208a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8012086:	2301      	movs	r3, #1
 8012088:	e0cd      	b.n	8012226 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012090:	b2db      	uxtb	r3, r3
 8012092:	2b00      	cmp	r3, #0
 8012094:	d106      	bne.n	80120a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2200      	movs	r2, #0
 801209a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f7f0 fa7c 	bl	800259c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2202      	movs	r2, #2
 80120a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f022 0201 	bic.w	r2, r2, #1
 80120ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	689b      	ldr	r3, [r3, #8]
 80120c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80120c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	699b      	ldr	r3, [r3, #24]
 80120cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80120d0:	d119      	bne.n	8012106 <HAL_SPI_Init+0x112>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80120da:	d103      	bne.n	80120e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d008      	beq.n	80120f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d10c      	bne.n	8012106 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80120f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120f4:	d107      	bne.n	8012106 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012104:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00f      	beq.n	8012132 <HAL_SPI_Init+0x13e>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	2b06      	cmp	r3, #6
 8012118:	d90b      	bls.n	8012132 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	430a      	orrs	r2, r1
 801212e:	601a      	str	r2, [r3, #0]
 8012130:	e007      	b.n	8012142 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012140:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	69da      	ldr	r2, [r3, #28]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801214a:	431a      	orrs	r2, r3
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	431a      	orrs	r2, r3
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012154:	ea42 0103 	orr.w	r1, r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	68da      	ldr	r2, [r3, #12]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	430a      	orrs	r2, r1
 8012162:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801216c:	431a      	orrs	r2, r3
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012172:	431a      	orrs	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	699b      	ldr	r3, [r3, #24]
 8012178:	431a      	orrs	r2, r3
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	691b      	ldr	r3, [r3, #16]
 801217e:	431a      	orrs	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	695b      	ldr	r3, [r3, #20]
 8012184:	431a      	orrs	r2, r3
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6a1b      	ldr	r3, [r3, #32]
 801218a:	431a      	orrs	r2, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	431a      	orrs	r2, r3
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012196:	431a      	orrs	r2, r3
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	689b      	ldr	r3, [r3, #8]
 801219c:	431a      	orrs	r2, r3
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80121a2:	ea42 0103 	orr.w	r1, r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	430a      	orrs	r2, r1
 80121b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d113      	bne.n	80121e2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	689b      	ldr	r3, [r3, #8]
 80121c0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80121cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	689b      	ldr	r3, [r3, #8]
 80121d4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80121e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f022 0201 	bic.w	r2, r2, #1
 80121f0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d00a      	beq.n	8012214 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	430a      	orrs	r2, r1
 8012212:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2200      	movs	r2, #0
 8012218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2201      	movs	r2, #1
 8012220:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8012224:	2300      	movs	r3, #0
}
 8012226:	4618      	mov	r0, r3
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	40013000 	.word	0x40013000
 8012234:	40003800 	.word	0x40003800
 8012238:	40003c00 	.word	0x40003c00

0801223c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b088      	sub	sp, #32
 8012240:	af02      	add	r7, sp, #8
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	603b      	str	r3, [r7, #0]
 8012248:	4613      	mov	r3, r2
 801224a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	3320      	adds	r3, #32
 8012252:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012254:	f7f1 fa64 	bl	8003720 <HAL_GetTick>
 8012258:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012260:	b2db      	uxtb	r3, r3
 8012262:	2b01      	cmp	r3, #1
 8012264:	d001      	beq.n	801226a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8012266:	2302      	movs	r3, #2
 8012268:	e1d1      	b.n	801260e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d002      	beq.n	8012276 <HAL_SPI_Transmit+0x3a>
 8012270:	88fb      	ldrh	r3, [r7, #6]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8012276:	2301      	movs	r3, #1
 8012278:	e1c9      	b.n	801260e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012280:	2b01      	cmp	r3, #1
 8012282:	d101      	bne.n	8012288 <HAL_SPI_Transmit+0x4c>
 8012284:	2302      	movs	r3, #2
 8012286:	e1c2      	b.n	801260e <HAL_SPI_Transmit+0x3d2>
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2201      	movs	r2, #1
 801228c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2203      	movs	r2, #3
 8012294:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2200      	movs	r2, #0
 801229c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	68ba      	ldr	r2, [r7, #8]
 80122a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	88fa      	ldrh	r2, [r7, #6]
 80122aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	88fa      	ldrh	r2, [r7, #6]
 80122b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	2200      	movs	r2, #0
 80122ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2200      	movs	r2, #0
 80122c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2200      	movs	r2, #0
 80122c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2200      	movs	r2, #0
 80122d0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	2200      	movs	r2, #0
 80122d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	689b      	ldr	r3, [r3, #8]
 80122dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80122e0:	d108      	bne.n	80122f4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80122f0:	601a      	str	r2, [r3, #0]
 80122f2:	e009      	b.n	8012308 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	68db      	ldr	r3, [r3, #12]
 80122fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8012306:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	685a      	ldr	r2, [r3, #4]
 801230e:	4b96      	ldr	r3, [pc, #600]	@ (8012568 <HAL_SPI_Transmit+0x32c>)
 8012310:	4013      	ands	r3, r2
 8012312:	88f9      	ldrh	r1, [r7, #6]
 8012314:	68fa      	ldr	r2, [r7, #12]
 8012316:	6812      	ldr	r2, [r2, #0]
 8012318:	430b      	orrs	r3, r1
 801231a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f042 0201 	orr.w	r2, r2, #1
 801232a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012334:	d107      	bne.n	8012346 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	68db      	ldr	r3, [r3, #12]
 801234a:	2b0f      	cmp	r3, #15
 801234c:	d947      	bls.n	80123de <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801234e:	e03f      	b.n	80123d0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	695b      	ldr	r3, [r3, #20]
 8012356:	f003 0302 	and.w	r3, r3, #2
 801235a:	2b02      	cmp	r3, #2
 801235c:	d114      	bne.n	8012388 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	6812      	ldr	r2, [r2, #0]
 8012368:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801236e:	1d1a      	adds	r2, r3, #4
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801237a:	b29b      	uxth	r3, r3
 801237c:	3b01      	subs	r3, #1
 801237e:	b29a      	uxth	r2, r3
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012386:	e023      	b.n	80123d0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012388:	f7f1 f9ca 	bl	8003720 <HAL_GetTick>
 801238c:	4602      	mov	r2, r0
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	1ad3      	subs	r3, r2, r3
 8012392:	683a      	ldr	r2, [r7, #0]
 8012394:	429a      	cmp	r2, r3
 8012396:	d803      	bhi.n	80123a0 <HAL_SPI_Transmit+0x164>
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801239e:	d102      	bne.n	80123a6 <HAL_SPI_Transmit+0x16a>
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d114      	bne.n	80123d0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f000 fce6 	bl	8012d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80123b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2201      	movs	r2, #1
 80123c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2200      	movs	r2, #0
 80123c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80123cc:	2303      	movs	r3, #3
 80123ce:	e11e      	b.n	801260e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d1b9      	bne.n	8012350 <HAL_SPI_Transmit+0x114>
 80123dc:	e0f1      	b.n	80125c2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	2b07      	cmp	r3, #7
 80123e4:	f240 80e6 	bls.w	80125b4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80123e8:	e05d      	b.n	80124a6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	695b      	ldr	r3, [r3, #20]
 80123f0:	f003 0302 	and.w	r3, r3, #2
 80123f4:	2b02      	cmp	r3, #2
 80123f6:	d132      	bne.n	801245e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80123fe:	b29b      	uxth	r3, r3
 8012400:	2b01      	cmp	r3, #1
 8012402:	d918      	bls.n	8012436 <HAL_SPI_Transmit+0x1fa>
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012408:	2b00      	cmp	r3, #0
 801240a:	d014      	beq.n	8012436 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	6812      	ldr	r2, [r2, #0]
 8012416:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801241c:	1d1a      	adds	r2, r3, #4
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012428:	b29b      	uxth	r3, r3
 801242a:	3b02      	subs	r3, #2
 801242c:	b29a      	uxth	r2, r3
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012434:	e037      	b.n	80124a6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801243a:	881a      	ldrh	r2, [r3, #0]
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012444:	1c9a      	adds	r2, r3, #2
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012450:	b29b      	uxth	r3, r3
 8012452:	3b01      	subs	r3, #1
 8012454:	b29a      	uxth	r2, r3
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801245c:	e023      	b.n	80124a6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801245e:	f7f1 f95f 	bl	8003720 <HAL_GetTick>
 8012462:	4602      	mov	r2, r0
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	1ad3      	subs	r3, r2, r3
 8012468:	683a      	ldr	r2, [r7, #0]
 801246a:	429a      	cmp	r2, r3
 801246c:	d803      	bhi.n	8012476 <HAL_SPI_Transmit+0x23a>
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012474:	d102      	bne.n	801247c <HAL_SPI_Transmit+0x240>
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d114      	bne.n	80124a6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801247c:	68f8      	ldr	r0, [r7, #12]
 801247e:	f000 fc7b 	bl	8012d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012488:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2201      	movs	r2, #1
 8012496:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	2200      	movs	r2, #0
 801249e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80124a2:	2303      	movs	r3, #3
 80124a4:	e0b3      	b.n	801260e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d19b      	bne.n	80123ea <HAL_SPI_Transmit+0x1ae>
 80124b2:	e086      	b.n	80125c2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	695b      	ldr	r3, [r3, #20]
 80124ba:	f003 0302 	and.w	r3, r3, #2
 80124be:	2b02      	cmp	r3, #2
 80124c0:	d154      	bne.n	801256c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	2b03      	cmp	r3, #3
 80124cc:	d918      	bls.n	8012500 <HAL_SPI_Transmit+0x2c4>
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124d2:	2b40      	cmp	r3, #64	@ 0x40
 80124d4:	d914      	bls.n	8012500 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	6812      	ldr	r2, [r2, #0]
 80124e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80124e6:	1d1a      	adds	r2, r3, #4
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	3b04      	subs	r3, #4
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80124fe:	e059      	b.n	80125b4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012506:	b29b      	uxth	r3, r3
 8012508:	2b01      	cmp	r3, #1
 801250a:	d917      	bls.n	801253c <HAL_SPI_Transmit+0x300>
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012510:	2b00      	cmp	r3, #0
 8012512:	d013      	beq.n	801253c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012518:	881a      	ldrh	r2, [r3, #0]
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012522:	1c9a      	adds	r2, r3, #2
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801252e:	b29b      	uxth	r3, r3
 8012530:	3b02      	subs	r3, #2
 8012532:	b29a      	uxth	r2, r3
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801253a:	e03b      	b.n	80125b4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	3320      	adds	r3, #32
 8012546:	7812      	ldrb	r2, [r2, #0]
 8012548:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801254e:	1c5a      	adds	r2, r3, #1
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801255a:	b29b      	uxth	r3, r3
 801255c:	3b01      	subs	r3, #1
 801255e:	b29a      	uxth	r2, r3
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012566:	e025      	b.n	80125b4 <HAL_SPI_Transmit+0x378>
 8012568:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801256c:	f7f1 f8d8 	bl	8003720 <HAL_GetTick>
 8012570:	4602      	mov	r2, r0
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	1ad3      	subs	r3, r2, r3
 8012576:	683a      	ldr	r2, [r7, #0]
 8012578:	429a      	cmp	r2, r3
 801257a:	d803      	bhi.n	8012584 <HAL_SPI_Transmit+0x348>
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012582:	d102      	bne.n	801258a <HAL_SPI_Transmit+0x34e>
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d114      	bne.n	80125b4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801258a:	68f8      	ldr	r0, [r7, #12]
 801258c:	f000 fbf4 	bl	8012d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012596:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2201      	movs	r2, #1
 80125a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	2200      	movs	r2, #0
 80125ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80125b0:	2303      	movs	r3, #3
 80125b2:	e02c      	b.n	801260e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	2b00      	cmp	r3, #0
 80125be:	f47f af79 	bne.w	80124b4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	2200      	movs	r2, #0
 80125ca:	2108      	movs	r1, #8
 80125cc:	68f8      	ldr	r0, [r7, #12]
 80125ce:	f000 fc73 	bl	8012eb8 <SPI_WaitOnFlagUntilTimeout>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d007      	beq.n	80125e8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80125de:	f043 0220 	orr.w	r2, r3, #32
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f000 fbc5 	bl	8012d78 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	2201      	movs	r2, #1
 80125f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2200      	movs	r2, #0
 80125fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012604:	2b00      	cmp	r3, #0
 8012606:	d001      	beq.n	801260c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8012608:	2301      	movs	r3, #1
 801260a:	e000      	b.n	801260e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801260c:	2300      	movs	r3, #0
  }
}
 801260e:	4618      	mov	r0, r3
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop

08012618 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b084      	sub	sp, #16
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	4613      	mov	r3, r2
 8012624:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801262c:	b2db      	uxtb	r3, r3
 801262e:	2b01      	cmp	r3, #1
 8012630:	d001      	beq.n	8012636 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8012632:	2302      	movs	r3, #2
 8012634:	e126      	b.n	8012884 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <HAL_SPI_Transmit_DMA+0x2a>
 801263c:	88fb      	ldrh	r3, [r7, #6]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d101      	bne.n	8012646 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8012642:	2301      	movs	r3, #1
 8012644:	e11e      	b.n	8012884 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801264c:	2b01      	cmp	r3, #1
 801264e:	d101      	bne.n	8012654 <HAL_SPI_Transmit_DMA+0x3c>
 8012650:	2302      	movs	r3, #2
 8012652:	e117      	b.n	8012884 <HAL_SPI_Transmit_DMA+0x26c>
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2201      	movs	r2, #1
 8012658:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2203      	movs	r2, #3
 8012660:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2200      	movs	r2, #0
 8012668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	68ba      	ldr	r2, [r7, #8]
 8012670:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	88fa      	ldrh	r2, [r7, #6]
 8012676:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	88fa      	ldrh	r2, [r7, #6]
 801267e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	2200      	movs	r2, #0
 8012686:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	2200      	movs	r2, #0
 801268c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2200      	movs	r2, #0
 8012692:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2200      	movs	r2, #0
 8012698:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2200      	movs	r2, #0
 80126a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80126ac:	d108      	bne.n	80126c0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80126bc:	601a      	str	r2, [r3, #0]
 80126be:	e009      	b.n	80126d4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80126d2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	2b0f      	cmp	r3, #15
 80126da:	d905      	bls.n	80126e8 <HAL_SPI_Transmit_DMA+0xd0>
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126e0:	699b      	ldr	r3, [r3, #24]
 80126e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80126e6:	d10f      	bne.n	8012708 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80126ec:	2b07      	cmp	r3, #7
 80126ee:	d911      	bls.n	8012714 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126f4:	699b      	ldr	r3, [r3, #24]
 80126f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80126fa:	d00b      	beq.n	8012714 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012700:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012706:	d005      	beq.n	8012714 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2200      	movs	r2, #0
 801270c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8012710:	2301      	movs	r3, #1
 8012712:	e0b7      	b.n	8012884 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	2b07      	cmp	r3, #7
 801271a:	d820      	bhi.n	801275e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012720:	699b      	ldr	r3, [r3, #24]
 8012722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012726:	d109      	bne.n	801273c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801272e:	b29b      	uxth	r3, r3
 8012730:	3301      	adds	r3, #1
 8012732:	105b      	asrs	r3, r3, #1
 8012734:	b29a      	uxth	r2, r3
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012740:	699b      	ldr	r3, [r3, #24]
 8012742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012746:	d11e      	bne.n	8012786 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801274e:	b29b      	uxth	r3, r3
 8012750:	3303      	adds	r3, #3
 8012752:	109b      	asrs	r3, r3, #2
 8012754:	b29a      	uxth	r2, r3
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801275c:	e013      	b.n	8012786 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	2b0f      	cmp	r3, #15
 8012764:	d80f      	bhi.n	8012786 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801276a:	699b      	ldr	r3, [r3, #24]
 801276c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012770:	d109      	bne.n	8012786 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012778:	b29b      	uxth	r3, r3
 801277a:	3301      	adds	r3, #1
 801277c:	105b      	asrs	r3, r3, #1
 801277e:	b29a      	uxth	r2, r3
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801278a:	4a40      	ldr	r2, [pc, #256]	@ (801288c <HAL_SPI_Transmit_DMA+0x274>)
 801278c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012792:	4a3f      	ldr	r2, [pc, #252]	@ (8012890 <HAL_SPI_Transmit_DMA+0x278>)
 8012794:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801279a:	4a3e      	ldr	r2, [pc, #248]	@ (8012894 <HAL_SPI_Transmit_DMA+0x27c>)
 801279c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127a2:	2200      	movs	r2, #0
 80127a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	689a      	ldr	r2, [r3, #8]
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80127b4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80127be:	4619      	mov	r1, r3
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	3320      	adds	r3, #32
 80127c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80127ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80127d0:	f7f2 ff78 	bl	80056c4 <HAL_DMA_Start_IT>
 80127d4:	4603      	mov	r3, r0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d011      	beq.n	80127fe <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80127e0:	f043 0210 	orr.w	r2, r3, #16
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	2201      	movs	r2, #1
 80127ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	2200      	movs	r2, #0
 80127f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80127fa:	2301      	movs	r3, #1
 80127fc:	e042      	b.n	8012884 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012802:	69db      	ldr	r3, [r3, #28]
 8012804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012808:	d108      	bne.n	801281c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	6859      	ldr	r1, [r3, #4]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	4b20      	ldr	r3, [pc, #128]	@ (8012898 <HAL_SPI_Transmit_DMA+0x280>)
 8012816:	400b      	ands	r3, r1
 8012818:	6053      	str	r3, [r2, #4]
 801281a:	e009      	b.n	8012830 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	685a      	ldr	r2, [r3, #4]
 8012822:	4b1d      	ldr	r3, [pc, #116]	@ (8012898 <HAL_SPI_Transmit_DMA+0x280>)
 8012824:	4013      	ands	r3, r2
 8012826:	88f9      	ldrh	r1, [r7, #6]
 8012828:	68fa      	ldr	r2, [r7, #12]
 801282a:	6812      	ldr	r2, [r2, #0]
 801282c:	430b      	orrs	r3, r1
 801282e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	689a      	ldr	r2, [r3, #8]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801283e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	691a      	ldr	r2, [r3, #16]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 801284e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	681a      	ldr	r2, [r3, #0]
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	f042 0201 	orr.w	r2, r2, #1
 801285e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012868:	d107      	bne.n	801287a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	681a      	ldr	r2, [r3, #0]
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012878:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2200      	movs	r2, #0
 801287e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8012882:	2300      	movs	r3, #0
}
 8012884:	4618      	mov	r0, r3
 8012886:	3710      	adds	r7, #16
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}
 801288c:	08012ce3 	.word	0x08012ce3
 8012890:	08012c9d 	.word	0x08012c9d
 8012894:	08012cff 	.word	0x08012cff
 8012898:	ffff0000 	.word	0xffff0000

0801289c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b08a      	sub	sp, #40	@ 0x28
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	691b      	ldr	r3, [r3, #16]
 80128aa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	695b      	ldr	r3, [r3, #20]
 80128b2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80128b4:	6a3a      	ldr	r2, [r7, #32]
 80128b6:	69fb      	ldr	r3, [r7, #28]
 80128b8:	4013      	ands	r3, r2
 80128ba:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	689b      	ldr	r3, [r3, #8]
 80128c2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80128c4:	2300      	movs	r3, #0
 80128c6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80128ce:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	3330      	adds	r3, #48	@ 0x30
 80128d6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80128d8:	69fb      	ldr	r3, [r7, #28]
 80128da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d010      	beq.n	8012904 <HAL_SPI_IRQHandler+0x68>
 80128e2:	6a3b      	ldr	r3, [r7, #32]
 80128e4:	f003 0308 	and.w	r3, r3, #8
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d00b      	beq.n	8012904 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	699a      	ldr	r2, [r3, #24]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80128fa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f000 f9c3 	bl	8012c88 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8012902:	e192      	b.n	8012c2a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801290a:	2b00      	cmp	r3, #0
 801290c:	d113      	bne.n	8012936 <HAL_SPI_IRQHandler+0x9a>
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	f003 0320 	and.w	r3, r3, #32
 8012914:	2b00      	cmp	r3, #0
 8012916:	d10e      	bne.n	8012936 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801291e:	2b00      	cmp	r3, #0
 8012920:	d009      	beq.n	8012936 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	4798      	blx	r3
    hspi->RxISR(hspi);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	4798      	blx	r3
    handled = 1UL;
 8012932:	2301      	movs	r3, #1
 8012934:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801293c:	2b00      	cmp	r3, #0
 801293e:	d10f      	bne.n	8012960 <HAL_SPI_IRQHandler+0xc4>
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	f003 0301 	and.w	r3, r3, #1
 8012946:	2b00      	cmp	r3, #0
 8012948:	d00a      	beq.n	8012960 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012950:	2b00      	cmp	r3, #0
 8012952:	d105      	bne.n	8012960 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	4798      	blx	r3
    handled = 1UL;
 801295c:	2301      	movs	r3, #1
 801295e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	f003 0320 	and.w	r3, r3, #32
 8012966:	2b00      	cmp	r3, #0
 8012968:	d10f      	bne.n	801298a <HAL_SPI_IRQHandler+0xee>
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	f003 0302 	and.w	r3, r3, #2
 8012970:	2b00      	cmp	r3, #0
 8012972:	d00a      	beq.n	801298a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012974:	69bb      	ldr	r3, [r7, #24]
 8012976:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801297a:	2b00      	cmp	r3, #0
 801297c:	d105      	bne.n	801298a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	4798      	blx	r3
    handled = 1UL;
 8012986:	2301      	movs	r3, #1
 8012988:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801298c:	2b00      	cmp	r3, #0
 801298e:	f040 8147 	bne.w	8012c20 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	f003 0308 	and.w	r3, r3, #8
 8012998:	2b00      	cmp	r3, #0
 801299a:	f000 808b 	beq.w	8012ab4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	699a      	ldr	r2, [r3, #24]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f042 0208 	orr.w	r2, r2, #8
 80129ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	699a      	ldr	r2, [r3, #24]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f042 0210 	orr.w	r2, r2, #16
 80129bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	699a      	ldr	r2, [r3, #24]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80129cc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	691a      	ldr	r2, [r3, #16]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f022 0208 	bic.w	r2, r2, #8
 80129dc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d13d      	bne.n	8012a68 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80129ec:	e036      	b.n	8012a5c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	2b0f      	cmp	r3, #15
 80129f4:	d90b      	bls.n	8012a0e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681a      	ldr	r2, [r3, #0]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80129fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012a00:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a06:	1d1a      	adds	r2, r3, #4
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	665a      	str	r2, [r3, #100]	@ 0x64
 8012a0c:	e01d      	b.n	8012a4a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	2b07      	cmp	r3, #7
 8012a14:	d90b      	bls.n	8012a2e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a1a:	68fa      	ldr	r2, [r7, #12]
 8012a1c:	8812      	ldrh	r2, [r2, #0]
 8012a1e:	b292      	uxth	r2, r2
 8012a20:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a26:	1c9a      	adds	r2, r3, #2
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	665a      	str	r2, [r3, #100]	@ 0x64
 8012a2c:	e00d      	b.n	8012a4a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a3a:	7812      	ldrb	r2, [r2, #0]
 8012a3c:	b2d2      	uxtb	r2, r2
 8012a3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a44:	1c5a      	adds	r2, r3, #1
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	3b01      	subs	r3, #1
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d1c2      	bne.n	80129ee <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f000 f985 	bl	8012d78 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2201      	movs	r2, #1
 8012a72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d003      	beq.n	8012a88 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f000 f8f7 	bl	8012c74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012a86:	e0d0      	b.n	8012c2a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012a88:	7cfb      	ldrb	r3, [r7, #19]
 8012a8a:	2b05      	cmp	r3, #5
 8012a8c:	d103      	bne.n	8012a96 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f000 f8dc 	bl	8012c4c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012a94:	e0c6      	b.n	8012c24 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012a96:	7cfb      	ldrb	r3, [r7, #19]
 8012a98:	2b04      	cmp	r3, #4
 8012a9a:	d103      	bne.n	8012aa4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f000 f8cb 	bl	8012c38 <HAL_SPI_RxCpltCallback>
    return;
 8012aa2:	e0bf      	b.n	8012c24 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012aa4:	7cfb      	ldrb	r3, [r7, #19]
 8012aa6:	2b03      	cmp	r3, #3
 8012aa8:	f040 80bc 	bne.w	8012c24 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f7ee ff91 	bl	80019d4 <HAL_SPI_TxCpltCallback>
    return;
 8012ab2:	e0b7      	b.n	8012c24 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	f000 80b5 	beq.w	8012c2a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012ac0:	69bb      	ldr	r3, [r7, #24]
 8012ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d00f      	beq.n	8012aea <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ad0:	f043 0204 	orr.w	r2, r3, #4
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	699a      	ldr	r2, [r3, #24]
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012ae8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00f      	beq.n	8012b14 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012afa:	f043 0201 	orr.w	r2, r3, #1
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	699a      	ldr	r2, [r3, #24]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012b12:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012b14:	69bb      	ldr	r3, [r7, #24]
 8012b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00f      	beq.n	8012b3e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b24:	f043 0208 	orr.w	r2, r3, #8
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	699a      	ldr	r2, [r3, #24]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012b3c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012b3e:	69bb      	ldr	r3, [r7, #24]
 8012b40:	f003 0320 	and.w	r3, r3, #32
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d00f      	beq.n	8012b68 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	699a      	ldr	r2, [r3, #24]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f042 0220 	orr.w	r2, r2, #32
 8012b66:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d05a      	beq.n	8012c28 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	f022 0201 	bic.w	r2, r2, #1
 8012b80:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	6919      	ldr	r1, [r3, #16]
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	4b28      	ldr	r3, [pc, #160]	@ (8012c30 <HAL_SPI_IRQHandler+0x394>)
 8012b8e:	400b      	ands	r3, r1
 8012b90:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012b98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8012b9c:	d138      	bne.n	8012c10 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	689a      	ldr	r2, [r3, #8]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8012bac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d013      	beq.n	8012bde <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012bba:	4a1e      	ldr	r2, [pc, #120]	@ (8012c34 <HAL_SPI_IRQHandler+0x398>)
 8012bbc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7f3 fb06 	bl	80061d4 <HAL_DMA_Abort_IT>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d007      	beq.n	8012bde <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012bd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d020      	beq.n	8012c28 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bea:	4a12      	ldr	r2, [pc, #72]	@ (8012c34 <HAL_SPI_IRQHandler+0x398>)
 8012bec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7f3 faee 	bl	80061d4 <HAL_DMA_Abort_IT>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d014      	beq.n	8012c28 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012c0e:	e00b      	b.n	8012c28 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2201      	movs	r2, #1
 8012c14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f000 f82b 	bl	8012c74 <HAL_SPI_ErrorCallback>
    return;
 8012c1e:	e003      	b.n	8012c28 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012c20:	bf00      	nop
 8012c22:	e002      	b.n	8012c2a <HAL_SPI_IRQHandler+0x38e>
    return;
 8012c24:	bf00      	nop
 8012c26:	e000      	b.n	8012c2a <HAL_SPI_IRQHandler+0x38e>
    return;
 8012c28:	bf00      	nop
  }
}
 8012c2a:	3728      	adds	r7, #40	@ 0x28
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	fffffc94 	.word	0xfffffc94
 8012c34:	08012d45 	.word	0x08012d45

08012c38 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b083      	sub	sp, #12
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012c40:	bf00      	nop
 8012c42:	370c      	adds	r7, #12
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr

08012c4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012c54:	bf00      	nop
 8012c56:	370c      	adds	r7, #12
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr

08012c60 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8012c68:	bf00      	nop
 8012c6a:	370c      	adds	r7, #12
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr

08012c74 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012c7c:	bf00      	nop
 8012c7e:	370c      	adds	r7, #12
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr

08012c88 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012c90:	bf00      	nop
 8012c92:	370c      	adds	r7, #12
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr

08012c9c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ca8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	2b07      	cmp	r3, #7
 8012cb4:	d011      	beq.n	8012cda <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012cba:	69db      	ldr	r3, [r3, #28]
 8012cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012cc0:	d103      	bne.n	8012cca <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8012cc2:	68f8      	ldr	r0, [r7, #12]
 8012cc4:	f7ee fe86 	bl	80019d4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012cc8:	e007      	b.n	8012cda <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	691a      	ldr	r2, [r3, #16]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	f042 0208 	orr.w	r2, r2, #8
 8012cd8:	611a      	str	r2, [r3, #16]
}
 8012cda:	bf00      	nop
 8012cdc:	3710      	adds	r7, #16
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}

08012ce2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012ce2:	b580      	push	{r7, lr}
 8012ce4:	b084      	sub	sp, #16
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cee:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	f7ff ffb5 	bl	8012c60 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012cf6:	bf00      	nop
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b084      	sub	sp, #16
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d0a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f7f4 fbdf 	bl	80074d0 <HAL_DMA_GetError>
 8012d12:	4603      	mov	r3, r0
 8012d14:	2b02      	cmp	r3, #2
 8012d16:	d011      	beq.n	8012d3c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	f000 f82d 	bl	8012d78 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012d24:	f043 0210 	orr.w	r2, r3, #16
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	2201      	movs	r2, #1
 8012d32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012d36:	68f8      	ldr	r0, [r7, #12]
 8012d38:	f7ff ff9c 	bl	8012c74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012d3c:	bf00      	nop
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	2200      	movs	r2, #0
 8012d56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	2201      	movs	r2, #1
 8012d66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012d6a:	68f8      	ldr	r0, [r7, #12]
 8012d6c:	f7ff ff82 	bl	8012c74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012d70:	bf00      	nop
 8012d72:	3710      	adds	r7, #16
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b085      	sub	sp, #20
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	695b      	ldr	r3, [r3, #20]
 8012d86:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	699a      	ldr	r2, [r3, #24]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	f042 0208 	orr.w	r2, r2, #8
 8012d96:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	699a      	ldr	r2, [r3, #24]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f042 0210 	orr.w	r2, r2, #16
 8012da6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	f022 0201 	bic.w	r2, r2, #1
 8012db6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	6919      	ldr	r1, [r3, #16]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8012eb4 <SPI_CloseTransfer+0x13c>)
 8012dc4:	400b      	ands	r3, r1
 8012dc6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	689a      	ldr	r2, [r3, #8]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8012dd6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	2b04      	cmp	r3, #4
 8012de2:	d014      	beq.n	8012e0e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f003 0320 	and.w	r3, r3, #32
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d00f      	beq.n	8012e0e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012df4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	699a      	ldr	r2, [r3, #24]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	f042 0220 	orr.w	r2, r2, #32
 8012e0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012e14:	b2db      	uxtb	r3, r3
 8012e16:	2b03      	cmp	r3, #3
 8012e18:	d014      	beq.n	8012e44 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d00f      	beq.n	8012e44 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e2a:	f043 0204 	orr.w	r2, r3, #4
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	699a      	ldr	r2, [r3, #24]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012e42:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00f      	beq.n	8012e6e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e54:	f043 0201 	orr.w	r2, r3, #1
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	699a      	ldr	r2, [r3, #24]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012e6c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d00f      	beq.n	8012e98 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e7e:	f043 0208 	orr.w	r2, r3, #8
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	699a      	ldr	r2, [r3, #24]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012e96:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8012ea8:	bf00      	nop
 8012eaa:	3714      	adds	r7, #20
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr
 8012eb4:	fffffc90 	.word	0xfffffc90

08012eb8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	603b      	str	r3, [r7, #0]
 8012ec4:	4613      	mov	r3, r2
 8012ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012ec8:	e010      	b.n	8012eec <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012eca:	f7f0 fc29 	bl	8003720 <HAL_GetTick>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	683a      	ldr	r2, [r7, #0]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d803      	bhi.n	8012ee2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee0:	d102      	bne.n	8012ee8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d101      	bne.n	8012eec <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8012ee8:	2303      	movs	r3, #3
 8012eea:	e00f      	b.n	8012f0c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	695a      	ldr	r2, [r3, #20]
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	4013      	ands	r3, r2
 8012ef6:	68ba      	ldr	r2, [r7, #8]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	bf0c      	ite	eq
 8012efc:	2301      	moveq	r3, #1
 8012efe:	2300      	movne	r3, #0
 8012f00:	b2db      	uxtb	r3, r3
 8012f02:	461a      	mov	r2, r3
 8012f04:	79fb      	ldrb	r3, [r7, #7]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d0df      	beq.n	8012eca <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8012f0a:	2300      	movs	r3, #0
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b085      	sub	sp, #20
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f20:	095b      	lsrs	r3, r3, #5
 8012f22:	3301      	adds	r3, #1
 8012f24:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	68db      	ldr	r3, [r3, #12]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	3307      	adds	r3, #7
 8012f32:	08db      	lsrs	r3, r3, #3
 8012f34:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	68fa      	ldr	r2, [r7, #12]
 8012f3a:	fb02 f303 	mul.w	r3, r2, r3
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3714      	adds	r7, #20
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr

08012f4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012f4a:	b580      	push	{r7, lr}
 8012f4c:	b082      	sub	sp, #8
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d101      	bne.n	8012f5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	e049      	b.n	8012ff0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012f62:	b2db      	uxtb	r3, r3
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d106      	bne.n	8012f76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f7ef fbdb 	bl	800272c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2202      	movs	r2, #2
 8012f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	3304      	adds	r3, #4
 8012f86:	4619      	mov	r1, r3
 8012f88:	4610      	mov	r0, r2
 8012f8a:	f000 fadf 	bl	801354c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2201      	movs	r2, #1
 8012f92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2201      	movs	r2, #1
 8012f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2201      	movs	r2, #1
 8012faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2201      	movs	r2, #1
 8012fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2201      	movs	r2, #1
 8012fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2201      	movs	r2, #1
 8012fca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2201      	movs	r2, #1
 8012fd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2201      	movs	r2, #1
 8012fda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2201      	movs	r2, #1
 8012fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012fee:	2300      	movs	r3, #0
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3708      	adds	r7, #8
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b085      	sub	sp, #20
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013006:	b2db      	uxtb	r3, r3
 8013008:	2b01      	cmp	r3, #1
 801300a:	d001      	beq.n	8013010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801300c:	2301      	movs	r3, #1
 801300e:	e054      	b.n	80130ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2202      	movs	r2, #2
 8013014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	68da      	ldr	r2, [r3, #12]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f042 0201 	orr.w	r2, r2, #1
 8013026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4a26      	ldr	r2, [pc, #152]	@ (80130c8 <HAL_TIM_Base_Start_IT+0xd0>)
 801302e:	4293      	cmp	r3, r2
 8013030:	d022      	beq.n	8013078 <HAL_TIM_Base_Start_IT+0x80>
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801303a:	d01d      	beq.n	8013078 <HAL_TIM_Base_Start_IT+0x80>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	4a22      	ldr	r2, [pc, #136]	@ (80130cc <HAL_TIM_Base_Start_IT+0xd4>)
 8013042:	4293      	cmp	r3, r2
 8013044:	d018      	beq.n	8013078 <HAL_TIM_Base_Start_IT+0x80>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	4a21      	ldr	r2, [pc, #132]	@ (80130d0 <HAL_TIM_Base_Start_IT+0xd8>)
 801304c:	4293      	cmp	r3, r2
 801304e:	d013      	beq.n	8013078 <HAL_TIM_Base_Start_IT+0x80>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	4a1f      	ldr	r2, [pc, #124]	@ (80130d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8013056:	4293      	cmp	r3, r2
 8013058:	d00e      	beq.n	8013078 <HAL_TIM_Base_Start_IT+0x80>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	4a1e      	ldr	r2, [pc, #120]	@ (80130d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8013060:	4293      	cmp	r3, r2
 8013062:	d009      	beq.n	8013078 <HAL_TIM_Base_Start_IT+0x80>
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4a1c      	ldr	r2, [pc, #112]	@ (80130dc <HAL_TIM_Base_Start_IT+0xe4>)
 801306a:	4293      	cmp	r3, r2
 801306c:	d004      	beq.n	8013078 <HAL_TIM_Base_Start_IT+0x80>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	4a1b      	ldr	r2, [pc, #108]	@ (80130e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8013074:	4293      	cmp	r3, r2
 8013076:	d115      	bne.n	80130a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	689a      	ldr	r2, [r3, #8]
 801307e:	4b19      	ldr	r3, [pc, #100]	@ (80130e4 <HAL_TIM_Base_Start_IT+0xec>)
 8013080:	4013      	ands	r3, r2
 8013082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	2b06      	cmp	r3, #6
 8013088:	d015      	beq.n	80130b6 <HAL_TIM_Base_Start_IT+0xbe>
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013090:	d011      	beq.n	80130b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	f042 0201 	orr.w	r2, r2, #1
 80130a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130a2:	e008      	b.n	80130b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	681a      	ldr	r2, [r3, #0]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f042 0201 	orr.w	r2, r2, #1
 80130b2:	601a      	str	r2, [r3, #0]
 80130b4:	e000      	b.n	80130b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80130b8:	2300      	movs	r3, #0
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3714      	adds	r7, #20
 80130be:	46bd      	mov	sp, r7
 80130c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c4:	4770      	bx	lr
 80130c6:	bf00      	nop
 80130c8:	40010000 	.word	0x40010000
 80130cc:	40000400 	.word	0x40000400
 80130d0:	40000800 	.word	0x40000800
 80130d4:	40000c00 	.word	0x40000c00
 80130d8:	40010400 	.word	0x40010400
 80130dc:	40001800 	.word	0x40001800
 80130e0:	40014000 	.word	0x40014000
 80130e4:	00010007 	.word	0x00010007

080130e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b084      	sub	sp, #16
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	691b      	ldr	r3, [r3, #16]
 80130fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	f003 0302 	and.w	r3, r3, #2
 8013106:	2b00      	cmp	r3, #0
 8013108:	d020      	beq.n	801314c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f003 0302 	and.w	r3, r3, #2
 8013110:	2b00      	cmp	r3, #0
 8013112:	d01b      	beq.n	801314c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f06f 0202 	mvn.w	r2, #2
 801311c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2201      	movs	r2, #1
 8013122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	699b      	ldr	r3, [r3, #24]
 801312a:	f003 0303 	and.w	r3, r3, #3
 801312e:	2b00      	cmp	r3, #0
 8013130:	d003      	beq.n	801313a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f000 f9ec 	bl	8013510 <HAL_TIM_IC_CaptureCallback>
 8013138:	e005      	b.n	8013146 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f000 f9de 	bl	80134fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f000 f9ef 	bl	8013524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	f003 0304 	and.w	r3, r3, #4
 8013152:	2b00      	cmp	r3, #0
 8013154:	d020      	beq.n	8013198 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f003 0304 	and.w	r3, r3, #4
 801315c:	2b00      	cmp	r3, #0
 801315e:	d01b      	beq.n	8013198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f06f 0204 	mvn.w	r2, #4
 8013168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2202      	movs	r2, #2
 801316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	699b      	ldr	r3, [r3, #24]
 8013176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801317a:	2b00      	cmp	r3, #0
 801317c:	d003      	beq.n	8013186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f000 f9c6 	bl	8013510 <HAL_TIM_IC_CaptureCallback>
 8013184:	e005      	b.n	8013192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f000 f9b8 	bl	80134fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f000 f9c9 	bl	8013524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	f003 0308 	and.w	r3, r3, #8
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d020      	beq.n	80131e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f003 0308 	and.w	r3, r3, #8
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d01b      	beq.n	80131e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f06f 0208 	mvn.w	r2, #8
 80131b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2204      	movs	r2, #4
 80131ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	69db      	ldr	r3, [r3, #28]
 80131c2:	f003 0303 	and.w	r3, r3, #3
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d003      	beq.n	80131d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 f9a0 	bl	8013510 <HAL_TIM_IC_CaptureCallback>
 80131d0:	e005      	b.n	80131de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 f992 	bl	80134fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f000 f9a3 	bl	8013524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2200      	movs	r2, #0
 80131e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	f003 0310 	and.w	r3, r3, #16
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d020      	beq.n	8013230 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	f003 0310 	and.w	r3, r3, #16
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d01b      	beq.n	8013230 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	f06f 0210 	mvn.w	r2, #16
 8013200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2208      	movs	r2, #8
 8013206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	69db      	ldr	r3, [r3, #28]
 801320e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013212:	2b00      	cmp	r3, #0
 8013214:	d003      	beq.n	801321e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f000 f97a 	bl	8013510 <HAL_TIM_IC_CaptureCallback>
 801321c:	e005      	b.n	801322a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f000 f96c 	bl	80134fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 f97d 	bl	8013524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2200      	movs	r2, #0
 801322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	f003 0301 	and.w	r3, r3, #1
 8013236:	2b00      	cmp	r3, #0
 8013238:	d00c      	beq.n	8013254 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	f003 0301 	and.w	r3, r3, #1
 8013240:	2b00      	cmp	r3, #0
 8013242:	d007      	beq.n	8013254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f06f 0201 	mvn.w	r2, #1
 801324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 f94a 	bl	80134e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801325a:	2b00      	cmp	r3, #0
 801325c:	d104      	bne.n	8013268 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013264:	2b00      	cmp	r3, #0
 8013266:	d00c      	beq.n	8013282 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801326e:	2b00      	cmp	r3, #0
 8013270:	d007      	beq.n	8013282 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801327a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f000 fb3b 	bl	80138f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013288:	2b00      	cmp	r3, #0
 801328a:	d00c      	beq.n	80132a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013292:	2b00      	cmp	r3, #0
 8013294:	d007      	beq.n	80132a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801329e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f000 fb33 	bl	801390c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d00c      	beq.n	80132ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d007      	beq.n	80132ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80132c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 f937 	bl	8013538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	f003 0320 	and.w	r3, r3, #32
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d00c      	beq.n	80132ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f003 0320 	and.w	r3, r3, #32
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d007      	beq.n	80132ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	f06f 0220 	mvn.w	r2, #32
 80132e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f000 fafb 	bl	80138e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80132ee:	bf00      	nop
 80132f0:	3710      	adds	r7, #16
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
	...

080132f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013302:	2300      	movs	r3, #0
 8013304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801330c:	2b01      	cmp	r3, #1
 801330e:	d101      	bne.n	8013314 <HAL_TIM_ConfigClockSource+0x1c>
 8013310:	2302      	movs	r3, #2
 8013312:	e0dc      	b.n	80134ce <HAL_TIM_ConfigClockSource+0x1d6>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2201      	movs	r2, #1
 8013318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2202      	movs	r2, #2
 8013320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	689b      	ldr	r3, [r3, #8]
 801332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801332c:	68ba      	ldr	r2, [r7, #8]
 801332e:	4b6a      	ldr	r3, [pc, #424]	@ (80134d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013330:	4013      	ands	r3, r2
 8013332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801333a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	68ba      	ldr	r2, [r7, #8]
 8013342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4a64      	ldr	r2, [pc, #400]	@ (80134dc <HAL_TIM_ConfigClockSource+0x1e4>)
 801334a:	4293      	cmp	r3, r2
 801334c:	f000 80a9 	beq.w	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013350:	4a62      	ldr	r2, [pc, #392]	@ (80134dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8013352:	4293      	cmp	r3, r2
 8013354:	f200 80ae 	bhi.w	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013358:	4a61      	ldr	r2, [pc, #388]	@ (80134e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801335a:	4293      	cmp	r3, r2
 801335c:	f000 80a1 	beq.w	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013360:	4a5f      	ldr	r2, [pc, #380]	@ (80134e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013362:	4293      	cmp	r3, r2
 8013364:	f200 80a6 	bhi.w	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013368:	4a5e      	ldr	r2, [pc, #376]	@ (80134e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801336a:	4293      	cmp	r3, r2
 801336c:	f000 8099 	beq.w	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013370:	4a5c      	ldr	r2, [pc, #368]	@ (80134e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013372:	4293      	cmp	r3, r2
 8013374:	f200 809e 	bhi.w	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013378:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801337c:	f000 8091 	beq.w	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013380:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013384:	f200 8096 	bhi.w	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013388:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801338c:	f000 8089 	beq.w	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013390:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013394:	f200 808e 	bhi.w	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801339c:	d03e      	beq.n	801341c <HAL_TIM_ConfigClockSource+0x124>
 801339e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80133a2:	f200 8087 	bhi.w	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80133aa:	f000 8086 	beq.w	80134ba <HAL_TIM_ConfigClockSource+0x1c2>
 80133ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80133b2:	d87f      	bhi.n	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133b4:	2b70      	cmp	r3, #112	@ 0x70
 80133b6:	d01a      	beq.n	80133ee <HAL_TIM_ConfigClockSource+0xf6>
 80133b8:	2b70      	cmp	r3, #112	@ 0x70
 80133ba:	d87b      	bhi.n	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133bc:	2b60      	cmp	r3, #96	@ 0x60
 80133be:	d050      	beq.n	8013462 <HAL_TIM_ConfigClockSource+0x16a>
 80133c0:	2b60      	cmp	r3, #96	@ 0x60
 80133c2:	d877      	bhi.n	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133c4:	2b50      	cmp	r3, #80	@ 0x50
 80133c6:	d03c      	beq.n	8013442 <HAL_TIM_ConfigClockSource+0x14a>
 80133c8:	2b50      	cmp	r3, #80	@ 0x50
 80133ca:	d873      	bhi.n	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133cc:	2b40      	cmp	r3, #64	@ 0x40
 80133ce:	d058      	beq.n	8013482 <HAL_TIM_ConfigClockSource+0x18a>
 80133d0:	2b40      	cmp	r3, #64	@ 0x40
 80133d2:	d86f      	bhi.n	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133d4:	2b30      	cmp	r3, #48	@ 0x30
 80133d6:	d064      	beq.n	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133d8:	2b30      	cmp	r3, #48	@ 0x30
 80133da:	d86b      	bhi.n	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133dc:	2b20      	cmp	r3, #32
 80133de:	d060      	beq.n	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133e0:	2b20      	cmp	r3, #32
 80133e2:	d867      	bhi.n	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d05c      	beq.n	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133e8:	2b10      	cmp	r3, #16
 80133ea:	d05a      	beq.n	80134a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133ec:	e062      	b.n	80134b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80133fe:	f000 f9c3 	bl	8013788 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	689b      	ldr	r3, [r3, #8]
 8013408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	68ba      	ldr	r2, [r7, #8]
 8013418:	609a      	str	r2, [r3, #8]
      break;
 801341a:	e04f      	b.n	80134bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801342c:	f000 f9ac 	bl	8013788 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	689a      	ldr	r2, [r3, #8]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801343e:	609a      	str	r2, [r3, #8]
      break;
 8013440:	e03c      	b.n	80134bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801344e:	461a      	mov	r2, r3
 8013450:	f000 f91c 	bl	801368c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	2150      	movs	r1, #80	@ 0x50
 801345a:	4618      	mov	r0, r3
 801345c:	f000 f976 	bl	801374c <TIM_ITRx_SetConfig>
      break;
 8013460:	e02c      	b.n	80134bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801346e:	461a      	mov	r2, r3
 8013470:	f000 f93b 	bl	80136ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	2160      	movs	r1, #96	@ 0x60
 801347a:	4618      	mov	r0, r3
 801347c:	f000 f966 	bl	801374c <TIM_ITRx_SetConfig>
      break;
 8013480:	e01c      	b.n	80134bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801348e:	461a      	mov	r2, r3
 8013490:	f000 f8fc 	bl	801368c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2140      	movs	r1, #64	@ 0x40
 801349a:	4618      	mov	r0, r3
 801349c:	f000 f956 	bl	801374c <TIM_ITRx_SetConfig>
      break;
 80134a0:	e00c      	b.n	80134bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681a      	ldr	r2, [r3, #0]
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	4619      	mov	r1, r3
 80134ac:	4610      	mov	r0, r2
 80134ae:	f000 f94d 	bl	801374c <TIM_ITRx_SetConfig>
      break;
 80134b2:	e003      	b.n	80134bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80134b4:	2301      	movs	r3, #1
 80134b6:	73fb      	strb	r3, [r7, #15]
      break;
 80134b8:	e000      	b.n	80134bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80134ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2201      	movs	r2, #1
 80134c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2200      	movs	r2, #0
 80134c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80134cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3710      	adds	r7, #16
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	ffceff88 	.word	0xffceff88
 80134dc:	00100040 	.word	0x00100040
 80134e0:	00100030 	.word	0x00100030
 80134e4:	00100020 	.word	0x00100020

080134e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80134e8:	b480      	push	{r7}
 80134ea:	b083      	sub	sp, #12
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80134f0:	bf00      	nop
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr

080134fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b083      	sub	sp, #12
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013504:	bf00      	nop
 8013506:	370c      	adds	r7, #12
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr

08013510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013518:	bf00      	nop
 801351a:	370c      	adds	r7, #12
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr

08013524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801352c:	bf00      	nop
 801352e:	370c      	adds	r7, #12
 8013530:	46bd      	mov	sp, r7
 8013532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013536:	4770      	bx	lr

08013538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013538:	b480      	push	{r7}
 801353a:	b083      	sub	sp, #12
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013540:	bf00      	nop
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801354c:	b480      	push	{r7}
 801354e:	b085      	sub	sp, #20
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	4a43      	ldr	r2, [pc, #268]	@ (801366c <TIM_Base_SetConfig+0x120>)
 8013560:	4293      	cmp	r3, r2
 8013562:	d013      	beq.n	801358c <TIM_Base_SetConfig+0x40>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801356a:	d00f      	beq.n	801358c <TIM_Base_SetConfig+0x40>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	4a40      	ldr	r2, [pc, #256]	@ (8013670 <TIM_Base_SetConfig+0x124>)
 8013570:	4293      	cmp	r3, r2
 8013572:	d00b      	beq.n	801358c <TIM_Base_SetConfig+0x40>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4a3f      	ldr	r2, [pc, #252]	@ (8013674 <TIM_Base_SetConfig+0x128>)
 8013578:	4293      	cmp	r3, r2
 801357a:	d007      	beq.n	801358c <TIM_Base_SetConfig+0x40>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	4a3e      	ldr	r2, [pc, #248]	@ (8013678 <TIM_Base_SetConfig+0x12c>)
 8013580:	4293      	cmp	r3, r2
 8013582:	d003      	beq.n	801358c <TIM_Base_SetConfig+0x40>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	4a3d      	ldr	r2, [pc, #244]	@ (801367c <TIM_Base_SetConfig+0x130>)
 8013588:	4293      	cmp	r3, r2
 801358a:	d108      	bne.n	801359e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	4313      	orrs	r3, r2
 801359c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	4a32      	ldr	r2, [pc, #200]	@ (801366c <TIM_Base_SetConfig+0x120>)
 80135a2:	4293      	cmp	r3, r2
 80135a4:	d01f      	beq.n	80135e6 <TIM_Base_SetConfig+0x9a>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135ac:	d01b      	beq.n	80135e6 <TIM_Base_SetConfig+0x9a>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4a2f      	ldr	r2, [pc, #188]	@ (8013670 <TIM_Base_SetConfig+0x124>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d017      	beq.n	80135e6 <TIM_Base_SetConfig+0x9a>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	4a2e      	ldr	r2, [pc, #184]	@ (8013674 <TIM_Base_SetConfig+0x128>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d013      	beq.n	80135e6 <TIM_Base_SetConfig+0x9a>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	4a2d      	ldr	r2, [pc, #180]	@ (8013678 <TIM_Base_SetConfig+0x12c>)
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d00f      	beq.n	80135e6 <TIM_Base_SetConfig+0x9a>
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	4a2c      	ldr	r2, [pc, #176]	@ (801367c <TIM_Base_SetConfig+0x130>)
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d00b      	beq.n	80135e6 <TIM_Base_SetConfig+0x9a>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	4a2b      	ldr	r2, [pc, #172]	@ (8013680 <TIM_Base_SetConfig+0x134>)
 80135d2:	4293      	cmp	r3, r2
 80135d4:	d007      	beq.n	80135e6 <TIM_Base_SetConfig+0x9a>
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4a2a      	ldr	r2, [pc, #168]	@ (8013684 <TIM_Base_SetConfig+0x138>)
 80135da:	4293      	cmp	r3, r2
 80135dc:	d003      	beq.n	80135e6 <TIM_Base_SetConfig+0x9a>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4a29      	ldr	r2, [pc, #164]	@ (8013688 <TIM_Base_SetConfig+0x13c>)
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d108      	bne.n	80135f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80135ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	68fa      	ldr	r2, [r7, #12]
 80135f4:	4313      	orrs	r3, r2
 80135f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	695b      	ldr	r3, [r3, #20]
 8013602:	4313      	orrs	r3, r2
 8013604:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	689a      	ldr	r2, [r3, #8]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	4a14      	ldr	r2, [pc, #80]	@ (801366c <TIM_Base_SetConfig+0x120>)
 801361a:	4293      	cmp	r3, r2
 801361c:	d00f      	beq.n	801363e <TIM_Base_SetConfig+0xf2>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4a16      	ldr	r2, [pc, #88]	@ (801367c <TIM_Base_SetConfig+0x130>)
 8013622:	4293      	cmp	r3, r2
 8013624:	d00b      	beq.n	801363e <TIM_Base_SetConfig+0xf2>
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4a15      	ldr	r2, [pc, #84]	@ (8013680 <TIM_Base_SetConfig+0x134>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d007      	beq.n	801363e <TIM_Base_SetConfig+0xf2>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4a14      	ldr	r2, [pc, #80]	@ (8013684 <TIM_Base_SetConfig+0x138>)
 8013632:	4293      	cmp	r3, r2
 8013634:	d003      	beq.n	801363e <TIM_Base_SetConfig+0xf2>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4a13      	ldr	r2, [pc, #76]	@ (8013688 <TIM_Base_SetConfig+0x13c>)
 801363a:	4293      	cmp	r3, r2
 801363c:	d103      	bne.n	8013646 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	691a      	ldr	r2, [r3, #16]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	f043 0204 	orr.w	r2, r3, #4
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2201      	movs	r2, #1
 8013656:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	601a      	str	r2, [r3, #0]
}
 801365e:	bf00      	nop
 8013660:	3714      	adds	r7, #20
 8013662:	46bd      	mov	sp, r7
 8013664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013668:	4770      	bx	lr
 801366a:	bf00      	nop
 801366c:	40010000 	.word	0x40010000
 8013670:	40000400 	.word	0x40000400
 8013674:	40000800 	.word	0x40000800
 8013678:	40000c00 	.word	0x40000c00
 801367c:	40010400 	.word	0x40010400
 8013680:	40014000 	.word	0x40014000
 8013684:	40014400 	.word	0x40014400
 8013688:	40014800 	.word	0x40014800

0801368c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801368c:	b480      	push	{r7}
 801368e:	b087      	sub	sp, #28
 8013690:	af00      	add	r7, sp, #0
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	60b9      	str	r1, [r7, #8]
 8013696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	6a1b      	ldr	r3, [r3, #32]
 801369c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	6a1b      	ldr	r3, [r3, #32]
 80136a2:	f023 0201 	bic.w	r2, r3, #1
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	699b      	ldr	r3, [r3, #24]
 80136ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80136b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	011b      	lsls	r3, r3, #4
 80136bc:	693a      	ldr	r2, [r7, #16]
 80136be:	4313      	orrs	r3, r2
 80136c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	f023 030a 	bic.w	r3, r3, #10
 80136c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80136ca:	697a      	ldr	r2, [r7, #20]
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	693a      	ldr	r2, [r7, #16]
 80136d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	697a      	ldr	r2, [r7, #20]
 80136dc:	621a      	str	r2, [r3, #32]
}
 80136de:	bf00      	nop
 80136e0:	371c      	adds	r7, #28
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr

080136ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80136ea:	b480      	push	{r7}
 80136ec:	b087      	sub	sp, #28
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	60f8      	str	r0, [r7, #12]
 80136f2:	60b9      	str	r1, [r7, #8]
 80136f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	6a1b      	ldr	r3, [r3, #32]
 80136fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	6a1b      	ldr	r3, [r3, #32]
 8013700:	f023 0210 	bic.w	r2, r3, #16
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	699b      	ldr	r3, [r3, #24]
 801370c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	031b      	lsls	r3, r3, #12
 801371a:	693a      	ldr	r2, [r7, #16]
 801371c:	4313      	orrs	r3, r2
 801371e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013726:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	011b      	lsls	r3, r3, #4
 801372c:	697a      	ldr	r2, [r7, #20]
 801372e:	4313      	orrs	r3, r2
 8013730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	693a      	ldr	r2, [r7, #16]
 8013736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	697a      	ldr	r2, [r7, #20]
 801373c:	621a      	str	r2, [r3, #32]
}
 801373e:	bf00      	nop
 8013740:	371c      	adds	r7, #28
 8013742:	46bd      	mov	sp, r7
 8013744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013748:	4770      	bx	lr
	...

0801374c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801374c:	b480      	push	{r7}
 801374e:	b085      	sub	sp, #20
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	689b      	ldr	r3, [r3, #8]
 801375a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801375c:	68fa      	ldr	r2, [r7, #12]
 801375e:	4b09      	ldr	r3, [pc, #36]	@ (8013784 <TIM_ITRx_SetConfig+0x38>)
 8013760:	4013      	ands	r3, r2
 8013762:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013764:	683a      	ldr	r2, [r7, #0]
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	4313      	orrs	r3, r2
 801376a:	f043 0307 	orr.w	r3, r3, #7
 801376e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	68fa      	ldr	r2, [r7, #12]
 8013774:	609a      	str	r2, [r3, #8]
}
 8013776:	bf00      	nop
 8013778:	3714      	adds	r7, #20
 801377a:	46bd      	mov	sp, r7
 801377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013780:	4770      	bx	lr
 8013782:	bf00      	nop
 8013784:	ffcfff8f 	.word	0xffcfff8f

08013788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013788:	b480      	push	{r7}
 801378a:	b087      	sub	sp, #28
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	607a      	str	r2, [r7, #4]
 8013794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	689b      	ldr	r3, [r3, #8]
 801379a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80137a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	021a      	lsls	r2, r3, #8
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	431a      	orrs	r2, r3
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	4313      	orrs	r3, r2
 80137b0:	697a      	ldr	r2, [r7, #20]
 80137b2:	4313      	orrs	r3, r2
 80137b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	697a      	ldr	r2, [r7, #20]
 80137ba:	609a      	str	r2, [r3, #8]
}
 80137bc:	bf00      	nop
 80137be:	371c      	adds	r7, #28
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr

080137c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b085      	sub	sp, #20
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80137d8:	2b01      	cmp	r3, #1
 80137da:	d101      	bne.n	80137e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80137dc:	2302      	movs	r3, #2
 80137de:	e06d      	b.n	80138bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2201      	movs	r2, #1
 80137e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2202      	movs	r2, #2
 80137ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	685b      	ldr	r3, [r3, #4]
 80137f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4a30      	ldr	r2, [pc, #192]	@ (80138c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013806:	4293      	cmp	r3, r2
 8013808:	d004      	beq.n	8013814 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	4a2f      	ldr	r2, [pc, #188]	@ (80138cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013810:	4293      	cmp	r3, r2
 8013812:	d108      	bne.n	8013826 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801381a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	685b      	ldr	r3, [r3, #4]
 8013820:	68fa      	ldr	r2, [r7, #12]
 8013822:	4313      	orrs	r3, r2
 8013824:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801382c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	68fa      	ldr	r2, [r7, #12]
 8013834:	4313      	orrs	r3, r2
 8013836:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	68fa      	ldr	r2, [r7, #12]
 801383e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	4a20      	ldr	r2, [pc, #128]	@ (80138c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013846:	4293      	cmp	r3, r2
 8013848:	d022      	beq.n	8013890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013852:	d01d      	beq.n	8013890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	4a1d      	ldr	r2, [pc, #116]	@ (80138d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801385a:	4293      	cmp	r3, r2
 801385c:	d018      	beq.n	8013890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	4a1c      	ldr	r2, [pc, #112]	@ (80138d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013864:	4293      	cmp	r3, r2
 8013866:	d013      	beq.n	8013890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	4a1a      	ldr	r2, [pc, #104]	@ (80138d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801386e:	4293      	cmp	r3, r2
 8013870:	d00e      	beq.n	8013890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	4a15      	ldr	r2, [pc, #84]	@ (80138cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013878:	4293      	cmp	r3, r2
 801387a:	d009      	beq.n	8013890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	4a16      	ldr	r2, [pc, #88]	@ (80138dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013882:	4293      	cmp	r3, r2
 8013884:	d004      	beq.n	8013890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	4a15      	ldr	r2, [pc, #84]	@ (80138e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801388c:	4293      	cmp	r3, r2
 801388e:	d10c      	bne.n	80138aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	689b      	ldr	r3, [r3, #8]
 801389c:	68ba      	ldr	r2, [r7, #8]
 801389e:	4313      	orrs	r3, r2
 80138a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	68ba      	ldr	r2, [r7, #8]
 80138a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2201      	movs	r2, #1
 80138ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3714      	adds	r7, #20
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr
 80138c8:	40010000 	.word	0x40010000
 80138cc:	40010400 	.word	0x40010400
 80138d0:	40000400 	.word	0x40000400
 80138d4:	40000800 	.word	0x40000800
 80138d8:	40000c00 	.word	0x40000c00
 80138dc:	40001800 	.word	0x40001800
 80138e0:	40014000 	.word	0x40014000

080138e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80138e4:	b480      	push	{r7}
 80138e6:	b083      	sub	sp, #12
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80138ec:	bf00      	nop
 80138ee:	370c      	adds	r7, #12
 80138f0:	46bd      	mov	sp, r7
 80138f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f6:	4770      	bx	lr

080138f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b083      	sub	sp, #12
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013900:	bf00      	nop
 8013902:	370c      	adds	r7, #12
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr

0801390c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013914:	bf00      	nop
 8013916:	370c      	adds	r7, #12
 8013918:	46bd      	mov	sp, r7
 801391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391e:	4770      	bx	lr

08013920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b082      	sub	sp, #8
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d101      	bne.n	8013932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801392e:	2301      	movs	r3, #1
 8013930:	e042      	b.n	80139b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013938:	2b00      	cmp	r3, #0
 801393a:	d106      	bne.n	801394a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f7ee ff19 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2224      	movs	r2, #36	@ 0x24
 801394e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	681a      	ldr	r2, [r3, #0]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	f022 0201 	bic.w	r2, r2, #1
 8013960:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013966:	2b00      	cmp	r3, #0
 8013968:	d002      	beq.n	8013970 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f001 fa6a 	bl	8014e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f000 fcff 	bl	8014374 <UART_SetConfig>
 8013976:	4603      	mov	r3, r0
 8013978:	2b01      	cmp	r3, #1
 801397a:	d101      	bne.n	8013980 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801397c:	2301      	movs	r3, #1
 801397e:	e01b      	b.n	80139b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	685a      	ldr	r2, [r3, #4]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801398e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	689a      	ldr	r2, [r3, #8]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801399e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	681a      	ldr	r2, [r3, #0]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f042 0201 	orr.w	r2, r2, #1
 80139ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f001 fae9 	bl	8014f88 <UART_CheckIdleState>
 80139b6:	4603      	mov	r3, r0
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3708      	adds	r7, #8
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b08a      	sub	sp, #40	@ 0x28
 80139c4:	af02      	add	r7, sp, #8
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	603b      	str	r3, [r7, #0]
 80139cc:	4613      	mov	r3, r2
 80139ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80139d6:	2b20      	cmp	r3, #32
 80139d8:	d17b      	bne.n	8013ad2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d002      	beq.n	80139e6 <HAL_UART_Transmit+0x26>
 80139e0:	88fb      	ldrh	r3, [r7, #6]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d101      	bne.n	80139ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80139e6:	2301      	movs	r3, #1
 80139e8:	e074      	b.n	8013ad4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2200      	movs	r2, #0
 80139ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2221      	movs	r2, #33	@ 0x21
 80139f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80139fa:	f7ef fe91 	bl	8003720 <HAL_GetTick>
 80139fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	88fa      	ldrh	r2, [r7, #6]
 8013a04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	88fa      	ldrh	r2, [r7, #6]
 8013a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	689b      	ldr	r3, [r3, #8]
 8013a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013a18:	d108      	bne.n	8013a2c <HAL_UART_Transmit+0x6c>
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	691b      	ldr	r3, [r3, #16]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d104      	bne.n	8013a2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013a22:	2300      	movs	r3, #0
 8013a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	61bb      	str	r3, [r7, #24]
 8013a2a:	e003      	b.n	8013a34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013a30:	2300      	movs	r3, #0
 8013a32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013a34:	e030      	b.n	8013a98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	9300      	str	r3, [sp, #0]
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	2180      	movs	r1, #128	@ 0x80
 8013a40:	68f8      	ldr	r0, [r7, #12]
 8013a42:	f001 fb4b 	bl	80150dc <UART_WaitOnFlagUntilTimeout>
 8013a46:	4603      	mov	r3, r0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d005      	beq.n	8013a58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2220      	movs	r2, #32
 8013a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8013a54:	2303      	movs	r3, #3
 8013a56:	e03d      	b.n	8013ad4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d10b      	bne.n	8013a76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	881b      	ldrh	r3, [r3, #0]
 8013a62:	461a      	mov	r2, r3
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013a6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013a6e:	69bb      	ldr	r3, [r7, #24]
 8013a70:	3302      	adds	r3, #2
 8013a72:	61bb      	str	r3, [r7, #24]
 8013a74:	e007      	b.n	8013a86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	781a      	ldrb	r2, [r3, #0]
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	3301      	adds	r3, #1
 8013a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013a8c:	b29b      	uxth	r3, r3
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	b29a      	uxth	r2, r3
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d1c8      	bne.n	8013a36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	2140      	movs	r1, #64	@ 0x40
 8013aae:	68f8      	ldr	r0, [r7, #12]
 8013ab0:	f001 fb14 	bl	80150dc <UART_WaitOnFlagUntilTimeout>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d005      	beq.n	8013ac6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2220      	movs	r2, #32
 8013abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8013ac2:	2303      	movs	r3, #3
 8013ac4:	e006      	b.n	8013ad4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2220      	movs	r2, #32
 8013aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e000      	b.n	8013ad4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013ad2:	2302      	movs	r3, #2
  }
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3720      	adds	r7, #32
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}

08013adc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b08a      	sub	sp, #40	@ 0x28
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	60f8      	str	r0, [r7, #12]
 8013ae4:	60b9      	str	r1, [r7, #8]
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013af0:	2b20      	cmp	r3, #32
 8013af2:	d137      	bne.n	8013b64 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d002      	beq.n	8013b00 <HAL_UART_Receive_DMA+0x24>
 8013afa:	88fb      	ldrh	r3, [r7, #6]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d101      	bne.n	8013b04 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8013b00:	2301      	movs	r3, #1
 8013b02:	e030      	b.n	8013b66 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2200      	movs	r2, #0
 8013b08:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	4a18      	ldr	r2, [pc, #96]	@ (8013b70 <HAL_UART_Receive_DMA+0x94>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d01f      	beq.n	8013b54 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d018      	beq.n	8013b54 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	e853 3f00 	ldrex	r3, [r3]
 8013b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b40:	623b      	str	r3, [r7, #32]
 8013b42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b44:	69f9      	ldr	r1, [r7, #28]
 8013b46:	6a3a      	ldr	r2, [r7, #32]
 8013b48:	e841 2300 	strex	r3, r2, [r1]
 8013b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d1e6      	bne.n	8013b22 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013b54:	88fb      	ldrh	r3, [r7, #6]
 8013b56:	461a      	mov	r2, r3
 8013b58:	68b9      	ldr	r1, [r7, #8]
 8013b5a:	68f8      	ldr	r0, [r7, #12]
 8013b5c:	f001 fb2c 	bl	80151b8 <UART_Start_Receive_DMA>
 8013b60:	4603      	mov	r3, r0
 8013b62:	e000      	b.n	8013b66 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013b64:	2302      	movs	r3, #2
  }
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3728      	adds	r7, #40	@ 0x28
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}
 8013b6e:	bf00      	nop
 8013b70:	58000c00 	.word	0x58000c00

08013b74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b0ba      	sub	sp, #232	@ 0xe8
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	69db      	ldr	r3, [r3, #28]
 8013b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	689b      	ldr	r3, [r3, #8]
 8013b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013b9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013b9e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8013ba2:	4013      	ands	r3, r2
 8013ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8013ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d11b      	bne.n	8013be8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013bb4:	f003 0320 	and.w	r3, r3, #32
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d015      	beq.n	8013be8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013bc0:	f003 0320 	and.w	r3, r3, #32
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d105      	bne.n	8013bd4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d009      	beq.n	8013be8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f000 8393 	beq.w	8014304 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	4798      	blx	r3
      }
      return;
 8013be6:	e38d      	b.n	8014304 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f000 8123 	beq.w	8013e38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013bf2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8013e2c <HAL_UART_IRQHandler+0x2b8>)
 8013bf8:	4013      	ands	r3, r2
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d106      	bne.n	8013c0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013bfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013c02:	4b8b      	ldr	r3, [pc, #556]	@ (8013e30 <HAL_UART_IRQHandler+0x2bc>)
 8013c04:	4013      	ands	r3, r2
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f000 8116 	beq.w	8013e38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c10:	f003 0301 	and.w	r3, r3, #1
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d011      	beq.n	8013c3c <HAL_UART_IRQHandler+0xc8>
 8013c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d00b      	beq.n	8013c3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	2201      	movs	r2, #1
 8013c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c32:	f043 0201 	orr.w	r2, r3, #1
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c40:	f003 0302 	and.w	r3, r3, #2
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d011      	beq.n	8013c6c <HAL_UART_IRQHandler+0xf8>
 8013c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013c4c:	f003 0301 	and.w	r3, r3, #1
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d00b      	beq.n	8013c6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2202      	movs	r2, #2
 8013c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c62:	f043 0204 	orr.w	r2, r3, #4
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c70:	f003 0304 	and.w	r3, r3, #4
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d011      	beq.n	8013c9c <HAL_UART_IRQHandler+0x128>
 8013c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013c7c:	f003 0301 	and.w	r3, r3, #1
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d00b      	beq.n	8013c9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	2204      	movs	r2, #4
 8013c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c92:	f043 0202 	orr.w	r2, r3, #2
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013ca0:	f003 0308 	and.w	r3, r3, #8
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d017      	beq.n	8013cd8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013cac:	f003 0320 	and.w	r3, r3, #32
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d105      	bne.n	8013cc0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013cb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8013e2c <HAL_UART_IRQHandler+0x2b8>)
 8013cba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d00b      	beq.n	8013cd8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2208      	movs	r2, #8
 8013cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cce:	f043 0208 	orr.w	r2, r3, #8
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d012      	beq.n	8013d0a <HAL_UART_IRQHandler+0x196>
 8013ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013ce8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d00c      	beq.n	8013d0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d00:	f043 0220 	orr.w	r2, r3, #32
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f000 82f9 	beq.w	8014308 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013d1a:	f003 0320 	and.w	r3, r3, #32
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d013      	beq.n	8013d4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013d26:	f003 0320 	and.w	r3, r3, #32
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d105      	bne.n	8013d3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d007      	beq.n	8013d4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d003      	beq.n	8013d4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d5e:	2b40      	cmp	r3, #64	@ 0x40
 8013d60:	d005      	beq.n	8013d6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013d66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d054      	beq.n	8013e18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f001 fb0a 	bl	8015388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	689b      	ldr	r3, [r3, #8]
 8013d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d7e:	2b40      	cmp	r3, #64	@ 0x40
 8013d80:	d146      	bne.n	8013e10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	3308      	adds	r3, #8
 8013d88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013d90:	e853 3f00 	ldrex	r3, [r3]
 8013d94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8013d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013d9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	3308      	adds	r3, #8
 8013daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8013dae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8013dbe:	e841 2300 	strex	r3, r2, [r1]
 8013dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8013dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d1d9      	bne.n	8013d82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d017      	beq.n	8013e08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dde:	4a15      	ldr	r2, [pc, #84]	@ (8013e34 <HAL_UART_IRQHandler+0x2c0>)
 8013de0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7f2 f9f3 	bl	80061d4 <HAL_DMA_Abort_IT>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d019      	beq.n	8013e28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013e02:	4610      	mov	r0, r2
 8013e04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e06:	e00f      	b.n	8013e28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f000 fa9d 	bl	8014348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e0e:	e00b      	b.n	8013e28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 fa99 	bl	8014348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e16:	e007      	b.n	8013e28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 fa95 	bl	8014348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8013e26:	e26f      	b.n	8014308 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e28:	bf00      	nop
    return;
 8013e2a:	e26d      	b.n	8014308 <HAL_UART_IRQHandler+0x794>
 8013e2c:	10000001 	.word	0x10000001
 8013e30:	04000120 	.word	0x04000120
 8013e34:	0801563b 	.word	0x0801563b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	f040 8203 	bne.w	8014248 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013e46:	f003 0310 	and.w	r3, r3, #16
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	f000 81fc 	beq.w	8014248 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013e54:	f003 0310 	and.w	r3, r3, #16
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	f000 81f5 	beq.w	8014248 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2210      	movs	r2, #16
 8013e64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	689b      	ldr	r3, [r3, #8]
 8013e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013e70:	2b40      	cmp	r3, #64	@ 0x40
 8013e72:	f040 816d 	bne.w	8014150 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	4aa4      	ldr	r2, [pc, #656]	@ (8014110 <HAL_UART_IRQHandler+0x59c>)
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d068      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4aa1      	ldr	r2, [pc, #644]	@ (8014114 <HAL_UART_IRQHandler+0x5a0>)
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	d061      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	4a9f      	ldr	r2, [pc, #636]	@ (8014118 <HAL_UART_IRQHandler+0x5a4>)
 8013e9c:	4293      	cmp	r3, r2
 8013e9e:	d05a      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	4a9c      	ldr	r2, [pc, #624]	@ (801411c <HAL_UART_IRQHandler+0x5a8>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d053      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	4a9a      	ldr	r2, [pc, #616]	@ (8014120 <HAL_UART_IRQHandler+0x5ac>)
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	d04c      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	4a97      	ldr	r2, [pc, #604]	@ (8014124 <HAL_UART_IRQHandler+0x5b0>)
 8013ec6:	4293      	cmp	r3, r2
 8013ec8:	d045      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	4a95      	ldr	r2, [pc, #596]	@ (8014128 <HAL_UART_IRQHandler+0x5b4>)
 8013ed4:	4293      	cmp	r3, r2
 8013ed6:	d03e      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	4a92      	ldr	r2, [pc, #584]	@ (801412c <HAL_UART_IRQHandler+0x5b8>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d037      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	4a90      	ldr	r2, [pc, #576]	@ (8014130 <HAL_UART_IRQHandler+0x5bc>)
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d030      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	4a8d      	ldr	r2, [pc, #564]	@ (8014134 <HAL_UART_IRQHandler+0x5c0>)
 8013efe:	4293      	cmp	r3, r2
 8013f00:	d029      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	4a8b      	ldr	r2, [pc, #556]	@ (8014138 <HAL_UART_IRQHandler+0x5c4>)
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	d022      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	4a88      	ldr	r2, [pc, #544]	@ (801413c <HAL_UART_IRQHandler+0x5c8>)
 8013f1a:	4293      	cmp	r3, r2
 8013f1c:	d01b      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	4a86      	ldr	r2, [pc, #536]	@ (8014140 <HAL_UART_IRQHandler+0x5cc>)
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	d014      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4a83      	ldr	r2, [pc, #524]	@ (8014144 <HAL_UART_IRQHandler+0x5d0>)
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d00d      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4a81      	ldr	r2, [pc, #516]	@ (8014148 <HAL_UART_IRQHandler+0x5d4>)
 8013f44:	4293      	cmp	r3, r2
 8013f46:	d006      	beq.n	8013f56 <HAL_UART_IRQHandler+0x3e2>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	4a7e      	ldr	r2, [pc, #504]	@ (801414c <HAL_UART_IRQHandler+0x5d8>)
 8013f52:	4293      	cmp	r3, r2
 8013f54:	d106      	bne.n	8013f64 <HAL_UART_IRQHandler+0x3f0>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	685b      	ldr	r3, [r3, #4]
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	e005      	b.n	8013f70 <HAL_UART_IRQHandler+0x3fc>
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	685b      	ldr	r3, [r3, #4]
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f000 80ad 	beq.w	80140d8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013f84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	f080 80a5 	bcs.w	80140d8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013f94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f9e:	69db      	ldr	r3, [r3, #28]
 8013fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013fa4:	f000 8087 	beq.w	80140b6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013fb4:	e853 3f00 	ldrex	r3, [r3]
 8013fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8013fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	461a      	mov	r2, r3
 8013fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013fd6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013fde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013fe2:	e841 2300 	strex	r3, r2, [r1]
 8013fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8013fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d1da      	bne.n	8013fa8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	3308      	adds	r3, #8
 8013ff8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ffa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013ffc:	e853 3f00 	ldrex	r3, [r3]
 8014000:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8014002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014004:	f023 0301 	bic.w	r3, r3, #1
 8014008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	3308      	adds	r3, #8
 8014012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014016:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801401a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801401c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801401e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014022:	e841 2300 	strex	r3, r2, [r1]
 8014026:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801402a:	2b00      	cmp	r3, #0
 801402c:	d1e1      	bne.n	8013ff2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	3308      	adds	r3, #8
 8014034:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014038:	e853 3f00 	ldrex	r3, [r3]
 801403c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801403e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	3308      	adds	r3, #8
 801404e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8014052:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014054:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014056:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014058:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801405a:	e841 2300 	strex	r3, r2, [r1]
 801405e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1e3      	bne.n	801402e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2220      	movs	r2, #32
 801406a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2200      	movs	r2, #0
 8014072:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801407a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801407c:	e853 3f00 	ldrex	r3, [r3]
 8014080:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014084:	f023 0310 	bic.w	r3, r3, #16
 8014088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	461a      	mov	r2, r3
 8014092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014096:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014098:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801409a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801409c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801409e:	e841 2300 	strex	r3, r2, [r1]
 80140a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80140a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d1e4      	bne.n	8014074 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7f1 fd71 	bl	8005b98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2202      	movs	r2, #2
 80140ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	b29b      	uxth	r3, r3
 80140ce:	4619      	mov	r1, r3
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f000 f943 	bl	801435c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80140d6:	e119      	b.n	801430c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80140de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80140e2:	429a      	cmp	r2, r3
 80140e4:	f040 8112 	bne.w	801430c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80140ee:	69db      	ldr	r3, [r3, #28]
 80140f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80140f4:	f040 810a 	bne.w	801430c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2202      	movs	r2, #2
 80140fc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014104:	4619      	mov	r1, r3
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 f928 	bl	801435c <HAL_UARTEx_RxEventCallback>
      return;
 801410c:	e0fe      	b.n	801430c <HAL_UART_IRQHandler+0x798>
 801410e:	bf00      	nop
 8014110:	40020010 	.word	0x40020010
 8014114:	40020028 	.word	0x40020028
 8014118:	40020040 	.word	0x40020040
 801411c:	40020058 	.word	0x40020058
 8014120:	40020070 	.word	0x40020070
 8014124:	40020088 	.word	0x40020088
 8014128:	400200a0 	.word	0x400200a0
 801412c:	400200b8 	.word	0x400200b8
 8014130:	40020410 	.word	0x40020410
 8014134:	40020428 	.word	0x40020428
 8014138:	40020440 	.word	0x40020440
 801413c:	40020458 	.word	0x40020458
 8014140:	40020470 	.word	0x40020470
 8014144:	40020488 	.word	0x40020488
 8014148:	400204a0 	.word	0x400204a0
 801414c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801415c:	b29b      	uxth	r3, r3
 801415e:	1ad3      	subs	r3, r2, r3
 8014160:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801416a:	b29b      	uxth	r3, r3
 801416c:	2b00      	cmp	r3, #0
 801416e:	f000 80cf 	beq.w	8014310 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8014172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014176:	2b00      	cmp	r3, #0
 8014178:	f000 80ca 	beq.w	8014310 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014184:	e853 3f00 	ldrex	r3, [r3]
 8014188:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801418a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801418c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014190:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	461a      	mov	r2, r3
 801419a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801419e:	647b      	str	r3, [r7, #68]	@ 0x44
 80141a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80141a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80141a6:	e841 2300 	strex	r3, r2, [r1]
 80141aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80141ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d1e4      	bne.n	801417c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	3308      	adds	r3, #8
 80141b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141bc:	e853 3f00 	ldrex	r3, [r3]
 80141c0:	623b      	str	r3, [r7, #32]
   return(result);
 80141c2:	6a3a      	ldr	r2, [r7, #32]
 80141c4:	4b55      	ldr	r3, [pc, #340]	@ (801431c <HAL_UART_IRQHandler+0x7a8>)
 80141c6:	4013      	ands	r3, r2
 80141c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	3308      	adds	r3, #8
 80141d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80141d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80141d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80141dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141de:	e841 2300 	strex	r3, r2, [r1]
 80141e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80141e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d1e3      	bne.n	80141b2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2220      	movs	r2, #32
 80141ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2200      	movs	r2, #0
 80141f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2200      	movs	r2, #0
 80141fc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	e853 3f00 	ldrex	r3, [r3]
 801420a:	60fb      	str	r3, [r7, #12]
   return(result);
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	f023 0310 	bic.w	r3, r3, #16
 8014212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	461a      	mov	r2, r3
 801421c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014220:	61fb      	str	r3, [r7, #28]
 8014222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014224:	69b9      	ldr	r1, [r7, #24]
 8014226:	69fa      	ldr	r2, [r7, #28]
 8014228:	e841 2300 	strex	r3, r2, [r1]
 801422c:	617b      	str	r3, [r7, #20]
   return(result);
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d1e4      	bne.n	80141fe <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2202      	movs	r2, #2
 8014238:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801423a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801423e:	4619      	mov	r1, r3
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 f88b 	bl	801435c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014246:	e063      	b.n	8014310 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801424c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014250:	2b00      	cmp	r3, #0
 8014252:	d00e      	beq.n	8014272 <HAL_UART_IRQHandler+0x6fe>
 8014254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801425c:	2b00      	cmp	r3, #0
 801425e:	d008      	beq.n	8014272 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8014268:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f001 fa22 	bl	80156b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014270:	e051      	b.n	8014316 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801427a:	2b00      	cmp	r3, #0
 801427c:	d014      	beq.n	80142a8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014286:	2b00      	cmp	r3, #0
 8014288:	d105      	bne.n	8014296 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801428a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801428e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014292:	2b00      	cmp	r3, #0
 8014294:	d008      	beq.n	80142a8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801429a:	2b00      	cmp	r3, #0
 801429c:	d03a      	beq.n	8014314 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	4798      	blx	r3
    }
    return;
 80142a6:	e035      	b.n	8014314 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80142a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80142ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d009      	beq.n	80142c8 <HAL_UART_IRQHandler+0x754>
 80142b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80142b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d003      	beq.n	80142c8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f001 f9cc 	bl	801565e <UART_EndTransmit_IT>
    return;
 80142c6:	e026      	b.n	8014316 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80142c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80142cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d009      	beq.n	80142e8 <HAL_UART_IRQHandler+0x774>
 80142d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80142d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d003      	beq.n	80142e8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f001 f9fb 	bl	80156dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80142e6:	e016      	b.n	8014316 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80142e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80142ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d010      	beq.n	8014316 <HAL_UART_IRQHandler+0x7a2>
 80142f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	da0c      	bge.n	8014316 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f001 f9e3 	bl	80156c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014302:	e008      	b.n	8014316 <HAL_UART_IRQHandler+0x7a2>
      return;
 8014304:	bf00      	nop
 8014306:	e006      	b.n	8014316 <HAL_UART_IRQHandler+0x7a2>
    return;
 8014308:	bf00      	nop
 801430a:	e004      	b.n	8014316 <HAL_UART_IRQHandler+0x7a2>
      return;
 801430c:	bf00      	nop
 801430e:	e002      	b.n	8014316 <HAL_UART_IRQHandler+0x7a2>
      return;
 8014310:	bf00      	nop
 8014312:	e000      	b.n	8014316 <HAL_UART_IRQHandler+0x7a2>
    return;
 8014314:	bf00      	nop
  }
}
 8014316:	37e8      	adds	r7, #232	@ 0xe8
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	effffffe 	.word	0xeffffffe

08014320 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014320:	b480      	push	{r7}
 8014322:	b083      	sub	sp, #12
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014328:	bf00      	nop
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801433c:	bf00      	nop
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014350:	bf00      	nop
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr

0801435c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801435c:	b480      	push	{r7}
 801435e:	b083      	sub	sp, #12
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	460b      	mov	r3, r1
 8014366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014368:	bf00      	nop
 801436a:	370c      	adds	r7, #12
 801436c:	46bd      	mov	sp, r7
 801436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014372:	4770      	bx	lr

08014374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014378:	b092      	sub	sp, #72	@ 0x48
 801437a:	af00      	add	r7, sp, #0
 801437c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801437e:	2300      	movs	r3, #0
 8014380:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	689a      	ldr	r2, [r3, #8]
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	691b      	ldr	r3, [r3, #16]
 801438c:	431a      	orrs	r2, r3
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	695b      	ldr	r3, [r3, #20]
 8014392:	431a      	orrs	r2, r3
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	69db      	ldr	r3, [r3, #28]
 8014398:	4313      	orrs	r3, r2
 801439a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	681a      	ldr	r2, [r3, #0]
 80143a2:	4bbe      	ldr	r3, [pc, #760]	@ (801469c <UART_SetConfig+0x328>)
 80143a4:	4013      	ands	r3, r2
 80143a6:	697a      	ldr	r2, [r7, #20]
 80143a8:	6812      	ldr	r2, [r2, #0]
 80143aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80143ac:	430b      	orrs	r3, r1
 80143ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	68da      	ldr	r2, [r3, #12]
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	430a      	orrs	r2, r1
 80143c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	699b      	ldr	r3, [r3, #24]
 80143ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4ab3      	ldr	r2, [pc, #716]	@ (80146a0 <UART_SetConfig+0x32c>)
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d004      	beq.n	80143e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	6a1b      	ldr	r3, [r3, #32]
 80143da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80143dc:	4313      	orrs	r3, r2
 80143de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	689a      	ldr	r2, [r3, #8]
 80143e6:	4baf      	ldr	r3, [pc, #700]	@ (80146a4 <UART_SetConfig+0x330>)
 80143e8:	4013      	ands	r3, r2
 80143ea:	697a      	ldr	r2, [r7, #20]
 80143ec:	6812      	ldr	r2, [r2, #0]
 80143ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80143f0:	430b      	orrs	r3, r1
 80143f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143fa:	f023 010f 	bic.w	r1, r3, #15
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	430a      	orrs	r2, r1
 8014408:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	4aa6      	ldr	r2, [pc, #664]	@ (80146a8 <UART_SetConfig+0x334>)
 8014410:	4293      	cmp	r3, r2
 8014412:	d177      	bne.n	8014504 <UART_SetConfig+0x190>
 8014414:	4ba5      	ldr	r3, [pc, #660]	@ (80146ac <UART_SetConfig+0x338>)
 8014416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014418:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801441c:	2b28      	cmp	r3, #40	@ 0x28
 801441e:	d86d      	bhi.n	80144fc <UART_SetConfig+0x188>
 8014420:	a201      	add	r2, pc, #4	@ (adr r2, 8014428 <UART_SetConfig+0xb4>)
 8014422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014426:	bf00      	nop
 8014428:	080144cd 	.word	0x080144cd
 801442c:	080144fd 	.word	0x080144fd
 8014430:	080144fd 	.word	0x080144fd
 8014434:	080144fd 	.word	0x080144fd
 8014438:	080144fd 	.word	0x080144fd
 801443c:	080144fd 	.word	0x080144fd
 8014440:	080144fd 	.word	0x080144fd
 8014444:	080144fd 	.word	0x080144fd
 8014448:	080144d5 	.word	0x080144d5
 801444c:	080144fd 	.word	0x080144fd
 8014450:	080144fd 	.word	0x080144fd
 8014454:	080144fd 	.word	0x080144fd
 8014458:	080144fd 	.word	0x080144fd
 801445c:	080144fd 	.word	0x080144fd
 8014460:	080144fd 	.word	0x080144fd
 8014464:	080144fd 	.word	0x080144fd
 8014468:	080144dd 	.word	0x080144dd
 801446c:	080144fd 	.word	0x080144fd
 8014470:	080144fd 	.word	0x080144fd
 8014474:	080144fd 	.word	0x080144fd
 8014478:	080144fd 	.word	0x080144fd
 801447c:	080144fd 	.word	0x080144fd
 8014480:	080144fd 	.word	0x080144fd
 8014484:	080144fd 	.word	0x080144fd
 8014488:	080144e5 	.word	0x080144e5
 801448c:	080144fd 	.word	0x080144fd
 8014490:	080144fd 	.word	0x080144fd
 8014494:	080144fd 	.word	0x080144fd
 8014498:	080144fd 	.word	0x080144fd
 801449c:	080144fd 	.word	0x080144fd
 80144a0:	080144fd 	.word	0x080144fd
 80144a4:	080144fd 	.word	0x080144fd
 80144a8:	080144ed 	.word	0x080144ed
 80144ac:	080144fd 	.word	0x080144fd
 80144b0:	080144fd 	.word	0x080144fd
 80144b4:	080144fd 	.word	0x080144fd
 80144b8:	080144fd 	.word	0x080144fd
 80144bc:	080144fd 	.word	0x080144fd
 80144c0:	080144fd 	.word	0x080144fd
 80144c4:	080144fd 	.word	0x080144fd
 80144c8:	080144f5 	.word	0x080144f5
 80144cc:	2301      	movs	r3, #1
 80144ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144d2:	e222      	b.n	801491a <UART_SetConfig+0x5a6>
 80144d4:	2304      	movs	r3, #4
 80144d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144da:	e21e      	b.n	801491a <UART_SetConfig+0x5a6>
 80144dc:	2308      	movs	r3, #8
 80144de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144e2:	e21a      	b.n	801491a <UART_SetConfig+0x5a6>
 80144e4:	2310      	movs	r3, #16
 80144e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144ea:	e216      	b.n	801491a <UART_SetConfig+0x5a6>
 80144ec:	2320      	movs	r3, #32
 80144ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144f2:	e212      	b.n	801491a <UART_SetConfig+0x5a6>
 80144f4:	2340      	movs	r3, #64	@ 0x40
 80144f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144fa:	e20e      	b.n	801491a <UART_SetConfig+0x5a6>
 80144fc:	2380      	movs	r3, #128	@ 0x80
 80144fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014502:	e20a      	b.n	801491a <UART_SetConfig+0x5a6>
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	4a69      	ldr	r2, [pc, #420]	@ (80146b0 <UART_SetConfig+0x33c>)
 801450a:	4293      	cmp	r3, r2
 801450c:	d130      	bne.n	8014570 <UART_SetConfig+0x1fc>
 801450e:	4b67      	ldr	r3, [pc, #412]	@ (80146ac <UART_SetConfig+0x338>)
 8014510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014512:	f003 0307 	and.w	r3, r3, #7
 8014516:	2b05      	cmp	r3, #5
 8014518:	d826      	bhi.n	8014568 <UART_SetConfig+0x1f4>
 801451a:	a201      	add	r2, pc, #4	@ (adr r2, 8014520 <UART_SetConfig+0x1ac>)
 801451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014520:	08014539 	.word	0x08014539
 8014524:	08014541 	.word	0x08014541
 8014528:	08014549 	.word	0x08014549
 801452c:	08014551 	.word	0x08014551
 8014530:	08014559 	.word	0x08014559
 8014534:	08014561 	.word	0x08014561
 8014538:	2300      	movs	r3, #0
 801453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801453e:	e1ec      	b.n	801491a <UART_SetConfig+0x5a6>
 8014540:	2304      	movs	r3, #4
 8014542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014546:	e1e8      	b.n	801491a <UART_SetConfig+0x5a6>
 8014548:	2308      	movs	r3, #8
 801454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801454e:	e1e4      	b.n	801491a <UART_SetConfig+0x5a6>
 8014550:	2310      	movs	r3, #16
 8014552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014556:	e1e0      	b.n	801491a <UART_SetConfig+0x5a6>
 8014558:	2320      	movs	r3, #32
 801455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801455e:	e1dc      	b.n	801491a <UART_SetConfig+0x5a6>
 8014560:	2340      	movs	r3, #64	@ 0x40
 8014562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014566:	e1d8      	b.n	801491a <UART_SetConfig+0x5a6>
 8014568:	2380      	movs	r3, #128	@ 0x80
 801456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801456e:	e1d4      	b.n	801491a <UART_SetConfig+0x5a6>
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4a4f      	ldr	r2, [pc, #316]	@ (80146b4 <UART_SetConfig+0x340>)
 8014576:	4293      	cmp	r3, r2
 8014578:	d130      	bne.n	80145dc <UART_SetConfig+0x268>
 801457a:	4b4c      	ldr	r3, [pc, #304]	@ (80146ac <UART_SetConfig+0x338>)
 801457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801457e:	f003 0307 	and.w	r3, r3, #7
 8014582:	2b05      	cmp	r3, #5
 8014584:	d826      	bhi.n	80145d4 <UART_SetConfig+0x260>
 8014586:	a201      	add	r2, pc, #4	@ (adr r2, 801458c <UART_SetConfig+0x218>)
 8014588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801458c:	080145a5 	.word	0x080145a5
 8014590:	080145ad 	.word	0x080145ad
 8014594:	080145b5 	.word	0x080145b5
 8014598:	080145bd 	.word	0x080145bd
 801459c:	080145c5 	.word	0x080145c5
 80145a0:	080145cd 	.word	0x080145cd
 80145a4:	2300      	movs	r3, #0
 80145a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145aa:	e1b6      	b.n	801491a <UART_SetConfig+0x5a6>
 80145ac:	2304      	movs	r3, #4
 80145ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145b2:	e1b2      	b.n	801491a <UART_SetConfig+0x5a6>
 80145b4:	2308      	movs	r3, #8
 80145b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ba:	e1ae      	b.n	801491a <UART_SetConfig+0x5a6>
 80145bc:	2310      	movs	r3, #16
 80145be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145c2:	e1aa      	b.n	801491a <UART_SetConfig+0x5a6>
 80145c4:	2320      	movs	r3, #32
 80145c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ca:	e1a6      	b.n	801491a <UART_SetConfig+0x5a6>
 80145cc:	2340      	movs	r3, #64	@ 0x40
 80145ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145d2:	e1a2      	b.n	801491a <UART_SetConfig+0x5a6>
 80145d4:	2380      	movs	r3, #128	@ 0x80
 80145d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145da:	e19e      	b.n	801491a <UART_SetConfig+0x5a6>
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	4a35      	ldr	r2, [pc, #212]	@ (80146b8 <UART_SetConfig+0x344>)
 80145e2:	4293      	cmp	r3, r2
 80145e4:	d130      	bne.n	8014648 <UART_SetConfig+0x2d4>
 80145e6:	4b31      	ldr	r3, [pc, #196]	@ (80146ac <UART_SetConfig+0x338>)
 80145e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145ea:	f003 0307 	and.w	r3, r3, #7
 80145ee:	2b05      	cmp	r3, #5
 80145f0:	d826      	bhi.n	8014640 <UART_SetConfig+0x2cc>
 80145f2:	a201      	add	r2, pc, #4	@ (adr r2, 80145f8 <UART_SetConfig+0x284>)
 80145f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f8:	08014611 	.word	0x08014611
 80145fc:	08014619 	.word	0x08014619
 8014600:	08014621 	.word	0x08014621
 8014604:	08014629 	.word	0x08014629
 8014608:	08014631 	.word	0x08014631
 801460c:	08014639 	.word	0x08014639
 8014610:	2300      	movs	r3, #0
 8014612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014616:	e180      	b.n	801491a <UART_SetConfig+0x5a6>
 8014618:	2304      	movs	r3, #4
 801461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801461e:	e17c      	b.n	801491a <UART_SetConfig+0x5a6>
 8014620:	2308      	movs	r3, #8
 8014622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014626:	e178      	b.n	801491a <UART_SetConfig+0x5a6>
 8014628:	2310      	movs	r3, #16
 801462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801462e:	e174      	b.n	801491a <UART_SetConfig+0x5a6>
 8014630:	2320      	movs	r3, #32
 8014632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014636:	e170      	b.n	801491a <UART_SetConfig+0x5a6>
 8014638:	2340      	movs	r3, #64	@ 0x40
 801463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801463e:	e16c      	b.n	801491a <UART_SetConfig+0x5a6>
 8014640:	2380      	movs	r3, #128	@ 0x80
 8014642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014646:	e168      	b.n	801491a <UART_SetConfig+0x5a6>
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	4a1b      	ldr	r2, [pc, #108]	@ (80146bc <UART_SetConfig+0x348>)
 801464e:	4293      	cmp	r3, r2
 8014650:	d142      	bne.n	80146d8 <UART_SetConfig+0x364>
 8014652:	4b16      	ldr	r3, [pc, #88]	@ (80146ac <UART_SetConfig+0x338>)
 8014654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014656:	f003 0307 	and.w	r3, r3, #7
 801465a:	2b05      	cmp	r3, #5
 801465c:	d838      	bhi.n	80146d0 <UART_SetConfig+0x35c>
 801465e:	a201      	add	r2, pc, #4	@ (adr r2, 8014664 <UART_SetConfig+0x2f0>)
 8014660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014664:	0801467d 	.word	0x0801467d
 8014668:	08014685 	.word	0x08014685
 801466c:	0801468d 	.word	0x0801468d
 8014670:	08014695 	.word	0x08014695
 8014674:	080146c1 	.word	0x080146c1
 8014678:	080146c9 	.word	0x080146c9
 801467c:	2300      	movs	r3, #0
 801467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014682:	e14a      	b.n	801491a <UART_SetConfig+0x5a6>
 8014684:	2304      	movs	r3, #4
 8014686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801468a:	e146      	b.n	801491a <UART_SetConfig+0x5a6>
 801468c:	2308      	movs	r3, #8
 801468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014692:	e142      	b.n	801491a <UART_SetConfig+0x5a6>
 8014694:	2310      	movs	r3, #16
 8014696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801469a:	e13e      	b.n	801491a <UART_SetConfig+0x5a6>
 801469c:	cfff69f3 	.word	0xcfff69f3
 80146a0:	58000c00 	.word	0x58000c00
 80146a4:	11fff4ff 	.word	0x11fff4ff
 80146a8:	40011000 	.word	0x40011000
 80146ac:	58024400 	.word	0x58024400
 80146b0:	40004400 	.word	0x40004400
 80146b4:	40004800 	.word	0x40004800
 80146b8:	40004c00 	.word	0x40004c00
 80146bc:	40005000 	.word	0x40005000
 80146c0:	2320      	movs	r3, #32
 80146c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146c6:	e128      	b.n	801491a <UART_SetConfig+0x5a6>
 80146c8:	2340      	movs	r3, #64	@ 0x40
 80146ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146ce:	e124      	b.n	801491a <UART_SetConfig+0x5a6>
 80146d0:	2380      	movs	r3, #128	@ 0x80
 80146d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146d6:	e120      	b.n	801491a <UART_SetConfig+0x5a6>
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	4acb      	ldr	r2, [pc, #812]	@ (8014a0c <UART_SetConfig+0x698>)
 80146de:	4293      	cmp	r3, r2
 80146e0:	d176      	bne.n	80147d0 <UART_SetConfig+0x45c>
 80146e2:	4bcb      	ldr	r3, [pc, #812]	@ (8014a10 <UART_SetConfig+0x69c>)
 80146e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80146e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80146ea:	2b28      	cmp	r3, #40	@ 0x28
 80146ec:	d86c      	bhi.n	80147c8 <UART_SetConfig+0x454>
 80146ee:	a201      	add	r2, pc, #4	@ (adr r2, 80146f4 <UART_SetConfig+0x380>)
 80146f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146f4:	08014799 	.word	0x08014799
 80146f8:	080147c9 	.word	0x080147c9
 80146fc:	080147c9 	.word	0x080147c9
 8014700:	080147c9 	.word	0x080147c9
 8014704:	080147c9 	.word	0x080147c9
 8014708:	080147c9 	.word	0x080147c9
 801470c:	080147c9 	.word	0x080147c9
 8014710:	080147c9 	.word	0x080147c9
 8014714:	080147a1 	.word	0x080147a1
 8014718:	080147c9 	.word	0x080147c9
 801471c:	080147c9 	.word	0x080147c9
 8014720:	080147c9 	.word	0x080147c9
 8014724:	080147c9 	.word	0x080147c9
 8014728:	080147c9 	.word	0x080147c9
 801472c:	080147c9 	.word	0x080147c9
 8014730:	080147c9 	.word	0x080147c9
 8014734:	080147a9 	.word	0x080147a9
 8014738:	080147c9 	.word	0x080147c9
 801473c:	080147c9 	.word	0x080147c9
 8014740:	080147c9 	.word	0x080147c9
 8014744:	080147c9 	.word	0x080147c9
 8014748:	080147c9 	.word	0x080147c9
 801474c:	080147c9 	.word	0x080147c9
 8014750:	080147c9 	.word	0x080147c9
 8014754:	080147b1 	.word	0x080147b1
 8014758:	080147c9 	.word	0x080147c9
 801475c:	080147c9 	.word	0x080147c9
 8014760:	080147c9 	.word	0x080147c9
 8014764:	080147c9 	.word	0x080147c9
 8014768:	080147c9 	.word	0x080147c9
 801476c:	080147c9 	.word	0x080147c9
 8014770:	080147c9 	.word	0x080147c9
 8014774:	080147b9 	.word	0x080147b9
 8014778:	080147c9 	.word	0x080147c9
 801477c:	080147c9 	.word	0x080147c9
 8014780:	080147c9 	.word	0x080147c9
 8014784:	080147c9 	.word	0x080147c9
 8014788:	080147c9 	.word	0x080147c9
 801478c:	080147c9 	.word	0x080147c9
 8014790:	080147c9 	.word	0x080147c9
 8014794:	080147c1 	.word	0x080147c1
 8014798:	2301      	movs	r3, #1
 801479a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801479e:	e0bc      	b.n	801491a <UART_SetConfig+0x5a6>
 80147a0:	2304      	movs	r3, #4
 80147a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147a6:	e0b8      	b.n	801491a <UART_SetConfig+0x5a6>
 80147a8:	2308      	movs	r3, #8
 80147aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147ae:	e0b4      	b.n	801491a <UART_SetConfig+0x5a6>
 80147b0:	2310      	movs	r3, #16
 80147b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147b6:	e0b0      	b.n	801491a <UART_SetConfig+0x5a6>
 80147b8:	2320      	movs	r3, #32
 80147ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147be:	e0ac      	b.n	801491a <UART_SetConfig+0x5a6>
 80147c0:	2340      	movs	r3, #64	@ 0x40
 80147c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147c6:	e0a8      	b.n	801491a <UART_SetConfig+0x5a6>
 80147c8:	2380      	movs	r3, #128	@ 0x80
 80147ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147ce:	e0a4      	b.n	801491a <UART_SetConfig+0x5a6>
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	4a8f      	ldr	r2, [pc, #572]	@ (8014a14 <UART_SetConfig+0x6a0>)
 80147d6:	4293      	cmp	r3, r2
 80147d8:	d130      	bne.n	801483c <UART_SetConfig+0x4c8>
 80147da:	4b8d      	ldr	r3, [pc, #564]	@ (8014a10 <UART_SetConfig+0x69c>)
 80147dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80147de:	f003 0307 	and.w	r3, r3, #7
 80147e2:	2b05      	cmp	r3, #5
 80147e4:	d826      	bhi.n	8014834 <UART_SetConfig+0x4c0>
 80147e6:	a201      	add	r2, pc, #4	@ (adr r2, 80147ec <UART_SetConfig+0x478>)
 80147e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147ec:	08014805 	.word	0x08014805
 80147f0:	0801480d 	.word	0x0801480d
 80147f4:	08014815 	.word	0x08014815
 80147f8:	0801481d 	.word	0x0801481d
 80147fc:	08014825 	.word	0x08014825
 8014800:	0801482d 	.word	0x0801482d
 8014804:	2300      	movs	r3, #0
 8014806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801480a:	e086      	b.n	801491a <UART_SetConfig+0x5a6>
 801480c:	2304      	movs	r3, #4
 801480e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014812:	e082      	b.n	801491a <UART_SetConfig+0x5a6>
 8014814:	2308      	movs	r3, #8
 8014816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801481a:	e07e      	b.n	801491a <UART_SetConfig+0x5a6>
 801481c:	2310      	movs	r3, #16
 801481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014822:	e07a      	b.n	801491a <UART_SetConfig+0x5a6>
 8014824:	2320      	movs	r3, #32
 8014826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801482a:	e076      	b.n	801491a <UART_SetConfig+0x5a6>
 801482c:	2340      	movs	r3, #64	@ 0x40
 801482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014832:	e072      	b.n	801491a <UART_SetConfig+0x5a6>
 8014834:	2380      	movs	r3, #128	@ 0x80
 8014836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801483a:	e06e      	b.n	801491a <UART_SetConfig+0x5a6>
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	4a75      	ldr	r2, [pc, #468]	@ (8014a18 <UART_SetConfig+0x6a4>)
 8014842:	4293      	cmp	r3, r2
 8014844:	d130      	bne.n	80148a8 <UART_SetConfig+0x534>
 8014846:	4b72      	ldr	r3, [pc, #456]	@ (8014a10 <UART_SetConfig+0x69c>)
 8014848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801484a:	f003 0307 	and.w	r3, r3, #7
 801484e:	2b05      	cmp	r3, #5
 8014850:	d826      	bhi.n	80148a0 <UART_SetConfig+0x52c>
 8014852:	a201      	add	r2, pc, #4	@ (adr r2, 8014858 <UART_SetConfig+0x4e4>)
 8014854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014858:	08014871 	.word	0x08014871
 801485c:	08014879 	.word	0x08014879
 8014860:	08014881 	.word	0x08014881
 8014864:	08014889 	.word	0x08014889
 8014868:	08014891 	.word	0x08014891
 801486c:	08014899 	.word	0x08014899
 8014870:	2300      	movs	r3, #0
 8014872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014876:	e050      	b.n	801491a <UART_SetConfig+0x5a6>
 8014878:	2304      	movs	r3, #4
 801487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801487e:	e04c      	b.n	801491a <UART_SetConfig+0x5a6>
 8014880:	2308      	movs	r3, #8
 8014882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014886:	e048      	b.n	801491a <UART_SetConfig+0x5a6>
 8014888:	2310      	movs	r3, #16
 801488a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801488e:	e044      	b.n	801491a <UART_SetConfig+0x5a6>
 8014890:	2320      	movs	r3, #32
 8014892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014896:	e040      	b.n	801491a <UART_SetConfig+0x5a6>
 8014898:	2340      	movs	r3, #64	@ 0x40
 801489a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801489e:	e03c      	b.n	801491a <UART_SetConfig+0x5a6>
 80148a0:	2380      	movs	r3, #128	@ 0x80
 80148a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148a6:	e038      	b.n	801491a <UART_SetConfig+0x5a6>
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4a5b      	ldr	r2, [pc, #364]	@ (8014a1c <UART_SetConfig+0x6a8>)
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d130      	bne.n	8014914 <UART_SetConfig+0x5a0>
 80148b2:	4b57      	ldr	r3, [pc, #348]	@ (8014a10 <UART_SetConfig+0x69c>)
 80148b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148b6:	f003 0307 	and.w	r3, r3, #7
 80148ba:	2b05      	cmp	r3, #5
 80148bc:	d826      	bhi.n	801490c <UART_SetConfig+0x598>
 80148be:	a201      	add	r2, pc, #4	@ (adr r2, 80148c4 <UART_SetConfig+0x550>)
 80148c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148c4:	080148dd 	.word	0x080148dd
 80148c8:	080148e5 	.word	0x080148e5
 80148cc:	080148ed 	.word	0x080148ed
 80148d0:	080148f5 	.word	0x080148f5
 80148d4:	080148fd 	.word	0x080148fd
 80148d8:	08014905 	.word	0x08014905
 80148dc:	2302      	movs	r3, #2
 80148de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148e2:	e01a      	b.n	801491a <UART_SetConfig+0x5a6>
 80148e4:	2304      	movs	r3, #4
 80148e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148ea:	e016      	b.n	801491a <UART_SetConfig+0x5a6>
 80148ec:	2308      	movs	r3, #8
 80148ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148f2:	e012      	b.n	801491a <UART_SetConfig+0x5a6>
 80148f4:	2310      	movs	r3, #16
 80148f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148fa:	e00e      	b.n	801491a <UART_SetConfig+0x5a6>
 80148fc:	2320      	movs	r3, #32
 80148fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014902:	e00a      	b.n	801491a <UART_SetConfig+0x5a6>
 8014904:	2340      	movs	r3, #64	@ 0x40
 8014906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801490a:	e006      	b.n	801491a <UART_SetConfig+0x5a6>
 801490c:	2380      	movs	r3, #128	@ 0x80
 801490e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014912:	e002      	b.n	801491a <UART_SetConfig+0x5a6>
 8014914:	2380      	movs	r3, #128	@ 0x80
 8014916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	4a3f      	ldr	r2, [pc, #252]	@ (8014a1c <UART_SetConfig+0x6a8>)
 8014920:	4293      	cmp	r3, r2
 8014922:	f040 80f8 	bne.w	8014b16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014926:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801492a:	2b20      	cmp	r3, #32
 801492c:	dc46      	bgt.n	80149bc <UART_SetConfig+0x648>
 801492e:	2b02      	cmp	r3, #2
 8014930:	f2c0 8082 	blt.w	8014a38 <UART_SetConfig+0x6c4>
 8014934:	3b02      	subs	r3, #2
 8014936:	2b1e      	cmp	r3, #30
 8014938:	d87e      	bhi.n	8014a38 <UART_SetConfig+0x6c4>
 801493a:	a201      	add	r2, pc, #4	@ (adr r2, 8014940 <UART_SetConfig+0x5cc>)
 801493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014940:	080149c3 	.word	0x080149c3
 8014944:	08014a39 	.word	0x08014a39
 8014948:	080149cb 	.word	0x080149cb
 801494c:	08014a39 	.word	0x08014a39
 8014950:	08014a39 	.word	0x08014a39
 8014954:	08014a39 	.word	0x08014a39
 8014958:	080149db 	.word	0x080149db
 801495c:	08014a39 	.word	0x08014a39
 8014960:	08014a39 	.word	0x08014a39
 8014964:	08014a39 	.word	0x08014a39
 8014968:	08014a39 	.word	0x08014a39
 801496c:	08014a39 	.word	0x08014a39
 8014970:	08014a39 	.word	0x08014a39
 8014974:	08014a39 	.word	0x08014a39
 8014978:	080149eb 	.word	0x080149eb
 801497c:	08014a39 	.word	0x08014a39
 8014980:	08014a39 	.word	0x08014a39
 8014984:	08014a39 	.word	0x08014a39
 8014988:	08014a39 	.word	0x08014a39
 801498c:	08014a39 	.word	0x08014a39
 8014990:	08014a39 	.word	0x08014a39
 8014994:	08014a39 	.word	0x08014a39
 8014998:	08014a39 	.word	0x08014a39
 801499c:	08014a39 	.word	0x08014a39
 80149a0:	08014a39 	.word	0x08014a39
 80149a4:	08014a39 	.word	0x08014a39
 80149a8:	08014a39 	.word	0x08014a39
 80149ac:	08014a39 	.word	0x08014a39
 80149b0:	08014a39 	.word	0x08014a39
 80149b4:	08014a39 	.word	0x08014a39
 80149b8:	08014a2b 	.word	0x08014a2b
 80149bc:	2b40      	cmp	r3, #64	@ 0x40
 80149be:	d037      	beq.n	8014a30 <UART_SetConfig+0x6bc>
 80149c0:	e03a      	b.n	8014a38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80149c2:	f7fc fda3 	bl	801150c <HAL_RCCEx_GetD3PCLK1Freq>
 80149c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80149c8:	e03c      	b.n	8014a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80149ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fc fdb2 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80149d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149d8:	e034      	b.n	8014a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80149da:	f107 0318 	add.w	r3, r7, #24
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fc fefe 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149e8:	e02c      	b.n	8014a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80149ea:	4b09      	ldr	r3, [pc, #36]	@ (8014a10 <UART_SetConfig+0x69c>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	f003 0320 	and.w	r3, r3, #32
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d016      	beq.n	8014a24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80149f6:	4b06      	ldr	r3, [pc, #24]	@ (8014a10 <UART_SetConfig+0x69c>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	08db      	lsrs	r3, r3, #3
 80149fc:	f003 0303 	and.w	r3, r3, #3
 8014a00:	4a07      	ldr	r2, [pc, #28]	@ (8014a20 <UART_SetConfig+0x6ac>)
 8014a02:	fa22 f303 	lsr.w	r3, r2, r3
 8014a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014a08:	e01c      	b.n	8014a44 <UART_SetConfig+0x6d0>
 8014a0a:	bf00      	nop
 8014a0c:	40011400 	.word	0x40011400
 8014a10:	58024400 	.word	0x58024400
 8014a14:	40007800 	.word	0x40007800
 8014a18:	40007c00 	.word	0x40007c00
 8014a1c:	58000c00 	.word	0x58000c00
 8014a20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014a24:	4b9d      	ldr	r3, [pc, #628]	@ (8014c9c <UART_SetConfig+0x928>)
 8014a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a28:	e00c      	b.n	8014a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014a2a:	4b9d      	ldr	r3, [pc, #628]	@ (8014ca0 <UART_SetConfig+0x92c>)
 8014a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a2e:	e009      	b.n	8014a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a36:	e005      	b.n	8014a44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014a42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	f000 81de 	beq.w	8014e08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a50:	4a94      	ldr	r2, [pc, #592]	@ (8014ca4 <UART_SetConfig+0x930>)
 8014a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a56:	461a      	mov	r2, r3
 8014a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	685a      	ldr	r2, [r3, #4]
 8014a64:	4613      	mov	r3, r2
 8014a66:	005b      	lsls	r3, r3, #1
 8014a68:	4413      	add	r3, r2
 8014a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d305      	bcc.n	8014a7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d903      	bls.n	8014a84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014a82:	e1c1      	b.n	8014e08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a86:	2200      	movs	r2, #0
 8014a88:	60bb      	str	r3, [r7, #8]
 8014a8a:	60fa      	str	r2, [r7, #12]
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a90:	4a84      	ldr	r2, [pc, #528]	@ (8014ca4 <UART_SetConfig+0x930>)
 8014a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	2200      	movs	r2, #0
 8014a9a:	603b      	str	r3, [r7, #0]
 8014a9c:	607a      	str	r2, [r7, #4]
 8014a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014aa6:	f7eb fc73 	bl	8000390 <__aeabi_uldivmod>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	460b      	mov	r3, r1
 8014aae:	4610      	mov	r0, r2
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	f04f 0200 	mov.w	r2, #0
 8014ab6:	f04f 0300 	mov.w	r3, #0
 8014aba:	020b      	lsls	r3, r1, #8
 8014abc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014ac0:	0202      	lsls	r2, r0, #8
 8014ac2:	6979      	ldr	r1, [r7, #20]
 8014ac4:	6849      	ldr	r1, [r1, #4]
 8014ac6:	0849      	lsrs	r1, r1, #1
 8014ac8:	2000      	movs	r0, #0
 8014aca:	460c      	mov	r4, r1
 8014acc:	4605      	mov	r5, r0
 8014ace:	eb12 0804 	adds.w	r8, r2, r4
 8014ad2:	eb43 0905 	adc.w	r9, r3, r5
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	2200      	movs	r2, #0
 8014adc:	469a      	mov	sl, r3
 8014ade:	4693      	mov	fp, r2
 8014ae0:	4652      	mov	r2, sl
 8014ae2:	465b      	mov	r3, fp
 8014ae4:	4640      	mov	r0, r8
 8014ae6:	4649      	mov	r1, r9
 8014ae8:	f7eb fc52 	bl	8000390 <__aeabi_uldivmod>
 8014aec:	4602      	mov	r2, r0
 8014aee:	460b      	mov	r3, r1
 8014af0:	4613      	mov	r3, r2
 8014af2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014af6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014afa:	d308      	bcc.n	8014b0e <UART_SetConfig+0x79a>
 8014afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014b02:	d204      	bcs.n	8014b0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b0a:	60da      	str	r2, [r3, #12]
 8014b0c:	e17c      	b.n	8014e08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8014b0e:	2301      	movs	r3, #1
 8014b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014b14:	e178      	b.n	8014e08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	69db      	ldr	r3, [r3, #28]
 8014b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014b1e:	f040 80c5 	bne.w	8014cac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8014b22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014b26:	2b20      	cmp	r3, #32
 8014b28:	dc48      	bgt.n	8014bbc <UART_SetConfig+0x848>
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	db7b      	blt.n	8014c26 <UART_SetConfig+0x8b2>
 8014b2e:	2b20      	cmp	r3, #32
 8014b30:	d879      	bhi.n	8014c26 <UART_SetConfig+0x8b2>
 8014b32:	a201      	add	r2, pc, #4	@ (adr r2, 8014b38 <UART_SetConfig+0x7c4>)
 8014b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b38:	08014bc3 	.word	0x08014bc3
 8014b3c:	08014bcb 	.word	0x08014bcb
 8014b40:	08014c27 	.word	0x08014c27
 8014b44:	08014c27 	.word	0x08014c27
 8014b48:	08014bd3 	.word	0x08014bd3
 8014b4c:	08014c27 	.word	0x08014c27
 8014b50:	08014c27 	.word	0x08014c27
 8014b54:	08014c27 	.word	0x08014c27
 8014b58:	08014be3 	.word	0x08014be3
 8014b5c:	08014c27 	.word	0x08014c27
 8014b60:	08014c27 	.word	0x08014c27
 8014b64:	08014c27 	.word	0x08014c27
 8014b68:	08014c27 	.word	0x08014c27
 8014b6c:	08014c27 	.word	0x08014c27
 8014b70:	08014c27 	.word	0x08014c27
 8014b74:	08014c27 	.word	0x08014c27
 8014b78:	08014bf3 	.word	0x08014bf3
 8014b7c:	08014c27 	.word	0x08014c27
 8014b80:	08014c27 	.word	0x08014c27
 8014b84:	08014c27 	.word	0x08014c27
 8014b88:	08014c27 	.word	0x08014c27
 8014b8c:	08014c27 	.word	0x08014c27
 8014b90:	08014c27 	.word	0x08014c27
 8014b94:	08014c27 	.word	0x08014c27
 8014b98:	08014c27 	.word	0x08014c27
 8014b9c:	08014c27 	.word	0x08014c27
 8014ba0:	08014c27 	.word	0x08014c27
 8014ba4:	08014c27 	.word	0x08014c27
 8014ba8:	08014c27 	.word	0x08014c27
 8014bac:	08014c27 	.word	0x08014c27
 8014bb0:	08014c27 	.word	0x08014c27
 8014bb4:	08014c27 	.word	0x08014c27
 8014bb8:	08014c19 	.word	0x08014c19
 8014bbc:	2b40      	cmp	r3, #64	@ 0x40
 8014bbe:	d02e      	beq.n	8014c1e <UART_SetConfig+0x8aa>
 8014bc0:	e031      	b.n	8014c26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014bc2:	f7fa fced 	bl	800f5a0 <HAL_RCC_GetPCLK1Freq>
 8014bc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014bc8:	e033      	b.n	8014c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014bca:	f7fa fcff 	bl	800f5cc <HAL_RCC_GetPCLK2Freq>
 8014bce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014bd0:	e02f      	b.n	8014c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7fc fcae 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014be0:	e027      	b.n	8014c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014be2:	f107 0318 	add.w	r3, r7, #24
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fc fdfa 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014bec:	69fb      	ldr	r3, [r7, #28]
 8014bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014bf0:	e01f      	b.n	8014c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8014ca8 <UART_SetConfig+0x934>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f003 0320 	and.w	r3, r3, #32
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d009      	beq.n	8014c12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8014ca8 <UART_SetConfig+0x934>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	08db      	lsrs	r3, r3, #3
 8014c04:	f003 0303 	and.w	r3, r3, #3
 8014c08:	4a24      	ldr	r2, [pc, #144]	@ (8014c9c <UART_SetConfig+0x928>)
 8014c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8014c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014c10:	e00f      	b.n	8014c32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014c12:	4b22      	ldr	r3, [pc, #136]	@ (8014c9c <UART_SetConfig+0x928>)
 8014c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c16:	e00c      	b.n	8014c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014c18:	4b21      	ldr	r3, [pc, #132]	@ (8014ca0 <UART_SetConfig+0x92c>)
 8014c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c1c:	e009      	b.n	8014c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c24:	e005      	b.n	8014c32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014c26:	2300      	movs	r3, #0
 8014c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014c30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f000 80e7 	beq.w	8014e08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c3e:	4a19      	ldr	r2, [pc, #100]	@ (8014ca4 <UART_SetConfig+0x930>)
 8014c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014c44:	461a      	mov	r2, r3
 8014c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c4c:	005a      	lsls	r2, r3, #1
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	085b      	lsrs	r3, r3, #1
 8014c54:	441a      	add	r2, r3
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c62:	2b0f      	cmp	r3, #15
 8014c64:	d916      	bls.n	8014c94 <UART_SetConfig+0x920>
 8014c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c6c:	d212      	bcs.n	8014c94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	f023 030f 	bic.w	r3, r3, #15
 8014c76:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c7a:	085b      	lsrs	r3, r3, #1
 8014c7c:	b29b      	uxth	r3, r3
 8014c7e:	f003 0307 	and.w	r3, r3, #7
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014c86:	4313      	orrs	r3, r2
 8014c88:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8014c8a:	697b      	ldr	r3, [r7, #20]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014c90:	60da      	str	r2, [r3, #12]
 8014c92:	e0b9      	b.n	8014e08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014c94:	2301      	movs	r3, #1
 8014c96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014c9a:	e0b5      	b.n	8014e08 <UART_SetConfig+0xa94>
 8014c9c:	03d09000 	.word	0x03d09000
 8014ca0:	003d0900 	.word	0x003d0900
 8014ca4:	0801b924 	.word	0x0801b924
 8014ca8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8014cac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014cb0:	2b20      	cmp	r3, #32
 8014cb2:	dc49      	bgt.n	8014d48 <UART_SetConfig+0x9d4>
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	db7c      	blt.n	8014db2 <UART_SetConfig+0xa3e>
 8014cb8:	2b20      	cmp	r3, #32
 8014cba:	d87a      	bhi.n	8014db2 <UART_SetConfig+0xa3e>
 8014cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8014cc4 <UART_SetConfig+0x950>)
 8014cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cc2:	bf00      	nop
 8014cc4:	08014d4f 	.word	0x08014d4f
 8014cc8:	08014d57 	.word	0x08014d57
 8014ccc:	08014db3 	.word	0x08014db3
 8014cd0:	08014db3 	.word	0x08014db3
 8014cd4:	08014d5f 	.word	0x08014d5f
 8014cd8:	08014db3 	.word	0x08014db3
 8014cdc:	08014db3 	.word	0x08014db3
 8014ce0:	08014db3 	.word	0x08014db3
 8014ce4:	08014d6f 	.word	0x08014d6f
 8014ce8:	08014db3 	.word	0x08014db3
 8014cec:	08014db3 	.word	0x08014db3
 8014cf0:	08014db3 	.word	0x08014db3
 8014cf4:	08014db3 	.word	0x08014db3
 8014cf8:	08014db3 	.word	0x08014db3
 8014cfc:	08014db3 	.word	0x08014db3
 8014d00:	08014db3 	.word	0x08014db3
 8014d04:	08014d7f 	.word	0x08014d7f
 8014d08:	08014db3 	.word	0x08014db3
 8014d0c:	08014db3 	.word	0x08014db3
 8014d10:	08014db3 	.word	0x08014db3
 8014d14:	08014db3 	.word	0x08014db3
 8014d18:	08014db3 	.word	0x08014db3
 8014d1c:	08014db3 	.word	0x08014db3
 8014d20:	08014db3 	.word	0x08014db3
 8014d24:	08014db3 	.word	0x08014db3
 8014d28:	08014db3 	.word	0x08014db3
 8014d2c:	08014db3 	.word	0x08014db3
 8014d30:	08014db3 	.word	0x08014db3
 8014d34:	08014db3 	.word	0x08014db3
 8014d38:	08014db3 	.word	0x08014db3
 8014d3c:	08014db3 	.word	0x08014db3
 8014d40:	08014db3 	.word	0x08014db3
 8014d44:	08014da5 	.word	0x08014da5
 8014d48:	2b40      	cmp	r3, #64	@ 0x40
 8014d4a:	d02e      	beq.n	8014daa <UART_SetConfig+0xa36>
 8014d4c:	e031      	b.n	8014db2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014d4e:	f7fa fc27 	bl	800f5a0 <HAL_RCC_GetPCLK1Freq>
 8014d52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014d54:	e033      	b.n	8014dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014d56:	f7fa fc39 	bl	800f5cc <HAL_RCC_GetPCLK2Freq>
 8014d5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014d5c:	e02f      	b.n	8014dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7fc fbe8 	bl	8011538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d6c:	e027      	b.n	8014dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014d6e:	f107 0318 	add.w	r3, r7, #24
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fc fd34 	bl	80117e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014d78:	69fb      	ldr	r3, [r7, #28]
 8014d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d7c:	e01f      	b.n	8014dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8014e34 <UART_SetConfig+0xac0>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f003 0320 	and.w	r3, r3, #32
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d009      	beq.n	8014d9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8014e34 <UART_SetConfig+0xac0>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	08db      	lsrs	r3, r3, #3
 8014d90:	f003 0303 	and.w	r3, r3, #3
 8014d94:	4a28      	ldr	r2, [pc, #160]	@ (8014e38 <UART_SetConfig+0xac4>)
 8014d96:	fa22 f303 	lsr.w	r3, r2, r3
 8014d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014d9c:	e00f      	b.n	8014dbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8014d9e:	4b26      	ldr	r3, [pc, #152]	@ (8014e38 <UART_SetConfig+0xac4>)
 8014da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014da2:	e00c      	b.n	8014dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014da4:	4b25      	ldr	r3, [pc, #148]	@ (8014e3c <UART_SetConfig+0xac8>)
 8014da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014da8:	e009      	b.n	8014dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014db0:	e005      	b.n	8014dbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8014db2:	2300      	movs	r3, #0
 8014db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014db6:	2301      	movs	r3, #1
 8014db8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8014dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d021      	beq.n	8014e08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8014e40 <UART_SetConfig+0xacc>)
 8014dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014dce:	461a      	mov	r2, r3
 8014dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8014dd6:	697b      	ldr	r3, [r7, #20]
 8014dd8:	685b      	ldr	r3, [r3, #4]
 8014dda:	085b      	lsrs	r3, r3, #1
 8014ddc:	441a      	add	r2, r3
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014de6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dea:	2b0f      	cmp	r3, #15
 8014dec:	d909      	bls.n	8014e02 <UART_SetConfig+0xa8e>
 8014dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014df4:	d205      	bcs.n	8014e02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014df8:	b29a      	uxth	r2, r3
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	60da      	str	r2, [r3, #12]
 8014e00:	e002      	b.n	8014e08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014e02:	2301      	movs	r3, #1
 8014e04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	2201      	movs	r2, #1
 8014e14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	2200      	movs	r2, #0
 8014e22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8014e24:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3748      	adds	r7, #72	@ 0x48
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014e32:	bf00      	nop
 8014e34:	58024400 	.word	0x58024400
 8014e38:	03d09000 	.word	0x03d09000
 8014e3c:	003d0900 	.word	0x003d0900
 8014e40:	0801b924 	.word	0x0801b924

08014e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014e44:	b480      	push	{r7}
 8014e46:	b083      	sub	sp, #12
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e50:	f003 0308 	and.w	r3, r3, #8
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d00a      	beq.n	8014e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	430a      	orrs	r2, r1
 8014e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e72:	f003 0301 	and.w	r3, r3, #1
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d00a      	beq.n	8014e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	685b      	ldr	r3, [r3, #4]
 8014e80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	430a      	orrs	r2, r1
 8014e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e94:	f003 0302 	and.w	r3, r3, #2
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d00a      	beq.n	8014eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	685b      	ldr	r3, [r3, #4]
 8014ea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	430a      	orrs	r2, r1
 8014eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014eb6:	f003 0304 	and.w	r3, r3, #4
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d00a      	beq.n	8014ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	430a      	orrs	r2, r1
 8014ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ed8:	f003 0310 	and.w	r3, r3, #16
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d00a      	beq.n	8014ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	689b      	ldr	r3, [r3, #8]
 8014ee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	430a      	orrs	r2, r1
 8014ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014efa:	f003 0320 	and.w	r3, r3, #32
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d00a      	beq.n	8014f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	689b      	ldr	r3, [r3, #8]
 8014f08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	430a      	orrs	r2, r1
 8014f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d01a      	beq.n	8014f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	685b      	ldr	r3, [r3, #4]
 8014f2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	430a      	orrs	r2, r1
 8014f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014f42:	d10a      	bne.n	8014f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	685b      	ldr	r3, [r3, #4]
 8014f4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	430a      	orrs	r2, r1
 8014f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d00a      	beq.n	8014f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	685b      	ldr	r3, [r3, #4]
 8014f6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	430a      	orrs	r2, r1
 8014f7a:	605a      	str	r2, [r3, #4]
  }
}
 8014f7c:	bf00      	nop
 8014f7e:	370c      	adds	r7, #12
 8014f80:	46bd      	mov	sp, r7
 8014f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f86:	4770      	bx	lr

08014f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b098      	sub	sp, #96	@ 0x60
 8014f8c:	af02      	add	r7, sp, #8
 8014f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2200      	movs	r2, #0
 8014f94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014f98:	f7ee fbc2 	bl	8003720 <HAL_GetTick>
 8014f9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	f003 0308 	and.w	r3, r3, #8
 8014fa8:	2b08      	cmp	r3, #8
 8014faa:	d12f      	bne.n	801500c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014fac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 f88e 	bl	80150dc <UART_WaitOnFlagUntilTimeout>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d022      	beq.n	801500c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fce:	e853 3f00 	ldrex	r3, [r3]
 8014fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8014fe6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fe8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014fea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014fec:	e841 2300 	strex	r3, r2, [r1]
 8014ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d1e6      	bne.n	8014fc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2220      	movs	r2, #32
 8014ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2200      	movs	r2, #0
 8015004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015008:	2303      	movs	r3, #3
 801500a:	e063      	b.n	80150d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	f003 0304 	and.w	r3, r3, #4
 8015016:	2b04      	cmp	r3, #4
 8015018:	d149      	bne.n	80150ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801501a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801501e:	9300      	str	r3, [sp, #0]
 8015020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015022:	2200      	movs	r2, #0
 8015024:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f000 f857 	bl	80150dc <UART_WaitOnFlagUntilTimeout>
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	d03c      	beq.n	80150ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801503c:	e853 3f00 	ldrex	r3, [r3]
 8015040:	623b      	str	r3, [r7, #32]
   return(result);
 8015042:	6a3b      	ldr	r3, [r7, #32]
 8015044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015048:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	461a      	mov	r2, r3
 8015050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015052:	633b      	str	r3, [r7, #48]	@ 0x30
 8015054:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801505a:	e841 2300 	strex	r3, r2, [r1]
 801505e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015062:	2b00      	cmp	r3, #0
 8015064:	d1e6      	bne.n	8015034 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	3308      	adds	r3, #8
 801506c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801506e:	693b      	ldr	r3, [r7, #16]
 8015070:	e853 3f00 	ldrex	r3, [r3]
 8015074:	60fb      	str	r3, [r7, #12]
   return(result);
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	f023 0301 	bic.w	r3, r3, #1
 801507c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	3308      	adds	r3, #8
 8015084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015086:	61fa      	str	r2, [r7, #28]
 8015088:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801508a:	69b9      	ldr	r1, [r7, #24]
 801508c:	69fa      	ldr	r2, [r7, #28]
 801508e:	e841 2300 	strex	r3, r2, [r1]
 8015092:	617b      	str	r3, [r7, #20]
   return(result);
 8015094:	697b      	ldr	r3, [r7, #20]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d1e5      	bne.n	8015066 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2220      	movs	r2, #32
 801509e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2200      	movs	r2, #0
 80150a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80150aa:	2303      	movs	r3, #3
 80150ac:	e012      	b.n	80150d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2220      	movs	r2, #32
 80150b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2220      	movs	r2, #32
 80150ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2200      	movs	r2, #0
 80150c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2200      	movs	r2, #0
 80150c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	2200      	movs	r2, #0
 80150ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80150d2:	2300      	movs	r3, #0
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3758      	adds	r7, #88	@ 0x58
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b084      	sub	sp, #16
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	60f8      	str	r0, [r7, #12]
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	603b      	str	r3, [r7, #0]
 80150e8:	4613      	mov	r3, r2
 80150ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80150ec:	e04f      	b.n	801518e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80150ee:	69bb      	ldr	r3, [r7, #24]
 80150f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150f4:	d04b      	beq.n	801518e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80150f6:	f7ee fb13 	bl	8003720 <HAL_GetTick>
 80150fa:	4602      	mov	r2, r0
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	69ba      	ldr	r2, [r7, #24]
 8015102:	429a      	cmp	r2, r3
 8015104:	d302      	bcc.n	801510c <UART_WaitOnFlagUntilTimeout+0x30>
 8015106:	69bb      	ldr	r3, [r7, #24]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d101      	bne.n	8015110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801510c:	2303      	movs	r3, #3
 801510e:	e04e      	b.n	80151ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	f003 0304 	and.w	r3, r3, #4
 801511a:	2b00      	cmp	r3, #0
 801511c:	d037      	beq.n	801518e <UART_WaitOnFlagUntilTimeout+0xb2>
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	2b80      	cmp	r3, #128	@ 0x80
 8015122:	d034      	beq.n	801518e <UART_WaitOnFlagUntilTimeout+0xb2>
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	2b40      	cmp	r3, #64	@ 0x40
 8015128:	d031      	beq.n	801518e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	69db      	ldr	r3, [r3, #28]
 8015130:	f003 0308 	and.w	r3, r3, #8
 8015134:	2b08      	cmp	r3, #8
 8015136:	d110      	bne.n	801515a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	2208      	movs	r2, #8
 801513e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015140:	68f8      	ldr	r0, [r7, #12]
 8015142:	f000 f921 	bl	8015388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	2208      	movs	r2, #8
 801514a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	2200      	movs	r2, #0
 8015152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8015156:	2301      	movs	r3, #1
 8015158:	e029      	b.n	80151ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	69db      	ldr	r3, [r3, #28]
 8015160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015168:	d111      	bne.n	801518e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015174:	68f8      	ldr	r0, [r7, #12]
 8015176:	f000 f907 	bl	8015388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	2220      	movs	r2, #32
 801517e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2200      	movs	r2, #0
 8015186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801518a:	2303      	movs	r3, #3
 801518c:	e00f      	b.n	80151ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	69da      	ldr	r2, [r3, #28]
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	4013      	ands	r3, r2
 8015198:	68ba      	ldr	r2, [r7, #8]
 801519a:	429a      	cmp	r2, r3
 801519c:	bf0c      	ite	eq
 801519e:	2301      	moveq	r3, #1
 80151a0:	2300      	movne	r3, #0
 80151a2:	b2db      	uxtb	r3, r3
 80151a4:	461a      	mov	r2, r3
 80151a6:	79fb      	ldrb	r3, [r7, #7]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d0a0      	beq.n	80150ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80151ac:	2300      	movs	r3, #0
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
	...

080151b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b096      	sub	sp, #88	@ 0x58
 80151bc:	af00      	add	r7, sp, #0
 80151be:	60f8      	str	r0, [r7, #12]
 80151c0:	60b9      	str	r1, [r7, #8]
 80151c2:	4613      	mov	r3, r2
 80151c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	88fa      	ldrh	r2, [r7, #6]
 80151d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	2200      	movs	r2, #0
 80151d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	2222      	movs	r2, #34	@ 0x22
 80151e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d02d      	beq.n	801524a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80151f4:	4a40      	ldr	r2, [pc, #256]	@ (80152f8 <UART_Start_Receive_DMA+0x140>)
 80151f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80151fe:	4a3f      	ldr	r2, [pc, #252]	@ (80152fc <UART_Start_Receive_DMA+0x144>)
 8015200:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015208:	4a3d      	ldr	r2, [pc, #244]	@ (8015300 <UART_Start_Receive_DMA+0x148>)
 801520a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015212:	2200      	movs	r2, #0
 8015214:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	3324      	adds	r3, #36	@ 0x24
 8015222:	4619      	mov	r1, r3
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015228:	461a      	mov	r2, r3
 801522a:	88fb      	ldrh	r3, [r7, #6]
 801522c:	f7f0 fa4a 	bl	80056c4 <HAL_DMA_Start_IT>
 8015230:	4603      	mov	r3, r0
 8015232:	2b00      	cmp	r3, #0
 8015234:	d009      	beq.n	801524a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2210      	movs	r2, #16
 801523a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2220      	movs	r2, #32
 8015242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8015246:	2301      	movs	r3, #1
 8015248:	e051      	b.n	80152ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	691b      	ldr	r3, [r3, #16]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d018      	beq.n	8015284 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801525a:	e853 3f00 	ldrex	r3, [r3]
 801525e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015266:	657b      	str	r3, [r7, #84]	@ 0x54
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	461a      	mov	r2, r3
 801526e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015270:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015272:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015274:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015278:	e841 2300 	strex	r3, r2, [r1]
 801527c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801527e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015280:	2b00      	cmp	r3, #0
 8015282:	d1e6      	bne.n	8015252 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	3308      	adds	r3, #8
 801528a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801528e:	e853 3f00 	ldrex	r3, [r3]
 8015292:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015296:	f043 0301 	orr.w	r3, r3, #1
 801529a:	653b      	str	r3, [r7, #80]	@ 0x50
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	3308      	adds	r3, #8
 80152a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80152a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80152a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80152aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80152ac:	e841 2300 	strex	r3, r2, [r1]
 80152b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80152b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d1e5      	bne.n	8015284 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	3308      	adds	r3, #8
 80152be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	e853 3f00 	ldrex	r3, [r3]
 80152c6:	613b      	str	r3, [r7, #16]
   return(result);
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	3308      	adds	r3, #8
 80152d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80152d8:	623a      	str	r2, [r7, #32]
 80152da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152dc:	69f9      	ldr	r1, [r7, #28]
 80152de:	6a3a      	ldr	r2, [r7, #32]
 80152e0:	e841 2300 	strex	r3, r2, [r1]
 80152e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80152e6:	69bb      	ldr	r3, [r7, #24]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d1e5      	bne.n	80152b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80152ec:	2300      	movs	r3, #0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3758      	adds	r7, #88	@ 0x58
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}
 80152f6:	bf00      	nop
 80152f8:	08015455 	.word	0x08015455
 80152fc:	0801557d 	.word	0x0801557d
 8015300:	080155bb 	.word	0x080155bb

08015304 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015304:	b480      	push	{r7}
 8015306:	b08f      	sub	sp, #60	@ 0x3c
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015312:	6a3b      	ldr	r3, [r7, #32]
 8015314:	e853 3f00 	ldrex	r3, [r3]
 8015318:	61fb      	str	r3, [r7, #28]
   return(result);
 801531a:	69fb      	ldr	r3, [r7, #28]
 801531c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015320:	637b      	str	r3, [r7, #52]	@ 0x34
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	461a      	mov	r2, r3
 8015328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801532c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801532e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015332:	e841 2300 	strex	r3, r2, [r1]
 8015336:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801533a:	2b00      	cmp	r3, #0
 801533c:	d1e6      	bne.n	801530c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	3308      	adds	r3, #8
 8015344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	e853 3f00 	ldrex	r3, [r3]
 801534c:	60bb      	str	r3, [r7, #8]
   return(result);
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8015354:	633b      	str	r3, [r7, #48]	@ 0x30
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	3308      	adds	r3, #8
 801535c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801535e:	61ba      	str	r2, [r7, #24]
 8015360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015362:	6979      	ldr	r1, [r7, #20]
 8015364:	69ba      	ldr	r2, [r7, #24]
 8015366:	e841 2300 	strex	r3, r2, [r1]
 801536a:	613b      	str	r3, [r7, #16]
   return(result);
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d1e5      	bne.n	801533e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2220      	movs	r2, #32
 8015376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801537a:	bf00      	nop
 801537c:	373c      	adds	r7, #60	@ 0x3c
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr
	...

08015388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015388:	b480      	push	{r7}
 801538a:	b095      	sub	sp, #84	@ 0x54
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015398:	e853 3f00 	ldrex	r3, [r3]
 801539c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80153a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	461a      	mov	r2, r3
 80153ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80153ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80153b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80153b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80153b6:	e841 2300 	strex	r3, r2, [r1]
 80153ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80153bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d1e6      	bne.n	8015390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	3308      	adds	r3, #8
 80153c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153ca:	6a3b      	ldr	r3, [r7, #32]
 80153cc:	e853 3f00 	ldrex	r3, [r3]
 80153d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80153d2:	69fa      	ldr	r2, [r7, #28]
 80153d4:	4b1e      	ldr	r3, [pc, #120]	@ (8015450 <UART_EndRxTransfer+0xc8>)
 80153d6:	4013      	ands	r3, r2
 80153d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	3308      	adds	r3, #8
 80153e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80153e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80153e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80153e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153ea:	e841 2300 	strex	r3, r2, [r1]
 80153ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80153f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d1e5      	bne.n	80153c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153fa:	2b01      	cmp	r3, #1
 80153fc:	d118      	bne.n	8015430 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	e853 3f00 	ldrex	r3, [r3]
 801540a:	60bb      	str	r3, [r7, #8]
   return(result);
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	f023 0310 	bic.w	r3, r3, #16
 8015412:	647b      	str	r3, [r7, #68]	@ 0x44
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	461a      	mov	r2, r3
 801541a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801541c:	61bb      	str	r3, [r7, #24]
 801541e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015420:	6979      	ldr	r1, [r7, #20]
 8015422:	69ba      	ldr	r2, [r7, #24]
 8015424:	e841 2300 	strex	r3, r2, [r1]
 8015428:	613b      	str	r3, [r7, #16]
   return(result);
 801542a:	693b      	ldr	r3, [r7, #16]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d1e6      	bne.n	80153fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2220      	movs	r2, #32
 8015434:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2200      	movs	r2, #0
 801543c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2200      	movs	r2, #0
 8015442:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8015444:	bf00      	nop
 8015446:	3754      	adds	r7, #84	@ 0x54
 8015448:	46bd      	mov	sp, r7
 801544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544e:	4770      	bx	lr
 8015450:	effffffe 	.word	0xeffffffe

08015454 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b09c      	sub	sp, #112	@ 0x70
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015460:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	69db      	ldr	r3, [r3, #28]
 8015466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801546a:	d071      	beq.n	8015550 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801546c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801546e:	2200      	movs	r2, #0
 8015470:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801547a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801547c:	e853 3f00 	ldrex	r3, [r3]
 8015480:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015488:	66bb      	str	r3, [r7, #104]	@ 0x68
 801548a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	461a      	mov	r2, r3
 8015490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015492:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015494:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015496:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801549a:	e841 2300 	strex	r3, r2, [r1]
 801549e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80154a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d1e6      	bne.n	8015474 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80154a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	3308      	adds	r3, #8
 80154ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154b0:	e853 3f00 	ldrex	r3, [r3]
 80154b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80154b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154b8:	f023 0301 	bic.w	r3, r3, #1
 80154bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80154be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	3308      	adds	r3, #8
 80154c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80154c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80154c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80154cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80154ce:	e841 2300 	strex	r3, r2, [r1]
 80154d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80154d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d1e5      	bne.n	80154a6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80154da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	3308      	adds	r3, #8
 80154e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154e4:	e853 3f00 	ldrex	r3, [r3]
 80154e8:	623b      	str	r3, [r7, #32]
   return(result);
 80154ea:	6a3b      	ldr	r3, [r7, #32]
 80154ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80154f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80154f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	3308      	adds	r3, #8
 80154f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80154fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80154fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015502:	e841 2300 	strex	r3, r2, [r1]
 8015506:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801550a:	2b00      	cmp	r3, #0
 801550c:	d1e5      	bne.n	80154da <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801550e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015510:	2220      	movs	r2, #32
 8015512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801551a:	2b01      	cmp	r3, #1
 801551c:	d118      	bne.n	8015550 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801551e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	e853 3f00 	ldrex	r3, [r3]
 801552a:	60fb      	str	r3, [r7, #12]
   return(result);
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	f023 0310 	bic.w	r3, r3, #16
 8015532:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	461a      	mov	r2, r3
 801553a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801553c:	61fb      	str	r3, [r7, #28]
 801553e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015540:	69b9      	ldr	r1, [r7, #24]
 8015542:	69fa      	ldr	r2, [r7, #28]
 8015544:	e841 2300 	strex	r3, r2, [r1]
 8015548:	617b      	str	r3, [r7, #20]
   return(result);
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d1e6      	bne.n	801551e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015552:	2200      	movs	r2, #0
 8015554:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801555a:	2b01      	cmp	r3, #1
 801555c:	d107      	bne.n	801556e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801555e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015564:	4619      	mov	r1, r3
 8015566:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015568:	f7fe fef8 	bl	801435c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801556c:	e002      	b.n	8015574 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801556e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015570:	f7ec f9e6 	bl	8001940 <HAL_UART_RxCpltCallback>
}
 8015574:	bf00      	nop
 8015576:	3770      	adds	r7, #112	@ 0x70
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015588:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2201      	movs	r2, #1
 801558e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015594:	2b01      	cmp	r3, #1
 8015596:	d109      	bne.n	80155ac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801559e:	085b      	lsrs	r3, r3, #1
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	4619      	mov	r1, r3
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	f7fe fed9 	bl	801435c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80155aa:	e002      	b.n	80155b2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80155ac:	68f8      	ldr	r0, [r7, #12]
 80155ae:	f7fe fec1 	bl	8014334 <HAL_UART_RxHalfCpltCallback>
}
 80155b2:	bf00      	nop
 80155b4:	3710      	adds	r7, #16
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}

080155ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80155ba:	b580      	push	{r7, lr}
 80155bc:	b086      	sub	sp, #24
 80155be:	af00      	add	r7, sp, #0
 80155c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80155ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80155d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	689b      	ldr	r3, [r3, #8]
 80155de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80155e2:	2b80      	cmp	r3, #128	@ 0x80
 80155e4:	d109      	bne.n	80155fa <UART_DMAError+0x40>
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	2b21      	cmp	r3, #33	@ 0x21
 80155ea:	d106      	bne.n	80155fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	2200      	movs	r2, #0
 80155f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80155f4:	6978      	ldr	r0, [r7, #20]
 80155f6:	f7ff fe85 	bl	8015304 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	689b      	ldr	r3, [r3, #8]
 8015600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015604:	2b40      	cmp	r3, #64	@ 0x40
 8015606:	d109      	bne.n	801561c <UART_DMAError+0x62>
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2b22      	cmp	r3, #34	@ 0x22
 801560c:	d106      	bne.n	801561c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	2200      	movs	r2, #0
 8015612:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8015616:	6978      	ldr	r0, [r7, #20]
 8015618:	f7ff feb6 	bl	8015388 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015622:	f043 0210 	orr.w	r2, r3, #16
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801562c:	6978      	ldr	r0, [r7, #20]
 801562e:	f7fe fe8b 	bl	8014348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015632:	bf00      	nop
 8015634:	3718      	adds	r7, #24
 8015636:	46bd      	mov	sp, r7
 8015638:	bd80      	pop	{r7, pc}

0801563a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801563a:	b580      	push	{r7, lr}
 801563c:	b084      	sub	sp, #16
 801563e:	af00      	add	r7, sp, #0
 8015640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	2200      	movs	r2, #0
 801564c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015650:	68f8      	ldr	r0, [r7, #12]
 8015652:	f7fe fe79 	bl	8014348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015656:	bf00      	nop
 8015658:	3710      	adds	r7, #16
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}

0801565e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801565e:	b580      	push	{r7, lr}
 8015660:	b088      	sub	sp, #32
 8015662:	af00      	add	r7, sp, #0
 8015664:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	e853 3f00 	ldrex	r3, [r3]
 8015672:	60bb      	str	r3, [r7, #8]
   return(result);
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801567a:	61fb      	str	r3, [r7, #28]
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	461a      	mov	r2, r3
 8015682:	69fb      	ldr	r3, [r7, #28]
 8015684:	61bb      	str	r3, [r7, #24]
 8015686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015688:	6979      	ldr	r1, [r7, #20]
 801568a:	69ba      	ldr	r2, [r7, #24]
 801568c:	e841 2300 	strex	r3, r2, [r1]
 8015690:	613b      	str	r3, [r7, #16]
   return(result);
 8015692:	693b      	ldr	r3, [r7, #16]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d1e6      	bne.n	8015666 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2220      	movs	r2, #32
 801569c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2200      	movs	r2, #0
 80156a4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f7fe fe3a 	bl	8014320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80156ac:	bf00      	nop
 80156ae:	3720      	adds	r7, #32
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80156b4:	b480      	push	{r7}
 80156b6:	b083      	sub	sp, #12
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80156bc:	bf00      	nop
 80156be:	370c      	adds	r7, #12
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr

080156c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b083      	sub	sp, #12
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80156d0:	bf00      	nop
 80156d2:	370c      	adds	r7, #12
 80156d4:	46bd      	mov	sp, r7
 80156d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156da:	4770      	bx	lr

080156dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80156dc:	b480      	push	{r7}
 80156de:	b083      	sub	sp, #12
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80156e4:	bf00      	nop
 80156e6:	370c      	adds	r7, #12
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b084      	sub	sp, #16
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80156fe:	2b01      	cmp	r3, #1
 8015700:	d101      	bne.n	8015706 <HAL_UARTEx_EnableFifoMode+0x16>
 8015702:	2302      	movs	r3, #2
 8015704:	e02b      	b.n	801575e <HAL_UARTEx_EnableFifoMode+0x6e>
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2201      	movs	r2, #1
 801570a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2224      	movs	r2, #36	@ 0x24
 8015712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	f022 0201 	bic.w	r2, r2, #1
 801572c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015734:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 801573c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	68fa      	ldr	r2, [r7, #12]
 8015744:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015746:	6878      	ldr	r0, [r7, #4]
 8015748:	f000 f88a 	bl	8015860 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2220      	movs	r2, #32
 8015750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2200      	movs	r2, #0
 8015758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801575c:	2300      	movs	r3, #0
}
 801575e:	4618      	mov	r0, r3
 8015760:	3710      	adds	r7, #16
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}

08015766 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015766:	b580      	push	{r7, lr}
 8015768:	b084      	sub	sp, #16
 801576a:	af00      	add	r7, sp, #0
 801576c:	6078      	str	r0, [r7, #4]
 801576e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015776:	2b01      	cmp	r3, #1
 8015778:	d101      	bne.n	801577e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801577a:	2302      	movs	r3, #2
 801577c:	e02d      	b.n	80157da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2201      	movs	r2, #1
 8015782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2224      	movs	r2, #36	@ 0x24
 801578a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	681a      	ldr	r2, [r3, #0]
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	f022 0201 	bic.w	r2, r2, #1
 80157a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	689b      	ldr	r3, [r3, #8]
 80157ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	683a      	ldr	r2, [r7, #0]
 80157b6:	430a      	orrs	r2, r1
 80157b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f000 f850 	bl	8015860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	68fa      	ldr	r2, [r7, #12]
 80157c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2220      	movs	r2, #32
 80157cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2200      	movs	r2, #0
 80157d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80157d8:	2300      	movs	r3, #0
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}

080157e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80157e2:	b580      	push	{r7, lr}
 80157e4:	b084      	sub	sp, #16
 80157e6:	af00      	add	r7, sp, #0
 80157e8:	6078      	str	r0, [r7, #4]
 80157ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	d101      	bne.n	80157fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80157f6:	2302      	movs	r3, #2
 80157f8:	e02d      	b.n	8015856 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	2201      	movs	r2, #1
 80157fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	2224      	movs	r2, #36	@ 0x24
 8015806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	681a      	ldr	r2, [r3, #0]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	f022 0201 	bic.w	r2, r2, #1
 8015820:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	683a      	ldr	r2, [r7, #0]
 8015832:	430a      	orrs	r2, r1
 8015834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f000 f812 	bl	8015860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	68fa      	ldr	r2, [r7, #12]
 8015842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2220      	movs	r2, #32
 8015848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2200      	movs	r2, #0
 8015850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015854:	2300      	movs	r3, #0
}
 8015856:	4618      	mov	r0, r3
 8015858:	3710      	adds	r7, #16
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
	...

08015860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015860:	b480      	push	{r7}
 8015862:	b085      	sub	sp, #20
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801586c:	2b00      	cmp	r3, #0
 801586e:	d108      	bne.n	8015882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2201      	movs	r2, #1
 8015874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2201      	movs	r2, #1
 801587c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015880:	e031      	b.n	80158e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015882:	2310      	movs	r3, #16
 8015884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015886:	2310      	movs	r3, #16
 8015888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	689b      	ldr	r3, [r3, #8]
 8015890:	0e5b      	lsrs	r3, r3, #25
 8015892:	b2db      	uxtb	r3, r3
 8015894:	f003 0307 	and.w	r3, r3, #7
 8015898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	689b      	ldr	r3, [r3, #8]
 80158a0:	0f5b      	lsrs	r3, r3, #29
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	f003 0307 	and.w	r3, r3, #7
 80158a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80158aa:	7bbb      	ldrb	r3, [r7, #14]
 80158ac:	7b3a      	ldrb	r2, [r7, #12]
 80158ae:	4911      	ldr	r1, [pc, #68]	@ (80158f4 <UARTEx_SetNbDataToProcess+0x94>)
 80158b0:	5c8a      	ldrb	r2, [r1, r2]
 80158b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80158b6:	7b3a      	ldrb	r2, [r7, #12]
 80158b8:	490f      	ldr	r1, [pc, #60]	@ (80158f8 <UARTEx_SetNbDataToProcess+0x98>)
 80158ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80158bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80158c0:	b29a      	uxth	r2, r3
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80158c8:	7bfb      	ldrb	r3, [r7, #15]
 80158ca:	7b7a      	ldrb	r2, [r7, #13]
 80158cc:	4909      	ldr	r1, [pc, #36]	@ (80158f4 <UARTEx_SetNbDataToProcess+0x94>)
 80158ce:	5c8a      	ldrb	r2, [r1, r2]
 80158d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80158d4:	7b7a      	ldrb	r2, [r7, #13]
 80158d6:	4908      	ldr	r1, [pc, #32]	@ (80158f8 <UARTEx_SetNbDataToProcess+0x98>)
 80158d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80158da:	fb93 f3f2 	sdiv	r3, r3, r2
 80158de:	b29a      	uxth	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80158e6:	bf00      	nop
 80158e8:	3714      	adds	r7, #20
 80158ea:	46bd      	mov	sp, r7
 80158ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f0:	4770      	bx	lr
 80158f2:	bf00      	nop
 80158f4:	0801b93c 	.word	0x0801b93c
 80158f8:	0801b944 	.word	0x0801b944

080158fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80158fc:	b084      	sub	sp, #16
 80158fe:	b580      	push	{r7, lr}
 8015900:	b084      	sub	sp, #16
 8015902:	af00      	add	r7, sp, #0
 8015904:	6078      	str	r0, [r7, #4]
 8015906:	f107 001c 	add.w	r0, r7, #28
 801590a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801590e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015912:	2b01      	cmp	r3, #1
 8015914:	d121      	bne.n	801595a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801591a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	68da      	ldr	r2, [r3, #12]
 8015926:	4b2c      	ldr	r3, [pc, #176]	@ (80159d8 <USB_CoreInit+0xdc>)
 8015928:	4013      	ands	r3, r2
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	68db      	ldr	r3, [r3, #12]
 8015932:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801593a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801593e:	2b01      	cmp	r3, #1
 8015940:	d105      	bne.n	801594e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f001 fafa 	bl	8016f48 <USB_CoreReset>
 8015954:	4603      	mov	r3, r0
 8015956:	73fb      	strb	r3, [r7, #15]
 8015958:	e01b      	b.n	8015992 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	68db      	ldr	r3, [r3, #12]
 801595e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f001 faee 	bl	8016f48 <USB_CoreReset>
 801596c:	4603      	mov	r3, r0
 801596e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8015970:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8015974:	2b00      	cmp	r3, #0
 8015976:	d106      	bne.n	8015986 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801597c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	639a      	str	r2, [r3, #56]	@ 0x38
 8015984:	e005      	b.n	8015992 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801598a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8015992:	7fbb      	ldrb	r3, [r7, #30]
 8015994:	2b01      	cmp	r3, #1
 8015996:	d116      	bne.n	80159c6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801599c:	b29a      	uxth	r2, r3
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80159a6:	4b0d      	ldr	r3, [pc, #52]	@ (80159dc <USB_CoreInit+0xe0>)
 80159a8:	4313      	orrs	r3, r2
 80159aa:	687a      	ldr	r2, [r7, #4]
 80159ac:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	689b      	ldr	r3, [r3, #8]
 80159b2:	f043 0206 	orr.w	r2, r3, #6
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	689b      	ldr	r3, [r3, #8]
 80159be:	f043 0220 	orr.w	r2, r3, #32
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80159c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	3710      	adds	r7, #16
 80159cc:	46bd      	mov	sp, r7
 80159ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80159d2:	b004      	add	sp, #16
 80159d4:	4770      	bx	lr
 80159d6:	bf00      	nop
 80159d8:	ffbdffbf 	.word	0xffbdffbf
 80159dc:	03ee0000 	.word	0x03ee0000

080159e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80159e0:	b480      	push	{r7}
 80159e2:	b087      	sub	sp, #28
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	60f8      	str	r0, [r7, #12]
 80159e8:	60b9      	str	r1, [r7, #8]
 80159ea:	4613      	mov	r3, r2
 80159ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80159ee:	79fb      	ldrb	r3, [r7, #7]
 80159f0:	2b02      	cmp	r3, #2
 80159f2:	d165      	bne.n	8015ac0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80159f4:	68bb      	ldr	r3, [r7, #8]
 80159f6:	4a41      	ldr	r2, [pc, #260]	@ (8015afc <USB_SetTurnaroundTime+0x11c>)
 80159f8:	4293      	cmp	r3, r2
 80159fa:	d906      	bls.n	8015a0a <USB_SetTurnaroundTime+0x2a>
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	4a40      	ldr	r2, [pc, #256]	@ (8015b00 <USB_SetTurnaroundTime+0x120>)
 8015a00:	4293      	cmp	r3, r2
 8015a02:	d202      	bcs.n	8015a0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8015a04:	230f      	movs	r3, #15
 8015a06:	617b      	str	r3, [r7, #20]
 8015a08:	e062      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8015b00 <USB_SetTurnaroundTime+0x120>)
 8015a0e:	4293      	cmp	r3, r2
 8015a10:	d306      	bcc.n	8015a20 <USB_SetTurnaroundTime+0x40>
 8015a12:	68bb      	ldr	r3, [r7, #8]
 8015a14:	4a3b      	ldr	r2, [pc, #236]	@ (8015b04 <USB_SetTurnaroundTime+0x124>)
 8015a16:	4293      	cmp	r3, r2
 8015a18:	d202      	bcs.n	8015a20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015a1a:	230e      	movs	r3, #14
 8015a1c:	617b      	str	r3, [r7, #20]
 8015a1e:	e057      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	4a38      	ldr	r2, [pc, #224]	@ (8015b04 <USB_SetTurnaroundTime+0x124>)
 8015a24:	4293      	cmp	r3, r2
 8015a26:	d306      	bcc.n	8015a36 <USB_SetTurnaroundTime+0x56>
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	4a37      	ldr	r2, [pc, #220]	@ (8015b08 <USB_SetTurnaroundTime+0x128>)
 8015a2c:	4293      	cmp	r3, r2
 8015a2e:	d202      	bcs.n	8015a36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8015a30:	230d      	movs	r3, #13
 8015a32:	617b      	str	r3, [r7, #20]
 8015a34:	e04c      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	4a33      	ldr	r2, [pc, #204]	@ (8015b08 <USB_SetTurnaroundTime+0x128>)
 8015a3a:	4293      	cmp	r3, r2
 8015a3c:	d306      	bcc.n	8015a4c <USB_SetTurnaroundTime+0x6c>
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	4a32      	ldr	r2, [pc, #200]	@ (8015b0c <USB_SetTurnaroundTime+0x12c>)
 8015a42:	4293      	cmp	r3, r2
 8015a44:	d802      	bhi.n	8015a4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8015a46:	230c      	movs	r3, #12
 8015a48:	617b      	str	r3, [r7, #20]
 8015a4a:	e041      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8015b0c <USB_SetTurnaroundTime+0x12c>)
 8015a50:	4293      	cmp	r3, r2
 8015a52:	d906      	bls.n	8015a62 <USB_SetTurnaroundTime+0x82>
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	4a2e      	ldr	r2, [pc, #184]	@ (8015b10 <USB_SetTurnaroundTime+0x130>)
 8015a58:	4293      	cmp	r3, r2
 8015a5a:	d802      	bhi.n	8015a62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8015a5c:	230b      	movs	r3, #11
 8015a5e:	617b      	str	r3, [r7, #20]
 8015a60:	e036      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	4a2a      	ldr	r2, [pc, #168]	@ (8015b10 <USB_SetTurnaroundTime+0x130>)
 8015a66:	4293      	cmp	r3, r2
 8015a68:	d906      	bls.n	8015a78 <USB_SetTurnaroundTime+0x98>
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	4a29      	ldr	r2, [pc, #164]	@ (8015b14 <USB_SetTurnaroundTime+0x134>)
 8015a6e:	4293      	cmp	r3, r2
 8015a70:	d802      	bhi.n	8015a78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8015a72:	230a      	movs	r3, #10
 8015a74:	617b      	str	r3, [r7, #20]
 8015a76:	e02b      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	4a26      	ldr	r2, [pc, #152]	@ (8015b14 <USB_SetTurnaroundTime+0x134>)
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	d906      	bls.n	8015a8e <USB_SetTurnaroundTime+0xae>
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	4a25      	ldr	r2, [pc, #148]	@ (8015b18 <USB_SetTurnaroundTime+0x138>)
 8015a84:	4293      	cmp	r3, r2
 8015a86:	d202      	bcs.n	8015a8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8015a88:	2309      	movs	r3, #9
 8015a8a:	617b      	str	r3, [r7, #20]
 8015a8c:	e020      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	4a21      	ldr	r2, [pc, #132]	@ (8015b18 <USB_SetTurnaroundTime+0x138>)
 8015a92:	4293      	cmp	r3, r2
 8015a94:	d306      	bcc.n	8015aa4 <USB_SetTurnaroundTime+0xc4>
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	4a20      	ldr	r2, [pc, #128]	@ (8015b1c <USB_SetTurnaroundTime+0x13c>)
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	d802      	bhi.n	8015aa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015a9e:	2308      	movs	r3, #8
 8015aa0:	617b      	str	r3, [r7, #20]
 8015aa2:	e015      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8015b1c <USB_SetTurnaroundTime+0x13c>)
 8015aa8:	4293      	cmp	r3, r2
 8015aaa:	d906      	bls.n	8015aba <USB_SetTurnaroundTime+0xda>
 8015aac:	68bb      	ldr	r3, [r7, #8]
 8015aae:	4a1c      	ldr	r2, [pc, #112]	@ (8015b20 <USB_SetTurnaroundTime+0x140>)
 8015ab0:	4293      	cmp	r3, r2
 8015ab2:	d202      	bcs.n	8015aba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8015ab4:	2307      	movs	r3, #7
 8015ab6:	617b      	str	r3, [r7, #20]
 8015ab8:	e00a      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015aba:	2306      	movs	r3, #6
 8015abc:	617b      	str	r3, [r7, #20]
 8015abe:	e007      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8015ac0:	79fb      	ldrb	r3, [r7, #7]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d102      	bne.n	8015acc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8015ac6:	2309      	movs	r3, #9
 8015ac8:	617b      	str	r3, [r7, #20]
 8015aca:	e001      	b.n	8015ad0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015acc:	2309      	movs	r3, #9
 8015ace:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	68db      	ldr	r3, [r3, #12]
 8015ad4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	68da      	ldr	r2, [r3, #12]
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	029b      	lsls	r3, r3, #10
 8015ae4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8015ae8:	431a      	orrs	r2, r3
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015aee:	2300      	movs	r3, #0
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	371c      	adds	r7, #28
 8015af4:	46bd      	mov	sp, r7
 8015af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afa:	4770      	bx	lr
 8015afc:	00d8acbf 	.word	0x00d8acbf
 8015b00:	00e4e1c0 	.word	0x00e4e1c0
 8015b04:	00f42400 	.word	0x00f42400
 8015b08:	01067380 	.word	0x01067380
 8015b0c:	011a499f 	.word	0x011a499f
 8015b10:	01312cff 	.word	0x01312cff
 8015b14:	014ca43f 	.word	0x014ca43f
 8015b18:	016e3600 	.word	0x016e3600
 8015b1c:	01a6ab1f 	.word	0x01a6ab1f
 8015b20:	01e84800 	.word	0x01e84800

08015b24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015b24:	b480      	push	{r7}
 8015b26:	b083      	sub	sp, #12
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	689b      	ldr	r3, [r3, #8]
 8015b30:	f043 0201 	orr.w	r2, r3, #1
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015b38:	2300      	movs	r3, #0
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	370c      	adds	r7, #12
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b44:	4770      	bx	lr

08015b46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015b46:	b480      	push	{r7}
 8015b48:	b083      	sub	sp, #12
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	689b      	ldr	r3, [r3, #8]
 8015b52:	f023 0201 	bic.w	r2, r3, #1
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015b5a:	2300      	movs	r3, #0
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	370c      	adds	r7, #12
 8015b60:	46bd      	mov	sp, r7
 8015b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b66:	4770      	bx	lr

08015b68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	460b      	mov	r3, r1
 8015b72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8015b74:	2300      	movs	r3, #0
 8015b76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8015b84:	78fb      	ldrb	r3, [r7, #3]
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d115      	bne.n	8015bb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	68db      	ldr	r3, [r3, #12]
 8015b8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8015b96:	200a      	movs	r0, #10
 8015b98:	f7ed fdce 	bl	8003738 <HAL_Delay>
      ms += 10U;
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	330a      	adds	r3, #10
 8015ba0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f001 f93f 	bl	8016e26 <USB_GetMode>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	2b01      	cmp	r3, #1
 8015bac:	d01e      	beq.n	8015bec <USB_SetCurrentMode+0x84>
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8015bb2:	d9f0      	bls.n	8015b96 <USB_SetCurrentMode+0x2e>
 8015bb4:	e01a      	b.n	8015bec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8015bb6:	78fb      	ldrb	r3, [r7, #3]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d115      	bne.n	8015be8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8015bc8:	200a      	movs	r0, #10
 8015bca:	f7ed fdb5 	bl	8003738 <HAL_Delay>
      ms += 10U;
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	330a      	adds	r3, #10
 8015bd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f001 f926 	bl	8016e26 <USB_GetMode>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d005      	beq.n	8015bec <USB_SetCurrentMode+0x84>
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	2bc7      	cmp	r3, #199	@ 0xc7
 8015be4:	d9f0      	bls.n	8015bc8 <USB_SetCurrentMode+0x60>
 8015be6:	e001      	b.n	8015bec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015be8:	2301      	movs	r3, #1
 8015bea:	e005      	b.n	8015bf8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	2bc8      	cmp	r3, #200	@ 0xc8
 8015bf0:	d101      	bne.n	8015bf6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	e000      	b.n	8015bf8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015bf6:	2300      	movs	r3, #0
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3710      	adds	r7, #16
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015c00:	b084      	sub	sp, #16
 8015c02:	b580      	push	{r7, lr}
 8015c04:	b086      	sub	sp, #24
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
 8015c0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8015c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015c12:	2300      	movs	r3, #0
 8015c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	613b      	str	r3, [r7, #16]
 8015c1e:	e009      	b.n	8015c34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015c20:	687a      	ldr	r2, [r7, #4]
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	3340      	adds	r3, #64	@ 0x40
 8015c26:	009b      	lsls	r3, r3, #2
 8015c28:	4413      	add	r3, r2
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	3301      	adds	r3, #1
 8015c32:	613b      	str	r3, [r7, #16]
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	2b0e      	cmp	r3, #14
 8015c38:	d9f2      	bls.n	8015c20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015c3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d11c      	bne.n	8015c7c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c48:	685b      	ldr	r3, [r3, #4]
 8015c4a:	68fa      	ldr	r2, [r7, #12]
 8015c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c50:	f043 0302 	orr.w	r3, r3, #2
 8015c54:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c5a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	601a      	str	r2, [r3, #0]
 8015c7a:	e005      	b.n	8015c88 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015c8e:	461a      	mov	r2, r3
 8015c90:	2300      	movs	r3, #0
 8015c92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015c94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8015c98:	2b01      	cmp	r3, #1
 8015c9a:	d10d      	bne.n	8015cb8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d104      	bne.n	8015cae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015ca4:	2100      	movs	r1, #0
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f000 f968 	bl	8015f7c <USB_SetDevSpeed>
 8015cac:	e008      	b.n	8015cc0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015cae:	2101      	movs	r1, #1
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f000 f963 	bl	8015f7c <USB_SetDevSpeed>
 8015cb6:	e003      	b.n	8015cc0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015cb8:	2103      	movs	r1, #3
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f000 f95e 	bl	8015f7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015cc0:	2110      	movs	r1, #16
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f000 f8fa 	bl	8015ebc <USB_FlushTxFifo>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d001      	beq.n	8015cd2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8015cce:	2301      	movs	r3, #1
 8015cd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f000 f924 	bl	8015f20 <USB_FlushRxFifo>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d001      	beq.n	8015ce2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8015cde:	2301      	movs	r3, #1
 8015ce0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ce8:	461a      	mov	r2, r3
 8015cea:	2300      	movs	r3, #0
 8015cec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cf4:	461a      	mov	r2, r3
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d00:	461a      	mov	r2, r3
 8015d02:	2300      	movs	r3, #0
 8015d04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015d06:	2300      	movs	r3, #0
 8015d08:	613b      	str	r3, [r7, #16]
 8015d0a:	e043      	b.n	8015d94 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	015a      	lsls	r2, r3, #5
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	4413      	add	r3, r2
 8015d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015d22:	d118      	bne.n	8015d56 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d10a      	bne.n	8015d40 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	015a      	lsls	r2, r3, #5
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	4413      	add	r3, r2
 8015d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d36:	461a      	mov	r2, r3
 8015d38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015d3c:	6013      	str	r3, [r2, #0]
 8015d3e:	e013      	b.n	8015d68 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	015a      	lsls	r2, r3, #5
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	4413      	add	r3, r2
 8015d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8015d52:	6013      	str	r3, [r2, #0]
 8015d54:	e008      	b.n	8015d68 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	015a      	lsls	r2, r3, #5
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	4413      	add	r3, r2
 8015d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d62:	461a      	mov	r2, r3
 8015d64:	2300      	movs	r3, #0
 8015d66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	015a      	lsls	r2, r3, #5
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	4413      	add	r3, r2
 8015d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d74:	461a      	mov	r2, r3
 8015d76:	2300      	movs	r3, #0
 8015d78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	015a      	lsls	r2, r3, #5
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	4413      	add	r3, r2
 8015d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d86:	461a      	mov	r2, r3
 8015d88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8015d8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	3301      	adds	r3, #1
 8015d92:	613b      	str	r3, [r7, #16]
 8015d94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015d98:	461a      	mov	r2, r3
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	4293      	cmp	r3, r2
 8015d9e:	d3b5      	bcc.n	8015d0c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015da0:	2300      	movs	r3, #0
 8015da2:	613b      	str	r3, [r7, #16]
 8015da4:	e043      	b.n	8015e2e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015da6:	693b      	ldr	r3, [r7, #16]
 8015da8:	015a      	lsls	r2, r3, #5
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	4413      	add	r3, r2
 8015dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015dbc:	d118      	bne.n	8015df0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8015dbe:	693b      	ldr	r3, [r7, #16]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d10a      	bne.n	8015dda <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	015a      	lsls	r2, r3, #5
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	4413      	add	r3, r2
 8015dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015dd0:	461a      	mov	r2, r3
 8015dd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015dd6:	6013      	str	r3, [r2, #0]
 8015dd8:	e013      	b.n	8015e02 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	015a      	lsls	r2, r3, #5
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	4413      	add	r3, r2
 8015de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015de6:	461a      	mov	r2, r3
 8015de8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8015dec:	6013      	str	r3, [r2, #0]
 8015dee:	e008      	b.n	8015e02 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015df0:	693b      	ldr	r3, [r7, #16]
 8015df2:	015a      	lsls	r2, r3, #5
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	4413      	add	r3, r2
 8015df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	2300      	movs	r3, #0
 8015e00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	015a      	lsls	r2, r3, #5
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	4413      	add	r3, r2
 8015e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e0e:	461a      	mov	r2, r3
 8015e10:	2300      	movs	r3, #0
 8015e12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	015a      	lsls	r2, r3, #5
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	4413      	add	r3, r2
 8015e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e20:	461a      	mov	r2, r3
 8015e22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8015e26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	613b      	str	r3, [r7, #16]
 8015e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015e32:	461a      	mov	r2, r3
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	4293      	cmp	r3, r2
 8015e38:	d3b5      	bcc.n	8015da6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015e40:	691b      	ldr	r3, [r3, #16]
 8015e42:	68fa      	ldr	r2, [r7, #12]
 8015e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015e4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2200      	movs	r2, #0
 8015e52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8015e5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d105      	bne.n	8015e70 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	699b      	ldr	r3, [r3, #24]
 8015e68:	f043 0210 	orr.w	r2, r3, #16
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	699a      	ldr	r2, [r3, #24]
 8015e74:	4b0f      	ldr	r3, [pc, #60]	@ (8015eb4 <USB_DevInit+0x2b4>)
 8015e76:	4313      	orrs	r3, r2
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015e7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d005      	beq.n	8015e90 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	699b      	ldr	r3, [r3, #24]
 8015e88:	f043 0208 	orr.w	r2, r3, #8
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015e90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	d105      	bne.n	8015ea4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	699a      	ldr	r2, [r3, #24]
 8015e9c:	4b06      	ldr	r3, [pc, #24]	@ (8015eb8 <USB_DevInit+0x2b8>)
 8015e9e:	4313      	orrs	r3, r2
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	3718      	adds	r7, #24
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015eb0:	b004      	add	sp, #16
 8015eb2:	4770      	bx	lr
 8015eb4:	803c3800 	.word	0x803c3800
 8015eb8:	40000004 	.word	0x40000004

08015ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b085      	sub	sp, #20
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	3301      	adds	r3, #1
 8015ece:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015ed6:	d901      	bls.n	8015edc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8015ed8:	2303      	movs	r3, #3
 8015eda:	e01b      	b.n	8015f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	691b      	ldr	r3, [r3, #16]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	daf2      	bge.n	8015eca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	019b      	lsls	r3, r3, #6
 8015eec:	f043 0220 	orr.w	r2, r3, #32
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	3301      	adds	r3, #1
 8015ef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015f00:	d901      	bls.n	8015f06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8015f02:	2303      	movs	r3, #3
 8015f04:	e006      	b.n	8015f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	691b      	ldr	r3, [r3, #16]
 8015f0a:	f003 0320 	and.w	r3, r3, #32
 8015f0e:	2b20      	cmp	r3, #32
 8015f10:	d0f0      	beq.n	8015ef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8015f12:	2300      	movs	r3, #0
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3714      	adds	r7, #20
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1e:	4770      	bx	lr

08015f20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015f20:	b480      	push	{r7}
 8015f22:	b085      	sub	sp, #20
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	3301      	adds	r3, #1
 8015f30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015f38:	d901      	bls.n	8015f3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015f3a:	2303      	movs	r3, #3
 8015f3c:	e018      	b.n	8015f70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	691b      	ldr	r3, [r3, #16]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	daf2      	bge.n	8015f2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8015f46:	2300      	movs	r3, #0
 8015f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2210      	movs	r2, #16
 8015f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	3301      	adds	r3, #1
 8015f54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015f5c:	d901      	bls.n	8015f62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8015f5e:	2303      	movs	r3, #3
 8015f60:	e006      	b.n	8015f70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	691b      	ldr	r3, [r3, #16]
 8015f66:	f003 0310 	and.w	r3, r3, #16
 8015f6a:	2b10      	cmp	r3, #16
 8015f6c:	d0f0      	beq.n	8015f50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8015f6e:	2300      	movs	r3, #0
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3714      	adds	r7, #20
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr

08015f7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015f7c:	b480      	push	{r7}
 8015f7e:	b085      	sub	sp, #20
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
 8015f84:	460b      	mov	r3, r1
 8015f86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015f92:	681a      	ldr	r2, [r3, #0]
 8015f94:	78fb      	ldrb	r3, [r7, #3]
 8015f96:	68f9      	ldr	r1, [r7, #12]
 8015f98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015f9c:	4313      	orrs	r3, r2
 8015f9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8015fa0:	2300      	movs	r3, #0
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	3714      	adds	r7, #20
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fac:	4770      	bx	lr

08015fae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8015fae:	b480      	push	{r7}
 8015fb0:	b087      	sub	sp, #28
 8015fb2:	af00      	add	r7, sp, #0
 8015fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015fc0:	689b      	ldr	r3, [r3, #8]
 8015fc2:	f003 0306 	and.w	r3, r3, #6
 8015fc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d102      	bne.n	8015fd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	75fb      	strb	r3, [r7, #23]
 8015fd2:	e00a      	b.n	8015fea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	2b02      	cmp	r3, #2
 8015fd8:	d002      	beq.n	8015fe0 <USB_GetDevSpeed+0x32>
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	2b06      	cmp	r3, #6
 8015fde:	d102      	bne.n	8015fe6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015fe0:	2302      	movs	r3, #2
 8015fe2:	75fb      	strb	r3, [r7, #23]
 8015fe4:	e001      	b.n	8015fea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8015fe6:	230f      	movs	r3, #15
 8015fe8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8015fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fec:	4618      	mov	r0, r3
 8015fee:	371c      	adds	r7, #28
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff6:	4770      	bx	lr

08015ff8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b085      	sub	sp, #20
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	785b      	ldrb	r3, [r3, #1]
 8016010:	2b01      	cmp	r3, #1
 8016012:	d139      	bne.n	8016088 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801601a:	69da      	ldr	r2, [r3, #28]
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	f003 030f 	and.w	r3, r3, #15
 8016024:	2101      	movs	r1, #1
 8016026:	fa01 f303 	lsl.w	r3, r1, r3
 801602a:	b29b      	uxth	r3, r3
 801602c:	68f9      	ldr	r1, [r7, #12]
 801602e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016032:	4313      	orrs	r3, r2
 8016034:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	015a      	lsls	r2, r3, #5
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	4413      	add	r3, r2
 801603e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016048:	2b00      	cmp	r3, #0
 801604a:	d153      	bne.n	80160f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	015a      	lsls	r2, r3, #5
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	4413      	add	r3, r2
 8016054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	689b      	ldr	r3, [r3, #8]
 801605e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	791b      	ldrb	r3, [r3, #4]
 8016066:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016068:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	059b      	lsls	r3, r3, #22
 801606e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016070:	431a      	orrs	r2, r3
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	0159      	lsls	r1, r3, #5
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	440b      	add	r3, r1
 801607a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801607e:	4619      	mov	r1, r3
 8016080:	4b20      	ldr	r3, [pc, #128]	@ (8016104 <USB_ActivateEndpoint+0x10c>)
 8016082:	4313      	orrs	r3, r2
 8016084:	600b      	str	r3, [r1, #0]
 8016086:	e035      	b.n	80160f4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801608e:	69da      	ldr	r2, [r3, #28]
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	781b      	ldrb	r3, [r3, #0]
 8016094:	f003 030f 	and.w	r3, r3, #15
 8016098:	2101      	movs	r1, #1
 801609a:	fa01 f303 	lsl.w	r3, r1, r3
 801609e:	041b      	lsls	r3, r3, #16
 80160a0:	68f9      	ldr	r1, [r7, #12]
 80160a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80160a6:	4313      	orrs	r3, r2
 80160a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80160aa:	68bb      	ldr	r3, [r7, #8]
 80160ac:	015a      	lsls	r2, r3, #5
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	4413      	add	r3, r2
 80160b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d119      	bne.n	80160f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	015a      	lsls	r2, r3, #5
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	4413      	add	r3, r2
 80160c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	689b      	ldr	r3, [r3, #8]
 80160d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	791b      	ldrb	r3, [r3, #4]
 80160da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80160dc:	430b      	orrs	r3, r1
 80160de:	431a      	orrs	r2, r3
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	0159      	lsls	r1, r3, #5
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	440b      	add	r3, r1
 80160e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160ec:	4619      	mov	r1, r3
 80160ee:	4b05      	ldr	r3, [pc, #20]	@ (8016104 <USB_ActivateEndpoint+0x10c>)
 80160f0:	4313      	orrs	r3, r2
 80160f2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80160f4:	2300      	movs	r3, #0
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3714      	adds	r7, #20
 80160fa:	46bd      	mov	sp, r7
 80160fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016100:	4770      	bx	lr
 8016102:	bf00      	nop
 8016104:	10008000 	.word	0x10008000

08016108 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016108:	b480      	push	{r7}
 801610a:	b085      	sub	sp, #20
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	785b      	ldrb	r3, [r3, #1]
 8016120:	2b01      	cmp	r3, #1
 8016122:	d161      	bne.n	80161e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	015a      	lsls	r2, r3, #5
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	4413      	add	r3, r2
 801612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801613a:	d11f      	bne.n	801617c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	015a      	lsls	r2, r3, #5
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	4413      	add	r3, r2
 8016144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	0151      	lsls	r1, r2, #5
 801614e:	68fa      	ldr	r2, [r7, #12]
 8016150:	440a      	add	r2, r1
 8016152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016156:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801615a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	015a      	lsls	r2, r3, #5
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	4413      	add	r3, r2
 8016164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	68ba      	ldr	r2, [r7, #8]
 801616c:	0151      	lsls	r1, r2, #5
 801616e:	68fa      	ldr	r2, [r7, #12]
 8016170:	440a      	add	r2, r1
 8016172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016176:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801617a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	f003 030f 	and.w	r3, r3, #15
 801618c:	2101      	movs	r1, #1
 801618e:	fa01 f303 	lsl.w	r3, r1, r3
 8016192:	b29b      	uxth	r3, r3
 8016194:	43db      	mvns	r3, r3
 8016196:	68f9      	ldr	r1, [r7, #12]
 8016198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801619c:	4013      	ands	r3, r2
 801619e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80161a6:	69da      	ldr	r2, [r3, #28]
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	f003 030f 	and.w	r3, r3, #15
 80161b0:	2101      	movs	r1, #1
 80161b2:	fa01 f303 	lsl.w	r3, r1, r3
 80161b6:	b29b      	uxth	r3, r3
 80161b8:	43db      	mvns	r3, r3
 80161ba:	68f9      	ldr	r1, [r7, #12]
 80161bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80161c0:	4013      	ands	r3, r2
 80161c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	015a      	lsls	r2, r3, #5
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	4413      	add	r3, r2
 80161cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80161d0:	681a      	ldr	r2, [r3, #0]
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	0159      	lsls	r1, r3, #5
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	440b      	add	r3, r1
 80161da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80161de:	4619      	mov	r1, r3
 80161e0:	4b35      	ldr	r3, [pc, #212]	@ (80162b8 <USB_DeactivateEndpoint+0x1b0>)
 80161e2:	4013      	ands	r3, r2
 80161e4:	600b      	str	r3, [r1, #0]
 80161e6:	e060      	b.n	80162aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80161e8:	68bb      	ldr	r3, [r7, #8]
 80161ea:	015a      	lsls	r2, r3, #5
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	4413      	add	r3, r2
 80161f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80161fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80161fe:	d11f      	bne.n	8016240 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	015a      	lsls	r2, r3, #5
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	4413      	add	r3, r2
 8016208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	68ba      	ldr	r2, [r7, #8]
 8016210:	0151      	lsls	r1, r2, #5
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	440a      	add	r2, r1
 8016216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801621a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801621e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	015a      	lsls	r2, r3, #5
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	4413      	add	r3, r2
 8016228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	68ba      	ldr	r2, [r7, #8]
 8016230:	0151      	lsls	r1, r2, #5
 8016232:	68fa      	ldr	r2, [r7, #12]
 8016234:	440a      	add	r2, r1
 8016236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801623a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801623e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	f003 030f 	and.w	r3, r3, #15
 8016250:	2101      	movs	r1, #1
 8016252:	fa01 f303 	lsl.w	r3, r1, r3
 8016256:	041b      	lsls	r3, r3, #16
 8016258:	43db      	mvns	r3, r3
 801625a:	68f9      	ldr	r1, [r7, #12]
 801625c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016260:	4013      	ands	r3, r2
 8016262:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801626a:	69da      	ldr	r2, [r3, #28]
 801626c:	683b      	ldr	r3, [r7, #0]
 801626e:	781b      	ldrb	r3, [r3, #0]
 8016270:	f003 030f 	and.w	r3, r3, #15
 8016274:	2101      	movs	r1, #1
 8016276:	fa01 f303 	lsl.w	r3, r1, r3
 801627a:	041b      	lsls	r3, r3, #16
 801627c:	43db      	mvns	r3, r3
 801627e:	68f9      	ldr	r1, [r7, #12]
 8016280:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016284:	4013      	ands	r3, r2
 8016286:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	015a      	lsls	r2, r3, #5
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	4413      	add	r3, r2
 8016290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016294:	681a      	ldr	r2, [r3, #0]
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	0159      	lsls	r1, r3, #5
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	440b      	add	r3, r1
 801629e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80162a2:	4619      	mov	r1, r3
 80162a4:	4b05      	ldr	r3, [pc, #20]	@ (80162bc <USB_DeactivateEndpoint+0x1b4>)
 80162a6:	4013      	ands	r3, r2
 80162a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80162aa:	2300      	movs	r3, #0
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3714      	adds	r7, #20
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr
 80162b8:	ec337800 	.word	0xec337800
 80162bc:	eff37800 	.word	0xeff37800

080162c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b08a      	sub	sp, #40	@ 0x28
 80162c4:	af02      	add	r7, sp, #8
 80162c6:	60f8      	str	r0, [r7, #12]
 80162c8:	60b9      	str	r1, [r7, #8]
 80162ca:	4613      	mov	r3, r2
 80162cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	781b      	ldrb	r3, [r3, #0]
 80162d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	785b      	ldrb	r3, [r3, #1]
 80162dc:	2b01      	cmp	r3, #1
 80162de:	f040 8185 	bne.w	80165ec <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	691b      	ldr	r3, [r3, #16]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d132      	bne.n	8016350 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80162ea:	69bb      	ldr	r3, [r7, #24]
 80162ec:	015a      	lsls	r2, r3, #5
 80162ee:	69fb      	ldr	r3, [r7, #28]
 80162f0:	4413      	add	r3, r2
 80162f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80162f6:	691a      	ldr	r2, [r3, #16]
 80162f8:	69bb      	ldr	r3, [r7, #24]
 80162fa:	0159      	lsls	r1, r3, #5
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	440b      	add	r3, r1
 8016300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016304:	4619      	mov	r1, r3
 8016306:	4ba7      	ldr	r3, [pc, #668]	@ (80165a4 <USB_EPStartXfer+0x2e4>)
 8016308:	4013      	ands	r3, r2
 801630a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	015a      	lsls	r2, r3, #5
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	4413      	add	r3, r2
 8016314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016318:	691b      	ldr	r3, [r3, #16]
 801631a:	69ba      	ldr	r2, [r7, #24]
 801631c:	0151      	lsls	r1, r2, #5
 801631e:	69fa      	ldr	r2, [r7, #28]
 8016320:	440a      	add	r2, r1
 8016322:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016326:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801632a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801632c:	69bb      	ldr	r3, [r7, #24]
 801632e:	015a      	lsls	r2, r3, #5
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	4413      	add	r3, r2
 8016334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016338:	691a      	ldr	r2, [r3, #16]
 801633a:	69bb      	ldr	r3, [r7, #24]
 801633c:	0159      	lsls	r1, r3, #5
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	440b      	add	r3, r1
 8016342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016346:	4619      	mov	r1, r3
 8016348:	4b97      	ldr	r3, [pc, #604]	@ (80165a8 <USB_EPStartXfer+0x2e8>)
 801634a:	4013      	ands	r3, r2
 801634c:	610b      	str	r3, [r1, #16]
 801634e:	e097      	b.n	8016480 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016350:	69bb      	ldr	r3, [r7, #24]
 8016352:	015a      	lsls	r2, r3, #5
 8016354:	69fb      	ldr	r3, [r7, #28]
 8016356:	4413      	add	r3, r2
 8016358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801635c:	691a      	ldr	r2, [r3, #16]
 801635e:	69bb      	ldr	r3, [r7, #24]
 8016360:	0159      	lsls	r1, r3, #5
 8016362:	69fb      	ldr	r3, [r7, #28]
 8016364:	440b      	add	r3, r1
 8016366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801636a:	4619      	mov	r1, r3
 801636c:	4b8e      	ldr	r3, [pc, #568]	@ (80165a8 <USB_EPStartXfer+0x2e8>)
 801636e:	4013      	ands	r3, r2
 8016370:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016372:	69bb      	ldr	r3, [r7, #24]
 8016374:	015a      	lsls	r2, r3, #5
 8016376:	69fb      	ldr	r3, [r7, #28]
 8016378:	4413      	add	r3, r2
 801637a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801637e:	691a      	ldr	r2, [r3, #16]
 8016380:	69bb      	ldr	r3, [r7, #24]
 8016382:	0159      	lsls	r1, r3, #5
 8016384:	69fb      	ldr	r3, [r7, #28]
 8016386:	440b      	add	r3, r1
 8016388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801638c:	4619      	mov	r1, r3
 801638e:	4b85      	ldr	r3, [pc, #532]	@ (80165a4 <USB_EPStartXfer+0x2e4>)
 8016390:	4013      	ands	r3, r2
 8016392:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d11a      	bne.n	80163d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	691a      	ldr	r2, [r3, #16]
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	689b      	ldr	r3, [r3, #8]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d903      	bls.n	80163ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	689a      	ldr	r2, [r3, #8]
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80163ae:	69bb      	ldr	r3, [r7, #24]
 80163b0:	015a      	lsls	r2, r3, #5
 80163b2:	69fb      	ldr	r3, [r7, #28]
 80163b4:	4413      	add	r3, r2
 80163b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80163ba:	691b      	ldr	r3, [r3, #16]
 80163bc:	69ba      	ldr	r2, [r7, #24]
 80163be:	0151      	lsls	r1, r2, #5
 80163c0:	69fa      	ldr	r2, [r7, #28]
 80163c2:	440a      	add	r2, r1
 80163c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80163c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80163cc:	6113      	str	r3, [r2, #16]
 80163ce:	e044      	b.n	801645a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	691a      	ldr	r2, [r3, #16]
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	689b      	ldr	r3, [r3, #8]
 80163d8:	4413      	add	r3, r2
 80163da:	1e5a      	subs	r2, r3, #1
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	689b      	ldr	r3, [r3, #8]
 80163e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80163e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80163e6:	69bb      	ldr	r3, [r7, #24]
 80163e8:	015a      	lsls	r2, r3, #5
 80163ea:	69fb      	ldr	r3, [r7, #28]
 80163ec:	4413      	add	r3, r2
 80163ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80163f2:	691a      	ldr	r2, [r3, #16]
 80163f4:	8afb      	ldrh	r3, [r7, #22]
 80163f6:	04d9      	lsls	r1, r3, #19
 80163f8:	4b6c      	ldr	r3, [pc, #432]	@ (80165ac <USB_EPStartXfer+0x2ec>)
 80163fa:	400b      	ands	r3, r1
 80163fc:	69b9      	ldr	r1, [r7, #24]
 80163fe:	0148      	lsls	r0, r1, #5
 8016400:	69f9      	ldr	r1, [r7, #28]
 8016402:	4401      	add	r1, r0
 8016404:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016408:	4313      	orrs	r3, r2
 801640a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	791b      	ldrb	r3, [r3, #4]
 8016410:	2b01      	cmp	r3, #1
 8016412:	d122      	bne.n	801645a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016414:	69bb      	ldr	r3, [r7, #24]
 8016416:	015a      	lsls	r2, r3, #5
 8016418:	69fb      	ldr	r3, [r7, #28]
 801641a:	4413      	add	r3, r2
 801641c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016420:	691b      	ldr	r3, [r3, #16]
 8016422:	69ba      	ldr	r2, [r7, #24]
 8016424:	0151      	lsls	r1, r2, #5
 8016426:	69fa      	ldr	r2, [r7, #28]
 8016428:	440a      	add	r2, r1
 801642a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801642e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8016432:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8016434:	69bb      	ldr	r3, [r7, #24]
 8016436:	015a      	lsls	r2, r3, #5
 8016438:	69fb      	ldr	r3, [r7, #28]
 801643a:	4413      	add	r3, r2
 801643c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016440:	691a      	ldr	r2, [r3, #16]
 8016442:	8afb      	ldrh	r3, [r7, #22]
 8016444:	075b      	lsls	r3, r3, #29
 8016446:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801644a:	69b9      	ldr	r1, [r7, #24]
 801644c:	0148      	lsls	r0, r1, #5
 801644e:	69f9      	ldr	r1, [r7, #28]
 8016450:	4401      	add	r1, r0
 8016452:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016456:	4313      	orrs	r3, r2
 8016458:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801645a:	69bb      	ldr	r3, [r7, #24]
 801645c:	015a      	lsls	r2, r3, #5
 801645e:	69fb      	ldr	r3, [r7, #28]
 8016460:	4413      	add	r3, r2
 8016462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016466:	691a      	ldr	r2, [r3, #16]
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	691b      	ldr	r3, [r3, #16]
 801646c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016470:	69b9      	ldr	r1, [r7, #24]
 8016472:	0148      	lsls	r0, r1, #5
 8016474:	69f9      	ldr	r1, [r7, #28]
 8016476:	4401      	add	r1, r0
 8016478:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801647c:	4313      	orrs	r3, r2
 801647e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016480:	79fb      	ldrb	r3, [r7, #7]
 8016482:	2b01      	cmp	r3, #1
 8016484:	d14b      	bne.n	801651e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	69db      	ldr	r3, [r3, #28]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d009      	beq.n	80164a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801648e:	69bb      	ldr	r3, [r7, #24]
 8016490:	015a      	lsls	r2, r3, #5
 8016492:	69fb      	ldr	r3, [r7, #28]
 8016494:	4413      	add	r3, r2
 8016496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801649a:	461a      	mov	r2, r3
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	69db      	ldr	r3, [r3, #28]
 80164a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	791b      	ldrb	r3, [r3, #4]
 80164a6:	2b01      	cmp	r3, #1
 80164a8:	d128      	bne.n	80164fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80164aa:	69fb      	ldr	r3, [r7, #28]
 80164ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164b0:	689b      	ldr	r3, [r3, #8]
 80164b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d110      	bne.n	80164dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80164ba:	69bb      	ldr	r3, [r7, #24]
 80164bc:	015a      	lsls	r2, r3, #5
 80164be:	69fb      	ldr	r3, [r7, #28]
 80164c0:	4413      	add	r3, r2
 80164c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	69ba      	ldr	r2, [r7, #24]
 80164ca:	0151      	lsls	r1, r2, #5
 80164cc:	69fa      	ldr	r2, [r7, #28]
 80164ce:	440a      	add	r2, r1
 80164d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80164d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80164d8:	6013      	str	r3, [r2, #0]
 80164da:	e00f      	b.n	80164fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80164dc:	69bb      	ldr	r3, [r7, #24]
 80164de:	015a      	lsls	r2, r3, #5
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	4413      	add	r3, r2
 80164e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	69ba      	ldr	r2, [r7, #24]
 80164ec:	0151      	lsls	r1, r2, #5
 80164ee:	69fa      	ldr	r2, [r7, #28]
 80164f0:	440a      	add	r2, r1
 80164f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80164f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80164fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80164fc:	69bb      	ldr	r3, [r7, #24]
 80164fe:	015a      	lsls	r2, r3, #5
 8016500:	69fb      	ldr	r3, [r7, #28]
 8016502:	4413      	add	r3, r2
 8016504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	69ba      	ldr	r2, [r7, #24]
 801650c:	0151      	lsls	r1, r2, #5
 801650e:	69fa      	ldr	r2, [r7, #28]
 8016510:	440a      	add	r2, r1
 8016512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016516:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801651a:	6013      	str	r3, [r2, #0]
 801651c:	e169      	b.n	80167f2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801651e:	69bb      	ldr	r3, [r7, #24]
 8016520:	015a      	lsls	r2, r3, #5
 8016522:	69fb      	ldr	r3, [r7, #28]
 8016524:	4413      	add	r3, r2
 8016526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	69ba      	ldr	r2, [r7, #24]
 801652e:	0151      	lsls	r1, r2, #5
 8016530:	69fa      	ldr	r2, [r7, #28]
 8016532:	440a      	add	r2, r1
 8016534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016538:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801653c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801653e:	68bb      	ldr	r3, [r7, #8]
 8016540:	791b      	ldrb	r3, [r3, #4]
 8016542:	2b01      	cmp	r3, #1
 8016544:	d015      	beq.n	8016572 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8016546:	68bb      	ldr	r3, [r7, #8]
 8016548:	691b      	ldr	r3, [r3, #16]
 801654a:	2b00      	cmp	r3, #0
 801654c:	f000 8151 	beq.w	80167f2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016550:	69fb      	ldr	r3, [r7, #28]
 8016552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	f003 030f 	and.w	r3, r3, #15
 8016560:	2101      	movs	r1, #1
 8016562:	fa01 f303 	lsl.w	r3, r1, r3
 8016566:	69f9      	ldr	r1, [r7, #28]
 8016568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801656c:	4313      	orrs	r3, r2
 801656e:	634b      	str	r3, [r1, #52]	@ 0x34
 8016570:	e13f      	b.n	80167f2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016572:	69fb      	ldr	r3, [r7, #28]
 8016574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016578:	689b      	ldr	r3, [r3, #8]
 801657a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801657e:	2b00      	cmp	r3, #0
 8016580:	d116      	bne.n	80165b0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016582:	69bb      	ldr	r3, [r7, #24]
 8016584:	015a      	lsls	r2, r3, #5
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	4413      	add	r3, r2
 801658a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	69ba      	ldr	r2, [r7, #24]
 8016592:	0151      	lsls	r1, r2, #5
 8016594:	69fa      	ldr	r2, [r7, #28]
 8016596:	440a      	add	r2, r1
 8016598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801659c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80165a0:	6013      	str	r3, [r2, #0]
 80165a2:	e015      	b.n	80165d0 <USB_EPStartXfer+0x310>
 80165a4:	e007ffff 	.word	0xe007ffff
 80165a8:	fff80000 	.word	0xfff80000
 80165ac:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80165b0:	69bb      	ldr	r3, [r7, #24]
 80165b2:	015a      	lsls	r2, r3, #5
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	4413      	add	r3, r2
 80165b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	69ba      	ldr	r2, [r7, #24]
 80165c0:	0151      	lsls	r1, r2, #5
 80165c2:	69fa      	ldr	r2, [r7, #28]
 80165c4:	440a      	add	r2, r1
 80165c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80165ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80165ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80165d0:	68bb      	ldr	r3, [r7, #8]
 80165d2:	68d9      	ldr	r1, [r3, #12]
 80165d4:	68bb      	ldr	r3, [r7, #8]
 80165d6:	781a      	ldrb	r2, [r3, #0]
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	691b      	ldr	r3, [r3, #16]
 80165dc:	b298      	uxth	r0, r3
 80165de:	79fb      	ldrb	r3, [r7, #7]
 80165e0:	9300      	str	r3, [sp, #0]
 80165e2:	4603      	mov	r3, r0
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f000 f9b9 	bl	801695c <USB_WritePacket>
 80165ea:	e102      	b.n	80167f2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80165ec:	69bb      	ldr	r3, [r7, #24]
 80165ee:	015a      	lsls	r2, r3, #5
 80165f0:	69fb      	ldr	r3, [r7, #28]
 80165f2:	4413      	add	r3, r2
 80165f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80165f8:	691a      	ldr	r2, [r3, #16]
 80165fa:	69bb      	ldr	r3, [r7, #24]
 80165fc:	0159      	lsls	r1, r3, #5
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	440b      	add	r3, r1
 8016602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016606:	4619      	mov	r1, r3
 8016608:	4b7c      	ldr	r3, [pc, #496]	@ (80167fc <USB_EPStartXfer+0x53c>)
 801660a:	4013      	ands	r3, r2
 801660c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801660e:	69bb      	ldr	r3, [r7, #24]
 8016610:	015a      	lsls	r2, r3, #5
 8016612:	69fb      	ldr	r3, [r7, #28]
 8016614:	4413      	add	r3, r2
 8016616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801661a:	691a      	ldr	r2, [r3, #16]
 801661c:	69bb      	ldr	r3, [r7, #24]
 801661e:	0159      	lsls	r1, r3, #5
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	440b      	add	r3, r1
 8016624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016628:	4619      	mov	r1, r3
 801662a:	4b75      	ldr	r3, [pc, #468]	@ (8016800 <USB_EPStartXfer+0x540>)
 801662c:	4013      	ands	r3, r2
 801662e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8016630:	69bb      	ldr	r3, [r7, #24]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d12f      	bne.n	8016696 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8016636:	68bb      	ldr	r3, [r7, #8]
 8016638:	691b      	ldr	r3, [r3, #16]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d003      	beq.n	8016646 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801663e:	68bb      	ldr	r3, [r7, #8]
 8016640:	689a      	ldr	r2, [r3, #8]
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	689a      	ldr	r2, [r3, #8]
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801664e:	69bb      	ldr	r3, [r7, #24]
 8016650:	015a      	lsls	r2, r3, #5
 8016652:	69fb      	ldr	r3, [r7, #28]
 8016654:	4413      	add	r3, r2
 8016656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801665a:	691a      	ldr	r2, [r3, #16]
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	6a1b      	ldr	r3, [r3, #32]
 8016660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016664:	69b9      	ldr	r1, [r7, #24]
 8016666:	0148      	lsls	r0, r1, #5
 8016668:	69f9      	ldr	r1, [r7, #28]
 801666a:	4401      	add	r1, r0
 801666c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016670:	4313      	orrs	r3, r2
 8016672:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016674:	69bb      	ldr	r3, [r7, #24]
 8016676:	015a      	lsls	r2, r3, #5
 8016678:	69fb      	ldr	r3, [r7, #28]
 801667a:	4413      	add	r3, r2
 801667c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016680:	691b      	ldr	r3, [r3, #16]
 8016682:	69ba      	ldr	r2, [r7, #24]
 8016684:	0151      	lsls	r1, r2, #5
 8016686:	69fa      	ldr	r2, [r7, #28]
 8016688:	440a      	add	r2, r1
 801668a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801668e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016692:	6113      	str	r3, [r2, #16]
 8016694:	e05f      	b.n	8016756 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	691b      	ldr	r3, [r3, #16]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d123      	bne.n	80166e6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	015a      	lsls	r2, r3, #5
 80166a2:	69fb      	ldr	r3, [r7, #28]
 80166a4:	4413      	add	r3, r2
 80166a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80166aa:	691a      	ldr	r2, [r3, #16]
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	689b      	ldr	r3, [r3, #8]
 80166b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80166b4:	69b9      	ldr	r1, [r7, #24]
 80166b6:	0148      	lsls	r0, r1, #5
 80166b8:	69f9      	ldr	r1, [r7, #28]
 80166ba:	4401      	add	r1, r0
 80166bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80166c0:	4313      	orrs	r3, r2
 80166c2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80166c4:	69bb      	ldr	r3, [r7, #24]
 80166c6:	015a      	lsls	r2, r3, #5
 80166c8:	69fb      	ldr	r3, [r7, #28]
 80166ca:	4413      	add	r3, r2
 80166cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80166d0:	691b      	ldr	r3, [r3, #16]
 80166d2:	69ba      	ldr	r2, [r7, #24]
 80166d4:	0151      	lsls	r1, r2, #5
 80166d6:	69fa      	ldr	r2, [r7, #28]
 80166d8:	440a      	add	r2, r1
 80166da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80166de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80166e2:	6113      	str	r3, [r2, #16]
 80166e4:	e037      	b.n	8016756 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	691a      	ldr	r2, [r3, #16]
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	689b      	ldr	r3, [r3, #8]
 80166ee:	4413      	add	r3, r2
 80166f0:	1e5a      	subs	r2, r3, #1
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	689b      	ldr	r3, [r3, #8]
 80166f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80166fa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80166fc:	68bb      	ldr	r3, [r7, #8]
 80166fe:	689b      	ldr	r3, [r3, #8]
 8016700:	8afa      	ldrh	r2, [r7, #22]
 8016702:	fb03 f202 	mul.w	r2, r3, r2
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	015a      	lsls	r2, r3, #5
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	4413      	add	r3, r2
 8016712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016716:	691a      	ldr	r2, [r3, #16]
 8016718:	8afb      	ldrh	r3, [r7, #22]
 801671a:	04d9      	lsls	r1, r3, #19
 801671c:	4b39      	ldr	r3, [pc, #228]	@ (8016804 <USB_EPStartXfer+0x544>)
 801671e:	400b      	ands	r3, r1
 8016720:	69b9      	ldr	r1, [r7, #24]
 8016722:	0148      	lsls	r0, r1, #5
 8016724:	69f9      	ldr	r1, [r7, #28]
 8016726:	4401      	add	r1, r0
 8016728:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801672c:	4313      	orrs	r3, r2
 801672e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8016730:	69bb      	ldr	r3, [r7, #24]
 8016732:	015a      	lsls	r2, r3, #5
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	4413      	add	r3, r2
 8016738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801673c:	691a      	ldr	r2, [r3, #16]
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	6a1b      	ldr	r3, [r3, #32]
 8016742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016746:	69b9      	ldr	r1, [r7, #24]
 8016748:	0148      	lsls	r0, r1, #5
 801674a:	69f9      	ldr	r1, [r7, #28]
 801674c:	4401      	add	r1, r0
 801674e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016752:	4313      	orrs	r3, r2
 8016754:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8016756:	79fb      	ldrb	r3, [r7, #7]
 8016758:	2b01      	cmp	r3, #1
 801675a:	d10d      	bne.n	8016778 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	68db      	ldr	r3, [r3, #12]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d009      	beq.n	8016778 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	68d9      	ldr	r1, [r3, #12]
 8016768:	69bb      	ldr	r3, [r7, #24]
 801676a:	015a      	lsls	r2, r3, #5
 801676c:	69fb      	ldr	r3, [r7, #28]
 801676e:	4413      	add	r3, r2
 8016770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016774:	460a      	mov	r2, r1
 8016776:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	791b      	ldrb	r3, [r3, #4]
 801677c:	2b01      	cmp	r3, #1
 801677e:	d128      	bne.n	80167d2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016780:	69fb      	ldr	r3, [r7, #28]
 8016782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016786:	689b      	ldr	r3, [r3, #8]
 8016788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801678c:	2b00      	cmp	r3, #0
 801678e:	d110      	bne.n	80167b2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8016790:	69bb      	ldr	r3, [r7, #24]
 8016792:	015a      	lsls	r2, r3, #5
 8016794:	69fb      	ldr	r3, [r7, #28]
 8016796:	4413      	add	r3, r2
 8016798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	69ba      	ldr	r2, [r7, #24]
 80167a0:	0151      	lsls	r1, r2, #5
 80167a2:	69fa      	ldr	r2, [r7, #28]
 80167a4:	440a      	add	r2, r1
 80167a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80167aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80167ae:	6013      	str	r3, [r2, #0]
 80167b0:	e00f      	b.n	80167d2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80167b2:	69bb      	ldr	r3, [r7, #24]
 80167b4:	015a      	lsls	r2, r3, #5
 80167b6:	69fb      	ldr	r3, [r7, #28]
 80167b8:	4413      	add	r3, r2
 80167ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	69ba      	ldr	r2, [r7, #24]
 80167c2:	0151      	lsls	r1, r2, #5
 80167c4:	69fa      	ldr	r2, [r7, #28]
 80167c6:	440a      	add	r2, r1
 80167c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80167cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80167d0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80167d2:	69bb      	ldr	r3, [r7, #24]
 80167d4:	015a      	lsls	r2, r3, #5
 80167d6:	69fb      	ldr	r3, [r7, #28]
 80167d8:	4413      	add	r3, r2
 80167da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	69ba      	ldr	r2, [r7, #24]
 80167e2:	0151      	lsls	r1, r2, #5
 80167e4:	69fa      	ldr	r2, [r7, #28]
 80167e6:	440a      	add	r2, r1
 80167e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80167ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80167f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80167f2:	2300      	movs	r3, #0
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	3720      	adds	r7, #32
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	fff80000 	.word	0xfff80000
 8016800:	e007ffff 	.word	0xe007ffff
 8016804:	1ff80000 	.word	0x1ff80000

08016808 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016808:	b480      	push	{r7}
 801680a:	b087      	sub	sp, #28
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016812:	2300      	movs	r3, #0
 8016814:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8016816:	2300      	movs	r3, #0
 8016818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	785b      	ldrb	r3, [r3, #1]
 8016822:	2b01      	cmp	r3, #1
 8016824:	d14a      	bne.n	80168bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	781b      	ldrb	r3, [r3, #0]
 801682a:	015a      	lsls	r2, r3, #5
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	4413      	add	r3, r2
 8016830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801683a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801683e:	f040 8086 	bne.w	801694e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	015a      	lsls	r2, r3, #5
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	4413      	add	r3, r2
 801684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	683a      	ldr	r2, [r7, #0]
 8016854:	7812      	ldrb	r2, [r2, #0]
 8016856:	0151      	lsls	r1, r2, #5
 8016858:	693a      	ldr	r2, [r7, #16]
 801685a:	440a      	add	r2, r1
 801685c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016860:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016864:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	781b      	ldrb	r3, [r3, #0]
 801686a:	015a      	lsls	r2, r3, #5
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	4413      	add	r3, r2
 8016870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	683a      	ldr	r2, [r7, #0]
 8016878:	7812      	ldrb	r2, [r2, #0]
 801687a:	0151      	lsls	r1, r2, #5
 801687c:	693a      	ldr	r2, [r7, #16]
 801687e:	440a      	add	r2, r1
 8016880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016884:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016888:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	3301      	adds	r3, #1
 801688e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	f242 7210 	movw	r2, #10000	@ 0x2710
 8016896:	4293      	cmp	r3, r2
 8016898:	d902      	bls.n	80168a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801689a:	2301      	movs	r3, #1
 801689c:	75fb      	strb	r3, [r7, #23]
          break;
 801689e:	e056      	b.n	801694e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	015a      	lsls	r2, r3, #5
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	4413      	add	r3, r2
 80168aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80168b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80168b8:	d0e7      	beq.n	801688a <USB_EPStopXfer+0x82>
 80168ba:	e048      	b.n	801694e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	781b      	ldrb	r3, [r3, #0]
 80168c0:	015a      	lsls	r2, r3, #5
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	4413      	add	r3, r2
 80168c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80168d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80168d4:	d13b      	bne.n	801694e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	781b      	ldrb	r3, [r3, #0]
 80168da:	015a      	lsls	r2, r3, #5
 80168dc:	693b      	ldr	r3, [r7, #16]
 80168de:	4413      	add	r3, r2
 80168e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	683a      	ldr	r2, [r7, #0]
 80168e8:	7812      	ldrb	r2, [r2, #0]
 80168ea:	0151      	lsls	r1, r2, #5
 80168ec:	693a      	ldr	r2, [r7, #16]
 80168ee:	440a      	add	r2, r1
 80168f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80168f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80168f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	781b      	ldrb	r3, [r3, #0]
 80168fe:	015a      	lsls	r2, r3, #5
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	4413      	add	r3, r2
 8016904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	683a      	ldr	r2, [r7, #0]
 801690c:	7812      	ldrb	r2, [r2, #0]
 801690e:	0151      	lsls	r1, r2, #5
 8016910:	693a      	ldr	r2, [r7, #16]
 8016912:	440a      	add	r2, r1
 8016914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016918:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801691c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	3301      	adds	r3, #1
 8016922:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	f242 7210 	movw	r2, #10000	@ 0x2710
 801692a:	4293      	cmp	r3, r2
 801692c:	d902      	bls.n	8016934 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801692e:	2301      	movs	r3, #1
 8016930:	75fb      	strb	r3, [r7, #23]
          break;
 8016932:	e00c      	b.n	801694e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	015a      	lsls	r2, r3, #5
 801693a:	693b      	ldr	r3, [r7, #16]
 801693c:	4413      	add	r3, r2
 801693e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801694c:	d0e7      	beq.n	801691e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801694e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016950:	4618      	mov	r0, r3
 8016952:	371c      	adds	r7, #28
 8016954:	46bd      	mov	sp, r7
 8016956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695a:	4770      	bx	lr

0801695c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801695c:	b480      	push	{r7}
 801695e:	b089      	sub	sp, #36	@ 0x24
 8016960:	af00      	add	r7, sp, #0
 8016962:	60f8      	str	r0, [r7, #12]
 8016964:	60b9      	str	r1, [r7, #8]
 8016966:	4611      	mov	r1, r2
 8016968:	461a      	mov	r2, r3
 801696a:	460b      	mov	r3, r1
 801696c:	71fb      	strb	r3, [r7, #7]
 801696e:	4613      	mov	r3, r2
 8016970:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801697a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801697e:	2b00      	cmp	r3, #0
 8016980:	d123      	bne.n	80169ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8016982:	88bb      	ldrh	r3, [r7, #4]
 8016984:	3303      	adds	r3, #3
 8016986:	089b      	lsrs	r3, r3, #2
 8016988:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801698a:	2300      	movs	r3, #0
 801698c:	61bb      	str	r3, [r7, #24]
 801698e:	e018      	b.n	80169c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8016990:	79fb      	ldrb	r3, [r7, #7]
 8016992:	031a      	lsls	r2, r3, #12
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	4413      	add	r3, r2
 8016998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801699c:	461a      	mov	r2, r3
 801699e:	69fb      	ldr	r3, [r7, #28]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80169a4:	69fb      	ldr	r3, [r7, #28]
 80169a6:	3301      	adds	r3, #1
 80169a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80169aa:	69fb      	ldr	r3, [r7, #28]
 80169ac:	3301      	adds	r3, #1
 80169ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	3301      	adds	r3, #1
 80169b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80169b6:	69fb      	ldr	r3, [r7, #28]
 80169b8:	3301      	adds	r3, #1
 80169ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80169bc:	69bb      	ldr	r3, [r7, #24]
 80169be:	3301      	adds	r3, #1
 80169c0:	61bb      	str	r3, [r7, #24]
 80169c2:	69ba      	ldr	r2, [r7, #24]
 80169c4:	693b      	ldr	r3, [r7, #16]
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d3e2      	bcc.n	8016990 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80169ca:	2300      	movs	r3, #0
}
 80169cc:	4618      	mov	r0, r3
 80169ce:	3724      	adds	r7, #36	@ 0x24
 80169d0:	46bd      	mov	sp, r7
 80169d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d6:	4770      	bx	lr

080169d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80169d8:	b480      	push	{r7}
 80169da:	b08b      	sub	sp, #44	@ 0x2c
 80169dc:	af00      	add	r7, sp, #0
 80169de:	60f8      	str	r0, [r7, #12]
 80169e0:	60b9      	str	r1, [r7, #8]
 80169e2:	4613      	mov	r3, r2
 80169e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80169ea:	68bb      	ldr	r3, [r7, #8]
 80169ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80169ee:	88fb      	ldrh	r3, [r7, #6]
 80169f0:	089b      	lsrs	r3, r3, #2
 80169f2:	b29b      	uxth	r3, r3
 80169f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80169f6:	88fb      	ldrh	r3, [r7, #6]
 80169f8:	f003 0303 	and.w	r3, r3, #3
 80169fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80169fe:	2300      	movs	r3, #0
 8016a00:	623b      	str	r3, [r7, #32]
 8016a02:	e014      	b.n	8016a2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016a04:	69bb      	ldr	r3, [r7, #24]
 8016a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016a0a:	681a      	ldr	r2, [r3, #0]
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8016a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a12:	3301      	adds	r3, #1
 8016a14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a18:	3301      	adds	r3, #1
 8016a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a1e:	3301      	adds	r3, #1
 8016a20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a24:	3301      	adds	r3, #1
 8016a26:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8016a28:	6a3b      	ldr	r3, [r7, #32]
 8016a2a:	3301      	adds	r3, #1
 8016a2c:	623b      	str	r3, [r7, #32]
 8016a2e:	6a3a      	ldr	r2, [r7, #32]
 8016a30:	697b      	ldr	r3, [r7, #20]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d3e6      	bcc.n	8016a04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8016a36:	8bfb      	ldrh	r3, [r7, #30]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d01e      	beq.n	8016a7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016a40:	69bb      	ldr	r3, [r7, #24]
 8016a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016a46:	461a      	mov	r2, r3
 8016a48:	f107 0310 	add.w	r3, r7, #16
 8016a4c:	6812      	ldr	r2, [r2, #0]
 8016a4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8016a50:	693a      	ldr	r2, [r7, #16]
 8016a52:	6a3b      	ldr	r3, [r7, #32]
 8016a54:	b2db      	uxtb	r3, r3
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	fa22 f303 	lsr.w	r3, r2, r3
 8016a5c:	b2da      	uxtb	r2, r3
 8016a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a60:	701a      	strb	r2, [r3, #0]
      i++;
 8016a62:	6a3b      	ldr	r3, [r7, #32]
 8016a64:	3301      	adds	r3, #1
 8016a66:	623b      	str	r3, [r7, #32]
      pDest++;
 8016a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a6a:	3301      	adds	r3, #1
 8016a6c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8016a6e:	8bfb      	ldrh	r3, [r7, #30]
 8016a70:	3b01      	subs	r3, #1
 8016a72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8016a74:	8bfb      	ldrh	r3, [r7, #30]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d1ea      	bne.n	8016a50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	372c      	adds	r7, #44	@ 0x2c
 8016a80:	46bd      	mov	sp, r7
 8016a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a86:	4770      	bx	lr

08016a88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b085      	sub	sp, #20
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	785b      	ldrb	r3, [r3, #1]
 8016aa0:	2b01      	cmp	r3, #1
 8016aa2:	d12c      	bne.n	8016afe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	015a      	lsls	r2, r3, #5
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	4413      	add	r3, r2
 8016aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	db12      	blt.n	8016adc <USB_EPSetStall+0x54>
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d00f      	beq.n	8016adc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016abc:	68bb      	ldr	r3, [r7, #8]
 8016abe:	015a      	lsls	r2, r3, #5
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	4413      	add	r3, r2
 8016ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	68ba      	ldr	r2, [r7, #8]
 8016acc:	0151      	lsls	r1, r2, #5
 8016ace:	68fa      	ldr	r2, [r7, #12]
 8016ad0:	440a      	add	r2, r1
 8016ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016ad6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016ada:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016adc:	68bb      	ldr	r3, [r7, #8]
 8016ade:	015a      	lsls	r2, r3, #5
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	4413      	add	r3, r2
 8016ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	68ba      	ldr	r2, [r7, #8]
 8016aec:	0151      	lsls	r1, r2, #5
 8016aee:	68fa      	ldr	r2, [r7, #12]
 8016af0:	440a      	add	r2, r1
 8016af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016af6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8016afa:	6013      	str	r3, [r2, #0]
 8016afc:	e02b      	b.n	8016b56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016afe:	68bb      	ldr	r3, [r7, #8]
 8016b00:	015a      	lsls	r2, r3, #5
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	4413      	add	r3, r2
 8016b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	db12      	blt.n	8016b36 <USB_EPSetStall+0xae>
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d00f      	beq.n	8016b36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	015a      	lsls	r2, r3, #5
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	4413      	add	r3, r2
 8016b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	68ba      	ldr	r2, [r7, #8]
 8016b26:	0151      	lsls	r1, r2, #5
 8016b28:	68fa      	ldr	r2, [r7, #12]
 8016b2a:	440a      	add	r2, r1
 8016b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016b30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016b34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8016b36:	68bb      	ldr	r3, [r7, #8]
 8016b38:	015a      	lsls	r2, r3, #5
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	4413      	add	r3, r2
 8016b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	68ba      	ldr	r2, [r7, #8]
 8016b46:	0151      	lsls	r1, r2, #5
 8016b48:	68fa      	ldr	r2, [r7, #12]
 8016b4a:	440a      	add	r2, r1
 8016b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8016b54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016b56:	2300      	movs	r3, #0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3714      	adds	r7, #20
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b62:	4770      	bx	lr

08016b64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016b64:	b480      	push	{r7}
 8016b66:	b085      	sub	sp, #20
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
 8016b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	781b      	ldrb	r3, [r3, #0]
 8016b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	785b      	ldrb	r3, [r3, #1]
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d128      	bne.n	8016bd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	015a      	lsls	r2, r3, #5
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	4413      	add	r3, r2
 8016b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	68ba      	ldr	r2, [r7, #8]
 8016b90:	0151      	lsls	r1, r2, #5
 8016b92:	68fa      	ldr	r2, [r7, #12]
 8016b94:	440a      	add	r2, r1
 8016b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016b9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016b9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	791b      	ldrb	r3, [r3, #4]
 8016ba4:	2b03      	cmp	r3, #3
 8016ba6:	d003      	beq.n	8016bb0 <USB_EPClearStall+0x4c>
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	791b      	ldrb	r3, [r3, #4]
 8016bac:	2b02      	cmp	r3, #2
 8016bae:	d138      	bne.n	8016c22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	015a      	lsls	r2, r3, #5
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	68ba      	ldr	r2, [r7, #8]
 8016bc0:	0151      	lsls	r1, r2, #5
 8016bc2:	68fa      	ldr	r2, [r7, #12]
 8016bc4:	440a      	add	r2, r1
 8016bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016bce:	6013      	str	r3, [r2, #0]
 8016bd0:	e027      	b.n	8016c22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	015a      	lsls	r2, r3, #5
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	4413      	add	r3, r2
 8016bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	68ba      	ldr	r2, [r7, #8]
 8016be2:	0151      	lsls	r1, r2, #5
 8016be4:	68fa      	ldr	r2, [r7, #12]
 8016be6:	440a      	add	r2, r1
 8016be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016bec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016bf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	791b      	ldrb	r3, [r3, #4]
 8016bf6:	2b03      	cmp	r3, #3
 8016bf8:	d003      	beq.n	8016c02 <USB_EPClearStall+0x9e>
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	791b      	ldrb	r3, [r3, #4]
 8016bfe:	2b02      	cmp	r3, #2
 8016c00:	d10f      	bne.n	8016c22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	015a      	lsls	r2, r3, #5
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	4413      	add	r3, r2
 8016c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	68ba      	ldr	r2, [r7, #8]
 8016c12:	0151      	lsls	r1, r2, #5
 8016c14:	68fa      	ldr	r2, [r7, #12]
 8016c16:	440a      	add	r2, r1
 8016c18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016c20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016c22:	2300      	movs	r3, #0
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	3714      	adds	r7, #20
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2e:	4770      	bx	lr

08016c30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016c30:	b480      	push	{r7}
 8016c32:	b085      	sub	sp, #20
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
 8016c38:	460b      	mov	r3, r1
 8016c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	68fa      	ldr	r2, [r7, #12]
 8016c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016c4e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8016c52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c5a:	681a      	ldr	r2, [r3, #0]
 8016c5c:	78fb      	ldrb	r3, [r7, #3]
 8016c5e:	011b      	lsls	r3, r3, #4
 8016c60:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8016c64:	68f9      	ldr	r1, [r7, #12]
 8016c66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016c6a:	4313      	orrs	r3, r2
 8016c6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016c6e:	2300      	movs	r3, #0
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	3714      	adds	r7, #20
 8016c74:	46bd      	mov	sp, r7
 8016c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7a:	4770      	bx	lr

08016c7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b085      	sub	sp, #20
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	68fa      	ldr	r2, [r7, #12]
 8016c92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016c96:	f023 0303 	bic.w	r3, r3, #3
 8016c9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	68fa      	ldr	r2, [r7, #12]
 8016ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016caa:	f023 0302 	bic.w	r3, r3, #2
 8016cae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016cb0:	2300      	movs	r3, #0
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3714      	adds	r7, #20
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbc:	4770      	bx	lr

08016cbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8016cbe:	b480      	push	{r7}
 8016cc0:	b085      	sub	sp, #20
 8016cc2:	af00      	add	r7, sp, #0
 8016cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	68fa      	ldr	r2, [r7, #12]
 8016cd4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016cd8:	f023 0303 	bic.w	r3, r3, #3
 8016cdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	68fa      	ldr	r2, [r7, #12]
 8016ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016cec:	f043 0302 	orr.w	r3, r3, #2
 8016cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016cf2:	2300      	movs	r3, #0
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3714      	adds	r7, #20
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr

08016d00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8016d00:	b480      	push	{r7}
 8016d02:	b085      	sub	sp, #20
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	695b      	ldr	r3, [r3, #20]
 8016d0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	699b      	ldr	r3, [r3, #24]
 8016d12:	68fa      	ldr	r2, [r7, #12]
 8016d14:	4013      	ands	r3, r2
 8016d16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016d18:	68fb      	ldr	r3, [r7, #12]
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3714      	adds	r7, #20
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d24:	4770      	bx	lr

08016d26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8016d26:	b480      	push	{r7}
 8016d28:	b085      	sub	sp, #20
 8016d2a:	af00      	add	r7, sp, #0
 8016d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d38:	699b      	ldr	r3, [r3, #24]
 8016d3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d42:	69db      	ldr	r3, [r3, #28]
 8016d44:	68ba      	ldr	r2, [r7, #8]
 8016d46:	4013      	ands	r3, r2
 8016d48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	0c1b      	lsrs	r3, r3, #16
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3714      	adds	r7, #20
 8016d52:	46bd      	mov	sp, r7
 8016d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d58:	4770      	bx	lr

08016d5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8016d5a:	b480      	push	{r7}
 8016d5c:	b085      	sub	sp, #20
 8016d5e:	af00      	add	r7, sp, #0
 8016d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d6c:	699b      	ldr	r3, [r3, #24]
 8016d6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d76:	69db      	ldr	r3, [r3, #28]
 8016d78:	68ba      	ldr	r2, [r7, #8]
 8016d7a:	4013      	ands	r3, r2
 8016d7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016d7e:	68bb      	ldr	r3, [r7, #8]
 8016d80:	b29b      	uxth	r3, r3
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3714      	adds	r7, #20
 8016d86:	46bd      	mov	sp, r7
 8016d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8c:	4770      	bx	lr

08016d8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016d8e:	b480      	push	{r7}
 8016d90:	b085      	sub	sp, #20
 8016d92:	af00      	add	r7, sp, #0
 8016d94:	6078      	str	r0, [r7, #4]
 8016d96:	460b      	mov	r3, r1
 8016d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016d9e:	78fb      	ldrb	r3, [r7, #3]
 8016da0:	015a      	lsls	r2, r3, #5
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	4413      	add	r3, r2
 8016da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016daa:	689b      	ldr	r3, [r3, #8]
 8016dac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016db4:	695b      	ldr	r3, [r3, #20]
 8016db6:	68ba      	ldr	r2, [r7, #8]
 8016db8:	4013      	ands	r3, r2
 8016dba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016dbc:	68bb      	ldr	r3, [r7, #8]
}
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	3714      	adds	r7, #20
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc8:	4770      	bx	lr

08016dca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016dca:	b480      	push	{r7}
 8016dcc:	b087      	sub	sp, #28
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
 8016dd2:	460b      	mov	r3, r1
 8016dd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016de0:	691b      	ldr	r3, [r3, #16]
 8016de2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016de4:	697b      	ldr	r3, [r7, #20]
 8016de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016dec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016dee:	78fb      	ldrb	r3, [r7, #3]
 8016df0:	f003 030f 	and.w	r3, r3, #15
 8016df4:	68fa      	ldr	r2, [r7, #12]
 8016df6:	fa22 f303 	lsr.w	r3, r2, r3
 8016dfa:	01db      	lsls	r3, r3, #7
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	693a      	ldr	r2, [r7, #16]
 8016e00:	4313      	orrs	r3, r2
 8016e02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016e04:	78fb      	ldrb	r3, [r7, #3]
 8016e06:	015a      	lsls	r2, r3, #5
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	4413      	add	r3, r2
 8016e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e10:	689b      	ldr	r3, [r3, #8]
 8016e12:	693a      	ldr	r2, [r7, #16]
 8016e14:	4013      	ands	r3, r2
 8016e16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016e18:	68bb      	ldr	r3, [r7, #8]
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	371c      	adds	r7, #28
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e24:	4770      	bx	lr

08016e26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8016e26:	b480      	push	{r7}
 8016e28:	b083      	sub	sp, #12
 8016e2a:	af00      	add	r7, sp, #0
 8016e2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	695b      	ldr	r3, [r3, #20]
 8016e32:	f003 0301 	and.w	r3, r3, #1
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	370c      	adds	r7, #12
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e40:	4770      	bx	lr
	...

08016e44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8016e44:	b480      	push	{r7}
 8016e46:	b085      	sub	sp, #20
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e56:	681a      	ldr	r2, [r3, #0]
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e5e:	4619      	mov	r1, r3
 8016e60:	4b09      	ldr	r3, [pc, #36]	@ (8016e88 <USB_ActivateSetup+0x44>)
 8016e62:	4013      	ands	r3, r2
 8016e64:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016e6c:	685b      	ldr	r3, [r3, #4]
 8016e6e:	68fa      	ldr	r2, [r7, #12]
 8016e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016e7a:	2300      	movs	r3, #0
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3714      	adds	r7, #20
 8016e80:	46bd      	mov	sp, r7
 8016e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e86:	4770      	bx	lr
 8016e88:	fffff800 	.word	0xfffff800

08016e8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8016e8c:	b480      	push	{r7}
 8016e8e:	b087      	sub	sp, #28
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	460b      	mov	r3, r1
 8016e96:	607a      	str	r2, [r7, #4]
 8016e98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	333c      	adds	r3, #60	@ 0x3c
 8016ea2:	3304      	adds	r3, #4
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	4a26      	ldr	r2, [pc, #152]	@ (8016f44 <USB_EP0_OutStart+0xb8>)
 8016eac:	4293      	cmp	r3, r2
 8016eae:	d90a      	bls.n	8016ec6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016ec0:	d101      	bne.n	8016ec6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	e037      	b.n	8016f36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016ec6:	697b      	ldr	r3, [r7, #20]
 8016ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016ecc:	461a      	mov	r2, r3
 8016ece:	2300      	movs	r3, #0
 8016ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016ed2:	697b      	ldr	r3, [r7, #20]
 8016ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016ed8:	691b      	ldr	r3, [r3, #16]
 8016eda:	697a      	ldr	r2, [r7, #20]
 8016edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016ee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016ee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016ee6:	697b      	ldr	r3, [r7, #20]
 8016ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016eec:	691b      	ldr	r3, [r3, #16]
 8016eee:	697a      	ldr	r2, [r7, #20]
 8016ef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016ef4:	f043 0318 	orr.w	r3, r3, #24
 8016ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8016efa:	697b      	ldr	r3, [r7, #20]
 8016efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f00:	691b      	ldr	r3, [r3, #16]
 8016f02:	697a      	ldr	r2, [r7, #20]
 8016f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016f08:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8016f0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8016f0e:	7afb      	ldrb	r3, [r7, #11]
 8016f10:	2b01      	cmp	r3, #1
 8016f12:	d10f      	bne.n	8016f34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	697a      	ldr	r2, [r7, #20]
 8016f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016f2e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8016f32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016f34:	2300      	movs	r3, #0
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	371c      	adds	r7, #28
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f40:	4770      	bx	lr
 8016f42:	bf00      	nop
 8016f44:	4f54300a 	.word	0x4f54300a

08016f48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016f48:	b480      	push	{r7}
 8016f4a:	b085      	sub	sp, #20
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016f50:	2300      	movs	r3, #0
 8016f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	3301      	adds	r3, #1
 8016f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016f60:	d901      	bls.n	8016f66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8016f62:	2303      	movs	r3, #3
 8016f64:	e01b      	b.n	8016f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	691b      	ldr	r3, [r3, #16]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	daf2      	bge.n	8016f54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	691b      	ldr	r3, [r3, #16]
 8016f76:	f043 0201 	orr.w	r2, r3, #1
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	3301      	adds	r3, #1
 8016f82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016f8a:	d901      	bls.n	8016f90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016f8c:	2303      	movs	r3, #3
 8016f8e:	e006      	b.n	8016f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	691b      	ldr	r3, [r3, #16]
 8016f94:	f003 0301 	and.w	r3, r3, #1
 8016f98:	2b01      	cmp	r3, #1
 8016f9a:	d0f0      	beq.n	8016f7e <USB_CoreReset+0x36>

  return HAL_OK;
 8016f9c:	2300      	movs	r3, #0
}
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	3714      	adds	r7, #20
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa8:	4770      	bx	lr

08016faa <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 8016faa:	b580      	push	{r7, lr}
 8016fac:	b082      	sub	sp, #8
 8016fae:	af00      	add	r7, sp, #0
 8016fb0:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2200      	movs	r2, #0
 8016fbc:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	2200      	movs	r2, #0
 8016fce:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2200      	movs	r2, #0
 8016fdc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 8016fe0:	2044      	movs	r0, #68	@ 0x44
 8016fe2:	f003 fc11 	bl	801a808 <malloc>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	461a      	mov	r2, r3
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 8016fee:	2044      	movs	r0, #68	@ 0x44
 8016ff0:	f003 fc0a 	bl	801a808 <malloc>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	7e1b      	ldrb	r3, [r3, #24]
 8017000:	461a      	mov	r2, r3
 8017002:	4613      	mov	r3, r2
 8017004:	011b      	lsls	r3, r3, #4
 8017006:	4413      	add	r3, r2
 8017008:	009b      	lsls	r3, r3, #2
 801700a:	4618      	mov	r0, r3
 801700c:	f003 fbfc 	bl	801a808 <malloc>
 8017010:	4603      	mov	r3, r0
 8017012:	461a      	mov	r2, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801701e:	461a      	mov	r2, r3
 8017020:	4613      	mov	r3, r2
 8017022:	011b      	lsls	r3, r3, #4
 8017024:	4413      	add	r3, r2
 8017026:	009b      	lsls	r3, r3, #2
 8017028:	4618      	mov	r0, r3
 801702a:	f003 fbed 	bl	801a808 <malloc>
 801702e:	4603      	mov	r3, r0
 8017030:	461a      	mov	r2, r3
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6818      	ldr	r0, [r3, #0]
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	689b      	ldr	r3, [r3, #8]
 801703e:	2244      	movs	r2, #68	@ 0x44
 8017040:	4619      	mov	r1, r3
 8017042:	f7fc fd4b 	bl	8013adc <HAL_UART_Receive_DMA>
 8017046:	4603      	mov	r3, r0
}
 8017048:	4618      	mov	r0, r3
 801704a:	3708      	adds	r7, #8
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 8017050:	b480      	push	{r7}
 8017052:	b087      	sub	sp, #28
 8017054:	af00      	add	r7, sp, #0
 8017056:	60f8      	str	r0, [r7, #12]
 8017058:	60b9      	str	r1, [r7, #8]
 801705a:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	7e9a      	ldrb	r2, [r3, #26]
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	7e5b      	ldrb	r3, [r3, #25]
 8017064:	429a      	cmp	r2, r3
 8017066:	d101      	bne.n	801706c <XBEE_RXPacket+0x1c>
 8017068:	2301      	movs	r3, #1
 801706a:	e05b      	b.n	8017124 <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	695a      	ldr	r2, [r3, #20]
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	7e9b      	ldrb	r3, [r3, #26]
 8017074:	4619      	mov	r1, r3
 8017076:	460b      	mov	r3, r1
 8017078:	011b      	lsls	r3, r3, #4
 801707a:	440b      	add	r3, r1
 801707c:	009b      	lsls	r3, r3, #2
 801707e:	4413      	add	r3, r2
 8017080:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	7e9b      	ldrb	r3, [r3, #26]
 8017086:	3301      	adds	r3, #1
 8017088:	b2da      	uxtb	r2, r3
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	7e9b      	ldrb	r3, [r3, #26]
 8017092:	68fa      	ldr	r2, [r7, #12]
 8017094:	7e12      	ldrb	r2, [r2, #24]
 8017096:	fbb3 f1f2 	udiv	r1, r3, r2
 801709a:	fb01 f202 	mul.w	r2, r1, r2
 801709e:	1a9b      	subs	r3, r3, r2
 80170a0:	b2da      	uxtb	r2, r3
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 80170a6:	2300      	movs	r3, #0
 80170a8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80170aa:	2300      	movs	r3, #0
 80170ac:	75bb      	strb	r3, [r7, #22]
 80170ae:	e00e      	b.n	80170ce <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 80170b0:	7dbb      	ldrb	r3, [r7, #22]
 80170b2:	2b03      	cmp	r3, #3
 80170b4:	d007      	beq.n	80170c6 <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 80170b6:	7dbb      	ldrb	r3, [r7, #22]
 80170b8:	693a      	ldr	r2, [r7, #16]
 80170ba:	4413      	add	r3, r2
 80170bc:	781a      	ldrb	r2, [r3, #0]
 80170be:	7dfb      	ldrb	r3, [r7, #23]
 80170c0:	4053      	eors	r3, r2
 80170c2:	75fb      	strb	r3, [r7, #23]
 80170c4:	e000      	b.n	80170c8 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 80170c6:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80170c8:	7dbb      	ldrb	r3, [r7, #22]
 80170ca:	3301      	adds	r3, #1
 80170cc:	75bb      	strb	r3, [r7, #22]
 80170ce:	7dbb      	ldrb	r3, [r7, #22]
 80170d0:	2b43      	cmp	r3, #67	@ 0x43
 80170d2:	d9ed      	bls.n	80170b0 <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 80170d4:	693b      	ldr	r3, [r7, #16]
 80170d6:	3303      	adds	r3, #3
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	7dfa      	ldrb	r2, [r7, #23]
 80170dc:	429a      	cmp	r2, r3
 80170de:	d001      	beq.n	80170e4 <XBEE_RXPacket+0x94>
 80170e0:	2301      	movs	r3, #1
 80170e2:	e01f      	b.n	8017124 <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2200      	movs	r2, #0
 80170e8:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	881b      	ldrh	r3, [r3, #0]
 80170ee:	693a      	ldr	r2, [r7, #16]
 80170f0:	3201      	adds	r2, #1
 80170f2:	7812      	ldrb	r2, [r2, #0]
 80170f4:	4413      	add	r3, r2
 80170f6:	b29a      	uxth	r2, r3
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	881b      	ldrh	r3, [r3, #0]
 8017100:	021b      	lsls	r3, r3, #8
 8017102:	b29a      	uxth	r2, r3
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	881b      	ldrh	r3, [r3, #0]
 801710c:	693a      	ldr	r2, [r7, #16]
 801710e:	3202      	adds	r2, #2
 8017110:	7812      	ldrb	r2, [r2, #0]
 8017112:	4413      	add	r3, r2
 8017114:	b29a      	uxth	r2, r3
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	1d1a      	adds	r2, r3, #4
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	601a      	str	r2, [r3, #0]

	return 0;
 8017122:	2300      	movs	r3, #0
}
 8017124:	4618      	mov	r0, r3
 8017126:	371c      	adds	r7, #28
 8017128:	46bd      	mov	sp, r7
 801712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712e:	4770      	bx	lr

08017130 <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 8017130:	b580      	push	{r7, lr}
 8017132:	b086      	sub	sp, #24
 8017134:	af00      	add	r7, sp, #0
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	60b9      	str	r1, [r7, #8]
 801713a:	4613      	mov	r3, r2
 801713c:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017144:	3301      	adds	r3, #1
 8017146:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801714e:	7dbb      	ldrb	r3, [r7, #22]
 8017150:	fbb3 f1f2 	udiv	r1, r3, r2
 8017154:	fb01 f202 	mul.w	r2, r1, r2
 8017158:	1a9b      	subs	r3, r3, r2
 801715a:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8017162:	7dba      	ldrb	r2, [r7, #22]
 8017164:	429a      	cmp	r2, r3
 8017166:	d101      	bne.n	801716c <XBEE_TXPacket+0x3c>
 8017168:	2301      	movs	r3, #1
 801716a:	e047      	b.n	80171fc <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	69da      	ldr	r2, [r3, #28]
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017176:	4619      	mov	r1, r3
 8017178:	460b      	mov	r3, r1
 801717a:	011b      	lsls	r3, r3, #4
 801717c:	440b      	add	r3, r1
 801717e:	009b      	lsls	r3, r3, #2
 8017180:	4413      	add	r3, r2
 8017182:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	22aa      	movs	r2, #170	@ 0xaa
 8017188:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 801718a:	88fb      	ldrh	r3, [r7, #6]
 801718c:	0a1b      	lsrs	r3, r3, #8
 801718e:	b29a      	uxth	r2, r3
 8017190:	693b      	ldr	r3, [r7, #16]
 8017192:	3301      	adds	r3, #1
 8017194:	b2d2      	uxtb	r2, r2
 8017196:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 8017198:	693b      	ldr	r3, [r7, #16]
 801719a:	3302      	adds	r3, #2
 801719c:	88fa      	ldrh	r2, [r7, #6]
 801719e:	b2d2      	uxtb	r2, r2
 80171a0:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	3304      	adds	r3, #4
 80171a6:	2240      	movs	r2, #64	@ 0x40
 80171a8:	68b9      	ldr	r1, [r7, #8]
 80171aa:	4618      	mov	r0, r3
 80171ac:	f003 fc50 	bl	801aa50 <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	3303      	adds	r3, #3
 80171b4:	2200      	movs	r2, #0
 80171b6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80171b8:	2300      	movs	r3, #0
 80171ba:	75fb      	strb	r3, [r7, #23]
 80171bc:	e013      	b.n	80171e6 <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 80171be:	7dfb      	ldrb	r3, [r7, #23]
 80171c0:	2b03      	cmp	r3, #3
 80171c2:	d00c      	beq.n	80171de <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 80171c4:	693b      	ldr	r3, [r7, #16]
 80171c6:	3303      	adds	r3, #3
 80171c8:	7819      	ldrb	r1, [r3, #0]
 80171ca:	7dfb      	ldrb	r3, [r7, #23]
 80171cc:	693a      	ldr	r2, [r7, #16]
 80171ce:	4413      	add	r3, r2
 80171d0:	781a      	ldrb	r2, [r3, #0]
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	3303      	adds	r3, #3
 80171d6:	404a      	eors	r2, r1
 80171d8:	b2d2      	uxtb	r2, r2
 80171da:	701a      	strb	r2, [r3, #0]
 80171dc:	e000      	b.n	80171e0 <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 80171de:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80171e0:	7dfb      	ldrb	r3, [r7, #23]
 80171e2:	3301      	adds	r3, #1
 80171e4:	75fb      	strb	r3, [r7, #23]
 80171e6:	7dfb      	ldrb	r3, [r7, #23]
 80171e8:	2b43      	cmp	r3, #67	@ 0x43
 80171ea:	d9e8      	bls.n	80171be <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	6818      	ldr	r0, [r3, #0]
 80171f0:	231e      	movs	r3, #30
 80171f2:	2244      	movs	r2, #68	@ 0x44
 80171f4:	6939      	ldr	r1, [r7, #16]
 80171f6:	f7fc fbe3 	bl	80139c0 <HAL_UART_Transmit>
 80171fa:	4603      	mov	r3, r0

}
 80171fc:	4618      	mov	r0, r3
 80171fe:	3718      	adds	r7, #24
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}

08017204 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8017204:	b580      	push	{r7, lr}
 8017206:	b096      	sub	sp, #88	@ 0x58
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	7e5b      	ldrb	r3, [r3, #25]
 8017210:	3301      	adds	r3, #1
 8017212:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	7e1a      	ldrb	r2, [r3, #24]
 801721a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801721e:	fbb3 f1f2 	udiv	r1, r3, r2
 8017222:	fb01 f202 	mul.w	r2, r1, r2
 8017226:	1a9b      	subs	r3, r3, r2
 8017228:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	7e9b      	ldrb	r3, [r3, #26]
 8017230:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8017234:	429a      	cmp	r2, r3
 8017236:	d101      	bne.n	801723c <XBEE_RX_DMACallback+0x38>
 8017238:	2301      	movs	r3, #1
 801723a:	e097      	b.n	801736c <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	7c1b      	ldrb	r3, [r3, #16]
 8017240:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 8017244:	2300      	movs	r3, #0
 8017246:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 801724a:	2300      	movs	r3, #0
 801724c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8017250:	e027      	b.n	80172a2 <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 8017252:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8017256:	687a      	ldr	r2, [r7, #4]
 8017258:	7c12      	ldrb	r2, [r2, #16]
 801725a:	441a      	add	r2, r3
 801725c:	4b45      	ldr	r3, [pc, #276]	@ (8017374 <XBEE_RX_DMACallback+0x170>)
 801725e:	fb83 1302 	smull	r1, r3, r3, r2
 8017262:	1159      	asrs	r1, r3, #5
 8017264:	17d3      	asrs	r3, r2, #31
 8017266:	1ac9      	subs	r1, r1, r3
 8017268:	460b      	mov	r3, r1
 801726a:	011b      	lsls	r3, r3, #4
 801726c:	440b      	add	r3, r1
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	1ad1      	subs	r1, r2, r3
 8017272:	460b      	mov	r3, r1
 8017274:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	689a      	ldr	r2, [r3, #8]
 801727c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8017280:	4413      	add	r3, r2
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	2baa      	cmp	r3, #170	@ 0xaa
 8017286:	d107      	bne.n	8017298 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 8017288:	2301      	movs	r3, #1
 801728a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8017294:	741a      	strb	r2, [r3, #16]
			break;
 8017296:	e008      	b.n	80172aa <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8017298:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 801729c:	3301      	adds	r3, #1
 801729e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80172a2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80172a6:	2b43      	cmp	r3, #67	@ 0x43
 80172a8:	d9d3      	bls.n	8017252 <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 80172aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d101      	bne.n	80172b6 <XBEE_RX_DMACallback+0xb2>
 80172b2:	2302      	movs	r3, #2
 80172b4:	e05a      	b.n	801736c <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	68da      	ldr	r2, [r3, #12]
 80172ba:	f107 030c 	add.w	r3, r7, #12
 80172be:	4611      	mov	r1, r2
 80172c0:	2244      	movs	r2, #68	@ 0x44
 80172c2:	4618      	mov	r0, r3
 80172c4:	f003 fbc4 	bl	801aa50 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	68d8      	ldr	r0, [r3, #12]
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	689b      	ldr	r3, [r3, #8]
 80172d0:	687a      	ldr	r2, [r7, #4]
 80172d2:	7c12      	ldrb	r2, [r2, #16]
 80172d4:	1899      	adds	r1, r3, r2
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	7c1b      	ldrb	r3, [r3, #16]
 80172da:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80172de:	461a      	mov	r2, r3
 80172e0:	f003 fbb6 	bl	801aa50 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	7c1b      	ldrb	r3, [r3, #16]
 80172e8:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80172ec:	429a      	cmp	r2, r3
 80172ee:	d201      	bcs.n	80172f4 <XBEE_RX_DMACallback+0xf0>
		return 2;
 80172f0:	2302      	movs	r3, #2
 80172f2:	e03b      	b.n	801736c <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 80172f4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80172f8:	b29b      	uxth	r3, r3
 80172fa:	687a      	ldr	r2, [r7, #4]
 80172fc:	7c12      	ldrb	r2, [r2, #16]
 80172fe:	1a9b      	subs	r3, r3, r2
 8017300:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8017304:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017308:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 801730c:	461a      	mov	r2, r3
 801730e:	f107 030c 	add.w	r3, r7, #12
 8017312:	4413      	add	r3, r2
 8017314:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017318:	2100      	movs	r1, #0
 801731a:	4618      	mov	r0, r3
 801731c:	f003 fb4c 	bl	801a9b8 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8017320:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017324:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017328:	1ad3      	subs	r3, r2, r3
 801732a:	3344      	adds	r3, #68	@ 0x44
 801732c:	f107 020c 	add.w	r2, r7, #12
 8017330:	18d0      	adds	r0, r2, r3
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6899      	ldr	r1, [r3, #8]
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	7c1b      	ldrb	r3, [r3, #16]
 801733a:	461a      	mov	r2, r3
 801733c:	f003 fb88 	bl	801aa50 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8017346:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	695a      	ldr	r2, [r3, #20]
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	7e5b      	ldrb	r3, [r3, #25]
 8017350:	4619      	mov	r1, r3
 8017352:	460b      	mov	r3, r1
 8017354:	011b      	lsls	r3, r3, #4
 8017356:	440b      	add	r3, r1
 8017358:	009b      	lsls	r3, r3, #2
 801735a:	4413      	add	r3, r2
 801735c:	4618      	mov	r0, r3
 801735e:	f107 030c 	add.w	r3, r7, #12
 8017362:	2244      	movs	r2, #68	@ 0x44
 8017364:	4619      	mov	r1, r3
 8017366:	f003 fb73 	bl	801aa50 <memcpy>

	return 0;
 801736a:	2300      	movs	r3, #0
}
 801736c:	4618      	mov	r0, r3
 801736e:	3758      	adds	r7, #88	@ 0x58
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	78787879 	.word	0x78787879

08017378 <AllocateValueArr>:
#include "MenuOLED.h"

// FUNCS
// ------------------------------------------------------------------------------------

uint8_t* AllocateValueArr(uint8_t num) {
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	4603      	mov	r3, r0
 8017380:	71fb      	strb	r3, [r7, #7]
	return (uint8_t*)malloc(sizeof(uint8_t)*num);
 8017382:	79fb      	ldrb	r3, [r7, #7]
 8017384:	4618      	mov	r0, r3
 8017386:	f003 fa3f 	bl	801a808 <malloc>
 801738a:	4603      	mov	r3, r0
}
 801738c:	4618      	mov	r0, r3
 801738e:	3708      	adds	r7, #8
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}

08017394 <AllocateString>:

uint8_t* AllocateString(uint8_t* src) {
 8017394:	b580      	push	{r7, lr}
 8017396:	b09c      	sub	sp, #112	@ 0x70
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
	uint8_t str_tmp[100];
	uint8_t* dst = (uint8_t*)malloc(strlen(src)+1);
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	f7e8 ff9f 	bl	80002e0 <strlen>
 80173a2:	4603      	mov	r3, r0
 80173a4:	3301      	adds	r3, #1
 80173a6:	4618      	mov	r0, r3
 80173a8:	f003 fa2e 	bl	801a808 <malloc>
 80173ac:	4603      	mov	r3, r0
 80173ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
	strcpy(dst, src);
 80173b0:	6879      	ldr	r1, [r7, #4]
 80173b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80173b4:	f003 fb44 	bl	801aa40 <strcpy>
	return dst;
 80173b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3770      	adds	r7, #112	@ 0x70
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}

080173c2 <AllocateStringArr>:

uint8_t** AllocateStringArr(uint8_t num) {
 80173c2:	b580      	push	{r7, lr}
 80173c4:	b082      	sub	sp, #8
 80173c6:	af00      	add	r7, sp, #0
 80173c8:	4603      	mov	r3, r0
 80173ca:	71fb      	strb	r3, [r7, #7]
	return (uint8_t**)malloc(sizeof(uint8_t*)*num);
 80173cc:	79fb      	ldrb	r3, [r7, #7]
 80173ce:	009b      	lsls	r3, r3, #2
 80173d0:	4618      	mov	r0, r3
 80173d2:	f003 fa19 	bl	801a808 <malloc>
 80173d6:	4603      	mov	r3, r0
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3708      	adds	r7, #8
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}

080173e0 <AllocateProperties>:

Menu_Property* AllocateProperties(uint8_t num) {
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b082      	sub	sp, #8
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	4603      	mov	r3, r0
 80173e8:	71fb      	strb	r3, [r7, #7]
	return (Menu_Property*)malloc(sizeof(Menu_Property)*num);
 80173ea:	79fa      	ldrb	r2, [r7, #7]
 80173ec:	4613      	mov	r3, r2
 80173ee:	005b      	lsls	r3, r3, #1
 80173f0:	4413      	add	r3, r2
 80173f2:	009b      	lsls	r3, r3, #2
 80173f4:	4618      	mov	r0, r3
 80173f6:	f003 fa07 	bl	801a808 <malloc>
 80173fa:	4603      	mov	r3, r0
}
 80173fc:	4618      	mov	r0, r3
 80173fe:	3708      	adds	r7, #8
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}

08017404 <AllocatePages>:

Menu_Page* AllocatePages(uint8_t num) {
 8017404:	b580      	push	{r7, lr}
 8017406:	b082      	sub	sp, #8
 8017408:	af00      	add	r7, sp, #0
 801740a:	4603      	mov	r3, r0
 801740c:	71fb      	strb	r3, [r7, #7]
	return (Menu_Page*)malloc(sizeof(Menu_Page)*num);
 801740e:	79fa      	ldrb	r2, [r7, #7]
 8017410:	4613      	mov	r3, r2
 8017412:	005b      	lsls	r3, r3, #1
 8017414:	4413      	add	r3, r2
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	4618      	mov	r0, r3
 801741a:	f003 f9f5 	bl	801a808 <malloc>
 801741e:	4603      	mov	r3, r0
}
 8017420:	4618      	mov	r0, r3
 8017422:	3708      	adds	r7, #8
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}

08017428 <MENU_Init>:

uint8_t MENU_Init(Menu_HandleTypeDef *hmenu) {
 8017428:	b590      	push	{r4, r7, lr}
 801742a:	b089      	sub	sp, #36	@ 0x24
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
	// a buncha of work incoming

	// Initialize the state packet
	hmenu->state_packet = AllocateValueArr(64);
 8017430:	2040      	movs	r0, #64	@ 0x40
 8017432:	f7ff ffa1 	bl	8017378 <AllocateValueArr>
 8017436:	4602      	mov	r2, r0
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	611a      	str	r2, [r3, #16]
	memset(hmenu->state_packet, 0x00, 64);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	691b      	ldr	r3, [r3, #16]
 8017440:	2240      	movs	r2, #64	@ 0x40
 8017442:	2100      	movs	r1, #0
 8017444:	4618      	mov	r0, r3
 8017446:	f003 fab7 	bl	801a9b8 <memset>

	// Allocate pages
	hmenu->num_pages = 2;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2202      	movs	r2, #2
 801744e:	721a      	strb	r2, [r3, #8]
	hmenu->pages = AllocatePages(hmenu->num_pages);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	7a1b      	ldrb	r3, [r3, #8]
 8017454:	4618      	mov	r0, r3
 8017456:	f7ff ffd5 	bl	8017404 <AllocatePages>
 801745a:	4602      	mov	r2, r0
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	60da      	str	r2, [r3, #12]

	// PAGE 0 (CAMERA)
	hmenu->pages[0].title = AllocateString("CAMERA");
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	68dc      	ldr	r4, [r3, #12]
 8017464:	4893      	ldr	r0, [pc, #588]	@ (80176b4 <MENU_Init+0x28c>)
 8017466:	f7ff ff95 	bl	8017394 <AllocateString>
 801746a:	4603      	mov	r3, r0
 801746c:	6023      	str	r3, [r4, #0]

	hmenu->pages[0].num_properties = 3;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	68db      	ldr	r3, [r3, #12]
 8017472:	2203      	movs	r2, #3
 8017474:	711a      	strb	r2, [r3, #4]
	hmenu->pages[0].properties = AllocateProperties(hmenu->pages[0].num_properties);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	68db      	ldr	r3, [r3, #12]
 801747a:	791a      	ldrb	r2, [r3, #4]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	68dc      	ldr	r4, [r3, #12]
 8017480:	4610      	mov	r0, r2
 8017482:	f7ff ffad 	bl	80173e0 <AllocateProperties>
 8017486:	4603      	mov	r3, r0
 8017488:	60a3      	str	r3, [r4, #8]

	// Camera Quality
	hmenu->pages[0].properties[0].name = AllocateString("QUALITY");
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	68db      	ldr	r3, [r3, #12]
 801748e:	689c      	ldr	r4, [r3, #8]
 8017490:	4889      	ldr	r0, [pc, #548]	@ (80176b8 <MENU_Init+0x290>)
 8017492:	f7ff ff7f 	bl	8017394 <AllocateString>
 8017496:	4603      	mov	r3, r0
 8017498:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].packet_byte = OP_CAMERA_QUALITY;
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	68db      	ldr	r3, [r3, #12]
 801749e:	689b      	ldr	r3, [r3, #8]
 80174a0:	2201      	movs	r2, #1
 80174a2:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[0].num_options = 4;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	68db      	ldr	r3, [r3, #12]
 80174a8:	689b      	ldr	r3, [r3, #8]
 80174aa:	2204      	movs	r2, #4
 80174ac:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[0].option_names = AllocateStringArr(hmenu->pages[0].properties[0].num_options);
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	68db      	ldr	r3, [r3, #12]
 80174b2:	689b      	ldr	r3, [r3, #8]
 80174b4:	795a      	ldrb	r2, [r3, #5]
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	68db      	ldr	r3, [r3, #12]
 80174ba:	689c      	ldr	r4, [r3, #8]
 80174bc:	4610      	mov	r0, r2
 80174be:	f7ff ff80 	bl	80173c2 <AllocateStringArr>
 80174c2:	4603      	mov	r3, r0
 80174c4:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[0].option_names[0] = AllocateString("LOW");
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	68db      	ldr	r3, [r3, #12]
 80174ca:	689b      	ldr	r3, [r3, #8]
 80174cc:	689c      	ldr	r4, [r3, #8]
 80174ce:	487b      	ldr	r0, [pc, #492]	@ (80176bc <MENU_Init+0x294>)
 80174d0:	f7ff ff60 	bl	8017394 <AllocateString>
 80174d4:	4603      	mov	r3, r0
 80174d6:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[1] = AllocateString("MED");
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	68db      	ldr	r3, [r3, #12]
 80174dc:	689b      	ldr	r3, [r3, #8]
 80174de:	689b      	ldr	r3, [r3, #8]
 80174e0:	1d1c      	adds	r4, r3, #4
 80174e2:	4877      	ldr	r0, [pc, #476]	@ (80176c0 <MENU_Init+0x298>)
 80174e4:	f7ff ff56 	bl	8017394 <AllocateString>
 80174e8:	4603      	mov	r3, r0
 80174ea:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[2] = AllocateString("HIGH");
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	68db      	ldr	r3, [r3, #12]
 80174f0:	689b      	ldr	r3, [r3, #8]
 80174f2:	689b      	ldr	r3, [r3, #8]
 80174f4:	f103 0408 	add.w	r4, r3, #8
 80174f8:	4872      	ldr	r0, [pc, #456]	@ (80176c4 <MENU_Init+0x29c>)
 80174fa:	f7ff ff4b 	bl	8017394 <AllocateString>
 80174fe:	4603      	mov	r3, r0
 8017500:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[3] = AllocateString("BEST");
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	68db      	ldr	r3, [r3, #12]
 8017506:	689b      	ldr	r3, [r3, #8]
 8017508:	689b      	ldr	r3, [r3, #8]
 801750a:	f103 040c 	add.w	r4, r3, #12
 801750e:	486e      	ldr	r0, [pc, #440]	@ (80176c8 <MENU_Init+0x2a0>)
 8017510:	f7ff ff40 	bl	8017394 <AllocateString>
 8017514:	4603      	mov	r3, r0
 8017516:	6023      	str	r3, [r4, #0]

	// Camera Vertical Shift
	hmenu->pages[0].properties[1].name = AllocateString("SHOW MS");
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	68db      	ldr	r3, [r3, #12]
 801751c:	689b      	ldr	r3, [r3, #8]
 801751e:	f103 040c 	add.w	r4, r3, #12
 8017522:	486a      	ldr	r0, [pc, #424]	@ (80176cc <MENU_Init+0x2a4>)
 8017524:	f7ff ff36 	bl	8017394 <AllocateString>
 8017528:	4603      	mov	r3, r0
 801752a:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].packet_byte = OP_CAMERA_FRAMETIME;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	68db      	ldr	r3, [r3, #12]
 8017530:	689b      	ldr	r3, [r3, #8]
 8017532:	330c      	adds	r3, #12
 8017534:	2202      	movs	r2, #2
 8017536:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[1].num_options = 2;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	68db      	ldr	r3, [r3, #12]
 801753c:	689b      	ldr	r3, [r3, #8]
 801753e:	330c      	adds	r3, #12
 8017540:	2202      	movs	r2, #2
 8017542:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[1].option_names = AllocateStringArr(hmenu->pages[0].properties[1].num_options);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	68db      	ldr	r3, [r3, #12]
 8017548:	689b      	ldr	r3, [r3, #8]
 801754a:	330c      	adds	r3, #12
 801754c:	795a      	ldrb	r2, [r3, #5]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	68db      	ldr	r3, [r3, #12]
 8017552:	689b      	ldr	r3, [r3, #8]
 8017554:	f103 040c 	add.w	r4, r3, #12
 8017558:	4610      	mov	r0, r2
 801755a:	f7ff ff32 	bl	80173c2 <AllocateStringArr>
 801755e:	4603      	mov	r3, r0
 8017560:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[1].option_names[0] = AllocateString("[\x83\x83]");
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	68db      	ldr	r3, [r3, #12]
 8017566:	689b      	ldr	r3, [r3, #8]
 8017568:	330c      	adds	r3, #12
 801756a:	689c      	ldr	r4, [r3, #8]
 801756c:	4858      	ldr	r0, [pc, #352]	@ (80176d0 <MENU_Init+0x2a8>)
 801756e:	f7ff ff11 	bl	8017394 <AllocateString>
 8017572:	4603      	mov	r3, r0
 8017574:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].option_names[1] = AllocateString("[\x80\x80]");
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	68db      	ldr	r3, [r3, #12]
 801757a:	689b      	ldr	r3, [r3, #8]
 801757c:	330c      	adds	r3, #12
 801757e:	689b      	ldr	r3, [r3, #8]
 8017580:	1d1c      	adds	r4, r3, #4
 8017582:	4854      	ldr	r0, [pc, #336]	@ (80176d4 <MENU_Init+0x2ac>)
 8017584:	f7ff ff06 	bl	8017394 <AllocateString>
 8017588:	4603      	mov	r3, r0
 801758a:	6023      	str	r3, [r4, #0]

	// Camera Mode
	hmenu->pages[0].properties[2].name = AllocateString("ENCODING");
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	68db      	ldr	r3, [r3, #12]
 8017590:	689b      	ldr	r3, [r3, #8]
 8017592:	f103 0418 	add.w	r4, r3, #24
 8017596:	4850      	ldr	r0, [pc, #320]	@ (80176d8 <MENU_Init+0x2b0>)
 8017598:	f7ff fefc 	bl	8017394 <AllocateString>
 801759c:	4603      	mov	r3, r0
 801759e:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[2].packet_byte = OP_CAMERA_ENCODING;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	68db      	ldr	r3, [r3, #12]
 80175a4:	689b      	ldr	r3, [r3, #8]
 80175a6:	3318      	adds	r3, #24
 80175a8:	2200      	movs	r2, #0
 80175aa:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[2].num_options = 2;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	68db      	ldr	r3, [r3, #12]
 80175b0:	689b      	ldr	r3, [r3, #8]
 80175b2:	3318      	adds	r3, #24
 80175b4:	2202      	movs	r2, #2
 80175b6:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[2].option_names = AllocateStringArr(hmenu->pages[0].properties[2].num_options);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	68db      	ldr	r3, [r3, #12]
 80175bc:	689b      	ldr	r3, [r3, #8]
 80175be:	3318      	adds	r3, #24
 80175c0:	795a      	ldrb	r2, [r3, #5]
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	68db      	ldr	r3, [r3, #12]
 80175c6:	689b      	ldr	r3, [r3, #8]
 80175c8:	f103 0418 	add.w	r4, r3, #24
 80175cc:	4610      	mov	r0, r2
 80175ce:	f7ff fef8 	bl	80173c2 <AllocateStringArr>
 80175d2:	4603      	mov	r3, r0
 80175d4:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[2].option_names[0] = AllocateString("JPEG");
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	68db      	ldr	r3, [r3, #12]
 80175da:	689b      	ldr	r3, [r3, #8]
 80175dc:	3318      	adds	r3, #24
 80175de:	689c      	ldr	r4, [r3, #8]
 80175e0:	483e      	ldr	r0, [pc, #248]	@ (80176dc <MENU_Init+0x2b4>)
 80175e2:	f7ff fed7 	bl	8017394 <AllocateString>
 80175e6:	4603      	mov	r3, r0
 80175e8:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[2].option_names[1] = AllocateString("RAW");
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	68db      	ldr	r3, [r3, #12]
 80175ee:	689b      	ldr	r3, [r3, #8]
 80175f0:	3318      	adds	r3, #24
 80175f2:	689b      	ldr	r3, [r3, #8]
 80175f4:	1d1c      	adds	r4, r3, #4
 80175f6:	483a      	ldr	r0, [pc, #232]	@ (80176e0 <MENU_Init+0x2b8>)
 80175f8:	f7ff fecc 	bl	8017394 <AllocateString>
 80175fc:	4603      	mov	r3, r0
 80175fe:	6023      	str	r3, [r4, #0]

	// PAGE 1 (LIGHTS)
	hmenu->pages[1].title = AllocateString("LIGHTING");
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	68db      	ldr	r3, [r3, #12]
 8017604:	f103 040c 	add.w	r4, r3, #12
 8017608:	4836      	ldr	r0, [pc, #216]	@ (80176e4 <MENU_Init+0x2bc>)
 801760a:	f7ff fec3 	bl	8017394 <AllocateString>
 801760e:	4603      	mov	r3, r0
 8017610:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].num_properties = 4;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	68db      	ldr	r3, [r3, #12]
 8017616:	330c      	adds	r3, #12
 8017618:	2204      	movs	r2, #4
 801761a:	711a      	strb	r2, [r3, #4]
	hmenu->pages[1].properties = AllocateProperties(hmenu->pages[1].num_properties);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	68db      	ldr	r3, [r3, #12]
 8017620:	330c      	adds	r3, #12
 8017622:	791a      	ldrb	r2, [r3, #4]
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	68db      	ldr	r3, [r3, #12]
 8017628:	f103 040c 	add.w	r4, r3, #12
 801762c:	4610      	mov	r0, r2
 801762e:	f7ff fed7 	bl	80173e0 <AllocateProperties>
 8017632:	4603      	mov	r3, r0
 8017634:	60a3      	str	r3, [r4, #8]

	// Pre-allocate the percent strings
	uint8_t *percentStr[5];
	percentStr[0] = AllocateString("[\x80\x80\x80\x80]");
 8017636:	482c      	ldr	r0, [pc, #176]	@ (80176e8 <MENU_Init+0x2c0>)
 8017638:	f7ff feac 	bl	8017394 <AllocateString>
 801763c:	4603      	mov	r3, r0
 801763e:	60bb      	str	r3, [r7, #8]
	percentStr[1] = AllocateString("[\x83\x80\x80\x80]");
 8017640:	482a      	ldr	r0, [pc, #168]	@ (80176ec <MENU_Init+0x2c4>)
 8017642:	f7ff fea7 	bl	8017394 <AllocateString>
 8017646:	4603      	mov	r3, r0
 8017648:	60fb      	str	r3, [r7, #12]
	percentStr[2] = AllocateString("[\x83\x83\x80\x80]");
 801764a:	4829      	ldr	r0, [pc, #164]	@ (80176f0 <MENU_Init+0x2c8>)
 801764c:	f7ff fea2 	bl	8017394 <AllocateString>
 8017650:	4603      	mov	r3, r0
 8017652:	613b      	str	r3, [r7, #16]
	percentStr[3] = AllocateString("[\x83\x83\x83\x80]");
 8017654:	4827      	ldr	r0, [pc, #156]	@ (80176f4 <MENU_Init+0x2cc>)
 8017656:	f7ff fe9d 	bl	8017394 <AllocateString>
 801765a:	4603      	mov	r3, r0
 801765c:	617b      	str	r3, [r7, #20]
	percentStr[4] = AllocateString("[\x83\x83\x83\x83]");
 801765e:	4826      	ldr	r0, [pc, #152]	@ (80176f8 <MENU_Init+0x2d0>)
 8017660:	f7ff fe98 	bl	8017394 <AllocateString>
 8017664:	4603      	mov	r3, r0
 8017666:	61bb      	str	r3, [r7, #24]

	hmenu->pages[1].properties[0].name = AllocateString("HEADLIGHTS");
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	68db      	ldr	r3, [r3, #12]
 801766c:	330c      	adds	r3, #12
 801766e:	689c      	ldr	r4, [r3, #8]
 8017670:	4822      	ldr	r0, [pc, #136]	@ (80176fc <MENU_Init+0x2d4>)
 8017672:	f7ff fe8f 	bl	8017394 <AllocateString>
 8017676:	4603      	mov	r3, r0
 8017678:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].packet_byte = 3;
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	68db      	ldr	r3, [r3, #12]
 801767e:	330c      	adds	r3, #12
 8017680:	689b      	ldr	r3, [r3, #8]
 8017682:	2203      	movs	r2, #3
 8017684:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[0].num_options = 5;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	68db      	ldr	r3, [r3, #12]
 801768a:	330c      	adds	r3, #12
 801768c:	689b      	ldr	r3, [r3, #8]
 801768e:	2205      	movs	r2, #5
 8017690:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[0].option_names = AllocateStringArr(hmenu->pages[1].properties[0].num_options);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	68db      	ldr	r3, [r3, #12]
 8017696:	330c      	adds	r3, #12
 8017698:	689b      	ldr	r3, [r3, #8]
 801769a:	795a      	ldrb	r2, [r3, #5]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	68db      	ldr	r3, [r3, #12]
 80176a0:	330c      	adds	r3, #12
 80176a2:	689c      	ldr	r4, [r3, #8]
 80176a4:	4610      	mov	r0, r2
 80176a6:	f7ff fe8c 	bl	80173c2 <AllocateStringArr>
 80176aa:	4603      	mov	r3, r0
 80176ac:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 80176ae:	2300      	movs	r3, #0
 80176b0:	77fb      	strb	r3, [r7, #31]
 80176b2:	e037      	b.n	8017724 <MENU_Init+0x2fc>
 80176b4:	0801b220 	.word	0x0801b220
 80176b8:	0801b228 	.word	0x0801b228
 80176bc:	0801b230 	.word	0x0801b230
 80176c0:	0801b234 	.word	0x0801b234
 80176c4:	0801b238 	.word	0x0801b238
 80176c8:	0801b240 	.word	0x0801b240
 80176cc:	0801b248 	.word	0x0801b248
 80176d0:	0801b250 	.word	0x0801b250
 80176d4:	0801b258 	.word	0x0801b258
 80176d8:	0801b260 	.word	0x0801b260
 80176dc:	0801b26c 	.word	0x0801b26c
 80176e0:	0801b274 	.word	0x0801b274
 80176e4:	0801b278 	.word	0x0801b278
 80176e8:	0801b284 	.word	0x0801b284
 80176ec:	0801b28c 	.word	0x0801b28c
 80176f0:	0801b294 	.word	0x0801b294
 80176f4:	0801b29c 	.word	0x0801b29c
 80176f8:	0801b2a4 	.word	0x0801b2a4
 80176fc:	0801b2ac 	.word	0x0801b2ac
		hmenu->pages[1].properties[0].option_names[i] = percentStr[i];
 8017700:	7ffb      	ldrb	r3, [r7, #31]
 8017702:	687a      	ldr	r2, [r7, #4]
 8017704:	68d2      	ldr	r2, [r2, #12]
 8017706:	320c      	adds	r2, #12
 8017708:	6892      	ldr	r2, [r2, #8]
 801770a:	6891      	ldr	r1, [r2, #8]
 801770c:	7ffa      	ldrb	r2, [r7, #31]
 801770e:	0092      	lsls	r2, r2, #2
 8017710:	440a      	add	r2, r1
 8017712:	009b      	lsls	r3, r3, #2
 8017714:	3320      	adds	r3, #32
 8017716:	443b      	add	r3, r7
 8017718:	f853 3c18 	ldr.w	r3, [r3, #-24]
 801771c:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 801771e:	7ffb      	ldrb	r3, [r7, #31]
 8017720:	3301      	adds	r3, #1
 8017722:	77fb      	strb	r3, [r7, #31]
 8017724:	7ffb      	ldrb	r3, [r7, #31]
 8017726:	2b04      	cmp	r3, #4
 8017728:	d9ea      	bls.n	8017700 <MENU_Init+0x2d8>

	hmenu->pages[1].properties[1].name = AllocateString("INT. R");
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	68db      	ldr	r3, [r3, #12]
 801772e:	330c      	adds	r3, #12
 8017730:	689b      	ldr	r3, [r3, #8]
 8017732:	f103 040c 	add.w	r4, r3, #12
 8017736:	4864      	ldr	r0, [pc, #400]	@ (80178c8 <MENU_Init+0x4a0>)
 8017738:	f7ff fe2c 	bl	8017394 <AllocateString>
 801773c:	4603      	mov	r3, r0
 801773e:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].packet_byte = 4;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	68db      	ldr	r3, [r3, #12]
 8017744:	330c      	adds	r3, #12
 8017746:	689b      	ldr	r3, [r3, #8]
 8017748:	330c      	adds	r3, #12
 801774a:	2204      	movs	r2, #4
 801774c:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[1].num_options = 5;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	68db      	ldr	r3, [r3, #12]
 8017752:	330c      	adds	r3, #12
 8017754:	689b      	ldr	r3, [r3, #8]
 8017756:	330c      	adds	r3, #12
 8017758:	2205      	movs	r2, #5
 801775a:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[1].option_names = AllocateStringArr(hmenu->pages[1].properties[1].num_options);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	68db      	ldr	r3, [r3, #12]
 8017760:	330c      	adds	r3, #12
 8017762:	689b      	ldr	r3, [r3, #8]
 8017764:	330c      	adds	r3, #12
 8017766:	795a      	ldrb	r2, [r3, #5]
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	68db      	ldr	r3, [r3, #12]
 801776c:	330c      	adds	r3, #12
 801776e:	689b      	ldr	r3, [r3, #8]
 8017770:	f103 040c 	add.w	r4, r3, #12
 8017774:	4610      	mov	r0, r2
 8017776:	f7ff fe24 	bl	80173c2 <AllocateStringArr>
 801777a:	4603      	mov	r3, r0
 801777c:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 801777e:	2300      	movs	r3, #0
 8017780:	77bb      	strb	r3, [r7, #30]
 8017782:	e012      	b.n	80177aa <MENU_Init+0x382>
		hmenu->pages[1].properties[1].option_names[i] = percentStr[i];
 8017784:	7fbb      	ldrb	r3, [r7, #30]
 8017786:	687a      	ldr	r2, [r7, #4]
 8017788:	68d2      	ldr	r2, [r2, #12]
 801778a:	320c      	adds	r2, #12
 801778c:	6892      	ldr	r2, [r2, #8]
 801778e:	320c      	adds	r2, #12
 8017790:	6891      	ldr	r1, [r2, #8]
 8017792:	7fba      	ldrb	r2, [r7, #30]
 8017794:	0092      	lsls	r2, r2, #2
 8017796:	440a      	add	r2, r1
 8017798:	009b      	lsls	r3, r3, #2
 801779a:	3320      	adds	r3, #32
 801779c:	443b      	add	r3, r7
 801779e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80177a2:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 80177a4:	7fbb      	ldrb	r3, [r7, #30]
 80177a6:	3301      	adds	r3, #1
 80177a8:	77bb      	strb	r3, [r7, #30]
 80177aa:	7fbb      	ldrb	r3, [r7, #30]
 80177ac:	2b04      	cmp	r3, #4
 80177ae:	d9e9      	bls.n	8017784 <MENU_Init+0x35c>

	hmenu->pages[1].properties[2].name = AllocateString("INT. G");
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	68db      	ldr	r3, [r3, #12]
 80177b4:	330c      	adds	r3, #12
 80177b6:	689b      	ldr	r3, [r3, #8]
 80177b8:	f103 0418 	add.w	r4, r3, #24
 80177bc:	4843      	ldr	r0, [pc, #268]	@ (80178cc <MENU_Init+0x4a4>)
 80177be:	f7ff fde9 	bl	8017394 <AllocateString>
 80177c2:	4603      	mov	r3, r0
 80177c4:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].packet_byte = 5;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	68db      	ldr	r3, [r3, #12]
 80177ca:	330c      	adds	r3, #12
 80177cc:	689b      	ldr	r3, [r3, #8]
 80177ce:	3318      	adds	r3, #24
 80177d0:	2205      	movs	r2, #5
 80177d2:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[2].num_options = 5;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	68db      	ldr	r3, [r3, #12]
 80177d8:	330c      	adds	r3, #12
 80177da:	689b      	ldr	r3, [r3, #8]
 80177dc:	3318      	adds	r3, #24
 80177de:	2205      	movs	r2, #5
 80177e0:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[2].option_names = AllocateStringArr(hmenu->pages[1].properties[2].num_options);
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	68db      	ldr	r3, [r3, #12]
 80177e6:	330c      	adds	r3, #12
 80177e8:	689b      	ldr	r3, [r3, #8]
 80177ea:	3318      	adds	r3, #24
 80177ec:	795a      	ldrb	r2, [r3, #5]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	68db      	ldr	r3, [r3, #12]
 80177f2:	330c      	adds	r3, #12
 80177f4:	689b      	ldr	r3, [r3, #8]
 80177f6:	f103 0418 	add.w	r4, r3, #24
 80177fa:	4610      	mov	r0, r2
 80177fc:	f7ff fde1 	bl	80173c2 <AllocateStringArr>
 8017800:	4603      	mov	r3, r0
 8017802:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 8017804:	2300      	movs	r3, #0
 8017806:	777b      	strb	r3, [r7, #29]
 8017808:	e012      	b.n	8017830 <MENU_Init+0x408>
		hmenu->pages[1].properties[2].option_names[i] = percentStr[i];
 801780a:	7f7b      	ldrb	r3, [r7, #29]
 801780c:	687a      	ldr	r2, [r7, #4]
 801780e:	68d2      	ldr	r2, [r2, #12]
 8017810:	320c      	adds	r2, #12
 8017812:	6892      	ldr	r2, [r2, #8]
 8017814:	3218      	adds	r2, #24
 8017816:	6891      	ldr	r1, [r2, #8]
 8017818:	7f7a      	ldrb	r2, [r7, #29]
 801781a:	0092      	lsls	r2, r2, #2
 801781c:	440a      	add	r2, r1
 801781e:	009b      	lsls	r3, r3, #2
 8017820:	3320      	adds	r3, #32
 8017822:	443b      	add	r3, r7
 8017824:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8017828:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 801782a:	7f7b      	ldrb	r3, [r7, #29]
 801782c:	3301      	adds	r3, #1
 801782e:	777b      	strb	r3, [r7, #29]
 8017830:	7f7b      	ldrb	r3, [r7, #29]
 8017832:	2b04      	cmp	r3, #4
 8017834:	d9e9      	bls.n	801780a <MENU_Init+0x3e2>

	hmenu->pages[1].properties[3].name = AllocateString("INT. B");
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	68db      	ldr	r3, [r3, #12]
 801783a:	330c      	adds	r3, #12
 801783c:	689b      	ldr	r3, [r3, #8]
 801783e:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8017842:	4823      	ldr	r0, [pc, #140]	@ (80178d0 <MENU_Init+0x4a8>)
 8017844:	f7ff fda6 	bl	8017394 <AllocateString>
 8017848:	4603      	mov	r3, r0
 801784a:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].packet_byte = 6;
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	68db      	ldr	r3, [r3, #12]
 8017850:	330c      	adds	r3, #12
 8017852:	689b      	ldr	r3, [r3, #8]
 8017854:	3324      	adds	r3, #36	@ 0x24
 8017856:	2206      	movs	r2, #6
 8017858:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[3].num_options = 5;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	68db      	ldr	r3, [r3, #12]
 801785e:	330c      	adds	r3, #12
 8017860:	689b      	ldr	r3, [r3, #8]
 8017862:	3324      	adds	r3, #36	@ 0x24
 8017864:	2205      	movs	r2, #5
 8017866:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[3].option_names = AllocateStringArr(hmenu->pages[1].properties[3].num_options);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	68db      	ldr	r3, [r3, #12]
 801786c:	330c      	adds	r3, #12
 801786e:	689b      	ldr	r3, [r3, #8]
 8017870:	3324      	adds	r3, #36	@ 0x24
 8017872:	795a      	ldrb	r2, [r3, #5]
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	68db      	ldr	r3, [r3, #12]
 8017878:	330c      	adds	r3, #12
 801787a:	689b      	ldr	r3, [r3, #8]
 801787c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8017880:	4610      	mov	r0, r2
 8017882:	f7ff fd9e 	bl	80173c2 <AllocateStringArr>
 8017886:	4603      	mov	r3, r0
 8017888:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 801788a:	2300      	movs	r3, #0
 801788c:	773b      	strb	r3, [r7, #28]
 801788e:	e012      	b.n	80178b6 <MENU_Init+0x48e>
		hmenu->pages[1].properties[3].option_names[i] = percentStr[i];
 8017890:	7f3b      	ldrb	r3, [r7, #28]
 8017892:	687a      	ldr	r2, [r7, #4]
 8017894:	68d2      	ldr	r2, [r2, #12]
 8017896:	320c      	adds	r2, #12
 8017898:	6892      	ldr	r2, [r2, #8]
 801789a:	3224      	adds	r2, #36	@ 0x24
 801789c:	6891      	ldr	r1, [r2, #8]
 801789e:	7f3a      	ldrb	r2, [r7, #28]
 80178a0:	0092      	lsls	r2, r2, #2
 80178a2:	440a      	add	r2, r1
 80178a4:	009b      	lsls	r3, r3, #2
 80178a6:	3320      	adds	r3, #32
 80178a8:	443b      	add	r3, r7
 80178aa:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80178ae:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 80178b0:	7f3b      	ldrb	r3, [r7, #28]
 80178b2:	3301      	adds	r3, #1
 80178b4:	773b      	strb	r3, [r7, #28]
 80178b6:	7f3b      	ldrb	r3, [r7, #28]
 80178b8:	2b04      	cmp	r3, #4
 80178ba:	d9e9      	bls.n	8017890 <MENU_Init+0x468>

	return 0;
 80178bc:	2300      	movs	r3, #0
}
 80178be:	4618      	mov	r0, r3
 80178c0:	3724      	adds	r7, #36	@ 0x24
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd90      	pop	{r4, r7, pc}
 80178c6:	bf00      	nop
 80178c8:	0801b2b8 	.word	0x0801b2b8
 80178cc:	0801b2c0 	.word	0x0801b2c0
 80178d0:	0801b2c8 	.word	0x0801b2c8

080178d4 <MENU_Draw>:

uint8_t MENU_Draw(Menu_HandleTypeDef *hmenu, uint32_t delta_t) {
 80178d4:	b5b0      	push	{r4, r5, r7, lr}
 80178d6:	b08c      	sub	sp, #48	@ 0x30
 80178d8:	af02      	add	r7, sp, #8
 80178da:	6078      	str	r0, [r7, #4]
 80178dc:	6039      	str	r1, [r7, #0]
	// Do the animations
	if (hmenu->page_anim != 0xFF)
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	7d5b      	ldrb	r3, [r3, #21]
 80178e2:	2bff      	cmp	r3, #255	@ 0xff
 80178e4:	d005      	beq.n	80178f2 <MENU_Draw+0x1e>
		hmenu->page_anim++;;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	7d5b      	ldrb	r3, [r3, #21]
 80178ea:	3301      	adds	r3, #1
 80178ec:	b2da      	uxtb	r2, r3
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	755a      	strb	r2, [r3, #21]

	if (hmenu->property_anim != 0xFF)
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	7e1b      	ldrb	r3, [r3, #24]
 80178f6:	2bff      	cmp	r3, #255	@ 0xff
 80178f8:	d005      	beq.n	8017906 <MENU_Draw+0x32>
		hmenu->property_anim++;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	7e1b      	ldrb	r3, [r3, #24]
 80178fe:	3301      	adds	r3, #1
 8017900:	b2da      	uxtb	r2, r3
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	761a      	strb	r2, [r3, #24]

	Menu_Page 	  activePage = hmenu->pages[hmenu->current_page];
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	68da      	ldr	r2, [r3, #12]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	7d1b      	ldrb	r3, [r3, #20]
 801790e:	4619      	mov	r1, r3
 8017910:	460b      	mov	r3, r1
 8017912:	005b      	lsls	r3, r3, #1
 8017914:	440b      	add	r3, r1
 8017916:	009b      	lsls	r3, r3, #2
 8017918:	441a      	add	r2, r3
 801791a:	f107 0314 	add.w	r3, r7, #20
 801791e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017920:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Menu_Property activeProperty = activePage.properties[hmenu->current_property];
 8017924:	69fa      	ldr	r2, [r7, #28]
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	7d9b      	ldrb	r3, [r3, #22]
 801792a:	4619      	mov	r1, r3
 801792c:	460b      	mov	r3, r1
 801792e:	005b      	lsls	r3, r3, #1
 8017930:	440b      	add	r3, r1
 8017932:	009b      	lsls	r3, r3, #2
 8017934:	441a      	add	r2, r3
 8017936:	f107 0308 	add.w	r3, r7, #8
 801793a:	ca07      	ldmia	r2, {r0, r1, r2}
 801793c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Draw the title on the left
	hmenu->ssdL_handle->str_cursor = (128 - strlen(activePage.title)*6);
 8017940:	697b      	ldr	r3, [r7, #20]
 8017942:	4618      	mov	r0, r3
 8017944:	f7e8 fccc 	bl	80002e0 <strlen>
 8017948:	4603      	mov	r3, r0
 801794a:	b29b      	uxth	r3, r3
 801794c:	461a      	mov	r2, r3
 801794e:	0052      	lsls	r2, r2, #1
 8017950:	4413      	add	r3, r2
 8017952:	005b      	lsls	r3, r3, #1
 8017954:	b29a      	uxth	r2, r3
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	f1c2 0280 	rsb	r2, r2, #128	@ 0x80
 801795e:	b292      	uxth	r2, r2
 8017960:	821a      	strh	r2, [r3, #16]
	MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	6819      	ldr	r1, [r3, #0]
 8017966:	697a      	ldr	r2, [r7, #20]
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	7d5b      	ldrb	r3, [r3, #21]
 801796c:	2000      	movs	r0, #0
 801796e:	9000      	str	r0, [sp, #0]
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f000 f9ca 	bl	8017d0a <MENU_AnimateString>
			activePage.title,
			hmenu->page_anim, 0);


	for (uint8_t i = 0; i < activePage.num_properties; i++) {
 8017976:	2300      	movs	r3, #0
 8017978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801797c:	e0bf      	b.n	8017afe <MENU_Draw+0x22a>
		// Draw the properties
		// Compute offset using property anim
		hmenu->ssdL_handle->str_cursor = 16 + (2+i)*128;
 801797e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017982:	3302      	adds	r3, #2
 8017984:	b29b      	uxth	r3, r3
 8017986:	01db      	lsls	r3, r3, #7
 8017988:	b29a      	uxth	r2, r3
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	3210      	adds	r2, #16
 8017990:	b292      	uxth	r2, r2
 8017992:	821a      	strh	r2, [r3, #16]
		if (i == hmenu->current_property) {
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	7d9b      	ldrb	r3, [r3, #22]
 8017998:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801799c:	429a      	cmp	r2, r3
 801799e:	d112      	bne.n	80179c6 <MENU_Draw+0xf2>
			uint8_t num_bars = hmenu->property_anim;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	7e1b      	ldrb	r3, [r3, #24]
 80179a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (num_bars > 3) num_bars = 3;
 80179a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80179ac:	2b03      	cmp	r3, #3
 80179ae:	d902      	bls.n	80179b6 <MENU_Draw+0xe2>
 80179b0:	2303      	movs	r3, #3
 80179b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			SSD1306_DrawString(hmenu->ssdL_handle, ">> ", num_bars);
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80179be:	4978      	ldr	r1, [pc, #480]	@ (8017ba0 <MENU_Draw+0x2cc>)
 80179c0:	4618      	mov	r0, r3
 80179c2:	f7eb fa87 	bl	8002ed4 <SSD1306_DrawString>
		}

		// De-animate the previous property
		if (i == hmenu->last_property && hmenu->property_anim/2 <= 2) {
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	7ddb      	ldrb	r3, [r3, #23]
 80179ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d11a      	bne.n	8017a08 <MENU_Draw+0x134>
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	7e1b      	ldrb	r3, [r3, #24]
 80179d6:	2b05      	cmp	r3, #5
 80179d8:	d816      	bhi.n	8017a08 <MENU_Draw+0x134>
			uint8_t num_bars = 2 - hmenu->property_anim/2;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	7e1b      	ldrb	r3, [r3, #24]
 80179de:	085b      	lsrs	r3, r3, #1
 80179e0:	b2db      	uxtb	r3, r3
 80179e2:	f1c3 0302 	rsb	r3, r3, #2
 80179e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (num_bars > 2) num_bars = 2;
 80179ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80179ee:	2b02      	cmp	r3, #2
 80179f0:	d902      	bls.n	80179f8 <MENU_Draw+0x124>
 80179f2:	2302      	movs	r3, #2
 80179f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			SSD1306_DrawString(hmenu->ssdL_handle, ">> ", num_bars);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017a00:	4967      	ldr	r1, [pc, #412]	@ (8017ba0 <MENU_Draw+0x2cc>)
 8017a02:	4618      	mov	r0, r3
 8017a04:	f7eb fa66 	bl	8002ed4 <SSD1306_DrawString>
		}

		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	6818      	ldr	r0, [r3, #0]
				activePage.properties[i].name,
 8017a0c:	69f9      	ldr	r1, [r7, #28]
 8017a0e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a12:	4613      	mov	r3, r2
 8017a14:	005b      	lsls	r3, r3, #1
 8017a16:	4413      	add	r3, r2
 8017a18:	009b      	lsls	r3, r3, #2
 8017a1a:	440b      	add	r3, r1
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017a1c:	681a      	ldr	r2, [r3, #0]
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	7d59      	ldrb	r1, [r3, #21]
 8017a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017a26:	3303      	adds	r3, #3
 8017a28:	b2db      	uxtb	r3, r3
 8017a2a:	005b      	lsls	r3, r3, #1
 8017a2c:	b2db      	uxtb	r3, r3
 8017a2e:	9300      	str	r3, [sp, #0]
 8017a30:	460b      	mov	r3, r1
 8017a32:	4601      	mov	r1, r0
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f000 f968 	bl	8017d0a <MENU_AnimateString>
				hmenu->page_anim, 6+i*2);

		// Draw the values these properties have
		uint8_t op_value = hmenu->state_packet[activePage.properties[i].packet_byte];
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	6919      	ldr	r1, [r3, #16]
 8017a3e:	69f8      	ldr	r0, [r7, #28]
 8017a40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a44:	4613      	mov	r3, r2
 8017a46:	005b      	lsls	r3, r3, #1
 8017a48:	4413      	add	r3, r2
 8017a4a:	009b      	lsls	r3, r3, #2
 8017a4c:	4403      	add	r3, r0
 8017a4e:	791b      	ldrb	r3, [r3, #4]
 8017a50:	440b      	add	r3, r1
 8017a52:	781b      	ldrb	r3, [r3, #0]
 8017a54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if (op_value < activePage.properties[i].num_options) {
 8017a58:	69f9      	ldr	r1, [r7, #28]
 8017a5a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a5e:	4613      	mov	r3, r2
 8017a60:	005b      	lsls	r3, r3, #1
 8017a62:	4413      	add	r3, r2
 8017a64:	009b      	lsls	r3, r3, #2
 8017a66:	440b      	add	r3, r1
 8017a68:	795b      	ldrb	r3, [r3, #5]
 8017a6a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d240      	bcs.n	8017af4 <MENU_Draw+0x220>
			hmenu->ssdL_handle->str_cursor = (3+i)*128 - strlen(activePage.properties[i].option_names[op_value])*6;
 8017a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017a76:	3303      	adds	r3, #3
 8017a78:	b29b      	uxth	r3, r3
 8017a7a:	01db      	lsls	r3, r3, #7
 8017a7c:	b29c      	uxth	r4, r3
 8017a7e:	69f9      	ldr	r1, [r7, #28]
 8017a80:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a84:	4613      	mov	r3, r2
 8017a86:	005b      	lsls	r3, r3, #1
 8017a88:	4413      	add	r3, r2
 8017a8a:	009b      	lsls	r3, r3, #2
 8017a8c:	440b      	add	r3, r1
 8017a8e:	689a      	ldr	r2, [r3, #8]
 8017a90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017a94:	009b      	lsls	r3, r3, #2
 8017a96:	4413      	add	r3, r2
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7e8 fc20 	bl	80002e0 <strlen>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	b29b      	uxth	r3, r3
 8017aa4:	461a      	mov	r2, r3
 8017aa6:	0052      	lsls	r2, r2, #1
 8017aa8:	4413      	add	r3, r2
 8017aaa:	005b      	lsls	r3, r3, #1
 8017aac:	b29a      	uxth	r2, r3
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	1aa2      	subs	r2, r4, r2
 8017ab4:	b292      	uxth	r2, r2
 8017ab6:	821a      	strh	r2, [r3, #16]
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	6818      	ldr	r0, [r3, #0]
					activePage.properties[i].option_names[op_value],
 8017abc:	69f9      	ldr	r1, [r7, #28]
 8017abe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017ac2:	4613      	mov	r3, r2
 8017ac4:	005b      	lsls	r3, r3, #1
 8017ac6:	4413      	add	r3, r2
 8017ac8:	009b      	lsls	r3, r3, #2
 8017aca:	440b      	add	r3, r1
 8017acc:	689a      	ldr	r2, [r3, #8]
 8017ace:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017ad2:	009b      	lsls	r3, r3, #2
 8017ad4:	4413      	add	r3, r2
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017ad6:	681a      	ldr	r2, [r3, #0]
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	7d59      	ldrb	r1, [r3, #21]
 8017adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ae0:	3303      	adds	r3, #3
 8017ae2:	b2db      	uxtb	r3, r3
 8017ae4:	005b      	lsls	r3, r3, #1
 8017ae6:	b2db      	uxtb	r3, r3
 8017ae8:	9300      	str	r3, [sp, #0]
 8017aea:	460b      	mov	r3, r1
 8017aec:	4601      	mov	r1, r0
 8017aee:	6878      	ldr	r0, [r7, #4]
 8017af0:	f000 f90b 	bl	8017d0a <MENU_AnimateString>
	for (uint8_t i = 0; i < activePage.num_properties; i++) {
 8017af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017af8:	3301      	adds	r3, #1
 8017afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017afe:	7e3b      	ldrb	r3, [r7, #24]
 8017b00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017b04:	429a      	cmp	r2, r3
 8017b06:	f4ff af3a 	bcc.w	801797e <MENU_Draw+0xaa>
					hmenu->page_anim, 6+i*2);
		}
	}

	// Draw the selected property on the RIGHT
	hmenu->ssdR_handle->str_cursor = 0;
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	685b      	ldr	r3, [r3, #4]
 8017b0e:	2200      	movs	r2, #0
 8017b10:	821a      	strh	r2, [r3, #16]
	MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6859      	ldr	r1, [r3, #4]
 8017b16:	68ba      	ldr	r2, [r7, #8]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	7e1b      	ldrb	r3, [r3, #24]
 8017b1c:	2001      	movs	r0, #1
 8017b1e:	9000      	str	r0, [sp, #0]
 8017b20:	6878      	ldr	r0, [r7, #4]
 8017b22:	f000 f8f2 	bl	8017d0a <MENU_AnimateString>
				activeProperty.name,
				hmenu->property_anim, 1);

	// Draw the selected option on the right
	uint8_t op_value = hmenu->state_packet[activeProperty.packet_byte];
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	691b      	ldr	r3, [r3, #16]
 8017b2a:	7b3a      	ldrb	r2, [r7, #12]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	781b      	ldrb	r3, [r3, #0]
 8017b30:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if (op_value < activeProperty.num_options) {
 8017b34:	7b7b      	ldrb	r3, [r7, #13]
 8017b36:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d22a      	bcs.n	8017b94 <MENU_Draw+0x2c0>
		hmenu->ssdR_handle->str_cursor = 2*128;
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	685b      	ldr	r3, [r3, #4]
 8017b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017b46:	821a      	strh	r2, [r3, #16]
		SSD1306_DrawString(hmenu->ssdR_handle, "> ", 2);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	2202      	movs	r2, #2
 8017b4e:	4915      	ldr	r1, [pc, #84]	@ (8017ba4 <MENU_Draw+0x2d0>)
 8017b50:	4618      	mov	r0, r3
 8017b52:	f7eb f9bf 	bl	8002ed4 <SSD1306_DrawString>
		SSD1306_DrawString(hmenu->ssdR_handle, activeProperty.option_names[op_value], strlen(activeProperty.option_names[op_value]));
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	685c      	ldr	r4, [r3, #4]
 8017b5a:	693a      	ldr	r2, [r7, #16]
 8017b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017b60:	009b      	lsls	r3, r3, #2
 8017b62:	4413      	add	r3, r2
 8017b64:	681d      	ldr	r5, [r3, #0]
 8017b66:	693a      	ldr	r2, [r7, #16]
 8017b68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017b6c:	009b      	lsls	r3, r3, #2
 8017b6e:	4413      	add	r3, r2
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7e8 fbb4 	bl	80002e0 <strlen>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	b2db      	uxtb	r3, r3
 8017b7c:	461a      	mov	r2, r3
 8017b7e:	4629      	mov	r1, r5
 8017b80:	4620      	mov	r0, r4
 8017b82:	f7eb f9a7 	bl	8002ed4 <SSD1306_DrawString>
		SSD1306_DrawString(hmenu->ssdR_handle, " <", 2);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	685b      	ldr	r3, [r3, #4]
 8017b8a:	2202      	movs	r2, #2
 8017b8c:	4906      	ldr	r1, [pc, #24]	@ (8017ba8 <MENU_Draw+0x2d4>)
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f7eb f9a0 	bl	8002ed4 <SSD1306_DrawString>
	}

}
 8017b94:	bf00      	nop
 8017b96:	4618      	mov	r0, r3
 8017b98:	3728      	adds	r7, #40	@ 0x28
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8017b9e:	bf00      	nop
 8017ba0:	0801b2d0 	.word	0x0801b2d0
 8017ba4:	0801b2d4 	.word	0x0801b2d4
 8017ba8:	0801b2d8 	.word	0x0801b2d8

08017bac <MENU_ParseInput>:

void MENU_ParseInput(Menu_HandleTypeDef *hmenu, uint8_t inputs[4]) {
 8017bac:	b480      	push	{r7}
 8017bae:	b087      	sub	sp, #28
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	6039      	str	r1, [r7, #0]
	if (inputs[0]) {
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d01d      	beq.n	8017bfa <MENU_ParseInput+0x4e>
		if (hmenu->current_page == 0) {
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	7d1b      	ldrb	r3, [r3, #20]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d106      	bne.n	8017bd4 <MENU_ParseInput+0x28>
			hmenu->current_page = hmenu->num_pages - 1;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	7a1b      	ldrb	r3, [r3, #8]
 8017bca:	3b01      	subs	r3, #1
 8017bcc:	b2da      	uxtb	r2, r3
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	751a      	strb	r2, [r3, #20]
 8017bd2:	e005      	b.n	8017be0 <MENU_ParseInput+0x34>
		} else {
			hmenu->current_page--;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	7d1b      	ldrb	r3, [r3, #20]
 8017bd8:	3b01      	subs	r3, #1
 8017bda:	b2da      	uxtb	r2, r3
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	751a      	strb	r2, [r3, #20]
		}
		hmenu->page_anim = 0;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	2200      	movs	r2, #0
 8017be4:	755a      	strb	r2, [r3, #21]
		hmenu->property_anim = 0;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	2200      	movs	r2, #0
 8017bea:	761a      	strb	r2, [r3, #24]
		hmenu->current_property = 0;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2200      	movs	r2, #0
 8017bf0:	759a      	strb	r2, [r3, #22]
		hmenu->last_property = 0xFF;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	22ff      	movs	r2, #255	@ 0xff
 8017bf6:	75da      	strb	r2, [r3, #23]
 8017bf8:	e022      	b.n	8017c40 <MENU_ParseInput+0x94>
	} else if (inputs[1]) {
 8017bfa:	683b      	ldr	r3, [r7, #0]
 8017bfc:	3301      	adds	r3, #1
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d01d      	beq.n	8017c40 <MENU_ParseInput+0x94>
		if (hmenu->current_page == hmenu->num_pages - 1) {
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	7d1b      	ldrb	r3, [r3, #20]
 8017c08:	461a      	mov	r2, r3
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	7a1b      	ldrb	r3, [r3, #8]
 8017c0e:	3b01      	subs	r3, #1
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d103      	bne.n	8017c1c <MENU_ParseInput+0x70>
			hmenu->current_page = 0;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	2200      	movs	r2, #0
 8017c18:	751a      	strb	r2, [r3, #20]
 8017c1a:	e005      	b.n	8017c28 <MENU_ParseInput+0x7c>
		} else {
			hmenu->current_page++;
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	7d1b      	ldrb	r3, [r3, #20]
 8017c20:	3301      	adds	r3, #1
 8017c22:	b2da      	uxtb	r2, r3
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	751a      	strb	r2, [r3, #20]
		}
		hmenu->page_anim = 0;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	755a      	strb	r2, [r3, #21]
		hmenu->property_anim = 0;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2200      	movs	r2, #0
 8017c32:	761a      	strb	r2, [r3, #24]
		hmenu->current_property = 0;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2200      	movs	r2, #0
 8017c38:	759a      	strb	r2, [r3, #22]
		hmenu->last_property = 0xFF;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	22ff      	movs	r2, #255	@ 0xff
 8017c3e:	75da      	strb	r2, [r3, #23]
	}

	if (inputs[3]) {
 8017c40:	683b      	ldr	r3, [r7, #0]
 8017c42:	3303      	adds	r3, #3
 8017c44:	781b      	ldrb	r3, [r3, #0]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d021      	beq.n	8017c8e <MENU_ParseInput+0xe2>
		hmenu->last_property = hmenu->current_property;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	7d9a      	ldrb	r2, [r3, #22]
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	75da      	strb	r2, [r3, #23]
		if (hmenu->current_property == hmenu->pages[hmenu->current_page].num_properties - 1)
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	7d9b      	ldrb	r3, [r3, #22]
 8017c56:	4618      	mov	r0, r3
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	68da      	ldr	r2, [r3, #12]
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	7d1b      	ldrb	r3, [r3, #20]
 8017c60:	4619      	mov	r1, r3
 8017c62:	460b      	mov	r3, r1
 8017c64:	005b      	lsls	r3, r3, #1
 8017c66:	440b      	add	r3, r1
 8017c68:	009b      	lsls	r3, r3, #2
 8017c6a:	4413      	add	r3, r2
 8017c6c:	791b      	ldrb	r3, [r3, #4]
 8017c6e:	3b01      	subs	r3, #1
 8017c70:	4298      	cmp	r0, r3
 8017c72:	d103      	bne.n	8017c7c <MENU_ParseInput+0xd0>
			hmenu->current_property = 0;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	2200      	movs	r2, #0
 8017c78:	759a      	strb	r2, [r3, #22]
 8017c7a:	e005      	b.n	8017c88 <MENU_ParseInput+0xdc>
		else
			hmenu->current_property++;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	7d9b      	ldrb	r3, [r3, #22]
 8017c80:	3301      	adds	r3, #1
 8017c82:	b2da      	uxtb	r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	759a      	strb	r2, [r3, #22]
		hmenu->property_anim = 0;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	761a      	strb	r2, [r3, #24]
	}

	if (inputs[2]) {
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	3302      	adds	r3, #2
 8017c92:	781b      	ldrb	r3, [r3, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d032      	beq.n	8017cfe <MENU_ParseInput+0x152>
		Menu_Property activeProperty = hmenu->pages[hmenu->current_page].properties[hmenu->current_property];
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	68da      	ldr	r2, [r3, #12]
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	7d1b      	ldrb	r3, [r3, #20]
 8017ca0:	4619      	mov	r1, r3
 8017ca2:	460b      	mov	r3, r1
 8017ca4:	005b      	lsls	r3, r3, #1
 8017ca6:	440b      	add	r3, r1
 8017ca8:	009b      	lsls	r3, r3, #2
 8017caa:	4413      	add	r3, r2
 8017cac:	689a      	ldr	r2, [r3, #8]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	7d9b      	ldrb	r3, [r3, #22]
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	460b      	mov	r3, r1
 8017cb6:	005b      	lsls	r3, r3, #1
 8017cb8:	440b      	add	r3, r1
 8017cba:	009b      	lsls	r3, r3, #2
 8017cbc:	441a      	add	r2, r3
 8017cbe:	f107 0308 	add.w	r3, r7, #8
 8017cc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8017cc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		uint8_t propertyByte = activeProperty.packet_byte;
 8017cc8:	7b3b      	ldrb	r3, [r7, #12]
 8017cca:	75fb      	strb	r3, [r7, #23]
		if (hmenu->state_packet[propertyByte] == activeProperty.num_options - 1)
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	691a      	ldr	r2, [r3, #16]
 8017cd0:	7dfb      	ldrb	r3, [r7, #23]
 8017cd2:	4413      	add	r3, r2
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	461a      	mov	r2, r3
 8017cd8:	7b7b      	ldrb	r3, [r7, #13]
 8017cda:	3b01      	subs	r3, #1
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	d106      	bne.n	8017cee <MENU_ParseInput+0x142>
			hmenu->state_packet[propertyByte] = 0;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	691a      	ldr	r2, [r3, #16]
 8017ce4:	7dfb      	ldrb	r3, [r7, #23]
 8017ce6:	4413      	add	r3, r2
 8017ce8:	2200      	movs	r2, #0
 8017cea:	701a      	strb	r2, [r3, #0]
		else
			hmenu->state_packet[propertyByte]++;
	}
}
 8017cec:	e007      	b.n	8017cfe <MENU_ParseInput+0x152>
			hmenu->state_packet[propertyByte]++;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	691a      	ldr	r2, [r3, #16]
 8017cf2:	7dfb      	ldrb	r3, [r7, #23]
 8017cf4:	4413      	add	r3, r2
 8017cf6:	781a      	ldrb	r2, [r3, #0]
 8017cf8:	3201      	adds	r2, #1
 8017cfa:	b2d2      	uxtb	r2, r2
 8017cfc:	701a      	strb	r2, [r3, #0]
}
 8017cfe:	bf00      	nop
 8017d00:	371c      	adds	r7, #28
 8017d02:	46bd      	mov	sp, r7
 8017d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d08:	4770      	bx	lr

08017d0a <MENU_AnimateString>:

void MENU_AnimateString(Menu_HandleTypeDef *hmenu, SSD1306_HandleTypeDef *hssd, uint8_t *str, uint8_t anim_val, uint8_t anim_start) {
 8017d0a:	b580      	push	{r7, lr}
 8017d0c:	b086      	sub	sp, #24
 8017d0e:	af00      	add	r7, sp, #0
 8017d10:	60f8      	str	r0, [r7, #12]
 8017d12:	60b9      	str	r1, [r7, #8]
 8017d14:	607a      	str	r2, [r7, #4]
 8017d16:	70fb      	strb	r3, [r7, #3]
	if (hmenu->page_anim < anim_start) return;
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	7d5b      	ldrb	r3, [r3, #21]
 8017d1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d817      	bhi.n	8017d54 <MENU_AnimateString+0x4a>
	uint8_t min_len = strlen(str);
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f7e8 fadb 	bl	80002e0 <strlen>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	75fb      	strb	r3, [r7, #23]
	if (min_len > anim_val - anim_start)
 8017d2e:	7dfa      	ldrb	r2, [r7, #23]
 8017d30:	78f9      	ldrb	r1, [r7, #3]
 8017d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017d36:	1acb      	subs	r3, r1, r3
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	dd04      	ble.n	8017d46 <MENU_AnimateString+0x3c>
		min_len = anim_val - anim_start;
 8017d3c:	78fa      	ldrb	r2, [r7, #3]
 8017d3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017d42:	1ad3      	subs	r3, r2, r3
 8017d44:	75fb      	strb	r3, [r7, #23]

	SSD1306_DrawString(hssd, str, min_len);
 8017d46:	7dfb      	ldrb	r3, [r7, #23]
 8017d48:	461a      	mov	r2, r3
 8017d4a:	6879      	ldr	r1, [r7, #4]
 8017d4c:	68b8      	ldr	r0, [r7, #8]
 8017d4e:	f7eb f8c1 	bl	8002ed4 <SSD1306_DrawString>
 8017d52:	e000      	b.n	8017d56 <MENU_AnimateString+0x4c>
	if (hmenu->page_anim < anim_start) return;
 8017d54:	bf00      	nop
}
 8017d56:	3718      	adds	r7, #24
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	bd80      	pop	{r7, pc}

08017d5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b084      	sub	sp, #16
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
 8017d64:	460b      	mov	r3, r1
 8017d66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017d68:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8017d6c:	f002 fd08 	bl	801a780 <USBD_static_malloc>
 8017d70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d109      	bne.n	8017d8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	32b0      	adds	r2, #176	@ 0xb0
 8017d82:	2100      	movs	r1, #0
 8017d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8017d88:	2302      	movs	r3, #2
 8017d8a:	e0d4      	b.n	8017f36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8017d8c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8017d90:	2100      	movs	r1, #0
 8017d92:	68f8      	ldr	r0, [r7, #12]
 8017d94:	f002 fe10 	bl	801a9b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	32b0      	adds	r2, #176	@ 0xb0
 8017da2:	68f9      	ldr	r1, [r7, #12]
 8017da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	32b0      	adds	r2, #176	@ 0xb0
 8017db2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	7c1b      	ldrb	r3, [r3, #16]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d138      	bne.n	8017e36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8017f40 <USBD_CDC_Init+0x1e4>)
 8017dc6:	7819      	ldrb	r1, [r3, #0]
 8017dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017dcc:	2202      	movs	r2, #2
 8017dce:	6878      	ldr	r0, [r7, #4]
 8017dd0:	f002 fbb3 	bl	801a53a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8017f40 <USBD_CDC_Init+0x1e4>)
 8017dd6:	781b      	ldrb	r3, [r3, #0]
 8017dd8:	f003 020f 	and.w	r2, r3, #15
 8017ddc:	6879      	ldr	r1, [r7, #4]
 8017dde:	4613      	mov	r3, r2
 8017de0:	009b      	lsls	r3, r3, #2
 8017de2:	4413      	add	r3, r2
 8017de4:	009b      	lsls	r3, r3, #2
 8017de6:	440b      	add	r3, r1
 8017de8:	3324      	adds	r3, #36	@ 0x24
 8017dea:	2201      	movs	r2, #1
 8017dec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017dee:	4b55      	ldr	r3, [pc, #340]	@ (8017f44 <USBD_CDC_Init+0x1e8>)
 8017df0:	7819      	ldrb	r1, [r3, #0]
 8017df2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017df6:	2202      	movs	r2, #2
 8017df8:	6878      	ldr	r0, [r7, #4]
 8017dfa:	f002 fb9e 	bl	801a53a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017dfe:	4b51      	ldr	r3, [pc, #324]	@ (8017f44 <USBD_CDC_Init+0x1e8>)
 8017e00:	781b      	ldrb	r3, [r3, #0]
 8017e02:	f003 020f 	and.w	r2, r3, #15
 8017e06:	6879      	ldr	r1, [r7, #4]
 8017e08:	4613      	mov	r3, r2
 8017e0a:	009b      	lsls	r3, r3, #2
 8017e0c:	4413      	add	r3, r2
 8017e0e:	009b      	lsls	r3, r3, #2
 8017e10:	440b      	add	r3, r1
 8017e12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017e16:	2201      	movs	r2, #1
 8017e18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8017f48 <USBD_CDC_Init+0x1ec>)
 8017e1c:	781b      	ldrb	r3, [r3, #0]
 8017e1e:	f003 020f 	and.w	r2, r3, #15
 8017e22:	6879      	ldr	r1, [r7, #4]
 8017e24:	4613      	mov	r3, r2
 8017e26:	009b      	lsls	r3, r3, #2
 8017e28:	4413      	add	r3, r2
 8017e2a:	009b      	lsls	r3, r3, #2
 8017e2c:	440b      	add	r3, r1
 8017e2e:	3326      	adds	r3, #38	@ 0x26
 8017e30:	2210      	movs	r2, #16
 8017e32:	801a      	strh	r2, [r3, #0]
 8017e34:	e035      	b.n	8017ea2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017e36:	4b42      	ldr	r3, [pc, #264]	@ (8017f40 <USBD_CDC_Init+0x1e4>)
 8017e38:	7819      	ldrb	r1, [r3, #0]
 8017e3a:	2340      	movs	r3, #64	@ 0x40
 8017e3c:	2202      	movs	r2, #2
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f002 fb7b 	bl	801a53a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017e44:	4b3e      	ldr	r3, [pc, #248]	@ (8017f40 <USBD_CDC_Init+0x1e4>)
 8017e46:	781b      	ldrb	r3, [r3, #0]
 8017e48:	f003 020f 	and.w	r2, r3, #15
 8017e4c:	6879      	ldr	r1, [r7, #4]
 8017e4e:	4613      	mov	r3, r2
 8017e50:	009b      	lsls	r3, r3, #2
 8017e52:	4413      	add	r3, r2
 8017e54:	009b      	lsls	r3, r3, #2
 8017e56:	440b      	add	r3, r1
 8017e58:	3324      	adds	r3, #36	@ 0x24
 8017e5a:	2201      	movs	r2, #1
 8017e5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017e5e:	4b39      	ldr	r3, [pc, #228]	@ (8017f44 <USBD_CDC_Init+0x1e8>)
 8017e60:	7819      	ldrb	r1, [r3, #0]
 8017e62:	2340      	movs	r3, #64	@ 0x40
 8017e64:	2202      	movs	r2, #2
 8017e66:	6878      	ldr	r0, [r7, #4]
 8017e68:	f002 fb67 	bl	801a53a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017e6c:	4b35      	ldr	r3, [pc, #212]	@ (8017f44 <USBD_CDC_Init+0x1e8>)
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	f003 020f 	and.w	r2, r3, #15
 8017e74:	6879      	ldr	r1, [r7, #4]
 8017e76:	4613      	mov	r3, r2
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	4413      	add	r3, r2
 8017e7c:	009b      	lsls	r3, r3, #2
 8017e7e:	440b      	add	r3, r1
 8017e80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017e84:	2201      	movs	r2, #1
 8017e86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017e88:	4b2f      	ldr	r3, [pc, #188]	@ (8017f48 <USBD_CDC_Init+0x1ec>)
 8017e8a:	781b      	ldrb	r3, [r3, #0]
 8017e8c:	f003 020f 	and.w	r2, r3, #15
 8017e90:	6879      	ldr	r1, [r7, #4]
 8017e92:	4613      	mov	r3, r2
 8017e94:	009b      	lsls	r3, r3, #2
 8017e96:	4413      	add	r3, r2
 8017e98:	009b      	lsls	r3, r3, #2
 8017e9a:	440b      	add	r3, r1
 8017e9c:	3326      	adds	r3, #38	@ 0x26
 8017e9e:	2210      	movs	r2, #16
 8017ea0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017ea2:	4b29      	ldr	r3, [pc, #164]	@ (8017f48 <USBD_CDC_Init+0x1ec>)
 8017ea4:	7819      	ldrb	r1, [r3, #0]
 8017ea6:	2308      	movs	r3, #8
 8017ea8:	2203      	movs	r2, #3
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f002 fb45 	bl	801a53a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8017eb0:	4b25      	ldr	r3, [pc, #148]	@ (8017f48 <USBD_CDC_Init+0x1ec>)
 8017eb2:	781b      	ldrb	r3, [r3, #0]
 8017eb4:	f003 020f 	and.w	r2, r3, #15
 8017eb8:	6879      	ldr	r1, [r7, #4]
 8017eba:	4613      	mov	r3, r2
 8017ebc:	009b      	lsls	r3, r3, #2
 8017ebe:	4413      	add	r3, r2
 8017ec0:	009b      	lsls	r3, r3, #2
 8017ec2:	440b      	add	r3, r1
 8017ec4:	3324      	adds	r3, #36	@ 0x24
 8017ec6:	2201      	movs	r2, #1
 8017ec8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	2200      	movs	r2, #0
 8017ece:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017ed8:	687a      	ldr	r2, [r7, #4]
 8017eda:	33b0      	adds	r3, #176	@ 0xb0
 8017edc:	009b      	lsls	r3, r3, #2
 8017ede:	4413      	add	r3, r2
 8017ee0:	685b      	ldr	r3, [r3, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	2200      	movs	r2, #0
 8017eea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d101      	bne.n	8017f04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8017f00:	2302      	movs	r3, #2
 8017f02:	e018      	b.n	8017f36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	7c1b      	ldrb	r3, [r3, #16]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d10a      	bne.n	8017f22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8017f44 <USBD_CDC_Init+0x1e8>)
 8017f0e:	7819      	ldrb	r1, [r3, #0]
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017f1a:	6878      	ldr	r0, [r7, #4]
 8017f1c:	f002 fbfc 	bl	801a718 <USBD_LL_PrepareReceive>
 8017f20:	e008      	b.n	8017f34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017f22:	4b08      	ldr	r3, [pc, #32]	@ (8017f44 <USBD_CDC_Init+0x1e8>)
 8017f24:	7819      	ldrb	r1, [r3, #0]
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017f2c:	2340      	movs	r3, #64	@ 0x40
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f002 fbf2 	bl	801a718 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017f34:	2300      	movs	r3, #0
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3710      	adds	r7, #16
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	240002d7 	.word	0x240002d7
 8017f44:	240002d8 	.word	0x240002d8
 8017f48:	240002d9 	.word	0x240002d9

08017f4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b082      	sub	sp, #8
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
 8017f54:	460b      	mov	r3, r1
 8017f56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8017f58:	4b3a      	ldr	r3, [pc, #232]	@ (8018044 <USBD_CDC_DeInit+0xf8>)
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	4619      	mov	r1, r3
 8017f5e:	6878      	ldr	r0, [r7, #4]
 8017f60:	f002 fb11 	bl	801a586 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8017f64:	4b37      	ldr	r3, [pc, #220]	@ (8018044 <USBD_CDC_DeInit+0xf8>)
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	f003 020f 	and.w	r2, r3, #15
 8017f6c:	6879      	ldr	r1, [r7, #4]
 8017f6e:	4613      	mov	r3, r2
 8017f70:	009b      	lsls	r3, r3, #2
 8017f72:	4413      	add	r3, r2
 8017f74:	009b      	lsls	r3, r3, #2
 8017f76:	440b      	add	r3, r1
 8017f78:	3324      	adds	r3, #36	@ 0x24
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8017f7e:	4b32      	ldr	r3, [pc, #200]	@ (8018048 <USBD_CDC_DeInit+0xfc>)
 8017f80:	781b      	ldrb	r3, [r3, #0]
 8017f82:	4619      	mov	r1, r3
 8017f84:	6878      	ldr	r0, [r7, #4]
 8017f86:	f002 fafe 	bl	801a586 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8017f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8018048 <USBD_CDC_DeInit+0xfc>)
 8017f8c:	781b      	ldrb	r3, [r3, #0]
 8017f8e:	f003 020f 	and.w	r2, r3, #15
 8017f92:	6879      	ldr	r1, [r7, #4]
 8017f94:	4613      	mov	r3, r2
 8017f96:	009b      	lsls	r3, r3, #2
 8017f98:	4413      	add	r3, r2
 8017f9a:	009b      	lsls	r3, r3, #2
 8017f9c:	440b      	add	r3, r1
 8017f9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8017fa6:	4b29      	ldr	r3, [pc, #164]	@ (801804c <USBD_CDC_DeInit+0x100>)
 8017fa8:	781b      	ldrb	r3, [r3, #0]
 8017faa:	4619      	mov	r1, r3
 8017fac:	6878      	ldr	r0, [r7, #4]
 8017fae:	f002 faea 	bl	801a586 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8017fb2:	4b26      	ldr	r3, [pc, #152]	@ (801804c <USBD_CDC_DeInit+0x100>)
 8017fb4:	781b      	ldrb	r3, [r3, #0]
 8017fb6:	f003 020f 	and.w	r2, r3, #15
 8017fba:	6879      	ldr	r1, [r7, #4]
 8017fbc:	4613      	mov	r3, r2
 8017fbe:	009b      	lsls	r3, r3, #2
 8017fc0:	4413      	add	r3, r2
 8017fc2:	009b      	lsls	r3, r3, #2
 8017fc4:	440b      	add	r3, r1
 8017fc6:	3324      	adds	r3, #36	@ 0x24
 8017fc8:	2200      	movs	r2, #0
 8017fca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8017fcc:	4b1f      	ldr	r3, [pc, #124]	@ (801804c <USBD_CDC_DeInit+0x100>)
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	f003 020f 	and.w	r2, r3, #15
 8017fd4:	6879      	ldr	r1, [r7, #4]
 8017fd6:	4613      	mov	r3, r2
 8017fd8:	009b      	lsls	r3, r3, #2
 8017fda:	4413      	add	r3, r2
 8017fdc:	009b      	lsls	r3, r3, #2
 8017fde:	440b      	add	r3, r1
 8017fe0:	3326      	adds	r3, #38	@ 0x26
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	32b0      	adds	r2, #176	@ 0xb0
 8017ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d01f      	beq.n	8018038 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017ffe:	687a      	ldr	r2, [r7, #4]
 8018000:	33b0      	adds	r3, #176	@ 0xb0
 8018002:	009b      	lsls	r3, r3, #2
 8018004:	4413      	add	r3, r2
 8018006:	685b      	ldr	r3, [r3, #4]
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	32b0      	adds	r2, #176	@ 0xb0
 8018016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801801a:	4618      	mov	r0, r3
 801801c:	f002 fbbe 	bl	801a79c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	32b0      	adds	r2, #176	@ 0xb0
 801802a:	2100      	movs	r1, #0
 801802c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	2200      	movs	r2, #0
 8018034:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8018038:	2300      	movs	r3, #0
}
 801803a:	4618      	mov	r0, r3
 801803c:	3708      	adds	r7, #8
 801803e:	46bd      	mov	sp, r7
 8018040:	bd80      	pop	{r7, pc}
 8018042:	bf00      	nop
 8018044:	240002d7 	.word	0x240002d7
 8018048:	240002d8 	.word	0x240002d8
 801804c:	240002d9 	.word	0x240002d9

08018050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b086      	sub	sp, #24
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	32b0      	adds	r2, #176	@ 0xb0
 8018064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018068:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801806a:	2300      	movs	r3, #0
 801806c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801806e:	2300      	movs	r3, #0
 8018070:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018072:	2300      	movs	r3, #0
 8018074:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018076:	693b      	ldr	r3, [r7, #16]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d101      	bne.n	8018080 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801807c:	2303      	movs	r3, #3
 801807e:	e0bf      	b.n	8018200 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	781b      	ldrb	r3, [r3, #0]
 8018084:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018088:	2b00      	cmp	r3, #0
 801808a:	d050      	beq.n	801812e <USBD_CDC_Setup+0xde>
 801808c:	2b20      	cmp	r3, #32
 801808e:	f040 80af 	bne.w	80181f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	88db      	ldrh	r3, [r3, #6]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d03a      	beq.n	8018110 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801809a:	683b      	ldr	r3, [r7, #0]
 801809c:	781b      	ldrb	r3, [r3, #0]
 801809e:	b25b      	sxtb	r3, r3
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	da1b      	bge.n	80180dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80180aa:	687a      	ldr	r2, [r7, #4]
 80180ac:	33b0      	adds	r3, #176	@ 0xb0
 80180ae:	009b      	lsls	r3, r3, #2
 80180b0:	4413      	add	r3, r2
 80180b2:	685b      	ldr	r3, [r3, #4]
 80180b4:	689b      	ldr	r3, [r3, #8]
 80180b6:	683a      	ldr	r2, [r7, #0]
 80180b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80180ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80180bc:	683a      	ldr	r2, [r7, #0]
 80180be:	88d2      	ldrh	r2, [r2, #6]
 80180c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80180c2:	683b      	ldr	r3, [r7, #0]
 80180c4:	88db      	ldrh	r3, [r3, #6]
 80180c6:	2b07      	cmp	r3, #7
 80180c8:	bf28      	it	cs
 80180ca:	2307      	movcs	r3, #7
 80180cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80180ce:	693b      	ldr	r3, [r7, #16]
 80180d0:	89fa      	ldrh	r2, [r7, #14]
 80180d2:	4619      	mov	r1, r3
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f001 fdbd 	bl	8019c54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80180da:	e090      	b.n	80181fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80180dc:	683b      	ldr	r3, [r7, #0]
 80180de:	785a      	ldrb	r2, [r3, #1]
 80180e0:	693b      	ldr	r3, [r7, #16]
 80180e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80180e6:	683b      	ldr	r3, [r7, #0]
 80180e8:	88db      	ldrh	r3, [r3, #6]
 80180ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80180ec:	d803      	bhi.n	80180f6 <USBD_CDC_Setup+0xa6>
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	88db      	ldrh	r3, [r3, #6]
 80180f2:	b2da      	uxtb	r2, r3
 80180f4:	e000      	b.n	80180f8 <USBD_CDC_Setup+0xa8>
 80180f6:	2240      	movs	r2, #64	@ 0x40
 80180f8:	693b      	ldr	r3, [r7, #16]
 80180fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80180fe:	6939      	ldr	r1, [r7, #16]
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8018106:	461a      	mov	r2, r3
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	f001 fdcf 	bl	8019cac <USBD_CtlPrepareRx>
      break;
 801810e:	e076      	b.n	80181fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018116:	687a      	ldr	r2, [r7, #4]
 8018118:	33b0      	adds	r3, #176	@ 0xb0
 801811a:	009b      	lsls	r3, r3, #2
 801811c:	4413      	add	r3, r2
 801811e:	685b      	ldr	r3, [r3, #4]
 8018120:	689b      	ldr	r3, [r3, #8]
 8018122:	683a      	ldr	r2, [r7, #0]
 8018124:	7850      	ldrb	r0, [r2, #1]
 8018126:	2200      	movs	r2, #0
 8018128:	6839      	ldr	r1, [r7, #0]
 801812a:	4798      	blx	r3
      break;
 801812c:	e067      	b.n	80181fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801812e:	683b      	ldr	r3, [r7, #0]
 8018130:	785b      	ldrb	r3, [r3, #1]
 8018132:	2b0b      	cmp	r3, #11
 8018134:	d851      	bhi.n	80181da <USBD_CDC_Setup+0x18a>
 8018136:	a201      	add	r2, pc, #4	@ (adr r2, 801813c <USBD_CDC_Setup+0xec>)
 8018138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801813c:	0801816d 	.word	0x0801816d
 8018140:	080181e9 	.word	0x080181e9
 8018144:	080181db 	.word	0x080181db
 8018148:	080181db 	.word	0x080181db
 801814c:	080181db 	.word	0x080181db
 8018150:	080181db 	.word	0x080181db
 8018154:	080181db 	.word	0x080181db
 8018158:	080181db 	.word	0x080181db
 801815c:	080181db 	.word	0x080181db
 8018160:	080181db 	.word	0x080181db
 8018164:	08018197 	.word	0x08018197
 8018168:	080181c1 	.word	0x080181c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018172:	b2db      	uxtb	r3, r3
 8018174:	2b03      	cmp	r3, #3
 8018176:	d107      	bne.n	8018188 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8018178:	f107 030a 	add.w	r3, r7, #10
 801817c:	2202      	movs	r2, #2
 801817e:	4619      	mov	r1, r3
 8018180:	6878      	ldr	r0, [r7, #4]
 8018182:	f001 fd67 	bl	8019c54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018186:	e032      	b.n	80181ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8018188:	6839      	ldr	r1, [r7, #0]
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	f001 fce5 	bl	8019b5a <USBD_CtlError>
            ret = USBD_FAIL;
 8018190:	2303      	movs	r3, #3
 8018192:	75fb      	strb	r3, [r7, #23]
          break;
 8018194:	e02b      	b.n	80181ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801819c:	b2db      	uxtb	r3, r3
 801819e:	2b03      	cmp	r3, #3
 80181a0:	d107      	bne.n	80181b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80181a2:	f107 030d 	add.w	r3, r7, #13
 80181a6:	2201      	movs	r2, #1
 80181a8:	4619      	mov	r1, r3
 80181aa:	6878      	ldr	r0, [r7, #4]
 80181ac:	f001 fd52 	bl	8019c54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80181b0:	e01d      	b.n	80181ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80181b2:	6839      	ldr	r1, [r7, #0]
 80181b4:	6878      	ldr	r0, [r7, #4]
 80181b6:	f001 fcd0 	bl	8019b5a <USBD_CtlError>
            ret = USBD_FAIL;
 80181ba:	2303      	movs	r3, #3
 80181bc:	75fb      	strb	r3, [r7, #23]
          break;
 80181be:	e016      	b.n	80181ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181c6:	b2db      	uxtb	r3, r3
 80181c8:	2b03      	cmp	r3, #3
 80181ca:	d00f      	beq.n	80181ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80181cc:	6839      	ldr	r1, [r7, #0]
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f001 fcc3 	bl	8019b5a <USBD_CtlError>
            ret = USBD_FAIL;
 80181d4:	2303      	movs	r3, #3
 80181d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80181d8:	e008      	b.n	80181ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80181da:	6839      	ldr	r1, [r7, #0]
 80181dc:	6878      	ldr	r0, [r7, #4]
 80181de:	f001 fcbc 	bl	8019b5a <USBD_CtlError>
          ret = USBD_FAIL;
 80181e2:	2303      	movs	r3, #3
 80181e4:	75fb      	strb	r3, [r7, #23]
          break;
 80181e6:	e002      	b.n	80181ee <USBD_CDC_Setup+0x19e>
          break;
 80181e8:	bf00      	nop
 80181ea:	e008      	b.n	80181fe <USBD_CDC_Setup+0x1ae>
          break;
 80181ec:	bf00      	nop
      }
      break;
 80181ee:	e006      	b.n	80181fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80181f0:	6839      	ldr	r1, [r7, #0]
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	f001 fcb1 	bl	8019b5a <USBD_CtlError>
      ret = USBD_FAIL;
 80181f8:	2303      	movs	r3, #3
 80181fa:	75fb      	strb	r3, [r7, #23]
      break;
 80181fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80181fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8018200:	4618      	mov	r0, r3
 8018202:	3718      	adds	r7, #24
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}

08018208 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b084      	sub	sp, #16
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
 8018210:	460b      	mov	r3, r1
 8018212:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801821a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	32b0      	adds	r2, #176	@ 0xb0
 8018226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d101      	bne.n	8018232 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801822e:	2303      	movs	r3, #3
 8018230:	e065      	b.n	80182fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	32b0      	adds	r2, #176	@ 0xb0
 801823c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018240:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018242:	78fb      	ldrb	r3, [r7, #3]
 8018244:	f003 020f 	and.w	r2, r3, #15
 8018248:	6879      	ldr	r1, [r7, #4]
 801824a:	4613      	mov	r3, r2
 801824c:	009b      	lsls	r3, r3, #2
 801824e:	4413      	add	r3, r2
 8018250:	009b      	lsls	r3, r3, #2
 8018252:	440b      	add	r3, r1
 8018254:	3318      	adds	r3, #24
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d02f      	beq.n	80182bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801825c:	78fb      	ldrb	r3, [r7, #3]
 801825e:	f003 020f 	and.w	r2, r3, #15
 8018262:	6879      	ldr	r1, [r7, #4]
 8018264:	4613      	mov	r3, r2
 8018266:	009b      	lsls	r3, r3, #2
 8018268:	4413      	add	r3, r2
 801826a:	009b      	lsls	r3, r3, #2
 801826c:	440b      	add	r3, r1
 801826e:	3318      	adds	r3, #24
 8018270:	681a      	ldr	r2, [r3, #0]
 8018272:	78fb      	ldrb	r3, [r7, #3]
 8018274:	f003 010f 	and.w	r1, r3, #15
 8018278:	68f8      	ldr	r0, [r7, #12]
 801827a:	460b      	mov	r3, r1
 801827c:	00db      	lsls	r3, r3, #3
 801827e:	440b      	add	r3, r1
 8018280:	009b      	lsls	r3, r3, #2
 8018282:	4403      	add	r3, r0
 8018284:	331c      	adds	r3, #28
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	fbb2 f1f3 	udiv	r1, r2, r3
 801828c:	fb01 f303 	mul.w	r3, r1, r3
 8018290:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018292:	2b00      	cmp	r3, #0
 8018294:	d112      	bne.n	80182bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8018296:	78fb      	ldrb	r3, [r7, #3]
 8018298:	f003 020f 	and.w	r2, r3, #15
 801829c:	6879      	ldr	r1, [r7, #4]
 801829e:	4613      	mov	r3, r2
 80182a0:	009b      	lsls	r3, r3, #2
 80182a2:	4413      	add	r3, r2
 80182a4:	009b      	lsls	r3, r3, #2
 80182a6:	440b      	add	r3, r1
 80182a8:	3318      	adds	r3, #24
 80182aa:	2200      	movs	r2, #0
 80182ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80182ae:	78f9      	ldrb	r1, [r7, #3]
 80182b0:	2300      	movs	r3, #0
 80182b2:	2200      	movs	r2, #0
 80182b4:	6878      	ldr	r0, [r7, #4]
 80182b6:	f002 fa0e 	bl	801a6d6 <USBD_LL_Transmit>
 80182ba:	e01f      	b.n	80182fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80182bc:	68bb      	ldr	r3, [r7, #8]
 80182be:	2200      	movs	r2, #0
 80182c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80182ca:	687a      	ldr	r2, [r7, #4]
 80182cc:	33b0      	adds	r3, #176	@ 0xb0
 80182ce:	009b      	lsls	r3, r3, #2
 80182d0:	4413      	add	r3, r2
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	691b      	ldr	r3, [r3, #16]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d010      	beq.n	80182fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80182e0:	687a      	ldr	r2, [r7, #4]
 80182e2:	33b0      	adds	r3, #176	@ 0xb0
 80182e4:	009b      	lsls	r3, r3, #2
 80182e6:	4413      	add	r3, r2
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	691b      	ldr	r3, [r3, #16]
 80182ec:	68ba      	ldr	r2, [r7, #8]
 80182ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80182f2:	68ba      	ldr	r2, [r7, #8]
 80182f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80182f8:	78fa      	ldrb	r2, [r7, #3]
 80182fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80182fc:	2300      	movs	r3, #0
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3710      	adds	r7, #16
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}

08018306 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018306:	b580      	push	{r7, lr}
 8018308:	b084      	sub	sp, #16
 801830a:	af00      	add	r7, sp, #0
 801830c:	6078      	str	r0, [r7, #4]
 801830e:	460b      	mov	r3, r1
 8018310:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	32b0      	adds	r2, #176	@ 0xb0
 801831c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018320:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	32b0      	adds	r2, #176	@ 0xb0
 801832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d101      	bne.n	8018338 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8018334:	2303      	movs	r3, #3
 8018336:	e01a      	b.n	801836e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8018338:	78fb      	ldrb	r3, [r7, #3]
 801833a:	4619      	mov	r1, r3
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f002 fa0c 	bl	801a75a <USBD_LL_GetRxDataSize>
 8018342:	4602      	mov	r2, r0
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	33b0      	adds	r3, #176	@ 0xb0
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	4413      	add	r3, r2
 8018358:	685b      	ldr	r3, [r3, #4]
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	68fa      	ldr	r2, [r7, #12]
 801835e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8018362:	68fa      	ldr	r2, [r7, #12]
 8018364:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8018368:	4611      	mov	r1, r2
 801836a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801836c:	2300      	movs	r3, #0
}
 801836e:	4618      	mov	r0, r3
 8018370:	3710      	adds	r7, #16
 8018372:	46bd      	mov	sp, r7
 8018374:	bd80      	pop	{r7, pc}

08018376 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8018376:	b580      	push	{r7, lr}
 8018378:	b084      	sub	sp, #16
 801837a:	af00      	add	r7, sp, #0
 801837c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	32b0      	adds	r2, #176	@ 0xb0
 8018388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801838c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d101      	bne.n	8018398 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018394:	2303      	movs	r3, #3
 8018396:	e024      	b.n	80183e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801839e:	687a      	ldr	r2, [r7, #4]
 80183a0:	33b0      	adds	r3, #176	@ 0xb0
 80183a2:	009b      	lsls	r3, r3, #2
 80183a4:	4413      	add	r3, r2
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d019      	beq.n	80183e0 <USBD_CDC_EP0_RxReady+0x6a>
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80183b2:	2bff      	cmp	r3, #255	@ 0xff
 80183b4:	d014      	beq.n	80183e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80183bc:	687a      	ldr	r2, [r7, #4]
 80183be:	33b0      	adds	r3, #176	@ 0xb0
 80183c0:	009b      	lsls	r3, r3, #2
 80183c2:	4413      	add	r3, r2
 80183c4:	685b      	ldr	r3, [r3, #4]
 80183c6:	689b      	ldr	r3, [r3, #8]
 80183c8:	68fa      	ldr	r2, [r7, #12]
 80183ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80183ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80183d0:	68fa      	ldr	r2, [r7, #12]
 80183d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80183d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	22ff      	movs	r2, #255	@ 0xff
 80183dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80183e0:	2300      	movs	r3, #0
}
 80183e2:	4618      	mov	r0, r3
 80183e4:	3710      	adds	r7, #16
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bd80      	pop	{r7, pc}
	...

080183ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b086      	sub	sp, #24
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80183f4:	2182      	movs	r1, #130	@ 0x82
 80183f6:	4818      	ldr	r0, [pc, #96]	@ (8018458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80183f8:	f000 fd4f 	bl	8018e9a <USBD_GetEpDesc>
 80183fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80183fe:	2101      	movs	r1, #1
 8018400:	4815      	ldr	r0, [pc, #84]	@ (8018458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018402:	f000 fd4a 	bl	8018e9a <USBD_GetEpDesc>
 8018406:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018408:	2181      	movs	r1, #129	@ 0x81
 801840a:	4813      	ldr	r0, [pc, #76]	@ (8018458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801840c:	f000 fd45 	bl	8018e9a <USBD_GetEpDesc>
 8018410:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018412:	697b      	ldr	r3, [r7, #20]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d002      	beq.n	801841e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	2210      	movs	r2, #16
 801841c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d006      	beq.n	8018432 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018424:	693b      	ldr	r3, [r7, #16]
 8018426:	2200      	movs	r2, #0
 8018428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801842c:	711a      	strb	r2, [r3, #4]
 801842e:	2200      	movs	r2, #0
 8018430:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d006      	beq.n	8018446 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	2200      	movs	r2, #0
 801843c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018440:	711a      	strb	r2, [r3, #4]
 8018442:	2200      	movs	r2, #0
 8018444:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	2243      	movs	r2, #67	@ 0x43
 801844a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801844c:	4b02      	ldr	r3, [pc, #8]	@ (8018458 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801844e:	4618      	mov	r0, r3
 8018450:	3718      	adds	r7, #24
 8018452:	46bd      	mov	sp, r7
 8018454:	bd80      	pop	{r7, pc}
 8018456:	bf00      	nop
 8018458:	24000294 	.word	0x24000294

0801845c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801845c:	b580      	push	{r7, lr}
 801845e:	b086      	sub	sp, #24
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018464:	2182      	movs	r1, #130	@ 0x82
 8018466:	4818      	ldr	r0, [pc, #96]	@ (80184c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018468:	f000 fd17 	bl	8018e9a <USBD_GetEpDesc>
 801846c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801846e:	2101      	movs	r1, #1
 8018470:	4815      	ldr	r0, [pc, #84]	@ (80184c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018472:	f000 fd12 	bl	8018e9a <USBD_GetEpDesc>
 8018476:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018478:	2181      	movs	r1, #129	@ 0x81
 801847a:	4813      	ldr	r0, [pc, #76]	@ (80184c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801847c:	f000 fd0d 	bl	8018e9a <USBD_GetEpDesc>
 8018480:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018482:	697b      	ldr	r3, [r7, #20]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d002      	beq.n	801848e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	2210      	movs	r2, #16
 801848c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d006      	beq.n	80184a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018494:	693b      	ldr	r3, [r7, #16]
 8018496:	2200      	movs	r2, #0
 8018498:	711a      	strb	r2, [r3, #4]
 801849a:	2200      	movs	r2, #0
 801849c:	f042 0202 	orr.w	r2, r2, #2
 80184a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d006      	beq.n	80184b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	2200      	movs	r2, #0
 80184ac:	711a      	strb	r2, [r3, #4]
 80184ae:	2200      	movs	r2, #0
 80184b0:	f042 0202 	orr.w	r2, r2, #2
 80184b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	2243      	movs	r2, #67	@ 0x43
 80184ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80184bc:	4b02      	ldr	r3, [pc, #8]	@ (80184c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80184be:	4618      	mov	r0, r3
 80184c0:	3718      	adds	r7, #24
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop
 80184c8:	24000294 	.word	0x24000294

080184cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b086      	sub	sp, #24
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80184d4:	2182      	movs	r1, #130	@ 0x82
 80184d6:	4818      	ldr	r0, [pc, #96]	@ (8018538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80184d8:	f000 fcdf 	bl	8018e9a <USBD_GetEpDesc>
 80184dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80184de:	2101      	movs	r1, #1
 80184e0:	4815      	ldr	r0, [pc, #84]	@ (8018538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80184e2:	f000 fcda 	bl	8018e9a <USBD_GetEpDesc>
 80184e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80184e8:	2181      	movs	r1, #129	@ 0x81
 80184ea:	4813      	ldr	r0, [pc, #76]	@ (8018538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80184ec:	f000 fcd5 	bl	8018e9a <USBD_GetEpDesc>
 80184f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80184f2:	697b      	ldr	r3, [r7, #20]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d002      	beq.n	80184fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	2210      	movs	r2, #16
 80184fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80184fe:	693b      	ldr	r3, [r7, #16]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d006      	beq.n	8018512 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018504:	693b      	ldr	r3, [r7, #16]
 8018506:	2200      	movs	r2, #0
 8018508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801850c:	711a      	strb	r2, [r3, #4]
 801850e:	2200      	movs	r2, #0
 8018510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d006      	beq.n	8018526 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	2200      	movs	r2, #0
 801851c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018520:	711a      	strb	r2, [r3, #4]
 8018522:	2200      	movs	r2, #0
 8018524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	2243      	movs	r2, #67	@ 0x43
 801852a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801852c:	4b02      	ldr	r3, [pc, #8]	@ (8018538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801852e:	4618      	mov	r0, r3
 8018530:	3718      	adds	r7, #24
 8018532:	46bd      	mov	sp, r7
 8018534:	bd80      	pop	{r7, pc}
 8018536:	bf00      	nop
 8018538:	24000294 	.word	0x24000294

0801853c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801853c:	b480      	push	{r7}
 801853e:	b083      	sub	sp, #12
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	220a      	movs	r2, #10
 8018548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801854a:	4b03      	ldr	r3, [pc, #12]	@ (8018558 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801854c:	4618      	mov	r0, r3
 801854e:	370c      	adds	r7, #12
 8018550:	46bd      	mov	sp, r7
 8018552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018556:	4770      	bx	lr
 8018558:	24000250 	.word	0x24000250

0801855c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801855c:	b480      	push	{r7}
 801855e:	b083      	sub	sp, #12
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d101      	bne.n	8018570 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801856c:	2303      	movs	r3, #3
 801856e:	e009      	b.n	8018584 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018576:	687a      	ldr	r2, [r7, #4]
 8018578:	33b0      	adds	r3, #176	@ 0xb0
 801857a:	009b      	lsls	r3, r3, #2
 801857c:	4413      	add	r3, r2
 801857e:	683a      	ldr	r2, [r7, #0]
 8018580:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8018582:	2300      	movs	r3, #0
}
 8018584:	4618      	mov	r0, r3
 8018586:	370c      	adds	r7, #12
 8018588:	46bd      	mov	sp, r7
 801858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858e:	4770      	bx	lr

08018590 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8018590:	b480      	push	{r7}
 8018592:	b087      	sub	sp, #28
 8018594:	af00      	add	r7, sp, #0
 8018596:	60f8      	str	r0, [r7, #12]
 8018598:	60b9      	str	r1, [r7, #8]
 801859a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	32b0      	adds	r2, #176	@ 0xb0
 80185a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80185ac:	697b      	ldr	r3, [r7, #20]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d101      	bne.n	80185b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80185b2:	2303      	movs	r3, #3
 80185b4:	e008      	b.n	80185c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	68ba      	ldr	r2, [r7, #8]
 80185ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	687a      	ldr	r2, [r7, #4]
 80185c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80185c6:	2300      	movs	r3, #0
}
 80185c8:	4618      	mov	r0, r3
 80185ca:	371c      	adds	r7, #28
 80185cc:	46bd      	mov	sp, r7
 80185ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d2:	4770      	bx	lr

080185d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80185d4:	b480      	push	{r7}
 80185d6:	b085      	sub	sp, #20
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
 80185dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	32b0      	adds	r2, #176	@ 0xb0
 80185e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d101      	bne.n	80185f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80185f4:	2303      	movs	r3, #3
 80185f6:	e004      	b.n	8018602 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	683a      	ldr	r2, [r7, #0]
 80185fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8018600:	2300      	movs	r3, #0
}
 8018602:	4618      	mov	r0, r3
 8018604:	3714      	adds	r7, #20
 8018606:	46bd      	mov	sp, r7
 8018608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860c:	4770      	bx	lr
	...

08018610 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b084      	sub	sp, #16
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	32b0      	adds	r2, #176	@ 0xb0
 8018622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018626:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8018628:	2301      	movs	r3, #1
 801862a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d101      	bne.n	8018636 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8018632:	2303      	movs	r3, #3
 8018634:	e025      	b.n	8018682 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8018636:	68bb      	ldr	r3, [r7, #8]
 8018638:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801863c:	2b00      	cmp	r3, #0
 801863e:	d11f      	bne.n	8018680 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	2201      	movs	r2, #1
 8018644:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8018648:	4b10      	ldr	r3, [pc, #64]	@ (801868c <USBD_CDC_TransmitPacket+0x7c>)
 801864a:	781b      	ldrb	r3, [r3, #0]
 801864c:	f003 020f 	and.w	r2, r3, #15
 8018650:	68bb      	ldr	r3, [r7, #8]
 8018652:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8018656:	6878      	ldr	r0, [r7, #4]
 8018658:	4613      	mov	r3, r2
 801865a:	009b      	lsls	r3, r3, #2
 801865c:	4413      	add	r3, r2
 801865e:	009b      	lsls	r3, r3, #2
 8018660:	4403      	add	r3, r0
 8018662:	3318      	adds	r3, #24
 8018664:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8018666:	4b09      	ldr	r3, [pc, #36]	@ (801868c <USBD_CDC_TransmitPacket+0x7c>)
 8018668:	7819      	ldrb	r1, [r3, #0]
 801866a:	68bb      	ldr	r3, [r7, #8]
 801866c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8018670:	68bb      	ldr	r3, [r7, #8]
 8018672:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8018676:	6878      	ldr	r0, [r7, #4]
 8018678:	f002 f82d 	bl	801a6d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 801867c:	2300      	movs	r3, #0
 801867e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8018680:	7bfb      	ldrb	r3, [r7, #15]
}
 8018682:	4618      	mov	r0, r3
 8018684:	3710      	adds	r7, #16
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
 801868a:	bf00      	nop
 801868c:	240002d7 	.word	0x240002d7

08018690 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b084      	sub	sp, #16
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	32b0      	adds	r2, #176	@ 0xb0
 80186a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	32b0      	adds	r2, #176	@ 0xb0
 80186b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d101      	bne.n	80186be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80186ba:	2303      	movs	r3, #3
 80186bc:	e018      	b.n	80186f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	7c1b      	ldrb	r3, [r3, #16]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d10a      	bne.n	80186dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80186c6:	4b0c      	ldr	r3, [pc, #48]	@ (80186f8 <USBD_CDC_ReceivePacket+0x68>)
 80186c8:	7819      	ldrb	r1, [r3, #0]
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80186d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80186d4:	6878      	ldr	r0, [r7, #4]
 80186d6:	f002 f81f 	bl	801a718 <USBD_LL_PrepareReceive>
 80186da:	e008      	b.n	80186ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80186dc:	4b06      	ldr	r3, [pc, #24]	@ (80186f8 <USBD_CDC_ReceivePacket+0x68>)
 80186de:	7819      	ldrb	r1, [r3, #0]
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80186e6:	2340      	movs	r3, #64	@ 0x40
 80186e8:	6878      	ldr	r0, [r7, #4]
 80186ea:	f002 f815 	bl	801a718 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80186ee:	2300      	movs	r3, #0
}
 80186f0:	4618      	mov	r0, r3
 80186f2:	3710      	adds	r7, #16
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd80      	pop	{r7, pc}
 80186f8:	240002d8 	.word	0x240002d8

080186fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b086      	sub	sp, #24
 8018700:	af00      	add	r7, sp, #0
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	4613      	mov	r3, r2
 8018708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d101      	bne.n	8018714 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018710:	2303      	movs	r3, #3
 8018712:	e01f      	b.n	8018754 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	2200      	movs	r2, #0
 8018718:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	2200      	movs	r2, #0
 8018720:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2200      	movs	r2, #0
 8018728:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801872c:	68bb      	ldr	r3, [r7, #8]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d003      	beq.n	801873a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	68ba      	ldr	r2, [r7, #8]
 8018736:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	2201      	movs	r2, #1
 801873e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	79fa      	ldrb	r2, [r7, #7]
 8018746:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8018748:	68f8      	ldr	r0, [r7, #12]
 801874a:	f001 fe8b 	bl	801a464 <USBD_LL_Init>
 801874e:	4603      	mov	r3, r0
 8018750:	75fb      	strb	r3, [r7, #23]

  return ret;
 8018752:	7dfb      	ldrb	r3, [r7, #23]
}
 8018754:	4618      	mov	r0, r3
 8018756:	3718      	adds	r7, #24
 8018758:	46bd      	mov	sp, r7
 801875a:	bd80      	pop	{r7, pc}

0801875c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b084      	sub	sp, #16
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
 8018764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018766:	2300      	movs	r3, #0
 8018768:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801876a:	683b      	ldr	r3, [r7, #0]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d101      	bne.n	8018774 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018770:	2303      	movs	r3, #3
 8018772:	e025      	b.n	80187c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	683a      	ldr	r2, [r7, #0]
 8018778:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	32ae      	adds	r2, #174	@ 0xae
 8018786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801878c:	2b00      	cmp	r3, #0
 801878e:	d00f      	beq.n	80187b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	32ae      	adds	r2, #174	@ 0xae
 801879a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187a0:	f107 020e 	add.w	r2, r7, #14
 80187a4:	4610      	mov	r0, r2
 80187a6:	4798      	blx	r3
 80187a8:	4602      	mov	r2, r0
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80187b6:	1c5a      	adds	r2, r3, #1
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80187be:	2300      	movs	r3, #0
}
 80187c0:	4618      	mov	r0, r3
 80187c2:	3710      	adds	r7, #16
 80187c4:	46bd      	mov	sp, r7
 80187c6:	bd80      	pop	{r7, pc}

080187c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80187c8:	b580      	push	{r7, lr}
 80187ca:	b082      	sub	sp, #8
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	f001 fe97 	bl	801a504 <USBD_LL_Start>
 80187d6:	4603      	mov	r3, r0
}
 80187d8:	4618      	mov	r0, r3
 80187da:	3708      	adds	r7, #8
 80187dc:	46bd      	mov	sp, r7
 80187de:	bd80      	pop	{r7, pc}

080187e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80187e0:	b480      	push	{r7}
 80187e2:	b083      	sub	sp, #12
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80187e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80187ea:	4618      	mov	r0, r3
 80187ec:	370c      	adds	r7, #12
 80187ee:	46bd      	mov	sp, r7
 80187f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f4:	4770      	bx	lr

080187f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80187f6:	b580      	push	{r7, lr}
 80187f8:	b084      	sub	sp, #16
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	6078      	str	r0, [r7, #4]
 80187fe:	460b      	mov	r3, r1
 8018800:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8018802:	2300      	movs	r3, #0
 8018804:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801880c:	2b00      	cmp	r3, #0
 801880e:	d009      	beq.n	8018824 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	78fa      	ldrb	r2, [r7, #3]
 801881a:	4611      	mov	r1, r2
 801881c:	6878      	ldr	r0, [r7, #4]
 801881e:	4798      	blx	r3
 8018820:	4603      	mov	r3, r0
 8018822:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018824:	7bfb      	ldrb	r3, [r7, #15]
}
 8018826:	4618      	mov	r0, r3
 8018828:	3710      	adds	r7, #16
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}

0801882e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801882e:	b580      	push	{r7, lr}
 8018830:	b084      	sub	sp, #16
 8018832:	af00      	add	r7, sp, #0
 8018834:	6078      	str	r0, [r7, #4]
 8018836:	460b      	mov	r3, r1
 8018838:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801883a:	2300      	movs	r3, #0
 801883c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018844:	685b      	ldr	r3, [r3, #4]
 8018846:	78fa      	ldrb	r2, [r7, #3]
 8018848:	4611      	mov	r1, r2
 801884a:	6878      	ldr	r0, [r7, #4]
 801884c:	4798      	blx	r3
 801884e:	4603      	mov	r3, r0
 8018850:	2b00      	cmp	r3, #0
 8018852:	d001      	beq.n	8018858 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8018854:	2303      	movs	r3, #3
 8018856:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018858:	7bfb      	ldrb	r3, [r7, #15]
}
 801885a:	4618      	mov	r0, r3
 801885c:	3710      	adds	r7, #16
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}

08018862 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018862:	b580      	push	{r7, lr}
 8018864:	b084      	sub	sp, #16
 8018866:	af00      	add	r7, sp, #0
 8018868:	6078      	str	r0, [r7, #4]
 801886a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8018872:	6839      	ldr	r1, [r7, #0]
 8018874:	4618      	mov	r0, r3
 8018876:	f001 f936 	bl	8019ae6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	2201      	movs	r2, #1
 801887e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8018888:	461a      	mov	r2, r3
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018896:	f003 031f 	and.w	r3, r3, #31
 801889a:	2b02      	cmp	r3, #2
 801889c:	d01a      	beq.n	80188d4 <USBD_LL_SetupStage+0x72>
 801889e:	2b02      	cmp	r3, #2
 80188a0:	d822      	bhi.n	80188e8 <USBD_LL_SetupStage+0x86>
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d002      	beq.n	80188ac <USBD_LL_SetupStage+0x4a>
 80188a6:	2b01      	cmp	r3, #1
 80188a8:	d00a      	beq.n	80188c0 <USBD_LL_SetupStage+0x5e>
 80188aa:	e01d      	b.n	80188e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188b2:	4619      	mov	r1, r3
 80188b4:	6878      	ldr	r0, [r7, #4]
 80188b6:	f000 fb63 	bl	8018f80 <USBD_StdDevReq>
 80188ba:	4603      	mov	r3, r0
 80188bc:	73fb      	strb	r3, [r7, #15]
      break;
 80188be:	e020      	b.n	8018902 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188c6:	4619      	mov	r1, r3
 80188c8:	6878      	ldr	r0, [r7, #4]
 80188ca:	f000 fbcb 	bl	8019064 <USBD_StdItfReq>
 80188ce:	4603      	mov	r3, r0
 80188d0:	73fb      	strb	r3, [r7, #15]
      break;
 80188d2:	e016      	b.n	8018902 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188da:	4619      	mov	r1, r3
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f000 fc2d 	bl	801913c <USBD_StdEPReq>
 80188e2:	4603      	mov	r3, r0
 80188e4:	73fb      	strb	r3, [r7, #15]
      break;
 80188e6:	e00c      	b.n	8018902 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80188ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	4619      	mov	r1, r3
 80188f6:	6878      	ldr	r0, [r7, #4]
 80188f8:	f001 fe64 	bl	801a5c4 <USBD_LL_StallEP>
 80188fc:	4603      	mov	r3, r0
 80188fe:	73fb      	strb	r3, [r7, #15]
      break;
 8018900:	bf00      	nop
  }

  return ret;
 8018902:	7bfb      	ldrb	r3, [r7, #15]
}
 8018904:	4618      	mov	r0, r3
 8018906:	3710      	adds	r7, #16
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}

0801890c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b086      	sub	sp, #24
 8018910:	af00      	add	r7, sp, #0
 8018912:	60f8      	str	r0, [r7, #12]
 8018914:	460b      	mov	r3, r1
 8018916:	607a      	str	r2, [r7, #4]
 8018918:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801891a:	2300      	movs	r3, #0
 801891c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801891e:	7afb      	ldrb	r3, [r7, #11]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d16e      	bne.n	8018a02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801892a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018932:	2b03      	cmp	r3, #3
 8018934:	f040 8098 	bne.w	8018a68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8018938:	693b      	ldr	r3, [r7, #16]
 801893a:	689a      	ldr	r2, [r3, #8]
 801893c:	693b      	ldr	r3, [r7, #16]
 801893e:	68db      	ldr	r3, [r3, #12]
 8018940:	429a      	cmp	r2, r3
 8018942:	d913      	bls.n	801896c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8018944:	693b      	ldr	r3, [r7, #16]
 8018946:	689a      	ldr	r2, [r3, #8]
 8018948:	693b      	ldr	r3, [r7, #16]
 801894a:	68db      	ldr	r3, [r3, #12]
 801894c:	1ad2      	subs	r2, r2, r3
 801894e:	693b      	ldr	r3, [r7, #16]
 8018950:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8018952:	693b      	ldr	r3, [r7, #16]
 8018954:	68da      	ldr	r2, [r3, #12]
 8018956:	693b      	ldr	r3, [r7, #16]
 8018958:	689b      	ldr	r3, [r3, #8]
 801895a:	4293      	cmp	r3, r2
 801895c:	bf28      	it	cs
 801895e:	4613      	movcs	r3, r2
 8018960:	461a      	mov	r2, r3
 8018962:	6879      	ldr	r1, [r7, #4]
 8018964:	68f8      	ldr	r0, [r7, #12]
 8018966:	f001 f9be 	bl	8019ce6 <USBD_CtlContinueRx>
 801896a:	e07d      	b.n	8018a68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018972:	f003 031f 	and.w	r3, r3, #31
 8018976:	2b02      	cmp	r3, #2
 8018978:	d014      	beq.n	80189a4 <USBD_LL_DataOutStage+0x98>
 801897a:	2b02      	cmp	r3, #2
 801897c:	d81d      	bhi.n	80189ba <USBD_LL_DataOutStage+0xae>
 801897e:	2b00      	cmp	r3, #0
 8018980:	d002      	beq.n	8018988 <USBD_LL_DataOutStage+0x7c>
 8018982:	2b01      	cmp	r3, #1
 8018984:	d003      	beq.n	801898e <USBD_LL_DataOutStage+0x82>
 8018986:	e018      	b.n	80189ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8018988:	2300      	movs	r3, #0
 801898a:	75bb      	strb	r3, [r7, #22]
            break;
 801898c:	e018      	b.n	80189c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8018994:	b2db      	uxtb	r3, r3
 8018996:	4619      	mov	r1, r3
 8018998:	68f8      	ldr	r0, [r7, #12]
 801899a:	f000 fa64 	bl	8018e66 <USBD_CoreFindIF>
 801899e:	4603      	mov	r3, r0
 80189a0:	75bb      	strb	r3, [r7, #22]
            break;
 80189a2:	e00d      	b.n	80189c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80189aa:	b2db      	uxtb	r3, r3
 80189ac:	4619      	mov	r1, r3
 80189ae:	68f8      	ldr	r0, [r7, #12]
 80189b0:	f000 fa66 	bl	8018e80 <USBD_CoreFindEP>
 80189b4:	4603      	mov	r3, r0
 80189b6:	75bb      	strb	r3, [r7, #22]
            break;
 80189b8:	e002      	b.n	80189c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80189ba:	2300      	movs	r3, #0
 80189bc:	75bb      	strb	r3, [r7, #22]
            break;
 80189be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80189c0:	7dbb      	ldrb	r3, [r7, #22]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d119      	bne.n	80189fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80189cc:	b2db      	uxtb	r3, r3
 80189ce:	2b03      	cmp	r3, #3
 80189d0:	d113      	bne.n	80189fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80189d2:	7dba      	ldrb	r2, [r7, #22]
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	32ae      	adds	r2, #174	@ 0xae
 80189d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80189dc:	691b      	ldr	r3, [r3, #16]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d00b      	beq.n	80189fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80189e2:	7dba      	ldrb	r2, [r7, #22]
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80189ea:	7dba      	ldrb	r2, [r7, #22]
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	32ae      	adds	r2, #174	@ 0xae
 80189f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80189f4:	691b      	ldr	r3, [r3, #16]
 80189f6:	68f8      	ldr	r0, [r7, #12]
 80189f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80189fa:	68f8      	ldr	r0, [r7, #12]
 80189fc:	f001 f984 	bl	8019d08 <USBD_CtlSendStatus>
 8018a00:	e032      	b.n	8018a68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8018a02:	7afb      	ldrb	r3, [r7, #11]
 8018a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a08:	b2db      	uxtb	r3, r3
 8018a0a:	4619      	mov	r1, r3
 8018a0c:	68f8      	ldr	r0, [r7, #12]
 8018a0e:	f000 fa37 	bl	8018e80 <USBD_CoreFindEP>
 8018a12:	4603      	mov	r3, r0
 8018a14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018a16:	7dbb      	ldrb	r3, [r7, #22]
 8018a18:	2bff      	cmp	r3, #255	@ 0xff
 8018a1a:	d025      	beq.n	8018a68 <USBD_LL_DataOutStage+0x15c>
 8018a1c:	7dbb      	ldrb	r3, [r7, #22]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d122      	bne.n	8018a68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018a28:	b2db      	uxtb	r3, r3
 8018a2a:	2b03      	cmp	r3, #3
 8018a2c:	d117      	bne.n	8018a5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8018a2e:	7dba      	ldrb	r2, [r7, #22]
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	32ae      	adds	r2, #174	@ 0xae
 8018a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a38:	699b      	ldr	r3, [r3, #24]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d00f      	beq.n	8018a5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8018a3e:	7dba      	ldrb	r2, [r7, #22]
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8018a46:	7dba      	ldrb	r2, [r7, #22]
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	32ae      	adds	r2, #174	@ 0xae
 8018a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a50:	699b      	ldr	r3, [r3, #24]
 8018a52:	7afa      	ldrb	r2, [r7, #11]
 8018a54:	4611      	mov	r1, r2
 8018a56:	68f8      	ldr	r0, [r7, #12]
 8018a58:	4798      	blx	r3
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8018a5e:	7dfb      	ldrb	r3, [r7, #23]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d001      	beq.n	8018a68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8018a64:	7dfb      	ldrb	r3, [r7, #23]
 8018a66:	e000      	b.n	8018a6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8018a68:	2300      	movs	r3, #0
}
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	3718      	adds	r7, #24
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}

08018a72 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018a72:	b580      	push	{r7, lr}
 8018a74:	b086      	sub	sp, #24
 8018a76:	af00      	add	r7, sp, #0
 8018a78:	60f8      	str	r0, [r7, #12]
 8018a7a:	460b      	mov	r3, r1
 8018a7c:	607a      	str	r2, [r7, #4]
 8018a7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8018a80:	7afb      	ldrb	r3, [r7, #11]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d16f      	bne.n	8018b66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	3314      	adds	r3, #20
 8018a8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018a92:	2b02      	cmp	r3, #2
 8018a94:	d15a      	bne.n	8018b4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8018a96:	693b      	ldr	r3, [r7, #16]
 8018a98:	689a      	ldr	r2, [r3, #8]
 8018a9a:	693b      	ldr	r3, [r7, #16]
 8018a9c:	68db      	ldr	r3, [r3, #12]
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	d914      	bls.n	8018acc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018aa2:	693b      	ldr	r3, [r7, #16]
 8018aa4:	689a      	ldr	r2, [r3, #8]
 8018aa6:	693b      	ldr	r3, [r7, #16]
 8018aa8:	68db      	ldr	r3, [r3, #12]
 8018aaa:	1ad2      	subs	r2, r2, r3
 8018aac:	693b      	ldr	r3, [r7, #16]
 8018aae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018ab0:	693b      	ldr	r3, [r7, #16]
 8018ab2:	689b      	ldr	r3, [r3, #8]
 8018ab4:	461a      	mov	r2, r3
 8018ab6:	6879      	ldr	r1, [r7, #4]
 8018ab8:	68f8      	ldr	r0, [r7, #12]
 8018aba:	f001 f8e6 	bl	8019c8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018abe:	2300      	movs	r3, #0
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	2100      	movs	r1, #0
 8018ac4:	68f8      	ldr	r0, [r7, #12]
 8018ac6:	f001 fe27 	bl	801a718 <USBD_LL_PrepareReceive>
 8018aca:	e03f      	b.n	8018b4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8018acc:	693b      	ldr	r3, [r7, #16]
 8018ace:	68da      	ldr	r2, [r3, #12]
 8018ad0:	693b      	ldr	r3, [r7, #16]
 8018ad2:	689b      	ldr	r3, [r3, #8]
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	d11c      	bne.n	8018b12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8018ad8:	693b      	ldr	r3, [r7, #16]
 8018ada:	685a      	ldr	r2, [r3, #4]
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	d316      	bcc.n	8018b12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8018ae4:	693b      	ldr	r3, [r7, #16]
 8018ae6:	685a      	ldr	r2, [r3, #4]
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8018aee:	429a      	cmp	r2, r3
 8018af0:	d20f      	bcs.n	8018b12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018af2:	2200      	movs	r2, #0
 8018af4:	2100      	movs	r1, #0
 8018af6:	68f8      	ldr	r0, [r7, #12]
 8018af8:	f001 f8c7 	bl	8019c8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	2200      	movs	r2, #0
 8018b00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018b04:	2300      	movs	r3, #0
 8018b06:	2200      	movs	r2, #0
 8018b08:	2100      	movs	r1, #0
 8018b0a:	68f8      	ldr	r0, [r7, #12]
 8018b0c:	f001 fe04 	bl	801a718 <USBD_LL_PrepareReceive>
 8018b10:	e01c      	b.n	8018b4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	2b03      	cmp	r3, #3
 8018b1c:	d10f      	bne.n	8018b3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b24:	68db      	ldr	r3, [r3, #12]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d009      	beq.n	8018b3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	2200      	movs	r2, #0
 8018b2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b38:	68db      	ldr	r3, [r3, #12]
 8018b3a:	68f8      	ldr	r0, [r7, #12]
 8018b3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018b3e:	2180      	movs	r1, #128	@ 0x80
 8018b40:	68f8      	ldr	r0, [r7, #12]
 8018b42:	f001 fd3f 	bl	801a5c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8018b46:	68f8      	ldr	r0, [r7, #12]
 8018b48:	f001 f8f1 	bl	8019d2e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d03a      	beq.n	8018bcc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8018b56:	68f8      	ldr	r0, [r7, #12]
 8018b58:	f7ff fe42 	bl	80187e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8018b64:	e032      	b.n	8018bcc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8018b66:	7afb      	ldrb	r3, [r7, #11]
 8018b68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018b6c:	b2db      	uxtb	r3, r3
 8018b6e:	4619      	mov	r1, r3
 8018b70:	68f8      	ldr	r0, [r7, #12]
 8018b72:	f000 f985 	bl	8018e80 <USBD_CoreFindEP>
 8018b76:	4603      	mov	r3, r0
 8018b78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018b7a:	7dfb      	ldrb	r3, [r7, #23]
 8018b7c:	2bff      	cmp	r3, #255	@ 0xff
 8018b7e:	d025      	beq.n	8018bcc <USBD_LL_DataInStage+0x15a>
 8018b80:	7dfb      	ldrb	r3, [r7, #23]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d122      	bne.n	8018bcc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018b8c:	b2db      	uxtb	r3, r3
 8018b8e:	2b03      	cmp	r3, #3
 8018b90:	d11c      	bne.n	8018bcc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8018b92:	7dfa      	ldrb	r2, [r7, #23]
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	32ae      	adds	r2, #174	@ 0xae
 8018b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b9c:	695b      	ldr	r3, [r3, #20]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d014      	beq.n	8018bcc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8018ba2:	7dfa      	ldrb	r2, [r7, #23]
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8018baa:	7dfa      	ldrb	r2, [r7, #23]
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	32ae      	adds	r2, #174	@ 0xae
 8018bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bb4:	695b      	ldr	r3, [r3, #20]
 8018bb6:	7afa      	ldrb	r2, [r7, #11]
 8018bb8:	4611      	mov	r1, r2
 8018bba:	68f8      	ldr	r0, [r7, #12]
 8018bbc:	4798      	blx	r3
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8018bc2:	7dbb      	ldrb	r3, [r7, #22]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d001      	beq.n	8018bcc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018bc8:	7dbb      	ldrb	r3, [r7, #22]
 8018bca:	e000      	b.n	8018bce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018bcc:	2300      	movs	r3, #0
}
 8018bce:	4618      	mov	r0, r3
 8018bd0:	3718      	adds	r7, #24
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}

08018bd6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018bd6:	b580      	push	{r7, lr}
 8018bd8:	b084      	sub	sp, #16
 8018bda:	af00      	add	r7, sp, #0
 8018bdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8018bde:	2300      	movs	r3, #0
 8018be0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	2201      	movs	r2, #1
 8018be6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	2200      	movs	r2, #0
 8018bee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	2200      	movs	r2, #0
 8018bfc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	2200      	movs	r2, #0
 8018c04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d014      	beq.n	8018c3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d00e      	beq.n	8018c3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c24:	685b      	ldr	r3, [r3, #4]
 8018c26:	687a      	ldr	r2, [r7, #4]
 8018c28:	6852      	ldr	r2, [r2, #4]
 8018c2a:	b2d2      	uxtb	r2, r2
 8018c2c:	4611      	mov	r1, r2
 8018c2e:	6878      	ldr	r0, [r7, #4]
 8018c30:	4798      	blx	r3
 8018c32:	4603      	mov	r3, r0
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d001      	beq.n	8018c3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8018c38:	2303      	movs	r3, #3
 8018c3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018c3c:	2340      	movs	r3, #64	@ 0x40
 8018c3e:	2200      	movs	r2, #0
 8018c40:	2100      	movs	r1, #0
 8018c42:	6878      	ldr	r0, [r7, #4]
 8018c44:	f001 fc79 	bl	801a53a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2201      	movs	r2, #1
 8018c4c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	2240      	movs	r2, #64	@ 0x40
 8018c54:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018c58:	2340      	movs	r3, #64	@ 0x40
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	2180      	movs	r1, #128	@ 0x80
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f001 fc6b 	bl	801a53a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	2201      	movs	r2, #1
 8018c68:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	2240      	movs	r2, #64	@ 0x40
 8018c6e:	621a      	str	r2, [r3, #32]

  return ret;
 8018c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c72:	4618      	mov	r0, r3
 8018c74:	3710      	adds	r7, #16
 8018c76:	46bd      	mov	sp, r7
 8018c78:	bd80      	pop	{r7, pc}

08018c7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018c7a:	b480      	push	{r7}
 8018c7c:	b083      	sub	sp, #12
 8018c7e:	af00      	add	r7, sp, #0
 8018c80:	6078      	str	r0, [r7, #4]
 8018c82:	460b      	mov	r3, r1
 8018c84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	78fa      	ldrb	r2, [r7, #3]
 8018c8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018c8c:	2300      	movs	r3, #0
}
 8018c8e:	4618      	mov	r0, r3
 8018c90:	370c      	adds	r7, #12
 8018c92:	46bd      	mov	sp, r7
 8018c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c98:	4770      	bx	lr

08018c9a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018c9a:	b480      	push	{r7}
 8018c9c:	b083      	sub	sp, #12
 8018c9e:	af00      	add	r7, sp, #0
 8018ca0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018ca8:	b2db      	uxtb	r3, r3
 8018caa:	2b04      	cmp	r3, #4
 8018cac:	d006      	beq.n	8018cbc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cb4:	b2da      	uxtb	r2, r3
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	2204      	movs	r2, #4
 8018cc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8018cc4:	2300      	movs	r3, #0
}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	370c      	adds	r7, #12
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd0:	4770      	bx	lr

08018cd2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018cd2:	b480      	push	{r7}
 8018cd4:	b083      	sub	sp, #12
 8018cd6:	af00      	add	r7, sp, #0
 8018cd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	2b04      	cmp	r3, #4
 8018ce4:	d106      	bne.n	8018cf4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8018cec:	b2da      	uxtb	r2, r3
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8018cf4:	2300      	movs	r3, #0
}
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	370c      	adds	r7, #12
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d00:	4770      	bx	lr

08018d02 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018d02:	b580      	push	{r7, lr}
 8018d04:	b082      	sub	sp, #8
 8018d06:	af00      	add	r7, sp, #0
 8018d08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	2b03      	cmp	r3, #3
 8018d14:	d110      	bne.n	8018d38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d00b      	beq.n	8018d38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d26:	69db      	ldr	r3, [r3, #28]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d005      	beq.n	8018d38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d32:	69db      	ldr	r3, [r3, #28]
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8018d38:	2300      	movs	r3, #0
}
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	3708      	adds	r7, #8
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	bd80      	pop	{r7, pc}

08018d42 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8018d42:	b580      	push	{r7, lr}
 8018d44:	b082      	sub	sp, #8
 8018d46:	af00      	add	r7, sp, #0
 8018d48:	6078      	str	r0, [r7, #4]
 8018d4a:	460b      	mov	r3, r1
 8018d4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	32ae      	adds	r2, #174	@ 0xae
 8018d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d101      	bne.n	8018d64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8018d60:	2303      	movs	r3, #3
 8018d62:	e01c      	b.n	8018d9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d6a:	b2db      	uxtb	r3, r3
 8018d6c:	2b03      	cmp	r3, #3
 8018d6e:	d115      	bne.n	8018d9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	32ae      	adds	r2, #174	@ 0xae
 8018d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d7e:	6a1b      	ldr	r3, [r3, #32]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d00b      	beq.n	8018d9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	32ae      	adds	r2, #174	@ 0xae
 8018d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d92:	6a1b      	ldr	r3, [r3, #32]
 8018d94:	78fa      	ldrb	r2, [r7, #3]
 8018d96:	4611      	mov	r1, r2
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018d9c:	2300      	movs	r3, #0
}
 8018d9e:	4618      	mov	r0, r3
 8018da0:	3708      	adds	r7, #8
 8018da2:	46bd      	mov	sp, r7
 8018da4:	bd80      	pop	{r7, pc}

08018da6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018da6:	b580      	push	{r7, lr}
 8018da8:	b082      	sub	sp, #8
 8018daa:	af00      	add	r7, sp, #0
 8018dac:	6078      	str	r0, [r7, #4]
 8018dae:	460b      	mov	r3, r1
 8018db0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	32ae      	adds	r2, #174	@ 0xae
 8018dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d101      	bne.n	8018dc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018dc4:	2303      	movs	r3, #3
 8018dc6:	e01c      	b.n	8018e02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018dce:	b2db      	uxtb	r3, r3
 8018dd0:	2b03      	cmp	r3, #3
 8018dd2:	d115      	bne.n	8018e00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	32ae      	adds	r2, #174	@ 0xae
 8018dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d00b      	beq.n	8018e00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	32ae      	adds	r2, #174	@ 0xae
 8018df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018df8:	78fa      	ldrb	r2, [r7, #3]
 8018dfa:	4611      	mov	r1, r2
 8018dfc:	6878      	ldr	r0, [r7, #4]
 8018dfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018e00:	2300      	movs	r3, #0
}
 8018e02:	4618      	mov	r0, r3
 8018e04:	3708      	adds	r7, #8
 8018e06:	46bd      	mov	sp, r7
 8018e08:	bd80      	pop	{r7, pc}

08018e0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018e0a:	b480      	push	{r7}
 8018e0c:	b083      	sub	sp, #12
 8018e0e:	af00      	add	r7, sp, #0
 8018e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018e12:	2300      	movs	r3, #0
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	370c      	adds	r7, #12
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1e:	4770      	bx	lr

08018e20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b084      	sub	sp, #16
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8018e28:	2300      	movs	r3, #0
 8018e2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2201      	movs	r2, #1
 8018e30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d00e      	beq.n	8018e5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018e44:	685b      	ldr	r3, [r3, #4]
 8018e46:	687a      	ldr	r2, [r7, #4]
 8018e48:	6852      	ldr	r2, [r2, #4]
 8018e4a:	b2d2      	uxtb	r2, r2
 8018e4c:	4611      	mov	r1, r2
 8018e4e:	6878      	ldr	r0, [r7, #4]
 8018e50:	4798      	blx	r3
 8018e52:	4603      	mov	r3, r0
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d001      	beq.n	8018e5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8018e58:	2303      	movs	r3, #3
 8018e5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e5e:	4618      	mov	r0, r3
 8018e60:	3710      	adds	r7, #16
 8018e62:	46bd      	mov	sp, r7
 8018e64:	bd80      	pop	{r7, pc}

08018e66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018e66:	b480      	push	{r7}
 8018e68:	b083      	sub	sp, #12
 8018e6a:	af00      	add	r7, sp, #0
 8018e6c:	6078      	str	r0, [r7, #4]
 8018e6e:	460b      	mov	r3, r1
 8018e70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018e72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	370c      	adds	r7, #12
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7e:	4770      	bx	lr

08018e80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018e80:	b480      	push	{r7}
 8018e82:	b083      	sub	sp, #12
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
 8018e88:	460b      	mov	r3, r1
 8018e8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018e8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018e8e:	4618      	mov	r0, r3
 8018e90:	370c      	adds	r7, #12
 8018e92:	46bd      	mov	sp, r7
 8018e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e98:	4770      	bx	lr

08018e9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8018e9a:	b580      	push	{r7, lr}
 8018e9c:	b086      	sub	sp, #24
 8018e9e:	af00      	add	r7, sp, #0
 8018ea0:	6078      	str	r0, [r7, #4]
 8018ea2:	460b      	mov	r3, r1
 8018ea4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	885b      	ldrh	r3, [r3, #2]
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	68fa      	ldr	r2, [r7, #12]
 8018eba:	7812      	ldrb	r2, [r2, #0]
 8018ebc:	4293      	cmp	r3, r2
 8018ebe:	d91f      	bls.n	8018f00 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	781b      	ldrb	r3, [r3, #0]
 8018ec4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018ec6:	e013      	b.n	8018ef0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018ec8:	f107 030a 	add.w	r3, r7, #10
 8018ecc:	4619      	mov	r1, r3
 8018ece:	6978      	ldr	r0, [r7, #20]
 8018ed0:	f000 f81b 	bl	8018f0a <USBD_GetNextDesc>
 8018ed4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	785b      	ldrb	r3, [r3, #1]
 8018eda:	2b05      	cmp	r3, #5
 8018edc:	d108      	bne.n	8018ef0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	789b      	ldrb	r3, [r3, #2]
 8018ee6:	78fa      	ldrb	r2, [r7, #3]
 8018ee8:	429a      	cmp	r2, r3
 8018eea:	d008      	beq.n	8018efe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8018eec:	2300      	movs	r3, #0
 8018eee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	885b      	ldrh	r3, [r3, #2]
 8018ef4:	b29a      	uxth	r2, r3
 8018ef6:	897b      	ldrh	r3, [r7, #10]
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	d8e5      	bhi.n	8018ec8 <USBD_GetEpDesc+0x2e>
 8018efc:	e000      	b.n	8018f00 <USBD_GetEpDesc+0x66>
          break;
 8018efe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8018f00:	693b      	ldr	r3, [r7, #16]
}
 8018f02:	4618      	mov	r0, r3
 8018f04:	3718      	adds	r7, #24
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}

08018f0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8018f0a:	b480      	push	{r7}
 8018f0c:	b085      	sub	sp, #20
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	6078      	str	r0, [r7, #4]
 8018f12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8018f18:	683b      	ldr	r3, [r7, #0]
 8018f1a:	881b      	ldrh	r3, [r3, #0]
 8018f1c:	68fa      	ldr	r2, [r7, #12]
 8018f1e:	7812      	ldrb	r2, [r2, #0]
 8018f20:	4413      	add	r3, r2
 8018f22:	b29a      	uxth	r2, r3
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	781b      	ldrb	r3, [r3, #0]
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	4413      	add	r3, r2
 8018f32:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8018f34:	68fb      	ldr	r3, [r7, #12]
}
 8018f36:	4618      	mov	r0, r3
 8018f38:	3714      	adds	r7, #20
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f40:	4770      	bx	lr

08018f42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018f42:	b480      	push	{r7}
 8018f44:	b087      	sub	sp, #28
 8018f46:	af00      	add	r7, sp, #0
 8018f48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018f4e:	697b      	ldr	r3, [r7, #20]
 8018f50:	781b      	ldrb	r3, [r3, #0]
 8018f52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018f54:	697b      	ldr	r3, [r7, #20]
 8018f56:	3301      	adds	r3, #1
 8018f58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018f5a:	697b      	ldr	r3, [r7, #20]
 8018f5c:	781b      	ldrb	r3, [r3, #0]
 8018f5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018f60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018f64:	021b      	lsls	r3, r3, #8
 8018f66:	b21a      	sxth	r2, r3
 8018f68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018f6c:	4313      	orrs	r3, r2
 8018f6e:	b21b      	sxth	r3, r3
 8018f70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018f72:	89fb      	ldrh	r3, [r7, #14]
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	371c      	adds	r7, #28
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7e:	4770      	bx	lr

08018f80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
 8018f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018f8e:	683b      	ldr	r3, [r7, #0]
 8018f90:	781b      	ldrb	r3, [r3, #0]
 8018f92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018f96:	2b40      	cmp	r3, #64	@ 0x40
 8018f98:	d005      	beq.n	8018fa6 <USBD_StdDevReq+0x26>
 8018f9a:	2b40      	cmp	r3, #64	@ 0x40
 8018f9c:	d857      	bhi.n	801904e <USBD_StdDevReq+0xce>
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d00f      	beq.n	8018fc2 <USBD_StdDevReq+0x42>
 8018fa2:	2b20      	cmp	r3, #32
 8018fa4:	d153      	bne.n	801904e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	32ae      	adds	r2, #174	@ 0xae
 8018fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018fb4:	689b      	ldr	r3, [r3, #8]
 8018fb6:	6839      	ldr	r1, [r7, #0]
 8018fb8:	6878      	ldr	r0, [r7, #4]
 8018fba:	4798      	blx	r3
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8018fc0:	e04a      	b.n	8019058 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018fc2:	683b      	ldr	r3, [r7, #0]
 8018fc4:	785b      	ldrb	r3, [r3, #1]
 8018fc6:	2b09      	cmp	r3, #9
 8018fc8:	d83b      	bhi.n	8019042 <USBD_StdDevReq+0xc2>
 8018fca:	a201      	add	r2, pc, #4	@ (adr r2, 8018fd0 <USBD_StdDevReq+0x50>)
 8018fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fd0:	08019025 	.word	0x08019025
 8018fd4:	08019039 	.word	0x08019039
 8018fd8:	08019043 	.word	0x08019043
 8018fdc:	0801902f 	.word	0x0801902f
 8018fe0:	08019043 	.word	0x08019043
 8018fe4:	08019003 	.word	0x08019003
 8018fe8:	08018ff9 	.word	0x08018ff9
 8018fec:	08019043 	.word	0x08019043
 8018ff0:	0801901b 	.word	0x0801901b
 8018ff4:	0801900d 	.word	0x0801900d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018ff8:	6839      	ldr	r1, [r7, #0]
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f000 fa3c 	bl	8019478 <USBD_GetDescriptor>
          break;
 8019000:	e024      	b.n	801904c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8019002:	6839      	ldr	r1, [r7, #0]
 8019004:	6878      	ldr	r0, [r7, #4]
 8019006:	f000 fbcb 	bl	80197a0 <USBD_SetAddress>
          break;
 801900a:	e01f      	b.n	801904c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801900c:	6839      	ldr	r1, [r7, #0]
 801900e:	6878      	ldr	r0, [r7, #4]
 8019010:	f000 fc0a 	bl	8019828 <USBD_SetConfig>
 8019014:	4603      	mov	r3, r0
 8019016:	73fb      	strb	r3, [r7, #15]
          break;
 8019018:	e018      	b.n	801904c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801901a:	6839      	ldr	r1, [r7, #0]
 801901c:	6878      	ldr	r0, [r7, #4]
 801901e:	f000 fcad 	bl	801997c <USBD_GetConfig>
          break;
 8019022:	e013      	b.n	801904c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8019024:	6839      	ldr	r1, [r7, #0]
 8019026:	6878      	ldr	r0, [r7, #4]
 8019028:	f000 fcde 	bl	80199e8 <USBD_GetStatus>
          break;
 801902c:	e00e      	b.n	801904c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801902e:	6839      	ldr	r1, [r7, #0]
 8019030:	6878      	ldr	r0, [r7, #4]
 8019032:	f000 fd0d 	bl	8019a50 <USBD_SetFeature>
          break;
 8019036:	e009      	b.n	801904c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8019038:	6839      	ldr	r1, [r7, #0]
 801903a:	6878      	ldr	r0, [r7, #4]
 801903c:	f000 fd31 	bl	8019aa2 <USBD_ClrFeature>
          break;
 8019040:	e004      	b.n	801904c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8019042:	6839      	ldr	r1, [r7, #0]
 8019044:	6878      	ldr	r0, [r7, #4]
 8019046:	f000 fd88 	bl	8019b5a <USBD_CtlError>
          break;
 801904a:	bf00      	nop
      }
      break;
 801904c:	e004      	b.n	8019058 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801904e:	6839      	ldr	r1, [r7, #0]
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	f000 fd82 	bl	8019b5a <USBD_CtlError>
      break;
 8019056:	bf00      	nop
  }

  return ret;
 8019058:	7bfb      	ldrb	r3, [r7, #15]
}
 801905a:	4618      	mov	r0, r3
 801905c:	3710      	adds	r7, #16
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}
 8019062:	bf00      	nop

08019064 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b084      	sub	sp, #16
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
 801906c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801906e:	2300      	movs	r3, #0
 8019070:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019072:	683b      	ldr	r3, [r7, #0]
 8019074:	781b      	ldrb	r3, [r3, #0]
 8019076:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801907a:	2b40      	cmp	r3, #64	@ 0x40
 801907c:	d005      	beq.n	801908a <USBD_StdItfReq+0x26>
 801907e:	2b40      	cmp	r3, #64	@ 0x40
 8019080:	d852      	bhi.n	8019128 <USBD_StdItfReq+0xc4>
 8019082:	2b00      	cmp	r3, #0
 8019084:	d001      	beq.n	801908a <USBD_StdItfReq+0x26>
 8019086:	2b20      	cmp	r3, #32
 8019088:	d14e      	bne.n	8019128 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019090:	b2db      	uxtb	r3, r3
 8019092:	3b01      	subs	r3, #1
 8019094:	2b02      	cmp	r3, #2
 8019096:	d840      	bhi.n	801911a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8019098:	683b      	ldr	r3, [r7, #0]
 801909a:	889b      	ldrh	r3, [r3, #4]
 801909c:	b2db      	uxtb	r3, r3
 801909e:	2b01      	cmp	r3, #1
 80190a0:	d836      	bhi.n	8019110 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	889b      	ldrh	r3, [r3, #4]
 80190a6:	b2db      	uxtb	r3, r3
 80190a8:	4619      	mov	r1, r3
 80190aa:	6878      	ldr	r0, [r7, #4]
 80190ac:	f7ff fedb 	bl	8018e66 <USBD_CoreFindIF>
 80190b0:	4603      	mov	r3, r0
 80190b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80190b4:	7bbb      	ldrb	r3, [r7, #14]
 80190b6:	2bff      	cmp	r3, #255	@ 0xff
 80190b8:	d01d      	beq.n	80190f6 <USBD_StdItfReq+0x92>
 80190ba:	7bbb      	ldrb	r3, [r7, #14]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d11a      	bne.n	80190f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80190c0:	7bba      	ldrb	r2, [r7, #14]
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	32ae      	adds	r2, #174	@ 0xae
 80190c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190ca:	689b      	ldr	r3, [r3, #8]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d00f      	beq.n	80190f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80190d0:	7bba      	ldrb	r2, [r7, #14]
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80190d8:	7bba      	ldrb	r2, [r7, #14]
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	32ae      	adds	r2, #174	@ 0xae
 80190de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190e2:	689b      	ldr	r3, [r3, #8]
 80190e4:	6839      	ldr	r1, [r7, #0]
 80190e6:	6878      	ldr	r0, [r7, #4]
 80190e8:	4798      	blx	r3
 80190ea:	4603      	mov	r3, r0
 80190ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80190ee:	e004      	b.n	80190fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80190f0:	2303      	movs	r3, #3
 80190f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80190f4:	e001      	b.n	80190fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80190f6:	2303      	movs	r3, #3
 80190f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80190fa:	683b      	ldr	r3, [r7, #0]
 80190fc:	88db      	ldrh	r3, [r3, #6]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d110      	bne.n	8019124 <USBD_StdItfReq+0xc0>
 8019102:	7bfb      	ldrb	r3, [r7, #15]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d10d      	bne.n	8019124 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8019108:	6878      	ldr	r0, [r7, #4]
 801910a:	f000 fdfd 	bl	8019d08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801910e:	e009      	b.n	8019124 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8019110:	6839      	ldr	r1, [r7, #0]
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f000 fd21 	bl	8019b5a <USBD_CtlError>
          break;
 8019118:	e004      	b.n	8019124 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801911a:	6839      	ldr	r1, [r7, #0]
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f000 fd1c 	bl	8019b5a <USBD_CtlError>
          break;
 8019122:	e000      	b.n	8019126 <USBD_StdItfReq+0xc2>
          break;
 8019124:	bf00      	nop
      }
      break;
 8019126:	e004      	b.n	8019132 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8019128:	6839      	ldr	r1, [r7, #0]
 801912a:	6878      	ldr	r0, [r7, #4]
 801912c:	f000 fd15 	bl	8019b5a <USBD_CtlError>
      break;
 8019130:	bf00      	nop
  }

  return ret;
 8019132:	7bfb      	ldrb	r3, [r7, #15]
}
 8019134:	4618      	mov	r0, r3
 8019136:	3710      	adds	r7, #16
 8019138:	46bd      	mov	sp, r7
 801913a:	bd80      	pop	{r7, pc}

0801913c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b084      	sub	sp, #16
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
 8019144:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8019146:	2300      	movs	r3, #0
 8019148:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	889b      	ldrh	r3, [r3, #4]
 801914e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	781b      	ldrb	r3, [r3, #0]
 8019154:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019158:	2b40      	cmp	r3, #64	@ 0x40
 801915a:	d007      	beq.n	801916c <USBD_StdEPReq+0x30>
 801915c:	2b40      	cmp	r3, #64	@ 0x40
 801915e:	f200 817f 	bhi.w	8019460 <USBD_StdEPReq+0x324>
 8019162:	2b00      	cmp	r3, #0
 8019164:	d02a      	beq.n	80191bc <USBD_StdEPReq+0x80>
 8019166:	2b20      	cmp	r3, #32
 8019168:	f040 817a 	bne.w	8019460 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801916c:	7bbb      	ldrb	r3, [r7, #14]
 801916e:	4619      	mov	r1, r3
 8019170:	6878      	ldr	r0, [r7, #4]
 8019172:	f7ff fe85 	bl	8018e80 <USBD_CoreFindEP>
 8019176:	4603      	mov	r3, r0
 8019178:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801917a:	7b7b      	ldrb	r3, [r7, #13]
 801917c:	2bff      	cmp	r3, #255	@ 0xff
 801917e:	f000 8174 	beq.w	801946a <USBD_StdEPReq+0x32e>
 8019182:	7b7b      	ldrb	r3, [r7, #13]
 8019184:	2b00      	cmp	r3, #0
 8019186:	f040 8170 	bne.w	801946a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801918a:	7b7a      	ldrb	r2, [r7, #13]
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8019192:	7b7a      	ldrb	r2, [r7, #13]
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	32ae      	adds	r2, #174	@ 0xae
 8019198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801919c:	689b      	ldr	r3, [r3, #8]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	f000 8163 	beq.w	801946a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80191a4:	7b7a      	ldrb	r2, [r7, #13]
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	32ae      	adds	r2, #174	@ 0xae
 80191aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191ae:	689b      	ldr	r3, [r3, #8]
 80191b0:	6839      	ldr	r1, [r7, #0]
 80191b2:	6878      	ldr	r0, [r7, #4]
 80191b4:	4798      	blx	r3
 80191b6:	4603      	mov	r3, r0
 80191b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80191ba:	e156      	b.n	801946a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80191bc:	683b      	ldr	r3, [r7, #0]
 80191be:	785b      	ldrb	r3, [r3, #1]
 80191c0:	2b03      	cmp	r3, #3
 80191c2:	d008      	beq.n	80191d6 <USBD_StdEPReq+0x9a>
 80191c4:	2b03      	cmp	r3, #3
 80191c6:	f300 8145 	bgt.w	8019454 <USBD_StdEPReq+0x318>
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	f000 809b 	beq.w	8019306 <USBD_StdEPReq+0x1ca>
 80191d0:	2b01      	cmp	r3, #1
 80191d2:	d03c      	beq.n	801924e <USBD_StdEPReq+0x112>
 80191d4:	e13e      	b.n	8019454 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80191dc:	b2db      	uxtb	r3, r3
 80191de:	2b02      	cmp	r3, #2
 80191e0:	d002      	beq.n	80191e8 <USBD_StdEPReq+0xac>
 80191e2:	2b03      	cmp	r3, #3
 80191e4:	d016      	beq.n	8019214 <USBD_StdEPReq+0xd8>
 80191e6:	e02c      	b.n	8019242 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80191e8:	7bbb      	ldrb	r3, [r7, #14]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d00d      	beq.n	801920a <USBD_StdEPReq+0xce>
 80191ee:	7bbb      	ldrb	r3, [r7, #14]
 80191f0:	2b80      	cmp	r3, #128	@ 0x80
 80191f2:	d00a      	beq.n	801920a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80191f4:	7bbb      	ldrb	r3, [r7, #14]
 80191f6:	4619      	mov	r1, r3
 80191f8:	6878      	ldr	r0, [r7, #4]
 80191fa:	f001 f9e3 	bl	801a5c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80191fe:	2180      	movs	r1, #128	@ 0x80
 8019200:	6878      	ldr	r0, [r7, #4]
 8019202:	f001 f9df 	bl	801a5c4 <USBD_LL_StallEP>
 8019206:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019208:	e020      	b.n	801924c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801920a:	6839      	ldr	r1, [r7, #0]
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f000 fca4 	bl	8019b5a <USBD_CtlError>
              break;
 8019212:	e01b      	b.n	801924c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	885b      	ldrh	r3, [r3, #2]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d10e      	bne.n	801923a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801921c:	7bbb      	ldrb	r3, [r7, #14]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d00b      	beq.n	801923a <USBD_StdEPReq+0xfe>
 8019222:	7bbb      	ldrb	r3, [r7, #14]
 8019224:	2b80      	cmp	r3, #128	@ 0x80
 8019226:	d008      	beq.n	801923a <USBD_StdEPReq+0xfe>
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	88db      	ldrh	r3, [r3, #6]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d104      	bne.n	801923a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8019230:	7bbb      	ldrb	r3, [r7, #14]
 8019232:	4619      	mov	r1, r3
 8019234:	6878      	ldr	r0, [r7, #4]
 8019236:	f001 f9c5 	bl	801a5c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801923a:	6878      	ldr	r0, [r7, #4]
 801923c:	f000 fd64 	bl	8019d08 <USBD_CtlSendStatus>

              break;
 8019240:	e004      	b.n	801924c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8019242:	6839      	ldr	r1, [r7, #0]
 8019244:	6878      	ldr	r0, [r7, #4]
 8019246:	f000 fc88 	bl	8019b5a <USBD_CtlError>
              break;
 801924a:	bf00      	nop
          }
          break;
 801924c:	e107      	b.n	801945e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019254:	b2db      	uxtb	r3, r3
 8019256:	2b02      	cmp	r3, #2
 8019258:	d002      	beq.n	8019260 <USBD_StdEPReq+0x124>
 801925a:	2b03      	cmp	r3, #3
 801925c:	d016      	beq.n	801928c <USBD_StdEPReq+0x150>
 801925e:	e04b      	b.n	80192f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019260:	7bbb      	ldrb	r3, [r7, #14]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d00d      	beq.n	8019282 <USBD_StdEPReq+0x146>
 8019266:	7bbb      	ldrb	r3, [r7, #14]
 8019268:	2b80      	cmp	r3, #128	@ 0x80
 801926a:	d00a      	beq.n	8019282 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801926c:	7bbb      	ldrb	r3, [r7, #14]
 801926e:	4619      	mov	r1, r3
 8019270:	6878      	ldr	r0, [r7, #4]
 8019272:	f001 f9a7 	bl	801a5c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8019276:	2180      	movs	r1, #128	@ 0x80
 8019278:	6878      	ldr	r0, [r7, #4]
 801927a:	f001 f9a3 	bl	801a5c4 <USBD_LL_StallEP>
 801927e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019280:	e040      	b.n	8019304 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8019282:	6839      	ldr	r1, [r7, #0]
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	f000 fc68 	bl	8019b5a <USBD_CtlError>
              break;
 801928a:	e03b      	b.n	8019304 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801928c:	683b      	ldr	r3, [r7, #0]
 801928e:	885b      	ldrh	r3, [r3, #2]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d136      	bne.n	8019302 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8019294:	7bbb      	ldrb	r3, [r7, #14]
 8019296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801929a:	2b00      	cmp	r3, #0
 801929c:	d004      	beq.n	80192a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801929e:	7bbb      	ldrb	r3, [r7, #14]
 80192a0:	4619      	mov	r1, r3
 80192a2:	6878      	ldr	r0, [r7, #4]
 80192a4:	f001 f9ad 	bl	801a602 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80192a8:	6878      	ldr	r0, [r7, #4]
 80192aa:	f000 fd2d 	bl	8019d08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80192ae:	7bbb      	ldrb	r3, [r7, #14]
 80192b0:	4619      	mov	r1, r3
 80192b2:	6878      	ldr	r0, [r7, #4]
 80192b4:	f7ff fde4 	bl	8018e80 <USBD_CoreFindEP>
 80192b8:	4603      	mov	r3, r0
 80192ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80192bc:	7b7b      	ldrb	r3, [r7, #13]
 80192be:	2bff      	cmp	r3, #255	@ 0xff
 80192c0:	d01f      	beq.n	8019302 <USBD_StdEPReq+0x1c6>
 80192c2:	7b7b      	ldrb	r3, [r7, #13]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d11c      	bne.n	8019302 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80192c8:	7b7a      	ldrb	r2, [r7, #13]
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80192d0:	7b7a      	ldrb	r2, [r7, #13]
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	32ae      	adds	r2, #174	@ 0xae
 80192d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192da:	689b      	ldr	r3, [r3, #8]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d010      	beq.n	8019302 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80192e0:	7b7a      	ldrb	r2, [r7, #13]
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	32ae      	adds	r2, #174	@ 0xae
 80192e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192ea:	689b      	ldr	r3, [r3, #8]
 80192ec:	6839      	ldr	r1, [r7, #0]
 80192ee:	6878      	ldr	r0, [r7, #4]
 80192f0:	4798      	blx	r3
 80192f2:	4603      	mov	r3, r0
 80192f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80192f6:	e004      	b.n	8019302 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80192f8:	6839      	ldr	r1, [r7, #0]
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	f000 fc2d 	bl	8019b5a <USBD_CtlError>
              break;
 8019300:	e000      	b.n	8019304 <USBD_StdEPReq+0x1c8>
              break;
 8019302:	bf00      	nop
          }
          break;
 8019304:	e0ab      	b.n	801945e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801930c:	b2db      	uxtb	r3, r3
 801930e:	2b02      	cmp	r3, #2
 8019310:	d002      	beq.n	8019318 <USBD_StdEPReq+0x1dc>
 8019312:	2b03      	cmp	r3, #3
 8019314:	d032      	beq.n	801937c <USBD_StdEPReq+0x240>
 8019316:	e097      	b.n	8019448 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019318:	7bbb      	ldrb	r3, [r7, #14]
 801931a:	2b00      	cmp	r3, #0
 801931c:	d007      	beq.n	801932e <USBD_StdEPReq+0x1f2>
 801931e:	7bbb      	ldrb	r3, [r7, #14]
 8019320:	2b80      	cmp	r3, #128	@ 0x80
 8019322:	d004      	beq.n	801932e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8019324:	6839      	ldr	r1, [r7, #0]
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f000 fc17 	bl	8019b5a <USBD_CtlError>
                break;
 801932c:	e091      	b.n	8019452 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801932e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019332:	2b00      	cmp	r3, #0
 8019334:	da0b      	bge.n	801934e <USBD_StdEPReq+0x212>
 8019336:	7bbb      	ldrb	r3, [r7, #14]
 8019338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801933c:	4613      	mov	r3, r2
 801933e:	009b      	lsls	r3, r3, #2
 8019340:	4413      	add	r3, r2
 8019342:	009b      	lsls	r3, r3, #2
 8019344:	3310      	adds	r3, #16
 8019346:	687a      	ldr	r2, [r7, #4]
 8019348:	4413      	add	r3, r2
 801934a:	3304      	adds	r3, #4
 801934c:	e00b      	b.n	8019366 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801934e:	7bbb      	ldrb	r3, [r7, #14]
 8019350:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019354:	4613      	mov	r3, r2
 8019356:	009b      	lsls	r3, r3, #2
 8019358:	4413      	add	r3, r2
 801935a:	009b      	lsls	r3, r3, #2
 801935c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8019360:	687a      	ldr	r2, [r7, #4]
 8019362:	4413      	add	r3, r2
 8019364:	3304      	adds	r3, #4
 8019366:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8019368:	68bb      	ldr	r3, [r7, #8]
 801936a:	2200      	movs	r2, #0
 801936c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801936e:	68bb      	ldr	r3, [r7, #8]
 8019370:	2202      	movs	r2, #2
 8019372:	4619      	mov	r1, r3
 8019374:	6878      	ldr	r0, [r7, #4]
 8019376:	f000 fc6d 	bl	8019c54 <USBD_CtlSendData>
              break;
 801937a:	e06a      	b.n	8019452 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801937c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019380:	2b00      	cmp	r3, #0
 8019382:	da11      	bge.n	80193a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8019384:	7bbb      	ldrb	r3, [r7, #14]
 8019386:	f003 020f 	and.w	r2, r3, #15
 801938a:	6879      	ldr	r1, [r7, #4]
 801938c:	4613      	mov	r3, r2
 801938e:	009b      	lsls	r3, r3, #2
 8019390:	4413      	add	r3, r2
 8019392:	009b      	lsls	r3, r3, #2
 8019394:	440b      	add	r3, r1
 8019396:	3324      	adds	r3, #36	@ 0x24
 8019398:	881b      	ldrh	r3, [r3, #0]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d117      	bne.n	80193ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801939e:	6839      	ldr	r1, [r7, #0]
 80193a0:	6878      	ldr	r0, [r7, #4]
 80193a2:	f000 fbda 	bl	8019b5a <USBD_CtlError>
                  break;
 80193a6:	e054      	b.n	8019452 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80193a8:	7bbb      	ldrb	r3, [r7, #14]
 80193aa:	f003 020f 	and.w	r2, r3, #15
 80193ae:	6879      	ldr	r1, [r7, #4]
 80193b0:	4613      	mov	r3, r2
 80193b2:	009b      	lsls	r3, r3, #2
 80193b4:	4413      	add	r3, r2
 80193b6:	009b      	lsls	r3, r3, #2
 80193b8:	440b      	add	r3, r1
 80193ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80193be:	881b      	ldrh	r3, [r3, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d104      	bne.n	80193ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80193c4:	6839      	ldr	r1, [r7, #0]
 80193c6:	6878      	ldr	r0, [r7, #4]
 80193c8:	f000 fbc7 	bl	8019b5a <USBD_CtlError>
                  break;
 80193cc:	e041      	b.n	8019452 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80193ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	da0b      	bge.n	80193ee <USBD_StdEPReq+0x2b2>
 80193d6:	7bbb      	ldrb	r3, [r7, #14]
 80193d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80193dc:	4613      	mov	r3, r2
 80193de:	009b      	lsls	r3, r3, #2
 80193e0:	4413      	add	r3, r2
 80193e2:	009b      	lsls	r3, r3, #2
 80193e4:	3310      	adds	r3, #16
 80193e6:	687a      	ldr	r2, [r7, #4]
 80193e8:	4413      	add	r3, r2
 80193ea:	3304      	adds	r3, #4
 80193ec:	e00b      	b.n	8019406 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80193ee:	7bbb      	ldrb	r3, [r7, #14]
 80193f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80193f4:	4613      	mov	r3, r2
 80193f6:	009b      	lsls	r3, r3, #2
 80193f8:	4413      	add	r3, r2
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8019400:	687a      	ldr	r2, [r7, #4]
 8019402:	4413      	add	r3, r2
 8019404:	3304      	adds	r3, #4
 8019406:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8019408:	7bbb      	ldrb	r3, [r7, #14]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d002      	beq.n	8019414 <USBD_StdEPReq+0x2d8>
 801940e:	7bbb      	ldrb	r3, [r7, #14]
 8019410:	2b80      	cmp	r3, #128	@ 0x80
 8019412:	d103      	bne.n	801941c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8019414:	68bb      	ldr	r3, [r7, #8]
 8019416:	2200      	movs	r2, #0
 8019418:	601a      	str	r2, [r3, #0]
 801941a:	e00e      	b.n	801943a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801941c:	7bbb      	ldrb	r3, [r7, #14]
 801941e:	4619      	mov	r1, r3
 8019420:	6878      	ldr	r0, [r7, #4]
 8019422:	f001 f90d 	bl	801a640 <USBD_LL_IsStallEP>
 8019426:	4603      	mov	r3, r0
 8019428:	2b00      	cmp	r3, #0
 801942a:	d003      	beq.n	8019434 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801942c:	68bb      	ldr	r3, [r7, #8]
 801942e:	2201      	movs	r2, #1
 8019430:	601a      	str	r2, [r3, #0]
 8019432:	e002      	b.n	801943a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	2200      	movs	r2, #0
 8019438:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801943a:	68bb      	ldr	r3, [r7, #8]
 801943c:	2202      	movs	r2, #2
 801943e:	4619      	mov	r1, r3
 8019440:	6878      	ldr	r0, [r7, #4]
 8019442:	f000 fc07 	bl	8019c54 <USBD_CtlSendData>
              break;
 8019446:	e004      	b.n	8019452 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8019448:	6839      	ldr	r1, [r7, #0]
 801944a:	6878      	ldr	r0, [r7, #4]
 801944c:	f000 fb85 	bl	8019b5a <USBD_CtlError>
              break;
 8019450:	bf00      	nop
          }
          break;
 8019452:	e004      	b.n	801945e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8019454:	6839      	ldr	r1, [r7, #0]
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	f000 fb7f 	bl	8019b5a <USBD_CtlError>
          break;
 801945c:	bf00      	nop
      }
      break;
 801945e:	e005      	b.n	801946c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8019460:	6839      	ldr	r1, [r7, #0]
 8019462:	6878      	ldr	r0, [r7, #4]
 8019464:	f000 fb79 	bl	8019b5a <USBD_CtlError>
      break;
 8019468:	e000      	b.n	801946c <USBD_StdEPReq+0x330>
      break;
 801946a:	bf00      	nop
  }

  return ret;
 801946c:	7bfb      	ldrb	r3, [r7, #15]
}
 801946e:	4618      	mov	r0, r3
 8019470:	3710      	adds	r7, #16
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}
	...

08019478 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b084      	sub	sp, #16
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
 8019480:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019482:	2300      	movs	r3, #0
 8019484:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8019486:	2300      	movs	r3, #0
 8019488:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801948a:	2300      	movs	r3, #0
 801948c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	885b      	ldrh	r3, [r3, #2]
 8019492:	0a1b      	lsrs	r3, r3, #8
 8019494:	b29b      	uxth	r3, r3
 8019496:	3b01      	subs	r3, #1
 8019498:	2b0e      	cmp	r3, #14
 801949a:	f200 8152 	bhi.w	8019742 <USBD_GetDescriptor+0x2ca>
 801949e:	a201      	add	r2, pc, #4	@ (adr r2, 80194a4 <USBD_GetDescriptor+0x2c>)
 80194a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194a4:	08019515 	.word	0x08019515
 80194a8:	0801952d 	.word	0x0801952d
 80194ac:	0801956d 	.word	0x0801956d
 80194b0:	08019743 	.word	0x08019743
 80194b4:	08019743 	.word	0x08019743
 80194b8:	080196e3 	.word	0x080196e3
 80194bc:	0801970f 	.word	0x0801970f
 80194c0:	08019743 	.word	0x08019743
 80194c4:	08019743 	.word	0x08019743
 80194c8:	08019743 	.word	0x08019743
 80194cc:	08019743 	.word	0x08019743
 80194d0:	08019743 	.word	0x08019743
 80194d4:	08019743 	.word	0x08019743
 80194d8:	08019743 	.word	0x08019743
 80194dc:	080194e1 	.word	0x080194e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80194e6:	69db      	ldr	r3, [r3, #28]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d00b      	beq.n	8019504 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80194f2:	69db      	ldr	r3, [r3, #28]
 80194f4:	687a      	ldr	r2, [r7, #4]
 80194f6:	7c12      	ldrb	r2, [r2, #16]
 80194f8:	f107 0108 	add.w	r1, r7, #8
 80194fc:	4610      	mov	r0, r2
 80194fe:	4798      	blx	r3
 8019500:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019502:	e126      	b.n	8019752 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019504:	6839      	ldr	r1, [r7, #0]
 8019506:	6878      	ldr	r0, [r7, #4]
 8019508:	f000 fb27 	bl	8019b5a <USBD_CtlError>
        err++;
 801950c:	7afb      	ldrb	r3, [r7, #11]
 801950e:	3301      	adds	r3, #1
 8019510:	72fb      	strb	r3, [r7, #11]
      break;
 8019512:	e11e      	b.n	8019752 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	687a      	ldr	r2, [r7, #4]
 801951e:	7c12      	ldrb	r2, [r2, #16]
 8019520:	f107 0108 	add.w	r1, r7, #8
 8019524:	4610      	mov	r0, r2
 8019526:	4798      	blx	r3
 8019528:	60f8      	str	r0, [r7, #12]
      break;
 801952a:	e112      	b.n	8019752 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	7c1b      	ldrb	r3, [r3, #16]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d10d      	bne.n	8019550 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801953a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801953c:	f107 0208 	add.w	r2, r7, #8
 8019540:	4610      	mov	r0, r2
 8019542:	4798      	blx	r3
 8019544:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	3301      	adds	r3, #1
 801954a:	2202      	movs	r2, #2
 801954c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801954e:	e100      	b.n	8019752 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019558:	f107 0208 	add.w	r2, r7, #8
 801955c:	4610      	mov	r0, r2
 801955e:	4798      	blx	r3
 8019560:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	3301      	adds	r3, #1
 8019566:	2202      	movs	r2, #2
 8019568:	701a      	strb	r2, [r3, #0]
      break;
 801956a:	e0f2      	b.n	8019752 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801956c:	683b      	ldr	r3, [r7, #0]
 801956e:	885b      	ldrh	r3, [r3, #2]
 8019570:	b2db      	uxtb	r3, r3
 8019572:	2b05      	cmp	r3, #5
 8019574:	f200 80ac 	bhi.w	80196d0 <USBD_GetDescriptor+0x258>
 8019578:	a201      	add	r2, pc, #4	@ (adr r2, 8019580 <USBD_GetDescriptor+0x108>)
 801957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801957e:	bf00      	nop
 8019580:	08019599 	.word	0x08019599
 8019584:	080195cd 	.word	0x080195cd
 8019588:	08019601 	.word	0x08019601
 801958c:	08019635 	.word	0x08019635
 8019590:	08019669 	.word	0x08019669
 8019594:	0801969d 	.word	0x0801969d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801959e:	685b      	ldr	r3, [r3, #4]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d00b      	beq.n	80195bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195aa:	685b      	ldr	r3, [r3, #4]
 80195ac:	687a      	ldr	r2, [r7, #4]
 80195ae:	7c12      	ldrb	r2, [r2, #16]
 80195b0:	f107 0108 	add.w	r1, r7, #8
 80195b4:	4610      	mov	r0, r2
 80195b6:	4798      	blx	r3
 80195b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80195ba:	e091      	b.n	80196e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80195bc:	6839      	ldr	r1, [r7, #0]
 80195be:	6878      	ldr	r0, [r7, #4]
 80195c0:	f000 facb 	bl	8019b5a <USBD_CtlError>
            err++;
 80195c4:	7afb      	ldrb	r3, [r7, #11]
 80195c6:	3301      	adds	r3, #1
 80195c8:	72fb      	strb	r3, [r7, #11]
          break;
 80195ca:	e089      	b.n	80196e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195d2:	689b      	ldr	r3, [r3, #8]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d00b      	beq.n	80195f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195de:	689b      	ldr	r3, [r3, #8]
 80195e0:	687a      	ldr	r2, [r7, #4]
 80195e2:	7c12      	ldrb	r2, [r2, #16]
 80195e4:	f107 0108 	add.w	r1, r7, #8
 80195e8:	4610      	mov	r0, r2
 80195ea:	4798      	blx	r3
 80195ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80195ee:	e077      	b.n	80196e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80195f0:	6839      	ldr	r1, [r7, #0]
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f000 fab1 	bl	8019b5a <USBD_CtlError>
            err++;
 80195f8:	7afb      	ldrb	r3, [r7, #11]
 80195fa:	3301      	adds	r3, #1
 80195fc:	72fb      	strb	r3, [r7, #11]
          break;
 80195fe:	e06f      	b.n	80196e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019606:	68db      	ldr	r3, [r3, #12]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d00b      	beq.n	8019624 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019612:	68db      	ldr	r3, [r3, #12]
 8019614:	687a      	ldr	r2, [r7, #4]
 8019616:	7c12      	ldrb	r2, [r2, #16]
 8019618:	f107 0108 	add.w	r1, r7, #8
 801961c:	4610      	mov	r0, r2
 801961e:	4798      	blx	r3
 8019620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019622:	e05d      	b.n	80196e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019624:	6839      	ldr	r1, [r7, #0]
 8019626:	6878      	ldr	r0, [r7, #4]
 8019628:	f000 fa97 	bl	8019b5a <USBD_CtlError>
            err++;
 801962c:	7afb      	ldrb	r3, [r7, #11]
 801962e:	3301      	adds	r3, #1
 8019630:	72fb      	strb	r3, [r7, #11]
          break;
 8019632:	e055      	b.n	80196e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801963a:	691b      	ldr	r3, [r3, #16]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d00b      	beq.n	8019658 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019646:	691b      	ldr	r3, [r3, #16]
 8019648:	687a      	ldr	r2, [r7, #4]
 801964a:	7c12      	ldrb	r2, [r2, #16]
 801964c:	f107 0108 	add.w	r1, r7, #8
 8019650:	4610      	mov	r0, r2
 8019652:	4798      	blx	r3
 8019654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019656:	e043      	b.n	80196e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019658:	6839      	ldr	r1, [r7, #0]
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f000 fa7d 	bl	8019b5a <USBD_CtlError>
            err++;
 8019660:	7afb      	ldrb	r3, [r7, #11]
 8019662:	3301      	adds	r3, #1
 8019664:	72fb      	strb	r3, [r7, #11]
          break;
 8019666:	e03b      	b.n	80196e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801966e:	695b      	ldr	r3, [r3, #20]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d00b      	beq.n	801968c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801967a:	695b      	ldr	r3, [r3, #20]
 801967c:	687a      	ldr	r2, [r7, #4]
 801967e:	7c12      	ldrb	r2, [r2, #16]
 8019680:	f107 0108 	add.w	r1, r7, #8
 8019684:	4610      	mov	r0, r2
 8019686:	4798      	blx	r3
 8019688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801968a:	e029      	b.n	80196e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801968c:	6839      	ldr	r1, [r7, #0]
 801968e:	6878      	ldr	r0, [r7, #4]
 8019690:	f000 fa63 	bl	8019b5a <USBD_CtlError>
            err++;
 8019694:	7afb      	ldrb	r3, [r7, #11]
 8019696:	3301      	adds	r3, #1
 8019698:	72fb      	strb	r3, [r7, #11]
          break;
 801969a:	e021      	b.n	80196e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80196a2:	699b      	ldr	r3, [r3, #24]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d00b      	beq.n	80196c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80196ae:	699b      	ldr	r3, [r3, #24]
 80196b0:	687a      	ldr	r2, [r7, #4]
 80196b2:	7c12      	ldrb	r2, [r2, #16]
 80196b4:	f107 0108 	add.w	r1, r7, #8
 80196b8:	4610      	mov	r0, r2
 80196ba:	4798      	blx	r3
 80196bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80196be:	e00f      	b.n	80196e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80196c0:	6839      	ldr	r1, [r7, #0]
 80196c2:	6878      	ldr	r0, [r7, #4]
 80196c4:	f000 fa49 	bl	8019b5a <USBD_CtlError>
            err++;
 80196c8:	7afb      	ldrb	r3, [r7, #11]
 80196ca:	3301      	adds	r3, #1
 80196cc:	72fb      	strb	r3, [r7, #11]
          break;
 80196ce:	e007      	b.n	80196e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80196d0:	6839      	ldr	r1, [r7, #0]
 80196d2:	6878      	ldr	r0, [r7, #4]
 80196d4:	f000 fa41 	bl	8019b5a <USBD_CtlError>
          err++;
 80196d8:	7afb      	ldrb	r3, [r7, #11]
 80196da:	3301      	adds	r3, #1
 80196dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80196de:	bf00      	nop
      }
      break;
 80196e0:	e037      	b.n	8019752 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	7c1b      	ldrb	r3, [r3, #16]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d109      	bne.n	80196fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80196f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80196f2:	f107 0208 	add.w	r2, r7, #8
 80196f6:	4610      	mov	r0, r2
 80196f8:	4798      	blx	r3
 80196fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80196fc:	e029      	b.n	8019752 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80196fe:	6839      	ldr	r1, [r7, #0]
 8019700:	6878      	ldr	r0, [r7, #4]
 8019702:	f000 fa2a 	bl	8019b5a <USBD_CtlError>
        err++;
 8019706:	7afb      	ldrb	r3, [r7, #11]
 8019708:	3301      	adds	r3, #1
 801970a:	72fb      	strb	r3, [r7, #11]
      break;
 801970c:	e021      	b.n	8019752 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	7c1b      	ldrb	r3, [r3, #16]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d10d      	bne.n	8019732 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801971c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801971e:	f107 0208 	add.w	r2, r7, #8
 8019722:	4610      	mov	r0, r2
 8019724:	4798      	blx	r3
 8019726:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	3301      	adds	r3, #1
 801972c:	2207      	movs	r2, #7
 801972e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019730:	e00f      	b.n	8019752 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019732:	6839      	ldr	r1, [r7, #0]
 8019734:	6878      	ldr	r0, [r7, #4]
 8019736:	f000 fa10 	bl	8019b5a <USBD_CtlError>
        err++;
 801973a:	7afb      	ldrb	r3, [r7, #11]
 801973c:	3301      	adds	r3, #1
 801973e:	72fb      	strb	r3, [r7, #11]
      break;
 8019740:	e007      	b.n	8019752 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8019742:	6839      	ldr	r1, [r7, #0]
 8019744:	6878      	ldr	r0, [r7, #4]
 8019746:	f000 fa08 	bl	8019b5a <USBD_CtlError>
      err++;
 801974a:	7afb      	ldrb	r3, [r7, #11]
 801974c:	3301      	adds	r3, #1
 801974e:	72fb      	strb	r3, [r7, #11]
      break;
 8019750:	bf00      	nop
  }

  if (err != 0U)
 8019752:	7afb      	ldrb	r3, [r7, #11]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d11e      	bne.n	8019796 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	88db      	ldrh	r3, [r3, #6]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d016      	beq.n	801978e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8019760:	893b      	ldrh	r3, [r7, #8]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d00e      	beq.n	8019784 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8019766:	683b      	ldr	r3, [r7, #0]
 8019768:	88da      	ldrh	r2, [r3, #6]
 801976a:	893b      	ldrh	r3, [r7, #8]
 801976c:	4293      	cmp	r3, r2
 801976e:	bf28      	it	cs
 8019770:	4613      	movcs	r3, r2
 8019772:	b29b      	uxth	r3, r3
 8019774:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8019776:	893b      	ldrh	r3, [r7, #8]
 8019778:	461a      	mov	r2, r3
 801977a:	68f9      	ldr	r1, [r7, #12]
 801977c:	6878      	ldr	r0, [r7, #4]
 801977e:	f000 fa69 	bl	8019c54 <USBD_CtlSendData>
 8019782:	e009      	b.n	8019798 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019784:	6839      	ldr	r1, [r7, #0]
 8019786:	6878      	ldr	r0, [r7, #4]
 8019788:	f000 f9e7 	bl	8019b5a <USBD_CtlError>
 801978c:	e004      	b.n	8019798 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	f000 faba 	bl	8019d08 <USBD_CtlSendStatus>
 8019794:	e000      	b.n	8019798 <USBD_GetDescriptor+0x320>
    return;
 8019796:	bf00      	nop
  }
}
 8019798:	3710      	adds	r7, #16
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}
 801979e:	bf00      	nop

080197a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b084      	sub	sp, #16
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
 80197a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80197aa:	683b      	ldr	r3, [r7, #0]
 80197ac:	889b      	ldrh	r3, [r3, #4]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d131      	bne.n	8019816 <USBD_SetAddress+0x76>
 80197b2:	683b      	ldr	r3, [r7, #0]
 80197b4:	88db      	ldrh	r3, [r3, #6]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d12d      	bne.n	8019816 <USBD_SetAddress+0x76>
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	885b      	ldrh	r3, [r3, #2]
 80197be:	2b7f      	cmp	r3, #127	@ 0x7f
 80197c0:	d829      	bhi.n	8019816 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80197c2:	683b      	ldr	r3, [r7, #0]
 80197c4:	885b      	ldrh	r3, [r3, #2]
 80197c6:	b2db      	uxtb	r3, r3
 80197c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80197cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80197d4:	b2db      	uxtb	r3, r3
 80197d6:	2b03      	cmp	r3, #3
 80197d8:	d104      	bne.n	80197e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80197da:	6839      	ldr	r1, [r7, #0]
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	f000 f9bc 	bl	8019b5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80197e2:	e01d      	b.n	8019820 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	7bfa      	ldrb	r2, [r7, #15]
 80197e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80197ec:	7bfb      	ldrb	r3, [r7, #15]
 80197ee:	4619      	mov	r1, r3
 80197f0:	6878      	ldr	r0, [r7, #4]
 80197f2:	f000 ff51 	bl	801a698 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80197f6:	6878      	ldr	r0, [r7, #4]
 80197f8:	f000 fa86 	bl	8019d08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80197fc:	7bfb      	ldrb	r3, [r7, #15]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d004      	beq.n	801980c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	2202      	movs	r2, #2
 8019806:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801980a:	e009      	b.n	8019820 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	2201      	movs	r2, #1
 8019810:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019814:	e004      	b.n	8019820 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8019816:	6839      	ldr	r1, [r7, #0]
 8019818:	6878      	ldr	r0, [r7, #4]
 801981a:	f000 f99e 	bl	8019b5a <USBD_CtlError>
  }
}
 801981e:	bf00      	nop
 8019820:	bf00      	nop
 8019822:	3710      	adds	r7, #16
 8019824:	46bd      	mov	sp, r7
 8019826:	bd80      	pop	{r7, pc}

08019828 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b084      	sub	sp, #16
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
 8019830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019832:	2300      	movs	r3, #0
 8019834:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	885b      	ldrh	r3, [r3, #2]
 801983a:	b2da      	uxtb	r2, r3
 801983c:	4b4e      	ldr	r3, [pc, #312]	@ (8019978 <USBD_SetConfig+0x150>)
 801983e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8019840:	4b4d      	ldr	r3, [pc, #308]	@ (8019978 <USBD_SetConfig+0x150>)
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	2b01      	cmp	r3, #1
 8019846:	d905      	bls.n	8019854 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8019848:	6839      	ldr	r1, [r7, #0]
 801984a:	6878      	ldr	r0, [r7, #4]
 801984c:	f000 f985 	bl	8019b5a <USBD_CtlError>
    return USBD_FAIL;
 8019850:	2303      	movs	r3, #3
 8019852:	e08c      	b.n	801996e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801985a:	b2db      	uxtb	r3, r3
 801985c:	2b02      	cmp	r3, #2
 801985e:	d002      	beq.n	8019866 <USBD_SetConfig+0x3e>
 8019860:	2b03      	cmp	r3, #3
 8019862:	d029      	beq.n	80198b8 <USBD_SetConfig+0x90>
 8019864:	e075      	b.n	8019952 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8019866:	4b44      	ldr	r3, [pc, #272]	@ (8019978 <USBD_SetConfig+0x150>)
 8019868:	781b      	ldrb	r3, [r3, #0]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d020      	beq.n	80198b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801986e:	4b42      	ldr	r3, [pc, #264]	@ (8019978 <USBD_SetConfig+0x150>)
 8019870:	781b      	ldrb	r3, [r3, #0]
 8019872:	461a      	mov	r2, r3
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019878:	4b3f      	ldr	r3, [pc, #252]	@ (8019978 <USBD_SetConfig+0x150>)
 801987a:	781b      	ldrb	r3, [r3, #0]
 801987c:	4619      	mov	r1, r3
 801987e:	6878      	ldr	r0, [r7, #4]
 8019880:	f7fe ffb9 	bl	80187f6 <USBD_SetClassConfig>
 8019884:	4603      	mov	r3, r0
 8019886:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8019888:	7bfb      	ldrb	r3, [r7, #15]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d008      	beq.n	80198a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801988e:	6839      	ldr	r1, [r7, #0]
 8019890:	6878      	ldr	r0, [r7, #4]
 8019892:	f000 f962 	bl	8019b5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	2202      	movs	r2, #2
 801989a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801989e:	e065      	b.n	801996c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80198a0:	6878      	ldr	r0, [r7, #4]
 80198a2:	f000 fa31 	bl	8019d08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2203      	movs	r2, #3
 80198aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80198ae:	e05d      	b.n	801996c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80198b0:	6878      	ldr	r0, [r7, #4]
 80198b2:	f000 fa29 	bl	8019d08 <USBD_CtlSendStatus>
      break;
 80198b6:	e059      	b.n	801996c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80198b8:	4b2f      	ldr	r3, [pc, #188]	@ (8019978 <USBD_SetConfig+0x150>)
 80198ba:	781b      	ldrb	r3, [r3, #0]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d112      	bne.n	80198e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	2202      	movs	r2, #2
 80198c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80198c8:	4b2b      	ldr	r3, [pc, #172]	@ (8019978 <USBD_SetConfig+0x150>)
 80198ca:	781b      	ldrb	r3, [r3, #0]
 80198cc:	461a      	mov	r2, r3
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80198d2:	4b29      	ldr	r3, [pc, #164]	@ (8019978 <USBD_SetConfig+0x150>)
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	4619      	mov	r1, r3
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f7fe ffa8 	bl	801882e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80198de:	6878      	ldr	r0, [r7, #4]
 80198e0:	f000 fa12 	bl	8019d08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80198e4:	e042      	b.n	801996c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80198e6:	4b24      	ldr	r3, [pc, #144]	@ (8019978 <USBD_SetConfig+0x150>)
 80198e8:	781b      	ldrb	r3, [r3, #0]
 80198ea:	461a      	mov	r2, r3
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d02a      	beq.n	801994a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	685b      	ldr	r3, [r3, #4]
 80198f8:	b2db      	uxtb	r3, r3
 80198fa:	4619      	mov	r1, r3
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f7fe ff96 	bl	801882e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8019902:	4b1d      	ldr	r3, [pc, #116]	@ (8019978 <USBD_SetConfig+0x150>)
 8019904:	781b      	ldrb	r3, [r3, #0]
 8019906:	461a      	mov	r2, r3
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801990c:	4b1a      	ldr	r3, [pc, #104]	@ (8019978 <USBD_SetConfig+0x150>)
 801990e:	781b      	ldrb	r3, [r3, #0]
 8019910:	4619      	mov	r1, r3
 8019912:	6878      	ldr	r0, [r7, #4]
 8019914:	f7fe ff6f 	bl	80187f6 <USBD_SetClassConfig>
 8019918:	4603      	mov	r3, r0
 801991a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801991c:	7bfb      	ldrb	r3, [r7, #15]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d00f      	beq.n	8019942 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8019922:	6839      	ldr	r1, [r7, #0]
 8019924:	6878      	ldr	r0, [r7, #4]
 8019926:	f000 f918 	bl	8019b5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	685b      	ldr	r3, [r3, #4]
 801992e:	b2db      	uxtb	r3, r3
 8019930:	4619      	mov	r1, r3
 8019932:	6878      	ldr	r0, [r7, #4]
 8019934:	f7fe ff7b 	bl	801882e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2202      	movs	r2, #2
 801993c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8019940:	e014      	b.n	801996c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019942:	6878      	ldr	r0, [r7, #4]
 8019944:	f000 f9e0 	bl	8019d08 <USBD_CtlSendStatus>
      break;
 8019948:	e010      	b.n	801996c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f000 f9dc 	bl	8019d08 <USBD_CtlSendStatus>
      break;
 8019950:	e00c      	b.n	801996c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8019952:	6839      	ldr	r1, [r7, #0]
 8019954:	6878      	ldr	r0, [r7, #4]
 8019956:	f000 f900 	bl	8019b5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801995a:	4b07      	ldr	r3, [pc, #28]	@ (8019978 <USBD_SetConfig+0x150>)
 801995c:	781b      	ldrb	r3, [r3, #0]
 801995e:	4619      	mov	r1, r3
 8019960:	6878      	ldr	r0, [r7, #4]
 8019962:	f7fe ff64 	bl	801882e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8019966:	2303      	movs	r3, #3
 8019968:	73fb      	strb	r3, [r7, #15]
      break;
 801996a:	bf00      	nop
  }

  return ret;
 801996c:	7bfb      	ldrb	r3, [r7, #15]
}
 801996e:	4618      	mov	r0, r3
 8019970:	3710      	adds	r7, #16
 8019972:	46bd      	mov	sp, r7
 8019974:	bd80      	pop	{r7, pc}
 8019976:	bf00      	nop
 8019978:	240470f0 	.word	0x240470f0

0801997c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b082      	sub	sp, #8
 8019980:	af00      	add	r7, sp, #0
 8019982:	6078      	str	r0, [r7, #4]
 8019984:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	88db      	ldrh	r3, [r3, #6]
 801998a:	2b01      	cmp	r3, #1
 801998c:	d004      	beq.n	8019998 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801998e:	6839      	ldr	r1, [r7, #0]
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f000 f8e2 	bl	8019b5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8019996:	e023      	b.n	80199e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801999e:	b2db      	uxtb	r3, r3
 80199a0:	2b02      	cmp	r3, #2
 80199a2:	dc02      	bgt.n	80199aa <USBD_GetConfig+0x2e>
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	dc03      	bgt.n	80199b0 <USBD_GetConfig+0x34>
 80199a8:	e015      	b.n	80199d6 <USBD_GetConfig+0x5a>
 80199aa:	2b03      	cmp	r3, #3
 80199ac:	d00b      	beq.n	80199c6 <USBD_GetConfig+0x4a>
 80199ae:	e012      	b.n	80199d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	2200      	movs	r2, #0
 80199b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	3308      	adds	r3, #8
 80199ba:	2201      	movs	r2, #1
 80199bc:	4619      	mov	r1, r3
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f000 f948 	bl	8019c54 <USBD_CtlSendData>
        break;
 80199c4:	e00c      	b.n	80199e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	3304      	adds	r3, #4
 80199ca:	2201      	movs	r2, #1
 80199cc:	4619      	mov	r1, r3
 80199ce:	6878      	ldr	r0, [r7, #4]
 80199d0:	f000 f940 	bl	8019c54 <USBD_CtlSendData>
        break;
 80199d4:	e004      	b.n	80199e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80199d6:	6839      	ldr	r1, [r7, #0]
 80199d8:	6878      	ldr	r0, [r7, #4]
 80199da:	f000 f8be 	bl	8019b5a <USBD_CtlError>
        break;
 80199de:	bf00      	nop
}
 80199e0:	bf00      	nop
 80199e2:	3708      	adds	r7, #8
 80199e4:	46bd      	mov	sp, r7
 80199e6:	bd80      	pop	{r7, pc}

080199e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b082      	sub	sp, #8
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
 80199f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80199f8:	b2db      	uxtb	r3, r3
 80199fa:	3b01      	subs	r3, #1
 80199fc:	2b02      	cmp	r3, #2
 80199fe:	d81e      	bhi.n	8019a3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	88db      	ldrh	r3, [r3, #6]
 8019a04:	2b02      	cmp	r3, #2
 8019a06:	d004      	beq.n	8019a12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8019a08:	6839      	ldr	r1, [r7, #0]
 8019a0a:	6878      	ldr	r0, [r7, #4]
 8019a0c:	f000 f8a5 	bl	8019b5a <USBD_CtlError>
        break;
 8019a10:	e01a      	b.n	8019a48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	2201      	movs	r2, #1
 8019a16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d005      	beq.n	8019a2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	68db      	ldr	r3, [r3, #12]
 8019a26:	f043 0202 	orr.w	r2, r3, #2
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	330c      	adds	r3, #12
 8019a32:	2202      	movs	r2, #2
 8019a34:	4619      	mov	r1, r3
 8019a36:	6878      	ldr	r0, [r7, #4]
 8019a38:	f000 f90c 	bl	8019c54 <USBD_CtlSendData>
      break;
 8019a3c:	e004      	b.n	8019a48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8019a3e:	6839      	ldr	r1, [r7, #0]
 8019a40:	6878      	ldr	r0, [r7, #4]
 8019a42:	f000 f88a 	bl	8019b5a <USBD_CtlError>
      break;
 8019a46:	bf00      	nop
  }
}
 8019a48:	bf00      	nop
 8019a4a:	3708      	adds	r7, #8
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}

08019a50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b082      	sub	sp, #8
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
 8019a58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019a5a:	683b      	ldr	r3, [r7, #0]
 8019a5c:	885b      	ldrh	r3, [r3, #2]
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d107      	bne.n	8019a72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	2201      	movs	r2, #1
 8019a66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8019a6a:	6878      	ldr	r0, [r7, #4]
 8019a6c:	f000 f94c 	bl	8019d08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8019a70:	e013      	b.n	8019a9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8019a72:	683b      	ldr	r3, [r7, #0]
 8019a74:	885b      	ldrh	r3, [r3, #2]
 8019a76:	2b02      	cmp	r3, #2
 8019a78:	d10b      	bne.n	8019a92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8019a7a:	683b      	ldr	r3, [r7, #0]
 8019a7c:	889b      	ldrh	r3, [r3, #4]
 8019a7e:	0a1b      	lsrs	r3, r3, #8
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	b2da      	uxtb	r2, r3
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8019a8a:	6878      	ldr	r0, [r7, #4]
 8019a8c:	f000 f93c 	bl	8019d08 <USBD_CtlSendStatus>
}
 8019a90:	e003      	b.n	8019a9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8019a92:	6839      	ldr	r1, [r7, #0]
 8019a94:	6878      	ldr	r0, [r7, #4]
 8019a96:	f000 f860 	bl	8019b5a <USBD_CtlError>
}
 8019a9a:	bf00      	nop
 8019a9c:	3708      	adds	r7, #8
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}

08019aa2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019aa2:	b580      	push	{r7, lr}
 8019aa4:	b082      	sub	sp, #8
 8019aa6:	af00      	add	r7, sp, #0
 8019aa8:	6078      	str	r0, [r7, #4]
 8019aaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019ab2:	b2db      	uxtb	r3, r3
 8019ab4:	3b01      	subs	r3, #1
 8019ab6:	2b02      	cmp	r3, #2
 8019ab8:	d80b      	bhi.n	8019ad2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019aba:	683b      	ldr	r3, [r7, #0]
 8019abc:	885b      	ldrh	r3, [r3, #2]
 8019abe:	2b01      	cmp	r3, #1
 8019ac0:	d10c      	bne.n	8019adc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8019aca:	6878      	ldr	r0, [r7, #4]
 8019acc:	f000 f91c 	bl	8019d08 <USBD_CtlSendStatus>
      }
      break;
 8019ad0:	e004      	b.n	8019adc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8019ad2:	6839      	ldr	r1, [r7, #0]
 8019ad4:	6878      	ldr	r0, [r7, #4]
 8019ad6:	f000 f840 	bl	8019b5a <USBD_CtlError>
      break;
 8019ada:	e000      	b.n	8019ade <USBD_ClrFeature+0x3c>
      break;
 8019adc:	bf00      	nop
  }
}
 8019ade:	bf00      	nop
 8019ae0:	3708      	adds	r7, #8
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	bd80      	pop	{r7, pc}

08019ae6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8019ae6:	b580      	push	{r7, lr}
 8019ae8:	b084      	sub	sp, #16
 8019aea:	af00      	add	r7, sp, #0
 8019aec:	6078      	str	r0, [r7, #4]
 8019aee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8019af0:	683b      	ldr	r3, [r7, #0]
 8019af2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	781a      	ldrb	r2, [r3, #0]
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	3301      	adds	r3, #1
 8019b00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	781a      	ldrb	r2, [r3, #0]
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8019b10:	68f8      	ldr	r0, [r7, #12]
 8019b12:	f7ff fa16 	bl	8018f42 <SWAPBYTE>
 8019b16:	4603      	mov	r3, r0
 8019b18:	461a      	mov	r2, r3
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	3301      	adds	r3, #1
 8019b22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	3301      	adds	r3, #1
 8019b28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8019b2a:	68f8      	ldr	r0, [r7, #12]
 8019b2c:	f7ff fa09 	bl	8018f42 <SWAPBYTE>
 8019b30:	4603      	mov	r3, r0
 8019b32:	461a      	mov	r2, r3
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	3301      	adds	r3, #1
 8019b42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8019b44:	68f8      	ldr	r0, [r7, #12]
 8019b46:	f7ff f9fc 	bl	8018f42 <SWAPBYTE>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	461a      	mov	r2, r3
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	80da      	strh	r2, [r3, #6]
}
 8019b52:	bf00      	nop
 8019b54:	3710      	adds	r7, #16
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}

08019b5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019b5a:	b580      	push	{r7, lr}
 8019b5c:	b082      	sub	sp, #8
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	6078      	str	r0, [r7, #4]
 8019b62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8019b64:	2180      	movs	r1, #128	@ 0x80
 8019b66:	6878      	ldr	r0, [r7, #4]
 8019b68:	f000 fd2c 	bl	801a5c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8019b6c:	2100      	movs	r1, #0
 8019b6e:	6878      	ldr	r0, [r7, #4]
 8019b70:	f000 fd28 	bl	801a5c4 <USBD_LL_StallEP>
}
 8019b74:	bf00      	nop
 8019b76:	3708      	adds	r7, #8
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}

08019b7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b086      	sub	sp, #24
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	60f8      	str	r0, [r7, #12]
 8019b84:	60b9      	str	r1, [r7, #8]
 8019b86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8019b88:	2300      	movs	r3, #0
 8019b8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d042      	beq.n	8019c18 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8019b96:	6938      	ldr	r0, [r7, #16]
 8019b98:	f000 f842 	bl	8019c20 <USBD_GetLen>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	3301      	adds	r3, #1
 8019ba0:	005b      	lsls	r3, r3, #1
 8019ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019ba6:	d808      	bhi.n	8019bba <USBD_GetString+0x3e>
 8019ba8:	6938      	ldr	r0, [r7, #16]
 8019baa:	f000 f839 	bl	8019c20 <USBD_GetLen>
 8019bae:	4603      	mov	r3, r0
 8019bb0:	3301      	adds	r3, #1
 8019bb2:	b29b      	uxth	r3, r3
 8019bb4:	005b      	lsls	r3, r3, #1
 8019bb6:	b29a      	uxth	r2, r3
 8019bb8:	e001      	b.n	8019bbe <USBD_GetString+0x42>
 8019bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019bc2:	7dfb      	ldrb	r3, [r7, #23]
 8019bc4:	68ba      	ldr	r2, [r7, #8]
 8019bc6:	4413      	add	r3, r2
 8019bc8:	687a      	ldr	r2, [r7, #4]
 8019bca:	7812      	ldrb	r2, [r2, #0]
 8019bcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8019bce:	7dfb      	ldrb	r3, [r7, #23]
 8019bd0:	3301      	adds	r3, #1
 8019bd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019bd4:	7dfb      	ldrb	r3, [r7, #23]
 8019bd6:	68ba      	ldr	r2, [r7, #8]
 8019bd8:	4413      	add	r3, r2
 8019bda:	2203      	movs	r2, #3
 8019bdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8019bde:	7dfb      	ldrb	r3, [r7, #23]
 8019be0:	3301      	adds	r3, #1
 8019be2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019be4:	e013      	b.n	8019c0e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8019be6:	7dfb      	ldrb	r3, [r7, #23]
 8019be8:	68ba      	ldr	r2, [r7, #8]
 8019bea:	4413      	add	r3, r2
 8019bec:	693a      	ldr	r2, [r7, #16]
 8019bee:	7812      	ldrb	r2, [r2, #0]
 8019bf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019bf2:	693b      	ldr	r3, [r7, #16]
 8019bf4:	3301      	adds	r3, #1
 8019bf6:	613b      	str	r3, [r7, #16]
    idx++;
 8019bf8:	7dfb      	ldrb	r3, [r7, #23]
 8019bfa:	3301      	adds	r3, #1
 8019bfc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019bfe:	7dfb      	ldrb	r3, [r7, #23]
 8019c00:	68ba      	ldr	r2, [r7, #8]
 8019c02:	4413      	add	r3, r2
 8019c04:	2200      	movs	r2, #0
 8019c06:	701a      	strb	r2, [r3, #0]
    idx++;
 8019c08:	7dfb      	ldrb	r3, [r7, #23]
 8019c0a:	3301      	adds	r3, #1
 8019c0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019c0e:	693b      	ldr	r3, [r7, #16]
 8019c10:	781b      	ldrb	r3, [r3, #0]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d1e7      	bne.n	8019be6 <USBD_GetString+0x6a>
 8019c16:	e000      	b.n	8019c1a <USBD_GetString+0x9e>
    return;
 8019c18:	bf00      	nop
  }
}
 8019c1a:	3718      	adds	r7, #24
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	bd80      	pop	{r7, pc}

08019c20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019c20:	b480      	push	{r7}
 8019c22:	b085      	sub	sp, #20
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019c28:	2300      	movs	r3, #0
 8019c2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019c30:	e005      	b.n	8019c3e <USBD_GetLen+0x1e>
  {
    len++;
 8019c32:	7bfb      	ldrb	r3, [r7, #15]
 8019c34:	3301      	adds	r3, #1
 8019c36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019c38:	68bb      	ldr	r3, [r7, #8]
 8019c3a:	3301      	adds	r3, #1
 8019c3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019c3e:	68bb      	ldr	r3, [r7, #8]
 8019c40:	781b      	ldrb	r3, [r3, #0]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d1f5      	bne.n	8019c32 <USBD_GetLen+0x12>
  }

  return len;
 8019c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c48:	4618      	mov	r0, r3
 8019c4a:	3714      	adds	r7, #20
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c52:	4770      	bx	lr

08019c54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b084      	sub	sp, #16
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	60f8      	str	r0, [r7, #12]
 8019c5c:	60b9      	str	r1, [r7, #8]
 8019c5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	2202      	movs	r2, #2
 8019c64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	687a      	ldr	r2, [r7, #4]
 8019c6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	687a      	ldr	r2, [r7, #4]
 8019c72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	68ba      	ldr	r2, [r7, #8]
 8019c78:	2100      	movs	r1, #0
 8019c7a:	68f8      	ldr	r0, [r7, #12]
 8019c7c:	f000 fd2b 	bl	801a6d6 <USBD_LL_Transmit>

  return USBD_OK;
 8019c80:	2300      	movs	r3, #0
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	3710      	adds	r7, #16
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}

08019c8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019c8a:	b580      	push	{r7, lr}
 8019c8c:	b084      	sub	sp, #16
 8019c8e:	af00      	add	r7, sp, #0
 8019c90:	60f8      	str	r0, [r7, #12]
 8019c92:	60b9      	str	r1, [r7, #8]
 8019c94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	68ba      	ldr	r2, [r7, #8]
 8019c9a:	2100      	movs	r1, #0
 8019c9c:	68f8      	ldr	r0, [r7, #12]
 8019c9e:	f000 fd1a 	bl	801a6d6 <USBD_LL_Transmit>

  return USBD_OK;
 8019ca2:	2300      	movs	r3, #0
}
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3710      	adds	r7, #16
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}

08019cac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b084      	sub	sp, #16
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	60f8      	str	r0, [r7, #12]
 8019cb4:	60b9      	str	r1, [r7, #8]
 8019cb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	2203      	movs	r2, #3
 8019cbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	687a      	ldr	r2, [r7, #4]
 8019cc4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	687a      	ldr	r2, [r7, #4]
 8019ccc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	68ba      	ldr	r2, [r7, #8]
 8019cd4:	2100      	movs	r1, #0
 8019cd6:	68f8      	ldr	r0, [r7, #12]
 8019cd8:	f000 fd1e 	bl	801a718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019cdc:	2300      	movs	r3, #0
}
 8019cde:	4618      	mov	r0, r3
 8019ce0:	3710      	adds	r7, #16
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}

08019ce6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019ce6:	b580      	push	{r7, lr}
 8019ce8:	b084      	sub	sp, #16
 8019cea:	af00      	add	r7, sp, #0
 8019cec:	60f8      	str	r0, [r7, #12]
 8019cee:	60b9      	str	r1, [r7, #8]
 8019cf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	68ba      	ldr	r2, [r7, #8]
 8019cf6:	2100      	movs	r1, #0
 8019cf8:	68f8      	ldr	r0, [r7, #12]
 8019cfa:	f000 fd0d 	bl	801a718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019cfe:	2300      	movs	r3, #0
}
 8019d00:	4618      	mov	r0, r3
 8019d02:	3710      	adds	r7, #16
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bd80      	pop	{r7, pc}

08019d08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019d08:	b580      	push	{r7, lr}
 8019d0a:	b082      	sub	sp, #8
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	2204      	movs	r2, #4
 8019d14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019d18:	2300      	movs	r3, #0
 8019d1a:	2200      	movs	r2, #0
 8019d1c:	2100      	movs	r1, #0
 8019d1e:	6878      	ldr	r0, [r7, #4]
 8019d20:	f000 fcd9 	bl	801a6d6 <USBD_LL_Transmit>

  return USBD_OK;
 8019d24:	2300      	movs	r3, #0
}
 8019d26:	4618      	mov	r0, r3
 8019d28:	3708      	adds	r7, #8
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bd80      	pop	{r7, pc}

08019d2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019d2e:	b580      	push	{r7, lr}
 8019d30:	b082      	sub	sp, #8
 8019d32:	af00      	add	r7, sp, #0
 8019d34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	2205      	movs	r2, #5
 8019d3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019d3e:	2300      	movs	r3, #0
 8019d40:	2200      	movs	r2, #0
 8019d42:	2100      	movs	r1, #0
 8019d44:	6878      	ldr	r0, [r7, #4]
 8019d46:	f000 fce7 	bl	801a718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019d4a:	2300      	movs	r3, #0
}
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	3708      	adds	r7, #8
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}

08019d54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019d58:	2200      	movs	r2, #0
 8019d5a:	4918      	ldr	r1, [pc, #96]	@ (8019dbc <MX_USB_DEVICE_Init+0x68>)
 8019d5c:	4818      	ldr	r0, [pc, #96]	@ (8019dc0 <MX_USB_DEVICE_Init+0x6c>)
 8019d5e:	f7fe fccd 	bl	80186fc <USBD_Init>
 8019d62:	4603      	mov	r3, r0
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d001      	beq.n	8019d6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019d68:	f7e8 f99c 	bl	80020a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019d6c:	4915      	ldr	r1, [pc, #84]	@ (8019dc4 <MX_USB_DEVICE_Init+0x70>)
 8019d6e:	4814      	ldr	r0, [pc, #80]	@ (8019dc0 <MX_USB_DEVICE_Init+0x6c>)
 8019d70:	f7fe fcf4 	bl	801875c <USBD_RegisterClass>
 8019d74:	4603      	mov	r3, r0
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d001      	beq.n	8019d7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019d7a:	f7e8 f993 	bl	80020a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019d7e:	4912      	ldr	r1, [pc, #72]	@ (8019dc8 <MX_USB_DEVICE_Init+0x74>)
 8019d80:	480f      	ldr	r0, [pc, #60]	@ (8019dc0 <MX_USB_DEVICE_Init+0x6c>)
 8019d82:	f7fe fbeb 	bl	801855c <USBD_CDC_RegisterInterface>
 8019d86:	4603      	mov	r3, r0
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d001      	beq.n	8019d90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019d8c:	f7e8 f98a 	bl	80020a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019d90:	480b      	ldr	r0, [pc, #44]	@ (8019dc0 <MX_USB_DEVICE_Init+0x6c>)
 8019d92:	f7fe fd19 	bl	80187c8 <USBD_Start>
 8019d96:	4603      	mov	r3, r0
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d001      	beq.n	8019da0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019d9c:	f7e8 f982 	bl	80020a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8019da0:	f7f4 fc34 	bl	800e60c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8019da4:	4b06      	ldr	r3, [pc, #24]	@ (8019dc0 <MX_USB_DEVICE_Init+0x6c>)
 8019da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8019daa:	4a05      	ldr	r2, [pc, #20]	@ (8019dc0 <MX_USB_DEVICE_Init+0x6c>)
 8019dac:	33b0      	adds	r3, #176	@ 0xb0
 8019dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019db2:	4a06      	ldr	r2, [pc, #24]	@ (8019dcc <MX_USB_DEVICE_Init+0x78>)
 8019db4:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019db6:	bf00      	nop
 8019db8:	bd80      	pop	{r7, pc}
 8019dba:	bf00      	nop
 8019dbc:	240002f0 	.word	0x240002f0
 8019dc0:	240470f4 	.word	0x240470f4
 8019dc4:	2400025c 	.word	0x2400025c
 8019dc8:	240002dc 	.word	0x240002dc
 8019dcc:	240473d0 	.word	0x240473d0

08019dd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	4905      	ldr	r1, [pc, #20]	@ (8019dec <CDC_Init_FS+0x1c>)
 8019dd8:	4805      	ldr	r0, [pc, #20]	@ (8019df0 <CDC_Init_FS+0x20>)
 8019dda:	f7fe fbd9 	bl	8018590 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019dde:	4905      	ldr	r1, [pc, #20]	@ (8019df4 <CDC_Init_FS+0x24>)
 8019de0:	4803      	ldr	r0, [pc, #12]	@ (8019df0 <CDC_Init_FS+0x20>)
 8019de2:	f7fe fbf7 	bl	80185d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019de6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019de8:	4618      	mov	r0, r3
 8019dea:	bd80      	pop	{r7, pc}
 8019dec:	24047bd4 	.word	0x24047bd4
 8019df0:	240470f4 	.word	0x240470f4
 8019df4:	240473d4 	.word	0x240473d4

08019df8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019df8:	b480      	push	{r7}
 8019dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019dfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019dfe:	4618      	mov	r0, r3
 8019e00:	46bd      	mov	sp, r7
 8019e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e06:	4770      	bx	lr

08019e08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019e08:	b480      	push	{r7}
 8019e0a:	b083      	sub	sp, #12
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	4603      	mov	r3, r0
 8019e10:	6039      	str	r1, [r7, #0]
 8019e12:	71fb      	strb	r3, [r7, #7]
 8019e14:	4613      	mov	r3, r2
 8019e16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019e18:	79fb      	ldrb	r3, [r7, #7]
 8019e1a:	2b23      	cmp	r3, #35	@ 0x23
 8019e1c:	d84a      	bhi.n	8019eb4 <CDC_Control_FS+0xac>
 8019e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8019e24 <CDC_Control_FS+0x1c>)
 8019e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e24:	08019eb5 	.word	0x08019eb5
 8019e28:	08019eb5 	.word	0x08019eb5
 8019e2c:	08019eb5 	.word	0x08019eb5
 8019e30:	08019eb5 	.word	0x08019eb5
 8019e34:	08019eb5 	.word	0x08019eb5
 8019e38:	08019eb5 	.word	0x08019eb5
 8019e3c:	08019eb5 	.word	0x08019eb5
 8019e40:	08019eb5 	.word	0x08019eb5
 8019e44:	08019eb5 	.word	0x08019eb5
 8019e48:	08019eb5 	.word	0x08019eb5
 8019e4c:	08019eb5 	.word	0x08019eb5
 8019e50:	08019eb5 	.word	0x08019eb5
 8019e54:	08019eb5 	.word	0x08019eb5
 8019e58:	08019eb5 	.word	0x08019eb5
 8019e5c:	08019eb5 	.word	0x08019eb5
 8019e60:	08019eb5 	.word	0x08019eb5
 8019e64:	08019eb5 	.word	0x08019eb5
 8019e68:	08019eb5 	.word	0x08019eb5
 8019e6c:	08019eb5 	.word	0x08019eb5
 8019e70:	08019eb5 	.word	0x08019eb5
 8019e74:	08019eb5 	.word	0x08019eb5
 8019e78:	08019eb5 	.word	0x08019eb5
 8019e7c:	08019eb5 	.word	0x08019eb5
 8019e80:	08019eb5 	.word	0x08019eb5
 8019e84:	08019eb5 	.word	0x08019eb5
 8019e88:	08019eb5 	.word	0x08019eb5
 8019e8c:	08019eb5 	.word	0x08019eb5
 8019e90:	08019eb5 	.word	0x08019eb5
 8019e94:	08019eb5 	.word	0x08019eb5
 8019e98:	08019eb5 	.word	0x08019eb5
 8019e9c:	08019eb5 	.word	0x08019eb5
 8019ea0:	08019eb5 	.word	0x08019eb5
 8019ea4:	08019eb5 	.word	0x08019eb5
 8019ea8:	08019eb5 	.word	0x08019eb5
 8019eac:	08019eb5 	.word	0x08019eb5
 8019eb0:	08019eb5 	.word	0x08019eb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019eb4:	bf00      	nop
  }

  return (USBD_OK);
 8019eb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019eb8:	4618      	mov	r0, r3
 8019eba:	370c      	adds	r7, #12
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec2:	4770      	bx	lr

08019ec4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b082      	sub	sp, #8
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
 8019ecc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019ece:	6879      	ldr	r1, [r7, #4]
 8019ed0:	480a      	ldr	r0, [pc, #40]	@ (8019efc <CDC_Receive_FS+0x38>)
 8019ed2:	f7fe fb7f 	bl	80185d4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019ed6:	4809      	ldr	r0, [pc, #36]	@ (8019efc <CDC_Receive_FS+0x38>)
 8019ed8:	f7fe fbda 	bl	8018690 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8019edc:	4b08      	ldr	r3, [pc, #32]	@ (8019f00 <CDC_Receive_FS+0x3c>)
 8019ede:	2201      	movs	r2, #1
 8019ee0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8019ee2:	683b      	ldr	r3, [r7, #0]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	b29a      	uxth	r2, r3
 8019ee8:	2364      	movs	r3, #100	@ 0x64
 8019eea:	6879      	ldr	r1, [r7, #4]
 8019eec:	4805      	ldr	r0, [pc, #20]	@ (8019f04 <CDC_Receive_FS+0x40>)
 8019eee:	f7f9 fd67 	bl	80139c0 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8019ef2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	3708      	adds	r7, #8
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	bd80      	pop	{r7, pc}
 8019efc:	240470f4 	.word	0x240470f4
 8019f00:	240470e4 	.word	0x240470e4
 8019f04:	240008a0 	.word	0x240008a0

08019f08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b084      	sub	sp, #16
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
 8019f10:	460b      	mov	r3, r1
 8019f12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019f14:	2300      	movs	r3, #0
 8019f16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8019f18:	4b0d      	ldr	r3, [pc, #52]	@ (8019f50 <CDC_Transmit_FS+0x48>)
 8019f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019f1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019f20:	68bb      	ldr	r3, [r7, #8]
 8019f22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d001      	beq.n	8019f2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8019f2a:	2301      	movs	r3, #1
 8019f2c:	e00b      	b.n	8019f46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019f2e:	887b      	ldrh	r3, [r7, #2]
 8019f30:	461a      	mov	r2, r3
 8019f32:	6879      	ldr	r1, [r7, #4]
 8019f34:	4806      	ldr	r0, [pc, #24]	@ (8019f50 <CDC_Transmit_FS+0x48>)
 8019f36:	f7fe fb2b 	bl	8018590 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019f3a:	4805      	ldr	r0, [pc, #20]	@ (8019f50 <CDC_Transmit_FS+0x48>)
 8019f3c:	f7fe fb68 	bl	8018610 <USBD_CDC_TransmitPacket>
 8019f40:	4603      	mov	r3, r0
 8019f42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f46:	4618      	mov	r0, r3
 8019f48:	3710      	adds	r7, #16
 8019f4a:	46bd      	mov	sp, r7
 8019f4c:	bd80      	pop	{r7, pc}
 8019f4e:	bf00      	nop
 8019f50:	240470f4 	.word	0x240470f4

08019f54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019f54:	b480      	push	{r7}
 8019f56:	b087      	sub	sp, #28
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	60f8      	str	r0, [r7, #12]
 8019f5c:	60b9      	str	r1, [r7, #8]
 8019f5e:	4613      	mov	r3, r2
 8019f60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019f62:	2300      	movs	r3, #0
 8019f64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	371c      	adds	r7, #28
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f74:	4770      	bx	lr
	...

08019f78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f78:	b480      	push	{r7}
 8019f7a:	b083      	sub	sp, #12
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	4603      	mov	r3, r0
 8019f80:	6039      	str	r1, [r7, #0]
 8019f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019f84:	683b      	ldr	r3, [r7, #0]
 8019f86:	2212      	movs	r2, #18
 8019f88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019f8a:	4b03      	ldr	r3, [pc, #12]	@ (8019f98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	370c      	adds	r7, #12
 8019f90:	46bd      	mov	sp, r7
 8019f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f96:	4770      	bx	lr
 8019f98:	24000310 	.word	0x24000310

08019f9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f9c:	b480      	push	{r7}
 8019f9e:	b083      	sub	sp, #12
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	6039      	str	r1, [r7, #0]
 8019fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019fa8:	683b      	ldr	r3, [r7, #0]
 8019faa:	2204      	movs	r2, #4
 8019fac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019fae:	4b03      	ldr	r3, [pc, #12]	@ (8019fbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	370c      	adds	r7, #12
 8019fb4:	46bd      	mov	sp, r7
 8019fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fba:	4770      	bx	lr
 8019fbc:	24000324 	.word	0x24000324

08019fc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b082      	sub	sp, #8
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	4603      	mov	r3, r0
 8019fc8:	6039      	str	r1, [r7, #0]
 8019fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019fcc:	79fb      	ldrb	r3, [r7, #7]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d105      	bne.n	8019fde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019fd2:	683a      	ldr	r2, [r7, #0]
 8019fd4:	4907      	ldr	r1, [pc, #28]	@ (8019ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8019fd6:	4808      	ldr	r0, [pc, #32]	@ (8019ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8019fd8:	f7ff fdd0 	bl	8019b7c <USBD_GetString>
 8019fdc:	e004      	b.n	8019fe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019fde:	683a      	ldr	r2, [r7, #0]
 8019fe0:	4904      	ldr	r1, [pc, #16]	@ (8019ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8019fe2:	4805      	ldr	r0, [pc, #20]	@ (8019ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8019fe4:	f7ff fdca 	bl	8019b7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019fe8:	4b02      	ldr	r3, [pc, #8]	@ (8019ff4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019fea:	4618      	mov	r0, r3
 8019fec:	3708      	adds	r7, #8
 8019fee:	46bd      	mov	sp, r7
 8019ff0:	bd80      	pop	{r7, pc}
 8019ff2:	bf00      	nop
 8019ff4:	240483d4 	.word	0x240483d4
 8019ff8:	0801b2dc 	.word	0x0801b2dc

08019ffc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b082      	sub	sp, #8
 801a000:	af00      	add	r7, sp, #0
 801a002:	4603      	mov	r3, r0
 801a004:	6039      	str	r1, [r7, #0]
 801a006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a008:	683a      	ldr	r2, [r7, #0]
 801a00a:	4904      	ldr	r1, [pc, #16]	@ (801a01c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a00c:	4804      	ldr	r0, [pc, #16]	@ (801a020 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a00e:	f7ff fdb5 	bl	8019b7c <USBD_GetString>
  return USBD_StrDesc;
 801a012:	4b02      	ldr	r3, [pc, #8]	@ (801a01c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a014:	4618      	mov	r0, r3
 801a016:	3708      	adds	r7, #8
 801a018:	46bd      	mov	sp, r7
 801a01a:	bd80      	pop	{r7, pc}
 801a01c:	240483d4 	.word	0x240483d4
 801a020:	0801b2f4 	.word	0x0801b2f4

0801a024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b082      	sub	sp, #8
 801a028:	af00      	add	r7, sp, #0
 801a02a:	4603      	mov	r3, r0
 801a02c:	6039      	str	r1, [r7, #0]
 801a02e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a030:	683b      	ldr	r3, [r7, #0]
 801a032:	221a      	movs	r2, #26
 801a034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a036:	f000 f843 	bl	801a0c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a03a:	4b02      	ldr	r3, [pc, #8]	@ (801a044 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a03c:	4618      	mov	r0, r3
 801a03e:	3708      	adds	r7, #8
 801a040:	46bd      	mov	sp, r7
 801a042:	bd80      	pop	{r7, pc}
 801a044:	24000328 	.word	0x24000328

0801a048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b082      	sub	sp, #8
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	4603      	mov	r3, r0
 801a050:	6039      	str	r1, [r7, #0]
 801a052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a054:	79fb      	ldrb	r3, [r7, #7]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d105      	bne.n	801a066 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a05a:	683a      	ldr	r2, [r7, #0]
 801a05c:	4907      	ldr	r1, [pc, #28]	@ (801a07c <USBD_FS_ConfigStrDescriptor+0x34>)
 801a05e:	4808      	ldr	r0, [pc, #32]	@ (801a080 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a060:	f7ff fd8c 	bl	8019b7c <USBD_GetString>
 801a064:	e004      	b.n	801a070 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a066:	683a      	ldr	r2, [r7, #0]
 801a068:	4904      	ldr	r1, [pc, #16]	@ (801a07c <USBD_FS_ConfigStrDescriptor+0x34>)
 801a06a:	4805      	ldr	r0, [pc, #20]	@ (801a080 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a06c:	f7ff fd86 	bl	8019b7c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a070:	4b02      	ldr	r3, [pc, #8]	@ (801a07c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a072:	4618      	mov	r0, r3
 801a074:	3708      	adds	r7, #8
 801a076:	46bd      	mov	sp, r7
 801a078:	bd80      	pop	{r7, pc}
 801a07a:	bf00      	nop
 801a07c:	240483d4 	.word	0x240483d4
 801a080:	0801b308 	.word	0x0801b308

0801a084 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b082      	sub	sp, #8
 801a088:	af00      	add	r7, sp, #0
 801a08a:	4603      	mov	r3, r0
 801a08c:	6039      	str	r1, [r7, #0]
 801a08e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a090:	79fb      	ldrb	r3, [r7, #7]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d105      	bne.n	801a0a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a096:	683a      	ldr	r2, [r7, #0]
 801a098:	4907      	ldr	r1, [pc, #28]	@ (801a0b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a09a:	4808      	ldr	r0, [pc, #32]	@ (801a0bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a09c:	f7ff fd6e 	bl	8019b7c <USBD_GetString>
 801a0a0:	e004      	b.n	801a0ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a0a2:	683a      	ldr	r2, [r7, #0]
 801a0a4:	4904      	ldr	r1, [pc, #16]	@ (801a0b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a0a6:	4805      	ldr	r0, [pc, #20]	@ (801a0bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a0a8:	f7ff fd68 	bl	8019b7c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a0ac:	4b02      	ldr	r3, [pc, #8]	@ (801a0b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	3708      	adds	r7, #8
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
 801a0b6:	bf00      	nop
 801a0b8:	240483d4 	.word	0x240483d4
 801a0bc:	0801b314 	.word	0x0801b314

0801a0c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b084      	sub	sp, #16
 801a0c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a0c6:	4b0f      	ldr	r3, [pc, #60]	@ (801a104 <Get_SerialNum+0x44>)
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a0cc:	4b0e      	ldr	r3, [pc, #56]	@ (801a108 <Get_SerialNum+0x48>)
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a0d2:	4b0e      	ldr	r3, [pc, #56]	@ (801a10c <Get_SerialNum+0x4c>)
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a0d8:	68fa      	ldr	r2, [r7, #12]
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	4413      	add	r3, r2
 801a0de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d009      	beq.n	801a0fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a0e6:	2208      	movs	r2, #8
 801a0e8:	4909      	ldr	r1, [pc, #36]	@ (801a110 <Get_SerialNum+0x50>)
 801a0ea:	68f8      	ldr	r0, [r7, #12]
 801a0ec:	f000 f814 	bl	801a118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a0f0:	2204      	movs	r2, #4
 801a0f2:	4908      	ldr	r1, [pc, #32]	@ (801a114 <Get_SerialNum+0x54>)
 801a0f4:	68b8      	ldr	r0, [r7, #8]
 801a0f6:	f000 f80f 	bl	801a118 <IntToUnicode>
  }
}
 801a0fa:	bf00      	nop
 801a0fc:	3710      	adds	r7, #16
 801a0fe:	46bd      	mov	sp, r7
 801a100:	bd80      	pop	{r7, pc}
 801a102:	bf00      	nop
 801a104:	1ff1e800 	.word	0x1ff1e800
 801a108:	1ff1e804 	.word	0x1ff1e804
 801a10c:	1ff1e808 	.word	0x1ff1e808
 801a110:	2400032a 	.word	0x2400032a
 801a114:	2400033a 	.word	0x2400033a

0801a118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a118:	b480      	push	{r7}
 801a11a:	b087      	sub	sp, #28
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	60f8      	str	r0, [r7, #12]
 801a120:	60b9      	str	r1, [r7, #8]
 801a122:	4613      	mov	r3, r2
 801a124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a126:	2300      	movs	r3, #0
 801a128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a12a:	2300      	movs	r3, #0
 801a12c:	75fb      	strb	r3, [r7, #23]
 801a12e:	e027      	b.n	801a180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	0f1b      	lsrs	r3, r3, #28
 801a134:	2b09      	cmp	r3, #9
 801a136:	d80b      	bhi.n	801a150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	0f1b      	lsrs	r3, r3, #28
 801a13c:	b2da      	uxtb	r2, r3
 801a13e:	7dfb      	ldrb	r3, [r7, #23]
 801a140:	005b      	lsls	r3, r3, #1
 801a142:	4619      	mov	r1, r3
 801a144:	68bb      	ldr	r3, [r7, #8]
 801a146:	440b      	add	r3, r1
 801a148:	3230      	adds	r2, #48	@ 0x30
 801a14a:	b2d2      	uxtb	r2, r2
 801a14c:	701a      	strb	r2, [r3, #0]
 801a14e:	e00a      	b.n	801a166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	0f1b      	lsrs	r3, r3, #28
 801a154:	b2da      	uxtb	r2, r3
 801a156:	7dfb      	ldrb	r3, [r7, #23]
 801a158:	005b      	lsls	r3, r3, #1
 801a15a:	4619      	mov	r1, r3
 801a15c:	68bb      	ldr	r3, [r7, #8]
 801a15e:	440b      	add	r3, r1
 801a160:	3237      	adds	r2, #55	@ 0x37
 801a162:	b2d2      	uxtb	r2, r2
 801a164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	011b      	lsls	r3, r3, #4
 801a16a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a16c:	7dfb      	ldrb	r3, [r7, #23]
 801a16e:	005b      	lsls	r3, r3, #1
 801a170:	3301      	adds	r3, #1
 801a172:	68ba      	ldr	r2, [r7, #8]
 801a174:	4413      	add	r3, r2
 801a176:	2200      	movs	r2, #0
 801a178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a17a:	7dfb      	ldrb	r3, [r7, #23]
 801a17c:	3301      	adds	r3, #1
 801a17e:	75fb      	strb	r3, [r7, #23]
 801a180:	7dfa      	ldrb	r2, [r7, #23]
 801a182:	79fb      	ldrb	r3, [r7, #7]
 801a184:	429a      	cmp	r2, r3
 801a186:	d3d3      	bcc.n	801a130 <IntToUnicode+0x18>
  }
}
 801a188:	bf00      	nop
 801a18a:	bf00      	nop
 801a18c:	371c      	adds	r7, #28
 801a18e:	46bd      	mov	sp, r7
 801a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a194:	4770      	bx	lr
	...

0801a198 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b0ba      	sub	sp, #232	@ 0xe8
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a1a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	601a      	str	r2, [r3, #0]
 801a1a8:	605a      	str	r2, [r3, #4]
 801a1aa:	609a      	str	r2, [r3, #8]
 801a1ac:	60da      	str	r2, [r3, #12]
 801a1ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a1b0:	f107 0310 	add.w	r3, r7, #16
 801a1b4:	22c0      	movs	r2, #192	@ 0xc0
 801a1b6:	2100      	movs	r1, #0
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	f000 fbfd 	bl	801a9b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	4a2c      	ldr	r2, [pc, #176]	@ (801a274 <HAL_PCD_MspInit+0xdc>)
 801a1c4:	4293      	cmp	r3, r2
 801a1c6:	d151      	bne.n	801a26c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a1c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801a1cc:	f04f 0300 	mov.w	r3, #0
 801a1d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801a1d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801a1d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a1dc:	f107 0310 	add.w	r3, r7, #16
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7f5 fa09 	bl	800f5f8 <HAL_RCCEx_PeriphCLKConfig>
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d001      	beq.n	801a1f0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801a1ec:	f7e7 ff5a 	bl	80020a4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a1f0:	f7f4 fa0c 	bl	800e60c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a1f4:	4b20      	ldr	r3, [pc, #128]	@ (801a278 <HAL_PCD_MspInit+0xe0>)
 801a1f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a1fa:	4a1f      	ldr	r2, [pc, #124]	@ (801a278 <HAL_PCD_MspInit+0xe0>)
 801a1fc:	f043 0301 	orr.w	r3, r3, #1
 801a200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801a204:	4b1c      	ldr	r3, [pc, #112]	@ (801a278 <HAL_PCD_MspInit+0xe0>)
 801a206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a20a:	f003 0301 	and.w	r3, r3, #1
 801a20e:	60fb      	str	r3, [r7, #12]
 801a210:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a212:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801a216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a21a:	2302      	movs	r3, #2
 801a21c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a220:	2300      	movs	r3, #0
 801a222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a226:	2300      	movs	r3, #0
 801a228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801a22c:	230a      	movs	r3, #10
 801a22e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a232:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801a236:	4619      	mov	r1, r3
 801a238:	4810      	ldr	r0, [pc, #64]	@ (801a27c <HAL_PCD_MspInit+0xe4>)
 801a23a:	f7ed fd3d 	bl	8007cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a23e:	4b0e      	ldr	r3, [pc, #56]	@ (801a278 <HAL_PCD_MspInit+0xe0>)
 801a240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a244:	4a0c      	ldr	r2, [pc, #48]	@ (801a278 <HAL_PCD_MspInit+0xe0>)
 801a246:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801a24a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801a24e:	4b0a      	ldr	r3, [pc, #40]	@ (801a278 <HAL_PCD_MspInit+0xe0>)
 801a250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a258:	60bb      	str	r3, [r7, #8]
 801a25a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a25c:	2200      	movs	r2, #0
 801a25e:	2100      	movs	r1, #0
 801a260:	2065      	movs	r0, #101	@ 0x65
 801a262:	f7ea fe26 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a266:	2065      	movs	r0, #101	@ 0x65
 801a268:	f7ea fe3d 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a26c:	bf00      	nop
 801a26e:	37e8      	adds	r7, #232	@ 0xe8
 801a270:	46bd      	mov	sp, r7
 801a272:	bd80      	pop	{r7, pc}
 801a274:	40080000 	.word	0x40080000
 801a278:	58024400 	.word	0x58024400
 801a27c:	58020000 	.word	0x58020000

0801a280 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a280:	b580      	push	{r7, lr}
 801a282:	b082      	sub	sp, #8
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801a294:	4619      	mov	r1, r3
 801a296:	4610      	mov	r0, r2
 801a298:	f7fe fae3 	bl	8018862 <USBD_LL_SetupStage>
}
 801a29c:	bf00      	nop
 801a29e:	3708      	adds	r7, #8
 801a2a0:	46bd      	mov	sp, r7
 801a2a2:	bd80      	pop	{r7, pc}

0801a2a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b082      	sub	sp, #8
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]
 801a2ac:	460b      	mov	r3, r1
 801a2ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a2b6:	78fa      	ldrb	r2, [r7, #3]
 801a2b8:	6879      	ldr	r1, [r7, #4]
 801a2ba:	4613      	mov	r3, r2
 801a2bc:	00db      	lsls	r3, r3, #3
 801a2be:	4413      	add	r3, r2
 801a2c0:	009b      	lsls	r3, r3, #2
 801a2c2:	440b      	add	r3, r1
 801a2c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a2c8:	681a      	ldr	r2, [r3, #0]
 801a2ca:	78fb      	ldrb	r3, [r7, #3]
 801a2cc:	4619      	mov	r1, r3
 801a2ce:	f7fe fb1d 	bl	801890c <USBD_LL_DataOutStage>
}
 801a2d2:	bf00      	nop
 801a2d4:	3708      	adds	r7, #8
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	bd80      	pop	{r7, pc}

0801a2da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2da:	b580      	push	{r7, lr}
 801a2dc:	b082      	sub	sp, #8
 801a2de:	af00      	add	r7, sp, #0
 801a2e0:	6078      	str	r0, [r7, #4]
 801a2e2:	460b      	mov	r3, r1
 801a2e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a2ec:	78fa      	ldrb	r2, [r7, #3]
 801a2ee:	6879      	ldr	r1, [r7, #4]
 801a2f0:	4613      	mov	r3, r2
 801a2f2:	00db      	lsls	r3, r3, #3
 801a2f4:	4413      	add	r3, r2
 801a2f6:	009b      	lsls	r3, r3, #2
 801a2f8:	440b      	add	r3, r1
 801a2fa:	3320      	adds	r3, #32
 801a2fc:	681a      	ldr	r2, [r3, #0]
 801a2fe:	78fb      	ldrb	r3, [r7, #3]
 801a300:	4619      	mov	r1, r3
 801a302:	f7fe fbb6 	bl	8018a72 <USBD_LL_DataInStage>
}
 801a306:	bf00      	nop
 801a308:	3708      	adds	r7, #8
 801a30a:	46bd      	mov	sp, r7
 801a30c:	bd80      	pop	{r7, pc}

0801a30e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a30e:	b580      	push	{r7, lr}
 801a310:	b082      	sub	sp, #8
 801a312:	af00      	add	r7, sp, #0
 801a314:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7fe fcf0 	bl	8018d02 <USBD_LL_SOF>
}
 801a322:	bf00      	nop
 801a324:	3708      	adds	r7, #8
 801a326:	46bd      	mov	sp, r7
 801a328:	bd80      	pop	{r7, pc}

0801a32a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a32a:	b580      	push	{r7, lr}
 801a32c:	b084      	sub	sp, #16
 801a32e:	af00      	add	r7, sp, #0
 801a330:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a332:	2301      	movs	r3, #1
 801a334:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	79db      	ldrb	r3, [r3, #7]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d102      	bne.n	801a344 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a33e:	2300      	movs	r3, #0
 801a340:	73fb      	strb	r3, [r7, #15]
 801a342:	e008      	b.n	801a356 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	79db      	ldrb	r3, [r3, #7]
 801a348:	2b02      	cmp	r3, #2
 801a34a:	d102      	bne.n	801a352 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a34c:	2301      	movs	r3, #1
 801a34e:	73fb      	strb	r3, [r7, #15]
 801a350:	e001      	b.n	801a356 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a352:	f7e7 fea7 	bl	80020a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a35c:	7bfa      	ldrb	r2, [r7, #15]
 801a35e:	4611      	mov	r1, r2
 801a360:	4618      	mov	r0, r3
 801a362:	f7fe fc8a 	bl	8018c7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a36c:	4618      	mov	r0, r3
 801a36e:	f7fe fc32 	bl	8018bd6 <USBD_LL_Reset>
}
 801a372:	bf00      	nop
 801a374:	3710      	adds	r7, #16
 801a376:	46bd      	mov	sp, r7
 801a378:	bd80      	pop	{r7, pc}
	...

0801a37c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b082      	sub	sp, #8
 801a380:	af00      	add	r7, sp, #0
 801a382:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a38a:	4618      	mov	r0, r3
 801a38c:	f7fe fc85 	bl	8018c9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	687a      	ldr	r2, [r7, #4]
 801a39c:	6812      	ldr	r2, [r2, #0]
 801a39e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a3a2:	f043 0301 	orr.w	r3, r3, #1
 801a3a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	7adb      	ldrb	r3, [r3, #11]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d005      	beq.n	801a3bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a3b0:	4b04      	ldr	r3, [pc, #16]	@ (801a3c4 <HAL_PCD_SuspendCallback+0x48>)
 801a3b2:	691b      	ldr	r3, [r3, #16]
 801a3b4:	4a03      	ldr	r2, [pc, #12]	@ (801a3c4 <HAL_PCD_SuspendCallback+0x48>)
 801a3b6:	f043 0306 	orr.w	r3, r3, #6
 801a3ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a3bc:	bf00      	nop
 801a3be:	3708      	adds	r7, #8
 801a3c0:	46bd      	mov	sp, r7
 801a3c2:	bd80      	pop	{r7, pc}
 801a3c4:	e000ed00 	.word	0xe000ed00

0801a3c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b082      	sub	sp, #8
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	f7fe fc7b 	bl	8018cd2 <USBD_LL_Resume>
}
 801a3dc:	bf00      	nop
 801a3de:	3708      	adds	r7, #8
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}

0801a3e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3e4:	b580      	push	{r7, lr}
 801a3e6:	b082      	sub	sp, #8
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	6078      	str	r0, [r7, #4]
 801a3ec:	460b      	mov	r3, r1
 801a3ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a3f6:	78fa      	ldrb	r2, [r7, #3]
 801a3f8:	4611      	mov	r1, r2
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f7fe fcd3 	bl	8018da6 <USBD_LL_IsoOUTIncomplete>
}
 801a400:	bf00      	nop
 801a402:	3708      	adds	r7, #8
 801a404:	46bd      	mov	sp, r7
 801a406:	bd80      	pop	{r7, pc}

0801a408 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b082      	sub	sp, #8
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	6078      	str	r0, [r7, #4]
 801a410:	460b      	mov	r3, r1
 801a412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a41a:	78fa      	ldrb	r2, [r7, #3]
 801a41c:	4611      	mov	r1, r2
 801a41e:	4618      	mov	r0, r3
 801a420:	f7fe fc8f 	bl	8018d42 <USBD_LL_IsoINIncomplete>
}
 801a424:	bf00      	nop
 801a426:	3708      	adds	r7, #8
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd80      	pop	{r7, pc}

0801a42c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b082      	sub	sp, #8
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a43a:	4618      	mov	r0, r3
 801a43c:	f7fe fce5 	bl	8018e0a <USBD_LL_DevConnected>
}
 801a440:	bf00      	nop
 801a442:	3708      	adds	r7, #8
 801a444:	46bd      	mov	sp, r7
 801a446:	bd80      	pop	{r7, pc}

0801a448 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a456:	4618      	mov	r0, r3
 801a458:	f7fe fce2 	bl	8018e20 <USBD_LL_DevDisconnected>
}
 801a45c:	bf00      	nop
 801a45e:	3708      	adds	r7, #8
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}

0801a464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a464:	b580      	push	{r7, lr}
 801a466:	b082      	sub	sp, #8
 801a468:	af00      	add	r7, sp, #0
 801a46a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	781b      	ldrb	r3, [r3, #0]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d13e      	bne.n	801a4f2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a474:	4a21      	ldr	r2, [pc, #132]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	4a1f      	ldr	r2, [pc, #124]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a480:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a484:	4b1d      	ldr	r3, [pc, #116]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a486:	4a1e      	ldr	r2, [pc, #120]	@ (801a500 <USBD_LL_Init+0x9c>)
 801a488:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801a48a:	4b1c      	ldr	r3, [pc, #112]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a48c:	2209      	movs	r2, #9
 801a48e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a490:	4b1a      	ldr	r3, [pc, #104]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a492:	2202      	movs	r2, #2
 801a494:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a496:	4b19      	ldr	r3, [pc, #100]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a498:	2200      	movs	r2, #0
 801a49a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a49c:	4b17      	ldr	r3, [pc, #92]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a49e:	2202      	movs	r2, #2
 801a4a0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a4a2:	4b16      	ldr	r3, [pc, #88]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a4a8:	4b14      	ldr	r3, [pc, #80]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a4ae:	4b13      	ldr	r3, [pc, #76]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801a4b4:	4b11      	ldr	r3, [pc, #68]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a4ba:	4b10      	ldr	r3, [pc, #64]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4bc:	2200      	movs	r2, #0
 801a4be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a4c0:	4b0e      	ldr	r3, [pc, #56]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a4c6:	480d      	ldr	r0, [pc, #52]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4c8:	f7f2 fdc6 	bl	800d058 <HAL_PCD_Init>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d001      	beq.n	801a4d6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a4d2:	f7e7 fde7 	bl	80020a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a4d6:	2180      	movs	r1, #128	@ 0x80
 801a4d8:	4808      	ldr	r0, [pc, #32]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4da:	f7f4 f81c 	bl	800e516 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a4de:	2240      	movs	r2, #64	@ 0x40
 801a4e0:	2100      	movs	r1, #0
 801a4e2:	4806      	ldr	r0, [pc, #24]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4e4:	f7f3 ffd0 	bl	800e488 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a4e8:	2280      	movs	r2, #128	@ 0x80
 801a4ea:	2101      	movs	r1, #1
 801a4ec:	4803      	ldr	r0, [pc, #12]	@ (801a4fc <USBD_LL_Init+0x98>)
 801a4ee:	f7f3 ffcb 	bl	800e488 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801a4f2:	2300      	movs	r3, #0
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	3708      	adds	r7, #8
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}
 801a4fc:	240485d4 	.word	0x240485d4
 801a500:	40080000 	.word	0x40080000

0801a504 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a504:	b580      	push	{r7, lr}
 801a506:	b084      	sub	sp, #16
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a50c:	2300      	movs	r3, #0
 801a50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a510:	2300      	movs	r3, #0
 801a512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a51a:	4618      	mov	r0, r3
 801a51c:	f7f2 fea8 	bl	800d270 <HAL_PCD_Start>
 801a520:	4603      	mov	r3, r0
 801a522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a524:	7bfb      	ldrb	r3, [r7, #15]
 801a526:	4618      	mov	r0, r3
 801a528:	f000 f942 	bl	801a7b0 <USBD_Get_USB_Status>
 801a52c:	4603      	mov	r3, r0
 801a52e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a530:	7bbb      	ldrb	r3, [r7, #14]
}
 801a532:	4618      	mov	r0, r3
 801a534:	3710      	adds	r7, #16
 801a536:	46bd      	mov	sp, r7
 801a538:	bd80      	pop	{r7, pc}

0801a53a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a53a:	b580      	push	{r7, lr}
 801a53c:	b084      	sub	sp, #16
 801a53e:	af00      	add	r7, sp, #0
 801a540:	6078      	str	r0, [r7, #4]
 801a542:	4608      	mov	r0, r1
 801a544:	4611      	mov	r1, r2
 801a546:	461a      	mov	r2, r3
 801a548:	4603      	mov	r3, r0
 801a54a:	70fb      	strb	r3, [r7, #3]
 801a54c:	460b      	mov	r3, r1
 801a54e:	70bb      	strb	r3, [r7, #2]
 801a550:	4613      	mov	r3, r2
 801a552:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a554:	2300      	movs	r3, #0
 801a556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a558:	2300      	movs	r3, #0
 801a55a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a562:	78bb      	ldrb	r3, [r7, #2]
 801a564:	883a      	ldrh	r2, [r7, #0]
 801a566:	78f9      	ldrb	r1, [r7, #3]
 801a568:	f7f3 fba9 	bl	800dcbe <HAL_PCD_EP_Open>
 801a56c:	4603      	mov	r3, r0
 801a56e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a570:	7bfb      	ldrb	r3, [r7, #15]
 801a572:	4618      	mov	r0, r3
 801a574:	f000 f91c 	bl	801a7b0 <USBD_Get_USB_Status>
 801a578:	4603      	mov	r3, r0
 801a57a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a57c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a57e:	4618      	mov	r0, r3
 801a580:	3710      	adds	r7, #16
 801a582:	46bd      	mov	sp, r7
 801a584:	bd80      	pop	{r7, pc}

0801a586 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a586:	b580      	push	{r7, lr}
 801a588:	b084      	sub	sp, #16
 801a58a:	af00      	add	r7, sp, #0
 801a58c:	6078      	str	r0, [r7, #4]
 801a58e:	460b      	mov	r3, r1
 801a590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a592:	2300      	movs	r3, #0
 801a594:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a596:	2300      	movs	r3, #0
 801a598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a5a0:	78fa      	ldrb	r2, [r7, #3]
 801a5a2:	4611      	mov	r1, r2
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f7f3 fbf4 	bl	800dd92 <HAL_PCD_EP_Close>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5ae:	7bfb      	ldrb	r3, [r7, #15]
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	f000 f8fd 	bl	801a7b0 <USBD_Get_USB_Status>
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a5ba:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5bc:	4618      	mov	r0, r3
 801a5be:	3710      	adds	r7, #16
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	bd80      	pop	{r7, pc}

0801a5c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b084      	sub	sp, #16
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]
 801a5cc:	460b      	mov	r3, r1
 801a5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a5de:	78fa      	ldrb	r2, [r7, #3]
 801a5e0:	4611      	mov	r1, r2
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	f7f3 fcac 	bl	800df40 <HAL_PCD_EP_SetStall>
 801a5e8:	4603      	mov	r3, r0
 801a5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5ec:	7bfb      	ldrb	r3, [r7, #15]
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f000 f8de 	bl	801a7b0 <USBD_Get_USB_Status>
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	3710      	adds	r7, #16
 801a5fe:	46bd      	mov	sp, r7
 801a600:	bd80      	pop	{r7, pc}

0801a602 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a602:	b580      	push	{r7, lr}
 801a604:	b084      	sub	sp, #16
 801a606:	af00      	add	r7, sp, #0
 801a608:	6078      	str	r0, [r7, #4]
 801a60a:	460b      	mov	r3, r1
 801a60c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a60e:	2300      	movs	r3, #0
 801a610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a612:	2300      	movs	r3, #0
 801a614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a61c:	78fa      	ldrb	r2, [r7, #3]
 801a61e:	4611      	mov	r1, r2
 801a620:	4618      	mov	r0, r3
 801a622:	f7f3 fcf0 	bl	800e006 <HAL_PCD_EP_ClrStall>
 801a626:	4603      	mov	r3, r0
 801a628:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a62a:	7bfb      	ldrb	r3, [r7, #15]
 801a62c:	4618      	mov	r0, r3
 801a62e:	f000 f8bf 	bl	801a7b0 <USBD_Get_USB_Status>
 801a632:	4603      	mov	r3, r0
 801a634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a636:	7bbb      	ldrb	r3, [r7, #14]
}
 801a638:	4618      	mov	r0, r3
 801a63a:	3710      	adds	r7, #16
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}

0801a640 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a640:	b480      	push	{r7}
 801a642:	b085      	sub	sp, #20
 801a644:	af00      	add	r7, sp, #0
 801a646:	6078      	str	r0, [r7, #4]
 801a648:	460b      	mov	r3, r1
 801a64a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a652:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	da0b      	bge.n	801a674 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a65c:	78fb      	ldrb	r3, [r7, #3]
 801a65e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a662:	68f9      	ldr	r1, [r7, #12]
 801a664:	4613      	mov	r3, r2
 801a666:	00db      	lsls	r3, r3, #3
 801a668:	4413      	add	r3, r2
 801a66a:	009b      	lsls	r3, r3, #2
 801a66c:	440b      	add	r3, r1
 801a66e:	3316      	adds	r3, #22
 801a670:	781b      	ldrb	r3, [r3, #0]
 801a672:	e00b      	b.n	801a68c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a674:	78fb      	ldrb	r3, [r7, #3]
 801a676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a67a:	68f9      	ldr	r1, [r7, #12]
 801a67c:	4613      	mov	r3, r2
 801a67e:	00db      	lsls	r3, r3, #3
 801a680:	4413      	add	r3, r2
 801a682:	009b      	lsls	r3, r3, #2
 801a684:	440b      	add	r3, r1
 801a686:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801a68a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a68c:	4618      	mov	r0, r3
 801a68e:	3714      	adds	r7, #20
 801a690:	46bd      	mov	sp, r7
 801a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a696:	4770      	bx	lr

0801a698 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b084      	sub	sp, #16
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
 801a6a0:	460b      	mov	r3, r1
 801a6a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a6b2:	78fa      	ldrb	r2, [r7, #3]
 801a6b4:	4611      	mov	r1, r2
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	f7f3 fadd 	bl	800dc76 <HAL_PCD_SetAddress>
 801a6bc:	4603      	mov	r3, r0
 801a6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a6c0:	7bfb      	ldrb	r3, [r7, #15]
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f000 f874 	bl	801a7b0 <USBD_Get_USB_Status>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	3710      	adds	r7, #16
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	bd80      	pop	{r7, pc}

0801a6d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a6d6:	b580      	push	{r7, lr}
 801a6d8:	b086      	sub	sp, #24
 801a6da:	af00      	add	r7, sp, #0
 801a6dc:	60f8      	str	r0, [r7, #12]
 801a6de:	607a      	str	r2, [r7, #4]
 801a6e0:	603b      	str	r3, [r7, #0]
 801a6e2:	460b      	mov	r3, r1
 801a6e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a6f4:	7af9      	ldrb	r1, [r7, #11]
 801a6f6:	683b      	ldr	r3, [r7, #0]
 801a6f8:	687a      	ldr	r2, [r7, #4]
 801a6fa:	f7f3 fbe7 	bl	800decc <HAL_PCD_EP_Transmit>
 801a6fe:	4603      	mov	r3, r0
 801a700:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a702:	7dfb      	ldrb	r3, [r7, #23]
 801a704:	4618      	mov	r0, r3
 801a706:	f000 f853 	bl	801a7b0 <USBD_Get_USB_Status>
 801a70a:	4603      	mov	r3, r0
 801a70c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a70e:	7dbb      	ldrb	r3, [r7, #22]
}
 801a710:	4618      	mov	r0, r3
 801a712:	3718      	adds	r7, #24
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}

0801a718 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b086      	sub	sp, #24
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	60f8      	str	r0, [r7, #12]
 801a720:	607a      	str	r2, [r7, #4]
 801a722:	603b      	str	r3, [r7, #0]
 801a724:	460b      	mov	r3, r1
 801a726:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a728:	2300      	movs	r3, #0
 801a72a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a72c:	2300      	movs	r3, #0
 801a72e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a736:	7af9      	ldrb	r1, [r7, #11]
 801a738:	683b      	ldr	r3, [r7, #0]
 801a73a:	687a      	ldr	r2, [r7, #4]
 801a73c:	f7f3 fb73 	bl	800de26 <HAL_PCD_EP_Receive>
 801a740:	4603      	mov	r3, r0
 801a742:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a744:	7dfb      	ldrb	r3, [r7, #23]
 801a746:	4618      	mov	r0, r3
 801a748:	f000 f832 	bl	801a7b0 <USBD_Get_USB_Status>
 801a74c:	4603      	mov	r3, r0
 801a74e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a750:	7dbb      	ldrb	r3, [r7, #22]
}
 801a752:	4618      	mov	r0, r3
 801a754:	3718      	adds	r7, #24
 801a756:	46bd      	mov	sp, r7
 801a758:	bd80      	pop	{r7, pc}

0801a75a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a75a:	b580      	push	{r7, lr}
 801a75c:	b082      	sub	sp, #8
 801a75e:	af00      	add	r7, sp, #0
 801a760:	6078      	str	r0, [r7, #4]
 801a762:	460b      	mov	r3, r1
 801a764:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a76c:	78fa      	ldrb	r2, [r7, #3]
 801a76e:	4611      	mov	r1, r2
 801a770:	4618      	mov	r0, r3
 801a772:	f7f3 fb93 	bl	800de9c <HAL_PCD_EP_GetRxCount>
 801a776:	4603      	mov	r3, r0
}
 801a778:	4618      	mov	r0, r3
 801a77a:	3708      	adds	r7, #8
 801a77c:	46bd      	mov	sp, r7
 801a77e:	bd80      	pop	{r7, pc}

0801a780 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a780:	b480      	push	{r7}
 801a782:	b083      	sub	sp, #12
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a788:	4b03      	ldr	r3, [pc, #12]	@ (801a798 <USBD_static_malloc+0x18>)
}
 801a78a:	4618      	mov	r0, r3
 801a78c:	370c      	adds	r7, #12
 801a78e:	46bd      	mov	sp, r7
 801a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a794:	4770      	bx	lr
 801a796:	bf00      	nop
 801a798:	24048ab8 	.word	0x24048ab8

0801a79c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a79c:	b480      	push	{r7}
 801a79e:	b083      	sub	sp, #12
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801a7a4:	bf00      	nop
 801a7a6:	370c      	adds	r7, #12
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ae:	4770      	bx	lr

0801a7b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a7b0:	b480      	push	{r7}
 801a7b2:	b085      	sub	sp, #20
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a7be:	79fb      	ldrb	r3, [r7, #7]
 801a7c0:	2b03      	cmp	r3, #3
 801a7c2:	d817      	bhi.n	801a7f4 <USBD_Get_USB_Status+0x44>
 801a7c4:	a201      	add	r2, pc, #4	@ (adr r2, 801a7cc <USBD_Get_USB_Status+0x1c>)
 801a7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7ca:	bf00      	nop
 801a7cc:	0801a7dd 	.word	0x0801a7dd
 801a7d0:	0801a7e3 	.word	0x0801a7e3
 801a7d4:	0801a7e9 	.word	0x0801a7e9
 801a7d8:	0801a7ef 	.word	0x0801a7ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a7dc:	2300      	movs	r3, #0
 801a7de:	73fb      	strb	r3, [r7, #15]
    break;
 801a7e0:	e00b      	b.n	801a7fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a7e2:	2303      	movs	r3, #3
 801a7e4:	73fb      	strb	r3, [r7, #15]
    break;
 801a7e6:	e008      	b.n	801a7fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a7e8:	2301      	movs	r3, #1
 801a7ea:	73fb      	strb	r3, [r7, #15]
    break;
 801a7ec:	e005      	b.n	801a7fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a7ee:	2303      	movs	r3, #3
 801a7f0:	73fb      	strb	r3, [r7, #15]
    break;
 801a7f2:	e002      	b.n	801a7fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a7f4:	2303      	movs	r3, #3
 801a7f6:	73fb      	strb	r3, [r7, #15]
    break;
 801a7f8:	bf00      	nop
  }
  return usb_status;
 801a7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	3714      	adds	r7, #20
 801a800:	46bd      	mov	sp, r7
 801a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a806:	4770      	bx	lr

0801a808 <malloc>:
 801a808:	4b02      	ldr	r3, [pc, #8]	@ (801a814 <malloc+0xc>)
 801a80a:	4601      	mov	r1, r0
 801a80c:	6818      	ldr	r0, [r3, #0]
 801a80e:	f000 b825 	b.w	801a85c <_malloc_r>
 801a812:	bf00      	nop
 801a814:	24000344 	.word	0x24000344

0801a818 <sbrk_aligned>:
 801a818:	b570      	push	{r4, r5, r6, lr}
 801a81a:	4e0f      	ldr	r6, [pc, #60]	@ (801a858 <sbrk_aligned+0x40>)
 801a81c:	460c      	mov	r4, r1
 801a81e:	6831      	ldr	r1, [r6, #0]
 801a820:	4605      	mov	r5, r0
 801a822:	b911      	cbnz	r1, 801a82a <sbrk_aligned+0x12>
 801a824:	f000 f8d0 	bl	801a9c8 <_sbrk_r>
 801a828:	6030      	str	r0, [r6, #0]
 801a82a:	4621      	mov	r1, r4
 801a82c:	4628      	mov	r0, r5
 801a82e:	f000 f8cb 	bl	801a9c8 <_sbrk_r>
 801a832:	1c43      	adds	r3, r0, #1
 801a834:	d103      	bne.n	801a83e <sbrk_aligned+0x26>
 801a836:	f04f 34ff 	mov.w	r4, #4294967295
 801a83a:	4620      	mov	r0, r4
 801a83c:	bd70      	pop	{r4, r5, r6, pc}
 801a83e:	1cc4      	adds	r4, r0, #3
 801a840:	f024 0403 	bic.w	r4, r4, #3
 801a844:	42a0      	cmp	r0, r4
 801a846:	d0f8      	beq.n	801a83a <sbrk_aligned+0x22>
 801a848:	1a21      	subs	r1, r4, r0
 801a84a:	4628      	mov	r0, r5
 801a84c:	f000 f8bc 	bl	801a9c8 <_sbrk_r>
 801a850:	3001      	adds	r0, #1
 801a852:	d1f2      	bne.n	801a83a <sbrk_aligned+0x22>
 801a854:	e7ef      	b.n	801a836 <sbrk_aligned+0x1e>
 801a856:	bf00      	nop
 801a858:	24048cd8 	.word	0x24048cd8

0801a85c <_malloc_r>:
 801a85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a860:	1ccd      	adds	r5, r1, #3
 801a862:	f025 0503 	bic.w	r5, r5, #3
 801a866:	3508      	adds	r5, #8
 801a868:	2d0c      	cmp	r5, #12
 801a86a:	bf38      	it	cc
 801a86c:	250c      	movcc	r5, #12
 801a86e:	2d00      	cmp	r5, #0
 801a870:	4606      	mov	r6, r0
 801a872:	db01      	blt.n	801a878 <_malloc_r+0x1c>
 801a874:	42a9      	cmp	r1, r5
 801a876:	d904      	bls.n	801a882 <_malloc_r+0x26>
 801a878:	230c      	movs	r3, #12
 801a87a:	6033      	str	r3, [r6, #0]
 801a87c:	2000      	movs	r0, #0
 801a87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a958 <_malloc_r+0xfc>
 801a886:	f000 f869 	bl	801a95c <__malloc_lock>
 801a88a:	f8d8 3000 	ldr.w	r3, [r8]
 801a88e:	461c      	mov	r4, r3
 801a890:	bb44      	cbnz	r4, 801a8e4 <_malloc_r+0x88>
 801a892:	4629      	mov	r1, r5
 801a894:	4630      	mov	r0, r6
 801a896:	f7ff ffbf 	bl	801a818 <sbrk_aligned>
 801a89a:	1c43      	adds	r3, r0, #1
 801a89c:	4604      	mov	r4, r0
 801a89e:	d158      	bne.n	801a952 <_malloc_r+0xf6>
 801a8a0:	f8d8 4000 	ldr.w	r4, [r8]
 801a8a4:	4627      	mov	r7, r4
 801a8a6:	2f00      	cmp	r7, #0
 801a8a8:	d143      	bne.n	801a932 <_malloc_r+0xd6>
 801a8aa:	2c00      	cmp	r4, #0
 801a8ac:	d04b      	beq.n	801a946 <_malloc_r+0xea>
 801a8ae:	6823      	ldr	r3, [r4, #0]
 801a8b0:	4639      	mov	r1, r7
 801a8b2:	4630      	mov	r0, r6
 801a8b4:	eb04 0903 	add.w	r9, r4, r3
 801a8b8:	f000 f886 	bl	801a9c8 <_sbrk_r>
 801a8bc:	4581      	cmp	r9, r0
 801a8be:	d142      	bne.n	801a946 <_malloc_r+0xea>
 801a8c0:	6821      	ldr	r1, [r4, #0]
 801a8c2:	1a6d      	subs	r5, r5, r1
 801a8c4:	4629      	mov	r1, r5
 801a8c6:	4630      	mov	r0, r6
 801a8c8:	f7ff ffa6 	bl	801a818 <sbrk_aligned>
 801a8cc:	3001      	adds	r0, #1
 801a8ce:	d03a      	beq.n	801a946 <_malloc_r+0xea>
 801a8d0:	6823      	ldr	r3, [r4, #0]
 801a8d2:	442b      	add	r3, r5
 801a8d4:	6023      	str	r3, [r4, #0]
 801a8d6:	f8d8 3000 	ldr.w	r3, [r8]
 801a8da:	685a      	ldr	r2, [r3, #4]
 801a8dc:	bb62      	cbnz	r2, 801a938 <_malloc_r+0xdc>
 801a8de:	f8c8 7000 	str.w	r7, [r8]
 801a8e2:	e00f      	b.n	801a904 <_malloc_r+0xa8>
 801a8e4:	6822      	ldr	r2, [r4, #0]
 801a8e6:	1b52      	subs	r2, r2, r5
 801a8e8:	d420      	bmi.n	801a92c <_malloc_r+0xd0>
 801a8ea:	2a0b      	cmp	r2, #11
 801a8ec:	d917      	bls.n	801a91e <_malloc_r+0xc2>
 801a8ee:	1961      	adds	r1, r4, r5
 801a8f0:	42a3      	cmp	r3, r4
 801a8f2:	6025      	str	r5, [r4, #0]
 801a8f4:	bf18      	it	ne
 801a8f6:	6059      	strne	r1, [r3, #4]
 801a8f8:	6863      	ldr	r3, [r4, #4]
 801a8fa:	bf08      	it	eq
 801a8fc:	f8c8 1000 	streq.w	r1, [r8]
 801a900:	5162      	str	r2, [r4, r5]
 801a902:	604b      	str	r3, [r1, #4]
 801a904:	4630      	mov	r0, r6
 801a906:	f000 f82f 	bl	801a968 <__malloc_unlock>
 801a90a:	f104 000b 	add.w	r0, r4, #11
 801a90e:	1d23      	adds	r3, r4, #4
 801a910:	f020 0007 	bic.w	r0, r0, #7
 801a914:	1ac2      	subs	r2, r0, r3
 801a916:	bf1c      	itt	ne
 801a918:	1a1b      	subne	r3, r3, r0
 801a91a:	50a3      	strne	r3, [r4, r2]
 801a91c:	e7af      	b.n	801a87e <_malloc_r+0x22>
 801a91e:	6862      	ldr	r2, [r4, #4]
 801a920:	42a3      	cmp	r3, r4
 801a922:	bf0c      	ite	eq
 801a924:	f8c8 2000 	streq.w	r2, [r8]
 801a928:	605a      	strne	r2, [r3, #4]
 801a92a:	e7eb      	b.n	801a904 <_malloc_r+0xa8>
 801a92c:	4623      	mov	r3, r4
 801a92e:	6864      	ldr	r4, [r4, #4]
 801a930:	e7ae      	b.n	801a890 <_malloc_r+0x34>
 801a932:	463c      	mov	r4, r7
 801a934:	687f      	ldr	r7, [r7, #4]
 801a936:	e7b6      	b.n	801a8a6 <_malloc_r+0x4a>
 801a938:	461a      	mov	r2, r3
 801a93a:	685b      	ldr	r3, [r3, #4]
 801a93c:	42a3      	cmp	r3, r4
 801a93e:	d1fb      	bne.n	801a938 <_malloc_r+0xdc>
 801a940:	2300      	movs	r3, #0
 801a942:	6053      	str	r3, [r2, #4]
 801a944:	e7de      	b.n	801a904 <_malloc_r+0xa8>
 801a946:	230c      	movs	r3, #12
 801a948:	6033      	str	r3, [r6, #0]
 801a94a:	4630      	mov	r0, r6
 801a94c:	f000 f80c 	bl	801a968 <__malloc_unlock>
 801a950:	e794      	b.n	801a87c <_malloc_r+0x20>
 801a952:	6005      	str	r5, [r0, #0]
 801a954:	e7d6      	b.n	801a904 <_malloc_r+0xa8>
 801a956:	bf00      	nop
 801a958:	24048cdc 	.word	0x24048cdc

0801a95c <__malloc_lock>:
 801a95c:	4801      	ldr	r0, [pc, #4]	@ (801a964 <__malloc_lock+0x8>)
 801a95e:	f000 b86d 	b.w	801aa3c <__retarget_lock_acquire_recursive>
 801a962:	bf00      	nop
 801a964:	24048e1c 	.word	0x24048e1c

0801a968 <__malloc_unlock>:
 801a968:	4801      	ldr	r0, [pc, #4]	@ (801a970 <__malloc_unlock+0x8>)
 801a96a:	f000 b868 	b.w	801aa3e <__retarget_lock_release_recursive>
 801a96e:	bf00      	nop
 801a970:	24048e1c 	.word	0x24048e1c

0801a974 <siprintf>:
 801a974:	b40e      	push	{r1, r2, r3}
 801a976:	b510      	push	{r4, lr}
 801a978:	b09d      	sub	sp, #116	@ 0x74
 801a97a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a97c:	9002      	str	r0, [sp, #8]
 801a97e:	9006      	str	r0, [sp, #24]
 801a980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a984:	480a      	ldr	r0, [pc, #40]	@ (801a9b0 <siprintf+0x3c>)
 801a986:	9107      	str	r1, [sp, #28]
 801a988:	9104      	str	r1, [sp, #16]
 801a98a:	490a      	ldr	r1, [pc, #40]	@ (801a9b4 <siprintf+0x40>)
 801a98c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a990:	9105      	str	r1, [sp, #20]
 801a992:	2400      	movs	r4, #0
 801a994:	a902      	add	r1, sp, #8
 801a996:	6800      	ldr	r0, [r0, #0]
 801a998:	9301      	str	r3, [sp, #4]
 801a99a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801a99c:	f000 f90c 	bl	801abb8 <_svfiprintf_r>
 801a9a0:	9b02      	ldr	r3, [sp, #8]
 801a9a2:	701c      	strb	r4, [r3, #0]
 801a9a4:	b01d      	add	sp, #116	@ 0x74
 801a9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9aa:	b003      	add	sp, #12
 801a9ac:	4770      	bx	lr
 801a9ae:	bf00      	nop
 801a9b0:	24000344 	.word	0x24000344
 801a9b4:	ffff0208 	.word	0xffff0208

0801a9b8 <memset>:
 801a9b8:	4402      	add	r2, r0
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	4293      	cmp	r3, r2
 801a9be:	d100      	bne.n	801a9c2 <memset+0xa>
 801a9c0:	4770      	bx	lr
 801a9c2:	f803 1b01 	strb.w	r1, [r3], #1
 801a9c6:	e7f9      	b.n	801a9bc <memset+0x4>

0801a9c8 <_sbrk_r>:
 801a9c8:	b538      	push	{r3, r4, r5, lr}
 801a9ca:	4d06      	ldr	r5, [pc, #24]	@ (801a9e4 <_sbrk_r+0x1c>)
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	4604      	mov	r4, r0
 801a9d0:	4608      	mov	r0, r1
 801a9d2:	602b      	str	r3, [r5, #0]
 801a9d4:	f7e8 f85a 	bl	8002a8c <_sbrk>
 801a9d8:	1c43      	adds	r3, r0, #1
 801a9da:	d102      	bne.n	801a9e2 <_sbrk_r+0x1a>
 801a9dc:	682b      	ldr	r3, [r5, #0]
 801a9de:	b103      	cbz	r3, 801a9e2 <_sbrk_r+0x1a>
 801a9e0:	6023      	str	r3, [r4, #0]
 801a9e2:	bd38      	pop	{r3, r4, r5, pc}
 801a9e4:	24048e18 	.word	0x24048e18

0801a9e8 <__errno>:
 801a9e8:	4b01      	ldr	r3, [pc, #4]	@ (801a9f0 <__errno+0x8>)
 801a9ea:	6818      	ldr	r0, [r3, #0]
 801a9ec:	4770      	bx	lr
 801a9ee:	bf00      	nop
 801a9f0:	24000344 	.word	0x24000344

0801a9f4 <__libc_init_array>:
 801a9f4:	b570      	push	{r4, r5, r6, lr}
 801a9f6:	4d0d      	ldr	r5, [pc, #52]	@ (801aa2c <__libc_init_array+0x38>)
 801a9f8:	4c0d      	ldr	r4, [pc, #52]	@ (801aa30 <__libc_init_array+0x3c>)
 801a9fa:	1b64      	subs	r4, r4, r5
 801a9fc:	10a4      	asrs	r4, r4, #2
 801a9fe:	2600      	movs	r6, #0
 801aa00:	42a6      	cmp	r6, r4
 801aa02:	d109      	bne.n	801aa18 <__libc_init_array+0x24>
 801aa04:	4d0b      	ldr	r5, [pc, #44]	@ (801aa34 <__libc_init_array+0x40>)
 801aa06:	4c0c      	ldr	r4, [pc, #48]	@ (801aa38 <__libc_init_array+0x44>)
 801aa08:	f000 fbae 	bl	801b168 <_init>
 801aa0c:	1b64      	subs	r4, r4, r5
 801aa0e:	10a4      	asrs	r4, r4, #2
 801aa10:	2600      	movs	r6, #0
 801aa12:	42a6      	cmp	r6, r4
 801aa14:	d105      	bne.n	801aa22 <__libc_init_array+0x2e>
 801aa16:	bd70      	pop	{r4, r5, r6, pc}
 801aa18:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa1c:	4798      	blx	r3
 801aa1e:	3601      	adds	r6, #1
 801aa20:	e7ee      	b.n	801aa00 <__libc_init_array+0xc>
 801aa22:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa26:	4798      	blx	r3
 801aa28:	3601      	adds	r6, #1
 801aa2a:	e7f2      	b.n	801aa12 <__libc_init_array+0x1e>
 801aa2c:	0801b988 	.word	0x0801b988
 801aa30:	0801b988 	.word	0x0801b988
 801aa34:	0801b988 	.word	0x0801b988
 801aa38:	0801b98c 	.word	0x0801b98c

0801aa3c <__retarget_lock_acquire_recursive>:
 801aa3c:	4770      	bx	lr

0801aa3e <__retarget_lock_release_recursive>:
 801aa3e:	4770      	bx	lr

0801aa40 <strcpy>:
 801aa40:	4603      	mov	r3, r0
 801aa42:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa46:	f803 2b01 	strb.w	r2, [r3], #1
 801aa4a:	2a00      	cmp	r2, #0
 801aa4c:	d1f9      	bne.n	801aa42 <strcpy+0x2>
 801aa4e:	4770      	bx	lr

0801aa50 <memcpy>:
 801aa50:	440a      	add	r2, r1
 801aa52:	4291      	cmp	r1, r2
 801aa54:	f100 33ff 	add.w	r3, r0, #4294967295
 801aa58:	d100      	bne.n	801aa5c <memcpy+0xc>
 801aa5a:	4770      	bx	lr
 801aa5c:	b510      	push	{r4, lr}
 801aa5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa62:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aa66:	4291      	cmp	r1, r2
 801aa68:	d1f9      	bne.n	801aa5e <memcpy+0xe>
 801aa6a:	bd10      	pop	{r4, pc}

0801aa6c <_free_r>:
 801aa6c:	b538      	push	{r3, r4, r5, lr}
 801aa6e:	4605      	mov	r5, r0
 801aa70:	2900      	cmp	r1, #0
 801aa72:	d041      	beq.n	801aaf8 <_free_r+0x8c>
 801aa74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa78:	1f0c      	subs	r4, r1, #4
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	bfb8      	it	lt
 801aa7e:	18e4      	addlt	r4, r4, r3
 801aa80:	f7ff ff6c 	bl	801a95c <__malloc_lock>
 801aa84:	4a1d      	ldr	r2, [pc, #116]	@ (801aafc <_free_r+0x90>)
 801aa86:	6813      	ldr	r3, [r2, #0]
 801aa88:	b933      	cbnz	r3, 801aa98 <_free_r+0x2c>
 801aa8a:	6063      	str	r3, [r4, #4]
 801aa8c:	6014      	str	r4, [r2, #0]
 801aa8e:	4628      	mov	r0, r5
 801aa90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aa94:	f7ff bf68 	b.w	801a968 <__malloc_unlock>
 801aa98:	42a3      	cmp	r3, r4
 801aa9a:	d908      	bls.n	801aaae <_free_r+0x42>
 801aa9c:	6820      	ldr	r0, [r4, #0]
 801aa9e:	1821      	adds	r1, r4, r0
 801aaa0:	428b      	cmp	r3, r1
 801aaa2:	bf01      	itttt	eq
 801aaa4:	6819      	ldreq	r1, [r3, #0]
 801aaa6:	685b      	ldreq	r3, [r3, #4]
 801aaa8:	1809      	addeq	r1, r1, r0
 801aaaa:	6021      	streq	r1, [r4, #0]
 801aaac:	e7ed      	b.n	801aa8a <_free_r+0x1e>
 801aaae:	461a      	mov	r2, r3
 801aab0:	685b      	ldr	r3, [r3, #4]
 801aab2:	b10b      	cbz	r3, 801aab8 <_free_r+0x4c>
 801aab4:	42a3      	cmp	r3, r4
 801aab6:	d9fa      	bls.n	801aaae <_free_r+0x42>
 801aab8:	6811      	ldr	r1, [r2, #0]
 801aaba:	1850      	adds	r0, r2, r1
 801aabc:	42a0      	cmp	r0, r4
 801aabe:	d10b      	bne.n	801aad8 <_free_r+0x6c>
 801aac0:	6820      	ldr	r0, [r4, #0]
 801aac2:	4401      	add	r1, r0
 801aac4:	1850      	adds	r0, r2, r1
 801aac6:	4283      	cmp	r3, r0
 801aac8:	6011      	str	r1, [r2, #0]
 801aaca:	d1e0      	bne.n	801aa8e <_free_r+0x22>
 801aacc:	6818      	ldr	r0, [r3, #0]
 801aace:	685b      	ldr	r3, [r3, #4]
 801aad0:	6053      	str	r3, [r2, #4]
 801aad2:	4408      	add	r0, r1
 801aad4:	6010      	str	r0, [r2, #0]
 801aad6:	e7da      	b.n	801aa8e <_free_r+0x22>
 801aad8:	d902      	bls.n	801aae0 <_free_r+0x74>
 801aada:	230c      	movs	r3, #12
 801aadc:	602b      	str	r3, [r5, #0]
 801aade:	e7d6      	b.n	801aa8e <_free_r+0x22>
 801aae0:	6820      	ldr	r0, [r4, #0]
 801aae2:	1821      	adds	r1, r4, r0
 801aae4:	428b      	cmp	r3, r1
 801aae6:	bf04      	itt	eq
 801aae8:	6819      	ldreq	r1, [r3, #0]
 801aaea:	685b      	ldreq	r3, [r3, #4]
 801aaec:	6063      	str	r3, [r4, #4]
 801aaee:	bf04      	itt	eq
 801aaf0:	1809      	addeq	r1, r1, r0
 801aaf2:	6021      	streq	r1, [r4, #0]
 801aaf4:	6054      	str	r4, [r2, #4]
 801aaf6:	e7ca      	b.n	801aa8e <_free_r+0x22>
 801aaf8:	bd38      	pop	{r3, r4, r5, pc}
 801aafa:	bf00      	nop
 801aafc:	24048cdc 	.word	0x24048cdc

0801ab00 <__ssputs_r>:
 801ab00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab04:	688e      	ldr	r6, [r1, #8]
 801ab06:	461f      	mov	r7, r3
 801ab08:	42be      	cmp	r6, r7
 801ab0a:	680b      	ldr	r3, [r1, #0]
 801ab0c:	4682      	mov	sl, r0
 801ab0e:	460c      	mov	r4, r1
 801ab10:	4690      	mov	r8, r2
 801ab12:	d82d      	bhi.n	801ab70 <__ssputs_r+0x70>
 801ab14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ab18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ab1c:	d026      	beq.n	801ab6c <__ssputs_r+0x6c>
 801ab1e:	6965      	ldr	r5, [r4, #20]
 801ab20:	6909      	ldr	r1, [r1, #16]
 801ab22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab26:	eba3 0901 	sub.w	r9, r3, r1
 801ab2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ab2e:	1c7b      	adds	r3, r7, #1
 801ab30:	444b      	add	r3, r9
 801ab32:	106d      	asrs	r5, r5, #1
 801ab34:	429d      	cmp	r5, r3
 801ab36:	bf38      	it	cc
 801ab38:	461d      	movcc	r5, r3
 801ab3a:	0553      	lsls	r3, r2, #21
 801ab3c:	d527      	bpl.n	801ab8e <__ssputs_r+0x8e>
 801ab3e:	4629      	mov	r1, r5
 801ab40:	f7ff fe8c 	bl	801a85c <_malloc_r>
 801ab44:	4606      	mov	r6, r0
 801ab46:	b360      	cbz	r0, 801aba2 <__ssputs_r+0xa2>
 801ab48:	6921      	ldr	r1, [r4, #16]
 801ab4a:	464a      	mov	r2, r9
 801ab4c:	f7ff ff80 	bl	801aa50 <memcpy>
 801ab50:	89a3      	ldrh	r3, [r4, #12]
 801ab52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ab56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ab5a:	81a3      	strh	r3, [r4, #12]
 801ab5c:	6126      	str	r6, [r4, #16]
 801ab5e:	6165      	str	r5, [r4, #20]
 801ab60:	444e      	add	r6, r9
 801ab62:	eba5 0509 	sub.w	r5, r5, r9
 801ab66:	6026      	str	r6, [r4, #0]
 801ab68:	60a5      	str	r5, [r4, #8]
 801ab6a:	463e      	mov	r6, r7
 801ab6c:	42be      	cmp	r6, r7
 801ab6e:	d900      	bls.n	801ab72 <__ssputs_r+0x72>
 801ab70:	463e      	mov	r6, r7
 801ab72:	6820      	ldr	r0, [r4, #0]
 801ab74:	4632      	mov	r2, r6
 801ab76:	4641      	mov	r1, r8
 801ab78:	f000 faa6 	bl	801b0c8 <memmove>
 801ab7c:	68a3      	ldr	r3, [r4, #8]
 801ab7e:	1b9b      	subs	r3, r3, r6
 801ab80:	60a3      	str	r3, [r4, #8]
 801ab82:	6823      	ldr	r3, [r4, #0]
 801ab84:	4433      	add	r3, r6
 801ab86:	6023      	str	r3, [r4, #0]
 801ab88:	2000      	movs	r0, #0
 801ab8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab8e:	462a      	mov	r2, r5
 801ab90:	f000 fab4 	bl	801b0fc <_realloc_r>
 801ab94:	4606      	mov	r6, r0
 801ab96:	2800      	cmp	r0, #0
 801ab98:	d1e0      	bne.n	801ab5c <__ssputs_r+0x5c>
 801ab9a:	6921      	ldr	r1, [r4, #16]
 801ab9c:	4650      	mov	r0, sl
 801ab9e:	f7ff ff65 	bl	801aa6c <_free_r>
 801aba2:	230c      	movs	r3, #12
 801aba4:	f8ca 3000 	str.w	r3, [sl]
 801aba8:	89a3      	ldrh	r3, [r4, #12]
 801abaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801abae:	81a3      	strh	r3, [r4, #12]
 801abb0:	f04f 30ff 	mov.w	r0, #4294967295
 801abb4:	e7e9      	b.n	801ab8a <__ssputs_r+0x8a>
	...

0801abb8 <_svfiprintf_r>:
 801abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abbc:	4698      	mov	r8, r3
 801abbe:	898b      	ldrh	r3, [r1, #12]
 801abc0:	061b      	lsls	r3, r3, #24
 801abc2:	b09d      	sub	sp, #116	@ 0x74
 801abc4:	4607      	mov	r7, r0
 801abc6:	460d      	mov	r5, r1
 801abc8:	4614      	mov	r4, r2
 801abca:	d510      	bpl.n	801abee <_svfiprintf_r+0x36>
 801abcc:	690b      	ldr	r3, [r1, #16]
 801abce:	b973      	cbnz	r3, 801abee <_svfiprintf_r+0x36>
 801abd0:	2140      	movs	r1, #64	@ 0x40
 801abd2:	f7ff fe43 	bl	801a85c <_malloc_r>
 801abd6:	6028      	str	r0, [r5, #0]
 801abd8:	6128      	str	r0, [r5, #16]
 801abda:	b930      	cbnz	r0, 801abea <_svfiprintf_r+0x32>
 801abdc:	230c      	movs	r3, #12
 801abde:	603b      	str	r3, [r7, #0]
 801abe0:	f04f 30ff 	mov.w	r0, #4294967295
 801abe4:	b01d      	add	sp, #116	@ 0x74
 801abe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abea:	2340      	movs	r3, #64	@ 0x40
 801abec:	616b      	str	r3, [r5, #20]
 801abee:	2300      	movs	r3, #0
 801abf0:	9309      	str	r3, [sp, #36]	@ 0x24
 801abf2:	2320      	movs	r3, #32
 801abf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801abf8:	f8cd 800c 	str.w	r8, [sp, #12]
 801abfc:	2330      	movs	r3, #48	@ 0x30
 801abfe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ad9c <_svfiprintf_r+0x1e4>
 801ac02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ac06:	f04f 0901 	mov.w	r9, #1
 801ac0a:	4623      	mov	r3, r4
 801ac0c:	469a      	mov	sl, r3
 801ac0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac12:	b10a      	cbz	r2, 801ac18 <_svfiprintf_r+0x60>
 801ac14:	2a25      	cmp	r2, #37	@ 0x25
 801ac16:	d1f9      	bne.n	801ac0c <_svfiprintf_r+0x54>
 801ac18:	ebba 0b04 	subs.w	fp, sl, r4
 801ac1c:	d00b      	beq.n	801ac36 <_svfiprintf_r+0x7e>
 801ac1e:	465b      	mov	r3, fp
 801ac20:	4622      	mov	r2, r4
 801ac22:	4629      	mov	r1, r5
 801ac24:	4638      	mov	r0, r7
 801ac26:	f7ff ff6b 	bl	801ab00 <__ssputs_r>
 801ac2a:	3001      	adds	r0, #1
 801ac2c:	f000 80a7 	beq.w	801ad7e <_svfiprintf_r+0x1c6>
 801ac30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac32:	445a      	add	r2, fp
 801ac34:	9209      	str	r2, [sp, #36]	@ 0x24
 801ac36:	f89a 3000 	ldrb.w	r3, [sl]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	f000 809f 	beq.w	801ad7e <_svfiprintf_r+0x1c6>
 801ac40:	2300      	movs	r3, #0
 801ac42:	f04f 32ff 	mov.w	r2, #4294967295
 801ac46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac4a:	f10a 0a01 	add.w	sl, sl, #1
 801ac4e:	9304      	str	r3, [sp, #16]
 801ac50:	9307      	str	r3, [sp, #28]
 801ac52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ac56:	931a      	str	r3, [sp, #104]	@ 0x68
 801ac58:	4654      	mov	r4, sl
 801ac5a:	2205      	movs	r2, #5
 801ac5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac60:	484e      	ldr	r0, [pc, #312]	@ (801ad9c <_svfiprintf_r+0x1e4>)
 801ac62:	f7e5 fb45 	bl	80002f0 <memchr>
 801ac66:	9a04      	ldr	r2, [sp, #16]
 801ac68:	b9d8      	cbnz	r0, 801aca2 <_svfiprintf_r+0xea>
 801ac6a:	06d0      	lsls	r0, r2, #27
 801ac6c:	bf44      	itt	mi
 801ac6e:	2320      	movmi	r3, #32
 801ac70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac74:	0711      	lsls	r1, r2, #28
 801ac76:	bf44      	itt	mi
 801ac78:	232b      	movmi	r3, #43	@ 0x2b
 801ac7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac7e:	f89a 3000 	ldrb.w	r3, [sl]
 801ac82:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac84:	d015      	beq.n	801acb2 <_svfiprintf_r+0xfa>
 801ac86:	9a07      	ldr	r2, [sp, #28]
 801ac88:	4654      	mov	r4, sl
 801ac8a:	2000      	movs	r0, #0
 801ac8c:	f04f 0c0a 	mov.w	ip, #10
 801ac90:	4621      	mov	r1, r4
 801ac92:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac96:	3b30      	subs	r3, #48	@ 0x30
 801ac98:	2b09      	cmp	r3, #9
 801ac9a:	d94b      	bls.n	801ad34 <_svfiprintf_r+0x17c>
 801ac9c:	b1b0      	cbz	r0, 801accc <_svfiprintf_r+0x114>
 801ac9e:	9207      	str	r2, [sp, #28]
 801aca0:	e014      	b.n	801accc <_svfiprintf_r+0x114>
 801aca2:	eba0 0308 	sub.w	r3, r0, r8
 801aca6:	fa09 f303 	lsl.w	r3, r9, r3
 801acaa:	4313      	orrs	r3, r2
 801acac:	9304      	str	r3, [sp, #16]
 801acae:	46a2      	mov	sl, r4
 801acb0:	e7d2      	b.n	801ac58 <_svfiprintf_r+0xa0>
 801acb2:	9b03      	ldr	r3, [sp, #12]
 801acb4:	1d19      	adds	r1, r3, #4
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	9103      	str	r1, [sp, #12]
 801acba:	2b00      	cmp	r3, #0
 801acbc:	bfbb      	ittet	lt
 801acbe:	425b      	neglt	r3, r3
 801acc0:	f042 0202 	orrlt.w	r2, r2, #2
 801acc4:	9307      	strge	r3, [sp, #28]
 801acc6:	9307      	strlt	r3, [sp, #28]
 801acc8:	bfb8      	it	lt
 801acca:	9204      	strlt	r2, [sp, #16]
 801accc:	7823      	ldrb	r3, [r4, #0]
 801acce:	2b2e      	cmp	r3, #46	@ 0x2e
 801acd0:	d10a      	bne.n	801ace8 <_svfiprintf_r+0x130>
 801acd2:	7863      	ldrb	r3, [r4, #1]
 801acd4:	2b2a      	cmp	r3, #42	@ 0x2a
 801acd6:	d132      	bne.n	801ad3e <_svfiprintf_r+0x186>
 801acd8:	9b03      	ldr	r3, [sp, #12]
 801acda:	1d1a      	adds	r2, r3, #4
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	9203      	str	r2, [sp, #12]
 801ace0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ace4:	3402      	adds	r4, #2
 801ace6:	9305      	str	r3, [sp, #20]
 801ace8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801adac <_svfiprintf_r+0x1f4>
 801acec:	7821      	ldrb	r1, [r4, #0]
 801acee:	2203      	movs	r2, #3
 801acf0:	4650      	mov	r0, sl
 801acf2:	f7e5 fafd 	bl	80002f0 <memchr>
 801acf6:	b138      	cbz	r0, 801ad08 <_svfiprintf_r+0x150>
 801acf8:	9b04      	ldr	r3, [sp, #16]
 801acfa:	eba0 000a 	sub.w	r0, r0, sl
 801acfe:	2240      	movs	r2, #64	@ 0x40
 801ad00:	4082      	lsls	r2, r0
 801ad02:	4313      	orrs	r3, r2
 801ad04:	3401      	adds	r4, #1
 801ad06:	9304      	str	r3, [sp, #16]
 801ad08:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad0c:	4824      	ldr	r0, [pc, #144]	@ (801ada0 <_svfiprintf_r+0x1e8>)
 801ad0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ad12:	2206      	movs	r2, #6
 801ad14:	f7e5 faec 	bl	80002f0 <memchr>
 801ad18:	2800      	cmp	r0, #0
 801ad1a:	d036      	beq.n	801ad8a <_svfiprintf_r+0x1d2>
 801ad1c:	4b21      	ldr	r3, [pc, #132]	@ (801ada4 <_svfiprintf_r+0x1ec>)
 801ad1e:	bb1b      	cbnz	r3, 801ad68 <_svfiprintf_r+0x1b0>
 801ad20:	9b03      	ldr	r3, [sp, #12]
 801ad22:	3307      	adds	r3, #7
 801ad24:	f023 0307 	bic.w	r3, r3, #7
 801ad28:	3308      	adds	r3, #8
 801ad2a:	9303      	str	r3, [sp, #12]
 801ad2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad2e:	4433      	add	r3, r6
 801ad30:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad32:	e76a      	b.n	801ac0a <_svfiprintf_r+0x52>
 801ad34:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad38:	460c      	mov	r4, r1
 801ad3a:	2001      	movs	r0, #1
 801ad3c:	e7a8      	b.n	801ac90 <_svfiprintf_r+0xd8>
 801ad3e:	2300      	movs	r3, #0
 801ad40:	3401      	adds	r4, #1
 801ad42:	9305      	str	r3, [sp, #20]
 801ad44:	4619      	mov	r1, r3
 801ad46:	f04f 0c0a 	mov.w	ip, #10
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad50:	3a30      	subs	r2, #48	@ 0x30
 801ad52:	2a09      	cmp	r2, #9
 801ad54:	d903      	bls.n	801ad5e <_svfiprintf_r+0x1a6>
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d0c6      	beq.n	801ace8 <_svfiprintf_r+0x130>
 801ad5a:	9105      	str	r1, [sp, #20]
 801ad5c:	e7c4      	b.n	801ace8 <_svfiprintf_r+0x130>
 801ad5e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad62:	4604      	mov	r4, r0
 801ad64:	2301      	movs	r3, #1
 801ad66:	e7f0      	b.n	801ad4a <_svfiprintf_r+0x192>
 801ad68:	ab03      	add	r3, sp, #12
 801ad6a:	9300      	str	r3, [sp, #0]
 801ad6c:	462a      	mov	r2, r5
 801ad6e:	4b0e      	ldr	r3, [pc, #56]	@ (801ada8 <_svfiprintf_r+0x1f0>)
 801ad70:	a904      	add	r1, sp, #16
 801ad72:	4638      	mov	r0, r7
 801ad74:	f3af 8000 	nop.w
 801ad78:	1c42      	adds	r2, r0, #1
 801ad7a:	4606      	mov	r6, r0
 801ad7c:	d1d6      	bne.n	801ad2c <_svfiprintf_r+0x174>
 801ad7e:	89ab      	ldrh	r3, [r5, #12]
 801ad80:	065b      	lsls	r3, r3, #25
 801ad82:	f53f af2d 	bmi.w	801abe0 <_svfiprintf_r+0x28>
 801ad86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ad88:	e72c      	b.n	801abe4 <_svfiprintf_r+0x2c>
 801ad8a:	ab03      	add	r3, sp, #12
 801ad8c:	9300      	str	r3, [sp, #0]
 801ad8e:	462a      	mov	r2, r5
 801ad90:	4b05      	ldr	r3, [pc, #20]	@ (801ada8 <_svfiprintf_r+0x1f0>)
 801ad92:	a904      	add	r1, sp, #16
 801ad94:	4638      	mov	r0, r7
 801ad96:	f000 f879 	bl	801ae8c <_printf_i>
 801ad9a:	e7ed      	b.n	801ad78 <_svfiprintf_r+0x1c0>
 801ad9c:	0801b94c 	.word	0x0801b94c
 801ada0:	0801b956 	.word	0x0801b956
 801ada4:	00000000 	.word	0x00000000
 801ada8:	0801ab01 	.word	0x0801ab01
 801adac:	0801b952 	.word	0x0801b952

0801adb0 <_printf_common>:
 801adb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801adb4:	4616      	mov	r6, r2
 801adb6:	4698      	mov	r8, r3
 801adb8:	688a      	ldr	r2, [r1, #8]
 801adba:	690b      	ldr	r3, [r1, #16]
 801adbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801adc0:	4293      	cmp	r3, r2
 801adc2:	bfb8      	it	lt
 801adc4:	4613      	movlt	r3, r2
 801adc6:	6033      	str	r3, [r6, #0]
 801adc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801adcc:	4607      	mov	r7, r0
 801adce:	460c      	mov	r4, r1
 801add0:	b10a      	cbz	r2, 801add6 <_printf_common+0x26>
 801add2:	3301      	adds	r3, #1
 801add4:	6033      	str	r3, [r6, #0]
 801add6:	6823      	ldr	r3, [r4, #0]
 801add8:	0699      	lsls	r1, r3, #26
 801adda:	bf42      	ittt	mi
 801addc:	6833      	ldrmi	r3, [r6, #0]
 801adde:	3302      	addmi	r3, #2
 801ade0:	6033      	strmi	r3, [r6, #0]
 801ade2:	6825      	ldr	r5, [r4, #0]
 801ade4:	f015 0506 	ands.w	r5, r5, #6
 801ade8:	d106      	bne.n	801adf8 <_printf_common+0x48>
 801adea:	f104 0a19 	add.w	sl, r4, #25
 801adee:	68e3      	ldr	r3, [r4, #12]
 801adf0:	6832      	ldr	r2, [r6, #0]
 801adf2:	1a9b      	subs	r3, r3, r2
 801adf4:	42ab      	cmp	r3, r5
 801adf6:	dc26      	bgt.n	801ae46 <_printf_common+0x96>
 801adf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801adfc:	6822      	ldr	r2, [r4, #0]
 801adfe:	3b00      	subs	r3, #0
 801ae00:	bf18      	it	ne
 801ae02:	2301      	movne	r3, #1
 801ae04:	0692      	lsls	r2, r2, #26
 801ae06:	d42b      	bmi.n	801ae60 <_printf_common+0xb0>
 801ae08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ae0c:	4641      	mov	r1, r8
 801ae0e:	4638      	mov	r0, r7
 801ae10:	47c8      	blx	r9
 801ae12:	3001      	adds	r0, #1
 801ae14:	d01e      	beq.n	801ae54 <_printf_common+0xa4>
 801ae16:	6823      	ldr	r3, [r4, #0]
 801ae18:	6922      	ldr	r2, [r4, #16]
 801ae1a:	f003 0306 	and.w	r3, r3, #6
 801ae1e:	2b04      	cmp	r3, #4
 801ae20:	bf02      	ittt	eq
 801ae22:	68e5      	ldreq	r5, [r4, #12]
 801ae24:	6833      	ldreq	r3, [r6, #0]
 801ae26:	1aed      	subeq	r5, r5, r3
 801ae28:	68a3      	ldr	r3, [r4, #8]
 801ae2a:	bf0c      	ite	eq
 801ae2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae30:	2500      	movne	r5, #0
 801ae32:	4293      	cmp	r3, r2
 801ae34:	bfc4      	itt	gt
 801ae36:	1a9b      	subgt	r3, r3, r2
 801ae38:	18ed      	addgt	r5, r5, r3
 801ae3a:	2600      	movs	r6, #0
 801ae3c:	341a      	adds	r4, #26
 801ae3e:	42b5      	cmp	r5, r6
 801ae40:	d11a      	bne.n	801ae78 <_printf_common+0xc8>
 801ae42:	2000      	movs	r0, #0
 801ae44:	e008      	b.n	801ae58 <_printf_common+0xa8>
 801ae46:	2301      	movs	r3, #1
 801ae48:	4652      	mov	r2, sl
 801ae4a:	4641      	mov	r1, r8
 801ae4c:	4638      	mov	r0, r7
 801ae4e:	47c8      	blx	r9
 801ae50:	3001      	adds	r0, #1
 801ae52:	d103      	bne.n	801ae5c <_printf_common+0xac>
 801ae54:	f04f 30ff 	mov.w	r0, #4294967295
 801ae58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae5c:	3501      	adds	r5, #1
 801ae5e:	e7c6      	b.n	801adee <_printf_common+0x3e>
 801ae60:	18e1      	adds	r1, r4, r3
 801ae62:	1c5a      	adds	r2, r3, #1
 801ae64:	2030      	movs	r0, #48	@ 0x30
 801ae66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ae6a:	4422      	add	r2, r4
 801ae6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ae70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ae74:	3302      	adds	r3, #2
 801ae76:	e7c7      	b.n	801ae08 <_printf_common+0x58>
 801ae78:	2301      	movs	r3, #1
 801ae7a:	4622      	mov	r2, r4
 801ae7c:	4641      	mov	r1, r8
 801ae7e:	4638      	mov	r0, r7
 801ae80:	47c8      	blx	r9
 801ae82:	3001      	adds	r0, #1
 801ae84:	d0e6      	beq.n	801ae54 <_printf_common+0xa4>
 801ae86:	3601      	adds	r6, #1
 801ae88:	e7d9      	b.n	801ae3e <_printf_common+0x8e>
	...

0801ae8c <_printf_i>:
 801ae8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae90:	7e0f      	ldrb	r7, [r1, #24]
 801ae92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ae94:	2f78      	cmp	r7, #120	@ 0x78
 801ae96:	4691      	mov	r9, r2
 801ae98:	4680      	mov	r8, r0
 801ae9a:	460c      	mov	r4, r1
 801ae9c:	469a      	mov	sl, r3
 801ae9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aea2:	d807      	bhi.n	801aeb4 <_printf_i+0x28>
 801aea4:	2f62      	cmp	r7, #98	@ 0x62
 801aea6:	d80a      	bhi.n	801aebe <_printf_i+0x32>
 801aea8:	2f00      	cmp	r7, #0
 801aeaa:	f000 80d1 	beq.w	801b050 <_printf_i+0x1c4>
 801aeae:	2f58      	cmp	r7, #88	@ 0x58
 801aeb0:	f000 80b8 	beq.w	801b024 <_printf_i+0x198>
 801aeb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aeb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aebc:	e03a      	b.n	801af34 <_printf_i+0xa8>
 801aebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aec2:	2b15      	cmp	r3, #21
 801aec4:	d8f6      	bhi.n	801aeb4 <_printf_i+0x28>
 801aec6:	a101      	add	r1, pc, #4	@ (adr r1, 801aecc <_printf_i+0x40>)
 801aec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aecc:	0801af25 	.word	0x0801af25
 801aed0:	0801af39 	.word	0x0801af39
 801aed4:	0801aeb5 	.word	0x0801aeb5
 801aed8:	0801aeb5 	.word	0x0801aeb5
 801aedc:	0801aeb5 	.word	0x0801aeb5
 801aee0:	0801aeb5 	.word	0x0801aeb5
 801aee4:	0801af39 	.word	0x0801af39
 801aee8:	0801aeb5 	.word	0x0801aeb5
 801aeec:	0801aeb5 	.word	0x0801aeb5
 801aef0:	0801aeb5 	.word	0x0801aeb5
 801aef4:	0801aeb5 	.word	0x0801aeb5
 801aef8:	0801b037 	.word	0x0801b037
 801aefc:	0801af63 	.word	0x0801af63
 801af00:	0801aff1 	.word	0x0801aff1
 801af04:	0801aeb5 	.word	0x0801aeb5
 801af08:	0801aeb5 	.word	0x0801aeb5
 801af0c:	0801b059 	.word	0x0801b059
 801af10:	0801aeb5 	.word	0x0801aeb5
 801af14:	0801af63 	.word	0x0801af63
 801af18:	0801aeb5 	.word	0x0801aeb5
 801af1c:	0801aeb5 	.word	0x0801aeb5
 801af20:	0801aff9 	.word	0x0801aff9
 801af24:	6833      	ldr	r3, [r6, #0]
 801af26:	1d1a      	adds	r2, r3, #4
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	6032      	str	r2, [r6, #0]
 801af2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801af30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801af34:	2301      	movs	r3, #1
 801af36:	e09c      	b.n	801b072 <_printf_i+0x1e6>
 801af38:	6833      	ldr	r3, [r6, #0]
 801af3a:	6820      	ldr	r0, [r4, #0]
 801af3c:	1d19      	adds	r1, r3, #4
 801af3e:	6031      	str	r1, [r6, #0]
 801af40:	0606      	lsls	r6, r0, #24
 801af42:	d501      	bpl.n	801af48 <_printf_i+0xbc>
 801af44:	681d      	ldr	r5, [r3, #0]
 801af46:	e003      	b.n	801af50 <_printf_i+0xc4>
 801af48:	0645      	lsls	r5, r0, #25
 801af4a:	d5fb      	bpl.n	801af44 <_printf_i+0xb8>
 801af4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801af50:	2d00      	cmp	r5, #0
 801af52:	da03      	bge.n	801af5c <_printf_i+0xd0>
 801af54:	232d      	movs	r3, #45	@ 0x2d
 801af56:	426d      	negs	r5, r5
 801af58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801af5c:	4858      	ldr	r0, [pc, #352]	@ (801b0c0 <_printf_i+0x234>)
 801af5e:	230a      	movs	r3, #10
 801af60:	e011      	b.n	801af86 <_printf_i+0xfa>
 801af62:	6821      	ldr	r1, [r4, #0]
 801af64:	6833      	ldr	r3, [r6, #0]
 801af66:	0608      	lsls	r0, r1, #24
 801af68:	f853 5b04 	ldr.w	r5, [r3], #4
 801af6c:	d402      	bmi.n	801af74 <_printf_i+0xe8>
 801af6e:	0649      	lsls	r1, r1, #25
 801af70:	bf48      	it	mi
 801af72:	b2ad      	uxthmi	r5, r5
 801af74:	2f6f      	cmp	r7, #111	@ 0x6f
 801af76:	4852      	ldr	r0, [pc, #328]	@ (801b0c0 <_printf_i+0x234>)
 801af78:	6033      	str	r3, [r6, #0]
 801af7a:	bf14      	ite	ne
 801af7c:	230a      	movne	r3, #10
 801af7e:	2308      	moveq	r3, #8
 801af80:	2100      	movs	r1, #0
 801af82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801af86:	6866      	ldr	r6, [r4, #4]
 801af88:	60a6      	str	r6, [r4, #8]
 801af8a:	2e00      	cmp	r6, #0
 801af8c:	db05      	blt.n	801af9a <_printf_i+0x10e>
 801af8e:	6821      	ldr	r1, [r4, #0]
 801af90:	432e      	orrs	r6, r5
 801af92:	f021 0104 	bic.w	r1, r1, #4
 801af96:	6021      	str	r1, [r4, #0]
 801af98:	d04b      	beq.n	801b032 <_printf_i+0x1a6>
 801af9a:	4616      	mov	r6, r2
 801af9c:	fbb5 f1f3 	udiv	r1, r5, r3
 801afa0:	fb03 5711 	mls	r7, r3, r1, r5
 801afa4:	5dc7      	ldrb	r7, [r0, r7]
 801afa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801afaa:	462f      	mov	r7, r5
 801afac:	42bb      	cmp	r3, r7
 801afae:	460d      	mov	r5, r1
 801afb0:	d9f4      	bls.n	801af9c <_printf_i+0x110>
 801afb2:	2b08      	cmp	r3, #8
 801afb4:	d10b      	bne.n	801afce <_printf_i+0x142>
 801afb6:	6823      	ldr	r3, [r4, #0]
 801afb8:	07df      	lsls	r7, r3, #31
 801afba:	d508      	bpl.n	801afce <_printf_i+0x142>
 801afbc:	6923      	ldr	r3, [r4, #16]
 801afbe:	6861      	ldr	r1, [r4, #4]
 801afc0:	4299      	cmp	r1, r3
 801afc2:	bfde      	ittt	le
 801afc4:	2330      	movle	r3, #48	@ 0x30
 801afc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 801afca:	f106 36ff 	addle.w	r6, r6, #4294967295
 801afce:	1b92      	subs	r2, r2, r6
 801afd0:	6122      	str	r2, [r4, #16]
 801afd2:	f8cd a000 	str.w	sl, [sp]
 801afd6:	464b      	mov	r3, r9
 801afd8:	aa03      	add	r2, sp, #12
 801afda:	4621      	mov	r1, r4
 801afdc:	4640      	mov	r0, r8
 801afde:	f7ff fee7 	bl	801adb0 <_printf_common>
 801afe2:	3001      	adds	r0, #1
 801afe4:	d14a      	bne.n	801b07c <_printf_i+0x1f0>
 801afe6:	f04f 30ff 	mov.w	r0, #4294967295
 801afea:	b004      	add	sp, #16
 801afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aff0:	6823      	ldr	r3, [r4, #0]
 801aff2:	f043 0320 	orr.w	r3, r3, #32
 801aff6:	6023      	str	r3, [r4, #0]
 801aff8:	4832      	ldr	r0, [pc, #200]	@ (801b0c4 <_printf_i+0x238>)
 801affa:	2778      	movs	r7, #120	@ 0x78
 801affc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b000:	6823      	ldr	r3, [r4, #0]
 801b002:	6831      	ldr	r1, [r6, #0]
 801b004:	061f      	lsls	r7, r3, #24
 801b006:	f851 5b04 	ldr.w	r5, [r1], #4
 801b00a:	d402      	bmi.n	801b012 <_printf_i+0x186>
 801b00c:	065f      	lsls	r7, r3, #25
 801b00e:	bf48      	it	mi
 801b010:	b2ad      	uxthmi	r5, r5
 801b012:	6031      	str	r1, [r6, #0]
 801b014:	07d9      	lsls	r1, r3, #31
 801b016:	bf44      	itt	mi
 801b018:	f043 0320 	orrmi.w	r3, r3, #32
 801b01c:	6023      	strmi	r3, [r4, #0]
 801b01e:	b11d      	cbz	r5, 801b028 <_printf_i+0x19c>
 801b020:	2310      	movs	r3, #16
 801b022:	e7ad      	b.n	801af80 <_printf_i+0xf4>
 801b024:	4826      	ldr	r0, [pc, #152]	@ (801b0c0 <_printf_i+0x234>)
 801b026:	e7e9      	b.n	801affc <_printf_i+0x170>
 801b028:	6823      	ldr	r3, [r4, #0]
 801b02a:	f023 0320 	bic.w	r3, r3, #32
 801b02e:	6023      	str	r3, [r4, #0]
 801b030:	e7f6      	b.n	801b020 <_printf_i+0x194>
 801b032:	4616      	mov	r6, r2
 801b034:	e7bd      	b.n	801afb2 <_printf_i+0x126>
 801b036:	6833      	ldr	r3, [r6, #0]
 801b038:	6825      	ldr	r5, [r4, #0]
 801b03a:	6961      	ldr	r1, [r4, #20]
 801b03c:	1d18      	adds	r0, r3, #4
 801b03e:	6030      	str	r0, [r6, #0]
 801b040:	062e      	lsls	r6, r5, #24
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	d501      	bpl.n	801b04a <_printf_i+0x1be>
 801b046:	6019      	str	r1, [r3, #0]
 801b048:	e002      	b.n	801b050 <_printf_i+0x1c4>
 801b04a:	0668      	lsls	r0, r5, #25
 801b04c:	d5fb      	bpl.n	801b046 <_printf_i+0x1ba>
 801b04e:	8019      	strh	r1, [r3, #0]
 801b050:	2300      	movs	r3, #0
 801b052:	6123      	str	r3, [r4, #16]
 801b054:	4616      	mov	r6, r2
 801b056:	e7bc      	b.n	801afd2 <_printf_i+0x146>
 801b058:	6833      	ldr	r3, [r6, #0]
 801b05a:	1d1a      	adds	r2, r3, #4
 801b05c:	6032      	str	r2, [r6, #0]
 801b05e:	681e      	ldr	r6, [r3, #0]
 801b060:	6862      	ldr	r2, [r4, #4]
 801b062:	2100      	movs	r1, #0
 801b064:	4630      	mov	r0, r6
 801b066:	f7e5 f943 	bl	80002f0 <memchr>
 801b06a:	b108      	cbz	r0, 801b070 <_printf_i+0x1e4>
 801b06c:	1b80      	subs	r0, r0, r6
 801b06e:	6060      	str	r0, [r4, #4]
 801b070:	6863      	ldr	r3, [r4, #4]
 801b072:	6123      	str	r3, [r4, #16]
 801b074:	2300      	movs	r3, #0
 801b076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b07a:	e7aa      	b.n	801afd2 <_printf_i+0x146>
 801b07c:	6923      	ldr	r3, [r4, #16]
 801b07e:	4632      	mov	r2, r6
 801b080:	4649      	mov	r1, r9
 801b082:	4640      	mov	r0, r8
 801b084:	47d0      	blx	sl
 801b086:	3001      	adds	r0, #1
 801b088:	d0ad      	beq.n	801afe6 <_printf_i+0x15a>
 801b08a:	6823      	ldr	r3, [r4, #0]
 801b08c:	079b      	lsls	r3, r3, #30
 801b08e:	d413      	bmi.n	801b0b8 <_printf_i+0x22c>
 801b090:	68e0      	ldr	r0, [r4, #12]
 801b092:	9b03      	ldr	r3, [sp, #12]
 801b094:	4298      	cmp	r0, r3
 801b096:	bfb8      	it	lt
 801b098:	4618      	movlt	r0, r3
 801b09a:	e7a6      	b.n	801afea <_printf_i+0x15e>
 801b09c:	2301      	movs	r3, #1
 801b09e:	4632      	mov	r2, r6
 801b0a0:	4649      	mov	r1, r9
 801b0a2:	4640      	mov	r0, r8
 801b0a4:	47d0      	blx	sl
 801b0a6:	3001      	adds	r0, #1
 801b0a8:	d09d      	beq.n	801afe6 <_printf_i+0x15a>
 801b0aa:	3501      	adds	r5, #1
 801b0ac:	68e3      	ldr	r3, [r4, #12]
 801b0ae:	9903      	ldr	r1, [sp, #12]
 801b0b0:	1a5b      	subs	r3, r3, r1
 801b0b2:	42ab      	cmp	r3, r5
 801b0b4:	dcf2      	bgt.n	801b09c <_printf_i+0x210>
 801b0b6:	e7eb      	b.n	801b090 <_printf_i+0x204>
 801b0b8:	2500      	movs	r5, #0
 801b0ba:	f104 0619 	add.w	r6, r4, #25
 801b0be:	e7f5      	b.n	801b0ac <_printf_i+0x220>
 801b0c0:	0801b95d 	.word	0x0801b95d
 801b0c4:	0801b96e 	.word	0x0801b96e

0801b0c8 <memmove>:
 801b0c8:	4288      	cmp	r0, r1
 801b0ca:	b510      	push	{r4, lr}
 801b0cc:	eb01 0402 	add.w	r4, r1, r2
 801b0d0:	d902      	bls.n	801b0d8 <memmove+0x10>
 801b0d2:	4284      	cmp	r4, r0
 801b0d4:	4623      	mov	r3, r4
 801b0d6:	d807      	bhi.n	801b0e8 <memmove+0x20>
 801b0d8:	1e43      	subs	r3, r0, #1
 801b0da:	42a1      	cmp	r1, r4
 801b0dc:	d008      	beq.n	801b0f0 <memmove+0x28>
 801b0de:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b0e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b0e6:	e7f8      	b.n	801b0da <memmove+0x12>
 801b0e8:	4402      	add	r2, r0
 801b0ea:	4601      	mov	r1, r0
 801b0ec:	428a      	cmp	r2, r1
 801b0ee:	d100      	bne.n	801b0f2 <memmove+0x2a>
 801b0f0:	bd10      	pop	{r4, pc}
 801b0f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b0f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b0fa:	e7f7      	b.n	801b0ec <memmove+0x24>

0801b0fc <_realloc_r>:
 801b0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b100:	4607      	mov	r7, r0
 801b102:	4614      	mov	r4, r2
 801b104:	460d      	mov	r5, r1
 801b106:	b921      	cbnz	r1, 801b112 <_realloc_r+0x16>
 801b108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b10c:	4611      	mov	r1, r2
 801b10e:	f7ff bba5 	b.w	801a85c <_malloc_r>
 801b112:	b92a      	cbnz	r2, 801b120 <_realloc_r+0x24>
 801b114:	f7ff fcaa 	bl	801aa6c <_free_r>
 801b118:	4625      	mov	r5, r4
 801b11a:	4628      	mov	r0, r5
 801b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b120:	f000 f81a 	bl	801b158 <_malloc_usable_size_r>
 801b124:	4284      	cmp	r4, r0
 801b126:	4606      	mov	r6, r0
 801b128:	d802      	bhi.n	801b130 <_realloc_r+0x34>
 801b12a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b12e:	d8f4      	bhi.n	801b11a <_realloc_r+0x1e>
 801b130:	4621      	mov	r1, r4
 801b132:	4638      	mov	r0, r7
 801b134:	f7ff fb92 	bl	801a85c <_malloc_r>
 801b138:	4680      	mov	r8, r0
 801b13a:	b908      	cbnz	r0, 801b140 <_realloc_r+0x44>
 801b13c:	4645      	mov	r5, r8
 801b13e:	e7ec      	b.n	801b11a <_realloc_r+0x1e>
 801b140:	42b4      	cmp	r4, r6
 801b142:	4622      	mov	r2, r4
 801b144:	4629      	mov	r1, r5
 801b146:	bf28      	it	cs
 801b148:	4632      	movcs	r2, r6
 801b14a:	f7ff fc81 	bl	801aa50 <memcpy>
 801b14e:	4629      	mov	r1, r5
 801b150:	4638      	mov	r0, r7
 801b152:	f7ff fc8b 	bl	801aa6c <_free_r>
 801b156:	e7f1      	b.n	801b13c <_realloc_r+0x40>

0801b158 <_malloc_usable_size_r>:
 801b158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b15c:	1f18      	subs	r0, r3, #4
 801b15e:	2b00      	cmp	r3, #0
 801b160:	bfbc      	itt	lt
 801b162:	580b      	ldrlt	r3, [r1, r0]
 801b164:	18c0      	addlt	r0, r0, r3
 801b166:	4770      	bx	lr

0801b168 <_init>:
 801b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b16a:	bf00      	nop
 801b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b16e:	bc08      	pop	{r3}
 801b170:	469e      	mov	lr, r3
 801b172:	4770      	bx	lr

0801b174 <_fini>:
 801b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b176:	bf00      	nop
 801b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b17a:	bc08      	pop	{r3}
 801b17c:	469e      	mov	lr, r3
 801b17e:	4770      	bx	lr
